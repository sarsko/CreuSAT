module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module Ex_Evil_Interface
  val evil [@cfg:stackify] () : ()
end
module Ex_Evil
  let rec cfg evil [@cfg:stackify] () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Ex_Main_Interface
  val main [@cfg:stackify] () : ()
    ensures { true }
    
end
module Ex_Main
  clone Ex_Evil_Interface as Evil0
  let rec cfg main [@cfg:stackify] () : ()
    ensures { true }
    
   = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- Evil0.evil ();
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
