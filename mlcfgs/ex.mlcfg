module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type creusotcontracts_std1_vec_vec 't  
end
module Ex_Bing_Bing_Interface
  type self   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val bing [@cfg:stackify] (self : self) : usize
end
module Ex_Bing_Bing
  type self   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val bing [@cfg:stackify] (self : self) : usize
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl5_Resolve_Interface
  type t   
  use Type
  predicate resolve (self : Type.creusotcontracts_std1_vec_vec t)
end
module CreusotContracts_Std1_Vec_Impl5_Resolve
  type t   
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  predicate resolve (self : Type.creusotcontracts_std1_vec_vec t) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_Impl5
  type t   
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl5_Resolve as Resolve0 with type t = t, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_std1_vec_vec t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module Ex_Impl0_Bing_Interface
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val bing [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
end
module Ex_Impl0_Bing
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl5_Resolve as Resolve0 with type t = t, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve1.resolve
  let rec cfg bing [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize = 
  var _0 : usize;
  var self_1 : Type.creusotcontracts_std1_vec_vec t;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- (0 : usize);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Ex_Impl1_Bing_Interface
  type t   
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  val bing [@cfg:stackify] (self : t) : usize
end
module Ex_Impl1_Bing
  type t   
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  let rec cfg bing [@cfg:stackify] (self : t) : usize = 
  var _0 : usize;
  var self_1 : t;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- (0 : usize);
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t   
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t   
  predicate resolve (self : t) = 
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t   
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module Ex_Impl1
  type t   
  use prelude.Prelude
  clone Ex_Impl1_Bing_Interface as Bing0 with type t = t
  clone Ex_Bing_Bing_Interface as Bing1 with type self = t, val bing = Bing0.bing
end
module Ex_Main3_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  val main3 [@cfg:stackify] (u : Type.creusotcontracts_std1_vec_vec usize) : ()
end
module Ex_Main3
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = usize
  clone Ex_Impl1_Bing_Interface as Bing0 with type t = Type.creusotcontracts_std1_vec_vec usize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = Type.creusotcontracts_std1_vec_vec usize
  let rec cfg main3 [@cfg:stackify] (u : Type.creusotcontracts_std1_vec_vec usize) : () = 
  var _0 : ();
  var u_1 : Type.creusotcontracts_std1_vec_vec usize;
  var b_2 : usize;
  var _3 : Type.creusotcontracts_std1_vec_vec usize;
  {
    u_1 <- u;
    goto BB0
  }
  BB0 {
    _3 <- u_1;
    assume { Resolve0.resolve u_1 };
    b_2 <- Bing0.bing _3;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve b_2 };
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Int_Impl11_ModelTy
  use mach.int.Int
  type modelTy  = 
    int
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Int_Impl11_Model_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl11_Model
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : usize) : int = 
    UInt64.to_int self
end
module CreusotContracts_Logic_Int_Impl11
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Logic_Int_Impl11_Model as Model0
  clone CreusotContracts_Logic_Int_Impl11_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = usize, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = usize, type modelTy = ModelTy0.modelTy
end
module Ex_Main_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Int_Impl11_ModelTy as ModelTy15
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy14 with type t = usize,
  type ModelTy0.modelTy = ModelTy15.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy13 with type t = usize,
  type ModelTy0.modelTy = ModelTy14.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy12 with type t = usize,
  type ModelTy0.modelTy = ModelTy13.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy11 with type t = usize,
  type ModelTy0.modelTy = ModelTy12.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy10 with type t = usize,
  type ModelTy0.modelTy = ModelTy11.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy9 with type t = usize,
  type ModelTy0.modelTy = ModelTy10.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy8 with type t = usize,
  type ModelTy0.modelTy = ModelTy9.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy7 with type t = usize,
  type ModelTy0.modelTy = ModelTy8.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy6 with type t = usize,
  type ModelTy0.modelTy = ModelTy7.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy5 with type t = usize,
  type ModelTy0.modelTy = ModelTy6.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy4 with type t = usize,
  type ModelTy0.modelTy = ModelTy5.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy3 with type t = usize,
  type ModelTy0.modelTy = ModelTy4.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy2 with type t = usize,
  type ModelTy0.modelTy = ModelTy3.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = usize,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy1 with type t = usize,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = usize,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = usize,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val main [@cfg:stackify] (u : usize) : ()
    ensures { Model0.model u = Model1.model u }
    
end
module Ex_Main
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Int_Impl11_Model as Model16
  clone CreusotContracts_Logic_Int_Impl11_ModelTy as ModelTy15
  clone CreusotContracts_Logic_Model_Impl0_Model as Model15 with type t = usize,
  type ModelTy0.modelTy = ModelTy15.modelTy, function Model0.model = Model16.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy14 with type t = usize,
  type ModelTy0.modelTy = ModelTy15.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model14 with type t = usize,
  type ModelTy0.modelTy = ModelTy14.modelTy, function Model0.model = Model15.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy13 with type t = usize,
  type ModelTy0.modelTy = ModelTy14.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model13 with type t = usize,
  type ModelTy0.modelTy = ModelTy13.modelTy, function Model0.model = Model14.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy12 with type t = usize,
  type ModelTy0.modelTy = ModelTy13.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model12 with type t = usize,
  type ModelTy0.modelTy = ModelTy12.modelTy, function Model0.model = Model13.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy11 with type t = usize,
  type ModelTy0.modelTy = ModelTy12.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model11 with type t = usize,
  type ModelTy0.modelTy = ModelTy11.modelTy, function Model0.model = Model12.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy10 with type t = usize,
  type ModelTy0.modelTy = ModelTy11.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model10 with type t = usize,
  type ModelTy0.modelTy = ModelTy10.modelTy, function Model0.model = Model11.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy9 with type t = usize,
  type ModelTy0.modelTy = ModelTy10.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model9 with type t = usize,
  type ModelTy0.modelTy = ModelTy9.modelTy, function Model0.model = Model10.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy8 with type t = usize,
  type ModelTy0.modelTy = ModelTy9.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = usize,
  type ModelTy0.modelTy = ModelTy8.modelTy, function Model0.model = Model9.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy7 with type t = usize,
  type ModelTy0.modelTy = ModelTy8.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = usize,
  type ModelTy0.modelTy = ModelTy7.modelTy, function Model0.model = Model8.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy6 with type t = usize,
  type ModelTy0.modelTy = ModelTy7.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model6 with type t = usize,
  type ModelTy0.modelTy = ModelTy6.modelTy, function Model0.model = Model7.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy5 with type t = usize,
  type ModelTy0.modelTy = ModelTy6.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = usize,
  type ModelTy0.modelTy = ModelTy5.modelTy, function Model0.model = Model6.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy4 with type t = usize,
  type ModelTy0.modelTy = ModelTy5.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = usize,
  type ModelTy0.modelTy = ModelTy4.modelTy, function Model0.model = Model5.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy3 with type t = usize,
  type ModelTy0.modelTy = ModelTy4.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = usize,
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy2 with type t = usize,
  type ModelTy0.modelTy = ModelTy3.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = usize,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = usize,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy1 with type t = usize,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = usize,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = usize,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = usize
  let rec cfg main [@cfg:stackify] (u : usize) : ()
    ensures { Model0.model u = Model1.model u }
    
   = 
  var _0 : ();
  var u_1 : usize;
  {
    u_1 <- u;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve u_1 };
    _0 <- ();
    return _0
  }
  
end
module Ex_Impl0
  type t   
  use Type
  clone Ex_Impl0_Bing_Interface as Bing0 with type t = t
  clone Ex_Bing_Bing_Interface as Bing1 with type self = Type.creusotcontracts_std1_vec_vec t, val bing = Bing0.bing
end
