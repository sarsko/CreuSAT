module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module Ex_Main_Interface
  val main [@cfg:stackify] () : ()
end
module Ex_Main
  let rec cfg main [@cfg:stackify] () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Ex_Ex_Interface
  predicate ex ()
end
module Ex_Ex
  predicate ex () = 
    true
end
module Ex_Lemma_Interface
  function lemma' () : ()
end
module Ex_Lemma
  clone Ex_Ex_Interface as Ex0
  function lemma' () : () = 
    let _ = Ex0.ex () in ()
end
module Ex_Ex_Interface
  predicate ex_______ ()
end
module Ex_Ex
  predicate ex_______ () = 
    true
end
