module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type lib_ghost_ghost 't = 
    | Lib_Ghost_Ghost opaque_ptr
    
  type lib_lit_lit  = 
    | Lib_Lit_Lit usize bool
    
  function lib_lit_lit_Lit_polarity (self : lib_lit_lit) : bool
  val lib_lit_lit_Lit_polarity (self : lib_lit_lit) : bool
    ensures { result = lib_lit_lit_Lit_polarity self }
    
  axiom lib_lit_lit_Lit_polarity_acc : forall a : usize, b : bool . lib_lit_lit_Lit_polarity (Lib_Lit_Lit a b : lib_lit_lit) = b
  function lib_lit_lit_Lit_idx (self : lib_lit_lit) : usize
  val lib_lit_lit_Lit_idx (self : lib_lit_lit) : usize
    ensures { result = lib_lit_lit_Lit_idx self }
    
  axiom lib_lit_lit_Lit_idx_acc : forall a : usize, b : bool . lib_lit_lit_Lit_idx (Lib_Lit_Lit a b : lib_lit_lit) = a
  type creusotcontracts_std1_vec_vec 't  
  type lib_clause_clause  = 
    | Lib_Clause_Clause (creusotcontracts_std1_vec_vec (lib_lit_lit))
    
  function lib_clause_clause_Clause_0 (self : lib_clause_clause) : creusotcontracts_std1_vec_vec (lib_lit_lit)
  val lib_clause_clause_Clause_0 (self : lib_clause_clause) : creusotcontracts_std1_vec_vec (lib_lit_lit)
    ensures { result = lib_clause_clause_Clause_0 self }
    
  axiom lib_clause_clause_Clause_0_acc : forall a : creusotcontracts_std1_vec_vec (lib_lit_lit) . lib_clause_clause_Clause_0 (Lib_Clause_Clause a : lib_clause_clause) = a
  type lib_assignments_assignedstate  = 
    | Lib_Assignments_AssignedState_Unset
    | Lib_Assignments_AssignedState_Positive
    | Lib_Assignments_AssignedState_Negative
    
  type lib_assignments_assignments  = 
    | Lib_Assignments_Assignments (creusotcontracts_std1_vec_vec (lib_assignments_assignedstate))
    
  function lib_assignments_assignments_Assignments_0 (self : lib_assignments_assignments) : creusotcontracts_std1_vec_vec (lib_assignments_assignedstate)
    
  val lib_assignments_assignments_Assignments_0 (self : lib_assignments_assignments) : creusotcontracts_std1_vec_vec (lib_assignments_assignedstate)
    ensures { result = lib_assignments_assignments_Assignments_0 self }
    
  axiom lib_assignments_assignments_Assignments_0_acc : forall a : creusotcontracts_std1_vec_vec (lib_assignments_assignedstate) . lib_assignments_assignments_Assignments_0 (Lib_Assignments_Assignments a : lib_assignments_assignments) = a
  type lib_formula_formula  = 
    | Lib_Formula_Formula (creusotcontracts_std1_vec_vec (lib_clause_clause)) usize
    
  function lib_formula_formula_Formula_clauses (self : lib_formula_formula) : creusotcontracts_std1_vec_vec (lib_clause_clause)
    
  val lib_formula_formula_Formula_clauses (self : lib_formula_formula) : creusotcontracts_std1_vec_vec (lib_clause_clause)
    ensures { result = lib_formula_formula_Formula_clauses self }
    
  axiom lib_formula_formula_Formula_clauses_acc : forall a : creusotcontracts_std1_vec_vec (lib_clause_clause), b : usize . lib_formula_formula_Formula_clauses (Lib_Formula_Formula a b : lib_formula_formula) = a
  function lib_formula_formula_Formula_num_vars (self : lib_formula_formula) : usize
  val lib_formula_formula_Formula_num_vars (self : lib_formula_formula) : usize
    ensures { result = lib_formula_formula_Formula_num_vars self }
    
  axiom lib_formula_formula_Formula_num_vars_acc : forall a : creusotcontracts_std1_vec_vec (lib_clause_clause), b : usize . lib_formula_formula_Formula_num_vars (Lib_Formula_Formula a b : lib_formula_formula) = b
  type lib_formula_satstate  = 
    | Lib_Formula_SatState_Unknown
    | Lib_Formula_SatState_Sat
    | Lib_Formula_SatState_Unsat
    
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
end
module Lib_SolverDpll_Main_Interface
  val main () : ()
end
module Lib_SolverDpll_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module Lib_Ghost_Impl0_ModelTy
  type t   
  type modelTy  = 
    t
end
module Lib_Ghost_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.lib_ghost_ghost t) : t
end
module Lib_Ghost_Impl0_Model
  type t   
  use Type
  function model (self : Type.lib_ghost_ghost t) : t
end
module Lib_Ghost_Impl0
  type t   
  use Type
  clone Lib_Ghost_Impl0_Model as Model0 with type t = t
  clone Lib_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.lib_ghost_ghost t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.lib_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module Lib_Ghost_Impl1_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone Lib_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record (a : t) : Type.lib_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module Lib_Ghost_Impl1_Record
  type t   
  use prelude.Prelude
  use Type
  clone Lib_Ghost_Impl0_Model as Model0 with type t = t
  val record (a : t) : Type.lib_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module Core_Clone_Clone_Clone_Interface
  type self   
  use prelude.Prelude
  val clone' (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self   
  use prelude.Prelude
  val clone' (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self   
  use prelude.Prelude
  val clone_from (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self   
  use prelude.Prelude
  val clone_from (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module Lib_Lit_Impl2_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' (self : Type.lib_lit_lit) : Type.lib_lit_lit
end
module Lib_Lit_Impl2_Clone
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_lit_lit
  let rec cfg clone' (self : Type.lib_lit_lit) : Type.lib_lit_lit = 
  var _0 : Type.lib_lit_lit;
  var self_1 : Type.lib_lit_lit;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- self_1;
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module Lib_Lit_Impl2
  use Type
  clone Lib_Lit_Impl2_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.lib_lit_lit, val clone' = Clone0.clone'
end
module Lib_Clause_Impl0_ModelTy
  use seq.Seq
  use Type
  type modelTy  = 
    Seq.seq (Type.lib_lit_lit)
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module Lib_Clause_Impl0_Model_Interface
  use Type
  use seq.Seq
  function model (self : Type.lib_clause_clause) : Seq.seq (Type.lib_lit_lit)
end
module Lib_Clause_Impl0_Model
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_lit_lit
  function model (self : Type.lib_clause_clause) : Seq.seq (Type.lib_lit_lit) = 
    Model0.model (Type.lib_clause_clause_Clause_0 self)
end
module Lib_Clause_Impl0
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.lib_clause_clause,
  type modelTy = ModelTy0.modelTy
end
module Lib_Lit_Impl0_LitIn_Interface
  use Type
  predicate lit_in (self : Type.lib_lit_lit) (c : Type.lib_clause_clause)
end
module Lib_Lit_Impl0_LitIn
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate lit_in (self : Type.lib_lit_lit) (c : Type.lib_clause_clause) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) -> Seq.get (Model0.model c) i = self
end
module Lib_Assignments_Impl0_ModelTy
  use seq.Seq
  use Type
  type modelTy  = 
    Seq.seq (Type.lib_assignments_assignedstate)
end
module Lib_Assignments_Impl0_Model_Interface
  use Type
  use seq.Seq
  function model (self : Type.lib_assignments_assignments) : Seq.seq (Type.lib_assignments_assignedstate)
end
module Lib_Assignments_Impl0_Model
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignedstate
  function model (self : Type.lib_assignments_assignments) : Seq.seq (Type.lib_assignments_assignedstate) = 
    Model0.model (Type.lib_assignments_assignments_Assignments_0 self)
end
module Lib_Assignments_Impl0
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.lib_assignments_assignments,
  type modelTy = ModelTy0.modelTy
end
module Lib_Clause_Impl1_Unsat_Interface
  use Type
  predicate unsat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl1_Unsat
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt64
  clone Lib_Assignments_Impl0_Model_Interface as Model1
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate unsat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> match (Seq.get (Model1.model a) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self) i)))) with
      | Type.Lib_Assignments_AssignedState_Positive -> not (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model self) i))
      | Type.Lib_Assignments_AssignedState_Negative -> Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model self) i)
      | Type.Lib_Assignments_AssignedState_Unset -> false
      end
end
module Lib_Predicates_SatClauseInner_Interface
  use seq.Seq
  use Type
  predicate sat_clause_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (c : Type.lib_clause_clause)
end
module Lib_Predicates_SatClauseInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate sat_clause_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (c : Type.lib_clause_clause) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) && match (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) i)))) with
      | Type.Lib_Assignments_AssignedState_Positive -> Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) i)
      | Type.Lib_Assignments_AssignedState_Negative -> not (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) i))
      | Type.Lib_Assignments_AssignedState_Unset -> false
      end
end
module Lib_Clause_Impl1_Sat_Interface
  use Type
  clone Lib_Predicates_SatClauseInner_Interface as SatClauseInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate sat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl1_Sat
  use Type
  clone Lib_Predicates_SatClauseInner_Interface as SatClauseInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate sat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    SatClauseInner0.sat_clause_inner (Model0.model a) self
  axiom sat_spec : forall self : Type.lib_clause_clause, a : Type.lib_assignments_assignments . sat self a = SatClauseInner0.sat_clause_inner (Model0.model a) self
end
module Lib_Clause_Impl1_Sat_Impl
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model2 with function Model0.model = Model3.model
  clone Lib_Predicates_SatClauseInner as SatClauseInner0 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model1.model
  let rec ghost function sat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) : bool
    ensures { result = SatClauseInner0.sat_clause_inner (Model0.model a) self }
    
   = 
    let a' = Model0.model a in SatClauseInner0.sat_clause_inner a' self
end
module Lib_Clause_Impl1_Unknown_Interface
  use Type
  predicate unknown (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl1_Unknown
  use Type
  clone Lib_Clause_Impl1_Unsat_Interface as Unsat0
  clone Lib_Predicates_SatClauseInner_Interface as SatClauseInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  clone Lib_Clause_Impl1_Sat_Interface as Sat0 with function Model0.model = Model0.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, axiom .
  predicate unknown (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    not (Sat0.sat self a) && not (Unsat0.unsat self a)
end
module Lib_Clause_Impl1_Contains_Interface
  use Type
  predicate contains (self : Type.lib_clause_clause) (l : Type.lib_lit_lit)
end
module Lib_Clause_Impl1_Contains
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate contains (self : Type.lib_clause_clause) (l : Type.lib_lit_lit) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model self) && Seq.get (Model0.model self) i = l
end
module Lib_Clause_Impl1_InFormula_Interface
  use Type
  predicate in_formula (self : Type.lib_clause_clause) (f : Type.lib_formula_formula)
end
module Lib_Clause_Impl1_InFormula
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate in_formula (self : Type.lib_clause_clause) (f : Type.lib_formula_formula) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) && Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i = self
end
module Lib_Assignments_Impl1_Invariant_Interface
  use Type
  predicate invariant' (self : Type.lib_assignments_assignments) (f : Type.lib_formula_formula)
end
module Lib_Assignments_Impl1_Invariant
  use Type
  use mach.int.UInt64
  use seq.Seq
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate invariant' (self : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) = 
    UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length (Model0.model self)
end
module Lib_Predicates_VarsInRange_Interface
  use mach.int.Int
  use Type
  predicate vars_in_range (n : int) (c : Type.lib_clause_clause)
end
module Lib_Predicates_VarsInRange
  use mach.int.Int
  use Type
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate vars_in_range (n : int) (c : Type.lib_clause_clause) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model c) -> 0 <= UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) i)) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) i)) < n
end
module Lib_Formula_Impl1_Invariant_Interface
  use Type
  predicate invariant' (self : Type.lib_formula_formula)
end
module Lib_Formula_Impl1_Invariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Lib_Predicates_VarsInRange_Interface as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate invariant' (self : Type.lib_formula_formula) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self)) -> VarsInRange0.vars_in_range (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars self)) (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self)) i)
end
module Lib_Clause_Impl2_IsSat_Interface
  use prelude.Prelude
  use Type
  clone Lib_Predicates_SatClauseInner_Interface as SatClauseInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  clone Lib_Clause_Impl1_Sat_Interface as Sat0 with function Model0.model = Model0.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, axiom .
  clone Lib_Clause_Impl1_InFormula_Interface as InFormula0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val is_sat (self : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {InFormula0.in_formula self f}
    ensures { result = Sat0.sat self a }
    
end
module Lib_Clause_Impl2_IsSat
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Predicates_SatClauseInner as SatClauseInner0 with function Model0.model = Model3.model
  clone Lib_Predicates_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_Sat as Sat0 with function Model0.model = Model0.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, axiom .
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Clause_Impl1_InFormula as InFormula0 with function Model0.model = Model1.model
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  val is_sat (self : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {InFormula0.in_formula self f}
    ensures { result = Sat0.sat self a }
    
end
module Lib_Clause_Impl2_IsUnsat_Interface
  use prelude.Prelude
  use Type
  clone Lib_Clause_Impl1_Unsat_Interface as Unsat0
  clone Lib_Clause_Impl1_InFormula_Interface as InFormula0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val is_unsat (self : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {InFormula0.in_formula self f}
    ensures { result = Unsat0.unsat self a }
    
end
module Lib_Clause_Impl2_IsUnsat
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model2 with function Model0.model = Model4.model
  clone Lib_Predicates_VarsInRange as VarsInRange0 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_Unsat as Unsat0 with function Model0.model = Model2.model, function Model1.model = Model0.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Clause_Impl1_InFormula as InFormula0 with function Model0.model = Model1.model
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  val is_unsat (self : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {InFormula0.in_formula self f}
    ensures { result = Unsat0.unsat self a }
    
end
module Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface
  type self   
  use prelude.Prelude
  val assert_receiver_is_total_eq (self : self) : ()
    requires {false}
    
end
module Core_Cmp_Eq_AssertReceiverIsTotalEq
  type self   
  use prelude.Prelude
  val assert_receiver_is_total_eq (self : self) : ()
    requires {false}
    
end
module Lib_Assignments_Impl5_AssertReceiverIsTotalEq_Interface
  use prelude.Prelude
  use Type
  val assert_receiver_is_total_eq (self : Type.lib_assignments_assignedstate) : ()
end
module Lib_Assignments_Impl5_AssertReceiverIsTotalEq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_assignments_assignedstate
  let rec cfg assert_receiver_is_total_eq (self : Type.lib_assignments_assignedstate) : () = 
  var _0 : ();
  var self_1 : Type.lib_assignments_assignedstate;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Lib_Assignments_Impl5
  use Type
  clone Lib_Assignments_Impl5_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Type.lib_assignments_assignedstate,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Core_Cmp_PartialEq_Eq_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val eq (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Eq
  type self   
  type rhs   
  use prelude.Prelude
  val eq (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Ne_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val ne (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Ne
  type self   
  type rhs   
  use prelude.Prelude
  val ne (self : self) (other : rhs) : bool
    requires {false}
    
end
module Lib_Assignments_Impl6_Eq_Interface
  use prelude.Prelude
  use Type
  val eq (self : Type.lib_assignments_assignedstate) (other : Type.lib_assignments_assignedstate) : bool
end
module Lib_Assignments_Impl6_Eq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = (Type.lib_assignments_assignedstate, Type.lib_assignments_assignedstate)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_assignments_assignedstate
  let rec cfg eq (self : Type.lib_assignments_assignedstate) (other : Type.lib_assignments_assignedstate) : bool = 
  var _0 : bool;
  var self_1 : Type.lib_assignments_assignedstate;
  var other_2 : Type.lib_assignments_assignedstate;
  var _3 : ();
  var _4 : (Type.lib_assignments_assignedstate, Type.lib_assignments_assignedstate);
  var _5 : Type.lib_assignments_assignedstate;
  var _6 : Type.lib_assignments_assignedstate;
  var _7 : isize;
  var _8 : isize;
  var _9 : isize;
  var _10 : isize;
  {
    self_1 <- self;
    other_2 <- other;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _5 };
    _5 <- self_1;
    assume { Resolve0.resolve self_1 };
    assume { Resolve0.resolve _6 };
    _6 <- other_2;
    assume { Resolve0.resolve other_2 };
    _4 <- (_5, _6);
    switch (let (a, _) = _4 in a)
      | Type.Lib_Assignments_AssignedState_Unset -> goto BB1
      | Type.Lib_Assignments_AssignedState_Positive -> goto BB4
      | Type.Lib_Assignments_AssignedState_Negative -> goto BB6
      end
  }
  BB1 {
    assume { Resolve1.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Type.Lib_Assignments_AssignedState_Unset -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    goto BB8
  }
  BB3 {
    _0 <- false;
    goto BB11
  }
  BB4 {
    assume { Resolve1.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Type.Lib_Assignments_AssignedState_Positive -> goto BB5
      | _ -> goto BB3
      end
  }
  BB5 {
    goto BB9
  }
  BB6 {
    assume { Resolve1.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Type.Lib_Assignments_AssignedState_Negative -> goto BB7
      | _ -> goto BB3
      end
  }
  BB7 {
    goto BB10
  }
  BB8 {
    _0 <- true;
    goto BB11
  }
  BB9 {
    _0 <- true;
    goto BB11
  }
  BB10 {
    _0 <- true;
    goto BB11
  }
  BB11 {
    return _0
  }
  BB12 {
    assume { Resolve1.resolve _4 };
    goto BB3
  }
  
end
module Lib_Assignments_Impl6
  use Type
  clone Lib_Assignments_Impl6_Eq_Interface as Eq0
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Type.lib_assignments_assignedstate,
  type rhs = Type.lib_assignments_assignedstate, val eq = Eq0.eq
end
module Lib_Predicates_CompatibleInner_Interface
  use seq.Seq
  use Type
  predicate compatible_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (a2 : Seq.seq (Type.lib_assignments_assignedstate))
    
end
module Lib_Predicates_CompatibleInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  predicate compatible_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (a2 : Seq.seq (Type.lib_assignments_assignedstate))
    
   = 
    Seq.length a = Seq.length a2 && (forall i : (int) . 0 <= i && i < Seq.length a -> Seq.get a i = Type.Lib_Assignments_AssignedState_Unset || Seq.get a i = Seq.get a2 i)
end
module Lib_Assignments_Impl1_Compatible_Interface
  use Type
  predicate compatible (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments)
end
module Lib_Assignments_Impl1_Compatible
  use Type
  clone Lib_Predicates_CompatibleInner_Interface as CompatibleInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate compatible (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments) = 
    CompatibleInner0.compatible_inner (Model0.model self) (Model0.model a2)
end
module Lib_Assignments_Impl1_Complete_Interface
  use Type
  predicate complete (self : Type.lib_assignments_assignments)
end
module Lib_Assignments_Impl1_Complete
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate complete (self : Type.lib_assignments_assignments) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> not (Seq.get (Model0.model self) i = Type.Lib_Assignments_AssignedState_Unset)
end
module Lib_Assignments_Impl1_CompatibleComplete_Interface
  use Type
  predicate compatible_complete (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments)
end
module Lib_Assignments_Impl1_CompatibleComplete
  use Type
  clone Lib_Assignments_Impl1_Complete_Interface as Complete0
  clone Lib_Assignments_Impl1_Compatible_Interface as Compatible0
  predicate compatible_complete (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments) = 
    Compatible0.compatible self a2 && Complete0.complete a2
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module Lib_Assignments_Impl2_CloneAssignmentVector_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.lib_assignments_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val clone_assignment_vector (self : Type.lib_assignments_assignments) (v : Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate)) : Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate)
    ensures { v = result }
    ensures { Seq.length (Model0.model v) = Seq.length (Model1.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model v) -> Seq.get (Model0.model v) i = Seq.get (Model1.model result) i }
    
end
module Lib_Assignments_Impl2_CloneAssignmentVector
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_assignments_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val clone_assignment_vector (self : Type.lib_assignments_assignments) (v : Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate)) : Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate)
    ensures { v = result }
    ensures { Seq.length (Model0.model v) = Seq.length (Model1.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model v) -> Seq.get (Model0.model v) i = Seq.get (Model1.model result) i }
    
end
module Lib_Assignments_Impl2_Clone_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Lib_Assignments_Impl0_Model_Interface as Model1
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val clone' (self : Type.lib_assignments_assignments) : Type.lib_assignments_assignments
    ensures { self = result }
    ensures { Seq.length (Model0.model self) = Seq.length (Model1.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Seq.get (Model0.model self) i = Seq.get (Model1.model result) i }
    
end
module Lib_Assignments_Impl2_Clone
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val clone' (self : Type.lib_assignments_assignments) : Type.lib_assignments_assignments
    ensures { self = result }
    ensures { Seq.length (Model0.model self) = Seq.length (Model1.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Seq.get (Model0.model self) i = Seq.get (Model1.model result) i }
    
end
module Lib_Assignments_Impl2_New_Interface
  use prelude.Prelude
  use Type
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  val new (f : Type.lib_formula_formula) : Type.lib_assignments_assignments
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result f }
    
end
module Lib_Assignments_Impl2_New
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model2 with function Model0.model = Model4.model
  clone Lib_Predicates_VarsInRange as VarsInRange0 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  val new (f : Type.lib_formula_formula) : Type.lib_assignments_assignments
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result f }
    
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module Lib_Assignments_Impl2_Assign_Interface
  use mach.int.UInt64
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone Lib_Assignments_Impl1_Compatible_Interface as Compatible0
  clone Lib_Assignments_Impl0_Model_Interface as Model1
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val assign (self : borrowed (Type.lib_assignments_assignments)) (ix : usize) (s : Type.lib_assignments_assignedstate) (_f : Type.lib_formula_formula) : ()
    requires {Seq.get (Model0.model self) (UInt64.to_int ix) = Type.Lib_Assignments_AssignedState_Unset}
    requires {0 <= UInt64.to_int ix && UInt64.to_int ix < Seq.length (Model0.model self)}
    requires {Invariant0.invariant' ( * self) _f}
    requires {Invariant1.invariant' _f}
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && j <> UInt64.to_int ix -> Seq.get (Model1.model ( * self)) j = Seq.get (Model1.model ( ^ self)) j }
    ensures { Seq.get (Model1.model ( ^ self)) (UInt64.to_int ix) = s }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module Lib_Assignments_Impl2_Assign
  use mach.int.UInt64
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone Lib_Predicates_VarsInRange as VarsInRange0 with function Model0.model = Model4.model
  clone Lib_Predicates_CompatibleInner as CompatibleInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model1.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val assign (self : borrowed (Type.lib_assignments_assignments)) (ix : usize) (s : Type.lib_assignments_assignedstate) (_f : Type.lib_formula_formula) : ()
    requires {Seq.get (Model0.model self) (UInt64.to_int ix) = Type.Lib_Assignments_AssignedState_Unset}
    requires {0 <= UInt64.to_int ix && UInt64.to_int ix < Seq.length (Model0.model self)}
    requires {Invariant0.invariant' ( * self) _f}
    requires {Invariant1.invariant' _f}
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && j <> UInt64.to_int ix -> Seq.get (Model1.model ( * self)) j = Seq.get (Model1.model ( ^ self)) j }
    ensures { Seq.get (Model1.model ( ^ self)) (UInt64.to_int ix) = s }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module Lib_Assignments_Impl2_FindUnassigned_Interface
  use mach.int.UInt64
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Lib_Assignments_Impl1_Complete_Interface as Complete0
  val find_unassigned (self : Type.lib_assignments_assignments) : usize
    requires {not (Complete0.complete self)}
    ensures { Seq.get (Model0.model self) (UInt64.to_int result) = Type.Lib_Assignments_AssignedState_Unset }
    ensures { UInt64.to_int result < Seq.length (Model0.model self) }
    
end
module Lib_Assignments_Impl2_FindUnassigned
  use mach.int.UInt64
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model1.model
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val find_unassigned (self : Type.lib_assignments_assignments) : usize
    requires {not (Complete0.complete self)}
    ensures { Seq.get (Model0.model self) (UInt64.to_int result) = Type.Lib_Assignments_AssignedState_Unset }
    ensures { UInt64.to_int result < Seq.length (Model0.model self) }
    
end
module Lib_Formula_Impl4_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' (self : Type.lib_formula_satstate) : Type.lib_formula_satstate
end
module Lib_Formula_Impl4_Clone
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_formula_satstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_satstate
  let rec cfg clone' (self : Type.lib_formula_satstate) : Type.lib_formula_satstate = 
  var _0 : Type.lib_formula_satstate;
  var self_1 : Type.lib_formula_satstate;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- self_1;
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module Lib_Formula_Impl4
  use Type
  clone Lib_Formula_Impl4_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.lib_formula_satstate,
  val clone' = Clone0.clone'
end
module Lib_Formula_Impl6_AssertReceiverIsTotalEq_Interface
  use prelude.Prelude
  use Type
  val assert_receiver_is_total_eq (self : Type.lib_formula_satstate) : ()
end
module Lib_Formula_Impl6_AssertReceiverIsTotalEq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_satstate
  let rec cfg assert_receiver_is_total_eq (self : Type.lib_formula_satstate) : () = 
  var _0 : ();
  var self_1 : Type.lib_formula_satstate;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Lib_Formula_Impl6
  use Type
  clone Lib_Formula_Impl6_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Type.lib_formula_satstate,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Lib_Formula_Impl0_Eq_Interface
  use prelude.Prelude
  use Type
  val eq (self : Type.lib_formula_satstate) (other : Type.lib_formula_satstate) : bool
end
module Lib_Formula_Impl0_Eq
  use prelude.Prelude
  use Type
  val eq (self : Type.lib_formula_satstate) (other : Type.lib_formula_satstate) : bool
end
module Lib_Formula_Impl0
  use Type
  clone Lib_Formula_Impl0_Eq_Interface as Eq0
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Type.lib_formula_satstate,
  type rhs = Type.lib_formula_satstate, val eq = Eq0.eq
end
module Lib_Formula_Impl1_Sat_Interface
  use Type
  predicate sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_Sat
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Lib_Predicates_SatClauseInner_Interface as SatClauseInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model1
  clone Lib_Clause_Impl1_Sat_Interface as Sat0 with function Model0.model = Model1.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self)) -> Sat0.sat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self)) i) a
end
module Lib_Predicates_EventuallySatFormulaInner_Interface
  use seq.Seq
  use Type
  predicate eventually_sat_formula_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula)
    
end
module Lib_Predicates_EventuallySatFormulaInner
  use seq.Seq
  use Type
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Predicates_CompatibleInner_Interface as CompatibleInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate eventually_sat_formula_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula)
    
   = 
    exists a2 : (Type.lib_assignments_assignments) . CompatibleInner0.compatible_inner a (Model0.model a2) && Sat0.sat f a2
end
module Lib_Formula_Impl1_EventuallySat_Interface
  use Type
  predicate eventually_sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_EventuallySat
  use Type
  clone Lib_Predicates_EventuallySatFormulaInner_Interface as EventuallySatFormulaInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate eventually_sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    EventuallySatFormulaInner0.eventually_sat_formula_inner (Model0.model a) self
end
module Lib_Predicates_CompleteInner_Interface
  use seq.Seq
  use Type
  predicate complete_inner (a : Seq.seq (Type.lib_assignments_assignedstate))
end
module Lib_Predicates_CompleteInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  predicate complete_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) = 
    forall i : (int) . 0 <= i && i < Seq.length a -> not (Seq.get a i = Type.Lib_Assignments_AssignedState_Unset)
end
module Lib_Predicates_CompatibleCompleteInner_Interface
  use seq.Seq
  use Type
  predicate compatible_complete_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (a2 : Seq.seq (Type.lib_assignments_assignedstate))
    
end
module Lib_Predicates_CompatibleCompleteInner
  use seq.Seq
  use Type
  clone Lib_Predicates_CompleteInner_Interface as CompleteInner0
  clone Lib_Predicates_CompatibleInner_Interface as CompatibleInner0
  predicate compatible_complete_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (a2 : Seq.seq (Type.lib_assignments_assignedstate))
    
   = 
    CompatibleInner0.compatible_inner a a2 && CompleteInner0.complete_inner a2
end
module Lib_Predicates_NotSatClauseInner_Interface
  use seq.Seq
  use Type
  predicate not_sat_clause_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (c : Type.lib_clause_clause)
end
module Lib_Predicates_NotSatClauseInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate not_sat_clause_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (c : Type.lib_clause_clause) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model c) -> match (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) i)))) with
      | Type.Lib_Assignments_AssignedState_Positive -> not (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) i))
      | Type.Lib_Assignments_AssignedState_Negative -> Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) i)
      | Type.Lib_Assignments_AssignedState_Unset -> false
      end
end
module Lib_Predicates_NotSatFormulaInner_Interface
  use seq.Seq
  use Type
  predicate not_sat_formula_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula)
end
module Lib_Predicates_NotSatFormulaInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone Lib_Predicates_NotSatClauseInner_Interface as NotSatClauseInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate not_sat_formula_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) && NotSatClauseInner0.not_sat_clause_inner a (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i)
end
module Lib_Predicates_EventuallyUnsatFormulaInner_Interface
  use seq.Seq
  use Type
  predicate eventually_unsat_formula_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula)
    
end
module Lib_Predicates_EventuallyUnsatFormulaInner
  use seq.Seq
  use Type
  clone Lib_Predicates_NotSatFormulaInner_Interface as NotSatFormulaInner0
  clone Lib_Predicates_CompatibleCompleteInner_Interface as CompatibleCompleteInner0
  predicate eventually_unsat_formula_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula)
    
   = 
    forall a2 : (Seq.seq (Type.lib_assignments_assignedstate)) . CompatibleCompleteInner0.compatible_complete_inner a a2 -> NotSatFormulaInner0.not_sat_formula_inner a2 f
end
module Lib_Formula_Impl1_EventuallyUnsat_Interface
  use Type
  predicate eventually_unsat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_EventuallyUnsat
  use Type
  clone Lib_Predicates_EventuallyUnsatFormulaInner_Interface as EventuallyUnsatFormulaInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate eventually_unsat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    EventuallyUnsatFormulaInner0.eventually_unsat_formula_inner (Model0.model a) self
end
module Lib_Formula_Impl1_Unsat_Interface
  use Type
  predicate unsat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_Unsat
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Lib_Clause_Impl1_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate unsat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self)) && Unsat0.unsat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self)) i) a
end
module Lib_Formula_Impl2_IsSat_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val is_sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Sat0.sat self a }
    
end
module Lib_Formula_Impl2_IsSat
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Predicates_SatClauseInner as SatClauseInner0 with function Model0.model = Model3.model
  clone Lib_Predicates_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_Sat as Sat1 with function Model0.model = Model0.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, axiom .
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model1.model, predicate Sat0.sat = Sat1.sat,
  function Model1.model = Model0.model, predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  val is_sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Sat0.sat self a }
    
end
module Lib_Formula_Impl2_IsUnsat_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val is_unsat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Unsat0.unsat self a }
    
end
module Lib_Formula_Impl2_IsUnsat
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Predicates_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_Unsat as Unsat1 with function Model0.model = Model3.model, function Model1.model = Model0.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate Unsat0.unsat = Unsat1.unsat
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  val is_unsat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Unsat0.unsat self a }
    
end
module Lib_Formula_Impl2_Eval_Interface
  use Type
  use prelude.Prelude
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Assignments_Impl1_Complete_Interface as Complete0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val eval (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : Type.lib_formula_satstate
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Type.Lib_Formula_SatState_Unknown -> not (Complete0.complete a) }
    ensures { (result = Type.Lib_Formula_SatState_Unsat) = Unsat0.unsat self a }
    ensures { (result = Type.Lib_Formula_SatState_Sat) = Sat0.sat self a }
    
end
module Lib_Formula_Impl2_Eval
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Predicates_SatClauseInner as SatClauseInner0 with function Model0.model = Model3.model
  clone Lib_Predicates_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_Sat as Sat1 with function Model0.model = Model0.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, axiom .
  clone Lib_Clause_Impl1_Unsat as Unsat1 with function Model0.model = Model3.model, function Model1.model = Model0.model
  clone Lib_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model0.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model1.model, predicate Sat0.sat = Sat1.sat,
  function Model1.model = Model0.model, predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate Unsat0.unsat = Unsat1.unsat
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  val eval (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : Type.lib_formula_satstate
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Type.Lib_Formula_SatState_Unknown -> not (Complete0.complete a) }
    ensures { (result = Type.Lib_Formula_SatState_Unsat) = Unsat0.unsat self a }
    ensures { (result = Type.Lib_Formula_SatState_Sat) = Sat0.sat self a }
    
end
module Lib_SolverDpll_Inner_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_EventuallySat_Interface as EventuallySat0
  clone Lib_Formula_Impl1_EventuallyUnsat_Interface as EventuallyUnsat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val inner (f : Type.lib_formula_formula) (a : borrowed (Type.lib_assignments_assignments)) : bool
    requires {Invariant0.invariant' ( * a) f}
    requires {Invariant1.invariant' f}
    ensures { result = false -> EventuallyUnsat0.eventually_unsat f ( * a) }
    ensures { result = true -> EventuallySat0.eventually_sat f ( * a) }
    ensures { Invariant0.invariant' ( ^ a) f }
    
end
module Lib_SolverDpll_Inner
  use prelude.Prelude
  use Type
  clone Lib_Predicates_CompleteInner as CompleteInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Predicates_SatClauseInner as SatClauseInner0 with function Model0.model = Model3.model
  clone Lib_Predicates_NotSatClauseInner as NotSatClauseInner0 with function Model0.model = Model3.model
  clone Lib_Predicates_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone Lib_Predicates_CompatibleInner as CompatibleInner0
  clone Lib_Predicates_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_Sat as Sat1 with function Model0.model = Model0.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, axiom .
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model1.model, predicate Sat0.sat = Sat1.sat,
  function Model1.model = Model0.model, predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner
  clone Lib_Predicates_EventuallySatFormulaInner as EventuallySatFormulaInner0 with function Model0.model = Model0.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner, predicate Sat0.sat = Sat0.sat
  clone Lib_Formula_Impl1_EventuallySat as EventuallySat0 with function Model0.model = Model0.model,
  predicate EventuallySatFormulaInner0.eventually_sat_formula_inner = EventuallySatFormulaInner0.eventually_sat_formula_inner
  clone Lib_Predicates_NotSatFormulaInner as NotSatFormulaInner0 with function Model0.model = Model1.model,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner
  clone Lib_Predicates_EventuallyUnsatFormulaInner as EventuallyUnsatFormulaInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate NotSatFormulaInner0.not_sat_formula_inner = NotSatFormulaInner0.not_sat_formula_inner
  clone Lib_Formula_Impl1_EventuallyUnsat as EventuallyUnsat0 with function Model0.model = Model0.model,
  predicate EventuallyUnsatFormulaInner0.eventually_unsat_formula_inner = EventuallyUnsatFormulaInner0.eventually_unsat_formula_inner
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  val inner (f : Type.lib_formula_formula) (a : borrowed (Type.lib_assignments_assignments)) : bool
    requires {Invariant0.invariant' ( * a) f}
    requires {Invariant1.invariant' f}
    ensures { result = false -> EventuallyUnsat0.eventually_unsat f ( * a) }
    ensures { result = true -> EventuallySat0.eventually_sat f ( * a) }
    ensures { Invariant0.invariant' ( ^ a) f }
    
end
module Lib_SolverDpll_PreprocAndSolve_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  val preproc_and_solve (clauses : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec int32 (Type.alloc_alloc_global)) (Type.alloc_alloc_global))) (num_literals : usize) : bool
    
end
module Lib_SolverDpll_PreprocAndSolve
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  val preproc_and_solve (clauses : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec int32 (Type.alloc_alloc_global)) (Type.alloc_alloc_global))) (num_literals : usize) : bool
    
end
module Lib_SolverDpll_Solver_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  val solver (f : Type.lib_formula_formula) : bool
    requires {Invariant0.invariant' f}
    
end
module Lib_SolverDpll_Solver
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Predicates_VarsInRange as VarsInRange0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  val solver (f : Type.lib_formula_formula) : bool
    requires {Invariant0.invariant' f}
    
end
module Lib_Assignments_Impl4
  
end
module Lib_Formula_Impl5
  
end
module Lib_Lit_Impl3
  
end
module Lib_Assignments_Impl3
  
end
module Lib_Formula_Impl3
  
end
