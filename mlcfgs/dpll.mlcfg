module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type last_ghost 't = 
    | Last_Ghost opaque_ptr
    
  type last_lit  = 
    | Last_Lit usize bool
    
  function last_lit_Lit_idx (self : last_lit) : usize
  val last_lit_Lit_idx (self : last_lit) : usize
    ensures { result = last_lit_Lit_idx self }
    
  axiom last_lit_Lit_idx_acc : forall a : usize, b : bool . last_lit_Lit_idx (Last_Lit a b : last_lit) = a
  function last_lit_Lit_polarity (self : last_lit) : bool
  val last_lit_Lit_polarity (self : last_lit) : bool
    ensures { result = last_lit_Lit_polarity self }
    
  axiom last_lit_Lit_polarity_acc : forall a : usize, b : bool . last_lit_Lit_polarity (Last_Lit a b : last_lit) = b
  type last_assignedstate  = 
    | Last_AssignedState_Unset
    | Last_AssignedState_Positive
    | Last_AssignedState_Negative
    
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type creusotcontracts_std1_vec_vec 't = 
    | CreusotContracts_Std1_Vec_Vec (alloc_vec_vec 't (alloc_alloc_global))
    
  type last_assignments  = 
    | Last_Assignments (creusotcontracts_std1_vec_vec (last_assignedstate))
    
  function last_assignments_Assignments_0 (self : last_assignments) : creusotcontracts_std1_vec_vec (last_assignedstate)
  val last_assignments_Assignments_0 (self : last_assignments) : creusotcontracts_std1_vec_vec (last_assignedstate)
    ensures { result = last_assignments_Assignments_0 self }
    
  axiom last_assignments_Assignments_0_acc : forall a : creusotcontracts_std1_vec_vec (last_assignedstate) . last_assignments_Assignments_0 (Last_Assignments a : last_assignments) = a
  type last_clause  = 
    | Last_Clause (creusotcontracts_std1_vec_vec (last_lit))
    
  function last_clause_Clause_0 (self : last_clause) : creusotcontracts_std1_vec_vec (last_lit)
  val last_clause_Clause_0 (self : last_clause) : creusotcontracts_std1_vec_vec (last_lit)
    ensures { result = last_clause_Clause_0 self }
    
  axiom last_clause_Clause_0_acc : forall a : creusotcontracts_std1_vec_vec (last_lit) . last_clause_Clause_0 (Last_Clause a : last_clause) = a
  type last_satstate  = 
    | Last_SatState_Unknown
    | Last_SatState_Sat
    | Last_SatState_Unsat
    
  type last_formula  = 
    | Last_Formula (creusotcontracts_std1_vec_vec (last_clause)) usize
    
  function last_formula_Formula_clauses (self : last_formula) : creusotcontracts_std1_vec_vec (last_clause)
  val last_formula_Formula_clauses (self : last_formula) : creusotcontracts_std1_vec_vec (last_clause)
    ensures { result = last_formula_Formula_clauses self }
    
  axiom last_formula_Formula_clauses_acc : forall a : creusotcontracts_std1_vec_vec (last_clause), b : usize . last_formula_Formula_clauses (Last_Formula a b : last_formula) = a
  function last_formula_Formula_num_vars (self : last_formula) : usize
  val last_formula_Formula_num_vars (self : last_formula) : usize
    ensures { result = last_formula_Formula_num_vars self }
    
  axiom last_formula_Formula_num_vars_acc : forall a : creusotcontracts_std1_vec_vec (last_clause), b : usize . last_formula_Formula_num_vars (Last_Formula a b : last_formula) = b
end
module Last_Main_Interface
  val main () : ()
end
module Last_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelty   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelty
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelty
end
module Last_Impl0_ModelTy
  type t   
  type modelty  = 
    t
end
module Last_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.last_ghost t) : t
end
module Last_Impl0_Model
  type t   
  use Type
  function model (self : Type.last_ghost t) : t
end
module Last_Impl0
  type t   
  use Type
  clone Last_Impl0_Model as Model0 with type t = t
  clone Last_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.last_ghost t,
  type ModelTy0.modelty = ModelTy0.modelty, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.last_ghost t,
  type modelty = ModelTy0.modelty
end
module Last_Impl1_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone Last_Impl0_Model_Interface as Model0 with type t = t
  val record (a : t) : Type.last_ghost t
    ensures { Model0.model result = a }
    
end
module Last_Impl1_Record
  type t   
  use prelude.Prelude
  use Type
  clone Last_Impl0_Model as Model0 with type t = t
  val record (a : t) : Type.last_ghost t
    ensures { Model0.model result = a }
    
end
module Core_Clone_Clone_Clone_Interface
  type self   
  use prelude.Prelude
  val clone' (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self   
  use prelude.Prelude
  val clone' (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self   
  use prelude.Prelude
  val clone_from (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self   
  use prelude.Prelude
  val clone_from (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module Last_Impl9_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' (self : Type.last_lit) : Type.last_lit
end
module Last_Impl9_Clone
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.last_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.last_lit
  let rec cfg clone' (self : Type.last_lit) : Type.last_lit = 
  var _0 : Type.last_lit;
  var self_1 : Type.last_lit;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- self_1;
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module Last_Impl9
  use Type
  clone Last_Impl9_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.last_lit, val clone' = Clone0.clone'
end
module Last_Impl2_ModelTy
  use seq.Seq
  use Type
  type modelty  = 
    Seq.seq (Type.last_assignedstate)
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelty  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelty = ModelTy0.modelty
end
module Last_Impl2_Model_Interface
  use Type
  use seq.Seq
  function model (self : Type.last_assignments) : Seq.seq (Type.last_assignedstate)
end
module Last_Impl2_Model
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.last_assignedstate
  function model (self : Type.last_assignments) : Seq.seq (Type.last_assignedstate) = 
    Model0.model (Type.last_assignments_Assignments_0 self)
end
module Last_Impl2
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.last_assignedstate
  clone Last_Impl2_Model as Model0 with function Model0.model = Model2.model
  clone Last_Impl2_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.last_assignments,
  type ModelTy0.modelty = ModelTy0.modelty, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.last_assignments,
  type modelty = ModelTy0.modelty
end
module Last_Impl3_ModelTy
  use seq.Seq
  use Type
  type modelty  = 
    Seq.seq (Type.last_lit)
end
module Last_Impl3_Model_Interface
  use Type
  use seq.Seq
  function model (self : Type.last_clause) : Seq.seq (Type.last_lit)
end
module Last_Impl3_Model
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.last_lit
  function model (self : Type.last_clause) : Seq.seq (Type.last_lit) = 
    Model0.model (Type.last_clause_Clause_0 self)
end
module Last_Impl3
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.last_lit
  clone Last_Impl3_Model as Model0 with function Model0.model = Model2.model
  clone Last_Impl3_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.last_clause,
  type ModelTy0.modelty = ModelTy0.modelty, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.last_clause,
  type modelty = ModelTy0.modelty
end
module Last_Impl12_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' (self : Type.last_satstate) : Type.last_satstate
end
module Last_Impl12_Clone
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.last_satstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.last_satstate
  let rec cfg clone' (self : Type.last_satstate) : Type.last_satstate = 
  var _0 : Type.last_satstate;
  var self_1 : Type.last_satstate;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- self_1;
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module Last_Impl12
  use Type
  clone Last_Impl12_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.last_satstate, val clone' = Clone0.clone'
end
module Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface
  type self   
  use prelude.Prelude
  val assert_receiver_is_total_eq (self : self) : ()
    requires {false}
    
end
module Core_Cmp_Eq_AssertReceiverIsTotalEq
  type self   
  use prelude.Prelude
  val assert_receiver_is_total_eq (self : self) : ()
    requires {false}
    
end
module Last_Impl14_AssertReceiverIsTotalEq_Interface
  use prelude.Prelude
  use Type
  val assert_receiver_is_total_eq (self : Type.last_satstate) : ()
end
module Last_Impl14_AssertReceiverIsTotalEq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.last_satstate
  let rec cfg assert_receiver_is_total_eq (self : Type.last_satstate) : () = 
  var _0 : ();
  var self_1 : Type.last_satstate;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Last_Impl14
  use Type
  clone Last_Impl14_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Type.last_satstate,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Last_Impl17_AssertReceiverIsTotalEq_Interface
  use prelude.Prelude
  use Type
  val assert_receiver_is_total_eq (self : Type.last_assignedstate) : ()
end
module Last_Impl17_AssertReceiverIsTotalEq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.last_assignedstate
  let rec cfg assert_receiver_is_total_eq (self : Type.last_assignedstate) : () = 
  var _0 : ();
  var self_1 : Type.last_assignedstate;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Last_Impl17
  use Type
  clone Last_Impl17_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Type.last_assignedstate,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Core_Cmp_PartialEq_Eq_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val eq (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Eq
  type self   
  type rhs   
  use prelude.Prelude
  val eq (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Ne_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val ne (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Ne
  type self   
  type rhs   
  use prelude.Prelude
  val ne (self : self) (other : rhs) : bool
    requires {false}
    
end
module Last_Impl4_Eq_Interface
  use prelude.Prelude
  use Type
  val eq (self : Type.last_satstate) (other : Type.last_satstate) : bool
end
module Last_Impl4_Eq
  use prelude.Prelude
  use Type
  val eq (self : Type.last_satstate) (other : Type.last_satstate) : bool
end
module Last_Impl4
  use Type
  clone Last_Impl4_Eq_Interface as Eq0
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Type.last_satstate, type rhs = Type.last_satstate,
  val eq = Eq0.eq
end
module Last_Impl5_Eq_Interface
  use prelude.Prelude
  use Type
  val eq (self : Type.last_assignedstate) (other : Type.last_assignedstate) : bool
end
module Last_Impl5_Eq
  use prelude.Prelude
  use Type
  val eq (self : Type.last_assignedstate) (other : Type.last_assignedstate) : bool
end
module Last_Impl5
  use Type
  clone Last_Impl5_Eq_Interface as Eq0
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Type.last_assignedstate,
  type rhs = Type.last_assignedstate, val eq = Eq0.eq
end
module CreusotContracts_Logic_Seq_Impl0_Tail_Interface
  type t   
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_Tail
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq_ext.SeqExt
  function tail (self : Seq.seq t) : Seq.seq t = 
    SeqExt.subsequence self 1 (Seq.length self)
end
module Last_UnassignedCount_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  function unassigned_count (a : Seq.seq (Type.last_assignedstate)) : int
end
module Last_UnassignedCount
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Seq_Impl0_Tail_Interface as Tail0 with type t = Type.last_assignedstate
  function unassigned_count (a : Seq.seq (Type.last_assignedstate)) : int
  axiom def : forall a : Seq.seq (Type.last_assignedstate) . unassigned_count a = (if Seq.length a = 0 then
    0
  else
    if Seq.get a 0 = Type.Last_AssignedState_Unset then
      1 + unassigned_count (Tail0.tail a)
    else
      unassigned_count (Tail0.tail a)
    
  )
  axiom unassigned_count_spec : forall a : Seq.seq (Type.last_assignedstate) . true
end
module Last_UnassignedCount_Impl
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Seq_Impl0_Tail as Tail0 with type t = Type.last_assignedstate
  let rec ghost function unassigned_count (a : Seq.seq (Type.last_assignedstate)) : int
    variant {Seq.length a}
    
   = 
    if Seq.length a = 0 then
      0
    else
      if pure {Seq.get a 0 = Type.Last_AssignedState_Unset} then
        1 + (let a = Tail0.tail a in unassigned_count a)
      else
        let a = Tail0.tail a in unassigned_count a
      
    
end
module Last_AssignmentsEquality_Interface
  use Type
  predicate assignments_equality (a : Type.last_assignments) (a2 : Type.last_assignments)
end
module Last_AssignmentsEquality
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone Last_Impl2_Model_Interface as Model0
  predicate assignments_equality (a : Type.last_assignments) (a2 : Type.last_assignments) = 
    Seq.length (Model0.model a) = Seq.length (Model0.model a2) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model a) -> Seq.get (Model0.model a) i = Seq.get (Model0.model a2) i)
end
module Last_VarsInRange_Interface
  use mach.int.Int
  use Type
  predicate vars_in_range (n : int) (c : Type.last_clause)
end
module Last_VarsInRange
  use mach.int.Int
  use Type
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Last_Impl3_Model_Interface as Model0
  predicate vars_in_range (n : int) (c : Type.last_clause) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model c) -> 0 <= UInt64.to_int (Type.last_lit_Lit_idx (Seq.get (Model0.model c) i)) && UInt64.to_int (Type.last_lit_Lit_idx (Seq.get (Model0.model c) i)) < n
end
module Last_CompatibleInner_Interface
  use seq.Seq
  use Type
  predicate compatible_inner (a : Seq.seq (Type.last_assignedstate)) (a2 : Seq.seq (Type.last_assignedstate))
end
module Last_CompatibleInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  predicate compatible_inner (a : Seq.seq (Type.last_assignedstate)) (a2 : Seq.seq (Type.last_assignedstate)) = 
    Seq.length a = Seq.length a2 && (forall i : (int) . 0 <= i && i < Seq.length a -> Seq.get a i = Type.Last_AssignedState_Unset || Seq.get a i = Seq.get a2 i)
end
module Last_CompleteInner_Interface
  use seq.Seq
  use Type
  predicate complete_inner (a : Seq.seq (Type.last_assignedstate))
end
module Last_CompleteInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  predicate complete_inner (a : Seq.seq (Type.last_assignedstate)) = 
    forall i : (int) . 0 <= i && i < Seq.length a -> not (Seq.get a i = Type.Last_AssignedState_Unset)
end
module Last_CompatibleCompleteInner_Interface
  use seq.Seq
  use Type
  predicate compatible_complete_inner (a : Seq.seq (Type.last_assignedstate)) (a2 : Seq.seq (Type.last_assignedstate))
end
module Last_CompatibleCompleteInner
  use seq.Seq
  use Type
  clone Last_CompleteInner_Interface as CompleteInner0
  clone Last_CompatibleInner_Interface as CompatibleInner0
  predicate compatible_complete_inner (a : Seq.seq (Type.last_assignedstate)) (a2 : Seq.seq (Type.last_assignedstate))
   = 
    CompatibleInner0.compatible_inner a a2 && CompleteInner0.complete_inner a2
end
module Last_NotSatClauseInner_Interface
  use seq.Seq
  use Type
  predicate not_sat_clause_inner (a : Seq.seq (Type.last_assignedstate)) (c : Type.last_clause)
end
module Last_NotSatClauseInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  clone Last_Impl3_Model_Interface as Model0
  predicate not_sat_clause_inner (a : Seq.seq (Type.last_assignedstate)) (c : Type.last_clause) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model c) -> match (Seq.get a (UInt64.to_int (Type.last_lit_Lit_idx (Seq.get (Model0.model c) i)))) with
      | Type.Last_AssignedState_Positive -> not (Type.last_lit_Lit_polarity (Seq.get (Model0.model c) i))
      | Type.Last_AssignedState_Negative -> Type.last_lit_Lit_polarity (Seq.get (Model0.model c) i)
      | Type.Last_AssignedState_Unset -> false
      end
end
module Last_Impl6_Unsat_Interface
  use Type
  predicate unsat (self : Type.last_clause) (a : Type.last_assignments)
end
module Last_Impl6_Unsat
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt64
  clone Last_Impl2_Model_Interface as Model1
  clone Last_Impl3_Model_Interface as Model0
  predicate unsat (self : Type.last_clause) (a : Type.last_assignments) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> match (Seq.get (Model1.model a) (UInt64.to_int (Type.last_lit_Lit_idx (Seq.get (Model0.model self) i)))) with
      | Type.Last_AssignedState_Positive -> not (Type.last_lit_Lit_polarity (Seq.get (Model0.model self) i))
      | Type.Last_AssignedState_Negative -> Type.last_lit_Lit_polarity (Seq.get (Model0.model self) i)
      | Type.Last_AssignedState_Unset -> false
      end
end
module Last_Impl6_Sat_Interface
  use Type
  predicate sat (self : Type.last_clause) (a : Type.last_assignments)
end
module Last_Impl6_Sat
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt64
  clone Last_Impl2_Model_Interface as Model1
  clone Last_Impl3_Model_Interface as Model0
  predicate sat (self : Type.last_clause) (a : Type.last_assignments) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model self) && match (Seq.get (Model1.model a) (UInt64.to_int (Type.last_lit_Lit_idx (Seq.get (Model0.model self) i)))) with
      | Type.Last_AssignedState_Positive -> Type.last_lit_Lit_polarity (Seq.get (Model0.model self) i)
      | Type.Last_AssignedState_Negative -> not (Type.last_lit_Lit_polarity (Seq.get (Model0.model self) i))
      | Type.Last_AssignedState_Unset -> false
      end
end
module Last_Impl6_Unknown_Interface
  use Type
  predicate unknown (self : Type.last_clause) (a : Type.last_assignments) (c : Type.last_clause)
end
module Last_Impl6_Unknown
  use Type
  clone Last_Impl6_Unsat_Interface as Unsat0
  clone Last_Impl6_Sat_Interface as Sat0
  predicate unknown (self : Type.last_clause) (a : Type.last_assignments) (c : Type.last_clause) = 
    not (Sat0.sat self a) && not (Unsat0.unsat self a)
end
module Last_NotSatFormulaInner_Interface
  use seq.Seq
  use Type
  predicate not_sat_formula_inner (a : Seq.seq (Type.last_assignedstate)) (f : Type.last_formula)
end
module Last_NotSatFormulaInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone Last_NotSatClauseInner_Interface as NotSatClauseInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.last_clause
  predicate not_sat_formula_inner (a : Seq.seq (Type.last_assignedstate)) (f : Type.last_formula) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.last_formula_Formula_clauses f)) && NotSatClauseInner0.not_sat_clause_inner a (Seq.get (Model0.model (Type.last_formula_Formula_clauses f)) i)
end
module Last_EventuallyUnsatFormulaInner_Interface
  use seq.Seq
  use Type
  predicate eventually_unsat_formula_inner (a : Seq.seq (Type.last_assignedstate)) (f : Type.last_formula)
end
module Last_EventuallyUnsatFormulaInner
  use seq.Seq
  use Type
  clone Last_NotSatFormulaInner_Interface as NotSatFormulaInner0
  clone Last_CompatibleCompleteInner_Interface as CompatibleCompleteInner0
  predicate eventually_unsat_formula_inner (a : Seq.seq (Type.last_assignedstate)) (f : Type.last_formula) = 
    forall a2 : (Seq.seq (Type.last_assignedstate)) . CompatibleCompleteInner0.compatible_complete_inner a a2 -> NotSatFormulaInner0.not_sat_formula_inner a2 f
end
module Last_Impl8_Invariant_Interface
  use Type
  predicate invariant' (self : Type.last_assignments) (f : Type.last_formula)
end
module Last_Impl8_Invariant
  use Type
  use mach.int.UInt64
  use seq.Seq
  clone Last_Impl2_Model_Interface as Model0
  predicate invariant' (self : Type.last_assignments) (f : Type.last_formula) = 
    UInt64.to_int (Type.last_formula_Formula_num_vars f) = Seq.length (Model0.model self)
end
module Last_Impl7_Invariant_Interface
  use Type
  predicate invariant' (self : Type.last_formula)
end
module Last_Impl7_Invariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Last_VarsInRange_Interface as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.last_clause
  predicate invariant' (self : Type.last_formula) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.last_formula_Formula_clauses self)) -> VarsInRange0.vars_in_range (UInt64.to_int (Type.last_formula_Formula_num_vars self)) (Seq.get (Model0.model (Type.last_formula_Formula_clauses self)) i)
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelty  = 
    ModelTy0.modelty
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelty
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelty = ModelTy0.modelty
  function model (self : t) : ModelTy0.modelty = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelty = ModelTy2.modelty
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelty = ModelTy2.modelty,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelty = ModelTy2.modelty
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelty = ModelTy0.modelty,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelty = ModelTy0.modelty
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index = Index0.index
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Last_IsClauseSat_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone Last_Impl6_Sat_Interface as Sat0
  clone Last_Impl7_Invariant_Interface as Invariant1
  clone Last_Impl8_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.last_clause
  val is_clause_sat (f : Type.last_formula) (idx : usize) (a : Type.last_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model0.model (Type.last_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Sat0.sat (Seq.get (Model0.model (Type.last_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
end
module Last_IsClauseSat
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.last_assignedstate
  clone Last_Impl2_Model as Model4 with function Model0.model = Model6.model
  clone Last_Impl8_Invariant as Invariant0 with function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.last_lit
  clone Last_Impl3_Model as Model3 with function Model0.model = Model5.model
  clone Last_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone Last_Impl6_Sat as Sat0 with function Model0.model = Model3.model, function Model1.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.last_clause
  clone Last_Impl7_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Last_Impl2_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.last_assignments,
  type ModelTy0.modelty = ModelTy1.modelty, function Model0.model = Model4.model
  clone Last_Impl3_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.last_clause,
  type ModelTy0.modelty = ModelTy0.modelty, function Model0.model = Model3.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = bool
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.last_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.last_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy4 with type t = Type.last_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.last_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.last_lit
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy3 with type t = Type.last_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.last_clause
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.last_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.last_formula
  clone CreusotContracts_Logic_Model_Impl0_Model as Model9 with type t = Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate),
  type ModelTy0.modelty = ModelTy4.modelty, function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index2 with type t = Type.last_assignedstate,
  function Model0.model = Model9.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.creusotcontracts_std1_vec_vec (Type.last_lit),
  type ModelTy0.modelty = ModelTy3.modelty, function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = Type.last_lit,
  function Model0.model = Model8.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.last_lit,
  function Model0.model = Model8.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Type.creusotcontracts_std1_vec_vec (Type.last_clause),
  type ModelTy0.modelty = ModelTy2.modelty, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.last_clause,
  function Model0.model = Model7.model
  let rec cfg is_clause_sat (f : Type.last_formula) (idx : usize) (a : Type.last_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model2.model (Type.last_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Sat0.sat (Seq.get (Model2.model (Type.last_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
   = 
  var _0 : bool;
  var f_1 : Type.last_formula;
  var idx_2 : usize;
  var a_3 : Type.last_assignments;
  var _4 : ();
  var clause_5 : Type.last_clause;
  var _6 : Type.last_clause;
  var _7 : Type.creusotcontracts_std1_vec_vec (Type.last_clause);
  var _8 : usize;
  var i_9 : usize;
  var _10 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : Type.creusotcontracts_std1_vec_vec (Type.last_lit);
  var lit_16 : Type.last_lit;
  var _17 : Type.last_lit;
  var _18 : Type.creusotcontracts_std1_vec_vec (Type.last_lit);
  var _19 : usize;
  var _20 : ();
  var _21 : Type.last_assignedstate;
  var _22 : Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate);
  var _23 : usize;
  var _24 : isize;
  var _25 : bool;
  var _26 : ();
  var _27 : bool;
  var _28 : bool;
  var _29 : ();
  var _30 : ();
  var _31 : ();
  var _32 : ();
  {
    f_1 <- f;
    idx_2 <- idx;
    a_3 <- a;
    goto BB0
  }
  BB0 {
    _7 <- Type.last_formula_Formula_clauses f_1;
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve _8 };
    _8 <- idx_2;
    assume { Resolve1.resolve idx_2 };
    _6 <- Index0.index _7 _8;
    goto BB1
  }
  BB1 {
    clause_5 <- _6;
    assume { Resolve2.resolve _6 };
    i_9 <- (0 : usize);
    goto BB2
  }
  BB2 {
    invariant previous { forall j : (int) . 0 <= j && j < UInt64.to_int i_9 -> match (Seq.get (Model1.model a_3) (UInt64.to_int (Type.last_lit_Lit_idx (Seq.get (Model0.model clause_5) j)))) with
      | Type.Last_AssignedState_Positive -> not (Type.last_lit_Lit_polarity (Seq.get (Model0.model clause_5) j))
      | Type.Last_AssignedState_Negative -> Type.last_lit_Lit_polarity (Seq.get (Model0.model clause_5) j)
      | Type.Last_AssignedState_Unset -> true
      end };
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve _13 };
    _13 <- i_9;
    _15 <- Type.last_clause_Clause_0 clause_5;
    _14 <- Len0.len _15;
    goto BB4
  }
  BB4 {
    _12 <- _13 < _14;
    switch (_12)
      | False -> goto BB19
      | _ -> goto BB5
      end
  }
  BB5 {
    _18 <- Type.last_clause_Clause_0 clause_5;
    assume { Resolve1.resolve _19 };
    _19 <- i_9;
    _17 <- Index1.index _18 _19;
    goto BB6
  }
  BB6 {
    assume { Resolve3.resolve lit_16 };
    lit_16 <- _17;
    assume { Resolve4.resolve _17 };
    _22 <- Type.last_assignments_Assignments_0 a_3;
    assume { Resolve1.resolve _23 };
    _23 <- Type.last_lit_Lit_idx lit_16;
    _21 <- Index2.index _22 _23;
    goto BB7
  }
  BB7 {
    assume { Resolve5.resolve _21 };
    switch (_21)
      | Type.Last_AssignedState_Unset -> goto BB8
      | Type.Last_AssignedState_Positive -> goto BB9
      | Type.Last_AssignedState_Negative -> goto BB10
      end
  }
  BB8 {
    assume { Resolve3.resolve lit_16 };
    _20 <- ();
    assume { Resolve8.resolve _20 };
    goto BB18
  }
  BB9 {
    goto BB12
  }
  BB10 {
    goto BB15
  }
  BB11 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    assume { Resolve3.resolve lit_16 };
    absurd
  }
  BB12 {
    assume { Resolve7.resolve _25 };
    _25 <- Type.last_lit_Lit_polarity lit_16;
    assume { Resolve3.resolve lit_16 };
    switch (_25)
      | False -> goto BB14
      | _ -> goto BB13
      end
  }
  BB13 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _0 <- true;
    goto BB20
  }
  BB14 {
    _20 <- ();
    assume { Resolve8.resolve _20 };
    goto BB18
  }
  BB15 {
    assume { Resolve7.resolve _28 };
    _28 <- Type.last_lit_Lit_polarity lit_16;
    assume { Resolve3.resolve lit_16 };
    _27 <- not _28;
    switch (_27)
      | False -> goto BB17
      | _ -> goto BB16
      end
  }
  BB16 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _0 <- true;
    goto BB20
  }
  BB17 {
    _20 <- ();
    assume { Resolve8.resolve _20 };
    goto BB18
  }
  BB18 {
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    assume { Resolve8.resolve _11 };
    goto BB2
  }
  BB19 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _10 <- ();
    assume { Resolve8.resolve _10 };
    _0 <- false;
    goto BB21
  }
  BB20 {
    goto BB21
  }
  BB21 {
    return _0
  }
  
end
module Last_IsClauseUnsat_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone Last_Impl6_Unsat_Interface as Unsat0
  clone Last_Impl7_Invariant_Interface as Invariant1
  clone Last_Impl8_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.last_clause
  val is_clause_unsat (f : Type.last_formula) (idx : usize) (a : Type.last_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model0.model (Type.last_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Unsat0.unsat (Seq.get (Model0.model (Type.last_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
end
module Last_IsClauseUnsat
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.last_assignedstate
  clone Last_Impl2_Model as Model4 with function Model0.model = Model6.model
  clone Last_Impl8_Invariant as Invariant0 with function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.last_lit
  clone Last_Impl3_Model as Model3 with function Model0.model = Model5.model
  clone Last_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone Last_Impl6_Unsat as Unsat0 with function Model0.model = Model3.model, function Model1.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.last_clause
  clone Last_Impl7_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Last_Impl2_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.last_assignments,
  type ModelTy0.modelty = ModelTy1.modelty, function Model0.model = Model4.model
  clone Last_Impl3_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.last_clause,
  type ModelTy0.modelty = ModelTy0.modelty, function Model0.model = Model3.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = bool
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.last_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.last_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy4 with type t = Type.last_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.last_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.last_lit
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy3 with type t = Type.last_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.last_clause
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.last_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.last_formula
  clone CreusotContracts_Logic_Model_Impl0_Model as Model9 with type t = Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate),
  type ModelTy0.modelty = ModelTy4.modelty, function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index2 with type t = Type.last_assignedstate,
  function Model0.model = Model9.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.creusotcontracts_std1_vec_vec (Type.last_lit),
  type ModelTy0.modelty = ModelTy3.modelty, function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = Type.last_lit,
  function Model0.model = Model8.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.last_lit,
  function Model0.model = Model8.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Type.creusotcontracts_std1_vec_vec (Type.last_clause),
  type ModelTy0.modelty = ModelTy2.modelty, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.last_clause,
  function Model0.model = Model7.model
  let rec cfg is_clause_unsat (f : Type.last_formula) (idx : usize) (a : Type.last_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model2.model (Type.last_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Unsat0.unsat (Seq.get (Model2.model (Type.last_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
   = 
  var _0 : bool;
  var f_1 : Type.last_formula;
  var idx_2 : usize;
  var a_3 : Type.last_assignments;
  var _4 : ();
  var clause_5 : Type.last_clause;
  var _6 : Type.last_clause;
  var _7 : Type.creusotcontracts_std1_vec_vec (Type.last_clause);
  var _8 : usize;
  var i_9 : usize;
  var _10 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : Type.creusotcontracts_std1_vec_vec (Type.last_lit);
  var lit_16 : Type.last_lit;
  var _17 : Type.last_lit;
  var _18 : Type.creusotcontracts_std1_vec_vec (Type.last_lit);
  var _19 : usize;
  var _20 : ();
  var _21 : Type.last_assignedstate;
  var _22 : Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate);
  var _23 : usize;
  var _24 : isize;
  var _25 : bool;
  var _26 : ();
  var _27 : bool;
  var _28 : bool;
  var _29 : ();
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : ();
  {
    f_1 <- f;
    idx_2 <- idx;
    a_3 <- a;
    goto BB0
  }
  BB0 {
    _7 <- Type.last_formula_Formula_clauses f_1;
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve _8 };
    _8 <- idx_2;
    assume { Resolve1.resolve idx_2 };
    _6 <- Index0.index _7 _8;
    goto BB1
  }
  BB1 {
    clause_5 <- _6;
    assume { Resolve2.resolve _6 };
    i_9 <- (0 : usize);
    goto BB2
  }
  BB2 {
    invariant loop_invariant { 0 <= UInt64.to_int i_9 && UInt64.to_int i_9 <= Seq.length (Model0.model clause_5) };
    invariant previous { forall j : (int) . 0 <= j && j < UInt64.to_int i_9 -> match (Seq.get (Model1.model a_3) (UInt64.to_int (Type.last_lit_Lit_idx (Seq.get (Model0.model clause_5) j)))) with
      | Type.Last_AssignedState_Positive -> not (Type.last_lit_Lit_polarity (Seq.get (Model0.model clause_5) j))
      | Type.Last_AssignedState_Negative -> Type.last_lit_Lit_polarity (Seq.get (Model0.model clause_5) j)
      | Type.Last_AssignedState_Unset -> false
      end };
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve _13 };
    _13 <- i_9;
    _15 <- Type.last_clause_Clause_0 clause_5;
    _14 <- Len0.len _15;
    goto BB4
  }
  BB4 {
    _12 <- _13 < _14;
    switch (_12)
      | False -> goto BB19
      | _ -> goto BB5
      end
  }
  BB5 {
    _18 <- Type.last_clause_Clause_0 clause_5;
    assume { Resolve1.resolve _19 };
    _19 <- i_9;
    _17 <- Index1.index _18 _19;
    goto BB6
  }
  BB6 {
    assume { Resolve3.resolve lit_16 };
    lit_16 <- _17;
    assume { Resolve4.resolve _17 };
    _22 <- Type.last_assignments_Assignments_0 a_3;
    assume { Resolve1.resolve _23 };
    _23 <- Type.last_lit_Lit_idx lit_16;
    _21 <- Index2.index _22 _23;
    goto BB7
  }
  BB7 {
    assume { Resolve5.resolve _21 };
    switch (_21)
      | Type.Last_AssignedState_Unset -> goto BB8
      | Type.Last_AssignedState_Positive -> goto BB9
      | Type.Last_AssignedState_Negative -> goto BB10
      end
  }
  BB8 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    assume { Resolve3.resolve lit_16 };
    _0 <- false;
    goto BB20
  }
  BB9 {
    goto BB12
  }
  BB10 {
    goto BB15
  }
  BB11 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    assume { Resolve3.resolve lit_16 };
    absurd
  }
  BB12 {
    assume { Resolve7.resolve _25 };
    _25 <- Type.last_lit_Lit_polarity lit_16;
    assume { Resolve3.resolve lit_16 };
    switch (_25)
      | False -> goto BB14
      | _ -> goto BB13
      end
  }
  BB13 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _0 <- false;
    goto BB20
  }
  BB14 {
    _20 <- ();
    assume { Resolve8.resolve _20 };
    goto BB18
  }
  BB15 {
    assume { Resolve7.resolve _28 };
    _28 <- Type.last_lit_Lit_polarity lit_16;
    assume { Resolve3.resolve lit_16 };
    _27 <- not _28;
    switch (_27)
      | False -> goto BB17
      | _ -> goto BB16
      end
  }
  BB16 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _0 <- false;
    goto BB20
  }
  BB17 {
    _20 <- ();
    assume { Resolve8.resolve _20 };
    goto BB18
  }
  BB18 {
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    assume { Resolve8.resolve _11 };
    goto BB2
  }
  BB19 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _10 <- ();
    assume { Resolve8.resolve _10 };
    _0 <- true;
    goto BB21
  }
  BB20 {
    goto BB21
  }
  BB21 {
    return _0
  }
  
end
module Last_Impl7_Unsat_Interface
  use Type
  predicate unsat (self : Type.last_formula) (a : Type.last_assignments)
end
module Last_Impl7_Unsat
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Last_Impl6_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.last_clause
  predicate unsat (self : Type.last_formula) (a : Type.last_assignments) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.last_formula_Formula_clauses self)) && Unsat0.unsat (Seq.get (Model0.model (Type.last_formula_Formula_clauses self)) i) a
end
module Last_Impl7_IsUnsat_Interface
  use prelude.Prelude
  use Type
  clone Last_Impl7_Unsat_Interface as Unsat0
  clone Last_Impl7_Invariant_Interface as Invariant1
  clone Last_Impl8_Invariant_Interface as Invariant0
  val is_unsat (self : Type.last_formula) (a : Type.last_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Unsat0.unsat self a }
    
end
module Last_Impl7_IsUnsat
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.last_assignedstate
  clone Last_Impl2_Model as Model2 with function Model0.model = Model4.model
  clone Last_Impl8_Invariant as Invariant0 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.last_lit
  clone Last_Impl3_Model as Model1 with function Model0.model = Model3.model
  clone Last_VarsInRange as VarsInRange0 with function Model0.model = Model1.model
  clone Last_Impl6_Unsat as Unsat0 with function Model0.model = Model1.model, function Model1.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.last_clause
  clone Last_Impl7_Unsat as Unsat1 with function Model0.model = Model0.model, predicate Unsat0.unsat = Unsat0.unsat
  clone Last_Impl7_Invariant as Invariant1 with function Model0.model = Model0.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.last_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.last_formula
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.last_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec (Type.last_clause),
  type ModelTy0.modelty = ModelTy0.modelty, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.last_clause,
  function Model0.model = Model5.model
  clone Last_IsClauseUnsat_Interface as IsClauseUnsat0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Unsat0.unsat = Unsat0.unsat
  let rec cfg is_unsat (self : Type.last_formula) (a : Type.last_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Unsat1.unsat self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.last_formula;
  var a_2 : Type.last_assignments;
  var _3 : ();
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.creusotcontracts_std1_vec_vec (Type.last_clause);
  var _11 : ();
  var _12 : bool;
  var _13 : Type.last_formula;
  var _14 : usize;
  var _15 : Type.last_assignments;
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var _19 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant prev { forall k : (int) . 0 <= k && k < UInt64.to_int i_4 -> not (Unsat0.unsat (Seq.get (Model0.model (Type.last_formula_Formula_clauses self_1)) k) a_2) };
    invariant loop_invariant { 0 <= UInt64.to_int i_4 && UInt64.to_int i_4 <= Seq.length (Model0.model (Type.last_formula_Formula_clauses self_1)) };
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _8 };
    _8 <- i_4;
    _10 <- Type.last_formula_Formula_clauses self_1;
    _9 <- Len0.len _10;
    goto BB3
  }
  BB3 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB8
      | _ -> goto BB4
      end
  }
  BB4 {
    _13 <- self_1;
    assume { Resolve0.resolve _14 };
    _14 <- i_4;
    _15 <- a_2;
    _12 <- IsClauseUnsat0.is_clause_unsat _13 _14 _15;
    goto BB5
  }
  BB5 {
    switch (_12)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve0.resolve i_4 };
    _0 <- true;
    goto BB9
  }
  BB7 {
    _11 <- ();
    assume { Resolve3.resolve _11 };
    i_4 <- i_4 + (1 : usize);
    _6 <- ();
    assume { Resolve3.resolve _6 };
    goto BB1
  }
  BB8 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve0.resolve i_4 };
    _5 <- ();
    assume { Resolve3.resolve _5 };
    _0 <- false;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Last_Impl7_Sat_Interface
  use Type
  predicate sat (self : Type.last_formula) (a : Type.last_assignments)
end
module Last_Impl7_Sat
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Last_Impl6_Sat_Interface as Sat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.last_clause
  predicate sat (self : Type.last_formula) (a : Type.last_assignments) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.last_formula_Formula_clauses self)) -> Sat0.sat (Seq.get (Model0.model (Type.last_formula_Formula_clauses self)) i) a
end
module Last_Impl7_IsSat_Interface
  use prelude.Prelude
  use Type
  clone Last_Impl7_Sat_Interface as Sat0
  clone Last_Impl7_Invariant_Interface as Invariant1
  clone Last_Impl8_Invariant_Interface as Invariant0
  val is_sat (self : Type.last_formula) (a : Type.last_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Sat0.sat self a }
    
end
module Last_Impl7_IsSat
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.last_assignedstate
  clone Last_Impl2_Model as Model2 with function Model0.model = Model4.model
  clone Last_Impl8_Invariant as Invariant0 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.last_lit
  clone Last_Impl3_Model as Model1 with function Model0.model = Model3.model
  clone Last_VarsInRange as VarsInRange0 with function Model0.model = Model1.model
  clone Last_Impl6_Sat as Sat0 with function Model0.model = Model1.model, function Model1.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.last_clause
  clone Last_Impl7_Sat as Sat1 with function Model0.model = Model0.model, predicate Sat0.sat = Sat0.sat
  clone Last_Impl7_Invariant as Invariant1 with function Model0.model = Model0.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.last_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.last_formula
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.last_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec (Type.last_clause),
  type ModelTy0.modelty = ModelTy0.modelty, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.last_clause,
  function Model0.model = Model5.model
  clone Last_IsClauseSat_Interface as IsClauseSat0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Sat0.sat = Sat0.sat
  let rec cfg is_sat (self : Type.last_formula) (a : Type.last_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Sat1.sat self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.last_formula;
  var a_2 : Type.last_assignments;
  var _3 : ();
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.creusotcontracts_std1_vec_vec (Type.last_clause);
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : Type.last_formula;
  var _15 : usize;
  var _16 : Type.last_assignments;
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var _20 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant prev { forall k : (int) . 0 <= k && k < UInt64.to_int i_4 -> Sat0.sat (Seq.get (Model0.model (Type.last_formula_Formula_clauses self_1)) k) a_2 };
    invariant loop_invariant { 0 <= UInt64.to_int i_4 && UInt64.to_int i_4 <= Seq.length (Model0.model (Type.last_formula_Formula_clauses self_1)) };
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _8 };
    _8 <- i_4;
    _10 <- Type.last_formula_Formula_clauses self_1;
    _9 <- Len0.len _10;
    goto BB3
  }
  BB3 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB8
      | _ -> goto BB4
      end
  }
  BB4 {
    _14 <- self_1;
    assume { Resolve0.resolve _15 };
    _15 <- i_4;
    _16 <- a_2;
    _13 <- IsClauseSat0.is_clause_sat _14 _15 _16;
    goto BB5
  }
  BB5 {
    _12 <- not _13;
    switch (_12)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve0.resolve i_4 };
    _0 <- false;
    goto BB9
  }
  BB7 {
    _11 <- ();
    assume { Resolve3.resolve _11 };
    i_4 <- i_4 + (1 : usize);
    _6 <- ();
    assume { Resolve3.resolve _6 };
    goto BB1
  }
  BB8 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve0.resolve i_4 };
    _5 <- ();
    assume { Resolve3.resolve _5 };
    _0 <- true;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Last_Impl8_Complete_Interface
  use Type
  predicate complete (self : Type.last_assignments)
end
module Last_Impl8_Complete
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Last_Impl2_Model_Interface as Model0
  predicate complete (self : Type.last_assignments) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> not (Seq.get (Model0.model self) i = Type.Last_AssignedState_Unset)
end
module Last_Impl7_Eval_Interface
  use Type
  use prelude.Prelude
  clone Last_Impl7_Sat_Interface as Sat0
  clone Last_Impl7_Unsat_Interface as Unsat0
  clone Last_Impl8_Complete_Interface as Complete0
  clone Last_Impl7_Invariant_Interface as Invariant1
  clone Last_Impl8_Invariant_Interface as Invariant0
  val eval (self : Type.last_formula) (a : Type.last_assignments) : Type.last_satstate
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Type.Last_SatState_Unknown -> not (Complete0.complete a) }
    ensures { (result = Type.Last_SatState_Unsat) = Unsat0.unsat self a }
    ensures { (result = Type.Last_SatState_Sat) = Sat0.sat self a }
    
end
module Last_Impl7_Eval
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.last_lit
  clone Last_Impl3_Model as Model3 with function Model0.model = Model4.model
  clone Last_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.last_assignedstate
  clone Last_Impl2_Model as Model0 with function Model0.model = Model2.model
  clone Last_Impl6_Sat as Sat1 with function Model0.model = Model3.model, function Model1.model = Model0.model
  clone Last_Impl6_Unsat as Unsat1 with function Model0.model = Model3.model, function Model1.model = Model0.model
  clone Last_Impl8_Complete as Complete0 with function Model0.model = Model0.model
  clone Last_Impl8_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.last_clause
  clone Last_Impl7_Sat as Sat0 with function Model0.model = Model1.model, predicate Sat0.sat = Sat1.sat
  clone Last_Impl7_Unsat as Unsat0 with function Model0.model = Model1.model, predicate Unsat0.unsat = Unsat1.unsat
  clone Last_Impl7_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.last_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.last_formula
  clone Last_Impl7_IsUnsat_Interface as IsUnsat0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Unsat0.unsat = Unsat0.unsat
  clone Last_Impl7_IsSat_Interface as IsSat0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Sat0.sat = Sat0.sat
  let rec cfg eval (self : Type.last_formula) (a : Type.last_assignments) : Type.last_satstate
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Type.Last_SatState_Unknown -> not (Complete0.complete a) }
    ensures { (result = Type.Last_SatState_Unsat) = Unsat0.unsat self a }
    ensures { (result = Type.Last_SatState_Sat) = Sat0.sat self a }
    
   = 
  var _0 : Type.last_satstate;
  var self_1 : Type.last_formula;
  var a_2 : Type.last_assignments;
  var _3 : bool;
  var _4 : Type.last_formula;
  var _5 : Type.last_assignments;
  var _6 : ();
  var _7 : bool;
  var _8 : Type.last_formula;
  var _9 : Type.last_assignments;
  var _10 : ();
  var _11 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _4 <- self_1;
    _5 <- a_2;
    _3 <- IsSat0.is_sat _4 _5;
    goto BB1
  }
  BB1 {
    switch (_3)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve a_2 };
    _0 <- Type.Last_SatState_Sat;
    goto BB8
  }
  BB3 {
    _8 <- self_1;
    assume { Resolve0.resolve self_1 };
    _9 <- a_2;
    assume { Resolve1.resolve a_2 };
    _7 <- IsUnsat0.is_unsat _8 _9;
    goto BB4
  }
  BB4 {
    switch (_7)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    _0 <- Type.Last_SatState_Unsat;
    goto BB7
  }
  BB6 {
    _0 <- Type.Last_SatState_Unknown;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module Last_Impl8_Compatible_Interface
  use Type
  predicate compatible (self : Type.last_assignments) (a2 : Type.last_assignments)
end
module Last_Impl8_Compatible
  use Type
  clone Last_CompatibleInner_Interface as CompatibleInner0
  clone Last_Impl2_Model_Interface as Model0
  predicate compatible (self : Type.last_assignments) (a2 : Type.last_assignments) = 
    CompatibleInner0.compatible_inner (Model0.model self) (Model0.model a2)
end
module Last_Impl7_EventuallySat_Interface
  use Type
  predicate eventually_sat (self : Type.last_formula) (a : Type.last_assignments)
end
module Last_Impl7_EventuallySat
  use Type
  clone Last_Impl7_Sat_Interface as Sat0
  clone Last_Impl8_Compatible_Interface as Compatible0
  predicate eventually_sat (self : Type.last_formula) (a : Type.last_assignments) = 
    exists a2 : (Type.last_assignments) . Compatible0.compatible a a2 && Sat0.sat self a2
end
module Last_Impl7_EventuallyUnsat_Interface
  use Type
  predicate eventually_unsat (self : Type.last_formula) (a : Type.last_assignments)
end
module Last_Impl7_EventuallyUnsat
  use Type
  clone Last_EventuallyUnsatFormulaInner_Interface as EventuallyUnsatFormulaInner0
  clone Last_Impl2_Model_Interface as Model0
  predicate eventually_unsat (self : Type.last_formula) (a : Type.last_assignments) = 
    EventuallyUnsatFormulaInner0.eventually_unsat_formula_inner (Model0.model a) self
end
module Last_Impl8_CompatibleComplete_Interface
  use Type
  predicate compatible_complete (self : Type.last_assignments) (a2 : Type.last_assignments)
end
module Last_Impl8_CompatibleComplete
  use Type
  clone Last_Impl8_Complete_Interface as Complete0
  clone Last_Impl8_Compatible_Interface as Compatible0
  predicate compatible_complete (self : Type.last_assignments) (a2 : Type.last_assignments) = 
    Compatible0.compatible self a2 && Complete0.complete a2
end
module Last_Impl8_CloneAssignmentVector_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.last_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.last_assignedstate
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate),
  type ModelTy0.modelty = ModelTy0.modelty
  val clone_assignment_vector (self : Type.last_assignments) (v : Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate)) : Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate)
    ensures { v = result }
    ensures { Seq.length (Model0.model v) = Seq.length (Model1.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model v) -> Seq.get (Model0.model v) i = Seq.get (Model1.model result) i }
    
end
module Last_Impl8_CloneAssignmentVector
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.last_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.last_assignedstate
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate),
  type ModelTy0.modelty = ModelTy0.modelty, function Model0.model = Model1.model
  val clone_assignment_vector (self : Type.last_assignments) (v : Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate)) : Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate)
    ensures { v = result }
    ensures { Seq.length (Model0.model v) = Seq.length (Model1.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model v) -> Seq.get (Model0.model v) i = Seq.get (Model1.model result) i }
    
end
module Last_Impl8_Clone_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Last_Impl2_Model_Interface as Model1
  clone Last_Impl2_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.last_assignments,
  type ModelTy0.modelty = ModelTy0.modelty
  val clone' (self : Type.last_assignments) : Type.last_assignments
    ensures { self = result }
    ensures { Seq.length (Model0.model self) = Seq.length (Model1.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Seq.get (Model0.model self) i = Seq.get (Model1.model result) i }
    
end
module Last_Impl8_Clone
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.last_assignedstate
  clone Last_Impl2_Model as Model1 with function Model0.model = Model2.model
  clone Last_Impl2_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.last_assignments,
  type ModelTy0.modelty = ModelTy0.modelty, function Model0.model = Model1.model
  val clone' (self : Type.last_assignments) : Type.last_assignments
    ensures { self = result }
    ensures { Seq.length (Model0.model self) = Seq.length (Model1.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Seq.get (Model0.model self) i = Seq.get (Model1.model result) i }
    
end
module CreusotContracts_Std1_Vec_Impl1_New_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val new () : Type.creusotcontracts_std1_vec_vec t
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Std1_Vec_Impl1_New
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val new () : Type.creusotcontracts_std1_vec_vec t
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelty  = 
    ModelTy0.modelty
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelty
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelty = ModelTy0.modelty
  function model (self : borrowed t) : ModelTy0.modelty = 
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelty = ModelTy2.modelty
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelty = ModelTy2.modelty,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelty = ModelTy2.modelty
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t,
  type ModelTy0.modelty = ModelTy0.modelty, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelty = ModelTy0.modelty
end
module CreusotContracts_Std1_Vec_Impl1_Push_Interface
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val push (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (v : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model1.model self) v }
    
end
module CreusotContracts_Std1_Vec_Impl1_Push
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val push (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (v : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model1.model self) v }
    
end
module Last_Impl8_New_Interface
  use prelude.Prelude
  use Type
  clone Last_Impl8_Invariant_Interface as Invariant1
  clone Last_Impl7_Invariant_Interface as Invariant0
  val new (f : Type.last_formula) : Type.last_assignments
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result f }
    
end
module Last_Impl8_New
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.last_lit
  clone Last_Impl3_Model as Model3 with function Model0.model = Model4.model
  clone Last_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.last_clause
  clone Last_Impl7_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.last_assignedstate
  clone Last_Impl2_Model as Model2 with function Model0.model = Model0.model
  clone Last_Impl8_Invariant as Invariant1 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.last_formula
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = ()
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.last_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl1_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate),
  type ModelTy0.modelty = ModelTy0.modelty, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Push_Interface as Push0 with type t = Type.last_assignedstate,
  function Model0.model = Model0.model, function Model1.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl1_New_Interface as New0 with type t = Type.last_assignedstate,
  function Model0.model = Model0.model
  let rec cfg new (f : Type.last_formula) : Type.last_assignments
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result f }
    
   = 
  var _0 : Type.last_assignments;
  var f_1 : Type.last_formula;
  var assign_2 : Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate);
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : ();
  var _10 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate));
  var _11 : Type.last_assignedstate;
  var _12 : ();
  var _13 : ();
  var _14 : ();
  var _15 : Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate);
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    assign_2 <- New0.new ();
    goto BB1
  }
  BB1 {
    i_3 <- (0 : usize);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant loop_invariant { 0 <= UInt64.to_int i_3 && UInt64.to_int i_3 <= UInt64.to_int (Type.last_formula_Formula_num_vars f_1) };
    invariant length_invariant { Seq.length (Model0.model assign_2) = UInt64.to_int i_3 };
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve _7 };
    _7 <- i_3;
    assume { Resolve0.resolve _8 };
    _8 <- Type.last_formula_Formula_num_vars f_1;
    _6 <- _7 < _8;
    switch (_6)
      | False -> goto BB7
      | _ -> goto BB5
      end
  }
  BB5 {
    _10 <- borrow_mut assign_2;
    assign_2 <-  ^ _10;
    _11 <- Type.Last_AssignedState_Unset;
    _9 <- Push0.push _10 _11;
    goto BB6
  }
  BB6 {
    i_3 <- i_3 + (1 : usize);
    _5 <- ();
    assume { Resolve1.resolve _5 };
    goto BB3
  }
  BB7 {
    assume { Resolve2.resolve f_1 };
    assume { Resolve0.resolve i_3 };
    _4 <- ();
    assume { Resolve1.resolve _4 };
    assume { Resolve3.resolve _15 };
    _15 <- assign_2;
    _0 <- Type.Last_Assignments _15;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Last_Impl8_FindUnassigned_Interface
  use mach.int.UInt64
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  clone Last_Impl2_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.last_assignments,
  type ModelTy0.modelty = ModelTy0.modelty
  clone Last_Impl8_Complete_Interface as Complete0
  val find_unassigned (self : Type.last_assignments) : usize
    requires {not (Complete0.complete self)}
    ensures { Seq.get (Model0.model self) (UInt64.to_int result) = Type.Last_AssignedState_Unset }
    ensures { UInt64.to_int result < Seq.length (Model0.model self) }
    
end
module Last_Impl8_FindUnassigned
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.last_assignedstate
  clone Last_Impl2_Model as Model1 with function Model0.model = Model2.model
  clone Last_Impl8_Complete as Complete0 with function Model0.model = Model1.model
  clone Last_Impl2_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.last_assignments,
  type ModelTy0.modelty = ModelTy0.modelty, function Model0.model = Model1.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.last_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.last_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.last_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.last_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate),
  type ModelTy0.modelty = ModelTy1.modelty, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.last_assignedstate,
  function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.last_assignedstate,
  function Model0.model = Model3.model
  let rec cfg find_unassigned (self : Type.last_assignments) : usize
    requires {not (Complete0.complete self)}
    ensures { Seq.get (Model0.model self) (UInt64.to_int result) = Type.Last_AssignedState_Unset }
    ensures { UInt64.to_int result < Seq.length (Model0.model self) }
    
   = 
  var _0 : usize;
  var self_1 : Type.last_assignments;
  var i_2 : usize;
  var _3 : ();
  var _4 : ();
  var _5 : bool;
  var _6 : usize;
  var _7 : usize;
  var _8 : Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate);
  var curr_9 : Type.last_assignedstate;
  var _10 : Type.last_assignedstate;
  var _11 : Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate);
  var _12 : usize;
  var _13 : ();
  var _14 : isize;
  var _15 : ();
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var _19 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant loop_invariant { 0 <= UInt64.to_int i_2 && UInt64.to_int i_2 <= Seq.length (Model0.model self_1) };
    invariant prev { forall j : (int) . 0 <= j && j < UInt64.to_int i_2 -> not (Seq.get (Model0.model self_1) j = Type.Last_AssignedState_Unset) };
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _6 };
    _6 <- i_2;
    _8 <- Type.last_assignments_Assignments_0 self_1;
    _7 <- Len0.len _8;
    goto BB3
  }
  BB3 {
    _5 <- _6 < _7;
    switch (_5)
      | False -> goto BB9
      | _ -> goto BB4
      end
  }
  BB4 {
    _11 <- Type.last_assignments_Assignments_0 self_1;
    assume { Resolve0.resolve _12 };
    _12 <- i_2;
    _10 <- Index0.index _11 _12;
    goto BB5
  }
  BB5 {
    assume { Resolve1.resolve curr_9 };
    curr_9 <- _10;
    assume { Resolve2.resolve _10 };
    assume { Resolve1.resolve curr_9 };
    switch (curr_9)
      | Type.Last_AssignedState_Unset -> goto BB6
      | _ -> goto BB7
      end
  }
  BB6 {
    assume { Resolve4.resolve self_1 };
    goto BB8
  }
  BB7 {
    _13 <- ();
    assume { Resolve3.resolve _13 };
    i_2 <- i_2 + (1 : usize);
    _4 <- ();
    assume { Resolve3.resolve _4 };
    goto BB1
  }
  BB8 {
    assume { Resolve0.resolve _0 };
    _0 <- i_2;
    assume { Resolve0.resolve i_2 };
    return _0
  }
  BB9 {
    assume { Resolve4.resolve self_1 };
    assume { Resolve0.resolve i_2 };
    _3 <- ();
    assume { Resolve3.resolve _3 };
    absurd
  }
  
end
module Last_LemmaEventuallyAssigned_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone Last_EventuallyUnsatFormulaInner_Interface as EventuallyUnsatFormulaInner0
  function lemma_eventually_assigned (a : Seq.seq (Type.last_assignedstate)) (ix : int) (f : Type.last_formula) : ()
end
module Last_LemmaEventuallyAssigned
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone Last_EventuallyUnsatFormulaInner_Interface as EventuallyUnsatFormulaInner0
  clone Last_CompatibleInner_Interface as CompatibleInner0
  function lemma_eventually_assigned (a : Seq.seq (Type.last_assignedstate)) (ix : int) (f : Type.last_formula) : () = 
    let _ = CompatibleInner0.compatible_inner a (Seq.set a ix (Type.Last_AssignedState_Positive)) in let _ = CompatibleInner0.compatible_inner a (Seq.set a ix (Type.Last_AssignedState_Negative)) in ()
  axiom lemma_eventually_assigned_spec : forall a : Seq.seq (Type.last_assignedstate), ix : int, f : Type.last_formula . EventuallyUnsatFormulaInner0.eventually_unsat_formula_inner (Seq.set a ix (Type.Last_AssignedState_Negative)) f -> EventuallyUnsatFormulaInner0.eventually_unsat_formula_inner (Seq.set a ix (Type.Last_AssignedState_Positive)) f -> Seq.get a ix = Type.Last_AssignedState_Unset -> 0 <= ix && ix < Seq.length a -> EventuallyUnsatFormulaInner0.eventually_unsat_formula_inner a f
end
module Last_LemmaEventuallyAssigned_Impl
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.last_lit
  clone Last_Impl3_Model as Model1 with function Model0.model = Model2.model
  clone Last_NotSatClauseInner as NotSatClauseInner0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.last_clause
  clone Last_NotSatFormulaInner as NotSatFormulaInner0 with function Model0.model = Model0.model,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner
  clone Last_CompleteInner as CompleteInner0
  clone Last_CompatibleInner as CompatibleInner0
  clone Last_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Last_EventuallyUnsatFormulaInner as EventuallyUnsatFormulaInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate NotSatFormulaInner0.not_sat_formula_inner = NotSatFormulaInner0.not_sat_formula_inner
  let rec ghost function lemma_eventually_assigned (a : Seq.seq (Type.last_assignedstate)) (ix : int) (f : Type.last_formula) : ()
    requires {EventuallyUnsatFormulaInner0.eventually_unsat_formula_inner (Seq.set a ix (Type.Last_AssignedState_Negative)) f}
    requires {EventuallyUnsatFormulaInner0.eventually_unsat_formula_inner (Seq.set a ix (Type.Last_AssignedState_Positive)) f}
    requires {Seq.get a ix = Type.Last_AssignedState_Unset}
    requires {0 <= ix && ix < Seq.length a}
    ensures { EventuallyUnsatFormulaInner0.eventually_unsat_formula_inner a f }
    
   = 
    let _ = CompatibleInner0.compatible_inner a (Seq.set a ix (Type.Last_AssignedState_Positive)) in let _ = CompatibleInner0.compatible_inner a (Seq.set a ix (Type.Last_AssignedState_Negative)) in ()
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelty = ModelTy0.modelty, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = t,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index_mut = IndexMut0.index_mut
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module Last_Inner_Interface
  use prelude.Prelude
  use Type
  clone Last_Impl7_EventuallySat_Interface as EventuallySat0
  clone Last_Impl7_EventuallyUnsat_Interface as EventuallyUnsat0
  clone Last_Impl7_Invariant_Interface as Invariant1
  clone Last_Impl8_Invariant_Interface as Invariant0
  val inner (f : Type.last_formula) (a : Type.last_assignments) : bool
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = false -> EventuallyUnsat0.eventually_unsat f a }
    ensures { result = true -> EventuallySat0.eventually_sat f a }
    
end
module Last_Inner
  use prelude.Prelude
  use Type
  clone Last_CompleteInner as CompleteInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.last_lit
  clone Last_Impl3_Model as Model3 with function Model0.model = Model4.model
  clone Last_NotSatClauseInner as NotSatClauseInner0 with function Model0.model = Model3.model
  clone Last_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone Last_CompatibleInner as CompatibleInner0
  clone Last_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.last_assignedstate
  clone Last_Impl2_Model as Model0 with function Model0.model = Model2.model
  clone Last_Impl6_Sat as Sat1 with function Model0.model = Model3.model, function Model1.model = Model0.model
  clone Last_Impl8_Compatible as Compatible0 with function Model0.model = Model0.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Last_Impl8_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.last_clause
  clone Last_NotSatFormulaInner as NotSatFormulaInner0 with function Model0.model = Model1.model,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner
  clone Last_EventuallyUnsatFormulaInner as EventuallyUnsatFormulaInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate NotSatFormulaInner0.not_sat_formula_inner = NotSatFormulaInner0.not_sat_formula_inner
  clone Last_Impl7_EventuallyUnsat as EventuallyUnsat0 with function Model0.model = Model0.model,
  predicate EventuallyUnsatFormulaInner0.eventually_unsat_formula_inner = EventuallyUnsatFormulaInner0.eventually_unsat_formula_inner
  clone Last_Impl7_Sat as Sat0 with function Model0.model = Model1.model, predicate Sat0.sat = Sat1.sat
  clone Last_Impl7_EventuallySat as EventuallySat0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Sat0.sat = Sat0.sat
  clone Last_Impl7_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  use mach.int.Int
  use mach.int.Int64
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.last_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.last_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.last_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.last_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.last_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.last_assignments
  clone Last_Impl2_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.last_satstate
  clone CreusotContracts_Logic_Model_Impl1_Model as Model6 with type t = Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate),
  type ModelTy0.modelty = ModelTy1.modelty, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = Type.last_assignedstate,
  function Model0.model = Model2.model, function Model1.model = Model6.model
  clone Last_Impl6_Unsat as Unsat1 with function Model0.model = Model3.model, function Model1.model = Model0.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.last_assignments,
  type ModelTy0.modelty = ModelTy0.modelty, function Model0.model = Model0.model
  clone Last_Impl8_Clone_Interface as Clone0 with function Model0.model = Model5.model,
  function Model1.model = Model0.model
  clone Last_Impl8_Complete as Complete0 with function Model0.model = Model0.model
  clone Last_Impl8_FindUnassigned_Interface as FindUnassigned0 with predicate Complete0.complete = Complete0.complete,
  function Model0.model = Model5.model
  clone Last_Impl7_Unsat as Unsat0 with function Model0.model = Model1.model, predicate Unsat0.unsat = Unsat1.unsat
  clone Last_Impl7_Eval_Interface as Eval0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Complete0.complete = Complete0.complete,
  predicate Unsat0.unsat = Unsat0.unsat, predicate Sat0.sat = Sat0.sat
  let rec cfg inner (f : Type.last_formula) (a : Type.last_assignments) : bool
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = false -> EventuallyUnsat0.eventually_unsat f a }
    ensures { result = true -> EventuallySat0.eventually_sat f a }
    
   = 
  var _0 : bool;
  var f_1 : Type.last_formula;
  var a_2 : Type.last_assignments;
  var _3 : ();
  var _4 : Type.last_satstate;
  var _5 : Type.last_formula;
  var _6 : Type.last_assignments;
  var _7 : isize;
  var _8 : ();
  var _9 : ();
  var a_cloned_10 : Type.last_assignments;
  var _11 : Type.last_assignments;
  var a_cloned2_12 : Type.last_assignments;
  var _13 : Type.last_assignments;
  var next_14 : usize;
  var _15 : Type.last_assignments;
  var _16 : Type.last_assignedstate;
  var _17 : borrowed (Type.last_assignedstate);
  var _18 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate));
  var _19 : usize;
  var _20 : Type.last_assignedstate;
  var _21 : borrowed (Type.last_assignedstate);
  var _22 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.last_assignedstate));
  var _23 : usize;
  var _24 : bool;
  var _25 : Type.last_formula;
  var _26 : Type.last_assignments;
  var _27 : Type.last_assignments;
  var _28 : ();
  var _29 : ();
  var _30 : Type.last_formula;
  var _31 : Type.last_assignments;
  var _32 : Type.last_assignments;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _5 <- f_1;
    _6 <- a_2;
    _4 <- Eval0.eval _5 _6;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _4 };
    switch (_4)
      | Type.Last_SatState_Sat -> goto BB3
      | Type.Last_SatState_Unsat -> goto BB4
      | _ -> goto BB2
      end
  }
  BB2 {
    _3 <- ();
    assume { Resolve1.resolve _3 };
    _11 <- a_2;
    a_cloned_10 <- Clone0.clone' _11;
    goto BB7
  }
  BB3 {
    assume { Resolve6.resolve f_1 };
    assume { Resolve2.resolve a_2 };
    goto BB5
  }
  BB4 {
    assume { Resolve6.resolve f_1 };
    assume { Resolve2.resolve a_2 };
    goto BB6
  }
  BB5 {
    _0 <- true;
    goto BB19
  }
  BB6 {
    _0 <- false;
    goto BB19
  }
  BB7 {
    _13 <- a_2;
    a_cloned2_12 <- Clone0.clone' _13;
    goto BB8
  }
  BB8 {
    _15 <- a_2;
    assume { Resolve2.resolve a_2 };
    next_14 <- FindUnassigned0.find_unassigned _15;
    goto BB9
  }
  BB9 {
    _16 <- Type.Last_AssignedState_Positive;
    _18 <- borrow_mut (Type.last_assignments_Assignments_0 a_cloned_10);
    a_cloned_10 <- (let Type.Last_Assignments a = a_cloned_10 in Type.Last_Assignments ( ^ _18));
    assume { Resolve3.resolve _19 };
    _19 <- next_14;
    _17 <- IndexMut0.index_mut _18 _19;
    goto BB10
  }
  BB10 {
    assume { Resolve4.resolve ( * _17) };
    _17 <- { _17 with current = _16 };
    assume { Resolve5.resolve _17 };
    _20 <- Type.Last_AssignedState_Negative;
    _22 <- borrow_mut (Type.last_assignments_Assignments_0 a_cloned2_12);
    a_cloned2_12 <- (let Type.Last_Assignments a = a_cloned2_12 in Type.Last_Assignments ( ^ _22));
    assume { Resolve3.resolve _23 };
    _23 <- next_14;
    assume { Resolve3.resolve next_14 };
    _21 <- IndexMut0.index_mut _22 _23;
    goto BB11
  }
  BB11 {
    assume { Resolve4.resolve ( * _21) };
    _21 <- { _21 with current = _20 };
    assume { Resolve5.resolve _21 };
    _25 <- f_1;
    _27 <- a_cloned_10;
    _26 <- _27;
    assume { Resolve2.resolve _27 };
    _24 <- inner _25 _26;
    goto BB12
  }
  BB12 {
    switch (_24)
      | False -> goto BB14
      | _ -> goto BB13
      end
  }
  BB13 {
    assume { Resolve6.resolve f_1 };
    _0 <- true;
    goto BB16
  }
  BB14 {
    _30 <- f_1;
    assume { Resolve6.resolve f_1 };
    _32 <- a_cloned2_12;
    _31 <- _32;
    assume { Resolve2.resolve _32 };
    _0 <- inner _30 _31;
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    assume { Resolve7.resolve a_cloned2_12 };
    goto BB18
  }
  BB18 {
    assume { Resolve7.resolve a_cloned_10 };
    goto BB20
  }
  BB19 {
    goto BB20
  }
  BB20 {
    return _0
  }
  
end
module Last_Impl13
  
end
module Last_Impl16
  
end
module Last_Impl10
  
end
module Last_Impl11
  
end
module Last_Impl15
  
end
