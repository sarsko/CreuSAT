
module NewDb_Assignments_Pos_Stub
  use prelude.Int
  use prelude.UInt8
  function pos [#"../NewDB/src/assignments.rs" 11 0 11 25] (_1' : ()) : uint8
end
module NewDb_Assignments_Pos_Interface
  use prelude.Int
  use prelude.UInt8
  function pos [#"../NewDB/src/assignments.rs" 11 0 11 25] (_1' : ()) : uint8
end
module NewDb_Assignments_Pos
  use prelude.Int
  use prelude.UInt8
  function pos [#"../NewDB/src/assignments.rs" 11 0 11 25] (_1' : ()) : uint8 =
    [#"../NewDB/src/assignments.rs" 12 4 12 7] (1 : uint8)
  val pos [#"../NewDB/src/assignments.rs" 11 0 11 25] (_1' : ()) : uint8
    ensures { result = pos _1' }
    
end
module NewDb_Assignments_Neg_Stub
  use prelude.Int
  use prelude.UInt8
  function neg [#"../NewDB/src/assignments.rs" 16 0 16 25] (_1' : ()) : uint8
end
module NewDb_Assignments_Neg_Interface
  use prelude.Int
  use prelude.UInt8
  function neg [#"../NewDB/src/assignments.rs" 16 0 16 25] (_1' : ()) : uint8
end
module NewDb_Assignments_Neg
  use prelude.Int
  use prelude.UInt8
  function neg [#"../NewDB/src/assignments.rs" 16 0 16 25] (_1' : ()) : uint8 =
    [#"../NewDB/src/assignments.rs" 17 4 17 7] (0 : uint8)
  val neg [#"../NewDB/src/assignments.rs" 16 0 16 25] (_1' : ()) : uint8
    ensures { result = neg _1' }
    
end
module NewDb_Assignments_Unset_Stub
  use prelude.Int
  use prelude.UInt8
  predicate unset [#"../NewDB/src/assignments.rs" 21 0 21 38] (v : uint8)
end
module NewDb_Assignments_Unset_Interface
  use prelude.Int
  use prelude.UInt8
  predicate unset [#"../NewDB/src/assignments.rs" 21 0 21 38] (v : uint8)
end
module NewDb_Assignments_Unset
  use prelude.Int
  use prelude.UInt8
  predicate unset [#"../NewDB/src/assignments.rs" 21 0 21 38] (v : uint8) =
    [#"../NewDB/src/assignments.rs" 22 16 22 23] UInt8.to_int v >= 2
  val unset [#"../NewDB/src/assignments.rs" 21 0 21 38] (v : uint8) : bool
    ensures { result = unset v }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module NewDb_Assignments_Assignments_Type
  use prelude.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_assignments  =
    | C_Assignments (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global))
    
  let function assignments_0 (self : t_assignments) : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignments a -> a
      end
end
module Alloc_Vec_Impl11_Clone_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val clone' (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_Vec_Type.t_vec t a
    ensures { result = self }
    
end
module NewDb_Assignments_Impl2_Clone_Interface
  use prelude.Borrow
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  val clone' [#"../NewDB/src/assignments.rs" 25 9 25 14] (self : NewDb_Assignments_Assignments_Type.t_assignments) : NewDb_Assignments_Assignments_Type.t_assignments
    ensures { [#"../NewDB/src/assignments.rs" 25 9 25 14] result = self }
    
end
module NewDb_Assignments_Impl2_Clone
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt8
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone Alloc_Vec_Impl11_Clone_Interface as Clone0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  let rec cfg clone' [#"../NewDB/src/assignments.rs" 25 9 25 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_Assignments_Assignments_Type.t_assignments) : NewDb_Assignments_Assignments_Type.t_assignments
    ensures { [#"../NewDB/src/assignments.rs" 25 9 25 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NewDb_Assignments_Assignments_Type.t_assignments;
  var self_1 : NewDb_Assignments_Assignments_Type.t_assignments;
  var _3 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _4 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- NewDb_Assignments_Assignments_Type.assignments_0 self_1;
    _3 <- ([#"../NewDB/src/assignments.rs" 26 30 26 52] Clone0.clone' _4);
    goto BB1
  }
  BB1 {
    _0 <- NewDb_Assignments_Assignments_Type.C_Assignments _3;
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module NewDb_Assignments_AssignmentsModel_Type
  use seq.Seq
  use prelude.Int
  use prelude.UInt8
  type t_assignmentsmodel  =
    | C_AssignmentsModel (Seq.seq uint8)
    
  let function assignmentsmodel_0 (self : t_assignmentsmodel) : Seq.seq uint8 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_AssignmentsModel a -> a
      end
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module NewDb_Assignments_Impl0_ShallowModel_Stub
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  function shallow_model [#"../NewDB/src/assignments.rs" 33 4 33 50] (self : NewDb_Assignments_Assignments_Type.t_assignments) : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel
    
end
module NewDb_Assignments_Impl0_ShallowModel_Interface
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  function shallow_model [#"../NewDB/src/assignments.rs" 33 4 33 50] (self : NewDb_Assignments_Assignments_Type.t_assignments) : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel
    
end
module NewDb_Assignments_Impl0_ShallowModel
  use prelude.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  function shallow_model [#"../NewDB/src/assignments.rs" 33 4 33 50] (self : NewDb_Assignments_Assignments_Type.t_assignments) : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel
    
   =
    [#"../NewDB/src/assignments.rs" 34 8 34 48] NewDb_Assignments_AssignmentsModel_Type.C_AssignmentsModel (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 self))
  val shallow_model [#"../NewDB/src/assignments.rs" 33 4 33 50] (self : NewDb_Assignments_Assignments_Type.t_assignments) : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel
    ensures { result = shallow_model self }
    
end
module NewDb_Assignments_Impl1_Invariant_Stub
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  predicate invariant' [#"../NewDB/src/assignments.rs" 42 4 42 34] (self : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module NewDb_Assignments_Impl1_Invariant_Interface
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  predicate invariant' [#"../NewDB/src/assignments.rs" 42 4 42 34] (self : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module NewDb_Assignments_Impl1_Invariant
  use prelude.Int
  use seq.Seq
  use prelude.UInt8
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  predicate invariant' [#"../NewDB/src/assignments.rs" 42 4 42 34] (self : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
   =
    [#"../NewDB/src/assignments.rs" 43 8 46 9] forall i : int . 0 <= i /\ i < Seq.length (NewDb_Assignments_AssignmentsModel_Type.assignmentsmodel_0 self) -> UInt8.to_int (Seq.get (NewDb_Assignments_AssignmentsModel_Type.assignmentsmodel_0 self) i) < 2
  val invariant' [#"../NewDB/src/assignments.rs" 42 4 42 34] (self : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel) : bool
    ensures { result = invariant' self }
    
end
module NewDb_Assignments_Impl1_Complete_Stub
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  predicate complete [#"../NewDB/src/assignments.rs" 50 4 50 33] (self : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module NewDb_Assignments_Impl1_Complete_Interface
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  predicate complete [#"../NewDB/src/assignments.rs" 50 4 50 33] (self : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module NewDb_Assignments_Impl1_Complete
  use prelude.Int
  use seq.Seq
  clone NewDb_Assignments_Unset_Stub as Unset0
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  predicate complete [#"../NewDB/src/assignments.rs" 50 4 50 33] (self : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
   =
    [#"../NewDB/src/assignments.rs" 51 8 53 9] forall i : int . 0 <= i /\ i < Seq.length (NewDb_Assignments_AssignmentsModel_Type.assignmentsmodel_0 self) -> not Unset0.unset (Seq.get (NewDb_Assignments_AssignmentsModel_Type.assignmentsmodel_0 self) i)
  val complete [#"../NewDB/src/assignments.rs" 50 4 50 33] (self : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel) : bool
    ensures { result = complete self }
    
end
module NewDb_Lit_Lit_Type
  use prelude.Int
  use prelude.UInt32
  type t_lit  =
    | C_Lit uint32
    
  let function lit_code (self : t_lit) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Lit a -> a
      end
end
module NewDb_Clause_ClauseFSet_Type
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  type t_clausefset  =
    | C_ClauseFSet (Fset.fset (NewDb_Lit_Lit_Type.t_lit))
    
  let function clausefset_lits (self : t_clausefset) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseFSet a -> a
      end
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Stub
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Interface
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
end
module CreusotContracts_Logic_Fset_Impl0_Contains
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t) =
    [#"../NewDB/src/clause_manager.rs" 64 20 64 38] Fset.mem e self
  val contains [@inline:trivial] (self : Fset.fset t) (e : t) : bool
    ensures { result = contains self e }
    
end
module NewDb_Lit_LitModel_Type
  use prelude.Int
  type t_litmodel  =
    | C_LitModel int
    
  let function litmodel_code (self : t_litmodel) : int = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_LitModel a -> a
      end
end
module NewDb_Lit_Impl0_ShallowModel_Stub
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  function shallow_model [#"../NewDB/src/lit.rs" 19 4 19 50] (self : NewDb_Lit_Lit_Type.t_lit) : NewDb_Lit_LitModel_Type.t_litmodel
    
end
module NewDb_Lit_Impl0_ShallowModel_Interface
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  function shallow_model [#"../NewDB/src/lit.rs" 19 4 19 50] (self : NewDb_Lit_Lit_Type.t_lit) : NewDb_Lit_LitModel_Type.t_litmodel
    
end
module NewDb_Lit_Impl0_ShallowModel
  use prelude.UInt32
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  function shallow_model [#"../NewDB/src/lit.rs" 19 4 19 50] (self : NewDb_Lit_Lit_Type.t_lit) : NewDb_Lit_LitModel_Type.t_litmodel
    
   =
    [#"../NewDB/src/lit.rs" 20 8 20 52] NewDb_Lit_LitModel_Type.C_LitModel (UInt32.to_int (NewDb_Lit_Lit_Type.lit_code self))
  val shallow_model [#"../NewDB/src/lit.rs" 19 4 19 50] (self : NewDb_Lit_Lit_Type.t_lit) : NewDb_Lit_LitModel_Type.t_litmodel
    ensures { result = shallow_model self }
    
end
module NewDb_Lit_Impl2_IndexLogic_Stub
  use prelude.Int
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  function index_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 61 4 61 35] (self : NewDb_Lit_LitModel_Type.t_litmodel) : int
    
end
module NewDb_Lit_Impl2_IndexLogic_Interface
  use prelude.Int
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  function index_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 61 4 61 35] (self : NewDb_Lit_LitModel_Type.t_litmodel) : int
    
end
module NewDb_Lit_Impl2_IndexLogic
  use prelude.Int
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  function index_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 61 4 61 35] (self : NewDb_Lit_LitModel_Type.t_litmodel) : int
    
   =
    [#"../NewDB/src/lit.rs" 59 4 59 12] div (NewDb_Lit_LitModel_Type.litmodel_code self) 2
  val index_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 61 4 61 35] (self : NewDb_Lit_LitModel_Type.t_litmodel) : int
    ensures { result = index_logic self }
    
end
module NewDb_Lit_Impl2_IsPositiveLogic_Stub
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  function is_positive_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 67 4 67 42] (self : NewDb_Lit_LitModel_Type.t_litmodel) : bool
    
end
module NewDb_Lit_Impl2_IsPositiveLogic_Interface
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  function is_positive_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 67 4 67 42] (self : NewDb_Lit_LitModel_Type.t_litmodel) : bool
    
end
module NewDb_Lit_Impl2_IsPositiveLogic
  use prelude.Int
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  function is_positive_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 67 4 67 42] (self : NewDb_Lit_LitModel_Type.t_litmodel) : bool
    
   =
    [#"../NewDB/src/lit.rs" 68 8 68 26] mod (NewDb_Lit_LitModel_Type.litmodel_code self) 2 = 0
  val is_positive_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 67 4 67 42] (self : NewDb_Lit_LitModel_Type.t_litmodel) : bool
    ensures { result = is_positive_logic self }
    
end
module NewDb_LogicUtil_BoolAsU8_Stub
  use prelude.Int
  use prelude.UInt8
  function bool_as_u8 [@inline:trivial] [#"../NewDB/src/logic_util.rs" 10 0 10 39] (b : bool) : uint8
end
module NewDb_LogicUtil_BoolAsU8_Interface
  use prelude.Int
  use prelude.UInt8
  function bool_as_u8 [@inline:trivial] [#"../NewDB/src/logic_util.rs" 10 0 10 39] (b : bool) : uint8
end
module NewDb_LogicUtil_BoolAsU8
  use prelude.Int
  use prelude.UInt8
  function bool_as_u8 [@inline:trivial] [#"../NewDB/src/logic_util.rs" 10 0 10 39] (b : bool) : uint8 =
    [#"../NewDB/src/logic_util.rs" 12 7 15 8] if b then (1 : uint8) else (0 : uint8)
  val bool_as_u8 [@inline:trivial] [#"../NewDB/src/logic_util.rs" 10 0 10 39] (b : bool) : uint8
    ensures { result = bool_as_u8 b }
    
end
module NewDb_Lit_Impl3_Sat_Stub
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  predicate sat [@inline:trivial] [#"../NewDB/src/lit.rs" 83 4 83 56] (self : NewDb_Lit_LitModel_Type.t_litmodel) (a : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module NewDb_Lit_Impl3_Sat_Interface
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  predicate sat [@inline:trivial] [#"../NewDB/src/lit.rs" 83 4 83 56] (self : NewDb_Lit_LitModel_Type.t_litmodel) (a : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module NewDb_Lit_Impl3_Sat
  use seq.Seq
  clone NewDb_LogicUtil_BoolAsU8_Stub as BoolAsU80
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  clone NewDb_Lit_Impl2_IsPositiveLogic_Stub as IsPositiveLogic0
  clone NewDb_Lit_Impl2_IndexLogic_Stub as IndexLogic0
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  predicate sat [@inline:trivial] [#"../NewDB/src/lit.rs" 83 4 83 56] (self : NewDb_Lit_LitModel_Type.t_litmodel) (a : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
   =
    [#"../NewDB/src/lit.rs" 85 12 85 75] Seq.get (NewDb_Assignments_AssignmentsModel_Type.assignmentsmodel_0 a) (IndexLogic0.index_logic self) = BoolAsU80.bool_as_u8 (IsPositiveLogic0.is_positive_logic self)
  val sat [@inline:trivial] [#"../NewDB/src/lit.rs" 83 4 83 56] (self : NewDb_Lit_LitModel_Type.t_litmodel) (a : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel) : bool
    ensures { result = sat self a }
    
end
module NewDb_Clause_Impl0_Sat_Stub
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  predicate sat [#"../NewDB/src/clause.rs" 13 4 13 66] (self : NewDb_Clause_ClauseFSet_Type.t_clausefset) (assignments : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module NewDb_Clause_Impl0_Sat_Interface
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  predicate sat [#"../NewDB/src/clause.rs" 13 4 13 66] (self : NewDb_Clause_ClauseFSet_Type.t_clausefset) (assignments : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module NewDb_Clause_Impl0_Sat
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  clone NewDb_Lit_Impl3_Sat_Stub as Sat0
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_ShallowModel_Stub as ShallowModel0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  predicate sat [#"../NewDB/src/clause.rs" 13 4 13 66] (self : NewDb_Clause_ClauseFSet_Type.t_clausefset) (assignments : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
   =
    [#"../NewDB/src/clause.rs" 14 8 16 9] exists l : NewDb_Lit_Lit_Type.t_lit . Contains0.contains (NewDb_Clause_ClauseFSet_Type.clausefset_lits self) l /\ Sat0.sat (ShallowModel0.shallow_model l) assignments
  val sat [#"../NewDB/src/clause.rs" 13 4 13 66] (self : NewDb_Clause_ClauseFSet_Type.t_clausefset) (assignments : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel) : bool
    ensures { result = sat self assignments }
    
end
module NewDb_Lit_Impl3_VarInRange_Stub
  use prelude.Int
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  predicate var_in_range [#"../NewDB/src/lit.rs" 74 4 74 52] (self : NewDb_Lit_LitModel_Type.t_litmodel) (n : int)
end
module NewDb_Lit_Impl3_VarInRange_Interface
  use prelude.Int
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  predicate var_in_range [#"../NewDB/src/lit.rs" 74 4 74 52] (self : NewDb_Lit_LitModel_Type.t_litmodel) (n : int)
end
module NewDb_Lit_Impl3_VarInRange
  use prelude.Int
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  clone NewDb_Lit_Impl2_IndexLogic_Stub as IndexLogic0
  predicate var_in_range [#"../NewDB/src/lit.rs" 74 4 74 52] (self : NewDb_Lit_LitModel_Type.t_litmodel) (n : int) =
    [#"../NewDB/src/lit.rs" 76 12 76 34] IndexLogic0.index_logic self < n
  val var_in_range [#"../NewDB/src/lit.rs" 74 4 74 52] (self : NewDb_Lit_LitModel_Type.t_litmodel) (n : int) : bool
    ensures { result = var_in_range self n }
    
end
module NewDb_Clause_Impl0_Invariant_Stub
  use prelude.Int
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  predicate invariant' [#"../NewDB/src/clause.rs" 21 4 21 56] (self : NewDb_Clause_ClauseFSet_Type.t_clausefset) (num_vars : int)
    
end
module NewDb_Clause_Impl0_Invariant_Interface
  use prelude.Int
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  predicate invariant' [#"../NewDB/src/clause.rs" 21 4 21 56] (self : NewDb_Clause_ClauseFSet_Type.t_clausefset) (num_vars : int)
    
end
module NewDb_Clause_Impl0_Invariant
  use prelude.Int
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  clone NewDb_Lit_Impl3_VarInRange_Stub as VarInRange0
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_ShallowModel_Stub as ShallowModel0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  predicate invariant' [#"../NewDB/src/clause.rs" 21 4 21 56] (self : NewDb_Clause_ClauseFSet_Type.t_clausefset) (num_vars : int)
    
   =
    [#"../NewDB/src/clause.rs" 22 8 24 9] forall l : NewDb_Lit_Lit_Type.t_lit . Contains0.contains (NewDb_Clause_ClauseFSet_Type.clausefset_lits self) l -> VarInRange0.var_in_range (ShallowModel0.shallow_model l) num_vars
  val invariant' [#"../NewDB/src/clause.rs" 21 4 21 56] (self : NewDb_Clause_ClauseFSet_Type.t_clausefset) (num_vars : int) : bool
    ensures { result = invariant' self num_vars }
    
end
module NewDb_Clause_ClauseSeq_Type
  use seq.Seq
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  type t_clauseseq  =
    | C_ClauseSeq (Seq.seq (NewDb_Lit_Lit_Type.t_lit))
    
  let function clauseseq_lits (self : t_clauseseq) : Seq.seq (NewDb_Lit_Lit_Type.t_lit)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseSeq a -> a
      end
end
module NewDb_Clause_Impl1_Invariant_Stub
  use prelude.Int
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  predicate invariant' [#"../NewDB/src/clause.rs" 35 4 35 56] (self : NewDb_Clause_ClauseSeq_Type.t_clauseseq) (num_vars : int)
    
end
module NewDb_Clause_Impl1_Invariant_Interface
  use prelude.Int
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  predicate invariant' [#"../NewDB/src/clause.rs" 35 4 35 56] (self : NewDb_Clause_ClauseSeq_Type.t_clauseseq) (num_vars : int)
    
end
module NewDb_Clause_Impl1_Invariant
  use prelude.Int
  use seq.Seq
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl3_VarInRange_Stub as VarInRange0
  clone NewDb_Lit_Impl0_ShallowModel_Stub as ShallowModel0
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  predicate invariant' [#"../NewDB/src/clause.rs" 35 4 35 56] (self : NewDb_Clause_ClauseSeq_Type.t_clauseseq) (num_vars : int)
    
   =
    [#"../NewDB/src/clause.rs" 36 8 39 9] forall i : int . 0 <= i /\ i < Seq.length (NewDb_Clause_ClauseSeq_Type.clauseseq_lits self) -> VarInRange0.var_in_range (ShallowModel0.shallow_model (Seq.get (NewDb_Clause_ClauseSeq_Type.clauseseq_lits self) i)) num_vars
  val invariant' [#"../NewDB/src/clause.rs" 35 4 35 56] (self : NewDb_Clause_ClauseSeq_Type.t_clauseseq) (num_vars : int) : bool
    ensures { result = invariant' self num_vars }
    
end
module NewDb_Clause_Impl1_NoDuplicateIndexes_Stub
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  predicate no_duplicate_indexes [#"../NewDB/src/clause.rs" 43 4 43 52] (self : NewDb_Clause_ClauseSeq_Type.t_clauseseq)
end
module NewDb_Clause_Impl1_NoDuplicateIndexes_Interface
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  predicate no_duplicate_indexes [#"../NewDB/src/clause.rs" 43 4 43 52] (self : NewDb_Clause_ClauseSeq_Type.t_clauseseq)
end
module NewDb_Clause_Impl1_NoDuplicateIndexes
  use prelude.Int
  use seq.Seq
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl2_IndexLogic_Stub as IndexLogic0
  clone NewDb_Lit_Impl0_ShallowModel_Stub as ShallowModel0
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  predicate no_duplicate_indexes [#"../NewDB/src/clause.rs" 43 4 43 52] (self : NewDb_Clause_ClauseSeq_Type.t_clauseseq)
   =
    [#"../NewDB/src/clause.rs" 44 8 47 9] forall k : int . forall j : int . 0 <= j /\ j < Seq.length (NewDb_Clause_ClauseSeq_Type.clauseseq_lits self) /\ 0 <= k /\ k < j -> not IndexLogic0.index_logic (ShallowModel0.shallow_model (Seq.get (NewDb_Clause_ClauseSeq_Type.clauseseq_lits self) k)) = IndexLogic0.index_logic (ShallowModel0.shallow_model (Seq.get (NewDb_Clause_ClauseSeq_Type.clauseseq_lits self) j))
  val no_duplicate_indexes [#"../NewDB/src/clause.rs" 43 4 43 52] (self : NewDb_Clause_ClauseSeq_Type.t_clauseseq) : bool
    ensures { result = no_duplicate_indexes self }
    
end
module NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use seq.Seq
  use prelude.Int
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  type t_clauseallocatormodel  =
    | C_ClauseAllocatorModel (Seq.seq (NewDb_Lit_Lit_Type.t_lit)) int
    
  let function clauseallocatormodel_buffer (self : t_clauseallocatormodel) : Seq.seq (NewDb_Lit_Lit_Type.t_lit)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseAllocatorModel a _ -> a
      end
  let function clauseallocatormodel_num_vars (self : t_clauseallocatormodel) : int = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseAllocatorModel _ a -> a
      end
end
module NewDb_ClauseAllocator_HeaderLen_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant hEADER_LEN' [#"../NewDB/src/clause_allocator.rs" 52 0 52 27]  : usize
end
module NewDb_ClauseAllocator_HeaderLen
  use prelude.Int
  use prelude.UIntSize
  let constant hEADER_LEN' [#"../NewDB/src/clause_allocator.rs" 52 0 52 27]  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../NewDB/src/clause_allocator.rs" 52 0 52 27] (1 : usize)
end
module NewDb_ClauseAllocator_Impl3_GetClauseSeq_Stub
  use prelude.Int
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  function get_clause_seq [#"../NewDB/src/clause_allocator.rs" 131 4 131 62] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : NewDb_Clause_ClauseSeq_Type.t_clauseseq
    
end
module NewDb_ClauseAllocator_Impl3_GetClauseSeq_Interface
  use prelude.Int
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  function get_clause_seq [#"../NewDB/src/clause_allocator.rs" 131 4 131 62] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : NewDb_Clause_ClauseSeq_Type.t_clauseseq
    
end
module NewDb_ClauseAllocator_Impl3_GetClauseSeq
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use prelude.UInt32
  use seq_ext.SeqExt
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  function get_clause_seq [#"../NewDB/src/clause_allocator.rs" 131 4 131 62] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : NewDb_Clause_ClauseSeq_Type.t_clauseseq
    
   =
    [#"../NewDB/src/clause_allocator.rs" 133 12 133 121] NewDb_Clause_ClauseSeq_Type.C_ClauseSeq (SeqExt.subsequence (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) (cref + UIntSize.to_int HeaderLen0.hEADER_LEN') (cref + UIntSize.to_int HeaderLen0.hEADER_LEN' + UInt32.to_int (NewDb_Lit_Lit_Type.lit_code (Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref))))
  val get_clause_seq [#"../NewDB/src/clause_allocator.rs" 131 4 131 62] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : NewDb_Clause_ClauseSeq_Type.t_clauseseq
    ensures { result = get_clause_seq self cref }
    
end
module NewDb_ClauseAllocator_CrefInvariant_Stub
  use prelude.Int
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  predicate cref_invariant [#"../NewDB/src/clause_allocator.rs" 16 0 16 102] (cref : int) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int)
    
end
module NewDb_ClauseAllocator_CrefInvariant_Interface
  use prelude.Int
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  predicate cref_invariant [#"../NewDB/src/clause_allocator.rs" 16 0 16 102] (cref : int) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int)
    
end
module NewDb_ClauseAllocator_CrefInvariant
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use prelude.UIntSize
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  clone NewDb_Clause_Impl1_Invariant_Stub as Invariant0
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseSeq_Stub as GetClauseSeq0
  clone NewDb_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  predicate cref_invariant [#"../NewDB/src/clause_allocator.rs" 16 0 16 102] (cref : int) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int)
    
   =
    [#"../NewDB/src/clause_allocator.rs" 18 8 20 68] cref < Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer clause_allocator) /\ UInt32.to_int (NewDb_Lit_Lit_Type.lit_code (Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer clause_allocator) cref)) + cref + UIntSize.to_int HeaderLen0.hEADER_LEN' <= Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer clause_allocator) /\ Invariant0.invariant' (GetClauseSeq0.get_clause_seq clause_allocator cref) num_vars
  val cref_invariant [#"../NewDB/src/clause_allocator.rs" 16 0 16 102] (cref : int) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int) : bool
    ensures { result = cref_invariant cref clause_allocator num_vars }
    
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Stub
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Interface
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t =
    [#"../NewDB/src/clause_manager.rs" 73 12 73 30] Fset.add e self
  val insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
    ensures { result = insert self e }
    
end
module NewDb_ClauseAllocator_Impl3_GetClauseFsetInternal_Stub
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  function get_clause_fset_internal [#"../NewDB/src/clause_allocator.rs" 149 4 149 83] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) (idx : int) (upper : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
end
module NewDb_ClauseAllocator_Impl3_GetClauseFsetInternal_Interface
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  function get_clause_fset_internal [#"../NewDB/src/clause_allocator.rs" 149 4 149 83] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) (idx : int) (upper : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
end
module NewDb_ClauseAllocator_Impl3_GetClauseFsetInternal
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  function get_clause_fset_internal [#"../NewDB/src/clause_allocator.rs" 149 4 149 83] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) (idx : int) (upper : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
  val get_clause_fset_internal [#"../NewDB/src/clause_allocator.rs" 149 4 149 83] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) (idx : int) (upper : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    requires {[#"../NewDB/src/clause_allocator.rs" 148 15 148 53] idx >= 0 /\ upper <= Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self)}
    ensures { result = get_clause_fset_internal self cref idx upper }
    
  axiom def : forall self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, cref : int, idx : int, upper : int . get_clause_fset_internal self cref idx upper = ([#"../NewDB/src/clause_allocator.rs" 150 8 157 9] if idx < upper then
    let set = get_clause_fset_internal self cref (idx + 1) upper in Insert0.insert set (Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) (cref + idx))
  else
    Fset.empty 
  )
end
module NewDb_ClauseAllocator_Impl3_GetClauseFsetInternal_Impl
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  let rec ghost function get_clause_fset_internal [#"../NewDB/src/clause_allocator.rs" 149 4 149 83] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) (idx : int) (upper : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    requires {[#"../NewDB/src/clause_allocator.rs" 148 15 148 53] idx >= 0 /\ upper <= Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self)}
    variant {[#"../NewDB/src/clause_allocator.rs" 147 14 147 25] upper - idx}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../NewDB/src/clause_allocator.rs" 150 8 157 9] if pure {idx < upper} then
      let set = get_clause_fset_internal self cref (idx + 1) upper in Insert0.insert set (Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) (cref + idx))
    else
      Fset.empty 
    
end
module NewDb_ClauseAllocator_Impl3_GetClauseFset_Stub
  use prelude.Int
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  function get_clause_fset [#"../NewDB/src/clause_allocator.rs" 139 4 139 64] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : NewDb_Clause_ClauseFSet_Type.t_clausefset
    
end
module NewDb_ClauseAllocator_Impl3_GetClauseFset_Interface
  use prelude.Int
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  function get_clause_fset [#"../NewDB/src/clause_allocator.rs" 139 4 139 64] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : NewDb_Clause_ClauseFSet_Type.t_clausefset
    
end
module NewDb_ClauseAllocator_Impl3_GetClauseFset
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use prelude.UInt32
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseFsetInternal_Stub as GetClauseFsetInternal0 with
    axiom .
  clone NewDb_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  function get_clause_fset [#"../NewDB/src/clause_allocator.rs" 139 4 139 64] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : NewDb_Clause_ClauseFSet_Type.t_clausefset
    
   =
    [#"../NewDB/src/clause_allocator.rs" 141 12 141 134] NewDb_Clause_ClauseFSet_Type.C_ClauseFSet (GetClauseFsetInternal0.get_clause_fset_internal self cref (cref + UIntSize.to_int HeaderLen0.hEADER_LEN') (cref + UIntSize.to_int HeaderLen0.hEADER_LEN' + UInt32.to_int (NewDb_Lit_Lit_Type.lit_code (Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref))))
  val get_clause_fset [#"../NewDB/src/clause_allocator.rs" 139 4 139 64] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : NewDb_Clause_ClauseFSet_Type.t_clausefset
    ensures { result = get_clause_fset self cref }
    
end
module NewDb_ClauseAllocator_CrefInvariantFset_Stub
  use prelude.Int
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  predicate cref_invariant_fset [#"../NewDB/src/clause_allocator.rs" 25 0 25 107] (cref : int) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int)
    
end
module NewDb_ClauseAllocator_CrefInvariantFset_Interface
  use prelude.Int
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  predicate cref_invariant_fset [#"../NewDB/src/clause_allocator.rs" 25 0 25 107] (cref : int) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int)
    
end
module NewDb_ClauseAllocator_CrefInvariantFset
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use prelude.UIntSize
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  clone NewDb_Clause_Impl0_Invariant_Stub as Invariant0
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseFset_Stub as GetClauseFset0
  clone NewDb_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  predicate cref_invariant_fset [#"../NewDB/src/clause_allocator.rs" 25 0 25 107] (cref : int) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int)
    
   =
    [#"../NewDB/src/clause_allocator.rs" 27 8 29 69] cref < Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer clause_allocator) /\ UInt32.to_int (NewDb_Lit_Lit_Type.lit_code (Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer clause_allocator) cref)) + cref + UIntSize.to_int HeaderLen0.hEADER_LEN' <= Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer clause_allocator) /\ Invariant0.invariant' (GetClauseFset0.get_clause_fset clause_allocator cref) num_vars
  val cref_invariant_fset [#"../NewDB/src/clause_allocator.rs" 25 0 25 107] (cref : int) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int) : bool
    ensures { result = cref_invariant_fset cref clause_allocator num_vars }
    
end
module NewDb_ClauseAllocator_ClauseAllocator_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_clauseallocator  =
    | C_ClauseAllocator (Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global)) usize
    
  let function clauseallocator_buffer (self : t_clauseallocator) : Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseAllocator a _ -> a
      end
  let function clauseallocator_num_vars (self : t_clauseallocator) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseAllocator _ a -> a
      end
end
module NewDb_ClauseAllocator_Impl0_ShallowModel_Stub
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_ClauseAllocator_ClauseAllocator_Type as NewDb_ClauseAllocator_ClauseAllocator_Type
  function shallow_model [#"../NewDB/src/clause_allocator.rs" 44 4 44 50] (self : NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator) : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel
    
end
module NewDb_ClauseAllocator_Impl0_ShallowModel_Interface
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_ClauseAllocator_ClauseAllocator_Type as NewDb_ClauseAllocator_ClauseAllocator_Type
  function shallow_model [#"../NewDB/src/clause_allocator.rs" 44 4 44 50] (self : NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator) : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel
    
end
module NewDb_ClauseAllocator_Impl0_ShallowModel
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_ClauseAllocator_ClauseAllocator_Type as NewDb_ClauseAllocator_ClauseAllocator_Type
  function shallow_model [#"../NewDB/src/clause_allocator.rs" 44 4 44 50] (self : NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator) : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel
    
   =
    [#"../NewDB/src/clause_allocator.rs" 45 8 48 9] NewDb_ClauseAllocator_ClauseAllocatorModel_Type.C_ClauseAllocatorModel (ShallowModel0.shallow_model (NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_buffer self)) (UIntSize.to_int (NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars self))
  val shallow_model [#"../NewDB/src/clause_allocator.rs" 44 4 44 50] (self : NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator) : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Core_U32_Max_Stub
  use prelude.Int
  use prelude.UInt32
  val constant mAX'  : uint32
end
module Core_U32_Max
  use prelude.Int
  use prelude.UInt32
  let constant mAX'  : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    (4294967295 : uint32)
end
module NewDb_ClauseAllocator_Impl2_Invariant_Stub
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  predicate invariant' [#"../NewDB/src/clause_allocator.rs" 111 4 111 41] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module NewDb_ClauseAllocator_Impl2_Invariant_Interface
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  predicate invariant' [#"../NewDB/src/clause_allocator.rs" 111 4 111 41] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module NewDb_ClauseAllocator_Impl2_Invariant
  use seq.Seq
  use prelude.UInt32
  use prelude.Int
  clone Core_U32_Max_Stub as Max0
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  predicate invariant' [#"../NewDB/src/clause_allocator.rs" 111 4 111 41] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
   =
    [#"../NewDB/src/clause_allocator.rs" 112 20 112 50] Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) <= UInt32.to_int Max0.mAX'
  val invariant' [#"../NewDB/src/clause_allocator.rs" 111 4 111 41] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self) =
    true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type s
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = s,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function index_logic [@inline:trivial] (self : s) (ix : int) : t =
    [#"../NewDB/src/cref_manager.rs" 42 71 42 94] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : slice t) : Seq.seq t
  axiom to_ref_seq_spec : forall self : slice t . (forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = IndexLogic0.index_logic self i) && Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self)
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : slice t) : Seq.seq t
  val to_ref_seq (self : slice t) : Seq.seq t
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : slice t . (forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = IndexLogic0.index_logic self i) && Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self)
end
module CreusotContracts_Std1_Slice_Impl15_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl15_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl15_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub as ToRefSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model self) = Seq.(++) visited (ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model tl))
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val len (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Core_Slice_Impl0_Len_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val len (self : slice t) : usize
    ensures { Seq.length (ShallowModel0.shallow_model self) = UIntSize.to_int result }
    
end
module NewDb_Lit_Impl1_Raw_Interface
  use prelude.UInt32
  use prelude.Int
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  val raw [#"../NewDB/src/lit.rs" 26 4 26 39] (code : uint32) : NewDb_Lit_Lit_Type.t_lit
    ensures { [#"../NewDB/src/lit.rs" 25 14 25 35] UInt32.to_int (NewDb_Lit_Lit_Type.lit_code result) = UInt32.to_int code }
    
end
module NewDb_Lit_Impl1_Raw
  use prelude.Int
  use prelude.UInt32
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  let rec cfg raw [#"../NewDB/src/lit.rs" 26 4 26 39] [@cfg:stackify] [@cfg:subregion_analysis] (code : uint32) : NewDb_Lit_Lit_Type.t_lit
    ensures { [#"../NewDB/src/lit.rs" 25 14 25 35] UInt32.to_int (NewDb_Lit_Lit_Type.lit_code result) = UInt32.to_int code }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NewDb_Lit_Lit_Type.t_lit;
  var code_1 : uint32;
  var _3 : uint32;
  {
    code_1 <- code;
    goto BB0
  }
  BB0 {
    _3 <- code_1;
    _0 <- NewDb_Lit_Lit_Type.C_Lit _3;
    return _0
  }
  
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val push (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPre_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  predicate into_iter_pre (self : slice t)
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPre_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  predicate into_iter_pre (self : slice t)
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPre
  type t
  use prelude.Borrow
  use prelude.Slice
  predicate into_iter_pre (self : slice t) =
    true
  val into_iter_pre (self : slice t) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPost_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate into_iter_post (self : slice t) (res : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPost_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate into_iter_post (self : slice t) (res : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPost
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  predicate into_iter_post (self : slice t) (res : Core_Slice_Iter_Iter_Type.t_iter t) =
    self = ShallowModel0.shallow_model res
  val into_iter_post (self : slice t) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Slice_Iter_Impl0_IntoIter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl11_IntoIterPost_Stub as IntoIterPost0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl11_IntoIterPre_Stub as IntoIterPre0 with
    type t = t
  val into_iter (self : slice t) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {IntoIterPre0.into_iter_pre self}
    ensures { IntoIterPost0.into_iter_post self result }
    ensures { Invariant0.invariant' result }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  axiom shallow_model_spec : forall self : slice t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Slice_Impl15_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl15_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl15_Completed
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = slice t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    Resolve0.resolve self /\ ShallowModel1.shallow_model (ShallowModel0.shallow_model self) = Seq.empty 
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module Core_Slice_Iter_Impl181_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl15_Completed_Stub as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  val next (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
  axiom is_inhabited_spec : forall _1' : () . is_inhabited _1' && (exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool =
    true
  val is_inhabited (_1' : ()) : bool
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . is_inhabited _1' && (exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    ()
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module NewDb_ClauseAllocator_Impl1_AddClause_Interface
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Slice
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use seq.Seq
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  clone NewDb_ClauseAllocator_CrefInvariant_Stub as CrefInvariant0
  use NewDb_ClauseAllocator_ClauseAllocator_Type as NewDb_ClauseAllocator_ClauseAllocator_Type
  clone NewDb_ClauseAllocator_Impl0_ShallowModel_Stub as ShallowModel2
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  clone NewDb_Clause_Impl1_Invariant_Stub as Invariant1
  clone Core_U32_Max_Stub as Max0
  clone NewDb_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = slice (NewDb_Lit_Lit_Type.t_lit),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit)
  clone NewDb_ClauseAllocator_Impl2_Invariant_Stub as Invariant0
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator,
    type ShallowModelTy0.shallowModelTy = NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel
  val add_clause [#"../NewDB/src/clause_allocator.rs" 69 4 69 61] (self : borrowed (NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator)) (lits : slice (NewDb_Lit_Lit_Type.t_lit)) : uint32
    requires {[#"../NewDB/src/clause_allocator.rs" 57 4 57 34] Invariant0.invariant' (ShallowModel0.shallow_model self)}
    requires {[#"../NewDB/src/clause_allocator.rs" 59 15 59 30] Seq.length (ShallowModel1.shallow_model lits) > 0}
    requires {[#"../NewDB/src/clause_allocator.rs" 60 15 60 74] Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self)) + Seq.length (ShallowModel1.shallow_model lits) + UIntSize.to_int HeaderLen0.hEADER_LEN' <= UInt32.to_int Max0.mAX'}
    requires {[#"../NewDB/src/clause_allocator.rs" 61 15 61 63] Invariant1.invariant' (NewDb_Clause_ClauseSeq_Type.C_ClauseSeq (ShallowModel1.shallow_model lits)) (UIntSize.to_int (NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars ( * self)))}
    ensures { [#"../NewDB/src/clause_allocator.rs" 58 4 58 36] Invariant0.invariant' (ShallowModel2.shallow_model ( ^ self)) }
    ensures { [#"../NewDB/src/clause_allocator.rs" 62 14 62 47] NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars ( ^ self) = NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars ( * self) }
    ensures { [#"../NewDB/src/clause_allocator.rs" 63 14 63 85] Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel2.shallow_model ( ^ self))) = Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self)) + Seq.length (ShallowModel1.shallow_model lits) + UIntSize.to_int HeaderLen0.hEADER_LEN' }
    ensures { [#"../NewDB/src/clause_allocator.rs" 64 14 64 43] UInt32.to_int result = Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self)) }
    ensures { [#"../NewDB/src/clause_allocator.rs" 65 14 65 59] UInt32.to_int (NewDb_Lit_Lit_Type.lit_code (Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel2.shallow_model ( ^ self))) (UInt32.to_int result))) = Seq.length (ShallowModel1.shallow_model lits) }
    ensures { [#"../NewDB/src/clause_allocator.rs" 66 4 66 105] forall i : int . 0 <= i /\ i < Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self)) -> Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel2.shallow_model ( ^ self))) i = Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self)) i }
    ensures { [#"../NewDB/src/clause_allocator.rs" 67 4 67 115] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model lits) -> Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel2.shallow_model ( ^ self))) (UInt32.to_int result + UIntSize.to_int HeaderLen0.hEADER_LEN' + i) = Seq.get (ShallowModel1.shallow_model lits) i }
    ensures { [#"../NewDB/src/clause_allocator.rs" 68 14 68 63] CrefInvariant0.cref_invariant (UInt32.to_int result) (ShallowModel2.shallow_model ( ^ self)) (UIntSize.to_int (NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars ( * self))) }
    
end
module NewDb_ClauseAllocator_Impl1_AddClause
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Slice
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.IntSize
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel as ShallowModel9 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel11 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit),
    type ShallowModelTy0.shallowModelTy = slice (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model
  clone Core_Num_Impl11_Max as Max1
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel5 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit)
  clone CreusotContracts_Std1_Slice_Impl15_Completed as Completed0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    predicate Resolve0.resolve = Resolve0.resolve,
    function ShallowModel0.shallow_model = ShallowModel11.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model,
    val Max0.mAX' = Max1.mAX'
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  clone NewDb_Lit_Impl2_IndexLogic as IndexLogic1
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel6 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_ClauseAllocator_ClauseAllocator_Type as NewDb_ClauseAllocator_ClauseAllocator_Type
  clone NewDb_ClauseAllocator_Impl0_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator,
    type ShallowModelTy0.shallowModelTy = NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel10 with
    type t = borrowed (NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator),
    type ShallowModelTy0.shallowModelTy = NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = slice (NewDb_Lit_Lit_Type.t_lit),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type s = slice (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq as ToRefSeq0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_Produces as Produces0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Slice_Impl15_ProducesTrans as ProducesTrans0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_ProducesRefl as ProducesRefl0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant2 with
    type self = Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit)
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit),
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl11_IntoIterPost as IntoIterPost0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model
  clone CreusotContracts_Std1_Slice_Impl11_IntoIterPre as IntoIterPre0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel8 with
    type t = Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel7 with
    type t = Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone NewDb_ClauseAllocator_HeaderLen as HeaderLen0
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Slice_Iter_Impl181_Next_Interface as Next0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type Item0.item = NewDb_Lit_Lit_Type.t_lit,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone NewDb_Lit_Impl3_VarInRange as VarInRange0 with
    function IndexLogic0.index_logic = IndexLogic1.index_logic
  clone NewDb_Lit_Impl0_ShallowModel as ShallowModel4
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel3 with
    type t = borrowed (NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator),
    type ShallowModelTy0.shallowModelTy = NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel,
    function ShallowModel0.shallow_model = ShallowModel10.shallow_model
  clone Core_Slice_Iter_Impl0_IntoIter_Interface as IntoIter0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post,
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel8.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone NewDb_Lit_Impl1_Raw_Interface as Raw0
  clone Core_Slice_Impl0_Len_Interface as Len1 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone NewDb_Clause_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  clone NewDb_ClauseAllocator_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Core_U32_Max as Max0
  clone NewDb_ClauseAllocator_Impl2_Invariant as Invariant0 with
    val Max0.mAX' = Max0.mAX'
  let rec cfg add_clause [#"../NewDB/src/clause_allocator.rs" 69 4 69 61] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator)) (lits : slice (NewDb_Lit_Lit_Type.t_lit)) : uint32
    requires {[#"../NewDB/src/clause_allocator.rs" 57 4 57 34] Invariant0.invariant' (ShallowModel0.shallow_model self)}
    requires {[#"../NewDB/src/clause_allocator.rs" 59 15 59 30] Seq.length (ShallowModel1.shallow_model lits) > 0}
    requires {[#"../NewDB/src/clause_allocator.rs" 60 15 60 74] Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self)) + Seq.length (ShallowModel1.shallow_model lits) + UIntSize.to_int HeaderLen0.hEADER_LEN' <= UInt32.to_int Max0.mAX'}
    requires {[#"../NewDB/src/clause_allocator.rs" 61 15 61 63] Invariant1.invariant' (NewDb_Clause_ClauseSeq_Type.C_ClauseSeq (ShallowModel1.shallow_model lits)) (UIntSize.to_int (NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars ( * self)))}
    ensures { [#"../NewDB/src/clause_allocator.rs" 58 4 58 36] Invariant0.invariant' (ShallowModel2.shallow_model ( ^ self)) }
    ensures { [#"../NewDB/src/clause_allocator.rs" 62 14 62 47] NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars ( ^ self) = NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars ( * self) }
    ensures { [#"../NewDB/src/clause_allocator.rs" 63 14 63 85] Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel2.shallow_model ( ^ self))) = Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self)) + Seq.length (ShallowModel1.shallow_model lits) + UIntSize.to_int HeaderLen0.hEADER_LEN' }
    ensures { [#"../NewDB/src/clause_allocator.rs" 64 14 64 43] UInt32.to_int result = Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self)) }
    ensures { [#"../NewDB/src/clause_allocator.rs" 65 14 65 59] UInt32.to_int (NewDb_Lit_Lit_Type.lit_code (Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel2.shallow_model ( ^ self))) (UInt32.to_int result))) = Seq.length (ShallowModel1.shallow_model lits) }
    ensures { [#"../NewDB/src/clause_allocator.rs" 66 4 66 105] forall i : int . 0 <= i /\ i < Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self)) -> Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel2.shallow_model ( ^ self))) i = Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self)) i }
    ensures { [#"../NewDB/src/clause_allocator.rs" 67 4 67 115] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model lits) -> Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel2.shallow_model ( ^ self))) (UInt32.to_int result + UIntSize.to_int HeaderLen0.hEADER_LEN' + i) = Seq.get (ShallowModel1.shallow_model lits) i }
    ensures { [#"../NewDB/src/clause_allocator.rs" 68 14 68 63] CrefInvariant0.cref_invariant (UInt32.to_int result) (ShallowModel2.shallow_model ( ^ self)) (UIntSize.to_int (NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars ( * self))) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self_1 : borrowed (NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator);
  var lits_2 : slice (NewDb_Lit_Lit_Type.t_lit);
  var cref_15 : uint32;
  var _16 : usize;
  var _17 : Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _18 : ();
  var _19 : borrowed (Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global));
  var _20 : NewDb_Lit_Lit_Type.t_lit;
  var _21 : uint32;
  var _22 : usize;
  var _23 : slice (NewDb_Lit_Lit_Type.t_lit);
  var old_self_24 : Ghost.ghost_ty (borrowed (NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator));
  var _26 : ();
  var _27 : ();
  var iter_28 : Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit);
  var _29 : slice (NewDb_Lit_Lit_Type.t_lit);
  var iter_old_30 : Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit));
  var _32 : ();
  var produced_33 : Ghost.ghost_ty (Seq.seq (NewDb_Lit_Lit_Type.t_lit));
  var _36 : ();
  var _45 : ();
  var _46 : Core_Option_Option_Type.t_option (NewDb_Lit_Lit_Type.t_lit);
  var _47 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit));
  var _48 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit));
  var _49 : isize;
  var __creusot_proc_iter_elem_50 : NewDb_Lit_Lit_Type.t_lit;
  var _51 : Ghost.ghost_ty (Seq.seq (NewDb_Lit_Lit_Type.t_lit));
  var _53 : ();
  var lit_54 : NewDb_Lit_Lit_Type.t_lit;
  var _55 : ();
  var _56 : borrowed (Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global));
  var _57 : NewDb_Lit_Lit_Type.t_lit;
  var _58 : ();
  {
    self_1 <- self;
    lits_2 <- lits;
    goto BB0
  }
  BB0 {
    _17 <- NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_buffer ( * self_1);
    _16 <- ([#"../NewDB/src/clause_allocator.rs" 70 19 70 36] Len0.len _17);
    goto BB1
  }
  BB1 {
    cref_15 <- UInt32.of_int (UIntSize.to_int _16);
    _19 <- borrow_mut (NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_buffer ( * self_1));
    self_1 <- { self_1 with current = (let NewDb_ClauseAllocator_ClauseAllocator_Type.C_ClauseAllocator a b =  * self_1 in NewDb_ClauseAllocator_ClauseAllocator_Type.C_ClauseAllocator ( ^ _19) b) };
    _23 <- lits_2;
    _22 <- ([#"../NewDB/src/clause_allocator.rs" 71 34 71 44] Len1.len _23);
    goto BB2
  }
  BB2 {
    _21 <- UInt32.of_int (UIntSize.to_int _22);
    _20 <- ([#"../NewDB/src/clause_allocator.rs" 71 25 71 52] Raw0.raw _21);
    goto BB3
  }
  BB3 {
    _18 <- ([#"../NewDB/src/clause_allocator.rs" 71 8 71 53] Push0.push _19 _20);
    goto BB4
  }
  BB4 {
    _26 <- ();
    old_self_24 <- ([#"../NewDB/src/clause_allocator.rs" 73 52 73 64] Ghost.new self_1);
    goto BB5
  }
  BB5 {
    _29 <- lits_2;
    iter_28 <- ([#"../NewDB/src/clause_allocator.rs" 75 8 75 56] IntoIter0.into_iter _29);
    goto BB6
  }
  BB6 {
    _32 <- ();
    iter_old_30 <- ([#"../NewDB/src/clause_allocator.rs" 75 8 75 56] Ghost.new iter_28);
    goto BB7
  }
  BB7 {
    _36 <- ();
    produced_33 <- ([#"../NewDB/src/clause_allocator.rs" 75 8 75 56] Ghost.new (Seq.empty ));
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    invariant { [#"../NewDB/src/clause_allocator.rs" 75 8 75 56] Invariant2.invariant' iter_28 };
    invariant { [#"../NewDB/src/clause_allocator.rs" 75 8 75 56] Produces0.produces (Ghost.inner iter_old_30) (Ghost.inner produced_33) iter_28 };
    invariant { [#"../NewDB/src/clause_allocator.rs" 75 20 75 54] NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars ( * self_1) = NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars ( * Ghost.inner old_self_24) };
    invariant { [#"../NewDB/src/clause_allocator.rs" 76 20 76 39]  ^ Ghost.inner old_self_24 =  ^ self_1 };
    invariant { [#"../NewDB/src/clause_allocator.rs" 77 20 77 81] Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self_1)) = Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel3.shallow_model old_self_24)) + Seq.length (Ghost.inner produced_33) };
    invariant { [#"../NewDB/src/clause_allocator.rs" 75 8 75 56] forall i : int . 0 <= i /\ i < Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel3.shallow_model old_self_24)) -> Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self_1)) i = Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel3.shallow_model old_self_24)) i };
    invariant { [#"../NewDB/src/clause_allocator.rs" 75 8 75 56] forall i : int . 0 <= i /\ i < Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self_1)) - Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel3.shallow_model old_self_24)) -> Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self_1)) (UInt32.to_int cref_15 + UIntSize.to_int HeaderLen0.hEADER_LEN' + i) = Seq.get (ShallowModel1.shallow_model lits_2) i };
    invariant { [#"../NewDB/src/clause_allocator.rs" 75 8 75 56] forall i : int . 0 <= i /\ i < Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self_1)) - Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel3.shallow_model old_self_24)) -> VarInRange0.var_in_range (ShallowModel4.shallow_model (Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (ShallowModel0.shallow_model self_1)) (UInt32.to_int cref_15 + UIntSize.to_int HeaderLen0.hEADER_LEN' + i))) (UIntSize.to_int (NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars ( * self_1))) };
    _48 <- borrow_mut iter_28;
    iter_28 <-  ^ _48;
    _47 <- borrow_mut ( * _48);
    _48 <- { _48 with current = ( ^ _47) };
    assume { Resolve0.resolve _48 };
    _46 <- ([#"../NewDB/src/clause_allocator.rs" 75 8 75 56] Next0.next _47);
    goto BB10
  }
  BB10 {
    switch (_46)
      | Core_Option_Option_Type.C_None -> goto BB11
      | Core_Option_Option_Type.C_Some _ -> goto BB13
      end
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    _27 <- ();
    _0 <- cref_15;
    return _0
  }
  BB12 {
    assume { Resolve1.resolve self_1 };
    absurd
  }
  BB13 {
    __creusot_proc_iter_elem_50 <- Core_Option_Option_Type.some_0 _46;
    _53 <- ();
    _51 <- ([#"../NewDB/src/clause_allocator.rs" 75 8 75 56] Ghost.new (Seq.(++) (Ghost.inner produced_33) (Seq.singleton __creusot_proc_iter_elem_50)));
    goto BB14
  }
  BB14 {
    produced_33 <- _51;
    _51 <- any Ghost.ghost_ty (Seq.seq (NewDb_Lit_Lit_Type.t_lit));
    lit_54 <- __creusot_proc_iter_elem_50;
    _56 <- borrow_mut (NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_buffer ( * self_1));
    self_1 <- { self_1 with current = (let NewDb_ClauseAllocator_ClauseAllocator_Type.C_ClauseAllocator a b =  * self_1 in NewDb_ClauseAllocator_ClauseAllocator_Type.C_ClauseAllocator ( ^ _56) b) };
    _57 <- lit_54;
    _55 <- ([#"../NewDB/src/clause_allocator.rs" 87 12 87 34] Push0.push _56 _57);
    goto BB15
  }
  BB15 {
    _45 <- ();
    goto BB9
  }
  
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module Alloc_Vec_Impl13_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UIntSize.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UIntSize.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl6_InBounds_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate in_bounds (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl6_InBounds_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate in_bounds (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl6_InBounds
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate in_bounds (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t) =
    UIntSize.to_int (Core_Ops_Range_Range_Type.range_start self) <= UIntSize.to_int (Core_Ops_Range_Range_Type.range_end self) /\ UIntSize.to_int (Core_Ops_Range_Range_Type.range_end self) <= Seq.length seq
  val in_bounds (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl6_HasValue_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use prelude.Slice
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate has_value (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t) (out : slice t)
end
module CreusotContracts_Std1_Slice_Impl6_HasValue_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use prelude.Slice
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate has_value (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t) (out : slice t)
end
module CreusotContracts_Std1_Slice_Impl6_HasValue
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use prelude.Slice
  use seq_ext.SeqExt
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate has_value (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t) (out : slice t) =
    SeqExt.subsequence seq (UIntSize.to_int (Core_Ops_Range_Range_Type.range_start self)) (UIntSize.to_int (Core_Ops_Range_Range_Type.range_end self)) = ShallowModel0.shallow_model out
  val has_value (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t) (out : slice t) : bool
    ensures { result = has_value self seq out }
    
end
module NewDb_ClauseAllocator_Impl1_GetClause_Interface
  use prelude.UInt32
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use seq.Seq
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseSeq_Stub as GetClauseSeq0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = slice (NewDb_Lit_Lit_Type.t_lit),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit)
  clone NewDb_ClauseAllocator_CrefInvariant_Stub as CrefInvariant0
  use NewDb_ClauseAllocator_ClauseAllocator_Type as NewDb_ClauseAllocator_ClauseAllocator_Type
  clone NewDb_ClauseAllocator_Impl2_Invariant_Stub as Invariant0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator,
    type ShallowModelTy0.shallowModelTy = NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel
  val get_clause [#"../NewDB/src/clause_allocator.rs" 96 4 96 56] (self : NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator) (cref : uint32) : slice (NewDb_Lit_Lit_Type.t_lit)
    requires {[#"../NewDB/src/clause_allocator.rs" 93 4 93 34] Invariant0.invariant' (ShallowModel0.shallow_model self)}
    requires {[#"../NewDB/src/clause_allocator.rs" 94 15 94 59] CrefInvariant0.cref_invariant (UInt32.to_int cref) (ShallowModel0.shallow_model self) (UIntSize.to_int (NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars self))}
    ensures { [#"../NewDB/src/clause_allocator.rs" 95 14 95 57] ShallowModel1.shallow_model result = NewDb_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq (ShallowModel0.shallow_model self) (UInt32.to_int cref)) }
    
end
module NewDb_ClauseAllocator_Impl1_GetClause
  use prelude.Borrow
  use prelude.Slice
  use prelude.Int
  use prelude.UInt32
  use prelude.UIntSize
  use seq.Seq
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  clone NewDb_Lit_Impl2_IndexLogic as IndexLogic0
  clone NewDb_Lit_Impl3_VarInRange as VarInRange0 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_ShallowModel as ShallowModel6
  clone Core_Num_Impl11_Max as Max1
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel5 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel3 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    val Max0.mAX' = Max1.mAX',
    axiom .
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Slice_Impl6_HasValue as HasValue1 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone CreusotContracts_Std1_Slice_Impl6_InBounds as InBounds1 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  clone NewDb_Clause_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  clone NewDb_ClauseAllocator_HeaderLen as HeaderLen0
  clone Core_U32_Max as Max0
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_ClauseAllocator_ClauseAllocator_Type as NewDb_ClauseAllocator_ClauseAllocator_Type
  clone NewDb_ClauseAllocator_Impl0_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone Alloc_Vec_Impl13_Index_Interface as Index1 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate HasValue0.has_value = HasValue1.has_value,
    type Output0.output = slice (NewDb_Lit_Lit_Type.t_lit)
  clone Alloc_Vec_Impl13_Index_Interface as Index0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = NewDb_Lit_Lit_Type.t_lit
  clone NewDb_ClauseAllocator_Impl3_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN'
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = slice (NewDb_Lit_Lit_Type.t_lit),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone NewDb_ClauseAllocator_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone NewDb_ClauseAllocator_Impl2_Invariant as Invariant0 with
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator,
    type ShallowModelTy0.shallowModelTy = NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  let rec cfg get_clause [#"../NewDB/src/clause_allocator.rs" 96 4 96 56] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator) (cref : uint32) : slice (NewDb_Lit_Lit_Type.t_lit)
    requires {[#"../NewDB/src/clause_allocator.rs" 93 4 93 34] Invariant0.invariant' (ShallowModel0.shallow_model self)}
    requires {[#"../NewDB/src/clause_allocator.rs" 94 15 94 59] CrefInvariant0.cref_invariant (UInt32.to_int cref) (ShallowModel0.shallow_model self) (UIntSize.to_int (NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars self))}
    ensures { [#"../NewDB/src/clause_allocator.rs" 95 14 95 57] ShallowModel1.shallow_model result = NewDb_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq (ShallowModel0.shallow_model self) (UInt32.to_int cref)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : slice (NewDb_Lit_Lit_Type.t_lit);
  var self_1 : NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator;
  var cref_2 : uint32;
  var idx_6 : usize;
  var _7 : uint32;
  var len_8 : usize;
  var _9 : uint32;
  var _10 : NewDb_Lit_Lit_Type.t_lit;
  var _11 : Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _12 : usize;
  var _13 : slice (NewDb_Lit_Lit_Type.t_lit);
  var _14 : slice (NewDb_Lit_Lit_Type.t_lit);
  var _15 : Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _16 : Core_Ops_Range_Range_Type.t_range usize;
  var _17 : usize;
  var _18 : usize;
  var _19 : usize;
  var _20 : usize;
  var _21 : usize;
  var _22 : usize;
  {
    self_1 <- self;
    cref_2 <- cref;
    goto BB0
  }
  BB0 {
    _7 <- cref_2;
    idx_6 <- UIntSize.of_int (UInt32.to_int _7);
    _11 <- NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_buffer self_1;
    _12 <- idx_6;
    _10 <- ([#"../NewDB/src/clause_allocator.rs" 98 18 98 34] Index0.index _11 _12);
    goto BB1
  }
  BB1 {
    _9 <- NewDb_Lit_Lit_Type.lit_code _10;
    len_8 <- UIntSize.of_int (UInt32.to_int _9);
    _15 <- NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_buffer self_1;
    _18 <- idx_6;
    _17 <- ([#"../NewDB/src/clause_allocator.rs" 99 21 99 37] _18 + ([#"../NewDB/src/clause_allocator.rs" 99 27 99 37] (1 : usize)));
    _21 <- idx_6;
    _20 <- ([#"../NewDB/src/clause_allocator.rs" 99 39 99 55] _21 + ([#"../NewDB/src/clause_allocator.rs" 99 45 99 55] (1 : usize)));
    _22 <- len_8;
    _19 <- ([#"../NewDB/src/clause_allocator.rs" 99 39 99 61] _20 + _22);
    _16 <- Core_Ops_Range_Range_Type.C_Range _17 _19;
    _14 <- ([#"../NewDB/src/clause_allocator.rs" 99 9 99 62] Index1.index _15 _16);
    goto BB2
  }
  BB2 {
    _13 <- _14;
    _0 <- _13;
    return _0
  }
  
end
module NewDb_ClauseAllocator_Impl2_Extended_Stub
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  predicate extended [#"../NewDB/src/clause_allocator.rs" 118 4 118 67] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (new : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module NewDb_ClauseAllocator_Impl2_Extended_Interface
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  predicate extended [#"../NewDB/src/clause_allocator.rs" 118 4 118 67] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (new : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module NewDb_ClauseAllocator_Impl2_Extended
  use seq.Seq
  use prelude.Int
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  predicate extended [#"../NewDB/src/clause_allocator.rs" 118 4 118 67] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (new : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
   =
    [#"../NewDB/src/clause_allocator.rs" 119 8 124 9] NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars self = NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars new /\ Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) < Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer new) /\ (forall i : int . 0 <= i /\ i < Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) -> Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) i = Seq.get (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer new) i)
  val extended [#"../NewDB/src/clause_allocator.rs" 118 4 118 67] (self : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (new : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : bool
    ensures { result = extended self new }
    
end
module NewDb_CrefManager_CRefManager_Type
  use prelude.Int
  use prelude.UInt32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_crefmanager  =
    | C_CRefManager (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) usize
    
  let function crefmanager_crefs (self : t_crefmanager) : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_CRefManager a _ -> a
      end
  let function crefmanager_num_vars (self : t_crefmanager) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_CRefManager _ a -> a
      end
end
module NewDb_ClauseManager_ClauseManager_Type
  use NewDb_CrefManager_CRefManager_Type as NewDb_CrefManager_CRefManager_Type
  use NewDb_ClauseAllocator_ClauseAllocator_Type as NewDb_ClauseAllocator_ClauseAllocator_Type
  type t_clausemanager  =
    | C_ClauseManager (NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator) (NewDb_CrefManager_CRefManager_Type.t_crefmanager) (NewDb_CrefManager_CRefManager_Type.t_crefmanager)
    
  let function clausemanager_clause_allocator (self : t_clausemanager) : NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseManager a _ _ -> a
      end
  let function clausemanager_original_clauses (self : t_clausemanager) : NewDb_CrefManager_CRefManager_Type.t_crefmanager
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseManager _ a _ -> a
      end
  let function clausemanager_learnt_core (self : t_clausemanager) : NewDb_CrefManager_CRefManager_Type.t_crefmanager
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseManager _ _ a -> a
      end
end
module NewDb_CrefManager_CRefManagerModel_Type
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  type t_crefmanagermodel  =
    | C_CRefManagerModel (Seq.seq uint32) int
    
  let function crefmanagermodel_num_vars (self : t_crefmanagermodel) : int = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_CRefManagerModel _ a -> a
      end
  let function crefmanagermodel_crefs (self : t_crefmanagermodel) : Seq.seq uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_CRefManagerModel a _ -> a
      end
end
module NewDb_ClauseManager_ClauseManagerModel_Type
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  type t_clausemanagermodel  =
    | C_ClauseManagerModel (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel)
    
  let function clausemanagermodel_clause_allocator (self : t_clausemanagermodel) : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseManagerModel a _ _ -> a
      end
  let function clausemanagermodel_original_clauses (self : t_clausemanagermodel) : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseManagerModel _ a _ -> a
      end
  let function clausemanagermodel_learnt_core (self : t_clausemanagermodel) : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseManagerModel _ _ a -> a
      end
end
module NewDb_CrefManager_Impl0_ShallowModel_Stub
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  use NewDb_CrefManager_CRefManager_Type as NewDb_CrefManager_CRefManager_Type
  function shallow_model [#"../NewDB/src/cref_manager.rs" 26 4 26 50] (self : NewDb_CrefManager_CRefManager_Type.t_crefmanager) : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
end
module NewDb_CrefManager_Impl0_ShallowModel_Interface
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  use NewDb_CrefManager_CRefManager_Type as NewDb_CrefManager_CRefManager_Type
  function shallow_model [#"../NewDB/src/cref_manager.rs" 26 4 26 50] (self : NewDb_CrefManager_CRefManager_Type.t_crefmanager) : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
end
module NewDb_CrefManager_Impl0_ShallowModel
  use prelude.UIntSize
  use prelude.Int
  use prelude.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  use NewDb_CrefManager_CRefManager_Type as NewDb_CrefManager_CRefManager_Type
  function shallow_model [#"../NewDB/src/cref_manager.rs" 26 4 26 50] (self : NewDb_CrefManager_CRefManager_Type.t_crefmanager) : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
   =
    [#"../NewDB/src/cref_manager.rs" 27 8 30 9] NewDb_CrefManager_CRefManagerModel_Type.C_CRefManagerModel (ShallowModel0.shallow_model (NewDb_CrefManager_CRefManager_Type.crefmanager_crefs self)) (UIntSize.to_int (NewDb_CrefManager_CRefManager_Type.crefmanager_num_vars self))
  val shallow_model [#"../NewDB/src/cref_manager.rs" 26 4 26 50] (self : NewDb_CrefManager_CRefManager_Type.t_crefmanager) : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    ensures { result = shallow_model self }
    
end
module NewDb_ClauseManager_Impl0_ShallowModel_Stub
  use NewDb_ClauseManager_ClauseManagerModel_Type as NewDb_ClauseManager_ClauseManagerModel_Type
  use NewDb_ClauseManager_ClauseManager_Type as NewDb_ClauseManager_ClauseManager_Type
  function shallow_model [#"../NewDB/src/clause_manager.rs" 20 4 20 50] (self : NewDb_ClauseManager_ClauseManager_Type.t_clausemanager) : NewDb_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel
    
end
module NewDb_ClauseManager_Impl0_ShallowModel_Interface
  use NewDb_ClauseManager_ClauseManagerModel_Type as NewDb_ClauseManager_ClauseManagerModel_Type
  use NewDb_ClauseManager_ClauseManager_Type as NewDb_ClauseManager_ClauseManager_Type
  function shallow_model [#"../NewDB/src/clause_manager.rs" 20 4 20 50] (self : NewDb_ClauseManager_ClauseManager_Type.t_clausemanager) : NewDb_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel
    
end
module NewDb_ClauseManager_Impl0_ShallowModel
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  use NewDb_CrefManager_CRefManager_Type as NewDb_CrefManager_CRefManager_Type
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_ClauseAllocator_ClauseAllocator_Type as NewDb_ClauseAllocator_ClauseAllocator_Type
  clone NewDb_CrefManager_Impl0_ShallowModel_Stub as ShallowModel1
  clone NewDb_ClauseAllocator_Impl0_ShallowModel_Stub as ShallowModel0
  use NewDb_ClauseManager_ClauseManagerModel_Type as NewDb_ClauseManager_ClauseManagerModel_Type
  use NewDb_ClauseManager_ClauseManager_Type as NewDb_ClauseManager_ClauseManager_Type
  function shallow_model [#"../NewDB/src/clause_manager.rs" 20 4 20 50] (self : NewDb_ClauseManager_ClauseManager_Type.t_clausemanager) : NewDb_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel
    
   =
    [#"../NewDB/src/clause_manager.rs" 21 8 25 9] NewDb_ClauseManager_ClauseManagerModel_Type.C_ClauseManagerModel (ShallowModel0.shallow_model (NewDb_ClauseManager_ClauseManager_Type.clausemanager_clause_allocator self)) (ShallowModel1.shallow_model (NewDb_ClauseManager_ClauseManager_Type.clausemanager_original_clauses self)) (ShallowModel1.shallow_model (NewDb_ClauseManager_ClauseManager_Type.clausemanager_learnt_core self))
  val shallow_model [#"../NewDB/src/clause_manager.rs" 20 4 20 50] (self : NewDb_ClauseManager_ClauseManager_Type.t_clausemanager) : NewDb_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel
    ensures { result = shallow_model self }
    
end
module NewDb_CrefManager_Impl2_Invariant_Stub
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  predicate invariant' [#"../NewDB/src/cref_manager.rs" 50 4 50 81] (self : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module NewDb_CrefManager_Impl2_Invariant_Interface
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  predicate invariant' [#"../NewDB/src/cref_manager.rs" 50 4 50 81] (self : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module NewDb_CrefManager_Impl2_Invariant
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  clone NewDb_ClauseAllocator_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_ClauseAllocator_Impl2_Invariant_Stub as Invariant0
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  predicate invariant' [#"../NewDB/src/cref_manager.rs" 50 4 50 81] (self : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
   =
    [#"../NewDB/src/cref_manager.rs" 51 8 56 9] Invariant0.invariant' clause_allocator /\ NewDb_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self = NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator /\ (forall i : int . 0 <= i /\ i < Seq.length (NewDb_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) -> CrefInvariant0.cref_invariant (UInt32.to_int (Seq.get (NewDb_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) i)) clause_allocator (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator))
  val invariant' [#"../NewDB/src/cref_manager.rs" 50 4 50 81] (self : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : bool
    ensures { result = invariant' self clause_allocator }
    
end
module NewDb_Formula_Formula_Type
  use set.Fset
  use prelude.Int
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  type t_formula  =
    | C_Formula (Fset.fset (NewDb_Clause_ClauseFSet_Type.t_clausefset)) int
    
  let function formula_num_vars (self : t_formula) : int = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Formula _ a -> a
      end
  let function formula_formula (self : t_formula) : Fset.fset (NewDb_Clause_ClauseFSet_Type.t_clausefset)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Formula a _ -> a
      end
end
module NewDb_Formula_Impl0_FromInternal_Stub
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use set.Fset
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseFset_Stub as GetClauseFset0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  clone NewDb_ClauseAllocator_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_ClauseAllocator_Impl2_Invariant_Stub as Invariant0
  function from_internal [#"../NewDB/src/formula.rs" 61 4 61 124] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (idx : int) (_num_vars : int) : Fset.fset (NewDb_Clause_ClauseFSet_Type.t_clausefset)
    
end
module NewDb_Formula_Impl0_FromInternal_Interface
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use set.Fset
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseFset_Stub as GetClauseFset0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  clone NewDb_ClauseAllocator_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_ClauseAllocator_Impl2_Invariant_Stub as Invariant0
  function from_internal [#"../NewDB/src/formula.rs" 61 4 61 124] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (idx : int) (_num_vars : int) : Fset.fset (NewDb_Clause_ClauseFSet_Type.t_clausefset)
    
  axiom from_internal_spec : forall crefs : Seq.seq uint32, clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, idx : int, _num_vars : int . ([#"../NewDB/src/formula.rs" 55 15 55 23] idx >= 0) -> ([#"../NewDB/src/formula.rs" 56 15 56 43] Invariant0.invariant' clause_allocator) -> ([#"../NewDB/src/formula.rs" 57 4 58 72] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (UInt32.to_int (Seq.get crefs i)) clause_allocator _num_vars) -> ([#"../NewDB/src/formula.rs" 60 4 60 146] forall c : NewDb_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (from_internal crefs clause_allocator idx _num_vars) c -> (exists i : int . idx <= i /\ i < Seq.length crefs /\ GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs i)) = c)) && ([#"../NewDB/src/formula.rs" 59 4 59 146] forall i : int . idx <= i /\ i < Seq.length crefs -> (exists c : NewDb_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (from_internal crefs clause_allocator idx _num_vars) c /\ GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs i)) = c))
end
module NewDb_Formula_Impl0_FromInternal
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use set.Fset
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseFset_Stub as GetClauseFset0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  clone NewDb_ClauseAllocator_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_ClauseAllocator_Impl2_Invariant_Stub as Invariant0
  function from_internal [#"../NewDB/src/formula.rs" 61 4 61 124] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (idx : int) (_num_vars : int) : Fset.fset (NewDb_Clause_ClauseFSet_Type.t_clausefset)
    
  val from_internal [#"../NewDB/src/formula.rs" 61 4 61 124] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (idx : int) (_num_vars : int) : Fset.fset (NewDb_Clause_ClauseFSet_Type.t_clausefset)
    requires {[#"../NewDB/src/formula.rs" 55 15 55 23] idx >= 0}
    requires {[#"../NewDB/src/formula.rs" 56 15 56 43] Invariant0.invariant' clause_allocator}
    requires {[#"../NewDB/src/formula.rs" 57 4 58 72] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (UInt32.to_int (Seq.get crefs i)) clause_allocator _num_vars}
    ensures { result = from_internal crefs clause_allocator idx _num_vars }
    
  axiom def : forall crefs : Seq.seq uint32, clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, idx : int, _num_vars : int . from_internal crefs clause_allocator idx _num_vars = ([#"../NewDB/src/formula.rs" 62 8 71 9] if idx < Seq.length crefs then
    let set = from_internal crefs clause_allocator (idx + 1) _num_vars in let clause = GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs idx)) in Insert0.insert set clause
  else
    Fset.empty 
  )
  axiom from_internal_spec : forall crefs : Seq.seq uint32, clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, idx : int, _num_vars : int . ([#"../NewDB/src/formula.rs" 55 15 55 23] idx >= 0) -> ([#"../NewDB/src/formula.rs" 56 15 56 43] Invariant0.invariant' clause_allocator) -> ([#"../NewDB/src/formula.rs" 57 4 58 72] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (UInt32.to_int (Seq.get crefs i)) clause_allocator _num_vars) -> ([#"../NewDB/src/formula.rs" 60 4 60 146] forall c : NewDb_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (from_internal crefs clause_allocator idx _num_vars) c -> (exists i : int . idx <= i /\ i < Seq.length crefs /\ GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs i)) = c)) && ([#"../NewDB/src/formula.rs" 59 4 59 146] forall i : int . idx <= i /\ i < Seq.length crefs -> (exists c : NewDb_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (from_internal crefs clause_allocator idx _num_vars) c /\ GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs i)) = c))
end
module NewDb_Formula_Impl0_FromInternal_Impl
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use set.Fset
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  clone NewDb_Lit_Impl2_IndexLogic as IndexLogic0
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert1 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone NewDb_Lit_Impl3_VarInRange as VarInRange0 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone NewDb_Lit_Impl0_ShallowModel as ShallowModel0
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseFsetInternal as GetClauseFsetInternal0 with
    function Insert0.insert = Insert1.insert,
    axiom .
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  clone NewDb_Clause_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  clone NewDb_ClauseAllocator_HeaderLen as HeaderLen0
  clone NewDb_ClauseAllocator_Impl3_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN'
  clone Core_U32_Max as Max0
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  clone NewDb_ClauseAllocator_Impl3_GetClauseFset as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseFsetInternal0.get_clause_fset_internal = GetClauseFsetInternal0.get_clause_fset_internal
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  clone NewDb_ClauseAllocator_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone NewDb_ClauseAllocator_Impl2_Invariant as Invariant0 with
    val Max0.mAX' = Max0.mAX'
  let rec ghost function from_internal [#"../NewDB/src/formula.rs" 61 4 61 124] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (idx : int) (_num_vars : int) : Fset.fset (NewDb_Clause_ClauseFSet_Type.t_clausefset)
    requires {[#"../NewDB/src/formula.rs" 55 15 55 23] idx >= 0}
    requires {[#"../NewDB/src/formula.rs" 56 15 56 43] Invariant0.invariant' clause_allocator}
    requires {[#"../NewDB/src/formula.rs" 57 4 58 72] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (UInt32.to_int (Seq.get crefs i)) clause_allocator _num_vars}
    ensures { [#"../NewDB/src/formula.rs" 59 4 59 146] forall i : int . idx <= i /\ i < Seq.length crefs -> (exists c : NewDb_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains result c /\ GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs i)) = c) }
    ensures { [#"../NewDB/src/formula.rs" 60 4 60 146] forall c : NewDb_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains result c -> (exists i : int . idx <= i /\ i < Seq.length crefs /\ GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs i)) = c) }
    variant {[#"../NewDB/src/formula.rs" 54 14 54 31] Seq.length crefs - idx}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../NewDB/src/formula.rs" 62 8 71 9] if pure {idx < Seq.length crefs} then
      let set = from_internal crefs clause_allocator (idx + 1) _num_vars in let clause = GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs idx)) in Insert0.insert set clause
    else
      Fset.empty 
    
end
module NewDb_Formula_Impl0_From_Stub
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseFset_Stub as GetClauseFset0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  clone NewDb_ClauseAllocator_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_ClauseAllocator_Impl2_Invariant_Stub as Invariant0
  function from [#"../NewDB/src/formula.rs" 43 4 43 106] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int) : NewDb_Formula_Formula_Type.t_formula
    
end
module NewDb_Formula_Impl0_From_Interface
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseFset_Stub as GetClauseFset0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  clone NewDb_ClauseAllocator_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_ClauseAllocator_Impl2_Invariant_Stub as Invariant0
  function from [#"../NewDB/src/formula.rs" 43 4 43 106] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int) : NewDb_Formula_Formula_Type.t_formula
    
  axiom from_spec : forall crefs : Seq.seq uint32, clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, num_vars : int . ([#"../NewDB/src/formula.rs" 37 15 37 43] Invariant0.invariant' clause_allocator) -> ([#"../NewDB/src/formula.rs" 38 4 39 71] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (UInt32.to_int (Seq.get crefs i)) clause_allocator num_vars) -> ([#"../NewDB/src/formula.rs" 42 4 42 152] forall c : NewDb_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (NewDb_Formula_Formula_Type.formula_formula (from crefs clause_allocator num_vars)) c -> (exists i : int . 0 <= i /\ i < Seq.length crefs /\ GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs i)) = c)) && ([#"../NewDB/src/formula.rs" 41 4 41 152] forall i : int . 0 <= i /\ i < Seq.length crefs -> (exists c : NewDb_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (NewDb_Formula_Formula_Type.formula_formula (from crefs clause_allocator num_vars)) c /\ GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs i)) = c)) && ([#"../NewDB/src/formula.rs" 40 14 40 41] NewDb_Formula_Formula_Type.formula_num_vars (from crefs clause_allocator num_vars) = num_vars)
end
module NewDb_Formula_Impl0_From
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseFset_Stub as GetClauseFset0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  clone NewDb_ClauseAllocator_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_ClauseAllocator_Impl2_Invariant_Stub as Invariant0
  clone NewDb_Formula_Impl0_FromInternal_Stub as FromInternal0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    axiom .
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  function from [#"../NewDB/src/formula.rs" 43 4 43 106] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int) : NewDb_Formula_Formula_Type.t_formula
    
   =
    [#"../NewDB/src/formula.rs" 44 8 44 99] NewDb_Formula_Formula_Type.C_Formula (FromInternal0.from_internal crefs clause_allocator 0 num_vars) num_vars
  val from [#"../NewDB/src/formula.rs" 43 4 43 106] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int) : NewDb_Formula_Formula_Type.t_formula
    requires {[#"../NewDB/src/formula.rs" 37 15 37 43] Invariant0.invariant' clause_allocator}
    requires {[#"../NewDB/src/formula.rs" 38 4 39 71] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (UInt32.to_int (Seq.get crefs i)) clause_allocator num_vars}
    ensures { result = from crefs clause_allocator num_vars }
    
  axiom from_spec : forall crefs : Seq.seq uint32, clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, num_vars : int . ([#"../NewDB/src/formula.rs" 37 15 37 43] Invariant0.invariant' clause_allocator) -> ([#"../NewDB/src/formula.rs" 38 4 39 71] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (UInt32.to_int (Seq.get crefs i)) clause_allocator num_vars) -> ([#"../NewDB/src/formula.rs" 42 4 42 152] forall c : NewDb_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (NewDb_Formula_Formula_Type.formula_formula (from crefs clause_allocator num_vars)) c -> (exists i : int . 0 <= i /\ i < Seq.length crefs /\ GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs i)) = c)) && ([#"../NewDB/src/formula.rs" 41 4 41 152] forall i : int . 0 <= i /\ i < Seq.length crefs -> (exists c : NewDb_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (NewDb_Formula_Formula_Type.formula_formula (from crefs clause_allocator num_vars)) c /\ GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs i)) = c)) && ([#"../NewDB/src/formula.rs" 40 14 40 41] NewDb_Formula_Formula_Type.formula_num_vars (from crefs clause_allocator num_vars) = num_vars)
end
module NewDb_Formula_Impl0_From_Impl
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  clone NewDb_Lit_Impl2_IndexLogic as IndexLogic0
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert1 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone NewDb_Lit_Impl3_VarInRange as VarInRange0 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone NewDb_Lit_Impl0_ShallowModel as ShallowModel0
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseFsetInternal as GetClauseFsetInternal0 with
    function Insert0.insert = Insert1.insert,
    axiom .
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  clone NewDb_Clause_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  clone NewDb_ClauseAllocator_HeaderLen as HeaderLen0
  clone NewDb_ClauseAllocator_Impl3_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN'
  clone Core_U32_Max as Max0
  clone NewDb_ClauseAllocator_Impl3_GetClauseFset as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseFsetInternal0.get_clause_fset_internal = GetClauseFsetInternal0.get_clause_fset_internal
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  clone NewDb_ClauseAllocator_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone NewDb_ClauseAllocator_Impl2_Invariant as Invariant0 with
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Formula_Impl0_FromInternal as FromInternal0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function Insert0.insert = Insert0.insert,
    axiom .
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  let rec ghost function from [#"../NewDB/src/formula.rs" 43 4 43 106] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int) : NewDb_Formula_Formula_Type.t_formula
    requires {[#"../NewDB/src/formula.rs" 37 15 37 43] Invariant0.invariant' clause_allocator}
    requires {[#"../NewDB/src/formula.rs" 38 4 39 71] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (UInt32.to_int (Seq.get crefs i)) clause_allocator num_vars}
    ensures { [#"../NewDB/src/formula.rs" 40 14 40 41] NewDb_Formula_Formula_Type.formula_num_vars result = num_vars }
    ensures { [#"../NewDB/src/formula.rs" 41 4 41 152] forall i : int . 0 <= i /\ i < Seq.length crefs -> (exists c : NewDb_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (NewDb_Formula_Formula_Type.formula_formula result) c /\ GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs i)) = c) }
    ensures { [#"../NewDB/src/formula.rs" 42 4 42 152] forall c : NewDb_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (NewDb_Formula_Formula_Type.formula_formula result) c -> (exists i : int . 0 <= i /\ i < Seq.length crefs /\ GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs i)) = c) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../NewDB/src/formula.rs" 44 8 44 99] NewDb_Formula_Formula_Type.C_Formula (FromInternal0.from_internal crefs clause_allocator 0 num_vars) num_vars
end
module NewDb_Formula_Impl0_Sat_Stub
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  predicate sat [#"../NewDB/src/formula.rs" 91 4 91 56] (self : NewDb_Formula_Formula_Type.t_formula) (a : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module NewDb_Formula_Impl0_Sat_Interface
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  predicate sat [#"../NewDB/src/formula.rs" 91 4 91 56] (self : NewDb_Formula_Formula_Type.t_formula) (a : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module NewDb_Formula_Impl0_Sat
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  clone NewDb_Clause_Impl0_Sat_Stub as Sat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  predicate sat [#"../NewDB/src/formula.rs" 91 4 91 56] (self : NewDb_Formula_Formula_Type.t_formula) (a : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
   =
    [#"../NewDB/src/formula.rs" 92 8 94 9] forall c : NewDb_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (NewDb_Formula_Formula_Type.formula_formula self) c -> Sat0.sat c a
  val sat [#"../NewDB/src/formula.rs" 91 4 91 56] (self : NewDb_Formula_Formula_Type.t_formula) (a : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel) : bool
    ensures { result = sat self a }
    
end
module NewDb_Formula_Impl0_EventuallySatComplete_Stub
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  predicate eventually_sat_complete [#"../NewDB/src/formula.rs" 82 4 82 55] (self : NewDb_Formula_Formula_Type.t_formula)
    
end
module NewDb_Formula_Impl0_EventuallySatComplete_Interface
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  predicate eventually_sat_complete [#"../NewDB/src/formula.rs" 82 4 82 55] (self : NewDb_Formula_Formula_Type.t_formula)
    
end
module NewDb_Formula_Impl0_EventuallySatComplete
  use seq.Seq
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  clone NewDb_Formula_Impl0_Sat_Stub as Sat0
  clone NewDb_Assignments_Impl1_Complete_Stub as Complete0
  predicate eventually_sat_complete [#"../NewDB/src/formula.rs" 82 4 82 55] (self : NewDb_Formula_Formula_Type.t_formula)
    
   =
    [#"../NewDB/src/formula.rs" 83 8 87 9] exists a : NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel . Seq.length (NewDb_Assignments_AssignmentsModel_Type.assignmentsmodel_0 a) = NewDb_Formula_Formula_Type.formula_num_vars self /\ Complete0.complete a /\ Sat0.sat self a
  val eventually_sat_complete [#"../NewDB/src/formula.rs" 82 4 82 55] (self : NewDb_Formula_Formula_Type.t_formula) : bool
    ensures { result = eventually_sat_complete self }
    
end
module NewDb_Formula_Impl0_Insert_Stub
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  function insert [#"../NewDB/src/formula.rs" 48 4 48 50] (self : NewDb_Formula_Formula_Type.t_formula) (clause : NewDb_Clause_ClauseFSet_Type.t_clausefset) : NewDb_Formula_Formula_Type.t_formula
    
end
module NewDb_Formula_Impl0_Insert_Interface
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  function insert [#"../NewDB/src/formula.rs" 48 4 48 50] (self : NewDb_Formula_Formula_Type.t_formula) (clause : NewDb_Clause_ClauseFSet_Type.t_clausefset) : NewDb_Formula_Formula_Type.t_formula
    
end
module NewDb_Formula_Impl0_Insert
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  function insert [#"../NewDB/src/formula.rs" 48 4 48 50] (self : NewDb_Formula_Formula_Type.t_formula) (clause : NewDb_Clause_ClauseFSet_Type.t_clausefset) : NewDb_Formula_Formula_Type.t_formula
    
   =
    [#"../NewDB/src/formula.rs" 49 8 49 81] NewDb_Formula_Formula_Type.C_Formula (Insert0.insert (NewDb_Formula_Formula_Type.formula_formula self) clause) (NewDb_Formula_Formula_Type.formula_num_vars self)
  val insert [#"../NewDB/src/formula.rs" 48 4 48 50] (self : NewDb_Formula_Formula_Type.t_formula) (clause : NewDb_Clause_ClauseFSet_Type.t_clausefset) : NewDb_Formula_Formula_Type.t_formula
    ensures { result = insert self clause }
    
end
module NewDb_Formula_Impl0_Implies_Stub
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  predicate implies [#"../NewDB/src/formula.rs" 75 4 75 59] (self : NewDb_Formula_Formula_Type.t_formula) (clause : NewDb_Clause_ClauseFSet_Type.t_clausefset)
    
end
module NewDb_Formula_Impl0_Implies_Interface
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  predicate implies [#"../NewDB/src/formula.rs" 75 4 75 59] (self : NewDb_Formula_Formula_Type.t_formula) (clause : NewDb_Clause_ClauseFSet_Type.t_clausefset)
    
end
module NewDb_Formula_Impl0_Implies
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  clone NewDb_Formula_Impl0_Insert_Stub as Insert0
  clone NewDb_Formula_Impl0_EventuallySatComplete_Stub as EventuallySatComplete0
  predicate implies [#"../NewDB/src/formula.rs" 75 4 75 59] (self : NewDb_Formula_Formula_Type.t_formula) (clause : NewDb_Clause_ClauseFSet_Type.t_clausefset)
    
   =
    [#"../NewDB/src/formula.rs" 76 8 78 9] EventuallySatComplete0.eventually_sat_complete self -> EventuallySatComplete0.eventually_sat_complete (Insert0.insert self clause)
  val implies [#"../NewDB/src/formula.rs" 75 4 75 59] (self : NewDb_Formula_Formula_Type.t_formula) (clause : NewDb_Clause_ClauseFSet_Type.t_clausefset) : bool
    ensures { result = implies self clause }
    
end
module NewDb_CrefManager_Impl2_AreImpliedBy_Stub
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  predicate are_implied_by [#"../NewDB/src/cref_manager.rs" 60 4 60 122] (self : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (original_clauses : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module NewDb_CrefManager_Impl2_AreImpliedBy_Interface
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  predicate are_implied_by [#"../NewDB/src/cref_manager.rs" 60 4 60 122] (self : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (original_clauses : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module NewDb_CrefManager_Impl2_AreImpliedBy
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  clone NewDb_ClauseAllocator_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_ClauseAllocator_Impl2_Invariant_Stub as Invariant0
  clone NewDb_Formula_Impl0_Implies_Stub as Implies0
  clone NewDb_ClauseAllocator_Impl3_GetClauseFset_Stub as GetClauseFset0
  clone NewDb_Formula_Impl0_From_Stub as From0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    axiom .
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  predicate are_implied_by [#"../NewDB/src/cref_manager.rs" 60 4 60 122] (self : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (original_clauses : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
   =
    [#"../NewDB/src/cref_manager.rs" 61 8 65 9] let formula = From0.from (NewDb_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) clause_allocator (NewDb_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self) in forall i : int . 0 <= i /\ i < Seq.length (NewDb_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) -> Implies0.implies formula (GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get (NewDb_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) i)))
  val are_implied_by [#"../NewDB/src/cref_manager.rs" 60 4 60 122] (self : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (original_clauses : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : bool
    ensures { result = are_implied_by self original_clauses clause_allocator }
    
end
module NewDb_ClauseManager_Impl2_Invariant_Stub
  use NewDb_ClauseManager_ClauseManagerModel_Type as NewDb_ClauseManager_ClauseManagerModel_Type
  predicate invariant' [#"../NewDB/src/clause_manager.rs" 61 4 61 41] (self : NewDb_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel)
    
end
module NewDb_ClauseManager_Impl2_Invariant_Interface
  use NewDb_ClauseManager_ClauseManagerModel_Type as NewDb_ClauseManager_ClauseManagerModel_Type
  predicate invariant' [#"../NewDB/src/clause_manager.rs" 61 4 61 41] (self : NewDb_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel)
    
end
module NewDb_ClauseManager_Impl2_Invariant
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  clone NewDb_CrefManager_Impl2_AreImpliedBy_Stub as AreImpliedBy0
  clone NewDb_CrefManager_Impl2_Invariant_Stub as Invariant1
  clone NewDb_ClauseAllocator_Impl2_Invariant_Stub as Invariant0
  use NewDb_ClauseManager_ClauseManagerModel_Type as NewDb_ClauseManager_ClauseManagerModel_Type
  predicate invariant' [#"../NewDB/src/clause_manager.rs" 61 4 61 41] (self : NewDb_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel)
    
   =
    [#"../NewDB/src/clause_manager.rs" 62 8 67 9] Invariant0.invariant' (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) /\ Invariant1.invariant' (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self) (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) /\ Invariant1.invariant' (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_learnt_core self) (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) /\ AreImpliedBy0.are_implied_by (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_learnt_core self) (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self) (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self)
  val invariant' [#"../NewDB/src/clause_manager.rs" 61 4 61 41] (self : NewDb_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : bool
    ensures { result = invariant' self }
    
end
module NewDb_LogicUtil_SeqToFsetInternal_Stub
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  function seq_to_fset_internal [#"../NewDB/src/logic_util.rs" 33 0 33 61] (seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit)) (idx : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
end
module NewDb_LogicUtil_SeqToFsetInternal_Interface
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  function seq_to_fset_internal [#"../NewDB/src/logic_util.rs" 33 0 33 61] (seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit)) (idx : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
  axiom seq_to_fset_internal_spec : forall seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit), idx : int . ([#"../NewDB/src/logic_util.rs" 30 11 30 19] idx >= 0) -> ([#"../NewDB/src/logic_util.rs" 32 0 32 80] forall i : int . idx <= i /\ i < Seq.length seq -> Contains0.contains (seq_to_fset_internal seq idx) (Seq.get seq i)) && ([#"../NewDB/src/logic_util.rs" 31 0 31 101] forall l : NewDb_Lit_Lit_Type.t_lit . Contains0.contains (seq_to_fset_internal seq idx) l -> (exists i : int . idx <= i /\ i < Seq.length seq /\ Seq.get seq i = l))
end
module NewDb_LogicUtil_SeqToFsetInternal
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  function seq_to_fset_internal [#"../NewDB/src/logic_util.rs" 33 0 33 61] (seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit)) (idx : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
  val seq_to_fset_internal [#"../NewDB/src/logic_util.rs" 33 0 33 61] (seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit)) (idx : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    requires {[#"../NewDB/src/logic_util.rs" 30 11 30 19] idx >= 0}
    ensures { result = seq_to_fset_internal seq idx }
    
  axiom def : forall seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit), idx : int . seq_to_fset_internal seq idx = ([#"../NewDB/src/logic_util.rs" 34 4 41 5] if idx < Seq.length seq then
    let set = seq_to_fset_internal seq (idx + 1) in Insert0.insert set (Seq.get seq idx)
  else
    Fset.empty 
  )
  axiom seq_to_fset_internal_spec : forall seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit), idx : int . ([#"../NewDB/src/logic_util.rs" 30 11 30 19] idx >= 0) -> ([#"../NewDB/src/logic_util.rs" 32 0 32 80] forall i : int . idx <= i /\ i < Seq.length seq -> Contains0.contains (seq_to_fset_internal seq idx) (Seq.get seq i)) && ([#"../NewDB/src/logic_util.rs" 31 0 31 101] forall l : NewDb_Lit_Lit_Type.t_lit . Contains0.contains (seq_to_fset_internal seq idx) l -> (exists i : int . idx <= i /\ i < Seq.length seq /\ Seq.get seq i = l))
end
module NewDb_LogicUtil_SeqToFsetInternal_Impl
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  let rec ghost function seq_to_fset_internal [#"../NewDB/src/logic_util.rs" 33 0 33 61] (seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit)) (idx : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    requires {[#"../NewDB/src/logic_util.rs" 30 11 30 19] idx >= 0}
    ensures { [#"../NewDB/src/logic_util.rs" 31 0 31 101] forall l : NewDb_Lit_Lit_Type.t_lit . Contains0.contains result l -> (exists i : int . idx <= i /\ i < Seq.length seq /\ Seq.get seq i = l) }
    ensures { [#"../NewDB/src/logic_util.rs" 32 0 32 80] forall i : int . idx <= i /\ i < Seq.length seq -> Contains0.contains result (Seq.get seq i) }
    variant {[#"../NewDB/src/logic_util.rs" 29 10 29 25] Seq.length seq - idx}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../NewDB/src/logic_util.rs" 34 4 41 5] if pure {idx < Seq.length seq} then
      let set = seq_to_fset_internal seq (idx + 1) in Insert0.insert set (Seq.get seq idx)
    else
      Fset.empty 
    
end
module NewDb_LogicUtil_SeqToFset_Stub
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  function seq_to_fset [#"../NewDB/src/logic_util.rs" 22 0 22 53] (seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit)) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
end
module NewDb_LogicUtil_SeqToFset_Interface
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  function seq_to_fset [#"../NewDB/src/logic_util.rs" 22 0 22 53] (seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit)) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
  axiom seq_to_fset_spec : forall seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit) . ([#"../NewDB/src/logic_util.rs" 21 0 21 101] forall l : NewDb_Lit_Lit_Type.t_lit . Contains0.contains (seq_to_fset seq) l -> (exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = l)) && ([#"../NewDB/src/logic_util.rs" 20 0 20 78] forall i : int . 0 <= i /\ i < Seq.length seq -> Contains0.contains (seq_to_fset seq) (Seq.get seq i))
end
module NewDb_LogicUtil_SeqToFset
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone NewDb_LogicUtil_SeqToFsetInternal_Stub as SeqToFsetInternal0 with
    predicate Contains0.contains = Contains0.contains,
    axiom .
  function seq_to_fset [#"../NewDB/src/logic_util.rs" 22 0 22 53] (seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit)) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
   =
    [#"../NewDB/src/logic_util.rs" 24 8 24 36] SeqToFsetInternal0.seq_to_fset_internal seq 0
  val seq_to_fset [#"../NewDB/src/logic_util.rs" 22 0 22 53] (seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit)) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    ensures { result = seq_to_fset seq }
    
  axiom seq_to_fset_spec : forall seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit) . ([#"../NewDB/src/logic_util.rs" 21 0 21 101] forall l : NewDb_Lit_Lit_Type.t_lit . Contains0.contains (seq_to_fset seq) l -> (exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = l)) && ([#"../NewDB/src/logic_util.rs" 20 0 20 78] forall i : int . 0 <= i /\ i < Seq.length seq -> Contains0.contains (seq_to_fset seq) (Seq.get seq i))
end
module NewDb_LogicUtil_SeqToFset_Impl
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone NewDb_LogicUtil_SeqToFsetInternal as SeqToFsetInternal0 with
    predicate Contains0.contains = Contains0.contains,
    function Insert0.insert = Insert0.insert,
    axiom .
  let rec ghost function seq_to_fset [#"../NewDB/src/logic_util.rs" 22 0 22 53] (seq : Seq.seq (NewDb_Lit_Lit_Type.t_lit)) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    ensures { [#"../NewDB/src/logic_util.rs" 20 0 20 78] forall i : int . 0 <= i /\ i < Seq.length seq -> Contains0.contains result (Seq.get seq i) }
    ensures { [#"../NewDB/src/logic_util.rs" 21 0 21 101] forall l : NewDb_Lit_Lit_Type.t_lit . Contains0.contains result l -> (exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = l) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../NewDB/src/logic_util.rs" 24 8 24 36] SeqToFsetInternal0.seq_to_fset_internal seq 0
end
module NewDb_CrefManager_Impl3_Push_Stub
  use prelude.Int
  use prelude.UInt32
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  function push [#"../NewDB/src/cref_manager.rs" 71 4 71 48] (self : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (cref : uint32) : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
end
module NewDb_CrefManager_Impl3_Push_Interface
  use prelude.Int
  use prelude.UInt32
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  function push [#"../NewDB/src/cref_manager.rs" 71 4 71 48] (self : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (cref : uint32) : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
end
module NewDb_CrefManager_Impl3_Push
  use prelude.Int
  use prelude.UInt32
  use seq.Seq
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  function push [#"../NewDB/src/cref_manager.rs" 71 4 71 48] (self : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (cref : uint32) : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
   =
    [#"../NewDB/src/cref_manager.rs" 72 8 75 9] NewDb_CrefManager_CRefManagerModel_Type.C_CRefManagerModel (Seq.snoc (NewDb_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) cref) (NewDb_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self)
  val push [#"../NewDB/src/cref_manager.rs" 71 4 71 48] (self : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (cref : uint32) : NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    ensures { result = push self cref }
    
end
module NewDb_CrefManager_Impl1_AddCref_Interface
  use prelude.UInt32
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.Int
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  use NewDb_ClauseAllocator_ClauseAllocator_Type as NewDb_ClauseAllocator_ClauseAllocator_Type
  clone NewDb_CrefManager_Impl3_Push_Stub as Push0
  use NewDb_CrefManager_CRefManager_Type as NewDb_CrefManager_CRefManager_Type
  clone NewDb_CrefManager_Impl0_ShallowModel_Stub as ShallowModel2
  clone NewDb_ClauseAllocator_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_CrefManager_Impl2_Invariant_Stub as Invariant0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator,
    type ShallowModelTy0.shallowModelTy = NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = NewDb_CrefManager_CRefManager_Type.t_crefmanager,
    type ShallowModelTy0.shallowModelTy = NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
  val add_cref [#"../NewDB/src/cref_manager.rs" 43 4 43 86] (self : borrowed (NewDb_CrefManager_CRefManager_Type.t_crefmanager)) (cref : uint32) (_clause_allocator : NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator) : ()
    requires {[#"../NewDB/src/cref_manager.rs" 37 4 37 52] Invariant0.invariant' (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model _clause_allocator)}
    requires {[#"../NewDB/src/cref_manager.rs" 38 15 38 72] CrefInvariant0.cref_invariant (UInt32.to_int cref) (ShallowModel1.shallow_model _clause_allocator) (UIntSize.to_int (NewDb_CrefManager_CRefManager_Type.crefmanager_num_vars ( * self)))}
    ensures { [#"../NewDB/src/cref_manager.rs" 40 14 40 42] ShallowModel2.shallow_model ( ^ self) = Push0.push (ShallowModel0.shallow_model self) cref }
    
end
module NewDb_CrefManager_Impl1_AddCref
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use prelude.UIntSize
  use seq.Seq
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  clone NewDb_Lit_Impl2_IndexLogic as IndexLogic0
  clone NewDb_Lit_Impl3_VarInRange as VarInRange0 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_ShallowModel as ShallowModel7
  clone Core_U32_Max as Max1
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel6 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel4 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  clone NewDb_Clause_Impl1_Invariant as Invariant2 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  clone NewDb_ClauseAllocator_HeaderLen as HeaderLen0
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN'
  clone NewDb_ClauseAllocator_Impl2_Invariant as Invariant1 with
    val Max0.mAX' = Max1.mAX'
  use NewDb_ClauseAllocator_ClauseAllocator_Type as NewDb_ClauseAllocator_ClauseAllocator_Type
  clone NewDb_ClauseAllocator_Impl0_ShallowModel as ShallowModel3 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  clone Alloc_Vec_Impl1_Push_Interface as Push1 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use NewDb_CrefManager_CRefManager_Type as NewDb_CrefManager_CRefManager_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = NewDb_CrefManager_CRefManager_Type.t_crefmanager
  clone NewDb_CrefManager_Impl3_Push as Push0
  clone NewDb_CrefManager_Impl0_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_ClauseAllocator_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone NewDb_CrefManager_Impl2_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator,
    type ShallowModelTy0.shallowModelTy = NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = NewDb_CrefManager_CRefManager_Type.t_crefmanager,
    type ShallowModelTy0.shallowModelTy = NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  let rec cfg add_cref [#"../NewDB/src/cref_manager.rs" 43 4 43 86] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (NewDb_CrefManager_CRefManager_Type.t_crefmanager)) (cref : uint32) (_clause_allocator : NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator) : ()
    requires {[#"../NewDB/src/cref_manager.rs" 37 4 37 52] Invariant0.invariant' (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model _clause_allocator)}
    requires {[#"../NewDB/src/cref_manager.rs" 38 15 38 72] CrefInvariant0.cref_invariant (UInt32.to_int cref) (ShallowModel1.shallow_model _clause_allocator) (UIntSize.to_int (NewDb_CrefManager_CRefManager_Type.crefmanager_num_vars ( * self)))}
    ensures { [#"../NewDB/src/cref_manager.rs" 40 14 40 42] ShallowModel2.shallow_model ( ^ self) = Push0.push (ShallowModel0.shallow_model self) cref }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (NewDb_CrefManager_CRefManager_Type.t_crefmanager);
  var cref_2 : uint32;
  var _clause_allocator_3 : NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator;
  var _7 : ();
  var _8 : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global));
  var _9 : uint32;
  {
    self_1 <- self;
    cref_2 <- cref;
    _clause_allocator_3 <- _clause_allocator;
    goto BB0
  }
  BB0 {
    _8 <- borrow_mut (NewDb_CrefManager_CRefManager_Type.crefmanager_crefs ( * self_1));
    self_1 <- { self_1 with current = (let NewDb_CrefManager_CRefManager_Type.C_CRefManager a b =  * self_1 in NewDb_CrefManager_CRefManager_Type.C_CRefManager ( ^ _8) b) };
    assume { Resolve0.resolve self_1 };
    _9 <- cref_2;
    _7 <- ([#"../NewDB/src/cref_manager.rs" 44 8 44 29] Push1.push _8 _9);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
module NewDb_ClauseManager_Impl1_LearnClause_Interface
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Slice
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = NewDb_Lit_Lit_Type.t_lit
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseFset_Stub as GetClauseFset0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  clone NewDb_ClauseAllocator_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_ClauseAllocator_Impl2_Invariant_Stub as Invariant2
  use seq.Seq
  use NewDb_ClauseManager_ClauseManagerModel_Type as NewDb_ClauseManager_ClauseManagerModel_Type
  use NewDb_ClauseManager_ClauseManager_Type as NewDb_ClauseManager_ClauseManager_Type
  clone NewDb_ClauseManager_Impl0_ShallowModel_Stub as ShallowModel2
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  clone NewDb_Clause_Impl1_Invariant_Stub as Invariant1
  use NewDb_ClauseAllocator_ClauseAllocator_Type as NewDb_ClauseAllocator_ClauseAllocator_Type
  clone NewDb_Formula_Impl0_Implies_Stub as Implies0
  clone NewDb_LogicUtil_SeqToFset_Stub as SeqToFset0 with
    predicate Contains0.contains = Contains1.contains,
    axiom .
  clone NewDb_Formula_Impl0_From_Stub as From0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    axiom .
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  clone Core_U32_Max_Stub as Max0
  clone NewDb_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = slice (NewDb_Lit_Lit_Type.t_lit),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit)
  clone NewDb_ClauseManager_Impl2_Invariant_Stub as Invariant0
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = NewDb_ClauseManager_ClauseManager_Type.t_clausemanager,
    type ShallowModelTy0.shallowModelTy = NewDb_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel
  val learn_clause [#"../NewDB/src/clause_manager.rs" 40 4 40 63] (self : borrowed (NewDb_ClauseManager_ClauseManager_Type.t_clausemanager)) (lits : slice (NewDb_Lit_Lit_Type.t_lit)) : uint32
    requires {[#"../NewDB/src/clause_manager.rs" 33 4 33 34] Invariant0.invariant' (ShallowModel0.shallow_model self)}
    requires {[#"../NewDB/src/clause_manager.rs" 35 15 35 30] Seq.length (ShallowModel1.shallow_model lits) > 0}
    requires {[#"../NewDB/src/clause_manager.rs" 36 15 36 91] Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (ShallowModel0.shallow_model self))) + Seq.length (ShallowModel1.shallow_model lits) + UIntSize.to_int HeaderLen0.hEADER_LEN' <= UInt32.to_int Max0.mAX'}
    requires {[#"../NewDB/src/clause_manager.rs" 37 15 37 164] Implies0.implies (From0.from (NewDb_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses (ShallowModel0.shallow_model self))) (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (ShallowModel0.shallow_model self)) (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (ShallowModel0.shallow_model self)))) (NewDb_Clause_ClauseFSet_Type.C_ClauseFSet (SeqToFset0.seq_to_fset (ShallowModel1.shallow_model lits)))}
    requires {[#"../NewDB/src/clause_manager.rs" 39 15 39 83] Invariant1.invariant' (NewDb_Clause_ClauseSeq_Type.C_ClauseSeq (ShallowModel1.shallow_model lits)) (UIntSize.to_int (NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars (NewDb_ClauseManager_ClauseManager_Type.clausemanager_clause_allocator ( * self))))}
    ensures { [#"../NewDB/src/clause_manager.rs" 34 4 34 36] Invariant0.invariant' (ShallowModel2.shallow_model ( ^ self)) }
    
end
module NewDb_ClauseManager_Impl1_LearnClause
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Slice
  use prelude.Ghost
  use seq.Seq
  use prelude.UIntSize
  clone NewDb_LogicUtil_BoolAsU8 as BoolAsU80
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  clone NewDb_Lit_Impl2_IsPositiveLogic as IsPositiveLogic0
  clone NewDb_Lit_Impl2_IndexLogic as IndexLogic0
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  clone NewDb_Lit_Impl3_Sat as Sat2 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
    function BoolAsU80.bool_as_u8 = BoolAsU80.bool_as_u8
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_ShallowModel as ShallowModel4
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = NewDb_Lit_Lit_Type.t_lit
  use NewDb_Clause_ClauseFSet_Type as NewDb_Clause_ClauseFSet_Type
  clone NewDb_Clause_Impl0_Sat as Sat1 with
    predicate Contains0.contains = Contains1.contains,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate Sat0.sat = Sat2.sat
  clone NewDb_Assignments_Unset as Unset0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max1
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel11 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel10 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  use NewDb_Formula_Formula_Type as NewDb_Formula_Formula_Type
  clone NewDb_Formula_Impl0_Sat as Sat0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Sat0.sat = Sat1.sat
  clone NewDb_Assignments_Impl1_Complete as Complete0 with
    predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert2 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert1 with
    type t = NewDb_Clause_ClauseFSet_Type.t_clausefset
  use NewDb_ClauseAllocator_ClauseAllocatorModel_Type as NewDb_ClauseAllocator_ClauseAllocatorModel_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseFsetInternal as GetClauseFsetInternal0 with
    function Insert0.insert = Insert2.insert,
    axiom .
  clone NewDb_ClauseAllocator_HeaderLen as HeaderLen0
  use NewDb_Clause_ClauseSeq_Type as NewDb_Clause_ClauseSeq_Type
  clone NewDb_ClauseAllocator_Impl3_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN'
  use NewDb_CrefManager_CRefManagerModel_Type as NewDb_CrefManager_CRefManagerModel_Type
  clone NewDb_CrefManager_Impl3_Push as Push0
  use NewDb_ClauseAllocator_ClauseAllocator_Type as NewDb_ClauseAllocator_ClauseAllocator_Type
  clone NewDb_ClauseAllocator_Impl0_ShallowModel as ShallowModel5 with
    function ShallowModel0.shallow_model = ShallowModel10.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel9 with
    type t = NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator,
    type ShallowModelTy0.shallowModelTy = NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  use NewDb_CrefManager_CRefManager_Type as NewDb_CrefManager_CRefManager_Type
  clone NewDb_CrefManager_Impl0_ShallowModel as ShallowModel6 with
    function ShallowModel0.shallow_model = ShallowModel11.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel8 with
    type t = NewDb_CrefManager_CRefManager_Type.t_crefmanager,
    type ShallowModelTy0.shallowModelTy = NewDb_CrefManager_CRefManagerModel_Type.t_crefmanagermodel,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel7 with
    type t = NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator,
    type ShallowModelTy0.shallowModelTy = NewDb_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone NewDb_Lit_Impl3_VarInRange as VarInRange0 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone NewDb_Formula_Impl0_Insert as Insert0 with
    function Insert0.insert = Insert1.insert
  clone NewDb_Formula_Impl0_EventuallySatComplete as EventuallySatComplete0 with
    predicate Complete0.complete = Complete0.complete,
    predicate Sat0.sat = Sat0.sat
  clone NewDb_LogicUtil_SeqToFsetInternal as SeqToFsetInternal0 with
    predicate Contains0.contains = Contains1.contains,
    function Insert0.insert = Insert2.insert,
    axiom .
  clone NewDb_ClauseAllocator_Impl3_GetClauseFset as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseFsetInternal0.get_clause_fset_internal = GetClauseFsetInternal0.get_clause_fset_internal
  clone NewDb_Clause_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  clone NewDb_ClauseAllocator_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Core_U32_Max as Max0
  clone NewDb_ClauseAllocator_Impl2_Invariant as Invariant2 with
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Formula_Impl0_FromInternal as FromInternal0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function Insert0.insert = Insert1.insert,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel3 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    val Max0.mAX' = Max1.mAX',
    axiom .
  use seq.Seq
  clone NewDb_CrefManager_Impl2_Invariant as Invariant3 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant
  clone NewDb_CrefManager_Impl1_AddCref_Interface as AddCref0 with
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel9.shallow_model,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    function ShallowModel2.shallow_model = ShallowModel6.shallow_model,
    function Push0.push = Push0.push
  use NewDb_ClauseManager_ClauseManager_Type as NewDb_ClauseManager_ClauseManager_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = NewDb_ClauseManager_ClauseManager_Type.t_clausemanager
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = slice (NewDb_Lit_Lit_Type.t_lit),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone NewDb_ClauseAllocator_Impl1_AddClause_Interface as AddClause0 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    val Max0.mAX' = Max0.mAX',
    predicate Invariant1.invariant' = Invariant1.invariant',
    function ShallowModel2.shallow_model = ShallowModel5.shallow_model,
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant
  clone NewDb_Formula_Impl0_Implies as Implies0 with
    predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
    function Insert0.insert = Insert0.insert
  clone NewDb_Formula_Impl0_From as From0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function FromInternal0.from_internal = FromInternal0.from_internal,
    axiom .
  clone NewDb_CrefManager_Impl2_AreImpliedBy as AreImpliedBy0 with
    function From0.from = From0.from,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    predicate Implies0.implies = Implies0.implies,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains
  use NewDb_ClauseManager_ClauseManagerModel_Type as NewDb_ClauseManager_ClauseManagerModel_Type
  clone NewDb_ClauseManager_Impl0_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel6.shallow_model
  clone NewDb_LogicUtil_SeqToFset as SeqToFset0 with
    predicate Contains0.contains = Contains1.contains,
    function SeqToFsetInternal0.seq_to_fset_internal = SeqToFsetInternal0.seq_to_fset_internal,
    axiom .
  clone NewDb_ClauseManager_Impl2_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Invariant1.invariant' = Invariant3.invariant',
    predicate AreImpliedBy0.are_implied_by = AreImpliedBy0.are_implied_by
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = NewDb_ClauseManager_ClauseManager_Type.t_clausemanager,
    type ShallowModelTy0.shallowModelTy = NewDb_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  let rec cfg learn_clause [#"../NewDB/src/clause_manager.rs" 40 4 40 63] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (NewDb_ClauseManager_ClauseManager_Type.t_clausemanager)) (lits : slice (NewDb_Lit_Lit_Type.t_lit)) : uint32
    requires {[#"../NewDB/src/clause_manager.rs" 33 4 33 34] Invariant0.invariant' (ShallowModel0.shallow_model self)}
    requires {[#"../NewDB/src/clause_manager.rs" 35 15 35 30] Seq.length (ShallowModel1.shallow_model lits) > 0}
    requires {[#"../NewDB/src/clause_manager.rs" 36 15 36 91] Seq.length (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (ShallowModel0.shallow_model self))) + Seq.length (ShallowModel1.shallow_model lits) + UIntSize.to_int HeaderLen0.hEADER_LEN' <= UInt32.to_int Max0.mAX'}
    requires {[#"../NewDB/src/clause_manager.rs" 37 15 37 164] Implies0.implies (From0.from (NewDb_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses (ShallowModel0.shallow_model self))) (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (ShallowModel0.shallow_model self)) (NewDb_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (ShallowModel0.shallow_model self)))) (NewDb_Clause_ClauseFSet_Type.C_ClauseFSet (SeqToFset0.seq_to_fset (ShallowModel1.shallow_model lits)))}
    requires {[#"../NewDB/src/clause_manager.rs" 39 15 39 83] Invariant1.invariant' (NewDb_Clause_ClauseSeq_Type.C_ClauseSeq (ShallowModel1.shallow_model lits)) (UIntSize.to_int (NewDb_ClauseAllocator_ClauseAllocator_Type.clauseallocator_num_vars (NewDb_ClauseManager_ClauseManager_Type.clausemanager_clause_allocator ( * self))))}
    ensures { [#"../NewDB/src/clause_manager.rs" 34 4 34 36] Invariant0.invariant' (ShallowModel2.shallow_model ( ^ self)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self_1 : borrowed (NewDb_ClauseManager_ClauseManager_Type.t_clausemanager);
  var lits_2 : slice (NewDb_Lit_Lit_Type.t_lit);
  var old_self_9 : Ghost.ghost_ty (borrowed (NewDb_ClauseManager_ClauseManager_Type.t_clausemanager));
  var _11 : ();
  var _12 : ();
  var cref_14 : uint32;
  var _15 : borrowed (NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator);
  var _16 : slice (NewDb_Lit_Lit_Type.t_lit);
  var _17 : ();
  var ca_19 : NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator;
  var _20 : ();
  var _22 : ();
  var _23 : borrowed (NewDb_CrefManager_CRefManager_Type.t_crefmanager);
  var _24 : uint32;
  var _25 : NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator;
  var _26 : NewDb_ClauseAllocator_ClauseAllocator_Type.t_clauseallocator;
  {
    self_1 <- self;
    lits_2 <- lits;
    goto BB0
  }
  BB0 {
    _11 <- ();
    old_self_9 <- ([#"../NewDB/src/clause_manager.rs" 41 50 41 62] Ghost.new self_1);
    goto BB1
  }
  BB1 {
    assert { [#"../NewDB/src/clause_manager.rs" 42 8 42 103] AreImpliedBy0.are_implied_by (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_learnt_core (ShallowModel0.shallow_model self_1)) (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses (ShallowModel0.shallow_model self_1)) (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (ShallowModel0.shallow_model self_1)) };
    _12 <- ();
    _15 <- borrow_mut (NewDb_ClauseManager_ClauseManager_Type.clausemanager_clause_allocator ( * self_1));
    self_1 <- { self_1 with current = (let NewDb_ClauseManager_ClauseManager_Type.C_ClauseManager a b c =  * self_1 in NewDb_ClauseManager_ClauseManager_Type.C_ClauseManager ( ^ _15) b c) };
    _16 <- lits_2;
    cref_14 <- ([#"../NewDB/src/clause_manager.rs" 43 19 43 57] AddClause0.add_clause _15 _16);
    goto BB2
  }
  BB2 {
    assert { [#"../NewDB/src/clause_manager.rs" 44 22 44 41]  ^ Ghost.inner old_self_9 =  ^ self_1 };
    _17 <- ();
    ca_19 <- NewDb_ClauseManager_ClauseManager_Type.clausemanager_clause_allocator ( * self_1);
    assert { [#"../NewDB/src/clause_manager.rs" 46 8 46 103] AreImpliedBy0.are_implied_by (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_learnt_core (ShallowModel0.shallow_model self_1)) (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses (ShallowModel0.shallow_model self_1)) (NewDb_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (ShallowModel0.shallow_model self_1)) };
    _20 <- ();
    _23 <- borrow_mut (NewDb_ClauseManager_ClauseManager_Type.clausemanager_learnt_core ( * self_1));
    self_1 <- { self_1 with current = (let NewDb_ClauseManager_ClauseManager_Type.C_ClauseManager a b c =  * self_1 in NewDb_ClauseManager_ClauseManager_Type.C_ClauseManager a b ( ^ _23)) };
    assume { Resolve0.resolve self_1 };
    _24 <- cref_14;
    _26 <- ca_19;
    _25 <- _26;
    _22 <- ([#"../NewDB/src/clause_manager.rs" 47 8 47 44] AddCref0.add_cref _23 _24 _25);
    goto BB3
  }
  BB3 {
    _0 <- cref_14;
    return _0
  }
  
end
module Core_Clone_Impls_Impl8_Clone_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  val clone' (self : uint32) : uint32
    ensures { result = self }
    
end
module NewDb_Lit_Impl5_Clone_Interface
  use prelude.Borrow
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  val clone' [#"../NewDB/src/lit.rs" 9 15 9 20] (self : NewDb_Lit_Lit_Type.t_lit) : NewDb_Lit_Lit_Type.t_lit
    ensures { [#"../NewDB/src/lit.rs" 9 15 9 20] result = self }
    
end
module NewDb_Lit_Impl5_Clone
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone Core_Clone_Impls_Impl8_Clone_Interface as Clone0
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  let rec cfg clone' [#"../NewDB/src/lit.rs" 9 15 9 20] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_Lit_Lit_Type.t_lit) : NewDb_Lit_Lit_Type.t_lit
    ensures { [#"../NewDB/src/lit.rs" 9 15 9 20] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NewDb_Lit_Lit_Type.t_lit;
  var self_1 : NewDb_Lit_Lit_Type.t_lit;
  var _3 : uint32;
  var _4 : uint32;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- NewDb_Lit_Lit_Type.lit_code self_1;
    _3 <- ([#"../NewDB/src/lit.rs" 11 4 11 17] Clone0.clone' _4);
    goto BB1
  }
  BB1 {
    _0 <- NewDb_Lit_Lit_Type.C_Lit _3;
    return _0
  }
  
end
module NewDb_Lit_Impl1_Index_Interface
  use prelude.UIntSize
  use prelude.Int
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl2_IndexLogic_Stub as IndexLogic0
  clone NewDb_Lit_Impl0_ShallowModel_Stub as ShallowModel0
  val index [#"../NewDB/src/lit.rs" 33 4 33 31] (self : NewDb_Lit_Lit_Type.t_lit) : usize
    ensures { [#"../NewDB/src/lit.rs" 32 14 32 44] UIntSize.to_int result = IndexLogic0.index_logic (ShallowModel0.shallow_model self) }
    
end
module NewDb_Lit_Impl1_Index
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt32
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  clone NewDb_Lit_Impl2_IndexLogic as IndexLogic0
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_ShallowModel as ShallowModel0
  let rec cfg index [#"../NewDB/src/lit.rs" 33 4 33 31] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_Lit_Lit_Type.t_lit) : usize
    ensures { [#"../NewDB/src/lit.rs" 32 14 32 44] UIntSize.to_int result = IndexLogic0.index_logic (ShallowModel0.shallow_model self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : NewDb_Lit_Lit_Type.t_lit;
  var _3 : uint32;
  var _4 : uint32;
  var _5 : bool;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- NewDb_Lit_Lit_Type.lit_code self_1;
    _5 <- ([#"../NewDB/src/lit.rs" 35 8 35 23] ([#"../NewDB/src/lit.rs" 35 21 35 22] (2 : uint32)) = ([#"../NewDB/src/lit.rs" 35 8 35 23] (0 : uint32)));
    assert { [#"../NewDB/src/lit.rs" 35 8 35 23] not _5 };
    goto BB1
  }
  BB1 {
    _3 <- ([#"../NewDB/src/lit.rs" 35 8 35 23] _4 / ([#"../NewDB/src/lit.rs" 35 21 35 22] (2 : uint32)));
    _0 <- UIntSize.of_int (UInt32.to_int _3);
    return _0
  }
  
end
module NewDb_Lit_Impl1_IsPositive_Interface
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl2_IsPositiveLogic_Stub as IsPositiveLogic0
  clone NewDb_Lit_Impl0_ShallowModel_Stub as ShallowModel0
  val is_positive [#"../NewDB/src/lit.rs" 41 4 41 36] (self : NewDb_Lit_Lit_Type.t_lit) : bool
    ensures { [#"../NewDB/src/lit.rs" 40 14 40 49] result = IsPositiveLogic0.is_positive_logic (ShallowModel0.shallow_model self) }
    
end
module NewDb_Lit_Impl1_IsPositive
  use prelude.Int
  use prelude.UInt32
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  clone NewDb_Lit_Impl2_IsPositiveLogic as IsPositiveLogic0
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_ShallowModel as ShallowModel0
  let rec cfg is_positive [#"../NewDB/src/lit.rs" 41 4 41 36] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_Lit_Lit_Type.t_lit) : bool
    ensures { [#"../NewDB/src/lit.rs" 40 14 40 49] result = IsPositiveLogic0.is_positive_logic (ShallowModel0.shallow_model self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : NewDb_Lit_Lit_Type.t_lit;
  var _3 : uint32;
  var _4 : uint32;
  var _5 : bool;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- NewDb_Lit_Lit_Type.lit_code self_1;
    _5 <- ([#"../NewDB/src/lit.rs" 43 8 43 21] ([#"../NewDB/src/lit.rs" 43 20 43 21] (2 : uint32)) = ([#"../NewDB/src/lit.rs" 43 8 43 21] (0 : uint32)));
    assert { [#"../NewDB/src/lit.rs" 43 8 43 21] not _5 };
    goto BB1
  }
  BB1 {
    _3 <- ([#"../NewDB/src/lit.rs" 43 8 43 21] _4 % ([#"../NewDB/src/lit.rs" 43 20 43 21] (2 : uint32)));
    _0 <- ([#"../NewDB/src/lit.rs" 43 8 43 26] _3 = ([#"../NewDB/src/lit.rs" 43 25 43 26] (0 : uint32)));
    return _0
  }
  
end
module NewDb_Lit_Impl1_LitSat_Interface
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  clone NewDb_Lit_Impl3_Sat_Stub as Sat0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = NewDb_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel
  clone NewDb_Lit_Impl2_IndexLogic_Stub as IndexLogic0
  clone NewDb_Lit_Impl0_ShallowModel_Stub as ShallowModel0
  val lit_sat [#"../NewDB/src/lit.rs" 49 4 49 56] (self : NewDb_Lit_Lit_Type.t_lit) (a : NewDb_Assignments_Assignments_Type.t_assignments) : bool
    requires {[#"../NewDB/src/lit.rs" 47 15 47 47] IndexLogic0.index_logic (ShallowModel0.shallow_model self) < Seq.length (NewDb_Assignments_AssignmentsModel_Type.assignmentsmodel_0 (ShallowModel1.shallow_model a))}
    ensures { [#"../NewDB/src/lit.rs" 48 14 48 37] result = Sat0.sat (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model a) }
    
end
module NewDb_Lit_Impl1_LitSat
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt8
  use prelude.UIntSize
  use seq.Seq
  use prelude.Bool
  clone Core_Num_Impl11_Max as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel4 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = uint8
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq uint8,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone NewDb_LogicUtil_BoolAsU8 as BoolAsU80
  use NewDb_Lit_LitModel_Type as NewDb_Lit_LitModel_Type
  clone NewDb_Lit_Impl2_IsPositiveLogic as IsPositiveLogic0
  use NewDb_Assignments_AssignmentsModel_Type as NewDb_Assignments_AssignmentsModel_Type
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Assignments_Impl0_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_ShallowModel as ShallowModel0
  clone NewDb_Lit_Impl1_IsPositive_Interface as IsPositive0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone Alloc_Vec_Impl13_Index_Interface as Index1 with
    type t = uint8,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = uint8
  clone NewDb_Lit_Impl2_IndexLogic as IndexLogic0
  clone NewDb_Lit_Impl1_Index_Interface as Index0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone NewDb_Lit_Impl3_Sat as Sat0 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
    function BoolAsU80.bool_as_u8 = BoolAsU80.bool_as_u8
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = NewDb_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = NewDb_Assignments_AssignmentsModel_Type.t_assignmentsmodel,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  let rec cfg lit_sat [#"../NewDB/src/lit.rs" 49 4 49 56] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_Lit_Lit_Type.t_lit) (a : NewDb_Assignments_Assignments_Type.t_assignments) : bool
    requires {[#"../NewDB/src/lit.rs" 47 15 47 47] IndexLogic0.index_logic (ShallowModel0.shallow_model self) < Seq.length (NewDb_Assignments_AssignmentsModel_Type.assignmentsmodel_0 (ShallowModel1.shallow_model a))}
    ensures { [#"../NewDB/src/lit.rs" 48 14 48 37] result = Sat0.sat (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : NewDb_Lit_Lit_Type.t_lit;
  var a_2 : NewDb_Assignments_Assignments_Type.t_assignments;
  var _5 : uint8;
  var _6 : uint8;
  var _7 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _8 : usize;
  var _9 : NewDb_Lit_Lit_Type.t_lit;
  var _10 : uint8;
  var _11 : bool;
  var _12 : NewDb_Lit_Lit_Type.t_lit;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _7 <- NewDb_Assignments_Assignments_Type.assignments_0 a_2;
    _9 <- self_1;
    _8 <- ([#"../NewDB/src/lit.rs" 50 12 50 24] Index0.index _9);
    goto BB1
  }
  BB1 {
    _6 <- ([#"../NewDB/src/lit.rs" 50 8 50 25] Index1.index _7 _8);
    goto BB2
  }
  BB2 {
    _5 <- _6;
    _12 <- self_1;
    _11 <- ([#"../NewDB/src/lit.rs" 50 29 50 47] IsPositive0.is_positive _12);
    goto BB3
  }
  BB3 {
    _10 <- UInt8.of_int (Bool.to_int _11);
    _0 <- ([#"../NewDB/src/lit.rs" 50 8 50 53] _5 = _10);
    return _0
  }
  
end
module NewDb_Assignments_Impl2
  use prelude.Borrow
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  goal clone'_refn : [#"../NewDB/src/assignments.rs" 25 9 25 14] forall self : NewDb_Assignments_Assignments_Type.t_assignments . forall result : NewDb_Assignments_Assignments_Type.t_assignments . result = self -> result = self
end
module NewDb_Lit_Impl5
  use prelude.Borrow
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  goal clone'_refn : [#"../NewDB/src/lit.rs" 9 15 9 20] forall self : NewDb_Lit_Lit_Type.t_lit . forall result : NewDb_Lit_Lit_Type.t_lit . result = self -> result = self
end
module NewDb_Assignments_Impl0
  
end
module NewDb_ClauseAllocator_Impl0
  
end
module NewDb_ClauseManager_Impl0
  
end
module NewDb_CrefManager_Impl0
  
end
module NewDb_Lit_Impl0
  
end
module NewDb_Lit_Impl4
  
end
