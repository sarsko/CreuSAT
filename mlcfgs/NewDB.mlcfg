
module NewDb_Lit_Lit_Type
  use prelude.Int
  use prelude.UInt32
  type t_lit  =
    | C_Lit uint32
    
  let function lit_code (self : t_lit) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Lit a -> a
      end
end
module Core_Clone_Impls_Impl8_Clone_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  val clone' (self : uint32) : uint32
    ensures { result = self }
    
end
module NewDb_Lit_Impl4_Clone_Interface
  use prelude.Borrow
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  val clone' [#"../NewDB/src/lit.rs" 10 15 10 20] (self : NewDb_Lit_Lit_Type.t_lit) : NewDb_Lit_Lit_Type.t_lit
    ensures { [#"../NewDB/src/lit.rs" 10 15 10 20] result = self }
    
end
module NewDb_Lit_Impl4_Clone
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone Core_Clone_Impls_Impl8_Clone_Interface as Clone0
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  let rec cfg clone' [#"../NewDB/src/lit.rs" 10 15 10 20] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_Lit_Lit_Type.t_lit) : NewDb_Lit_Lit_Type.t_lit
    ensures { [#"../NewDB/src/lit.rs" 10 15 10 20] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NewDb_Lit_Lit_Type.t_lit;
  var self_1 : NewDb_Lit_Lit_Type.t_lit;
  var _3 : uint32;
  var _4 : uint32;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- NewDb_Lit_Lit_Type.lit_code self_1;
    _3 <- ([#"../NewDB/src/lit.rs" 12 4 12 17] Clone0.clone' _4);
    goto BB1
  }
  BB1 {
    _0 <- NewDb_Lit_Lit_Type.C_Lit _3;
    return _0
  }
  
end
module NewDb_Lit_Impl0_IndexLogic_Stub
  use prelude.Int
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  function index_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 18 4 18 35] (self : NewDb_Lit_Lit_Type.t_lit) : int
end
module NewDb_Lit_Impl0_IndexLogic_Interface
  use prelude.Int
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  function index_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 18 4 18 35] (self : NewDb_Lit_Lit_Type.t_lit) : int
end
module NewDb_Lit_Impl0_IndexLogic
  use prelude.Int
  use prelude.UInt32
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  function index_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 18 4 18 35] (self : NewDb_Lit_Lit_Type.t_lit) : int =
    [#"../NewDB/src/lit.rs" 19 8 19 36] div (UInt32.to_int (NewDb_Lit_Lit_Type.lit_code self)) 2
  val index_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 18 4 18 35] (self : NewDb_Lit_Lit_Type.t_lit) : int
    ensures { result = index_logic self }
    
end
module NewDb_Lit_Impl0_IsPositiveLogic_Stub
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  function is_positive_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 24 4 24 42] (self : NewDb_Lit_Lit_Type.t_lit) : bool
    
end
module NewDb_Lit_Impl0_IsPositiveLogic_Interface
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  function is_positive_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 24 4 24 42] (self : NewDb_Lit_Lit_Type.t_lit) : bool
    
end
module NewDb_Lit_Impl0_IsPositiveLogic
  use prelude.UInt32
  use prelude.Int
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  function is_positive_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 24 4 24 42] (self : NewDb_Lit_Lit_Type.t_lit) : bool
    
   =
    [#"../NewDB/src/lit.rs" 25 20 25 39] mod (UInt32.to_int (NewDb_Lit_Lit_Type.lit_code self)) 2 = 0
  val is_positive_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 24 4 24 42] (self : NewDb_Lit_Lit_Type.t_lit) : bool
    ensures { result = is_positive_logic self }
    
end
module NewDb_Lit_Impl1_VarInRange_Stub
  use prelude.Int
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  predicate var_in_range [#"../NewDB/src/lit.rs" 31 4 31 52] (self : NewDb_Lit_Lit_Type.t_lit) (n : int)
end
module NewDb_Lit_Impl1_VarInRange_Interface
  use prelude.Int
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  predicate var_in_range [#"../NewDB/src/lit.rs" 31 4 31 52] (self : NewDb_Lit_Lit_Type.t_lit) (n : int)
end
module NewDb_Lit_Impl1_VarInRange
  use prelude.Int
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_IndexLogic_Stub as IndexLogic0
  predicate var_in_range [#"../NewDB/src/lit.rs" 31 4 31 52] (self : NewDb_Lit_Lit_Type.t_lit) (n : int) =
    [#"../NewDB/src/lit.rs" 33 12 33 34] IndexLogic0.index_logic self < n
  val var_in_range [#"../NewDB/src/lit.rs" 31 4 31 52] (self : NewDb_Lit_Lit_Type.t_lit) (n : int) : bool
    ensures { result = var_in_range self n }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module NewDb_Assignments_Assignments_Type
  use prelude.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_assignments  =
    | C_Assignments (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global))
    
  let function assignments_0 (self : t_assignments) : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignments a -> a
      end
end
module Core_Num_Impl12_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module NewDb_Assignments_Impl0_ShallowModel_Stub
  use seq.Seq
  use prelude.Int
  use prelude.UInt8
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  function shallow_model [#"../NewDB/src/assignments.rs" 18 4 18 50] (self : NewDb_Assignments_Assignments_Type.t_assignments) : Seq.seq uint8
    
end
module NewDb_Assignments_Impl0_ShallowModel_Interface
  use seq.Seq
  use prelude.Int
  use prelude.UInt8
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  function shallow_model [#"../NewDB/src/assignments.rs" 18 4 18 50] (self : NewDb_Assignments_Assignments_Type.t_assignments) : Seq.seq uint8
    
end
module NewDb_Assignments_Impl0_ShallowModel
  use seq.Seq
  use prelude.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  function shallow_model [#"../NewDB/src/assignments.rs" 18 4 18 50] (self : NewDb_Assignments_Assignments_Type.t_assignments) : Seq.seq uint8
    
   =
    [#"../NewDB/src/assignments.rs" 17 4 17 12] ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 self)
  val shallow_model [#"../NewDB/src/assignments.rs" 18 4 18 50] (self : NewDb_Assignments_Assignments_Type.t_assignments) : Seq.seq uint8
    ensures { result = shallow_model self }
    
end
module NewDb_LogicUtil_BoolAsU8_Stub
  use prelude.Int
  use prelude.UInt8
  function bool_as_u8 [@inline:trivial] [#"../NewDB/src/logic_util.rs" 8 0 8 39] (b : bool) : uint8
end
module NewDb_LogicUtil_BoolAsU8_Interface
  use prelude.Int
  use prelude.UInt8
  function bool_as_u8 [@inline:trivial] [#"../NewDB/src/logic_util.rs" 8 0 8 39] (b : bool) : uint8
end
module NewDb_LogicUtil_BoolAsU8
  use prelude.Int
  use prelude.UInt8
  function bool_as_u8 [@inline:trivial] [#"../NewDB/src/logic_util.rs" 8 0 8 39] (b : bool) : uint8 =
    [#"../NewDB/src/logic_util.rs" 10 7 13 8] if b then (1 : uint8) else (0 : uint8)
  val bool_as_u8 [@inline:trivial] [#"../NewDB/src/logic_util.rs" 8 0 8 39] (b : bool) : uint8
    ensures { result = bool_as_u8 b }
    
end
module NewDb_Lit_Impl1_LitSatLogic_Stub
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  predicate lit_sat_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 39 4 39 61] (self : NewDb_Lit_Lit_Type.t_lit) (a : NewDb_Assignments_Assignments_Type.t_assignments)
    
end
module NewDb_Lit_Impl1_LitSatLogic_Interface
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  predicate lit_sat_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 39 4 39 61] (self : NewDb_Lit_Lit_Type.t_lit) (a : NewDb_Assignments_Assignments_Type.t_assignments)
    
end
module NewDb_Lit_Impl1_LitSatLogic
  use seq.Seq
  clone NewDb_LogicUtil_BoolAsU8_Stub as BoolAsU80
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_IsPositiveLogic_Stub as IsPositiveLogic0
  clone NewDb_Lit_Impl0_IndexLogic_Stub as IndexLogic0
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate lit_sat_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 39 4 39 61] (self : NewDb_Lit_Lit_Type.t_lit) (a : NewDb_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../NewDB/src/lit.rs" 41 12 41 76] Seq.get (ShallowModel0.shallow_model a) (IndexLogic0.index_logic self) = BoolAsU80.bool_as_u8 (IsPositiveLogic0.is_positive_logic self)
  val lit_sat_logic [@inline:trivial] [#"../NewDB/src/lit.rs" 39 4 39 61] (self : NewDb_Lit_Lit_Type.t_lit) (a : NewDb_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = lit_sat_logic self a }
    
end
module NewDb_Lit_Impl2_Raw_Interface
  use prelude.UInt32
  use prelude.Int
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  val raw [#"../NewDB/src/lit.rs" 48 4 48 39] (code : uint32) : NewDb_Lit_Lit_Type.t_lit
    ensures { [#"../NewDB/src/lit.rs" 47 14 47 35] UInt32.to_int (NewDb_Lit_Lit_Type.lit_code result) = UInt32.to_int code }
    
end
module NewDb_Lit_Impl2_Raw
  use prelude.Int
  use prelude.UInt32
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  let rec cfg raw [#"../NewDB/src/lit.rs" 48 4 48 39] [@cfg:stackify] [@cfg:subregion_analysis] (code : uint32) : NewDb_Lit_Lit_Type.t_lit
    ensures { [#"../NewDB/src/lit.rs" 47 14 47 35] UInt32.to_int (NewDb_Lit_Lit_Type.lit_code result) = UInt32.to_int code }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NewDb_Lit_Lit_Type.t_lit;
  var code_1 : uint32;
  var _3 : uint32;
  {
    code_1 <- code;
    goto BB0
  }
  BB0 {
    _3 <- code_1;
    _0 <- NewDb_Lit_Lit_Type.C_Lit _3;
    return _0
  }
  
end
module NewDb_Lit_Impl2_Index_Interface
  use prelude.UIntSize
  use prelude.Int
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_IndexLogic_Stub as IndexLogic0
  val index [#"../NewDB/src/lit.rs" 55 4 55 31] (self : NewDb_Lit_Lit_Type.t_lit) : usize
    ensures { [#"../NewDB/src/lit.rs" 54 14 54 43] UIntSize.to_int result = IndexLogic0.index_logic self }
    
end
module NewDb_Lit_Impl2_Index
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt32
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_IndexLogic as IndexLogic0
  let rec cfg index [#"../NewDB/src/lit.rs" 55 4 55 31] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_Lit_Lit_Type.t_lit) : usize
    ensures { [#"../NewDB/src/lit.rs" 54 14 54 43] UIntSize.to_int result = IndexLogic0.index_logic self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : NewDb_Lit_Lit_Type.t_lit;
  var _3 : uint32;
  var _4 : uint32;
  var _5 : bool;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- NewDb_Lit_Lit_Type.lit_code self_1;
    _5 <- ([#"../NewDB/src/lit.rs" 57 8 57 23] ([#"../NewDB/src/lit.rs" 57 21 57 22] (2 : uint32)) = ([#"../NewDB/src/lit.rs" 57 8 57 23] (0 : uint32)));
    assert { [#"../NewDB/src/lit.rs" 57 8 57 23] not _5 };
    goto BB1
  }
  BB1 {
    _3 <- ([#"../NewDB/src/lit.rs" 57 8 57 23] _4 / ([#"../NewDB/src/lit.rs" 57 21 57 22] (2 : uint32)));
    _0 <- UIntSize.of_int (UInt32.to_int _3);
    return _0
  }
  
end
module NewDb_Lit_Impl2_IsPositive_Interface
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_IsPositiveLogic_Stub as IsPositiveLogic0
  val is_positive [#"../NewDB/src/lit.rs" 63 4 63 36] (self : NewDb_Lit_Lit_Type.t_lit) : bool
    ensures { [#"../NewDB/src/lit.rs" 62 14 62 48] result = IsPositiveLogic0.is_positive_logic self }
    
end
module NewDb_Lit_Impl2_IsPositive
  use prelude.Int
  use prelude.UInt32
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_IsPositiveLogic as IsPositiveLogic0
  let rec cfg is_positive [#"../NewDB/src/lit.rs" 63 4 63 36] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_Lit_Lit_Type.t_lit) : bool
    ensures { [#"../NewDB/src/lit.rs" 62 14 62 48] result = IsPositiveLogic0.is_positive_logic self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : NewDb_Lit_Lit_Type.t_lit;
  var _3 : uint32;
  var _4 : uint32;
  var _5 : bool;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- NewDb_Lit_Lit_Type.lit_code self_1;
    _5 <- ([#"../NewDB/src/lit.rs" 65 8 65 21] ([#"../NewDB/src/lit.rs" 65 20 65 21] (2 : uint32)) = ([#"../NewDB/src/lit.rs" 65 8 65 21] (0 : uint32)));
    assert { [#"../NewDB/src/lit.rs" 65 8 65 21] not _5 };
    goto BB1
  }
  BB1 {
    _3 <- ([#"../NewDB/src/lit.rs" 65 8 65 21] _4 % ([#"../NewDB/src/lit.rs" 65 20 65 21] (2 : uint32)));
    _0 <- ([#"../NewDB/src/lit.rs" 65 8 65 26] _3 = ([#"../NewDB/src/lit.rs" 65 25 65 26] (0 : uint32)));
    return _0
  }
  
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module Alloc_Vec_Impl15_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UIntSize.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UIntSize.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module NewDb_Lit_Impl2_LitSat_Interface
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.UInt8
  use seq.Seq
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl1_LitSatLogic_Stub as LitSatLogic0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = NewDb_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint8
  clone NewDb_Lit_Impl0_IndexLogic_Stub as IndexLogic0
  val lit_sat [#"../NewDB/src/lit.rs" 71 4 71 49] (self : NewDb_Lit_Lit_Type.t_lit) (a : NewDb_Assignments_Assignments_Type.t_assignments) : bool
    requires {[#"../NewDB/src/lit.rs" 69 15 69 46] IndexLogic0.index_logic self < Seq.length (ShallowModel0.shallow_model a)}
    ensures { [#"../NewDB/src/lit.rs" 70 14 70 46] result = LitSatLogic0.lit_sat_logic self a }
    
end
module NewDb_Lit_Impl2_LitSat
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt8
  use prelude.UIntSize
  use seq.Seq
  use prelude.Bool
  clone Core_Num_Impl12_Max as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = uint8
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq uint8,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone NewDb_LogicUtil_BoolAsU8 as BoolAsU80
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_IsPositiveLogic as IsPositiveLogic0
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Assignments_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Lit_Impl2_IsPositive_Interface as IsPositive0 with
    function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone Alloc_Vec_Impl15_Index_Interface as Index1 with
    type t = uint8,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = uint8
  clone NewDb_Lit_Impl0_IndexLogic as IndexLogic0
  clone NewDb_Lit_Impl2_Index_Interface as Index0 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone NewDb_Lit_Impl1_LitSatLogic as LitSatLogic0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
    function BoolAsU80.bool_as_u8 = BoolAsU80.bool_as_u8
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = NewDb_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint8,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg lit_sat [#"../NewDB/src/lit.rs" 71 4 71 49] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_Lit_Lit_Type.t_lit) (a : NewDb_Assignments_Assignments_Type.t_assignments) : bool
    requires {[#"../NewDB/src/lit.rs" 69 15 69 46] IndexLogic0.index_logic self < Seq.length (ShallowModel0.shallow_model a)}
    ensures { [#"../NewDB/src/lit.rs" 70 14 70 46] result = LitSatLogic0.lit_sat_logic self a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : NewDb_Lit_Lit_Type.t_lit;
  var a_2 : NewDb_Assignments_Assignments_Type.t_assignments;
  var _5 : uint8;
  var _6 : uint8;
  var _7 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _8 : usize;
  var _9 : NewDb_Lit_Lit_Type.t_lit;
  var _10 : uint8;
  var _11 : bool;
  var _12 : NewDb_Lit_Lit_Type.t_lit;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _7 <- NewDb_Assignments_Assignments_Type.assignments_0 a_2;
    _9 <- self_1;
    _8 <- ([#"../NewDB/src/lit.rs" 72 12 72 24] Index0.index _9);
    goto BB1
  }
  BB1 {
    _6 <- ([#"../NewDB/src/lit.rs" 72 8 72 25] Index1.index _7 _8);
    goto BB2
  }
  BB2 {
    _5 <- _6;
    _12 <- self_1;
    _11 <- ([#"../NewDB/src/lit.rs" 72 29 72 47] IsPositive0.is_positive _12);
    goto BB3
  }
  BB3 {
    _10 <- UInt8.of_int (Bool.to_int _11);
    _0 <- ([#"../NewDB/src/lit.rs" 72 8 72 53] _5 = _10);
    return _0
  }
  
end
module Alloc_Vec_Impl13_Clone_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val clone' (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_Vec_Type.t_vec t a
    ensures { result = self }
    
end
module NewDb_Assignments_Impl2_Clone_Interface
  use prelude.Borrow
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  val clone' [#"../NewDB/src/assignments.rs" 10 9 10 14] (self : NewDb_Assignments_Assignments_Type.t_assignments) : NewDb_Assignments_Assignments_Type.t_assignments
    ensures { [#"../NewDB/src/assignments.rs" 10 9 10 14] result = self }
    
end
module NewDb_Assignments_Impl2_Clone
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt8
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone Alloc_Vec_Impl13_Clone_Interface as Clone0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  let rec cfg clone' [#"../NewDB/src/assignments.rs" 10 9 10 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_Assignments_Assignments_Type.t_assignments) : NewDb_Assignments_Assignments_Type.t_assignments
    ensures { [#"../NewDB/src/assignments.rs" 10 9 10 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NewDb_Assignments_Assignments_Type.t_assignments;
  var self_1 : NewDb_Assignments_Assignments_Type.t_assignments;
  var _3 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _4 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- NewDb_Assignments_Assignments_Type.assignments_0 self_1;
    _3 <- ([#"../NewDB/src/assignments.rs" 11 23 11 45] Clone0.clone' _4);
    goto BB1
  }
  BB1 {
    _0 <- NewDb_Assignments_Assignments_Type.C_Assignments _3;
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module NewDb_Assignments_Impl1_Invariant_Stub
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  predicate invariant' [#"../NewDB/src/assignments.rs" 25 4 25 34] (self : NewDb_Assignments_Assignments_Type.t_assignments)
    
end
module NewDb_Assignments_Impl1_Invariant_Interface
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  predicate invariant' [#"../NewDB/src/assignments.rs" 25 4 25 34] (self : NewDb_Assignments_Assignments_Type.t_assignments)
    
end
module NewDb_Assignments_Impl1_Invariant
  use prelude.Int
  use seq.Seq
  use prelude.UInt8
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate invariant' [#"../NewDB/src/assignments.rs" 25 4 25 34] (self : NewDb_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../NewDB/src/assignments.rs" 26 8 29 9] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> UInt8.to_int (Seq.get (ShallowModel0.shallow_model self) i) < 2
  val invariant' [#"../NewDB/src/assignments.rs" 25 4 25 34] (self : NewDb_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = invariant' self }
    
end
module NewDb_Friday_Pasn_Type
  use prelude.Int
  use prelude.UIntSize
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  type t_pasn  =
    | C_Pasn (NewDb_Assignments_Assignments_Type.t_assignments) usize
    
  let function pasn_assign (self : t_pasn) : NewDb_Assignments_Assignments_Type.t_assignments
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Pasn a _ -> a
      end
  let function pasn_ix (self : t_pasn) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Pasn _ a -> a
      end
end
module Core_Clone_Impls_Impl5_Clone_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  val clone' (self : usize) : usize
    ensures { result = self }
    
end
module NewDb_Friday_Impl7_Clone_Interface
  use prelude.Borrow
  use NewDb_Friday_Pasn_Type as NewDb_Friday_Pasn_Type
  val clone' [#"../NewDB/src/friday.rs" 10 9 10 14] (self : NewDb_Friday_Pasn_Type.t_pasn) : NewDb_Friday_Pasn_Type.t_pasn
    ensures { [#"../NewDB/src/friday.rs" 10 9 10 14] result = self }
    
end
module NewDb_Friday_Impl7_Clone
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  clone Core_Clone_Impls_Impl5_Clone_Interface as Clone1
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Assignments_Impl2_Clone_Interface as Clone0
  use NewDb_Friday_Pasn_Type as NewDb_Friday_Pasn_Type
  let rec cfg clone' [#"../NewDB/src/friday.rs" 10 9 10 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_Friday_Pasn_Type.t_pasn) : NewDb_Friday_Pasn_Type.t_pasn
    ensures { [#"../NewDB/src/friday.rs" 10 9 10 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NewDb_Friday_Pasn_Type.t_pasn;
  var self_1 : NewDb_Friday_Pasn_Type.t_pasn;
  var _3 : NewDb_Assignments_Assignments_Type.t_assignments;
  var _4 : NewDb_Assignments_Assignments_Type.t_assignments;
  var _5 : usize;
  var _6 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- NewDb_Friday_Pasn_Type.pasn_assign self_1;
    _3 <- ([#"../NewDB/src/friday.rs" 12 4 12 23] Clone0.clone' _4);
    goto BB1
  }
  BB1 {
    _6 <- NewDb_Friday_Pasn_Type.pasn_ix self_1;
    _5 <- ([#"../NewDB/src/friday.rs" 13 4 13 13] Clone1.clone' _6);
    goto BB2
  }
  BB2 {
    _0 <- NewDb_Friday_Pasn_Type.C_Pasn _3 _5;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module NewDb_Friday_Impl0_Compatible_Stub
  use NewDb_Friday_Pasn_Type as NewDb_Friday_Pasn_Type
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  predicate compatible [#"../NewDB/src/friday.rs" 18 4 18 41] (self : NewDb_Assignments_Assignments_Type.t_assignments) (pa : NewDb_Friday_Pasn_Type.t_pasn)
    
end
module NewDb_Friday_Impl0_Compatible_Interface
  use NewDb_Friday_Pasn_Type as NewDb_Friday_Pasn_Type
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  predicate compatible [#"../NewDB/src/friday.rs" 18 4 18 41] (self : NewDb_Assignments_Assignments_Type.t_assignments) (pa : NewDb_Friday_Pasn_Type.t_pasn)
    
end
module NewDb_Friday_Impl0_Compatible
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Assignments_Impl1_Invariant_Stub as Invariant0
  use NewDb_Friday_Pasn_Type as NewDb_Friday_Pasn_Type
  predicate compatible [#"../NewDB/src/friday.rs" 18 4 18 41] (self : NewDb_Assignments_Assignments_Type.t_assignments) (pa : NewDb_Friday_Pasn_Type.t_pasn)
    
   =
    [#"../NewDB/src/friday.rs" 19 8 24 9] Invariant0.invariant' self /\ Seq.length (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 (NewDb_Friday_Pasn_Type.pasn_assign pa))) = Seq.length (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 self)) /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (NewDb_Friday_Pasn_Type.pasn_ix pa) -> Seq.get (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 (NewDb_Friday_Pasn_Type.pasn_assign pa))) i = Seq.get (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 self)) i)
  val compatible [#"../NewDB/src/friday.rs" 18 4 18 41] (self : NewDb_Assignments_Assignments_Type.t_assignments) (pa : NewDb_Friday_Pasn_Type.t_pasn) : bool
    ensures { result = compatible self pa }
    
end
module NewDb_Friday_Clause_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_clause  =
    | C_Clause (Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global))
    
  let function clause_0 (self : t_clause) : Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Clause a -> a
      end
end
module NewDb_Friday_Formula_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use NewDb_Friday_Clause_Type as NewDb_Friday_Clause_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_formula  =
    | C_Formula (Alloc_Vec_Vec_Type.t_vec (NewDb_Friday_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global)) usize
    
  let function formula_clauses (self : t_formula) : Alloc_Vec_Vec_Type.t_vec (NewDb_Friday_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Formula a _ -> a
      end
  let function formula_num_vars (self : t_formula) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Formula _ a -> a
      end
end
module NewDb_Friday_Impl2_VarsInRange_Stub
  use prelude.Int
  use NewDb_Friday_Clause_Type as NewDb_Friday_Clause_Type
  predicate vars_in_range [#"../NewDB/src/friday.rs" 53 4 53 42] (self : NewDb_Friday_Clause_Type.t_clause) (n : int)
end
module NewDb_Friday_Impl2_VarsInRange_Interface
  use prelude.Int
  use NewDb_Friday_Clause_Type as NewDb_Friday_Clause_Type
  predicate vars_in_range [#"../NewDB/src/friday.rs" 53 4 53 42] (self : NewDb_Friday_Clause_Type.t_clause) (n : int)
end
module NewDb_Friday_Impl2_VarsInRange
  use prelude.Int
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone NewDb_Lit_Impl1_VarInRange_Stub as VarInRange0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_Friday_Clause_Type as NewDb_Friday_Clause_Type
  predicate vars_in_range [#"../NewDB/src/friday.rs" 53 4 53 42] (self : NewDb_Friday_Clause_Type.t_clause) (n : int) =
    [#"../NewDB/src/friday.rs" 54 8 57 9] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (NewDb_Friday_Clause_Type.clause_0 self)) -> VarInRange0.var_in_range (Seq.get (ShallowModel0.shallow_model (NewDb_Friday_Clause_Type.clause_0 self)) i) n
  val vars_in_range [#"../NewDB/src/friday.rs" 53 4 53 42] (self : NewDb_Friday_Clause_Type.t_clause) (n : int) : bool
    ensures { result = vars_in_range self n }
    
end
module NewDb_Friday_Impl1_Invariant_Stub
  use NewDb_Friday_Formula_Type as NewDb_Friday_Formula_Type
  predicate invariant' [#"../NewDB/src/friday.rs" 35 4 35 30] (self : NewDb_Friday_Formula_Type.t_formula)
end
module NewDb_Friday_Impl1_Invariant_Interface
  use NewDb_Friday_Formula_Type as NewDb_Friday_Formula_Type
  predicate invariant' [#"../NewDB/src/friday.rs" 35 4 35 30] (self : NewDb_Friday_Formula_Type.t_formula)
end
module NewDb_Friday_Impl1_Invariant
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use NewDb_Friday_Clause_Type as NewDb_Friday_Clause_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone NewDb_Friday_Impl2_VarsInRange_Stub as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = NewDb_Friday_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_Friday_Formula_Type as NewDb_Friday_Formula_Type
  predicate invariant' [#"../NewDB/src/friday.rs" 35 4 35 30] (self : NewDb_Friday_Formula_Type.t_formula) =
    [#"../NewDB/src/friday.rs" 36 8 39 9] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (NewDb_Friday_Formula_Type.formula_clauses self)) -> VarsInRange0.vars_in_range (Seq.get (ShallowModel0.shallow_model (NewDb_Friday_Formula_Type.formula_clauses self)) i) (UIntSize.to_int (NewDb_Friday_Formula_Type.formula_num_vars self))
  val invariant' [#"../NewDB/src/friday.rs" 35 4 35 30] (self : NewDb_Friday_Formula_Type.t_formula) : bool
    ensures { result = invariant' self }
    
end
module NewDb_Friday_Impl4_ClauseSatLogic_Stub
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  use NewDb_Friday_Clause_Type as NewDb_Friday_Clause_Type
  predicate clause_sat_logic [#"../NewDB/src/friday.rs" 75 4 75 53] (self : NewDb_Friday_Clause_Type.t_clause) (a : NewDb_Assignments_Assignments_Type.t_assignments)
    
end
module NewDb_Friday_Impl4_ClauseSatLogic_Interface
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  use NewDb_Friday_Clause_Type as NewDb_Friday_Clause_Type
  predicate clause_sat_logic [#"../NewDB/src/friday.rs" 75 4 75 53] (self : NewDb_Friday_Clause_Type.t_clause) (a : NewDb_Assignments_Assignments_Type.t_assignments)
    
end
module NewDb_Friday_Impl4_ClauseSatLogic
  use prelude.Int
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Lit_Impl1_LitSatLogic_Stub as LitSatLogic0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_Friday_Clause_Type as NewDb_Friday_Clause_Type
  predicate clause_sat_logic [#"../NewDB/src/friday.rs" 75 4 75 53] (self : NewDb_Friday_Clause_Type.t_clause) (a : NewDb_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../NewDB/src/friday.rs" 76 8 79 9] exists i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (NewDb_Friday_Clause_Type.clause_0 self)) /\ LitSatLogic0.lit_sat_logic (Seq.get (ShallowModel0.shallow_model (NewDb_Friday_Clause_Type.clause_0 self)) i) a
  val clause_sat_logic [#"../NewDB/src/friday.rs" 75 4 75 53] (self : NewDb_Friday_Clause_Type.t_clause) (a : NewDb_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = clause_sat_logic self a }
    
end
module NewDb_Friday_Impl1_Sat_Stub
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  use NewDb_Friday_Formula_Type as NewDb_Friday_Formula_Type
  predicate sat [#"../NewDB/src/friday.rs" 43 4 43 40] (self : NewDb_Friday_Formula_Type.t_formula) (a : NewDb_Assignments_Assignments_Type.t_assignments)
    
end
module NewDb_Friday_Impl1_Sat_Interface
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  use NewDb_Friday_Formula_Type as NewDb_Friday_Formula_Type
  predicate sat [#"../NewDB/src/friday.rs" 43 4 43 40] (self : NewDb_Friday_Formula_Type.t_formula) (a : NewDb_Assignments_Assignments_Type.t_assignments)
    
end
module NewDb_Friday_Impl1_Sat
  use prelude.Int
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use NewDb_Friday_Clause_Type as NewDb_Friday_Clause_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Friday_Impl4_ClauseSatLogic_Stub as ClauseSatLogic0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = NewDb_Friday_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_Friday_Formula_Type as NewDb_Friday_Formula_Type
  predicate sat [#"../NewDB/src/friday.rs" 43 4 43 40] (self : NewDb_Friday_Formula_Type.t_formula) (a : NewDb_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../NewDB/src/friday.rs" 44 8 47 9] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (NewDb_Friday_Formula_Type.formula_clauses self)) -> ClauseSatLogic0.clause_sat_logic (Seq.get (ShallowModel0.shallow_model (NewDb_Friday_Formula_Type.formula_clauses self)) i) a
  val sat [#"../NewDB/src/friday.rs" 43 4 43 40] (self : NewDb_Friday_Formula_Type.t_formula) (a : NewDb_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = sat self a }
    
end
module NewDb_Friday_Impl3_Invariant_Stub
  use prelude.Int
  use NewDb_Friday_Pasn_Type as NewDb_Friday_Pasn_Type
  predicate invariant' [#"../NewDB/src/friday.rs" 64 4 64 38] (self : NewDb_Friday_Pasn_Type.t_pasn) (n : int)
end
module NewDb_Friday_Impl3_Invariant_Interface
  use prelude.Int
  use NewDb_Friday_Pasn_Type as NewDb_Friday_Pasn_Type
  predicate invariant' [#"../NewDB/src/friday.rs" 64 4 64 38] (self : NewDb_Friday_Pasn_Type.t_pasn) (n : int)
end
module NewDb_Friday_Impl3_Invariant
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Assignments_Impl1_Invariant_Stub as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_Friday_Pasn_Type as NewDb_Friday_Pasn_Type
  predicate invariant' [#"../NewDB/src/friday.rs" 64 4 64 38] (self : NewDb_Friday_Pasn_Type.t_pasn) (n : int) =
    [#"../NewDB/src/friday.rs" 65 8 69 9] UIntSize.to_int (NewDb_Friday_Pasn_Type.pasn_ix self) <= Seq.length (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 (NewDb_Friday_Pasn_Type.pasn_assign self))) /\ Seq.length (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 (NewDb_Friday_Pasn_Type.pasn_assign self))) = n /\ Invariant0.invariant' (NewDb_Friday_Pasn_Type.pasn_assign self)
  val invariant' [#"../NewDB/src/friday.rs" 64 4 64 38] (self : NewDb_Friday_Pasn_Type.t_pasn) (n : int) : bool
    ensures { result = invariant' self n }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val len (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module NewDb_Friday_Impl5_EvalClause_Interface
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  use NewDb_Friday_Clause_Type as NewDb_Friday_Clause_Type
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Friday_Impl4_ClauseSatLogic_Stub as ClauseSatLogic0
  clone NewDb_Friday_Impl2_VarsInRange_Stub as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val eval_clause [#"../NewDB/src/friday.rs" 87 4 87 50] (self : NewDb_Friday_Clause_Type.t_clause) (a : NewDb_Assignments_Assignments_Type.t_assignments) : bool
    requires {[#"../NewDB/src/friday.rs" 84 15 84 47] VarsInRange0.vars_in_range self (Seq.length (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 a)))}
    ensures { [#"../NewDB/src/friday.rs" 85 4 85 54] not result -> not ClauseSatLogic0.clause_sat_logic self a }
    ensures { [#"../NewDB/src/friday.rs" 86 4 86 52] result -> ClauseSatLogic0.clause_sat_logic self a }
    
end
module NewDb_Friday_Impl5_EvalClause
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use prelude.UInt8
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Assignments_Impl0_ShallowModel as ShallowModel3 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel4 with
    type t = NewDb_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = Seq.seq uint8,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone NewDb_LogicUtil_BoolAsU8 as BoolAsU80
  clone NewDb_Lit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone NewDb_Lit_Impl0_IndexLogic as IndexLogic0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone NewDb_Lit_Impl1_VarInRange as VarInRange0 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone NewDb_Lit_Impl1_LitSatLogic as LitSatLogic0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
    function BoolAsU80.bool_as_u8 = BoolAsU80.bool_as_u8
  clone NewDb_Lit_Impl2_LitSat_Interface as LitSat0 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate LitSatLogic0.lit_sat_logic = LitSatLogic0.lit_sat_logic
  clone Alloc_Vec_Impl15_Index_Interface as Index0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = NewDb_Lit_Lit_Type.t_lit
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  use NewDb_Friday_Clause_Type as NewDb_Friday_Clause_Type
  clone NewDb_Friday_Impl4_ClauseSatLogic as ClauseSatLogic0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate LitSatLogic0.lit_sat_logic = LitSatLogic0.lit_sat_logic,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Friday_Impl2_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range,
    val Max0.mAX' = Max0.mAX'
  let rec cfg eval_clause [#"../NewDB/src/friday.rs" 87 4 87 50] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_Friday_Clause_Type.t_clause) (a : NewDb_Assignments_Assignments_Type.t_assignments) : bool
    requires {[#"../NewDB/src/friday.rs" 84 15 84 47] VarsInRange0.vars_in_range self (Seq.length (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 a)))}
    ensures { [#"../NewDB/src/friday.rs" 85 4 85 54] not result -> not ClauseSatLogic0.clause_sat_logic self a }
    ensures { [#"../NewDB/src/friday.rs" 86 4 86 52] result -> ClauseSatLogic0.clause_sat_logic self a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : NewDb_Friday_Clause_Type.t_clause;
  var a_2 : NewDb_Assignments_Assignments_Type.t_assignments;
  var i_6 : usize;
  var clause_len_7 : usize;
  var _8 : Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _9 : ();
  var _12 : ();
  var _13 : bool;
  var _14 : usize;
  var _15 : usize;
  var _16 : ();
  var _17 : bool;
  var _18 : NewDb_Lit_Lit_Type.t_lit;
  var _19 : NewDb_Lit_Lit_Type.t_lit;
  var _20 : Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _21 : usize;
  var _22 : NewDb_Assignments_Assignments_Type.t_assignments;
  var _23 : ();
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    i_6 <- ([#"../NewDB/src/friday.rs" 88 27 88 28] (0 : usize));
    _8 <- NewDb_Friday_Clause_Type.clause_0 self_1;
    clause_len_7 <- ([#"../NewDB/src/friday.rs" 89 25 89 37] Len0.len _8);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant prev_not_sat { [#"../NewDB/src/friday.rs" 90 8 91 81] forall j : int . 0 <= j /\ j < UIntSize.to_int i_6 -> not LitSatLogic0.lit_sat_logic (Seq.get (ShallowModel1.shallow_model (NewDb_Friday_Clause_Type.clause_0 self_1)) j) a_2 };
    invariant loop_invariant { [#"../NewDB/src/friday.rs" 92 36 92 53] UIntSize.to_int i_6 <= UIntSize.to_int clause_len_7 };
    _14 <- i_6;
    _15 <- clause_len_7;
    _13 <- ([#"../NewDB/src/friday.rs" 93 14 93 28] _14 < _15);
    switch (_13)
      | False -> goto BB8
      | True -> goto BB3
      end
  }
  BB3 {
    _20 <- NewDb_Friday_Clause_Type.clause_0 self_1;
    _21 <- i_6;
    _19 <- ([#"../NewDB/src/friday.rs" 94 15 94 24] Index0.index _20 _21);
    goto BB4
  }
  BB4 {
    _18 <- _19;
    _22 <- a_2;
    _17 <- ([#"../NewDB/src/friday.rs" 94 15 94 35] LitSat0.lit_sat _18 _22);
    goto BB5
  }
  BB5 {
    switch (_17)
      | False -> goto BB7
      | True -> goto BB6
      end
  }
  BB6 {
    _0 <- ([#"../NewDB/src/friday.rs" 95 23 95 27] true);
    goto BB9
  }
  BB7 {
    _16 <- ();
    i_6 <- ([#"../NewDB/src/friday.rs" 97 12 97 18] i_6 + ([#"../NewDB/src/friday.rs" 97 17 97 18] (1 : usize)));
    _12 <- ();
    goto BB2
  }
  BB8 {
    _9 <- ();
    _0 <- ([#"../NewDB/src/friday.rs" 99 8 99 13] false);
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module NewDb_Friday_Impl6_EvalFormula_Interface
  use seq.Seq
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  use NewDb_Friday_Formula_Type as NewDb_Friday_Formula_Type
  clone NewDb_Friday_Impl1_Sat_Stub as Sat0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone NewDb_Friday_Impl1_Invariant_Stub as Invariant0
  val eval_formula [#"../NewDB/src/friday.rs" 107 4 107 51] (self : NewDb_Friday_Formula_Type.t_formula) (a : NewDb_Assignments_Assignments_Type.t_assignments) : bool
    requires {[#"../NewDB/src/friday.rs" 104 15 104 31] Invariant0.invariant' self}
    requires {[#"../NewDB/src/friday.rs" 105 15 105 45] Seq.length (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 a)) = UIntSize.to_int (NewDb_Friday_Formula_Type.formula_num_vars self)}
    ensures { [#"../NewDB/src/friday.rs" 106 14 106 36] result = Sat0.sat self a }
    
end
module NewDb_Friday_Impl6_EvalFormula
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use prelude.UInt8
  clone NewDb_LogicUtil_BoolAsU8 as BoolAsU80
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone NewDb_Lit_Impl0_IndexLogic as IndexLogic0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Assignments_Impl0_ShallowModel as ShallowModel4 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Lit_Impl1_VarInRange as VarInRange0 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  use NewDb_Friday_Clause_Type as NewDb_Friday_Clause_Type
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = NewDb_Friday_Clause_Type.t_clause
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = NewDb_Friday_Clause_Type.t_clause
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = NewDb_Friday_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec (NewDb_Friday_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Friday_Clause_Type.t_clause),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone NewDb_Lit_Impl1_LitSatLogic as LitSatLogic0 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
    function BoolAsU80.bool_as_u8 = BoolAsU80.bool_as_u8
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone NewDb_Friday_Impl2_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Friday_Impl4_ClauseSatLogic as ClauseSatLogic0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate LitSatLogic0.lit_sat_logic = LitSatLogic0.lit_sat_logic,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Friday_Impl5_EvalClause_Interface as EvalClause0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    predicate ClauseSatLogic0.clause_sat_logic = ClauseSatLogic0.clause_sat_logic,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl15_Index_Interface as Index0 with
    type t = NewDb_Friday_Clause_Type.t_clause,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = NewDb_Friday_Clause_Type.t_clause
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = NewDb_Friday_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  use NewDb_Friday_Formula_Type as NewDb_Friday_Formula_Type
  clone NewDb_Friday_Impl1_Sat as Sat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate ClauseSatLogic0.clause_sat_logic = ClauseSatLogic0.clause_sat_logic,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Friday_Impl1_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    val Max0.mAX' = Max0.mAX'
  let rec cfg eval_formula [#"../NewDB/src/friday.rs" 107 4 107 51] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_Friday_Formula_Type.t_formula) (a : NewDb_Assignments_Assignments_Type.t_assignments) : bool
    requires {[#"../NewDB/src/friday.rs" 104 15 104 31] Invariant0.invariant' self}
    requires {[#"../NewDB/src/friday.rs" 105 15 105 45] Seq.length (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 a)) = UIntSize.to_int (NewDb_Friday_Formula_Type.formula_num_vars self)}
    ensures { [#"../NewDB/src/friday.rs" 106 14 106 36] result = Sat0.sat self a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : NewDb_Friday_Formula_Type.t_formula;
  var a_2 : NewDb_Assignments_Assignments_Type.t_assignments;
  var i_6 : usize;
  var _7 : ();
  var _9 : ();
  var _10 : bool;
  var _11 : usize;
  var _12 : usize;
  var _13 : Alloc_Vec_Vec_Type.t_vec (NewDb_Friday_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global);
  var _14 : ();
  var _15 : bool;
  var _16 : bool;
  var _17 : NewDb_Friday_Clause_Type.t_clause;
  var _18 : NewDb_Friday_Clause_Type.t_clause;
  var _19 : Alloc_Vec_Vec_Type.t_vec (NewDb_Friday_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global);
  var _20 : usize;
  var _21 : NewDb_Assignments_Assignments_Type.t_assignments;
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    i_6 <- ([#"../NewDB/src/friday.rs" 108 27 108 28] (0 : usize));
    goto BB1
  }
  BB1 {
    invariant prev_sat { [#"../NewDB/src/friday.rs" 109 8 110 89] forall j : int . 0 <= j /\ j < UIntSize.to_int i_6 -> ClauseSatLogic0.clause_sat_logic (Seq.get (ShallowModel1.shallow_model (NewDb_Friday_Formula_Type.formula_clauses self_1)) j) a_2 };
    _11 <- i_6;
    _13 <- NewDb_Friday_Formula_Type.formula_clauses self_1;
    _12 <- ([#"../NewDB/src/friday.rs" 111 18 111 36] Len0.len _13);
    goto BB2
  }
  BB2 {
    _10 <- ([#"../NewDB/src/friday.rs" 111 14 111 36] _11 < _12);
    switch (_10)
      | False -> goto BB8
      | True -> goto BB3
      end
  }
  BB3 {
    _19 <- NewDb_Friday_Formula_Type.formula_clauses self_1;
    _20 <- i_6;
    _18 <- ([#"../NewDB/src/friday.rs" 112 16 112 31] Index0.index _19 _20);
    goto BB4
  }
  BB4 {
    _17 <- _18;
    _21 <- a_2;
    _16 <- ([#"../NewDB/src/friday.rs" 112 16 112 46] EvalClause0.eval_clause _17 _21);
    goto BB5
  }
  BB5 {
    _15 <- not _16;
    switch (_15)
      | False -> goto BB7
      | True -> goto BB6
      end
  }
  BB6 {
    _0 <- ([#"../NewDB/src/friday.rs" 113 23 113 28] false);
    goto BB9
  }
  BB7 {
    _14 <- ();
    i_6 <- ([#"../NewDB/src/friday.rs" 115 12 115 18] i_6 + ([#"../NewDB/src/friday.rs" 115 17 115 18] (1 : usize)));
    _9 <- ();
    goto BB1
  }
  BB8 {
    _7 <- ();
    _0 <- ([#"../NewDB/src/friday.rs" 117 8 117 12] true);
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Core_Usize_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Usize_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl16_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use prelude.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index_mut (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module NewDb_Friday_SetNext_Interface
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use prelude.UInt8
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max1
  use NewDb_Friday_Pasn_Type as NewDb_Friday_Pasn_Type
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Friday_Impl0_Compatible_Stub as Compatible0
  clone NewDb_Friday_Impl3_Invariant_Stub as Invariant0
  clone NewDb_Assignments_Impl0_ShallowModel_Stub as ShallowModel1
  clone Core_Usize_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  val set_next [#"../NewDB/src/friday.rs" 129 0 129 48] (pa : NewDb_Friday_Pasn_Type.t_pasn) (b : uint8) : NewDb_Friday_Pasn_Type.t_pasn
    requires {[#"../NewDB/src/friday.rs" 121 11 121 40] UIntSize.to_int (NewDb_Friday_Pasn_Type.pasn_ix pa) < Seq.length (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 (NewDb_Friday_Pasn_Type.pasn_assign pa)))}
    requires {[#"../NewDB/src/friday.rs" 122 11 122 46] Seq.length (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 (NewDb_Friday_Pasn_Type.pasn_assign pa))) <= UIntSize.to_int Max0.mAX'}
    requires {[#"../NewDB/src/friday.rs" 123 11 123 43] Invariant0.invariant' pa (Seq.length (ShallowModel1.shallow_model (NewDb_Friday_Pasn_Type.pasn_assign pa)))}
    requires {[#"../NewDB/src/friday.rs" 124 11 124 17] UInt8.to_int b < 2}
    ensures { [#"../NewDB/src/friday.rs" 125 10 125 46] Invariant0.invariant' result (Seq.length (ShallowModel1.shallow_model (NewDb_Friday_Pasn_Type.pasn_assign pa))) }
    ensures { [#"../NewDB/src/friday.rs" 126 0 126 41] Compatible0.compatible (NewDb_Friday_Pasn_Type.pasn_assign result) pa }
    ensures { [#"../NewDB/src/friday.rs" 127 10 127 41] Seq.get (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 (NewDb_Friday_Pasn_Type.pasn_assign result))) (UIntSize.to_int (NewDb_Friday_Pasn_Type.pasn_ix pa)) = b }
    ensures { [#"../NewDB/src/friday.rs" 128 10 128 34] UIntSize.to_int (NewDb_Friday_Pasn_Type.pasn_ix result) = UIntSize.to_int (NewDb_Friday_Pasn_Type.pasn_ix pa) + 1 }
    
end
module NewDb_Friday_SetNext
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt8
  use prelude.UIntSize
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = uint8
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max1
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq uint8,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Assignments_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone NewDb_Assignments_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint8
  clone Alloc_Vec_Impl16_IndexMut_Interface as IndexMut0 with
    type t = uint8,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    type Output0.output = uint8,
    val Max0.mAX' = Max1.mAX'
  use NewDb_Friday_Pasn_Type as NewDb_Friday_Pasn_Type
  clone NewDb_Friday_Impl7_Clone_Interface as Clone0
  clone NewDb_Friday_Impl0_Compatible as Compatible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone NewDb_Friday_Impl3_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant1.invariant',
    val Max0.mAX' = Max1.mAX'
  clone Core_Usize_Max as Max0
  let rec cfg set_next [#"../NewDB/src/friday.rs" 129 0 129 48] [@cfg:stackify] [@cfg:subregion_analysis] (pa : NewDb_Friday_Pasn_Type.t_pasn) (b : uint8) : NewDb_Friday_Pasn_Type.t_pasn
    requires {[#"../NewDB/src/friday.rs" 121 11 121 40] UIntSize.to_int (NewDb_Friday_Pasn_Type.pasn_ix pa) < Seq.length (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 (NewDb_Friday_Pasn_Type.pasn_assign pa)))}
    requires {[#"../NewDB/src/friday.rs" 122 11 122 46] Seq.length (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 (NewDb_Friday_Pasn_Type.pasn_assign pa))) <= UIntSize.to_int Max0.mAX'}
    requires {[#"../NewDB/src/friday.rs" 123 11 123 43] Invariant0.invariant' pa (Seq.length (ShallowModel1.shallow_model (NewDb_Friday_Pasn_Type.pasn_assign pa)))}
    requires {[#"../NewDB/src/friday.rs" 124 11 124 17] UInt8.to_int b < 2}
    ensures { [#"../NewDB/src/friday.rs" 125 10 125 46] Invariant0.invariant' result (Seq.length (ShallowModel1.shallow_model (NewDb_Friday_Pasn_Type.pasn_assign pa))) }
    ensures { [#"../NewDB/src/friday.rs" 126 0 126 41] Compatible0.compatible (NewDb_Friday_Pasn_Type.pasn_assign result) pa }
    ensures { [#"../NewDB/src/friday.rs" 127 10 127 41] Seq.get (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 (NewDb_Friday_Pasn_Type.pasn_assign result))) (UIntSize.to_int (NewDb_Friday_Pasn_Type.pasn_ix pa)) = b }
    ensures { [#"../NewDB/src/friday.rs" 128 10 128 34] UIntSize.to_int (NewDb_Friday_Pasn_Type.pasn_ix result) = UIntSize.to_int (NewDb_Friday_Pasn_Type.pasn_ix pa) + 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NewDb_Friday_Pasn_Type.t_pasn;
  var pa_1 : NewDb_Friday_Pasn_Type.t_pasn;
  var b_2 : uint8;
  var new_pa_11 : NewDb_Friday_Pasn_Type.t_pasn;
  var _12 : NewDb_Friday_Pasn_Type.t_pasn;
  var _13 : uint8;
  var _14 : borrowed uint8;
  var _15 : borrowed (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global));
  var _16 : usize;
  {
    pa_1 <- pa;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _12 <- pa_1;
    new_pa_11 <- ([#"../NewDB/src/friday.rs" 130 21 130 31] Clone0.clone' _12);
    goto BB1
  }
  BB1 {
    _13 <- b_2;
    _15 <- borrow_mut (NewDb_Assignments_Assignments_Type.assignments_0 (NewDb_Friday_Pasn_Type.pasn_assign new_pa_11));
    new_pa_11 <- (let NewDb_Friday_Pasn_Type.C_Pasn a b = new_pa_11 in NewDb_Friday_Pasn_Type.C_Pasn (let NewDb_Assignments_Assignments_Type.C_Assignments a = NewDb_Friday_Pasn_Type.pasn_assign new_pa_11 in NewDb_Assignments_Assignments_Type.C_Assignments ( ^ _15)) b);
    _16 <- NewDb_Friday_Pasn_Type.pasn_ix pa_1;
    _14 <- ([#"../NewDB/src/friday.rs" 131 4 131 26] IndexMut0.index_mut _15 _16);
    goto BB2
  }
  BB2 {
    _14 <- { _14 with current = _13 };
    _13 <- any uint8;
    assume { Resolve0.resolve _14 };
    new_pa_11 <- (let NewDb_Friday_Pasn_Type.C_Pasn a b = new_pa_11 in NewDb_Friday_Pasn_Type.C_Pasn a ([#"../NewDB/src/friday.rs" 132 4 132 18] NewDb_Friday_Pasn_Type.pasn_ix new_pa_11 + ([#"../NewDB/src/friday.rs" 132 17 132 18] (1 : usize))));
    _0 <- new_pa_11;
    new_pa_11 <- any NewDb_Friday_Pasn_Type.t_pasn;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module NewDb_Friday_Solve_Interface
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  use NewDb_Friday_Pasn_Type as NewDb_Friday_Pasn_Type
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  use NewDb_Friday_Formula_Type as NewDb_Friday_Formula_Type
  clone NewDb_Friday_Impl1_Sat_Stub as Sat0
  clone NewDb_Friday_Impl0_Compatible_Stub as Compatible0
  clone NewDb_Friday_Impl1_Invariant_Stub as Invariant1
  clone NewDb_Friday_Impl3_Invariant_Stub as Invariant0
  val solve [#"../NewDB/src/friday.rs" 140 0 140 39] (f : NewDb_Friday_Formula_Type.t_formula) (pa : NewDb_Friday_Pasn_Type.t_pasn) : bool
    requires {[#"../NewDB/src/friday.rs" 137 11 137 36] Invariant0.invariant' pa (UIntSize.to_int (NewDb_Friday_Formula_Type.formula_num_vars f))}
    requires {[#"../NewDB/src/friday.rs" 138 11 138 24] Invariant1.invariant' f}
    ensures { [#"../NewDB/src/friday.rs" 139 10 139 76] (not result) = (forall a : NewDb_Assignments_Assignments_Type.t_assignments . Compatible0.compatible a pa -> not Sat0.sat f a) }
    
end
module NewDb_Friday_Solve
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt8
  use seq.Seq
  clone NewDb_LogicUtil_BoolAsU8 as BoolAsU80
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone NewDb_Lit_Impl0_IndexLogic as IndexLogic0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Assignments_Impl0_ShallowModel as ShallowModel3 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Lit_Impl1_LitSatLogic as LitSatLogic0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
    function BoolAsU80.bool_as_u8 = BoolAsU80.bool_as_u8
  clone NewDb_Lit_Impl1_VarInRange as VarInRange0 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel4 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Core_Usize_Max as Max1
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq uint8,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use NewDb_Friday_Clause_Type as NewDb_Friday_Clause_Type
  clone NewDb_Friday_Impl4_ClauseSatLogic as ClauseSatLogic0 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate LitSatLogic0.lit_sat_logic = LitSatLogic0.lit_sat_logic,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Friday_Impl2_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = NewDb_Friday_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone NewDb_Assignments_Impl1_Invariant as Invariant2 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  use NewDb_Friday_Pasn_Type as NewDb_Friday_Pasn_Type
  clone NewDb_Friday_Impl0_Compatible as Compatible0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Friday_Impl3_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant2.invariant',
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Friday_SetNext_Interface as SetNext0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max1.mAX',
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Compatible0.compatible = Compatible0.compatible,
    val Max1.mAX' = Max0.mAX'
  use NewDb_Friday_Formula_Type as NewDb_Friday_Formula_Type
  clone NewDb_Friday_Impl1_Sat as Sat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate ClauseSatLogic0.clause_sat_logic = ClauseSatLogic0.clause_sat_logic,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Friday_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Friday_Impl6_EvalFormula_Interface as EvalFormula0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Sat0.sat = Sat0.sat,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  let rec cfg solve [#"../NewDB/src/friday.rs" 140 0 140 39] [@cfg:stackify] [@cfg:subregion_analysis] (f : NewDb_Friday_Formula_Type.t_formula) (pa : NewDb_Friday_Pasn_Type.t_pasn) : bool
    requires {[#"../NewDB/src/friday.rs" 137 11 137 36] Invariant0.invariant' pa (UIntSize.to_int (NewDb_Friday_Formula_Type.formula_num_vars f))}
    requires {[#"../NewDB/src/friday.rs" 138 11 138 24] Invariant1.invariant' f}
    ensures { [#"../NewDB/src/friday.rs" 139 10 139 76] (not result) = (forall a : NewDb_Assignments_Assignments_Type.t_assignments . Compatible0.compatible a pa -> not Sat0.sat f a) }
    variant {[#"../NewDB/src/friday.rs" 136 0 136 32] UIntSize.to_int (NewDb_Friday_Formula_Type.formula_num_vars f) - UIntSize.to_int (NewDb_Friday_Pasn_Type.pasn_ix pa)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var f_1 : NewDb_Friday_Formula_Type.t_formula;
  var pa_2 : NewDb_Friday_Pasn_Type.t_pasn;
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _12 : ();
  var _13 : NewDb_Friday_Formula_Type.t_formula;
  var _14 : NewDb_Assignments_Assignments_Type.t_assignments;
  var _15 : NewDb_Assignments_Assignments_Type.t_assignments;
  var _16 : bool;
  var _17 : NewDb_Friday_Formula_Type.t_formula;
  var _18 : NewDb_Friday_Pasn_Type.t_pasn;
  var _19 : NewDb_Friday_Pasn_Type.t_pasn;
  var _20 : NewDb_Friday_Pasn_Type.t_pasn;
  var _21 : bool;
  var _22 : NewDb_Friday_Formula_Type.t_formula;
  var _23 : NewDb_Friday_Pasn_Type.t_pasn;
  var _24 : NewDb_Friday_Pasn_Type.t_pasn;
  var _25 : NewDb_Friday_Pasn_Type.t_pasn;
  {
    f_1 <- f;
    pa_2 <- pa;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _9 <- NewDb_Friday_Pasn_Type.pasn_ix pa_2;
    _11 <- NewDb_Assignments_Assignments_Type.assignments_0 (NewDb_Friday_Pasn_Type.pasn_assign pa_2);
    _10 <- ([#"../NewDB/src/friday.rs" 141 16 141 33] Len0.len _11);
    goto BB3
  }
  BB3 {
    _8 <- ([#"../NewDB/src/friday.rs" 141 7 141 33] _9 = _10);
    switch (_8)
      | False -> goto BB6
      | True -> goto BB4
      end
  }
  BB4 {
    _13 <- f_1;
    _15 <- NewDb_Friday_Pasn_Type.pasn_assign pa_2;
    _14 <- _15;
    _0 <- ([#"../NewDB/src/friday.rs" 142 15 142 41] EvalFormula0.eval_formula _13 _14);
    goto BB5
  }
  BB5 {
    goto BB14
  }
  BB6 {
    _7 <- ();
    _17 <- f_1;
    _20 <- pa_2;
    _19 <- _20;
    _18 <- ([#"../NewDB/src/friday.rs" 144 13 144 29] SetNext0.set_next _19 ([#"../NewDB/src/friday.rs" 144 27 144 28] (1 : uint8)));
    goto BB10
  }
  BB7 {
    _0 <- ([#"../NewDB/src/friday.rs" 144 4 144 60] true);
    goto BB9
  }
  BB8 {
    _22 <- f_1;
    _25 <- pa_2;
    _24 <- _25;
    _23 <- ([#"../NewDB/src/friday.rs" 144 43 144 59] SetNext0.set_next _24 ([#"../NewDB/src/friday.rs" 144 57 144 58] (0 : uint8)));
    goto BB12
  }
  BB9 {
    goto BB14
  }
  BB10 {
    _16 <- ([#"../NewDB/src/friday.rs" 144 4 144 30] solve _17 _18);
    goto BB11
  }
  BB11 {
    switch (_16)
      | False -> goto BB8
      | True -> goto BB7
      end
  }
  BB12 {
    _21 <- ([#"../NewDB/src/friday.rs" 144 34 144 60] solve _22 _23);
    goto BB13
  }
  BB13 {
    _0 <- _21;
    _21 <- any bool;
    goto BB9
  }
  BB14 {
    return _0
  }
  
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val from_elem (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = UIntSize.to_int n }
    ensures { forall i : int . 0 <= i /\ i < UIntSize.to_int n -> Seq.get (ShallowModel0.shallow_model result) i = elem }
    
end
module NewDb_Friday_Solver_Interface
  use seq.Seq
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  use NewDb_Friday_Formula_Type as NewDb_Friday_Formula_Type
  clone NewDb_Friday_Impl1_Sat_Stub as Sat0
  clone NewDb_Assignments_Impl1_Invariant_Stub as Invariant1
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone NewDb_Friday_Impl1_Invariant_Stub as Invariant0
  val solver [#"../NewDB/src/friday.rs" 151 0 151 34] (f : NewDb_Friday_Formula_Type.t_formula) : bool
    requires {[#"../NewDB/src/friday.rs" 147 11 147 24] Invariant0.invariant' f}
    ensures { [#"../NewDB/src/friday.rs" 148 0 149 33] not result -> (forall a : NewDb_Assignments_Assignments_Type.t_assignments . Seq.length (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 a)) = UIntSize.to_int (NewDb_Friday_Formula_Type.formula_num_vars f) /\ Invariant1.invariant' a -> not Sat0.sat f a) }
    ensures { [#"../NewDB/src/friday.rs" 150 0 150 55] result -> (exists a : NewDb_Assignments_Assignments_Type.t_assignments . Sat0.sat f a) }
    
end
module NewDb_Friday_Solver
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt8
  use prelude.UIntSize
  use seq.Seq
  clone NewDb_LogicUtil_BoolAsU8 as BoolAsU80
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone NewDb_Lit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone NewDb_Lit_Impl0_IndexLogic as IndexLogic0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  clone NewDb_Assignments_Impl0_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Lit_Impl1_LitSatLogic as LitSatLogic0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
    function BoolAsU80.bool_as_u8 = BoolAsU80.bool_as_u8
  clone NewDb_Lit_Impl1_VarInRange as VarInRange0 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone NewDb_Assignments_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  use NewDb_Friday_Pasn_Type as NewDb_Friday_Pasn_Type
  clone NewDb_Friday_Impl0_Compatible as Compatible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Friday_Impl3_Invariant as Invariant2 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant1.invariant',
    val Max0.mAX' = Max0.mAX'
  use NewDb_Friday_Clause_Type as NewDb_Friday_Clause_Type
  clone NewDb_Friday_Impl4_ClauseSatLogic as ClauseSatLogic0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate LitSatLogic0.lit_sat_logic = LitSatLogic0.lit_sat_logic,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Friday_Impl2_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = NewDb_Friday_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_Friday_Formula_Type as NewDb_Friday_Formula_Type
  clone NewDb_Friday_Impl1_Sat as Sat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate ClauseSatLogic0.clause_sat_logic = ClauseSatLogic0.clause_sat_logic,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Friday_Impl1_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    val Max0.mAX' = Max0.mAX'
  clone NewDb_Friday_Solve_Interface as Solve0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Compatible0.compatible = Compatible0.compatible,
    predicate Sat0.sat = Sat0.sat
  clone Alloc_Vec_FromElem_Interface as FromElem0 with
    type t = uint8,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg solver [#"../NewDB/src/friday.rs" 151 0 151 34] [@cfg:stackify] [@cfg:subregion_analysis] (f : NewDb_Friday_Formula_Type.t_formula) : bool
    requires {[#"../NewDB/src/friday.rs" 147 11 147 24] Invariant0.invariant' f}
    ensures { [#"../NewDB/src/friday.rs" 148 0 149 33] not result -> (forall a : NewDb_Assignments_Assignments_Type.t_assignments . Seq.length (ShallowModel0.shallow_model (NewDb_Assignments_Assignments_Type.assignments_0 a)) = UIntSize.to_int (NewDb_Friday_Formula_Type.formula_num_vars f) /\ Invariant1.invariant' a -> not Sat0.sat f a) }
    ensures { [#"../NewDB/src/friday.rs" 150 0 150 55] result -> (exists a : NewDb_Assignments_Assignments_Type.t_assignments . Sat0.sat f a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var f_1 : NewDb_Friday_Formula_Type.t_formula;
  var _5 : NewDb_Friday_Formula_Type.t_formula;
  var _6 : NewDb_Friday_Pasn_Type.t_pasn;
  var _7 : NewDb_Assignments_Assignments_Type.t_assignments;
  var _8 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _9 : usize;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _5 <- f_1;
    _9 <- NewDb_Friday_Formula_Type.formula_num_vars f_1;
    _8 <- ([#"../NewDB/src/friday.rs" 152 40 152 59] FromElem0.from_elem ([#"../NewDB/src/friday.rs" 152 45 152 46] (0 : uint8)) _9);
    goto BB1
  }
  BB1 {
    _7 <- NewDb_Assignments_Assignments_Type.C_Assignments _8;
    goto BB2
  }
  BB2 {
    _6 <- NewDb_Friday_Pasn_Type.C_Pasn _7 ([#"../NewDB/src/friday.rs" 152 66 152 67] (0 : usize));
    goto BB3
  }
  BB3 {
    _0 <- ([#"../NewDB/src/friday.rs" 152 4 152 70] Solve0.solve _5 _6);
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module NewDb_ClauseAllocator_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_clauseallocator  =
    | C_ClauseAllocator (Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global))
    
  let function clauseallocator_buffer (self : t_clauseallocator) : Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseAllocator a -> a
      end
end
module NewDb_Impl1_ShallowModel_Stub
  use seq.Seq
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  function shallow_model [#"../NewDB/src/lib.rs" 80 4 80 50] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) : Seq.seq (NewDb_Lit_Lit_Type.t_lit)
    
end
module NewDb_Impl1_ShallowModel_Interface
  use seq.Seq
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  function shallow_model [#"../NewDB/src/lib.rs" 80 4 80 50] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) : Seq.seq (NewDb_Lit_Lit_Type.t_lit)
    
end
module NewDb_Impl1_ShallowModel
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  function shallow_model [#"../NewDB/src/lib.rs" 80 4 80 50] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) : Seq.seq (NewDb_Lit_Lit_Type.t_lit)
    
   =
    [#"../NewDB/src/lib.rs" 79 4 79 12] ShallowModel0.shallow_model (NewDb_ClauseAllocator_Type.clauseallocator_buffer self)
  val shallow_model [#"../NewDB/src/lib.rs" 80 4 80 50] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) : Seq.seq (NewDb_Lit_Lit_Type.t_lit)
    ensures { result = shallow_model self }
    
end
module NewDb_HeaderLen_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant hEADER_LEN' [#"../NewDB/src/lib.rs" 85 0 85 23]  : usize
end
module NewDb_HeaderLen
  use prelude.Int
  use prelude.UIntSize
  let constant hEADER_LEN' [#"../NewDB/src/lib.rs" 85 0 85 23]  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../NewDB/src/lib.rs" 85 0 85 23] (1 : usize)
end
module NewDb_CrefInvariant_Stub
  use prelude.Int
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  predicate cref_invariant [#"../NewDB/src/lib.rs" 25 0 25 71] (cref : int) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator)
    
end
module NewDb_CrefInvariant_Interface
  use prelude.Int
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  predicate cref_invariant [#"../NewDB/src/lib.rs" 25 0 25 71] (cref : int) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator)
    
end
module NewDb_CrefInvariant
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use prelude.UIntSize
  clone NewDb_HeaderLen_Stub as HeaderLen0
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl1_ShallowModel_Stub as ShallowModel0
  predicate cref_invariant [#"../NewDB/src/lib.rs" 25 0 25 71] (cref : int) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator)
    
   =
    [#"../NewDB/src/lib.rs" 27 8 28 92] cref < Seq.length (ShallowModel0.shallow_model clause_allocator) /\ UInt32.to_int (NewDb_Lit_Lit_Type.lit_code (Seq.get (ShallowModel0.shallow_model clause_allocator) cref)) + cref + UIntSize.to_int HeaderLen0.hEADER_LEN' <= Seq.length (ShallowModel0.shallow_model clause_allocator)
  val cref_invariant [#"../NewDB/src/lib.rs" 25 0 25 71] (cref : int) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator) : bool
    ensures { result = cref_invariant cref clause_allocator }
    
end
module NewDb_Impl7_Clone_Interface
  use prelude.Borrow
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  val clone' [#"../NewDB/src/lib.rs" 32 9 32 14] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) : NewDb_ClauseAllocator_Type.t_clauseallocator
    ensures { [#"../NewDB/src/lib.rs" 32 9 32 14] result = self }
    
end
module NewDb_Impl7_Clone
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone Alloc_Vec_Impl13_Clone_Interface as Clone0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  let rec cfg clone' [#"../NewDB/src/lib.rs" 32 9 32 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) : NewDb_ClauseAllocator_Type.t_clauseallocator
    ensures { [#"../NewDB/src/lib.rs" 32 9 32 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : NewDb_ClauseAllocator_Type.t_clauseallocator;
  var self_1 : NewDb_ClauseAllocator_Type.t_clauseallocator;
  var _3 : Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _4 : Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- NewDb_ClauseAllocator_Type.clauseallocator_buffer self_1;
    _3 <- ([#"../NewDB/src/lib.rs" 34 4 34 20] Clone0.clone' _4);
    goto BB1
  }
  BB1 {
    _0 <- NewDb_ClauseAllocator_Type.C_ClauseAllocator _3;
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module Core_U32_Max_Stub
  use prelude.Int
  use prelude.UInt32
  val constant mAX'  : uint32
end
module Core_U32_Max
  use prelude.Int
  use prelude.UInt32
  let constant mAX'  : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    (4294967295 : uint32)
end
module NewDb_Impl0_Invariant_Stub
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  predicate invariant' [#"../NewDB/src/lib.rs" 39 4 39 41] (self : NewDb_ClauseAllocator_Type.t_clauseallocator)
end
module NewDb_Impl0_Invariant_Interface
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  predicate invariant' [#"../NewDB/src/lib.rs" 39 4 39 41] (self : NewDb_ClauseAllocator_Type.t_clauseallocator)
end
module NewDb_Impl0_Invariant
  use seq.Seq
  use prelude.UInt32
  use prelude.Int
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone Core_U32_Max_Stub as Max0
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl1_ShallowModel_Stub as ShallowModel0
  predicate invariant' [#"../NewDB/src/lib.rs" 39 4 39 41] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) =
    [#"../NewDB/src/lib.rs" 40 20 40 46] Seq.length (ShallowModel0.shallow_model self) <= UInt32.to_int Max0.mAX'
  val invariant' [#"../NewDB/src/lib.rs" 39 4 39 41] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) : bool
    ensures { result = invariant' self }
    
end
module NewDb_Impl0_GetClauseLogic_Stub
  use prelude.Int
  use seq.Seq
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  function get_clause_logic [#"../NewDB/src/lib.rs" 45 4 45 63] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : int) : Seq.seq (NewDb_Lit_Lit_Type.t_lit)
    
end
module NewDb_Impl0_GetClauseLogic_Interface
  use prelude.Int
  use seq.Seq
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  function get_clause_logic [#"../NewDB/src/lib.rs" 45 4 45 63] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : int) : Seq.seq (NewDb_Lit_Lit_Type.t_lit)
    
end
module NewDb_Impl0_GetClauseLogic
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  use prelude.UInt32
  use seq_ext.SeqExt
  clone NewDb_HeaderLen_Stub as HeaderLen0
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl1_ShallowModel_Stub as ShallowModel0
  function get_clause_logic [#"../NewDB/src/lib.rs" 45 4 45 63] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : int) : Seq.seq (NewDb_Lit_Lit_Type.t_lit)
    
   =
    [#"../NewDB/src/lib.rs" 47 12 47 95] SeqExt.subsequence (ShallowModel0.shallow_model self) (cref + UIntSize.to_int HeaderLen0.hEADER_LEN') (cref + UIntSize.to_int HeaderLen0.hEADER_LEN' + UInt32.to_int (NewDb_Lit_Lit_Type.lit_code (Seq.get (ShallowModel0.shallow_model self) cref)))
  val get_clause_logic [#"../NewDB/src/lib.rs" 45 4 45 63] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : int) : Seq.seq (NewDb_Lit_Lit_Type.t_lit)
    ensures { result = get_clause_logic self cref }
    
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Stub
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Interface
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t =
    [#"../NewDB/src/friday.rs" 86 35 87 0] Fset.add e self
  val insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
    ensures { result = insert self e }
    
end
module NewDb_Impl0_GetClauseFsetInternal_Stub
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl1_ShallowModel_Stub as ShallowModel0
  function get_clause_fset_internal [#"../NewDB/src/lib.rs" 63 4 63 83] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : int) (idx : int) (upper : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
end
module NewDb_Impl0_GetClauseFsetInternal_Interface
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl1_ShallowModel_Stub as ShallowModel0
  function get_clause_fset_internal [#"../NewDB/src/lib.rs" 63 4 63 83] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : int) (idx : int) (upper : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
end
module NewDb_Impl0_GetClauseFsetInternal
  use prelude.Int
  use seq.Seq
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl1_ShallowModel_Stub as ShallowModel0
  function get_clause_fset_internal [#"../NewDB/src/lib.rs" 63 4 63 83] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : int) (idx : int) (upper : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
  val get_clause_fset_internal [#"../NewDB/src/lib.rs" 63 4 63 83] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : int) (idx : int) (upper : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    requires {[#"../NewDB/src/lib.rs" 62 15 62 49] idx >= 0 /\ upper <= Seq.length (ShallowModel0.shallow_model self)}
    ensures { result = get_clause_fset_internal self cref idx upper }
    
  axiom def : forall self : NewDb_ClauseAllocator_Type.t_clauseallocator, cref : int, idx : int, upper : int . get_clause_fset_internal self cref idx upper = ([#"../NewDB/src/lib.rs" 64 8 71 9] if idx < upper then
    let set = get_clause_fset_internal self cref (idx + 1) upper in Insert0.insert set (Seq.get (ShallowModel0.shallow_model self) (cref + idx))
  else
    Fset.empty 
  )
end
module NewDb_Impl0_GetClauseFsetInternal_Impl
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl1_ShallowModel as ShallowModel0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec ghost function get_clause_fset_internal [#"../NewDB/src/lib.rs" 63 4 63 83] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : int) (idx : int) (upper : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    requires {[#"../NewDB/src/lib.rs" 62 15 62 49] idx >= 0 /\ upper <= Seq.length (ShallowModel0.shallow_model self)}
    variant {[#"../NewDB/src/lib.rs" 61 14 61 25] upper - idx}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../NewDB/src/lib.rs" 64 8 71 9] if idx < upper then
      let set = get_clause_fset_internal self cref (idx + 1) upper in let b' = let a' = ShallowModel0.shallow_model self in Seq.get a' (cref + idx) in Insert0.insert set b'
    else
      Fset.empty 
    
end
module NewDb_Impl0_GetClauseFset_Stub
  use prelude.Int
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  function get_clause_fset [#"../NewDB/src/lib.rs" 53 4 53 63] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
end
module NewDb_Impl0_GetClauseFset_Interface
  use prelude.Int
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  function get_clause_fset [#"../NewDB/src/lib.rs" 53 4 53 63] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
end
module NewDb_Impl0_GetClauseFset
  use prelude.Int
  use set.Fset
  use prelude.UIntSize
  use seq.Seq
  use prelude.UInt32
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl1_ShallowModel_Stub as ShallowModel0
  clone NewDb_Impl0_GetClauseFsetInternal_Stub as GetClauseFsetInternal0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    axiom .
  clone NewDb_HeaderLen_Stub as HeaderLen0
  function get_clause_fset [#"../NewDB/src/lib.rs" 53 4 53 63] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    
   =
    [#"../NewDB/src/lib.rs" 55 12 55 111] GetClauseFsetInternal0.get_clause_fset_internal self cref (cref + UIntSize.to_int HeaderLen0.hEADER_LEN') (cref + UIntSize.to_int HeaderLen0.hEADER_LEN' + UInt32.to_int (NewDb_Lit_Lit_Type.lit_code (Seq.get (ShallowModel0.shallow_model self) cref)))
  val get_clause_fset [#"../NewDB/src/lib.rs" 53 4 53 63] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : int) : Fset.fset (NewDb_Lit_Lit_Type.t_lit)
    ensures { result = get_clause_fset self cref }
    
end
module Core_Slice_Impl0_Len_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val len (self : seq t) : usize
    ensures { Seq.length (ShallowModel0.shallow_model self) = UIntSize.to_int result }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val push (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPre_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  predicate into_iter_pre (self : seq t)
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPre_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  predicate into_iter_pre (self : seq t)
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPre
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  predicate into_iter_pre (self : seq t) =
    true
  val into_iter_pre (self : seq t) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self) =
    true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
    requires {Invariant0.invariant' self}
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPost_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  predicate into_iter_post (self : seq t) (res : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPost_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  predicate into_iter_post (self : seq t) (res : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Slice_Impl11_IntoIterPost
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  predicate into_iter_post (self : seq t) (res : Core_Slice_Iter_Iter_Type.t_iter t) =
    self = ShallowModel0.shallow_model res
  val into_iter_post (self : seq t) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    requires {Invariant0.invariant' res}
    ensures { result = into_iter_post self res }
    
end
module Core_Slice_Iter_Impl0_IntoIter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl11_IntoIterPost_Stub as IntoIterPost0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl11_IntoIterPre_Stub as IntoIterPre0 with
    type t = t
  val into_iter (self : seq t) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {IntoIterPre0.into_iter_pre self}
    ensures { IntoIterPost0.into_iter_post self result }
    ensures { Invariant0.invariant' result }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use prelude.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use prelude.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use prelude.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  val shallow_model (self : seq t) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Slice_Impl15_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl15_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl15_Completed
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use prelude.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = seq t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    Resolve0.resolve self /\ ShallowModel1.shallow_model (ShallowModel0.shallow_model self) = Seq.empty 
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : seq t) : Seq.seq t
  axiom to_ref_seq_spec : forall self : seq t . (forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = Seq.get (ShallowModel0.shallow_model self) i) && Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self)
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : seq t) : Seq.seq t
  val to_ref_seq (self : seq t) : Seq.seq t
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : seq t . (forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = Seq.get (ShallowModel0.shallow_model self) i) && Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self)
end
module CreusotContracts_Std1_Slice_Impl15_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl15_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl15_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub as ToRefSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model self) = Seq.(++) visited (ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model tl))
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    requires {Invariant0.invariant' self}
    requires {Invariant0.invariant' tl}
    ensures { result = produces self visited tl }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module Core_Slice_Iter_Impl181_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_Completed_Stub as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  val next (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
  axiom is_inhabited_spec : forall _1' : () . is_inhabited _1' && (exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool =
    true
  val is_inhabited (_1' : ()) : bool
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . is_inhabited _1' && (exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a ab b -> Produces0.produces b bc c -> Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    ()
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    requires {Invariant0.invariant' a}
    requires {Invariant0.invariant' b}
    requires {Invariant0.invariant' c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a ab b -> Produces0.produces b bc c -> Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a (Seq.(++) ab bc) c
end
module NewDb_Impl2_AddClause_Interface
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt32
  use prelude.Slice
  use prelude.Seq
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use seq.Seq
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_Impl1_ShallowModel_Stub as ShallowModel2
  clone Core_U32_Max_Stub as Max0
  clone NewDb_HeaderLen_Stub as HeaderLen0
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = NewDb_ClauseAllocator_Type.t_clauseallocator,
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit)
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq (NewDb_Lit_Lit_Type.t_lit),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit)
  clone NewDb_Impl0_Invariant_Stub as Invariant0
  val add_clause [#"../NewDB/src/lib.rs" 97 4 97 50] (self : borrowed (NewDb_ClauseAllocator_Type.t_clauseallocator)) (lits : seq (NewDb_Lit_Lit_Type.t_lit)) : uint32
    requires {[#"../NewDB/src/lib.rs" 88 4 88 40] Invariant0.invariant' ( * self)}
    requires {[#"../NewDB/src/lib.rs" 89 15 89 32] Seq.length (ShallowModel0.shallow_model lits) > 0}
    requires {[#"../NewDB/src/lib.rs" 90 15 90 71] Seq.length (ShallowModel1.shallow_model self) + Seq.length (ShallowModel0.shallow_model lits) + UIntSize.to_int HeaderLen0.hEADER_LEN' <= UInt32.to_int Max0.mAX'}
    ensures { [#"../NewDB/src/lib.rs" 88 4 88 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../NewDB/src/lib.rs" 91 14 91 75] Seq.length (ShallowModel2.shallow_model ( ^ self)) = Seq.length (ShallowModel1.shallow_model self) + Seq.length (ShallowModel0.shallow_model lits) + UIntSize.to_int HeaderLen0.hEADER_LEN' }
    ensures { [#"../NewDB/src/lib.rs" 92 14 92 38] UInt32.to_int result = Seq.length (ShallowModel1.shallow_model self) }
    ensures { [#"../NewDB/src/lib.rs" 93 14 93 54] UInt32.to_int (NewDb_Lit_Lit_Type.lit_code (Seq.get (ShallowModel2.shallow_model ( ^ self)) (UInt32.to_int result))) = Seq.length (ShallowModel0.shallow_model lits) }
    ensures { [#"../NewDB/src/lib.rs" 94 4 94 88] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model self) -> Seq.get (ShallowModel2.shallow_model ( ^ self)) i = Seq.get (ShallowModel1.shallow_model self) i }
    ensures { [#"../NewDB/src/lib.rs" 95 4 95 112] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model lits) -> Seq.get (ShallowModel2.shallow_model ( ^ self)) (UInt32.to_int result + UIntSize.to_int HeaderLen0.hEADER_LEN' + i) = Seq.get (ShallowModel0.shallow_model lits) i }
    ensures { [#"../NewDB/src/lib.rs" 96 14 96 44] CrefInvariant0.cref_invariant (UInt32.to_int result) ( ^ self) }
    
end
module NewDb_Impl2_AddClause
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.IntSize
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant1 with
    type self = Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit)
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel as ShallowModel8 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel10 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit),
    type ShallowModelTy0.shallowModelTy = seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model
  clone Core_Num_Impl12_Max as Max1
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel4 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit)
  clone CreusotContracts_Std1_Slice_Impl15_Completed as Completed0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    predicate Resolve0.resolve = Resolve0.resolve,
    function ShallowModel0.shallow_model = ShallowModel10.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max1.mAX'
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel5 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel7 with
    type t = Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel9 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global)),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = seq (NewDb_Lit_Lit_Type.t_lit),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq as ToRefSeq0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_Produces as Produces0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_ProducesTrans as ProducesTrans0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    predicate Produces0.produces = Produces0.produces,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_ProducesRefl as ProducesRefl0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit),
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl11_IntoIterPost as IntoIterPost0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl11_IntoIterPre as IntoIterPre0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel6 with
    type t = Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = NewDb_ClauseAllocator_Type.t_clauseallocator
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Slice_Iter_Impl181_Next_Interface as Next0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = NewDb_Lit_Lit_Type.t_lit,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel3 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global)),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model
  clone Core_Slice_Iter_Impl0_IntoIter_Interface as IntoIter0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel7.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone NewDb_Lit_Impl2_Raw_Interface as Raw0
  clone Core_Slice_Impl0_Len_Interface as Len1 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone NewDb_HeaderLen as HeaderLen0
  clone NewDb_Impl1_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone NewDb_CrefInvariant as CrefInvariant0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN'
  clone Core_U32_Max as Max0
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = NewDb_ClauseAllocator_Type.t_clauseallocator,
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone NewDb_Impl0_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg add_clause [#"../NewDB/src/lib.rs" 97 4 97 50] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (NewDb_ClauseAllocator_Type.t_clauseallocator)) (lits : seq (NewDb_Lit_Lit_Type.t_lit)) : uint32
    requires {[#"../NewDB/src/lib.rs" 88 4 88 40] Invariant0.invariant' ( * self)}
    requires {[#"../NewDB/src/lib.rs" 89 15 89 32] Seq.length (ShallowModel0.shallow_model lits) > 0}
    requires {[#"../NewDB/src/lib.rs" 90 15 90 71] Seq.length (ShallowModel1.shallow_model self) + Seq.length (ShallowModel0.shallow_model lits) + UIntSize.to_int HeaderLen0.hEADER_LEN' <= UInt32.to_int Max0.mAX'}
    ensures { [#"../NewDB/src/lib.rs" 88 4 88 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../NewDB/src/lib.rs" 91 14 91 75] Seq.length (ShallowModel2.shallow_model ( ^ self)) = Seq.length (ShallowModel1.shallow_model self) + Seq.length (ShallowModel0.shallow_model lits) + UIntSize.to_int HeaderLen0.hEADER_LEN' }
    ensures { [#"../NewDB/src/lib.rs" 92 14 92 38] UInt32.to_int result = Seq.length (ShallowModel1.shallow_model self) }
    ensures { [#"../NewDB/src/lib.rs" 93 14 93 54] UInt32.to_int (NewDb_Lit_Lit_Type.lit_code (Seq.get (ShallowModel2.shallow_model ( ^ self)) (UInt32.to_int result))) = Seq.length (ShallowModel0.shallow_model lits) }
    ensures { [#"../NewDB/src/lib.rs" 94 4 94 88] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model self) -> Seq.get (ShallowModel2.shallow_model ( ^ self)) i = Seq.get (ShallowModel1.shallow_model self) i }
    ensures { [#"../NewDB/src/lib.rs" 95 4 95 112] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model lits) -> Seq.get (ShallowModel2.shallow_model ( ^ self)) (UInt32.to_int result + UIntSize.to_int HeaderLen0.hEADER_LEN' + i) = Seq.get (ShallowModel0.shallow_model lits) i }
    ensures { [#"../NewDB/src/lib.rs" 96 14 96 44] CrefInvariant0.cref_invariant (UInt32.to_int result) ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self_1 : borrowed (NewDb_ClauseAllocator_Type.t_clauseallocator);
  var lits_2 : seq (NewDb_Lit_Lit_Type.t_lit);
  var cref_13 : uint32;
  var _14 : usize;
  var _15 : Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _16 : ();
  var _17 : borrowed (Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global));
  var _18 : NewDb_Lit_Lit_Type.t_lit;
  var _19 : uint32;
  var _20 : usize;
  var _21 : seq (NewDb_Lit_Lit_Type.t_lit);
  var old_buffer_22 : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global)));
  var _25 : ();
  var _26 : ();
  var iter_27 : Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit);
  var _28 : seq (NewDb_Lit_Lit_Type.t_lit);
  var iter_old_29 : Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit));
  var _31 : ();
  var produced_32 : Ghost.ghost_ty (Seq.seq (NewDb_Lit_Lit_Type.t_lit));
  var _35 : ();
  var _42 : ();
  var _43 : Core_Option_Option_Type.t_option (NewDb_Lit_Lit_Type.t_lit);
  var _44 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit));
  var _45 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (NewDb_Lit_Lit_Type.t_lit));
  var _46 : isize;
  var __creusot_proc_iter_elem_47 : NewDb_Lit_Lit_Type.t_lit;
  var _48 : Ghost.ghost_ty (Seq.seq (NewDb_Lit_Lit_Type.t_lit));
  var _50 : ();
  var lit_51 : NewDb_Lit_Lit_Type.t_lit;
  var _52 : borrowed (Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global));
  var _53 : NewDb_Lit_Lit_Type.t_lit;
  var _54 : ();
  {
    self_1 <- self;
    lits_2 <- lits;
    goto BB0
  }
  BB0 {
    _15 <- NewDb_ClauseAllocator_Type.clauseallocator_buffer ( * self_1);
    _14 <- ([#"../NewDB/src/lib.rs" 98 19 98 36] Len0.len _15);
    goto BB1
  }
  BB1 {
    cref_13 <- UInt32.of_int (UIntSize.to_int _14);
    _17 <- borrow_mut (NewDb_ClauseAllocator_Type.clauseallocator_buffer ( * self_1));
    self_1 <- { self_1 with current = (let NewDb_ClauseAllocator_Type.C_ClauseAllocator a =  * self_1 in NewDb_ClauseAllocator_Type.C_ClauseAllocator ( ^ _17)) };
    _21 <- lits_2;
    _20 <- ([#"../NewDB/src/lib.rs" 99 34 99 44] Len1.len _21);
    goto BB2
  }
  BB2 {
    _19 <- UInt32.of_int (UIntSize.to_int _20);
    _18 <- ([#"../NewDB/src/lib.rs" 99 25 99 52] Raw0.raw _19);
    goto BB3
  }
  BB3 {
    _16 <- ([#"../NewDB/src/lib.rs" 99 8 99 53] Push0.push _17 _18);
    goto BB4
  }
  BB4 {
    _25 <- ();
    old_buffer_22 <- ([#"../NewDB/src/lib.rs" 101 47 101 71] Ghost.new {current = NewDb_ClauseAllocator_Type.clauseallocator_buffer ( * self_1); final = NewDb_ClauseAllocator_Type.clauseallocator_buffer ( ^ self_1)});
    goto BB5
  }
  BB5 {
    _28 <- lits_2;
    iter_27 <- ([#"../NewDB/src/lib.rs" 103 8 103 63] IntoIter0.into_iter _28);
    goto BB6
  }
  BB6 {
    _31 <- ();
    iter_old_29 <- ([#"../NewDB/src/lib.rs" 103 8 103 63] Ghost.new iter_27);
    goto BB7
  }
  BB7 {
    _35 <- ();
    produced_32 <- ([#"../NewDB/src/lib.rs" 103 8 103 63] Ghost.new (Seq.empty ));
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    invariant type_invariant { [#"../NewDB/src/lib.rs" 103 8 103 63] Invariant1.invariant' iter_27 };
    invariant structural { [#"../NewDB/src/lib.rs" 103 8 103 63] Produces0.produces (Ghost.inner iter_old_29) (Ghost.inner produced_32) iter_27 };
    invariant vec_proph { [#"../NewDB/src/lib.rs" 103 31 103 61]  ^ Ghost.inner old_buffer_22 = NewDb_ClauseAllocator_Type.clauseallocator_buffer ( ^ self_1) };
    invariant len { [#"../NewDB/src/lib.rs" 104 25 104 78] Seq.length (ShallowModel1.shallow_model self_1) = Seq.length (ShallowModel3.shallow_model old_buffer_22) + Seq.length (Ghost.inner produced_32) };
    invariant head_unchanged { [#"../NewDB/src/lib.rs" 103 8 103 63] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel3.shallow_model old_buffer_22) -> Seq.get (ShallowModel1.shallow_model self_1) i = Seq.get (ShallowModel3.shallow_model old_buffer_22) i };
    invariant extended { [#"../NewDB/src/lib.rs" 103 8 103 63] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner produced_32) -> Seq.get (ShallowModel1.shallow_model self_1) (UInt32.to_int cref_13 + UIntSize.to_int HeaderLen0.hEADER_LEN' + i) = Seq.get (Ghost.inner produced_32) i };
    _45 <- borrow_mut iter_27;
    iter_27 <-  ^ _45;
    _44 <- borrow_mut ( * _45);
    _45 <- { _45 with current = ( ^ _44) };
    assume { Resolve0.resolve _45 };
    _43 <- ([#"../NewDB/src/lib.rs" 103 8 103 63] Next0.next _44);
    goto BB10
  }
  BB10 {
    switch (_43)
      | Core_Option_Option_Type.C_None -> goto BB11
      | Core_Option_Option_Type.C_Some _ -> goto BB13
      end
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    _26 <- ();
    _0 <- cref_13;
    return _0
  }
  BB12 {
    assume { Resolve1.resolve self_1 };
    absurd
  }
  BB13 {
    __creusot_proc_iter_elem_47 <- Core_Option_Option_Type.some_0 _43;
    _50 <- ();
    _48 <- ([#"../NewDB/src/lib.rs" 103 8 103 63] Ghost.new (Seq.(++) (Ghost.inner produced_32) (Seq.singleton __creusot_proc_iter_elem_47)));
    goto BB14
  }
  BB14 {
    produced_32 <- _48;
    _48 <- any Ghost.ghost_ty (Seq.seq (NewDb_Lit_Lit_Type.t_lit));
    lit_51 <- __creusot_proc_iter_elem_47;
    _52 <- borrow_mut (NewDb_ClauseAllocator_Type.clauseallocator_buffer ( * self_1));
    self_1 <- { self_1 with current = (let NewDb_ClauseAllocator_Type.C_ClauseAllocator a =  * self_1 in NewDb_ClauseAllocator_Type.C_ClauseAllocator ( ^ _52)) };
    _53 <- lit_51;
    _42 <- ([#"../NewDB/src/lib.rs" 108 12 108 34] Push0.push _52 _53);
    goto BB15
  }
  BB15 {
    goto BB9
  }
  
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
end
module CreusotContracts_Std1_Slice_Impl6_InBounds_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Ops_Range_Range_Type.t_range usize
  predicate in_bounds (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl6_InBounds_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Ops_Range_Range_Type.t_range usize
  predicate in_bounds (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl6_InBounds
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Ops_Range_Range_Type.t_range usize
  predicate in_bounds (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t) =
    UIntSize.to_int (Core_Ops_Range_Range_Type.range_start self) <= UIntSize.to_int (Core_Ops_Range_Range_Type.range_end self) /\ UIntSize.to_int (Core_Ops_Range_Range_Type.range_end self) <= Seq.length seq
  val in_bounds (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t) : bool
    requires {Invariant0.invariant' self}
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl6_HasValue_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use prelude.Slice
  use prelude.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Ops_Range_Range_Type.t_range usize
  predicate has_value (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t) (out : seq t)
end
module CreusotContracts_Std1_Slice_Impl6_HasValue_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use prelude.Slice
  use prelude.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Ops_Range_Range_Type.t_range usize
  predicate has_value (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t) (out : seq t)
end
module CreusotContracts_Std1_Slice_Impl6_HasValue
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use prelude.Slice
  use prelude.Seq
  use seq_ext.SeqExt
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Ops_Range_Range_Type.t_range usize
  predicate has_value (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t) (out : seq t) =
    SeqExt.subsequence seq (UIntSize.to_int (Core_Ops_Range_Range_Type.range_start self)) (UIntSize.to_int (Core_Ops_Range_Range_Type.range_end self)) = ShallowModel0.shallow_model out
  val has_value (self : Core_Ops_Range_Range_Type.t_range usize) (seq : Seq.seq t) (out : seq t) : bool
    requires {Invariant0.invariant' self}
    ensures { result = has_value self seq out }
    
end
module NewDb_Impl2_GetClause_Interface
  use prelude.UInt32
  use prelude.Borrow
  use prelude.Int
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use seq.Seq
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl0_GetClauseLogic_Stub as GetClauseLogic0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq (NewDb_Lit_Lit_Type.t_lit),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit)
  clone NewDb_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_Impl0_Invariant_Stub as Invariant0
  val get_clause [#"../NewDB/src/lib.rs" 117 4 117 45] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : uint32) : seq (NewDb_Lit_Lit_Type.t_lit)
    requires {[#"../NewDB/src/lib.rs" 114 15 114 31] Invariant0.invariant' self}
    requires {[#"../NewDB/src/lib.rs" 115 15 115 43] CrefInvariant0.cref_invariant (UInt32.to_int cref) self}
    ensures { [#"../NewDB/src/lib.rs" 116 14 116 53] ShallowModel0.shallow_model result = GetClauseLogic0.get_clause_logic self (UInt32.to_int cref) }
    
end
module NewDb_Impl2_GetClause
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use prelude.Int
  use prelude.UInt32
  use prelude.UIntSize
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant1 with
    type self = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = Core_Ops_Range_Range_Type.t_range usize,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone Core_Num_Impl12_Max as Max1
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel4 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel2 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl6_HasValue as HasValue1 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl6_InBounds as InBounds1 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = NewDb_Lit_Lit_Type.t_lit
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone NewDb_HeaderLen as HeaderLen0
  clone Core_U32_Max as Max0
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl1_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone Alloc_Vec_Impl15_Index_Interface as Index1 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type i = Core_Ops_Range_Range_Type.t_range usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate HasValue0.has_value = HasValue1.has_value,
    type Output0.output = seq (NewDb_Lit_Lit_Type.t_lit)
  clone Alloc_Vec_Impl15_Index_Interface as Index0 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = NewDb_Lit_Lit_Type.t_lit
  clone NewDb_Impl0_GetClauseLogic as GetClauseLogic0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN'
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = seq (NewDb_Lit_Lit_Type.t_lit),
    type ShallowModelTy0.shallowModelTy = Seq.seq (NewDb_Lit_Lit_Type.t_lit),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone NewDb_CrefInvariant as CrefInvariant0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN'
  clone NewDb_Impl0_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg get_clause [#"../NewDB/src/lib.rs" 117 4 117 45] [@cfg:stackify] [@cfg:subregion_analysis] (self : NewDb_ClauseAllocator_Type.t_clauseallocator) (cref : uint32) : seq (NewDb_Lit_Lit_Type.t_lit)
    requires {[#"../NewDB/src/lib.rs" 114 15 114 31] Invariant0.invariant' self}
    requires {[#"../NewDB/src/lib.rs" 115 15 115 43] CrefInvariant0.cref_invariant (UInt32.to_int cref) self}
    ensures { [#"../NewDB/src/lib.rs" 116 14 116 53] ShallowModel0.shallow_model result = GetClauseLogic0.get_clause_logic self (UInt32.to_int cref) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : seq (NewDb_Lit_Lit_Type.t_lit);
  var self_1 : NewDb_ClauseAllocator_Type.t_clauseallocator;
  var cref_2 : uint32;
  var idx_6 : usize;
  var _7 : uint32;
  var len_8 : usize;
  var _9 : uint32;
  var _10 : NewDb_Lit_Lit_Type.t_lit;
  var _11 : Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _12 : usize;
  var _13 : seq (NewDb_Lit_Lit_Type.t_lit);
  var _14 : seq (NewDb_Lit_Lit_Type.t_lit);
  var _15 : Alloc_Vec_Vec_Type.t_vec (NewDb_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _16 : Core_Ops_Range_Range_Type.t_range usize;
  var _17 : usize;
  var _18 : usize;
  var _19 : usize;
  var _20 : usize;
  var _21 : usize;
  var _22 : usize;
  {
    self_1 <- self;
    cref_2 <- cref;
    goto BB0
  }
  BB0 {
    _7 <- cref_2;
    idx_6 <- UIntSize.of_int (UInt32.to_int _7);
    _11 <- NewDb_ClauseAllocator_Type.clauseallocator_buffer self_1;
    _12 <- idx_6;
    _10 <- ([#"../NewDB/src/lib.rs" 119 18 119 34] Index0.index _11 _12);
    goto BB1
  }
  BB1 {
    _9 <- NewDb_Lit_Lit_Type.lit_code _10;
    len_8 <- UIntSize.of_int (UInt32.to_int _9);
    _15 <- NewDb_ClauseAllocator_Type.clauseallocator_buffer self_1;
    _18 <- idx_6;
    _17 <- ([#"../NewDB/src/lib.rs" 120 21 120 37] _18 + ([#"../NewDB/src/lib.rs" 120 27 120 37] (1 : usize)));
    _21 <- idx_6;
    _20 <- ([#"../NewDB/src/lib.rs" 120 39 120 55] _21 + ([#"../NewDB/src/lib.rs" 120 45 120 55] (1 : usize)));
    _22 <- len_8;
    _19 <- ([#"../NewDB/src/lib.rs" 120 39 120 61] _20 + _22);
    _16 <- Core_Ops_Range_Range_Type.C_Range _17 _19;
    _14 <- ([#"../NewDB/src/lib.rs" 120 9 120 62] Index1.index _15 _16);
    goto BB2
  }
  BB2 {
    _13 <- _14;
    _0 <- _13;
    return _0
  }
  
end
module NewDb_CRefManager_Type
  use prelude.Int
  use prelude.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_crefmanager  =
    | C_CRefManager (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))
    
  let function crefmanager_crefs (self : t_crefmanager) : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_CRefManager a -> a
      end
end
module NewDb_Impl3_ShallowModel_Stub
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  use NewDb_CRefManager_Type as NewDb_CRefManager_Type
  function shallow_model [#"../NewDB/src/lib.rs" 133 4 133 50] (self : NewDb_CRefManager_Type.t_crefmanager) : Seq.seq uint32
    
end
module NewDb_Impl3_ShallowModel_Interface
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  use NewDb_CRefManager_Type as NewDb_CRefManager_Type
  function shallow_model [#"../NewDB/src/lib.rs" 133 4 133 50] (self : NewDb_CRefManager_Type.t_crefmanager) : Seq.seq uint32
    
end
module NewDb_Impl3_ShallowModel
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NewDb_CRefManager_Type as NewDb_CRefManager_Type
  function shallow_model [#"../NewDB/src/lib.rs" 133 4 133 50] (self : NewDb_CRefManager_Type.t_crefmanager) : Seq.seq uint32
    
   =
    [#"../NewDB/src/lib.rs" 132 4 132 12] ShallowModel0.shallow_model (NewDb_CRefManager_Type.crefmanager_crefs self)
  val shallow_model [#"../NewDB/src/lib.rs" 133 4 133 50] (self : NewDb_CRefManager_Type.t_crefmanager) : Seq.seq uint32
    ensures { result = shallow_model self }
    
end
module NewDb_Impl4_Invariant_Stub
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  use NewDb_CRefManager_Type as NewDb_CRefManager_Type
  predicate invariant' [#"../NewDB/src/lib.rs" 140 4 140 65] (self : NewDb_CRefManager_Type.t_crefmanager) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator)
    
end
module NewDb_Impl4_Invariant_Interface
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  use NewDb_CRefManager_Type as NewDb_CRefManager_Type
  predicate invariant' [#"../NewDB/src/lib.rs" 140 4 140 65] (self : NewDb_CRefManager_Type.t_crefmanager) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator)
    
end
module NewDb_Impl4_Invariant
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_CrefInvariant_Stub as CrefInvariant0
  use NewDb_CRefManager_Type as NewDb_CRefManager_Type
  clone NewDb_Impl3_ShallowModel_Stub as ShallowModel0
  clone NewDb_Impl0_Invariant_Stub as Invariant0
  predicate invariant' [#"../NewDB/src/lib.rs" 140 4 140 65] (self : NewDb_CRefManager_Type.t_crefmanager) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator)
    
   =
    [#"../NewDB/src/lib.rs" 141 8 145 9] Invariant0.invariant' clause_allocator /\ (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> CrefInvariant0.cref_invariant (UInt32.to_int (Seq.get (ShallowModel0.shallow_model self) i)) clause_allocator)
  val invariant' [#"../NewDB/src/lib.rs" 140 4 140 65] (self : NewDb_CRefManager_Type.t_crefmanager) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator) : bool
    ensures { result = invariant' self clause_allocator }
    
end
module NewDb_Impl4_Implies_Stub
  use prelude.Int
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  use NewDb_CRefManager_Type as NewDb_CRefManager_Type
  predicate implies [#"../NewDB/src/lib.rs" 158 4 158 87] (self : NewDb_CRefManager_Type.t_crefmanager) (cref : int) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator)
    
end
module NewDb_Impl4_Implies_Interface
  use prelude.Int
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  use NewDb_CRefManager_Type as NewDb_CRefManager_Type
  predicate implies [#"../NewDB/src/lib.rs" 158 4 158 87] (self : NewDb_CRefManager_Type.t_crefmanager) (cref : int) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator)
    
end
module NewDb_Impl4_Implies
  use prelude.Int
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  use NewDb_CRefManager_Type as NewDb_CRefManager_Type
  predicate implies [#"../NewDB/src/lib.rs" 158 4 158 87] (self : NewDb_CRefManager_Type.t_crefmanager) (cref : int) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator)
    
   =
    [#"../NewDB/src/lib.rs" 160 12 160 16] true
  val implies [#"../NewDB/src/lib.rs" 158 4 158 87] (self : NewDb_CRefManager_Type.t_crefmanager) (cref : int) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator) : bool
    ensures { result = implies self cref clause_allocator }
    
end
module NewDb_Impl4_AreImpliedBy_Stub
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  use NewDb_CRefManager_Type as NewDb_CRefManager_Type
  predicate are_implied_by [#"../NewDB/src/lib.rs" 149 4 149 101] (self : NewDb_CRefManager_Type.t_crefmanager) (original_clauses : NewDb_CRefManager_Type.t_crefmanager) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator)
    
end
module NewDb_Impl4_AreImpliedBy_Interface
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  use NewDb_CRefManager_Type as NewDb_CRefManager_Type
  predicate are_implied_by [#"../NewDB/src/lib.rs" 149 4 149 101] (self : NewDb_CRefManager_Type.t_crefmanager) (original_clauses : NewDb_CRefManager_Type.t_crefmanager) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator)
    
end
module NewDb_Impl4_AreImpliedBy
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  use NewDb_CRefManager_Type as NewDb_CRefManager_Type
  clone NewDb_Impl4_Implies_Stub as Implies0
  clone NewDb_Impl3_ShallowModel_Stub as ShallowModel0
  predicate are_implied_by [#"../NewDB/src/lib.rs" 149 4 149 101] (self : NewDb_CRefManager_Type.t_crefmanager) (original_clauses : NewDb_CRefManager_Type.t_crefmanager) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator)
    
   =
    [#"../NewDB/src/lib.rs" 150 8 153 9] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Implies0.implies original_clauses (UInt32.to_int (Seq.get (ShallowModel0.shallow_model self) i)) clause_allocator
  val are_implied_by [#"../NewDB/src/lib.rs" 149 4 149 101] (self : NewDb_CRefManager_Type.t_crefmanager) (original_clauses : NewDb_CRefManager_Type.t_crefmanager) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator) : bool
    ensures { result = are_implied_by self original_clauses clause_allocator }
    
end
module NewDb_ClauseManager_Type
  use NewDb_CRefManager_Type as NewDb_CRefManager_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  type t_clausemanager  =
    | C_ClauseManager (NewDb_ClauseAllocator_Type.t_clauseallocator) (NewDb_CRefManager_Type.t_crefmanager) (NewDb_CRefManager_Type.t_crefmanager)
    
  let function clausemanager_clause_allocator (self : t_clausemanager) : NewDb_ClauseAllocator_Type.t_clauseallocator
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseManager a _ _ -> a
      end
  let function clausemanager_original_clauses (self : t_clausemanager) : NewDb_CRefManager_Type.t_crefmanager
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseManager _ a _ -> a
      end
  let function clausemanager_learnt_core (self : t_clausemanager) : NewDb_CRefManager_Type.t_crefmanager
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseManager _ _ a -> a
      end
end
module NewDb_Impl5_Invariant_Stub
  use NewDb_ClauseManager_Type as NewDb_ClauseManager_Type
  predicate invariant' [#"../NewDB/src/lib.rs" 173 4 173 30] (self : NewDb_ClauseManager_Type.t_clausemanager)
end
module NewDb_Impl5_Invariant_Interface
  use NewDb_ClauseManager_Type as NewDb_ClauseManager_Type
  predicate invariant' [#"../NewDB/src/lib.rs" 173 4 173 30] (self : NewDb_ClauseManager_Type.t_clausemanager)
end
module NewDb_Impl5_Invariant
  use NewDb_CRefManager_Type as NewDb_CRefManager_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl4_AreImpliedBy_Stub as AreImpliedBy0
  clone NewDb_Impl4_Invariant_Stub as Invariant1
  clone NewDb_Impl0_Invariant_Stub as Invariant0
  use NewDb_ClauseManager_Type as NewDb_ClauseManager_Type
  predicate invariant' [#"../NewDB/src/lib.rs" 173 4 173 30] (self : NewDb_ClauseManager_Type.t_clausemanager) =
    [#"../NewDB/src/lib.rs" 174 8 179 9] Invariant0.invariant' (NewDb_ClauseManager_Type.clausemanager_clause_allocator self) /\ Invariant1.invariant' (NewDb_ClauseManager_Type.clausemanager_original_clauses self) (NewDb_ClauseManager_Type.clausemanager_clause_allocator self) /\ Invariant1.invariant' (NewDb_ClauseManager_Type.clausemanager_learnt_core self) (NewDb_ClauseManager_Type.clausemanager_clause_allocator self) /\ AreImpliedBy0.are_implied_by (NewDb_ClauseManager_Type.clausemanager_learnt_core self) (NewDb_ClauseManager_Type.clausemanager_original_clauses self) (NewDb_ClauseManager_Type.clausemanager_clause_allocator self)
  val invariant' [#"../NewDB/src/lib.rs" 173 4 173 30] (self : NewDb_ClauseManager_Type.t_clausemanager) : bool
    ensures { result = invariant' self }
    
end
module NewDb_Formula_Type
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  type t_formula  =
    | C_Formula (Fset.fset (Fset.fset (NewDb_Lit_Lit_Type.t_lit)))
    
end
module NewDb_Impl6_FromInternal_Stub
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl1_ShallowModel_Stub as ShallowModel0
  clone NewDb_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_Impl0_Invariant_Stub as Invariant0
  function from_internal [#"../NewDB/src/lib.rs" 223 4 223 102] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator) (idx : int) : Fset.fset (Fset.fset (NewDb_Lit_Lit_Type.t_lit))
    
end
module NewDb_Impl6_FromInternal_Interface
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl1_ShallowModel_Stub as ShallowModel0
  clone NewDb_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_Impl0_Invariant_Stub as Invariant0
  function from_internal [#"../NewDB/src/lib.rs" 223 4 223 102] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator) (idx : int) : Fset.fset (Fset.fset (NewDb_Lit_Lit_Type.t_lit))
    
end
module NewDb_Impl6_FromInternal
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use set.Fset
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Fset.fset (NewDb_Lit_Lit_Type.t_lit)
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl0_GetClauseFset_Stub as GetClauseFset0
  clone NewDb_Impl1_ShallowModel_Stub as ShallowModel0
  clone NewDb_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_Impl0_Invariant_Stub as Invariant0
  function from_internal [#"../NewDB/src/lib.rs" 223 4 223 102] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator) (idx : int) : Fset.fset (Fset.fset (NewDb_Lit_Lit_Type.t_lit))
    
  val from_internal [#"../NewDB/src/lib.rs" 223 4 223 102] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator) (idx : int) : Fset.fset (Fset.fset (NewDb_Lit_Lit_Type.t_lit))
    requires {[#"../NewDB/src/lib.rs" 219 15 219 23] idx >= 0}
    requires {[#"../NewDB/src/lib.rs" 220 15 220 43] Invariant0.invariant' clause_allocator}
    requires {[#"../NewDB/src/lib.rs" 221 4 222 61] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (UInt32.to_int (Seq.get crefs i)) clause_allocator}
    ensures { result = from_internal crefs clause_allocator idx }
    
  axiom def : forall crefs : Seq.seq uint32, clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator, idx : int . from_internal crefs clause_allocator idx = ([#"../NewDB/src/lib.rs" 224 8 232 9] if idx < Seq.length (ShallowModel0.shallow_model clause_allocator) then
    let set = from_internal crefs clause_allocator (idx + 1) in let clause = GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs idx)) in Insert0.insert set clause
  else
    Fset.empty 
  )
end
module NewDb_Impl6_FromInternal_Impl
  use prelude.Int
  use seq.Seq
  use prelude.UInt32
  use set.Fset
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert1 with
    type t = NewDb_Lit_Lit_Type.t_lit
  use set.Fset
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max1
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = NewDb_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone NewDb_Impl1_ShallowModel as ShallowModel0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone NewDb_Impl0_GetClauseFsetInternal as GetClauseFsetInternal0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function Insert0.insert = Insert1.insert,
    axiom .
  clone NewDb_HeaderLen as HeaderLen0
  clone Core_U32_Max as Max0
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = Fset.fset (NewDb_Lit_Lit_Type.t_lit)
  clone NewDb_Impl0_GetClauseFset as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function GetClauseFsetInternal0.get_clause_fset_internal = GetClauseFsetInternal0.get_clause_fset_internal
  clone NewDb_CrefInvariant as CrefInvariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN'
  clone NewDb_Impl0_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec ghost function from_internal [#"../NewDB/src/lib.rs" 223 4 223 102] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator) (idx : int) : Fset.fset (Fset.fset (NewDb_Lit_Lit_Type.t_lit))
    requires {[#"../NewDB/src/lib.rs" 219 15 219 23] idx >= 0}
    requires {[#"../NewDB/src/lib.rs" 220 15 220 43] Invariant0.invariant' clause_allocator}
    requires {[#"../NewDB/src/lib.rs" 221 4 222 61] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (UInt32.to_int (Seq.get crefs i)) clause_allocator}
    variant {[#"../NewDB/src/lib.rs" 218 14 218 45] Seq.length (ShallowModel0.shallow_model clause_allocator) - idx}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../NewDB/src/lib.rs" 224 8 232 9] if idx < (let a' = ShallowModel0.shallow_model clause_allocator in Seq.length a') then
      let set = from_internal crefs clause_allocator (idx + 1) in let clause = GetClauseFset0.get_clause_fset clause_allocator (UInt32.to_int (Seq.get crefs idx)) in Insert0.insert set clause
    else
      Fset.empty 
    
end
module NewDb_Impl6_From_Stub
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  use NewDb_Formula_Type as NewDb_Formula_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  function from [#"../NewDB/src/lib.rs" 211 4 211 75] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator) : NewDb_Formula_Type.t_formula
    
end
module NewDb_Impl6_From_Interface
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  use NewDb_Formula_Type as NewDb_Formula_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  function from [#"../NewDB/src/lib.rs" 211 4 211 75] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator) : NewDb_Formula_Type.t_formula
    
end
module NewDb_Impl6_From
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  clone NewDb_Impl1_ShallowModel_Stub as ShallowModel0
  clone NewDb_CrefInvariant_Stub as CrefInvariant0
  clone NewDb_Impl0_Invariant_Stub as Invariant0
  clone NewDb_Impl6_FromInternal_Stub as FromInternal0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    axiom .
  use NewDb_Formula_Type as NewDb_Formula_Type
  function from [#"../NewDB/src/lib.rs" 211 4 211 75] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator) : NewDb_Formula_Type.t_formula
    
   =
    [#"../NewDB/src/lib.rs" 212 8 214 9] NewDb_Formula_Type.C_Formula (FromInternal0.from_internal crefs clause_allocator 0)
  val from [#"../NewDB/src/lib.rs" 211 4 211 75] (crefs : Seq.seq uint32) (clause_allocator : NewDb_ClauseAllocator_Type.t_clauseallocator) : NewDb_Formula_Type.t_formula
    ensures { result = from crefs clause_allocator }
    
end
module NewDb_Lit_Impl3
  
end
module NewDb_Lit_Impl4
  use prelude.Borrow
  use NewDb_Lit_Lit_Type as NewDb_Lit_Lit_Type
  goal clone'_refn : [#"../NewDB/src/lit.rs" 10 15 10 20] forall self : NewDb_Lit_Lit_Type.t_lit . forall result : NewDb_Lit_Lit_Type.t_lit . result = self -> result = self
end
module NewDb_Assignments_Impl2
  use prelude.Borrow
  use NewDb_Assignments_Assignments_Type as NewDb_Assignments_Assignments_Type
  goal clone'_refn : [#"../NewDB/src/assignments.rs" 10 9 10 14] forall self : NewDb_Assignments_Assignments_Type.t_assignments . forall result : NewDb_Assignments_Assignments_Type.t_assignments . result = self -> result = self
end
module NewDb_Friday_Impl7
  use prelude.Borrow
  use NewDb_Friday_Pasn_Type as NewDb_Friday_Pasn_Type
  goal clone'_refn : [#"../NewDB/src/friday.rs" 10 9 10 14] forall self : NewDb_Friday_Pasn_Type.t_pasn . forall result : NewDb_Friday_Pasn_Type.t_pasn . result = self -> result = self
end
module NewDb_Impl7
  use prelude.Borrow
  use NewDb_ClauseAllocator_Type as NewDb_ClauseAllocator_Type
  goal clone'_refn : [#"../NewDB/src/lib.rs" 32 9 32 14] forall self : NewDb_ClauseAllocator_Type.t_clauseallocator . forall result : NewDb_ClauseAllocator_Type.t_clauseallocator . result = self -> result = self
end
module NewDb_Assignments_Impl0
  
end
module NewDb_Impl1
  
end
module NewDb_Impl3
  
end
