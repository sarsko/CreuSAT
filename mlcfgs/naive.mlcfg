module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type creusotcontracts_std1_vec_vec 't  
  type naive_lit  = 
    | Naive_Lit usize bool
    
  function naive_lit_Lit_var (self : naive_lit) : usize
  val naive_lit_Lit_var (self : naive_lit) : usize
    ensures { result = naive_lit_Lit_var self }
    
  axiom naive_lit_Lit_var_acc : forall a : usize, b : bool . naive_lit_Lit_var (Naive_Lit a b : naive_lit) = a
  function naive_lit_Lit_value (self : naive_lit) : bool
  val naive_lit_Lit_value (self : naive_lit) : bool
    ensures { result = naive_lit_Lit_value self }
    
  axiom naive_lit_Lit_value_acc : forall a : usize, b : bool . naive_lit_Lit_value (Naive_Lit a b : naive_lit) = b
  type naive_clause  = 
    | Naive_Clause (creusotcontracts_std1_vec_vec (naive_lit))
    
  function naive_clause_Clause_0 (self : naive_clause) : creusotcontracts_std1_vec_vec (naive_lit)
  val naive_clause_Clause_0 (self : naive_clause) : creusotcontracts_std1_vec_vec (naive_lit)
    ensures { result = naive_clause_Clause_0 self }
    
  axiom naive_clause_Clause_0_acc : forall a : creusotcontracts_std1_vec_vec (naive_lit) . naive_clause_Clause_0 (Naive_Clause a : naive_clause) = a
  type naive_assignment  = 
    | Naive_Assignment (creusotcontracts_std1_vec_vec bool)
    
  function naive_assignment_Assignment_0 (self : naive_assignment) : creusotcontracts_std1_vec_vec bool
  val naive_assignment_Assignment_0 (self : naive_assignment) : creusotcontracts_std1_vec_vec bool
    ensures { result = naive_assignment_Assignment_0 self }
    
  axiom naive_assignment_Assignment_0_acc : forall a : creusotcontracts_std1_vec_vec bool . naive_assignment_Assignment_0 (Naive_Assignment a : naive_assignment) = a
  type naive_pasn  = 
    | Naive_Pasn (creusotcontracts_std1_vec_vec bool) usize
    
  function naive_pasn_Pasn_assign (self : naive_pasn) : creusotcontracts_std1_vec_vec bool
  val naive_pasn_Pasn_assign (self : naive_pasn) : creusotcontracts_std1_vec_vec bool
    ensures { result = naive_pasn_Pasn_assign self }
    
  axiom naive_pasn_Pasn_assign_acc : forall a : creusotcontracts_std1_vec_vec bool, b : usize . naive_pasn_Pasn_assign (Naive_Pasn a b : naive_pasn) = a
  function naive_pasn_Pasn_ix (self : naive_pasn) : usize
  val naive_pasn_Pasn_ix (self : naive_pasn) : usize
    ensures { result = naive_pasn_Pasn_ix self }
    
  axiom naive_pasn_Pasn_ix_acc : forall a : creusotcontracts_std1_vec_vec bool, b : usize . naive_pasn_Pasn_ix (Naive_Pasn a b : naive_pasn) = b
  type naive_formula  = 
    | Naive_Formula (creusotcontracts_std1_vec_vec (naive_clause)) usize
    
  function naive_formula_Formula_clauses (self : naive_formula) : creusotcontracts_std1_vec_vec (naive_clause)
  val naive_formula_Formula_clauses (self : naive_formula) : creusotcontracts_std1_vec_vec (naive_clause)
    ensures { result = naive_formula_Formula_clauses self }
    
  axiom naive_formula_Formula_clauses_acc : forall a : creusotcontracts_std1_vec_vec (naive_clause), b : usize . naive_formula_Formula_clauses (Naive_Formula a b : naive_formula) = a
  function naive_formula_Formula_num_vars (self : naive_formula) : usize
  val naive_formula_Formula_num_vars (self : naive_formula) : usize
    ensures { result = naive_formula_Formula_num_vars self }
    
  axiom naive_formula_Formula_num_vars_acc : forall a : creusotcontracts_std1_vec_vec (naive_clause), b : usize . naive_formula_Formula_num_vars (Naive_Formula a b : naive_formula) = b
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module Naive_Impl3_VarsInRange_Interface
  use Type
  use mach.int.Int
  predicate vars_in_range (self : Type.naive_lit) (n : int)
end
module Naive_Impl3_VarsInRange
  use Type
  use mach.int.Int
  use mach.int.UInt64
  predicate vars_in_range (self : Type.naive_lit) (n : int) = 
    UInt64.to_int (Type.naive_lit_Lit_var self) < n
end
module Naive_Impl0_VarsInRange_Interface
  use Type
  use mach.int.Int
  predicate vars_in_range (self : Type.naive_clause) (n : int)
end
module Naive_Impl0_VarsInRange
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Naive_Impl3_VarsInRange_Interface as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.naive_lit
  predicate vars_in_range (self : Type.naive_clause) (n : int) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.naive_clause_Clause_0 self)) -> VarsInRange0.vars_in_range (Seq.get (Model0.model (Type.naive_clause_Clause_0 self)) i) n
end
module Naive_Impl1_Compatible_Interface
  use Type
  predicate compatible (self : Type.naive_assignment) (pa : Type.naive_pasn)
end
module Naive_Impl1_Compatible
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool
  predicate compatible (self : Type.naive_assignment) (pa : Type.naive_pasn) = 
    Seq.length (Model0.model (Type.naive_pasn_Pasn_assign pa)) = Seq.length (Model0.model (Type.naive_assignment_Assignment_0 self)) && (forall i : (int) . 0 <= i && i < UInt64.to_int (Type.naive_pasn_Pasn_ix pa) -> Seq.get (Model0.model (Type.naive_pasn_Pasn_assign pa)) i = Seq.get (Model0.model (Type.naive_assignment_Assignment_0 self)) i)
end
module Naive_Impl2_Invariant_Interface
  use Type
  predicate invariant' (self : Type.naive_formula)
end
module Naive_Impl2_Invariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Naive_Impl0_VarsInRange_Interface as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.naive_clause
  predicate invariant' (self : Type.naive_formula) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.naive_formula_Formula_clauses self)) -> VarsInRange0.vars_in_range (Seq.get (Model0.model (Type.naive_formula_Formula_clauses self)) i) (UInt64.to_int (Type.naive_formula_Formula_num_vars self))
end
module Naive_Impl3_Sat_Interface
  use Type
  predicate sat (self : Type.naive_lit) (a : Type.naive_assignment)
end
module Naive_Impl3_Sat
  use Type
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool
  predicate sat (self : Type.naive_lit) (a : Type.naive_assignment) = 
    Seq.get (Model0.model (Type.naive_assignment_Assignment_0 a)) (UInt64.to_int (Type.naive_lit_Lit_var self)) = Type.naive_lit_Lit_value self
end
module Naive_Impl5_Sat_Interface
  use Type
  predicate sat (self : Type.naive_clause) (a : Type.naive_assignment)
end
module Naive_Impl5_Sat
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Naive_Impl3_Sat_Interface as Sat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.naive_lit
  predicate sat (self : Type.naive_clause) (a : Type.naive_assignment) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.naive_clause_Clause_0 self)) && Sat0.sat (Seq.get (Model0.model (Type.naive_clause_Clause_0 self)) i) a
end
module Naive_Impl2_Sat_Interface
  use Type
  predicate sat (self : Type.naive_formula) (a : Type.naive_assignment)
end
module Naive_Impl2_Sat
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Naive_Impl5_Sat_Interface as Sat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.naive_clause
  predicate sat (self : Type.naive_formula) (a : Type.naive_assignment) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.naive_formula_Formula_clauses self)) -> Sat0.sat (Seq.get (Model0.model (Type.naive_formula_Formula_clauses self)) i) a
end
module Naive_Impl4_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.naive_pasn) (n : int)
end
module Naive_Impl4_Invariant
  use Type
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool
  predicate invariant' (self : Type.naive_pasn) (n : int) = 
    UInt64.to_int (Type.naive_pasn_Pasn_ix self) <= Seq.length (Model0.model (Type.naive_pasn_Pasn_assign self)) && Seq.length (Model0.model (Type.naive_pasn_Pasn_assign self)) = n
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl1_New_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val new [@cfg:stackify] () : Type.creusotcontracts_std1_vec_vec t
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Std1_Vec_Impl1_New
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val new [@cfg:stackify] () : Type.creusotcontracts_std1_vec_vec t
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t   
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t   
  predicate resolve (self : t) = 
    true
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Std1_Vec_Impl1_Push_Interface
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val push [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (v : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model1.model self) v }
    
end
module CreusotContracts_Std1_Vec_Impl1_Push
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val push [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (v : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model1.model self) v }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl5_Resolve_Interface
  type t   
  use Type
  predicate resolve (self : Type.creusotcontracts_std1_vec_vec t)
end
module CreusotContracts_Std1_Vec_Impl5_Resolve
  type t   
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  predicate resolve (self : Type.creusotcontracts_std1_vec_vec t) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Logic_Resolve_Impl2
  type t   
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module CreusotContracts_Std1_Vec_Impl5
  type t   
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl5_Resolve as Resolve0 with type t = t, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_std1_vec_vec t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module Naive_Impl6_Clone_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool
  val clone' [@cfg:stackify] (self : Type.naive_pasn) : Type.naive_pasn
    ensures { Seq.length (Model0.model (Type.naive_pasn_Pasn_assign self)) = Seq.length (Model0.model (Type.naive_pasn_Pasn_assign result)) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.naive_pasn_Pasn_assign self)) -> Seq.get (Model0.model (Type.naive_pasn_Pasn_assign self)) i = Seq.get (Model0.model (Type.naive_pasn_Pasn_assign result)) i }
    
end
module Naive_Impl6_Clone
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = bool
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = Type.naive_pasn
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = ()
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = bool
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = bool
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = bool
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = usize
  clone CreusotContracts_Logic_Model_Impl1_Model as Model2 with type t = Type.creusotcontracts_std1_vec_vec bool,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Push_Interface as Push0 with type t = bool,
  function Model0.model = Model0.model, function Model1.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec bool,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = bool,
  function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = bool, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl5_Resolve as Resolve4 with type t = bool, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve1.resolve
  clone CreusotContracts_Std1_Vec_Impl1_New_Interface as New0 with type t = bool, function Model0.model = Model0.model
  let rec cfg clone' [@cfg:stackify] (self : Type.naive_pasn) : Type.naive_pasn
    ensures { Seq.length (Model0.model (Type.naive_pasn_Pasn_assign self)) = Seq.length (Model0.model (Type.naive_pasn_Pasn_assign result)) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.naive_pasn_Pasn_assign self)) -> Seq.get (Model0.model (Type.naive_pasn_Pasn_assign self)) i = Seq.get (Model0.model (Type.naive_pasn_Pasn_assign result)) i }
    
   = 
  var _0 : Type.naive_pasn;
  var self_1 : Type.naive_pasn;
  var new_assign_2 : Type.creusotcontracts_std1_vec_vec bool;
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : Type.creusotcontracts_std1_vec_vec bool;
  var _10 : ();
  var _11 : borrowed (Type.creusotcontracts_std1_vec_vec bool);
  var _12 : bool;
  var _13 : bool;
  var _14 : Type.creusotcontracts_std1_vec_vec bool;
  var _15 : usize;
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var _20 : Type.creusotcontracts_std1_vec_vec bool;
  var _21 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    new_assign_2 <- New0.new ();
    goto BB1
  }
  BB1 {
    i_3 <- (0 : usize);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant loop_invariant { UInt64.to_int i_3 <= Seq.length (Model0.model (Type.naive_pasn_Pasn_assign self_1)) };
    invariant len_invariant { Seq.length (Model0.model new_assign_2) = UInt64.to_int i_3 };
    invariant is_clone { forall j : (int) . 0 <= j && j < UInt64.to_int i_3 -> Seq.get (Model0.model new_assign_2) j = Seq.get (Model0.model (Type.naive_pasn_Pasn_assign self_1)) j };
    assume { Resolve0.resolve _7 };
    _7 <- i_3;
    _9 <- Type.naive_pasn_Pasn_assign self_1;
    _8 <- Len0.len _9;
    goto BB5
  }
  BB5 {
    _6 <- _7 < _8;
    switch (_6)
      | False -> goto BB10
      | _ -> goto BB6
      end
  }
  BB6 {
    _11 <- borrow_mut new_assign_2;
    new_assign_2 <-  ^ _11;
    _14 <- Type.naive_pasn_Pasn_assign self_1;
    assume { Resolve0.resolve _15 };
    _15 <- i_3;
    _13 <- Index0.index _14 _15;
    goto BB7
  }
  BB7 {
    assume { Resolve1.resolve _12 };
    _12 <- _13;
    assume { Resolve2.resolve _13 };
    _10 <- Push0.push _11 _12;
    goto BB8
  }
  BB8 {
    assert { Seq.length (Model0.model new_assign_2) = UInt64.to_int i_3 };
    goto BB9
  }
  BB9 {
    _16 <- ();
    assume { Resolve3.resolve _16 };
    _5 <- ();
    assume { Resolve3.resolve _5 };
    goto BB4
  }
  BB10 {
    assume { Resolve0.resolve i_3 };
    _4 <- ();
    assume { Resolve3.resolve _4 };
    assume { Resolve4.resolve _20 };
    _20 <- new_assign_2;
    assume { Resolve0.resolve _21 };
    _21 <- Type.naive_pasn_Pasn_ix self_1;
    assume { Resolve5.resolve self_1 };
    _0 <- Type.Naive_Pasn _20 _21;
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Naive_InterpClause_Interface
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Naive_Impl5_Sat_Interface as Sat0
  clone Naive_Impl0_VarsInRange_Interface as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool
  val interp_clause [@cfg:stackify] (a : Type.naive_assignment) (c : Type.naive_clause) : bool
    requires {VarsInRange0.vars_in_range c (Seq.length (Model0.model (Type.naive_assignment_Assignment_0 a)))}
    ensures { result = Sat0.sat c a }
    
end
module Naive_InterpClause
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Naive_Impl3_VarsInRange as VarsInRange1
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = bool
  clone Naive_Impl3_Sat as Sat0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.naive_lit
  clone Naive_Impl5_Sat as Sat1 with function Model0.model = Model0.model, predicate Sat0.sat = Sat0.sat
  clone Naive_Impl0_VarsInRange as VarsInRange0 with function Model0.model = Model0.model,
  predicate VarsInRange0.vars_in_range = VarsInRange1.vars_in_range
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve6 with type t = ()
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = Type.naive_clause
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = Type.naive_assignment
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = bool
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = bool
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = bool
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = Type.naive_lit
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.naive_lit
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec bool,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = bool,
  function Model0.model = Model3.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.creusotcontracts_std1_vec_vec (Type.naive_lit),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.naive_lit,
  function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.naive_lit,
  function Model0.model = Model2.model
  let rec cfg interp_clause [@cfg:stackify] (a : Type.naive_assignment) (c : Type.naive_clause) : bool
    requires {VarsInRange0.vars_in_range c (Seq.length (Model1.model (Type.naive_assignment_Assignment_0 a)))}
    ensures { result = Sat1.sat c a }
    
   = 
  var _0 : bool;
  var a_1 : Type.naive_assignment;
  var c_2 : Type.naive_clause;
  var i_3 : usize;
  var clause_len_4 : usize;
  var _5 : Type.creusotcontracts_std1_vec_vec (Type.naive_lit);
  var _6 : ();
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var l_11 : bool;
  var _12 : bool;
  var _13 : Type.creusotcontracts_std1_vec_vec bool;
  var _14 : usize;
  var _15 : Type.naive_lit;
  var _16 : Type.creusotcontracts_std1_vec_vec (Type.naive_lit);
  var _17 : usize;
  var r_18 : bool;
  var _19 : Type.naive_lit;
  var _20 : Type.creusotcontracts_std1_vec_vec (Type.naive_lit);
  var _21 : usize;
  var _22 : ();
  var _23 : bool;
  var _24 : bool;
  var _25 : bool;
  var _26 : ();
  var _27 : ();
  var _28 : ();
  var _29 : ();
  {
    a_1 <- a;
    c_2 <- c;
    goto BB0
  }
  BB0 {
    i_3 <- (0 : usize);
    _5 <- Type.naive_clause_Clause_0 c_2;
    clause_len_4 <- Len0.len _5;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant prev_not_sat { forall j : (int) . 0 <= j && j < UInt64.to_int i_3 -> not (Sat0.sat (Seq.get (Model0.model (Type.naive_clause_Clause_0 c_2)) j) a_1) };
    invariant loop_invariant { UInt64.to_int i_3 <= UInt64.to_int clause_len_4 };
    assume { Resolve0.resolve _9 };
    _9 <- i_3;
    assume { Resolve0.resolve _10 };
    _10 <- clause_len_4;
    _8 <- _9 < _10;
    switch (_8)
      | False -> goto BB9
      | _ -> goto BB3
      end
  }
  BB3 {
    _13 <- Type.naive_assignment_Assignment_0 a_1;
    _16 <- Type.naive_clause_Clause_0 c_2;
    assume { Resolve0.resolve _17 };
    _17 <- i_3;
    _15 <- Index0.index _16 _17;
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve _14 };
    _14 <- Type.naive_lit_Lit_var _15;
    assume { Resolve1.resolve _15 };
    _12 <- Index1.index _13 _14;
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve l_11 };
    l_11 <- _12;
    assume { Resolve3.resolve _12 };
    _20 <- Type.naive_clause_Clause_0 c_2;
    assume { Resolve0.resolve _21 };
    _21 <- i_3;
    _19 <- Index0.index _20 _21;
    goto BB6
  }
  BB6 {
    assume { Resolve2.resolve r_18 };
    r_18 <- Type.naive_lit_Lit_value _19;
    assume { Resolve1.resolve _19 };
    assume { Resolve2.resolve _24 };
    _24 <- l_11;
    assume { Resolve2.resolve l_11 };
    assume { Resolve2.resolve _25 };
    _25 <- r_18;
    assume { Resolve2.resolve r_18 };
    _23 <- Prelude.eqb _24 _25;
    switch (_23)
      | False -> goto BB8
      | _ -> goto BB7
      end
  }
  BB7 {
    assume { Resolve4.resolve a_1 };
    assume { Resolve5.resolve c_2 };
    assume { Resolve0.resolve i_3 };
    assume { Resolve0.resolve clause_len_4 };
    _0 <- true;
    goto BB10
  }
  BB8 {
    _22 <- ();
    assume { Resolve6.resolve _22 };
    i_3 <- i_3 + (1 : usize);
    _7 <- ();
    assume { Resolve6.resolve _7 };
    goto BB2
  }
  BB9 {
    assume { Resolve4.resolve a_1 };
    assume { Resolve5.resolve c_2 };
    assume { Resolve0.resolve i_3 };
    assume { Resolve0.resolve clause_len_4 };
    _6 <- ();
    assume { Resolve6.resolve _6 };
    _0 <- false;
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module Naive_InterpFormula_Interface
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone Naive_Impl2_Sat_Interface as Sat0
  clone Naive_Impl2_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool
  val interp_formula [@cfg:stackify] (a : Type.naive_assignment) (f : Type.naive_formula) : bool
    requires {Seq.length (Model0.model (Type.naive_assignment_Assignment_0 a)) = UInt64.to_int (Type.naive_formula_Formula_num_vars f)}
    requires {Invariant0.invariant' f}
    ensures { result = Sat0.sat f a }
    
end
module Naive_InterpFormula
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Naive_Impl3_VarsInRange as VarsInRange1
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = bool
  clone Naive_Impl3_Sat as Sat2 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.naive_lit
  clone Naive_Impl0_VarsInRange as VarsInRange0 with function Model0.model = Model2.model,
  predicate VarsInRange0.vars_in_range = VarsInRange1.vars_in_range
  clone Naive_Impl5_Sat as Sat0 with function Model0.model = Model2.model, predicate Sat0.sat = Sat2.sat
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.naive_clause
  clone Naive_Impl2_Sat as Sat1 with function Model0.model = Model0.model, predicate Sat0.sat = Sat0.sat
  clone Naive_Impl2_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = ()
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = Type.naive_formula
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = Type.naive_assignment
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = Type.naive_clause
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.naive_clause
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = usize
  clone Naive_InterpClause_Interface as InterpClause0 with function Model0.model = Model1.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range, predicate Sat0.sat = Sat0.sat
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec (Type.naive_clause),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.naive_clause,
  function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.naive_clause,
  function Model0.model = Model3.model
  let rec cfg interp_formula [@cfg:stackify] (a : Type.naive_assignment) (f : Type.naive_formula) : bool
    requires {Seq.length (Model1.model (Type.naive_assignment_Assignment_0 a)) = UInt64.to_int (Type.naive_formula_Formula_num_vars f)}
    requires {Invariant0.invariant' f}
    ensures { result = Sat1.sat f a }
    
   = 
  var _0 : bool;
  var a_1 : Type.naive_assignment;
  var f_2 : Type.naive_formula;
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : Type.creusotcontracts_std1_vec_vec (Type.naive_clause);
  var _10 : ();
  var _11 : bool;
  var _12 : bool;
  var _13 : Type.naive_assignment;
  var _14 : Type.naive_clause;
  var _15 : Type.naive_clause;
  var _16 : Type.naive_clause;
  var _17 : Type.creusotcontracts_std1_vec_vec (Type.naive_clause);
  var _18 : usize;
  var _19 : ();
  var _20 : ();
  var _21 : ();
  var _22 : ();
  {
    a_1 <- a;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    i_3 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant prev_sat { forall j : (int) . 0 <= j && j < UInt64.to_int i_3 -> Sat0.sat (Seq.get (Model0.model (Type.naive_formula_Formula_clauses f_2)) j) a_1 };
    invariant loop_invariant { UInt64.to_int i_3 <= Seq.length (Model0.model (Type.naive_formula_Formula_clauses f_2)) };
    assume { Resolve0.resolve _7 };
    _7 <- i_3;
    _9 <- Type.naive_formula_Formula_clauses f_2;
    _8 <- Len0.len _9;
    goto BB2
  }
  BB2 {
    _6 <- _7 < _8;
    switch (_6)
      | False -> goto BB8
      | _ -> goto BB3
      end
  }
  BB3 {
    _13 <- a_1;
    _17 <- Type.naive_formula_Formula_clauses f_2;
    assume { Resolve0.resolve _18 };
    _18 <- i_3;
    _16 <- Index0.index _17 _18;
    goto BB4
  }
  BB4 {
    _15 <- _16;
    assume { Resolve1.resolve _16 };
    _14 <- _15;
    assume { Resolve1.resolve _15 };
    _12 <- InterpClause0.interp_clause _13 _14;
    goto BB5
  }
  BB5 {
    _11 <- not _12;
    switch (_11)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve2.resolve a_1 };
    assume { Resolve3.resolve f_2 };
    assume { Resolve0.resolve i_3 };
    _0 <- false;
    goto BB9
  }
  BB7 {
    _10 <- ();
    assume { Resolve4.resolve _10 };
    i_3 <- i_3 + (1 : usize);
    _5 <- ();
    assume { Resolve4.resolve _5 };
    goto BB1
  }
  BB8 {
    assume { Resolve2.resolve a_1 };
    assume { Resolve3.resolve f_2 };
    assume { Resolve0.resolve i_3 };
    _4 <- ();
    assume { Resolve4.resolve _4 };
    _0 <- true;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module CreusotContracts_Std1_Clone_Clone_Clone_Interface
  type self   
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module CreusotContracts_Std1_Clone_Clone_Clone
  type self   
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module Naive_Impl6
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = bool
  clone Naive_Impl6_Clone_Interface as Clone0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Clone_Clone_Clone_Interface as Clone1 with type self = Type.naive_pasn,
  val clone' = Clone0.clone'
end
module CreusotContracts_Std1_Vec_Impl2
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = t,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module Naive_Set_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone Naive_Impl1_Compatible_Interface as Compatible0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool
  val set [@cfg:stackify] (pa : Type.naive_pasn) (b : bool) : Type.naive_pasn
    requires {Seq.length (Model0.model (Type.naive_pasn_Pasn_assign pa)) <= 18446744073709551615}
    requires {UInt64.to_int (Type.naive_pasn_Pasn_ix pa) < Seq.length (Model0.model (Type.naive_pasn_Pasn_assign pa))}
    ensures { UInt64.to_int (Type.naive_pasn_Pasn_ix result) = UInt64.to_int (Type.naive_pasn_Pasn_ix pa) + 1 }
    ensures { Seq.get (Model0.model (Type.naive_pasn_Pasn_assign result)) (UInt64.to_int (Type.naive_pasn_Pasn_ix pa)) = b }
    ensures { Compatible0.compatible (Type.Naive_Assignment (Type.naive_pasn_Pasn_assign result)) pa }
    
end
module Naive_Set
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = bool
  clone Naive_Impl1_Compatible as Compatible0 with function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = Type.naive_pasn
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = bool
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = bool
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = Type.naive_pasn
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = bool
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec bool,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = bool,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Naive_Impl6_Clone_Interface as Clone0 with function Model0.model = Model0.model
  let rec cfg set [@cfg:stackify] (pa : Type.naive_pasn) (b : bool) : Type.naive_pasn
    requires {Seq.length (Model0.model (Type.naive_pasn_Pasn_assign pa)) <= 18446744073709551615}
    requires {UInt64.to_int (Type.naive_pasn_Pasn_ix pa) < Seq.length (Model0.model (Type.naive_pasn_Pasn_assign pa))}
    ensures { UInt64.to_int (Type.naive_pasn_Pasn_ix result) = UInt64.to_int (Type.naive_pasn_Pasn_ix pa) + 1 }
    ensures { Seq.get (Model0.model (Type.naive_pasn_Pasn_assign result)) (UInt64.to_int (Type.naive_pasn_Pasn_ix pa)) = b }
    ensures { Compatible0.compatible (Type.Naive_Assignment (Type.naive_pasn_Pasn_assign result)) pa }
    
   = 
  var _0 : Type.naive_pasn;
  var pa_1 : Type.naive_pasn;
  var b_2 : bool;
  var new_pa_3 : Type.naive_pasn;
  var _4 : Type.naive_pasn;
  var _5 : bool;
  var _6 : borrowed bool;
  var _7 : borrowed (Type.creusotcontracts_std1_vec_vec bool);
  var _8 : usize;
  {
    pa_1 <- pa;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _4 <- pa_1;
    new_pa_3 <- Clone0.clone' _4;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _5 };
    _5 <- b_2;
    assume { Resolve0.resolve b_2 };
    _7 <- borrow_mut (Type.naive_pasn_Pasn_assign new_pa_3);
    new_pa_3 <- (let Type.Naive_Pasn a b = new_pa_3 in Type.Naive_Pasn ( ^ _7) b);
    assume { Resolve1.resolve _8 };
    _8 <- Type.naive_pasn_Pasn_ix pa_1;
    assume { Resolve2.resolve pa_1 };
    _6 <- IndexMut0.index_mut _7 _8;
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve ( * _6) };
    _6 <- { _6 with current = _5 };
    assume { Resolve3.resolve _6 };
    new_pa_3 <- (let Type.Naive_Pasn a b = new_pa_3 in Type.Naive_Pasn a (Type.naive_pasn_Pasn_ix new_pa_3 + (1 : usize)));
    assume { Resolve4.resolve _0 };
    _0 <- new_pa_3;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Naive_Inner_Interface
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  clone Naive_Impl2_Sat_Interface as Sat0
  clone Naive_Impl1_Compatible_Interface as Compatible0
  clone Naive_Impl4_Invariant_Interface as Invariant1
  clone Naive_Impl2_Invariant_Interface as Invariant0
  val inner [@cfg:stackify] (f : Type.naive_formula) (pa : Type.naive_pasn) : bool
    requires {Invariant0.invariant' f}
    requires {Invariant1.invariant' pa (UInt64.to_int (Type.naive_formula_Formula_num_vars f))}
    ensures { not result = (forall a : (Type.naive_assignment) . Compatible0.compatible a pa -> not (Sat0.sat f a)) }
    
end
module Naive_Inner
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  clone Naive_Impl3_VarsInRange as VarsInRange1
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.naive_lit
  clone Naive_Impl0_VarsInRange as VarsInRange0 with function Model0.model = Model2.model,
  predicate VarsInRange0.vars_in_range = VarsInRange1.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = bool
  clone Naive_Impl3_Sat as Sat2 with function Model0.model = Model1.model
  clone Naive_Impl5_Sat as Sat1 with function Model0.model = Model2.model, predicate Sat0.sat = Sat2.sat
  clone Naive_Impl1_Compatible as Compatible0 with function Model0.model = Model1.model
  clone Naive_Impl4_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.naive_clause
  clone Naive_Impl2_Sat as Sat0 with function Model0.model = Model0.model, predicate Sat0.sat = Sat1.sat
  clone Naive_Impl2_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  use mach.int.Int
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve6 with type t = Type.naive_pasn
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = Type.naive_pasn
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = Type.naive_assignment
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = Type.naive_formula
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = Type.naive_assignment
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve7 with type t = bool
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = bool
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = usize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec bool,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = bool, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl5_Resolve as Resolve1 with type t = bool, function Model0.model = Model1.model,
  predicate Resolve0.resolve = Resolve7.resolve
  clone Naive_Set_Interface as Set0 with function Model0.model = Model1.model,
  predicate Compatible0.compatible = Compatible0.compatible
  clone Naive_InterpFormula_Interface as InterpFormula0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Sat0.sat = Sat0.sat
  let rec cfg inner [@cfg:stackify] (f : Type.naive_formula) (pa : Type.naive_pasn) : bool
    requires {Invariant0.invariant' f}
    requires {Invariant1.invariant' pa (UInt64.to_int (Type.naive_formula_Formula_num_vars f))}
    ensures { not result = (forall a : (Type.naive_assignment) . Compatible0.compatible a pa -> not (Sat0.sat f a)) }
    variant {UInt64.to_int (Type.naive_formula_Formula_num_vars f) - UInt64.to_int (Type.naive_pasn_Pasn_ix pa)}
    
   = 
  var _0 : bool;
  var f_1 : Type.naive_formula;
  var pa_2 : Type.naive_pasn;
  var _3 : bool;
  var _4 : usize;
  var _5 : usize;
  var _6 : Type.creusotcontracts_std1_vec_vec bool;
  var _7 : ();
  var _8 : Type.naive_assignment;
  var _9 : Type.naive_assignment;
  var _10 : Type.naive_assignment;
  var _11 : Type.creusotcontracts_std1_vec_vec bool;
  var _12 : Type.naive_formula;
  var _13 : ();
  var _14 : bool;
  var _15 : Type.naive_formula;
  var _16 : Type.naive_pasn;
  var _17 : Type.naive_pasn;
  var _18 : Type.naive_pasn;
  var _19 : bool;
  var _20 : Type.naive_formula;
  var _21 : Type.naive_pasn;
  var _22 : Type.naive_pasn;
  var _23 : Type.naive_pasn;
  {
    f_1 <- f;
    pa_2 <- pa;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _4 };
    _4 <- Type.naive_pasn_Pasn_ix pa_2;
    _6 <- Type.naive_pasn_Pasn_assign pa_2;
    _5 <- Len0.len _6;
    goto BB3
  }
  BB3 {
    _3 <- _4 = _5;
    switch (_3)
      | False -> goto BB7
      | _ -> goto BB4
      end
  }
  BB4 {
    assume { Resolve1.resolve _11 };
    _11 <- Type.naive_pasn_Pasn_assign pa_2;
    _10 <- Type.Naive_Assignment _11;
    goto BB5
  }
  BB5 {
    _9 <- _10;
    _8 <- _9;
    assume { Resolve2.resolve _9 };
    _12 <- f_1;
    assume { Resolve3.resolve f_1 };
    _0 <- InterpFormula0.interp_formula _8 _12;
    goto BB6
  }
  BB6 {
    goto BB15
  }
  BB7 {
    _15 <- f_1;
    _18 <- pa_2;
    _17 <- _18;
    assume { Resolve6.resolve _18 };
    _16 <- Set0.set _17 true;
    goto BB11
  }
  BB8 {
    assume { Resolve3.resolve f_1 };
    _0 <- true;
    goto BB10
  }
  BB9 {
    _20 <- f_1;
    assume { Resolve3.resolve f_1 };
    _23 <- pa_2;
    _22 <- _23;
    assume { Resolve6.resolve _23 };
    _21 <- Set0.set _22 false;
    goto BB13
  }
  BB10 {
    goto BB16
  }
  BB11 {
    _14 <- inner _15 _16;
    goto BB12
  }
  BB12 {
    switch (_14)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB13 {
    _19 <- inner _20 _21;
    goto BB14
  }
  BB14 {
    assume { Resolve7.resolve _0 };
    _0 <- _19;
    goto BB10
  }
  BB15 {
    assume { Resolve4.resolve _10 };
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    assume { Resolve5.resolve pa_2 };
    return _0
  }
  
end
module Naive_Solver_Interface
  use Type
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool
  clone Naive_Impl2_Sat_Interface as Sat0
  clone Naive_Impl2_Invariant_Interface as Invariant0
  val solver [@cfg:stackify] (f : Type.naive_formula) : bool
    requires {Invariant0.invariant' f}
    ensures { result -> (exists a : (Type.naive_assignment) . Sat0.sat f a) }
    ensures { not result -> (forall a : (Type.naive_assignment) . Seq.length (Model0.model (Type.naive_assignment_Assignment_0 a)) = UInt64.to_int (Type.naive_formula_Formula_num_vars f) -> not (Sat0.sat f a)) }
    
end
module Naive_Solver
  use mach.int.UInt64
  use mach.int.Int
  use seq.Seq
  use Type
  use prelude.Prelude
  clone Naive_Impl3_VarsInRange as VarsInRange1
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.naive_lit
  clone Naive_Impl0_VarsInRange as VarsInRange0 with function Model0.model = Model2.model,
  predicate VarsInRange0.vars_in_range = VarsInRange1.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.naive_clause
  clone Naive_Impl2_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = bool
  clone Naive_Impl3_Sat as Sat2 with function Model0.model = Model0.model
  clone Naive_Impl5_Sat as Sat1 with function Model0.model = Model2.model, predicate Sat0.sat = Sat2.sat
  clone Naive_Impl2_Sat as Sat0 with function Model0.model = Model1.model, predicate Sat0.sat = Sat1.sat
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = Type.naive_pasn
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = bool
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = bool
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = ()
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = Type.naive_formula
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.naive_clause
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec (Type.naive_clause),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.naive_clause,
  function Model0.model = Model3.model
  clone Naive_Impl1_Compatible as Compatible0 with function Model0.model = Model0.model
  clone Naive_Impl4_Invariant as Invariant1 with function Model0.model = Model0.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model4 with type t = Type.creusotcontracts_std1_vec_vec bool,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Push_Interface as Push0 with type t = bool,
  function Model0.model = Model0.model, function Model1.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl5_Resolve as Resolve3 with type t = bool, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve5.resolve
  clone CreusotContracts_Std1_Vec_Impl1_New_Interface as New0 with type t = bool, function Model0.model = Model0.model
  clone Naive_Inner_Interface as Inner0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Compatible0.compatible = Compatible0.compatible,
  predicate Sat0.sat = Sat0.sat
  let rec cfg solver [@cfg:stackify] (f : Type.naive_formula) : bool
    requires {Invariant0.invariant' f}
    ensures { result -> (exists a : (Type.naive_assignment) . Sat0.sat f a) }
    ensures { not result -> (forall a : (Type.naive_assignment) . Seq.length (Model0.model (Type.naive_assignment_Assignment_0 a)) = UInt64.to_int (Type.naive_formula_Formula_num_vars f) -> not (Sat0.sat f a)) }
    
   = 
  var _0 : bool;
  var f_1 : Type.naive_formula;
  var _2 : ();
  var _3 : bool;
  var _4 : usize;
  var _5 : Type.creusotcontracts_std1_vec_vec (Type.naive_clause);
  var _6 : ();
  var assign_7 : Type.creusotcontracts_std1_vec_vec bool;
  var i_8 : usize;
  var _9 : ();
  var _10 : ();
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : ();
  var _15 : borrowed (Type.creusotcontracts_std1_vec_vec bool);
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var base_19 : Type.naive_pasn;
  var _20 : Type.creusotcontracts_std1_vec_vec bool;
  var _21 : Type.naive_formula;
  var _22 : Type.naive_pasn;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _5 <- Type.naive_formula_Formula_clauses f_1;
    _4 <- Len0.len _5;
    goto BB1
  }
  BB1 {
    _3 <- _4 = (0 : usize);
    switch (_3)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve f_1 };
    _0 <- true;
    goto BB14
  }
  BB3 {
    _2 <- ();
    assume { Resolve1.resolve _2 };
    assign_7 <- New0.new ();
    goto BB4
  }
  BB4 {
    i_8 <- (0 : usize);
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant loop_invariant { UInt64.to_int i_8 <= UInt64.to_int (Type.naive_formula_Formula_num_vars f_1) };
    invariant len_invariant { Seq.length (Model0.model assign_7) = UInt64.to_int i_8 };
    assume { Resolve2.resolve _12 };
    _12 <- i_8;
    assume { Resolve2.resolve _13 };
    _13 <- Type.naive_formula_Formula_num_vars f_1;
    _11 <- _12 < _13;
    switch (_11)
      | False -> goto BB9
      | _ -> goto BB7
      end
  }
  BB7 {
    _15 <- borrow_mut assign_7;
    assign_7 <-  ^ _15;
    _14 <- Push0.push _15 false;
    goto BB8
  }
  BB8 {
    i_8 <- i_8 + (1 : usize);
    _10 <- ();
    assume { Resolve1.resolve _10 };
    goto BB6
  }
  BB9 {
    assume { Resolve2.resolve i_8 };
    _9 <- ();
    assume { Resolve1.resolve _9 };
    assume { Resolve3.resolve _20 };
    _20 <- assign_7;
    base_19 <- Type.Naive_Pasn _20 (0 : usize);
    goto BB10
  }
  BB10 {
    _21 <- f_1;
    assume { Resolve0.resolve f_1 };
    assume { Resolve4.resolve _22 };
    _22 <- base_19;
    _0 <- Inner0.inner _21 _22;
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
