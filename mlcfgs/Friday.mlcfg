
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Friday_Assignments_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_assignments  =
    | C_Assignments (Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global))
    
  let function assignments_0 (self : t_assignments) : Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignments a -> a
      end
end
module Alloc_Vec_Impl14_Clone_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val clone' [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_Vec_Type.t_vec t a
    ensures { result = self }
    
end
module Alloc_Vec_Impl14_Clone
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val clone' [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_Vec_Type.t_vec t a
    ensures { result = self }
    
end
module Friday_Impl8_Clone_Interface
  use prelude.Borrow
  use Friday_Assignments_Type as Friday_Assignments_Type
  val clone' [@cfg:stackify] [#"../Friday/src/lib.rs" 13 9 13 14] (self : Friday_Assignments_Type.t_assignments) : Friday_Assignments_Type.t_assignments
    ensures { [#"../Friday/src/lib.rs" 13 9 13 14] result = self }
    
end
module Friday_Impl8_Clone
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Alloc_Vec_Impl14_Clone_Interface as Clone0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global
  use Friday_Assignments_Type as Friday_Assignments_Type
  let rec cfg clone' [@cfg:stackify] [#"../Friday/src/lib.rs" 13 9 13 14] (self : Friday_Assignments_Type.t_assignments) : Friday_Assignments_Type.t_assignments
    ensures { [#"../Friday/src/lib.rs" 13 9 13 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Friday_Assignments_Type.t_assignments;
  var self_1 : Friday_Assignments_Type.t_assignments;
  var _3 : Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global);
  var _4 : Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- Friday_Assignments_Type.assignments_0 self_1;
    _3 <- ([#"../Friday/src/lib.rs" 14 19 14 28] Clone0.clone' _4);
    goto BB1
  }
  BB1 {
    _0 <- Friday_Assignments_Type.C_Assignments _3;
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module Friday_Pasn_Type
  use mach.int.Int
  use prelude.UIntSize
  use Friday_Assignments_Type as Friday_Assignments_Type
  type t_pasn  =
    | C_Pasn (Friday_Assignments_Type.t_assignments) usize
    
  let function pasn_assign (self : t_pasn) : Friday_Assignments_Type.t_assignments = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Pasn a _ -> a
      end
  let function pasn_ix (self : t_pasn) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Pasn _ a -> a
      end
end
module Core_Clone_Impls_Impl5_Clone_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  val clone' [@cfg:stackify] (self : usize) : usize
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl5_Clone
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  val clone' [@cfg:stackify] (self : usize) : usize
    ensures { result = self }
    
end
module Friday_Impl9_Clone_Interface
  use prelude.Borrow
  use Friday_Pasn_Type as Friday_Pasn_Type
  val clone' [@cfg:stackify] [#"../Friday/src/lib.rs" 21 9 21 14] (self : Friday_Pasn_Type.t_pasn) : Friday_Pasn_Type.t_pasn
    ensures { [#"../Friday/src/lib.rs" 21 9 21 14] result = self }
    
end
module Friday_Impl9_Clone
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Clone_Impls_Impl5_Clone_Interface as Clone1
  use Friday_Assignments_Type as Friday_Assignments_Type
  clone Friday_Impl8_Clone_Interface as Clone0
  use Friday_Pasn_Type as Friday_Pasn_Type
  let rec cfg clone' [@cfg:stackify] [#"../Friday/src/lib.rs" 21 9 21 14] (self : Friday_Pasn_Type.t_pasn) : Friday_Pasn_Type.t_pasn
    ensures { [#"../Friday/src/lib.rs" 21 9 21 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Friday_Pasn_Type.t_pasn;
  var self_1 : Friday_Pasn_Type.t_pasn;
  var _3 : Friday_Assignments_Type.t_assignments;
  var _4 : Friday_Assignments_Type.t_assignments;
  var _5 : usize;
  var _6 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- Friday_Pasn_Type.pasn_assign self_1;
    _3 <- ([#"../Friday/src/lib.rs" 23 4 23 23] Clone0.clone' _4);
    goto BB1
  }
  BB1 {
    _6 <- Friday_Pasn_Type.pasn_ix self_1;
    _5 <- ([#"../Friday/src/lib.rs" 24 4 24 13] Clone1.clone' _6);
    goto BB2
  }
  BB2 {
    _0 <- Friday_Pasn_Type.C_Pasn _3 _5;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Friday_Lit_Type
  use mach.int.Int
  use prelude.UIntSize
  type t_lit  =
    | C_Lit usize bool
    
  let function lit_var (self : t_lit) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Lit a _ -> a
      end
  let function lit_value (self : t_lit) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Lit _ a -> a
      end
end
module Friday_Clause_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Friday_Lit_Type as Friday_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_clause  =
    | C_Clause (Alloc_Vec_Vec_Type.t_vec (Friday_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global))
    
  let function clause_0 (self : t_clause) : Alloc_Vec_Vec_Type.t_vec (Friday_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Clause a -> a
      end
end
module Friday_Formula_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Friday_Clause_Type as Friday_Clause_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_formula  =
    | C_Formula (Alloc_Vec_Vec_Type.t_vec (Friday_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global)) usize
    
  let function formula_clauses (self : t_formula) : Alloc_Vec_Vec_Type.t_vec (Friday_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Formula a _ -> a
      end
  let function formula_num_vars (self : t_formula) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Formula _ a -> a
      end
end
module Core_Num_Impl12_Max_Stub
  use mach.int.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use mach.int.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module Friday_Impl2_VarInRange_Stub
  use mach.int.Int
  use Friday_Lit_Type as Friday_Lit_Type
  predicate var_in_range [#"../Friday/src/lib.rs" 61 4 61 41] (self : Friday_Lit_Type.t_lit) (n : int)
end
module Friday_Impl2_VarInRange_Interface
  use mach.int.Int
  use Friday_Lit_Type as Friday_Lit_Type
  predicate var_in_range [#"../Friday/src/lib.rs" 61 4 61 41] (self : Friday_Lit_Type.t_lit) (n : int)
end
module Friday_Impl2_VarInRange
  use mach.int.Int
  use Friday_Lit_Type as Friday_Lit_Type
  use mach.int.UInt64
  predicate var_in_range [#"../Friday/src/lib.rs" 61 4 61 41] (self : Friday_Lit_Type.t_lit) (n : int) =
    [#"../Friday/src/lib.rs" 63 12 63 25] UInt64.to_int (Friday_Lit_Type.lit_var self) < n
  val var_in_range [#"../Friday/src/lib.rs" 61 4 61 41] (self : Friday_Lit_Type.t_lit) (n : int) : bool
    ensures { result = var_in_range self n }
    
end
module Friday_Impl1_VarsInRange_Stub
  use mach.int.Int
  use Friday_Clause_Type as Friday_Clause_Type
  predicate vars_in_range [#"../Friday/src/lib.rs" 51 4 51 42] (self : Friday_Clause_Type.t_clause) (n : int)
end
module Friday_Impl1_VarsInRange_Interface
  use mach.int.Int
  use Friday_Clause_Type as Friday_Clause_Type
  predicate vars_in_range [#"../Friday/src/lib.rs" 51 4 51 42] (self : Friday_Clause_Type.t_clause) (n : int)
end
module Friday_Impl1_VarsInRange
  use mach.int.Int
  use Friday_Clause_Type as Friday_Clause_Type
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Friday_Lit_Type as Friday_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone Friday_Impl2_VarInRange_Stub as VarInRange0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Friday_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate vars_in_range [#"../Friday/src/lib.rs" 51 4 51 42] (self : Friday_Clause_Type.t_clause) (n : int) =
    [#"../Friday/src/lib.rs" 52 8 55 9] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Friday_Clause_Type.clause_0 self)) -> VarInRange0.var_in_range (Seq.get (ShallowModel0.shallow_model (Friday_Clause_Type.clause_0 self)) i) n
  val vars_in_range [#"../Friday/src/lib.rs" 51 4 51 42] (self : Friday_Clause_Type.t_clause) (n : int) : bool
    ensures { result = vars_in_range self n }
    
end
module Friday_Impl0_Invariant_Stub
  use Friday_Formula_Type as Friday_Formula_Type
  predicate invariant' [#"../Friday/src/lib.rs" 33 4 33 30] (self : Friday_Formula_Type.t_formula)
end
module Friday_Impl0_Invariant_Interface
  use Friday_Formula_Type as Friday_Formula_Type
  predicate invariant' [#"../Friday/src/lib.rs" 33 4 33 30] (self : Friday_Formula_Type.t_formula)
end
module Friday_Impl0_Invariant
  use Friday_Formula_Type as Friday_Formula_Type
  use mach.int.Int
  use seq.Seq
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Friday_Clause_Type as Friday_Clause_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone Friday_Impl1_VarsInRange_Stub as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Friday_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate invariant' [#"../Friday/src/lib.rs" 33 4 33 30] (self : Friday_Formula_Type.t_formula) =
    [#"../Friday/src/lib.rs" 34 8 37 9] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Friday_Formula_Type.formula_clauses self)) -> VarsInRange0.vars_in_range (Seq.get (ShallowModel0.shallow_model (Friday_Formula_Type.formula_clauses self)) i) (UInt64.to_int (Friday_Formula_Type.formula_num_vars self))
  val invariant' [#"../Friday/src/lib.rs" 33 4 33 30] (self : Friday_Formula_Type.t_formula) : bool
    ensures { result = invariant' self }
    
end
module Friday_Impl2_Sat_Stub
  use Friday_Assignments_Type as Friday_Assignments_Type
  use Friday_Lit_Type as Friday_Lit_Type
  predicate sat [#"../Friday/src/lib.rs" 68 4 68 40] (self : Friday_Lit_Type.t_lit) (a : Friday_Assignments_Type.t_assignments)
    
end
module Friday_Impl2_Sat_Interface
  use Friday_Assignments_Type as Friday_Assignments_Type
  use Friday_Lit_Type as Friday_Lit_Type
  predicate sat [#"../Friday/src/lib.rs" 68 4 68 40] (self : Friday_Lit_Type.t_lit) (a : Friday_Assignments_Type.t_assignments)
    
end
module Friday_Impl2_Sat
  use Friday_Assignments_Type as Friday_Assignments_Type
  use Friday_Lit_Type as Friday_Lit_Type
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate sat [#"../Friday/src/lib.rs" 68 4 68 40] (self : Friday_Lit_Type.t_lit) (a : Friday_Assignments_Type.t_assignments)
    
   =
    [#"../Friday/src/lib.rs" 70 12 70 43] Seq.get (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 a)) (UInt64.to_int (Friday_Lit_Type.lit_var self)) = Friday_Lit_Type.lit_value self
  val sat [#"../Friday/src/lib.rs" 68 4 68 40] (self : Friday_Lit_Type.t_lit) (a : Friday_Assignments_Type.t_assignments) : bool
    ensures { result = sat self a }
    
end
module Friday_Impl5_Sat_Stub
  use Friday_Assignments_Type as Friday_Assignments_Type
  use Friday_Clause_Type as Friday_Clause_Type
  predicate sat [#"../Friday/src/lib.rs" 98 4 98 40] (self : Friday_Clause_Type.t_clause) (a : Friday_Assignments_Type.t_assignments)
    
end
module Friday_Impl5_Sat_Interface
  use Friday_Assignments_Type as Friday_Assignments_Type
  use Friday_Clause_Type as Friday_Clause_Type
  predicate sat [#"../Friday/src/lib.rs" 98 4 98 40] (self : Friday_Clause_Type.t_clause) (a : Friday_Assignments_Type.t_assignments)
    
end
module Friday_Impl5_Sat
  use Friday_Assignments_Type as Friday_Assignments_Type
  use Friday_Clause_Type as Friday_Clause_Type
  use mach.int.Int
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Friday_Lit_Type as Friday_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone Friday_Impl2_Sat_Stub as Sat0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Friday_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate sat [#"../Friday/src/lib.rs" 98 4 98 40] (self : Friday_Clause_Type.t_clause) (a : Friday_Assignments_Type.t_assignments)
    
   =
    [#"../Friday/src/lib.rs" 99 8 102 9] exists i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Friday_Clause_Type.clause_0 self)) /\ Sat0.sat (Seq.get (ShallowModel0.shallow_model (Friday_Clause_Type.clause_0 self)) i) a
  val sat [#"../Friday/src/lib.rs" 98 4 98 40] (self : Friday_Clause_Type.t_clause) (a : Friday_Assignments_Type.t_assignments) : bool
    ensures { result = sat self a }
    
end
module Friday_Impl0_Sat_Stub
  use Friday_Assignments_Type as Friday_Assignments_Type
  use Friday_Formula_Type as Friday_Formula_Type
  predicate sat [#"../Friday/src/lib.rs" 41 4 41 40] (self : Friday_Formula_Type.t_formula) (a : Friday_Assignments_Type.t_assignments)
    
end
module Friday_Impl0_Sat_Interface
  use Friday_Assignments_Type as Friday_Assignments_Type
  use Friday_Formula_Type as Friday_Formula_Type
  predicate sat [#"../Friday/src/lib.rs" 41 4 41 40] (self : Friday_Formula_Type.t_formula) (a : Friday_Assignments_Type.t_assignments)
    
end
module Friday_Impl0_Sat
  use Friday_Assignments_Type as Friday_Assignments_Type
  use Friday_Formula_Type as Friday_Formula_Type
  use mach.int.Int
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Friday_Clause_Type as Friday_Clause_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone Friday_Impl5_Sat_Stub as Sat0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Friday_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate sat [#"../Friday/src/lib.rs" 41 4 41 40] (self : Friday_Formula_Type.t_formula) (a : Friday_Assignments_Type.t_assignments)
    
   =
    [#"../Friday/src/lib.rs" 42 8 45 9] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Friday_Formula_Type.formula_clauses self)) -> Sat0.sat (Seq.get (ShallowModel0.shallow_model (Friday_Formula_Type.formula_clauses self)) i) a
  val sat [#"../Friday/src/lib.rs" 41 4 41 40] (self : Friday_Formula_Type.t_formula) (a : Friday_Assignments_Type.t_assignments) : bool
    ensures { result = sat self a }
    
end
module Friday_Impl3_Compatible_Stub
  use Friday_Pasn_Type as Friday_Pasn_Type
  use Friday_Assignments_Type as Friday_Assignments_Type
  predicate compatible [#"../Friday/src/lib.rs" 77 4 77 41] (self : Friday_Assignments_Type.t_assignments) (pa : Friday_Pasn_Type.t_pasn)
    
end
module Friday_Impl3_Compatible_Interface
  use Friday_Pasn_Type as Friday_Pasn_Type
  use Friday_Assignments_Type as Friday_Assignments_Type
  predicate compatible [#"../Friday/src/lib.rs" 77 4 77 41] (self : Friday_Assignments_Type.t_assignments) (pa : Friday_Pasn_Type.t_pasn)
    
end
module Friday_Impl3_Compatible
  use Friday_Pasn_Type as Friday_Pasn_Type
  use Friday_Assignments_Type as Friday_Assignments_Type
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate compatible [#"../Friday/src/lib.rs" 77 4 77 41] (self : Friday_Assignments_Type.t_assignments) (pa : Friday_Pasn_Type.t_pasn)
    
   =
    [#"../Friday/src/lib.rs" 78 8 82 9] Seq.length (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 (Friday_Pasn_Type.pasn_assign pa))) = Seq.length (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 self)) /\ (forall i : int . 0 <= i /\ i < UInt64.to_int (Friday_Pasn_Type.pasn_ix pa) -> Seq.get (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 (Friday_Pasn_Type.pasn_assign pa))) i = Seq.get (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 self)) i)
  val compatible [#"../Friday/src/lib.rs" 77 4 77 41] (self : Friday_Assignments_Type.t_assignments) (pa : Friday_Pasn_Type.t_pasn) : bool
    ensures { result = compatible self pa }
    
end
module Friday_Impl4_Invariant_Stub
  use mach.int.Int
  use Friday_Pasn_Type as Friday_Pasn_Type
  predicate invariant' [#"../Friday/src/lib.rs" 88 4 88 38] (self : Friday_Pasn_Type.t_pasn) (n : int)
end
module Friday_Impl4_Invariant_Interface
  use mach.int.Int
  use Friday_Pasn_Type as Friday_Pasn_Type
  predicate invariant' [#"../Friday/src/lib.rs" 88 4 88 38] (self : Friday_Pasn_Type.t_pasn) (n : int)
end
module Friday_Impl4_Invariant
  use mach.int.Int
  use Friday_Pasn_Type as Friday_Pasn_Type
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Friday_Assignments_Type as Friday_Assignments_Type
  predicate invariant' [#"../Friday/src/lib.rs" 88 4 88 38] (self : Friday_Pasn_Type.t_pasn) (n : int) =
    [#"../Friday/src/lib.rs" 90 12 91 42] UInt64.to_int (Friday_Pasn_Type.pasn_ix self) <= Seq.length (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 (Friday_Pasn_Type.pasn_assign self))) /\ Seq.length (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 (Friday_Pasn_Type.pasn_assign self))) = n
  val invariant' [#"../Friday/src/lib.rs" 88 4 88 38] (self : Friday_Pasn_Type.t_pasn) (n : int) : bool
    ensures { result = invariant' self n }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type
  type t
  type a
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type
  type t
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module Friday_Impl6_Eval_Interface
  use seq.Seq
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  use Friday_Clause_Type as Friday_Clause_Type
  use Friday_Assignments_Type as Friday_Assignments_Type
  clone Friday_Impl5_Sat_Stub as Sat0
  clone Friday_Impl1_VarsInRange_Stub as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val eval [@cfg:stackify] [#"../Friday/src/lib.rs" 109 4 109 43] (self : Friday_Clause_Type.t_clause) (a : Friday_Assignments_Type.t_assignments) : bool
    requires {[#"../Friday/src/lib.rs" 107 15 107 47] VarsInRange0.vars_in_range self (Seq.length (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 a)))}
    ensures { [#"../Friday/src/lib.rs" 108 14 108 36] result = Sat0.sat self a }
    
end
module Friday_Impl6_Eval
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  use prelude.Bool
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy3 with
    type t = bool
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output1 with
    type t = bool
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue1 with
    type t = bool
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds1 with
    type t = bool
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy2.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use Friday_Lit_Type as Friday_Lit_Type
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = Friday_Lit_Type.t_lit
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = Friday_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Friday_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Friday_Lit_Type.t_lit
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = Friday_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Friday_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Friday_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Friday_Impl2_VarInRange as VarInRange0
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with
    type t = bool,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate HasValue0.has_value = HasValue1.has_value,
    type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = Friday_Lit_Type.t_lit,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  use Friday_Assignments_Type as Friday_Assignments_Type
  clone Friday_Impl2_Sat as Sat1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Friday_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  use Friday_Clause_Type as Friday_Clause_Type
  clone Friday_Impl5_Sat as Sat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Sat0.sat = Sat1.sat,
    val Max0.mAX' = Max0.mAX'
  clone Friday_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range,
    val Max0.mAX' = Max0.mAX'
  let rec cfg eval [@cfg:stackify] [#"../Friday/src/lib.rs" 109 4 109 43] (self : Friday_Clause_Type.t_clause) (a : Friday_Assignments_Type.t_assignments) : bool
    requires {[#"../Friday/src/lib.rs" 107 15 107 47] VarsInRange0.vars_in_range self (Seq.length (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 a)))}
    ensures { [#"../Friday/src/lib.rs" 108 14 108 36] result = Sat0.sat self a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Friday_Clause_Type.t_clause;
  var a_2 : Friday_Assignments_Type.t_assignments;
  var i_5 : usize;
  var clause_len_6 : usize;
  var _7 : Alloc_Vec_Vec_Type.t_vec (Friday_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _8 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : ();
  var _16 : bool;
  var _17 : bool;
  var _18 : bool;
  var _19 : Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global);
  var _20 : usize;
  var _21 : Friday_Lit_Type.t_lit;
  var _22 : Alloc_Vec_Vec_Type.t_vec (Friday_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _23 : usize;
  var _24 : bool;
  var _25 : Friday_Lit_Type.t_lit;
  var _26 : Alloc_Vec_Vec_Type.t_vec (Friday_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _27 : usize;
  var _28 : ();
  var _29 : ();
  var _30 : ();
  var _31 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    i_5 <- ([#"../Friday/src/lib.rs" 110 27 110 28] (0 : usize));
    _7 <- Friday_Clause_Type.clause_0 self_1;
    clause_len_6 <- ([#"../Friday/src/lib.rs" 111 25 111 37] Len0.len _7);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant prev_not_sat { [#"../Friday/src/lib.rs" 112 8 113 71] forall j : int . 0 <= j /\ j < UInt64.to_int i_5 -> not Sat1.sat (Seq.get (ShallowModel1.shallow_model (Friday_Clause_Type.clause_0 self_1)) j) a_2 };
    invariant loop_invariant { [#"../Friday/src/lib.rs" 114 36 114 53] UInt64.to_int i_5 <= UInt64.to_int clause_len_6 };
    _13 <- i_5;
    _14 <- clause_len_6;
    _12 <- ([#"../Friday/src/lib.rs" 115 14 115 28] _13 < _14);
    switch (_12)
      | False -> goto BB9
      | True -> goto BB3
      end
  }
  BB3 {
    _19 <- Friday_Assignments_Type.assignments_0 a_2;
    _22 <- Friday_Clause_Type.clause_0 self_1;
    _23 <- i_5;
    _21 <- ([#"../Friday/src/lib.rs" 116 19 116 28] Index0.index _22 _23);
    goto BB4
  }
  BB4 {
    _20 <- Friday_Lit_Type.lit_var _21;
    _18 <- ([#"../Friday/src/lib.rs" 116 15 116 33] Index1.index _19 _20);
    goto BB5
  }
  BB5 {
    _17 <- _18;
    _26 <- Friday_Clause_Type.clause_0 self_1;
    _27 <- i_5;
    _25 <- ([#"../Friday/src/lib.rs" 116 37 116 46] Index0.index _26 _27);
    goto BB6
  }
  BB6 {
    _24 <- Friday_Lit_Type.lit_value _25;
    _16 <- ([#"../Friday/src/lib.rs" 116 15 116 52] Bool.eqb _17 _24);
    switch (_16)
      | False -> goto BB8
      | True -> goto BB7
      end
  }
  BB7 {
    _0 <- ([#"../Friday/src/lib.rs" 117 23 117 27] true);
    goto BB10
  }
  BB8 {
    _15 <- ();
    i_5 <- ([#"../Friday/src/lib.rs" 119 12 119 18] i_5 + ([#"../Friday/src/lib.rs" 119 17 119 18] (1 : usize)));
    _11 <- ();
    goto BB2
  }
  BB9 {
    _8 <- ();
    _0 <- ([#"../Friday/src/lib.rs" 121 8 121 13] false);
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module Friday_Impl7_Eval_Interface
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  use Friday_Assignments_Type as Friday_Assignments_Type
  use Friday_Formula_Type as Friday_Formula_Type
  clone Friday_Impl0_Sat_Stub as Sat0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Friday_Impl0_Invariant_Stub as Invariant0
  val eval [@cfg:stackify] [#"../Friday/src/lib.rs" 129 4 129 43] (self : Friday_Formula_Type.t_formula) (a : Friday_Assignments_Type.t_assignments) : bool
    requires {[#"../Friday/src/lib.rs" 126 15 126 31] Invariant0.invariant' self}
    requires {[#"../Friday/src/lib.rs" 127 15 127 45] Seq.length (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 a)) = UInt64.to_int (Friday_Formula_Type.formula_num_vars self)}
    ensures { [#"../Friday/src/lib.rs" 128 14 128 36] result = Sat0.sat self a }
    
end
module Friday_Impl7_Eval
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  use Friday_Lit_Type as Friday_Lit_Type
  clone Friday_Impl2_VarInRange as VarInRange0
  use Friday_Clause_Type as Friday_Clause_Type
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = Friday_Clause_Type.t_clause
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = Friday_Clause_Type.t_clause
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Friday_Clause_Type.t_clause
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Friday_Clause_Type.t_clause
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = Friday_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Friday_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Friday_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Friday_Assignments_Type as Friday_Assignments_Type
  clone Friday_Impl2_Sat as Sat2 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = Friday_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Friday_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range,
    val Max0.mAX' = Max0.mAX'
  clone Friday_Impl5_Sat as Sat1 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Sat0.sat = Sat2.sat,
    val Max0.mAX' = Max0.mAX'
  clone Friday_Impl6_Eval_Interface as Eval0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    predicate Sat0.sat = Sat1.sat,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = Friday_Clause_Type.t_clause,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Friday_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  use Friday_Formula_Type as Friday_Formula_Type
  clone Friday_Impl0_Sat as Sat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Sat0.sat = Sat1.sat,
    val Max0.mAX' = Max0.mAX'
  clone Friday_Impl0_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    val Max0.mAX' = Max0.mAX'
  let rec cfg eval [@cfg:stackify] [#"../Friday/src/lib.rs" 129 4 129 43] (self : Friday_Formula_Type.t_formula) (a : Friday_Assignments_Type.t_assignments) : bool
    requires {[#"../Friday/src/lib.rs" 126 15 126 31] Invariant0.invariant' self}
    requires {[#"../Friday/src/lib.rs" 127 15 127 45] Seq.length (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 a)) = UInt64.to_int (Friday_Formula_Type.formula_num_vars self)}
    ensures { [#"../Friday/src/lib.rs" 128 14 128 36] result = Sat0.sat self a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Friday_Formula_Type.t_formula;
  var a_2 : Friday_Assignments_Type.t_assignments;
  var i_6 : usize;
  var _7 : ();
  var _9 : ();
  var _10 : bool;
  var _11 : usize;
  var _12 : usize;
  var _13 : Alloc_Vec_Vec_Type.t_vec (Friday_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global);
  var _14 : ();
  var _15 : bool;
  var _16 : bool;
  var _17 : Friday_Clause_Type.t_clause;
  var _18 : Friday_Clause_Type.t_clause;
  var _19 : Alloc_Vec_Vec_Type.t_vec (Friday_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global);
  var _20 : usize;
  var _21 : Friday_Assignments_Type.t_assignments;
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    i_6 <- ([#"../Friday/src/lib.rs" 130 27 130 28] (0 : usize));
    goto BB1
  }
  BB1 {
    invariant prev_sat { [#"../Friday/src/lib.rs" 131 8 132 76] forall j : int . 0 <= j /\ j < UInt64.to_int i_6 -> Sat1.sat (Seq.get (ShallowModel1.shallow_model (Friday_Formula_Type.formula_clauses self_1)) j) a_2 };
    _11 <- i_6;
    _13 <- Friday_Formula_Type.formula_clauses self_1;
    _12 <- ([#"../Friday/src/lib.rs" 133 18 133 36] Len0.len _13);
    goto BB2
  }
  BB2 {
    _10 <- ([#"../Friday/src/lib.rs" 133 14 133 36] _11 < _12);
    switch (_10)
      | False -> goto BB8
      | True -> goto BB3
      end
  }
  BB3 {
    _19 <- Friday_Formula_Type.formula_clauses self_1;
    _20 <- i_6;
    _18 <- ([#"../Friday/src/lib.rs" 134 16 134 31] Index0.index _19 _20);
    goto BB4
  }
  BB4 {
    _17 <- _18;
    _21 <- a_2;
    _16 <- ([#"../Friday/src/lib.rs" 134 16 134 39] Eval0.eval _17 _21);
    goto BB5
  }
  BB5 {
    _15 <- not _16;
    switch (_15)
      | False -> goto BB7
      | True -> goto BB6
      end
  }
  BB6 {
    _0 <- ([#"../Friday/src/lib.rs" 135 23 135 28] false);
    goto BB9
  }
  BB7 {
    _14 <- ();
    i_6 <- ([#"../Friday/src/lib.rs" 137 12 137 18] i_6 + ([#"../Friday/src/lib.rs" 137 17 137 18] (1 : usize)));
    _9 <- ();
    goto BB1
  }
  BB8 {
    _7 <- ();
    _0 <- ([#"../Friday/src/lib.rs" 139 8 139 12] true);
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Core_Usize_Max_Stub
  use mach.int.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Usize_Max
  use mach.int.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface as ResolveElswhere0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : int . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Friday_SetNext_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max1
  use Friday_Pasn_Type as Friday_Pasn_Type
  use Friday_Assignments_Type as Friday_Assignments_Type
  clone Friday_Impl3_Compatible_Stub as Compatible0
  clone Core_Usize_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  val set_next [@cfg:stackify] [#"../Friday/src/lib.rs" 148 0 148 39] (pa : Friday_Pasn_Type.t_pasn) (b : bool) : Friday_Pasn_Type.t_pasn
    requires {[#"../Friday/src/lib.rs" 143 11 143 40] UInt64.to_int (Friday_Pasn_Type.pasn_ix pa) < Seq.length (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 (Friday_Pasn_Type.pasn_assign pa)))}
    requires {[#"../Friday/src/lib.rs" 144 11 144 46] Seq.length (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 (Friday_Pasn_Type.pasn_assign pa))) <= UInt64.to_int Max0.mAX'}
    ensures { [#"../Friday/src/lib.rs" 145 0 145 41] Compatible0.compatible (Friday_Pasn_Type.pasn_assign result) pa }
    ensures { [#"../Friday/src/lib.rs" 146 10 146 41] Seq.get (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 (Friday_Pasn_Type.pasn_assign result))) (UInt64.to_int (Friday_Pasn_Type.pasn_ix pa)) = b }
    ensures { [#"../Friday/src/lib.rs" 147 10 147 34] UInt64.to_int (Friday_Pasn_Type.pasn_ix result) = UInt64.to_int (Friday_Pasn_Type.pasn_ix pa) + 1 }
    
end
module Friday_SetNext
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = bool
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = bool
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = bool
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = bool
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = bool
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max1
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = bool
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with
    type t = bool,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    type Output0.output = Output0.output,
    val Max0.mAX' = Max1.mAX'
  use Friday_Pasn_Type as Friday_Pasn_Type
  clone Friday_Impl9_Clone_Interface as Clone0
  use Friday_Assignments_Type as Friday_Assignments_Type
  clone Friday_Impl3_Compatible as Compatible0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone Core_Usize_Max as Max0
  let rec cfg set_next [@cfg:stackify] [#"../Friday/src/lib.rs" 148 0 148 39] (pa : Friday_Pasn_Type.t_pasn) (b : bool) : Friday_Pasn_Type.t_pasn
    requires {[#"../Friday/src/lib.rs" 143 11 143 40] UInt64.to_int (Friday_Pasn_Type.pasn_ix pa) < Seq.length (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 (Friday_Pasn_Type.pasn_assign pa)))}
    requires {[#"../Friday/src/lib.rs" 144 11 144 46] Seq.length (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 (Friday_Pasn_Type.pasn_assign pa))) <= UInt64.to_int Max0.mAX'}
    ensures { [#"../Friday/src/lib.rs" 145 0 145 41] Compatible0.compatible (Friday_Pasn_Type.pasn_assign result) pa }
    ensures { [#"../Friday/src/lib.rs" 146 10 146 41] Seq.get (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 (Friday_Pasn_Type.pasn_assign result))) (UInt64.to_int (Friday_Pasn_Type.pasn_ix pa)) = b }
    ensures { [#"../Friday/src/lib.rs" 147 10 147 34] UInt64.to_int (Friday_Pasn_Type.pasn_ix result) = UInt64.to_int (Friday_Pasn_Type.pasn_ix pa) + 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Friday_Pasn_Type.t_pasn;
  var pa_1 : Friday_Pasn_Type.t_pasn;
  var b_2 : bool;
  var new_pa_8 : Friday_Pasn_Type.t_pasn;
  var _9 : Friday_Pasn_Type.t_pasn;
  var _10 : bool;
  var _11 : borrowed bool;
  var _12 : borrowed (Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global));
  var _13 : usize;
  {
    pa_1 <- pa;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _9 <- pa_1;
    new_pa_8 <- ([#"../Friday/src/lib.rs" 149 21 149 31] Clone0.clone' _9);
    goto BB1
  }
  BB1 {
    _10 <- b_2;
    _12 <- borrow_mut (Friday_Assignments_Type.assignments_0 (Friday_Pasn_Type.pasn_assign new_pa_8));
    new_pa_8 <- (let Friday_Pasn_Type.C_Pasn a b = new_pa_8 in Friday_Pasn_Type.C_Pasn (let Friday_Assignments_Type.C_Assignments a = Friday_Pasn_Type.pasn_assign new_pa_8 in Friday_Assignments_Type.C_Assignments ( ^ _12)) b);
    _13 <- Friday_Pasn_Type.pasn_ix pa_1;
    _11 <- ([#"../Friday/src/lib.rs" 150 4 150 26] IndexMut0.index_mut _12 _13);
    goto BB2
  }
  BB2 {
    _11 <- { _11 with current = _10 };
    _10 <- any bool;
    assume { Resolve0.resolve _11 };
    new_pa_8 <- (let Friday_Pasn_Type.C_Pasn a b = new_pa_8 in Friday_Pasn_Type.C_Pasn a ([#"../Friday/src/lib.rs" 151 4 151 18] Friday_Pasn_Type.pasn_ix new_pa_8 + ([#"../Friday/src/lib.rs" 151 17 151 18] (1 : usize))));
    _0 <- new_pa_8;
    new_pa_8 <- any Friday_Pasn_Type.t_pasn;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Friday_Solve_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use Friday_Pasn_Type as Friday_Pasn_Type
  use Friday_Assignments_Type as Friday_Assignments_Type
  use Friday_Formula_Type as Friday_Formula_Type
  clone Friday_Impl0_Sat_Stub as Sat0
  clone Friday_Impl3_Compatible_Stub as Compatible0
  clone Friday_Impl0_Invariant_Stub as Invariant1
  clone Friday_Impl4_Invariant_Stub as Invariant0
  val solve [@cfg:stackify] [#"../Friday/src/lib.rs" 159 0 159 39] (f : Friday_Formula_Type.t_formula) (pa : Friday_Pasn_Type.t_pasn) : bool
    requires {[#"../Friday/src/lib.rs" 156 11 156 36] Invariant0.invariant' pa (UInt64.to_int (Friday_Formula_Type.formula_num_vars f))}
    requires {[#"../Friday/src/lib.rs" 157 11 157 24] Invariant1.invariant' f}
    ensures { [#"../Friday/src/lib.rs" 158 10 158 76] (not result) = (forall a : Friday_Assignments_Type.t_assignments . Compatible0.compatible a pa -> not Sat0.sat f a) }
    
end
module Friday_Solve
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Friday_Assignments_Type as Friday_Assignments_Type
  use Friday_Lit_Type as Friday_Lit_Type
  clone Friday_Impl2_Sat as Sat2 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Friday_Impl2_VarInRange as VarInRange0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = Friday_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Core_Usize_Max as Max1
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use Friday_Clause_Type as Friday_Clause_Type
  clone Friday_Impl5_Sat as Sat1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Sat0.sat = Sat2.sat,
    val Max0.mAX' = Max0.mAX'
  clone Friday_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Friday_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Friday_Pasn_Type as Friday_Pasn_Type
  clone Friday_Impl3_Compatible as Compatible0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Friday_SetNext_Interface as SetNext0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max1.mAX',
    predicate Compatible0.compatible = Compatible0.compatible,
    val Max1.mAX' = Max0.mAX'
  use Friday_Formula_Type as Friday_Formula_Type
  clone Friday_Impl0_Sat as Sat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Sat0.sat = Sat1.sat,
    val Max0.mAX' = Max0.mAX'
  clone Friday_Impl0_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    val Max0.mAX' = Max0.mAX'
  clone Friday_Impl7_Eval_Interface as Eval0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Sat0.sat = Sat0.sat,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Friday_Impl4_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg solve [@cfg:stackify] [#"../Friday/src/lib.rs" 159 0 159 39] (f : Friday_Formula_Type.t_formula) (pa : Friday_Pasn_Type.t_pasn) : bool
    requires {[#"../Friday/src/lib.rs" 156 11 156 36] Invariant0.invariant' pa (UInt64.to_int (Friday_Formula_Type.formula_num_vars f))}
    requires {[#"../Friday/src/lib.rs" 157 11 157 24] Invariant1.invariant' f}
    ensures { [#"../Friday/src/lib.rs" 158 10 158 76] (not result) = (forall a : Friday_Assignments_Type.t_assignments . Compatible0.compatible a pa -> not Sat0.sat f a) }
    variant {[#"../Friday/src/lib.rs" 155 0 155 32] UInt64.to_int (Friday_Formula_Type.formula_num_vars f) - UInt64.to_int (Friday_Pasn_Type.pasn_ix pa)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var f_1 : Friday_Formula_Type.t_formula;
  var pa_2 : Friday_Pasn_Type.t_pasn;
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global);
  var _12 : ();
  var _13 : Friday_Formula_Type.t_formula;
  var _14 : Friday_Assignments_Type.t_assignments;
  var _15 : Friday_Assignments_Type.t_assignments;
  var _16 : bool;
  var _17 : Friday_Formula_Type.t_formula;
  var _18 : Friday_Pasn_Type.t_pasn;
  var _19 : Friday_Pasn_Type.t_pasn;
  var _20 : Friday_Pasn_Type.t_pasn;
  var _21 : bool;
  var _22 : Friday_Formula_Type.t_formula;
  var _23 : Friday_Pasn_Type.t_pasn;
  var _24 : Friday_Pasn_Type.t_pasn;
  var _25 : Friday_Pasn_Type.t_pasn;
  {
    f_1 <- f;
    pa_2 <- pa;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _9 <- Friday_Pasn_Type.pasn_ix pa_2;
    _11 <- Friday_Assignments_Type.assignments_0 (Friday_Pasn_Type.pasn_assign pa_2);
    _10 <- ([#"../Friday/src/lib.rs" 160 16 160 33] Len0.len _11);
    goto BB3
  }
  BB3 {
    _8 <- ([#"../Friday/src/lib.rs" 160 7 160 33] _9 = _10);
    switch (_8)
      | False -> goto BB6
      | True -> goto BB4
      end
  }
  BB4 {
    _13 <- f_1;
    _15 <- Friday_Pasn_Type.pasn_assign pa_2;
    _14 <- _15;
    _0 <- ([#"../Friday/src/lib.rs" 161 15 161 33] Eval0.eval _13 _14);
    goto BB5
  }
  BB5 {
    goto BB14
  }
  BB6 {
    _7 <- ();
    _17 <- f_1;
    _20 <- pa_2;
    _19 <- _20;
    _18 <- ([#"../Friday/src/lib.rs" 163 13 163 32] SetNext0.set_next _19 ([#"../Friday/src/lib.rs" 163 27 163 31] true));
    goto BB10
  }
  BB7 {
    _0 <- ([#"../Friday/src/lib.rs" 163 4 163 67] true);
    goto BB9
  }
  BB8 {
    _22 <- f_1;
    _25 <- pa_2;
    _24 <- _25;
    _23 <- ([#"../Friday/src/lib.rs" 163 46 163 66] SetNext0.set_next _24 ([#"../Friday/src/lib.rs" 163 60 163 65] false));
    goto BB12
  }
  BB9 {
    goto BB14
  }
  BB10 {
    _16 <- ([#"../Friday/src/lib.rs" 163 4 163 33] solve _17 _18);
    goto BB11
  }
  BB11 {
    switch (_16)
      | False -> goto BB8
      | True -> goto BB7
      end
  }
  BB12 {
    _21 <- ([#"../Friday/src/lib.rs" 163 37 163 67] solve _22 _23);
    goto BB13
  }
  BB13 {
    _0 <- _21;
    _21 <- any bool;
    goto BB9
  }
  BB14 {
    return _0
  }
  
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = UInt64.to_int n }
    ensures { forall i : int . 0 <= i /\ i < UInt64.to_int n -> Seq.get (ShallowModel0.shallow_model result) i = elem }
    
end
module Alloc_Vec_FromElem
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = UInt64.to_int n }
    ensures { forall i : int . 0 <= i /\ i < UInt64.to_int n -> Seq.get (ShallowModel0.shallow_model result) i = elem }
    
end
module Friday_Solver_Interface
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  use Friday_Assignments_Type as Friday_Assignments_Type
  use Friday_Formula_Type as Friday_Formula_Type
  clone Friday_Impl0_Sat_Stub as Sat0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Friday_Impl0_Invariant_Stub as Invariant0
  val solver [@cfg:stackify] [#"../Friday/src/lib.rs" 170 0 170 34] (f : Friday_Formula_Type.t_formula) : bool
    requires {[#"../Friday/src/lib.rs" 166 11 166 24] Invariant0.invariant' f}
    ensures { [#"../Friday/src/lib.rs" 167 0 168 33] not result -> (forall a : Friday_Assignments_Type.t_assignments . Seq.length (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 a)) = UInt64.to_int (Friday_Formula_Type.formula_num_vars f) -> not Sat0.sat f a) }
    ensures { [#"../Friday/src/lib.rs" 169 0 169 55] result -> (exists a : Friday_Assignments_Type.t_assignments . Sat0.sat f a) }
    
end
module Friday_Solver
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = bool,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Friday_Assignments_Type as Friday_Assignments_Type
  use Friday_Lit_Type as Friday_Lit_Type
  clone Friday_Impl2_Sat as Sat2 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Friday_Impl2_VarInRange as VarInRange0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = Friday_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Friday_Pasn_Type as Friday_Pasn_Type
  clone Friday_Impl3_Compatible as Compatible0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Friday_Impl4_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use Friday_Clause_Type as Friday_Clause_Type
  clone Friday_Impl5_Sat as Sat1 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Sat0.sat = Sat2.sat,
    val Max0.mAX' = Max0.mAX'
  clone Friday_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Friday_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Friday_Formula_Type as Friday_Formula_Type
  clone Friday_Impl0_Sat as Sat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Sat0.sat = Sat1.sat,
    val Max0.mAX' = Max0.mAX'
  clone Friday_Impl0_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    val Max0.mAX' = Max0.mAX'
  clone Friday_Solve_Interface as Solve0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Compatible0.compatible = Compatible0.compatible,
    predicate Sat0.sat = Sat0.sat
  clone Alloc_Vec_FromElem_Interface as FromElem0 with
    type t = bool,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg solver [@cfg:stackify] [#"../Friday/src/lib.rs" 170 0 170 34] (f : Friday_Formula_Type.t_formula) : bool
    requires {[#"../Friday/src/lib.rs" 166 11 166 24] Invariant0.invariant' f}
    ensures { [#"../Friday/src/lib.rs" 167 0 168 33] not result -> (forall a : Friday_Assignments_Type.t_assignments . Seq.length (ShallowModel0.shallow_model (Friday_Assignments_Type.assignments_0 a)) = UInt64.to_int (Friday_Formula_Type.formula_num_vars f) -> not Sat0.sat f a) }
    ensures { [#"../Friday/src/lib.rs" 169 0 169 55] result -> (exists a : Friday_Assignments_Type.t_assignments . Sat0.sat f a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var f_1 : Friday_Formula_Type.t_formula;
  var _5 : Friday_Formula_Type.t_formula;
  var _6 : Friday_Pasn_Type.t_pasn;
  var _7 : Friday_Assignments_Type.t_assignments;
  var _8 : Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global);
  var _9 : usize;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _5 <- f_1;
    _9 <- Friday_Formula_Type.formula_num_vars f_1;
    _8 <- ([#"../Friday/src/lib.rs" 171 40 171 63] FromElem0.from_elem ([#"../Friday/src/lib.rs" 171 45 171 50] false) _9);
    goto BB1
  }
  BB1 {
    _7 <- Friday_Assignments_Type.C_Assignments _8;
    goto BB2
  }
  BB2 {
    _6 <- Friday_Pasn_Type.C_Pasn _7 ([#"../Friday/src/lib.rs" 171 70 171 71] (0 : usize));
    goto BB3
  }
  BB3 {
    _0 <- ([#"../Friday/src/lib.rs" 171 4 171 74] Solve0.solve _5 _6);
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Friday_Impl8
  use Friday_Assignments_Type as Friday_Assignments_Type
  clone Friday_Impl8_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with
    type self = Friday_Assignments_Type.t_assignments,
    val clone' = Clone0.clone'
end
module Friday_Impl9
  use Friday_Pasn_Type as Friday_Pasn_Type
  clone Friday_Impl9_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with
    type self = Friday_Pasn_Type.t_pasn,
    val clone' = Clone0.clone'
end
