module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_marker_phantomdata 't = 
    ()
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type friday_lit  = 
    | Friday_Lit usize bool
    
  let function friday_lit_Lit_var (self : friday_lit) : usize = 
    match (self) with
      | Friday_Lit a _ -> a
      end
  let function friday_lit_Lit_value (self : friday_lit) : bool = 
    match (self) with
      | Friday_Lit _ a -> a
      end
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type friday_clause  = 
    | Friday_Clause (alloc_vec_vec (friday_lit) (alloc_alloc_global))
    
  let function friday_clause_Clause_0 (self : friday_clause) : alloc_vec_vec (friday_lit) (alloc_alloc_global) = 
    match (self) with
      | Friday_Clause a -> a
      end
  type friday_assignment  = 
    | Friday_Assignment (alloc_vec_vec bool (alloc_alloc_global))
    
  let function friday_assignment_Assignment_0 (self : friday_assignment) : alloc_vec_vec bool (alloc_alloc_global) = 
    match (self) with
      | Friday_Assignment a -> a
      end
  type friday_pasn  = 
    | Friday_Pasn (alloc_vec_vec bool (alloc_alloc_global)) usize
    
  let function friday_pasn_Pasn_assign (self : friday_pasn) : alloc_vec_vec bool (alloc_alloc_global) = 
    match (self) with
      | Friday_Pasn a _ -> a
      end
  let function friday_pasn_Pasn_ix (self : friday_pasn) : usize = 
    match (self) with
      | Friday_Pasn _ a -> a
      end
  type friday_formula  = 
    | Friday_Formula (alloc_vec_vec (friday_clause) (alloc_alloc_global)) usize
    
  let function friday_formula_Formula_clauses (self : friday_formula) : alloc_vec_vec (friday_clause) (alloc_alloc_global)
    
   = 
    match (self) with
      | Friday_Formula a _ -> a
      end
  let function friday_formula_Formula_num_vars (self : friday_formula) : usize = 
    match (self) with
      | Friday_Formula _ a -> a
      end
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use Type
  use seq.Seq
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use Type
  use seq.Seq
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module Friday_Impl3_VarsInRange_Interface
  use Type
  use mach.int.Int
  predicate vars_in_range (self : Type.friday_lit) (n : int)
end
module Friday_Impl3_VarsInRange
  use Type
  use mach.int.Int
  use mach.int.UInt64
  predicate vars_in_range (self : Type.friday_lit) (n : int) = 
    UInt64.to_int (Type.friday_lit_Lit_var self) < n
end
module Friday_Impl0_VarsInRange_Interface
  use Type
  use mach.int.Int
  predicate vars_in_range (self : Type.friday_clause) (n : int)
end
module Friday_Impl0_VarsInRange
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Friday_Impl3_VarsInRange_Interface as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.friday_lit,
  type a = Type.alloc_alloc_global
  predicate vars_in_range (self : Type.friday_clause) (n : int) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.friday_clause_Clause_0 self)) -> VarsInRange0.vars_in_range (Seq.get (Model0.model (Type.friday_clause_Clause_0 self)) i) n
end
module Friday_Impl1_Compatible_Interface
  use Type
  predicate compatible (self : Type.friday_assignment) (pa : Type.friday_pasn)
end
module Friday_Impl1_Compatible
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool, type a = Type.alloc_alloc_global
  predicate compatible (self : Type.friday_assignment) (pa : Type.friday_pasn) = 
    Seq.length (Model0.model (Type.friday_pasn_Pasn_assign pa)) = Seq.length (Model0.model (Type.friday_assignment_Assignment_0 self)) && (forall i : (int) . 0 <= i && i < UInt64.to_int (Type.friday_pasn_Pasn_ix pa) -> Seq.get (Model0.model (Type.friday_pasn_Pasn_assign pa)) i = Seq.get (Model0.model (Type.friday_assignment_Assignment_0 self)) i)
end
module Friday_Impl2_Invariant_Interface
  use Type
  predicate invariant' (self : Type.friday_formula)
end
module Friday_Impl2_Invariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Friday_Impl0_VarsInRange_Interface as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.friday_clause,
  type a = Type.alloc_alloc_global
  predicate invariant' (self : Type.friday_formula) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.friday_formula_Formula_clauses self)) -> VarsInRange0.vars_in_range (Seq.get (Model0.model (Type.friday_formula_Formula_clauses self)) i) (UInt64.to_int (Type.friday_formula_Formula_num_vars self))
end
module Friday_Impl3_Sat_Interface
  use Type
  predicate sat (self : Type.friday_lit) (a : Type.friday_assignment)
end
module Friday_Impl3_Sat
  use Type
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool, type a = Type.alloc_alloc_global
  predicate sat (self : Type.friday_lit) (a : Type.friday_assignment) = 
    Seq.get (Model0.model (Type.friday_assignment_Assignment_0 a)) (UInt64.to_int (Type.friday_lit_Lit_var self)) = Type.friday_lit_Lit_value self
end
module Friday_Impl5_Sat_Interface
  use Type
  predicate sat (self : Type.friday_clause) (a : Type.friday_assignment)
end
module Friday_Impl5_Sat
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Friday_Impl3_Sat_Interface as Sat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.friday_lit,
  type a = Type.alloc_alloc_global
  predicate sat (self : Type.friday_clause) (a : Type.friday_assignment) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.friday_clause_Clause_0 self)) && Sat0.sat (Seq.get (Model0.model (Type.friday_clause_Clause_0 self)) i) a
end
module Friday_Impl2_Sat_Interface
  use Type
  predicate sat (self : Type.friday_formula) (a : Type.friday_assignment)
end
module Friday_Impl2_Sat
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Friday_Impl5_Sat_Interface as Sat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.friday_clause,
  type a = Type.alloc_alloc_global
  predicate sat (self : Type.friday_formula) (a : Type.friday_assignment) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.friday_formula_Formula_clauses self)) -> Sat0.sat (Seq.get (Model0.model (Type.friday_formula_Formula_clauses self)) i) a
end
module Friday_Impl4_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.friday_pasn) (n : int)
end
module Friday_Impl4_Invariant
  use Type
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool, type a = Type.alloc_alloc_global
  predicate invariant' (self : Type.friday_pasn) (n : int) = 
    UInt64.to_int (Type.friday_pasn_Pasn_ix self) <= Seq.length (Model0.model (Type.friday_pasn_Pasn_assign self)) && Seq.length (Model0.model (Type.friday_pasn_Pasn_assign self)) = n
end
module Friday_Impl6_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.friday_pasn) : Type.friday_pasn
    ensures { self = result }
    
end
module Friday_Impl6_Clone
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.friday_pasn) : Type.friday_pasn
    ensures { self = result }
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.alloc_vec_vec t a,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.alloc_vec_vec t a,
  type modelTy = ModelTy0.modelTy
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self
  type idx
  type output
end
module Core_Ops_Index_Index_Index_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Logic_Model_Impl2_ModelTy
  type t
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Output
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  type output  = 
    Output0.output
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a
  clone Core_Slice_Index_SliceIndex_Output as Output2 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Output as Output0 with type t = t, type i = i, type a = a, type Output0.output = Output2.output
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.alloc_vec_vec t a, type idx = i,
  type output = Output0.output
end
module CreusotContracts_Std1_Vec_Impl1_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Vec_Impl1_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) = 
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Vec_Impl1_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Vec_Impl1_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) = 
    Seq.get seq (UInt64.to_int self) = out
end
module CreusotContracts_Std1_Vec_Impl1_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Vec_Impl1_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) = 
    forall i : (int) . 0 <= i && not (i = UInt64.to_int self) && i <= Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl1
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere as ResolveElswhere1 with type self = usize,
  type t = seq t, predicate resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue as HasValue1 with type self = usize, type t = seq t,
  predicate has_value = HasValue0.has_value, type ModelTy0.modelTy = ModelTy0.modelTy,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds as InBounds1 with type self = usize, type t = seq t,
  predicate in_bounds = InBounds0.in_bounds, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Core_Slice_Index_SliceIndex_Get_Interface
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Get
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut_Interface
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked_Interface
  type self
  type t
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked
  type self
  type t
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface
  type self
  type t
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut
  type self
  type t
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index_Interface
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut_Interface
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone Core_Slice_Index_Impl2_IndexMut_Interface as IndexMut0 with type t = t
  clone Core_Slice_Index_Impl2_Index_Interface as Index0 with type t = t
  clone Core_Slice_Index_Impl2_GetUncheckedMut_Interface as GetUncheckedMut0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface as GetUncheckedMut1 with type self = usize,
  type t = seq t, val get_unchecked_mut = GetUncheckedMut0.get_unchecked_mut
  clone Core_Slice_Index_Impl2_GetUnchecked_Interface as GetUnchecked0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUnchecked_Interface as GetUnchecked1 with type self = usize, type t = seq t,
  val get_unchecked = GetUnchecked0.get_unchecked
  clone Core_Slice_Index_Impl2_GetMut_Interface as GetMut0 with type t = t
  clone Core_Slice_Index_Impl2_Get_Interface as Get0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone Core_Slice_Index_SliceIndex_IndexMut_Interface as IndexMut1 with type self = usize, type t = seq t,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Index_Interface as Index1 with type self = usize, type t = seq t,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_GetMut_Interface as GetMut1 with type self = usize, type t = seq t,
  val get_mut = GetMut0.get_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Get_Interface as Get1 with type self = usize, type t = seq t, val get = Get0.get,
  type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Output as Output1 with type self = usize, type t = seq t,
  type output = Output0.output
end
module CreusotContracts_Logic_Model_Impl2_Model_Interface
  type t
  use prelude.Prelude
  use seq.Seq
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Logic_Model_Impl2_Model
  type t
  use prelude.Prelude
  use seq.Seq
  function model (self : seq t) : Seq.seq t = 
    Prelude.id self
end
module CreusotContracts_Logic_Model_Impl2
  type t
  use prelude.Prelude
  use seq.Seq
  clone CreusotContracts_Logic_Model_Impl2_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = seq t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = seq t, type modelTy = ModelTy0.modelTy
end
module Friday_InterpClause_Interface
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Friday_Impl5_Sat_Interface as Sat0
  clone Friday_Impl0_VarsInRange_Interface as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool, type a = Type.alloc_alloc_global
  val interp_clause [@cfg:stackify] (a : Type.friday_assignment) (c : Type.friday_clause) : bool
    requires {VarsInRange0.vars_in_range c (Seq.length (Model0.model (Type.friday_assignment_Assignment_0 a)))}
    ensures { result = Sat0.sat c a }
    
end
module Friday_InterpClause
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone Friday_Impl3_VarsInRange as VarsInRange1
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.friday_lit, type a = Type.alloc_alloc_global
  clone Friday_Impl0_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate VarsInRange0.vars_in_range = VarsInRange1.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = bool, type a = Type.alloc_alloc_global
  clone Friday_Impl3_Sat as Sat1 with function Model0.model = Model0.model
  clone Friday_Impl5_Sat as Sat0 with function Model0.model = Model1.model, predicate Sat0.sat = Sat1.sat
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = bool
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = bool
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = bool
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = bool
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.friday_lit
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.friday_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.friday_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.friday_lit
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.friday_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.friday_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model1.model
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = bool, type i = usize, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds1.in_bounds,
  predicate HasValue0.has_value = HasValue1.has_value, type Output0.output = Output1.output
  let rec cfg interp_clause [@cfg:stackify] (a : Type.friday_assignment) (c : Type.friday_clause) : bool
    requires {VarsInRange0.vars_in_range c (Seq.length (Model0.model (Type.friday_assignment_Assignment_0 a)))}
    ensures { result = Sat0.sat c a }
    
   = 
  var _0 : bool;
  var a_1 : Type.friday_assignment;
  var c_2 : Type.friday_clause;
  var i_3 : usize;
  var clause_len_4 : usize;
  var _5 : Type.alloc_vec_vec (Type.friday_lit) (Type.alloc_alloc_global);
  var _6 : ();
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var l_11 : bool;
  var _12 : bool;
  var _13 : Type.alloc_vec_vec bool (Type.alloc_alloc_global);
  var _14 : usize;
  var _15 : Type.friday_lit;
  var _16 : Type.alloc_vec_vec (Type.friday_lit) (Type.alloc_alloc_global);
  var _17 : usize;
  var r_18 : bool;
  var _19 : Type.friday_lit;
  var _20 : Type.alloc_vec_vec (Type.friday_lit) (Type.alloc_alloc_global);
  var _21 : usize;
  var _22 : ();
  var _23 : bool;
  var _24 : bool;
  var _25 : bool;
  var _26 : ();
  var _27 : ();
  var _28 : ();
  var _29 : ();
  {
    a_1 <- a;
    c_2 <- c;
    goto BB0
  }
  BB0 {
    i_3 <- (0 : usize);
    _5 <- Type.friday_clause_Clause_0 c_2;
    clause_len_4 <- Len0.len _5;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant prev_not_sat { forall j : (int) . 0 <= j && j < UInt64.to_int i_3 -> not (Sat1.sat (Seq.get (Model1.model (Type.friday_clause_Clause_0 c_2)) j) a_1) };
    invariant loop_invariant { UInt64.to_int i_3 <= UInt64.to_int clause_len_4 };
    _9 <- i_3;
    _10 <- clause_len_4;
    _8 <- _9 < _10;
    switch (_8)
      | False -> goto BB9
      | _ -> goto BB3
      end
  }
  BB3 {
    _13 <- Type.friday_assignment_Assignment_0 a_1;
    _16 <- Type.friday_clause_Clause_0 c_2;
    _17 <- i_3;
    _15 <- Index0.index _16 _17;
    goto BB4
  }
  BB4 {
    _14 <- Type.friday_lit_Lit_var _15;
    _12 <- Index1.index _13 _14;
    goto BB5
  }
  BB5 {
    l_11 <- _12;
    _20 <- Type.friday_clause_Clause_0 c_2;
    _21 <- i_3;
    _19 <- Index0.index _20 _21;
    goto BB6
  }
  BB6 {
    r_18 <- Type.friday_lit_Lit_value _19;
    _24 <- l_11;
    _25 <- r_18;
    _23 <- Prelude.eqb _24 _25;
    switch (_23)
      | False -> goto BB8
      | _ -> goto BB7
      end
  }
  BB7 {
    _0 <- true;
    goto BB10
  }
  BB8 {
    _22 <- ();
    i_3 <- i_3 + (1 : usize);
    _7 <- ();
    goto BB2
  }
  BB9 {
    _6 <- ();
    _0 <- false;
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module Friday_InterpFormula_Interface
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone Friday_Impl2_Sat_Interface as Sat0
  clone Friday_Impl2_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool, type a = Type.alloc_alloc_global
  val interp_formula [@cfg:stackify] (a : Type.friday_assignment) (f : Type.friday_formula) : bool
    requires {Seq.length (Model0.model (Type.friday_assignment_Assignment_0 a)) = UInt64.to_int (Type.friday_formula_Formula_num_vars f)}
    requires {Invariant0.invariant' f}
    ensures { result = Sat0.sat f a }
    
end
module Friday_InterpFormula
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone Friday_Impl3_VarsInRange as VarsInRange1
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.friday_lit, type a = Type.alloc_alloc_global
  clone Friday_Impl0_VarsInRange as VarsInRange0 with function Model0.model = Model2.model,
  predicate VarsInRange0.vars_in_range = VarsInRange1.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.friday_clause,
  type a = Type.alloc_alloc_global
  clone Friday_Impl2_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = bool, type a = Type.alloc_alloc_global
  clone Friday_Impl3_Sat as Sat2 with function Model0.model = Model0.model
  clone Friday_Impl5_Sat as Sat1 with function Model0.model = Model2.model, predicate Sat0.sat = Sat2.sat
  clone Friday_Impl2_Sat as Sat0 with function Model0.model = Model1.model, predicate Sat0.sat = Sat1.sat
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.friday_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.friday_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.friday_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.friday_clause
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.friday_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.friday_clause, type a = Type.alloc_alloc_global,
  function Model0.model = Model1.model
  clone Friday_InterpClause_Interface as InterpClause0 with function Model0.model = Model0.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range, predicate Sat0.sat = Sat1.sat
  let rec cfg interp_formula [@cfg:stackify] (a : Type.friday_assignment) (f : Type.friday_formula) : bool
    requires {Seq.length (Model0.model (Type.friday_assignment_Assignment_0 a)) = UInt64.to_int (Type.friday_formula_Formula_num_vars f)}
    requires {Invariant0.invariant' f}
    ensures { result = Sat0.sat f a }
    
   = 
  var _0 : bool;
  var a_1 : Type.friday_assignment;
  var f_2 : Type.friday_formula;
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : Type.alloc_vec_vec (Type.friday_clause) (Type.alloc_alloc_global);
  var _10 : ();
  var _11 : bool;
  var _12 : bool;
  var _13 : Type.friday_assignment;
  var _14 : Type.friday_clause;
  var _15 : Type.friday_clause;
  var _16 : Type.friday_clause;
  var _17 : Type.alloc_vec_vec (Type.friday_clause) (Type.alloc_alloc_global);
  var _18 : usize;
  var _19 : ();
  var _20 : ();
  var _21 : ();
  var _22 : ();
  {
    a_1 <- a;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    i_3 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant prev_sat { forall j : (int) . 0 <= j && j < UInt64.to_int i_3 -> Sat1.sat (Seq.get (Model1.model (Type.friday_formula_Formula_clauses f_2)) j) a_1 };
    invariant loop_invariant { UInt64.to_int i_3 <= Seq.length (Model1.model (Type.friday_formula_Formula_clauses f_2)) };
    _7 <- i_3;
    _9 <- Type.friday_formula_Formula_clauses f_2;
    _8 <- Len0.len _9;
    goto BB2
  }
  BB2 {
    _6 <- _7 < _8;
    switch (_6)
      | False -> goto BB8
      | _ -> goto BB3
      end
  }
  BB3 {
    _13 <- a_1;
    _17 <- Type.friday_formula_Formula_clauses f_2;
    _18 <- i_3;
    _16 <- Index0.index _17 _18;
    goto BB4
  }
  BB4 {
    _15 <- _16;
    _14 <- _15;
    _12 <- InterpClause0.interp_clause _13 _14;
    goto BB5
  }
  BB5 {
    _11 <- not _12;
    switch (_11)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    _0 <- false;
    goto BB9
  }
  BB7 {
    _10 <- ();
    i_3 <- i_3 + (1 : usize);
    _5 <- ();
    goto BB1
  }
  BB8 {
    _4 <- ();
    _0 <- true;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module CreusotContracts_Std1_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module CreusotContracts_Std1_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module Friday_Impl6
  use Type
  clone Friday_Impl6_Clone_Interface as Clone0
  clone CreusotContracts_Std1_Clone_Clone_Clone_Interface as Clone1 with type self = Type.friday_pasn,
  val clone' = Clone0.clone'
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere as ResolveElswhere0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone Alloc_Vec_Impl16_Output as Output1 with type t = t, type i = i, type a = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output1.output
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module Friday_Set_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone Friday_Impl1_Compatible_Interface as Compatible0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool, type a = Type.alloc_alloc_global
  val set [@cfg:stackify] (pa : Type.friday_pasn) (b : bool) : Type.friday_pasn
    requires {Seq.length (Model0.model (Type.friday_pasn_Pasn_assign pa)) <= 18446744073709551615}
    requires {UInt64.to_int (Type.friday_pasn_Pasn_ix pa) < Seq.length (Model0.model (Type.friday_pasn_Pasn_assign pa))}
    ensures { UInt64.to_int (Type.friday_pasn_Pasn_ix result) = UInt64.to_int (Type.friday_pasn_Pasn_ix pa) + 1 }
    ensures { Seq.get (Model0.model (Type.friday_pasn_Pasn_assign result)) (UInt64.to_int (Type.friday_pasn_Pasn_ix pa)) = b }
    ensures { Compatible0.compatible (Type.Friday_Assignment (Type.friday_pasn_Pasn_assign result)) pa }
    
end
module Friday_Set
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = bool, type a = Type.alloc_alloc_global
  clone Friday_Impl1_Compatible as Compatible0 with function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = bool
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = bool
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = bool
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = bool
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = bool
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = bool
  clone Friday_Impl6_Clone_Interface as Clone0
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = bool, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  let rec cfg set [@cfg:stackify] (pa : Type.friday_pasn) (b : bool) : Type.friday_pasn
    requires {Seq.length (Model0.model (Type.friday_pasn_Pasn_assign pa)) <= 18446744073709551615}
    requires {UInt64.to_int (Type.friday_pasn_Pasn_ix pa) < Seq.length (Model0.model (Type.friday_pasn_Pasn_assign pa))}
    ensures { UInt64.to_int (Type.friday_pasn_Pasn_ix result) = UInt64.to_int (Type.friday_pasn_Pasn_ix pa) + 1 }
    ensures { Seq.get (Model0.model (Type.friday_pasn_Pasn_assign result)) (UInt64.to_int (Type.friday_pasn_Pasn_ix pa)) = b }
    ensures { Compatible0.compatible (Type.Friday_Assignment (Type.friday_pasn_Pasn_assign result)) pa }
    
   = 
  var _0 : Type.friday_pasn;
  var pa_1 : Type.friday_pasn;
  var b_2 : bool;
  var new_pa_3 : Type.friday_pasn;
  var _4 : Type.friday_pasn;
  var _5 : bool;
  var _6 : borrowed bool;
  var _7 : borrowed (Type.alloc_vec_vec bool (Type.alloc_alloc_global));
  var _8 : usize;
  {
    pa_1 <- pa;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _4 <- pa_1;
    new_pa_3 <- Clone0.clone' _4;
    goto BB1
  }
  BB1 {
    _5 <- b_2;
    _7 <- borrow_mut (Type.friday_pasn_Pasn_assign new_pa_3);
    new_pa_3 <- (let Type.Friday_Pasn a b = new_pa_3 in Type.Friday_Pasn ( ^ _7) b);
    _8 <- Type.friday_pasn_Pasn_ix pa_1;
    _6 <- IndexMut0.index_mut _7 _8;
    goto BB2
  }
  BB2 {
    _6 <- { _6 with current = _5 };
    assume { Resolve0.resolve _6 };
    new_pa_3 <- (let Type.Friday_Pasn a b = new_pa_3 in Type.Friday_Pasn a (Type.friday_pasn_Pasn_ix new_pa_3 + (1 : usize)));
    _0 <- new_pa_3;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreusotContracts_Std1_Vec_Impl2_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl2_Resolve
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_Impl2
  type t
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve0 with type t = t, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) = 
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module Friday_Inner_Interface
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  clone Friday_Impl2_Sat_Interface as Sat0
  clone Friday_Impl1_Compatible_Interface as Compatible0
  clone Friday_Impl4_Invariant_Interface as Invariant1
  clone Friday_Impl2_Invariant_Interface as Invariant0
  val inner [@cfg:stackify] (f : Type.friday_formula) (pa : Type.friday_pasn) : bool
    requires {Invariant0.invariant' f}
    requires {Invariant1.invariant' pa (UInt64.to_int (Type.friday_formula_Formula_num_vars f))}
    ensures { not result = (forall a : (Type.friday_assignment) . Compatible0.compatible a pa -> not (Sat0.sat f a)) }
    
end
module Friday_Inner
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  clone Friday_Impl3_VarsInRange as VarsInRange1
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.friday_lit, type a = Type.alloc_alloc_global
  clone Friday_Impl0_VarsInRange as VarsInRange0 with function Model0.model = Model2.model,
  predicate VarsInRange0.vars_in_range = VarsInRange1.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = bool, type a = Type.alloc_alloc_global
  clone Friday_Impl3_Sat as Sat2 with function Model0.model = Model1.model
  clone Friday_Impl5_Sat as Sat1 with function Model0.model = Model2.model, predicate Sat0.sat = Sat2.sat
  clone Friday_Impl1_Compatible as Compatible0 with function Model0.model = Model1.model
  clone Friday_Impl4_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.friday_clause,
  type a = Type.alloc_alloc_global
  clone Friday_Impl2_Sat as Sat0 with function Model0.model = Model0.model, predicate Sat0.sat = Sat1.sat
  clone Friday_Impl2_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  use mach.int.Int
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = bool
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve0 with type t = bool, function Model0.model = Model1.model,
  predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = bool, type a = Type.alloc_alloc_global,
  function Model0.model = Model1.model
  clone Friday_Set_Interface as Set0 with function Model0.model = Model1.model,
  predicate Compatible0.compatible = Compatible0.compatible
  clone Friday_InterpFormula_Interface as InterpFormula0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Sat0.sat = Sat0.sat
  let rec cfg inner [@cfg:stackify] (f : Type.friday_formula) (pa : Type.friday_pasn) : bool
    requires {Invariant0.invariant' f}
    requires {Invariant1.invariant' pa (UInt64.to_int (Type.friday_formula_Formula_num_vars f))}
    ensures { not result = (forall a : (Type.friday_assignment) . Compatible0.compatible a pa -> not (Sat0.sat f a)) }
    variant {UInt64.to_int (Type.friday_formula_Formula_num_vars f) - UInt64.to_int (Type.friday_pasn_Pasn_ix pa)}
    
   = 
  var _0 : bool;
  var f_1 : Type.friday_formula;
  var pa_2 : Type.friday_pasn;
  var _3 : bool;
  var _4 : usize;
  var _5 : usize;
  var _6 : Type.alloc_vec_vec bool (Type.alloc_alloc_global);
  var _7 : ();
  var _8 : Type.friday_assignment;
  var _9 : Type.friday_assignment;
  var _10 : Type.friday_assignment;
  var _11 : Type.alloc_vec_vec bool (Type.alloc_alloc_global);
  var _12 : Type.friday_formula;
  var _13 : ();
  var _14 : bool;
  var _15 : Type.friday_formula;
  var _16 : Type.friday_pasn;
  var _17 : Type.friday_pasn;
  var _18 : Type.friday_pasn;
  var _19 : bool;
  var _20 : Type.friday_formula;
  var _21 : Type.friday_pasn;
  var _22 : Type.friday_pasn;
  var _23 : Type.friday_pasn;
  {
    f_1 <- f;
    pa_2 <- pa;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _4 <- Type.friday_pasn_Pasn_ix pa_2;
    _6 <- Type.friday_pasn_Pasn_assign pa_2;
    _5 <- Len0.len _6;
    goto BB3
  }
  BB3 {
    _3 <- _4 = _5;
    switch (_3)
      | False -> goto BB7
      | _ -> goto BB4
      end
  }
  BB4 {
    assume { Resolve0.resolve _11 };
    _11 <- Type.friday_pasn_Pasn_assign pa_2;
    _10 <- Type.Friday_Assignment _11;
    goto BB5
  }
  BB5 {
    _9 <- _10;
    _8 <- _9;
    _12 <- f_1;
    _0 <- InterpFormula0.interp_formula _8 _12;
    goto BB6
  }
  BB6 {
    goto BB15
  }
  BB7 {
    _15 <- f_1;
    _18 <- pa_2;
    _17 <- _18;
    _16 <- Set0.set _17 true;
    goto BB11
  }
  BB8 {
    _0 <- true;
    goto BB10
  }
  BB9 {
    _20 <- f_1;
    _23 <- pa_2;
    _22 <- _23;
    _21 <- Set0.set _22 false;
    goto BB13
  }
  BB10 {
    goto BB16
  }
  BB11 {
    _14 <- inner _15 _16;
    goto BB12
  }
  BB12 {
    switch (_14)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB13 {
    _19 <- inner _20 _21;
    goto BB14
  }
  BB14 {
    _0 <- _19;
    goto BB10
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    return _0
  }
  
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Friday_Solver_Interface
  use Type
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool, type a = Type.alloc_alloc_global
  clone Friday_Impl2_Sat_Interface as Sat0
  clone Friday_Impl2_Invariant_Interface as Invariant0
  val solver [@cfg:stackify] (f : Type.friday_formula) : bool
    requires {Invariant0.invariant' f}
    ensures { result -> (exists a : (Type.friday_assignment) . Sat0.sat f a) }
    ensures { not result -> (forall a : (Type.friday_assignment) . Seq.length (Model0.model (Type.friday_assignment_Assignment_0 a)) = UInt64.to_int (Type.friday_formula_Formula_num_vars f) -> not (Sat0.sat f a)) }
    
end
module Friday_Solver
  use Type
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  clone Friday_Impl3_VarsInRange as VarsInRange1
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.friday_lit, type a = Type.alloc_alloc_global
  clone Friday_Impl0_VarsInRange as VarsInRange0 with function Model0.model = Model2.model,
  predicate VarsInRange0.vars_in_range = VarsInRange1.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = bool, type a = Type.alloc_alloc_global
  clone Friday_Impl3_Sat as Sat2 with function Model0.model = Model0.model
  clone Friday_Impl5_Sat as Sat1 with function Model0.model = Model2.model, predicate Sat0.sat = Sat2.sat
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.friday_clause,
  type a = Type.alloc_alloc_global
  clone Friday_Impl2_Sat as Sat0 with function Model0.model = Model1.model, predicate Sat0.sat = Sat1.sat
  clone Friday_Impl2_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = bool
  clone Friday_Impl1_Compatible as Compatible0 with function Model0.model = Model0.model
  clone Friday_Impl4_Invariant as Invariant1 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve0 with type t = bool, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = bool, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = bool, function Model0.model = Model0.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.friday_clause, type a = Type.alloc_alloc_global,
  function Model0.model = Model1.model
  clone Friday_Inner_Interface as Inner0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Compatible0.compatible = Compatible0.compatible,
  predicate Sat0.sat = Sat0.sat
  let rec cfg solver [@cfg:stackify] (f : Type.friday_formula) : bool
    requires {Invariant0.invariant' f}
    ensures { result -> (exists a : (Type.friday_assignment) . Sat0.sat f a) }
    ensures { not result -> (forall a : (Type.friday_assignment) . Seq.length (Model0.model (Type.friday_assignment_Assignment_0 a)) = UInt64.to_int (Type.friday_formula_Formula_num_vars f) -> not (Sat0.sat f a)) }
    
   = 
  var _0 : bool;
  var f_1 : Type.friday_formula;
  var _2 : ();
  var _3 : bool;
  var _4 : usize;
  var _5 : Type.alloc_vec_vec (Type.friday_clause) (Type.alloc_alloc_global);
  var _6 : ();
  var assign_7 : Type.alloc_vec_vec bool (Type.alloc_alloc_global);
  var i_8 : usize;
  var _9 : ();
  var _10 : ();
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : ();
  var _15 : borrowed (Type.alloc_vec_vec bool (Type.alloc_alloc_global));
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var base_19 : Type.friday_pasn;
  var _20 : Type.alloc_vec_vec bool (Type.alloc_alloc_global);
  var _21 : Type.friday_formula;
  var _22 : Type.friday_pasn;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _5 <- Type.friday_formula_Formula_clauses f_1;
    _4 <- Len0.len _5;
    goto BB1
  }
  BB1 {
    _3 <- _4 = (0 : usize);
    switch (_3)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- true;
    goto BB14
  }
  BB3 {
    _2 <- ();
    assign_7 <- New0.new ();
    goto BB4
  }
  BB4 {
    i_8 <- (0 : usize);
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant loop_invariant { UInt64.to_int i_8 <= UInt64.to_int (Type.friday_formula_Formula_num_vars f_1) };
    invariant len_invariant { Seq.length (Model0.model assign_7) = UInt64.to_int i_8 };
    _12 <- i_8;
    _13 <- Type.friday_formula_Formula_num_vars f_1;
    _11 <- _12 < _13;
    switch (_11)
      | False -> goto BB9
      | _ -> goto BB7
      end
  }
  BB7 {
    _15 <- borrow_mut assign_7;
    assign_7 <-  ^ _15;
    _14 <- Push0.push _15 false;
    goto BB8
  }
  BB8 {
    i_8 <- i_8 + (1 : usize);
    _10 <- ();
    goto BB6
  }
  BB9 {
    _9 <- ();
    assume { Resolve0.resolve _20 };
    _20 <- assign_7;
    base_19 <- Type.Friday_Pasn _20 (0 : usize);
    goto BB10
  }
  BB10 {
    _21 <- f_1;
    _22 <- base_19;
    _0 <- Inner0.inner _21 _22;
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
