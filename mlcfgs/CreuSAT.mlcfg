module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type creusat_lit_lit  = 
    | CreuSat_Lit_Lit usize bool
    
  let function creusat_lit_lit_Lit_idx (self : creusat_lit_lit) : usize = 
    match (self) with
      | CreuSat_Lit_Lit a _ -> a
      end
  let function creusat_lit_lit_Lit_polarity (self : creusat_lit_lit) : bool = 
    match (self) with
      | CreuSat_Lit_Lit _ a -> a
      end
  type core_marker_phantomdata 't = 
    ()
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type creusat_clause_clause  = 
    | CreuSat_Clause_Clause bool (alloc_vec_vec (creusat_lit_lit) (alloc_alloc_global))
    
  let function creusat_clause_clause_Clause_rest (self : creusat_clause_clause) : alloc_vec_vec (creusat_lit_lit) (alloc_alloc_global)
    
   = 
    match (self) with
      | CreuSat_Clause_Clause _ a -> a
      end
  let function creusat_clause_clause_Clause_deleted (self : creusat_clause_clause) : bool = 
    match (self) with
      | CreuSat_Clause_Clause a _ -> a
      end
  type creusat_formula_formula  = 
    | CreuSat_Formula_Formula (alloc_vec_vec (creusat_clause_clause) (alloc_alloc_global)) usize
    
  let function creusat_formula_formula_Formula_clauses (self : creusat_formula_formula) : alloc_vec_vec (creusat_clause_clause) (alloc_alloc_global)
    
   = 
    match (self) with
      | CreuSat_Formula_Formula a _ -> a
      end
  let function creusat_formula_formula_Formula_num_vars (self : creusat_formula_formula) : usize = 
    match (self) with
      | CreuSat_Formula_Formula _ a -> a
      end
  type creusat_solver_solver  = 
    | CreuSat_Solver_Solver usize usize usize usize usize usize usize (alloc_vec_vec usize (alloc_alloc_global))
    
  let function creusat_solver_solver_Solver_num_conflicts (self : creusat_solver_solver) : usize = 
    match (self) with
      | CreuSat_Solver_Solver _ _ a _ _ _ _ _ -> a
      end
  let function creusat_solver_solver_Solver_num_lemmas (self : creusat_solver_solver) : usize = 
    match (self) with
      | CreuSat_Solver_Solver a _ _ _ _ _ _ _ -> a
      end
  let function creusat_solver_solver_Solver_max_lemmas (self : creusat_solver_solver) : usize = 
    match (self) with
      | CreuSat_Solver_Solver _ a _ _ _ _ _ _ -> a
      end
  let function creusat_solver_solver_Solver_initial_len (self : creusat_solver_solver) : usize = 
    match (self) with
      | CreuSat_Solver_Solver _ _ _ a _ _ _ _ -> a
      end
  let function creusat_solver_solver_Solver_perm_diff (self : creusat_solver_solver) : alloc_vec_vec usize (alloc_alloc_global)
    
   = 
    match (self) with
      | CreuSat_Solver_Solver _ _ _ _ _ _ _ a -> a
      end
  let function creusat_solver_solver_Solver_fast (self : creusat_solver_solver) : usize = 
    match (self) with
      | CreuSat_Solver_Solver _ _ _ _ _ a _ _ -> a
      end
  let function creusat_solver_solver_Solver_slow (self : creusat_solver_solver) : usize = 
    match (self) with
      | CreuSat_Solver_Solver _ _ _ _ _ _ a _ -> a
      end
  type creusat_assignments_assignments  = 
    | CreuSat_Assignments_Assignments (alloc_vec_vec uint8 (alloc_alloc_global))
    
  let function creusat_assignments_assignments_Assignments_0 (self : creusat_assignments_assignments) : alloc_vec_vec uint8 (alloc_alloc_global)
    
   = 
    match (self) with
      | CreuSat_Assignments_Assignments a -> a
      end
  type creusat_trail_reason  = 
    | CreuSat_Trail_Reason_Decision
    | CreuSat_Trail_Reason_Unit usize
    | CreuSat_Trail_Reason_Long usize
    
  let function creusat_trail_reason_Long_0 (self : creusat_trail_reason) : usize = 
    match (self) with
      | CreuSat_Trail_Reason_Decision -> any usize
      | CreuSat_Trail_Reason_Unit _ -> any usize
      | CreuSat_Trail_Reason_Long a -> a
      end
  let function creusat_trail_reason_Unit_0 (self : creusat_trail_reason) : usize = 
    match (self) with
      | CreuSat_Trail_Reason_Decision -> any usize
      | CreuSat_Trail_Reason_Unit a -> a
      | CreuSat_Trail_Reason_Long _ -> any usize
      end
  type creusat_trail_step  = 
    | CreuSat_Trail_Step (creusat_lit_lit) usize (creusat_trail_reason)
    
  let function creusat_trail_step_Step_lit (self : creusat_trail_step) : creusat_lit_lit = 
    match (self) with
      | CreuSat_Trail_Step a _ _ -> a
      end
  let function creusat_trail_step_Step_reason (self : creusat_trail_step) : creusat_trail_reason = 
    match (self) with
      | CreuSat_Trail_Step _ _ a -> a
      end
  type creusotcontracts_logic_ghost_ghost 't = 
    | CreusotContracts_Logic_Ghost_Ghost opaque_ptr
    
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't = 
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type creusat_trail_trail  = 
    | CreuSat_Trail_Trail (creusat_assignments_assignments) (alloc_vec_vec usize (alloc_alloc_global)) (alloc_vec_vec (creusat_trail_step) (alloc_alloc_global)) usize (alloc_vec_vec usize (alloc_alloc_global))
    
  let function creusat_trail_trail_Trail_trail (self : creusat_trail_trail) : alloc_vec_vec (creusat_trail_step) (alloc_alloc_global)
    
   = 
    match (self) with
      | CreuSat_Trail_Trail _ _ a _ _ -> a
      end
  let function creusat_trail_trail_Trail_assignments (self : creusat_trail_trail) : creusat_assignments_assignments = 
    match (self) with
      | CreuSat_Trail_Trail a _ _ _ _ -> a
      end
  let function creusat_trail_trail_Trail_lit_to_level (self : creusat_trail_trail) : alloc_vec_vec usize (alloc_alloc_global)
    
   = 
    match (self) with
      | CreuSat_Trail_Trail _ a _ _ _ -> a
      end
  let function creusat_trail_trail_Trail_decisions (self : creusat_trail_trail) : alloc_vec_vec usize (alloc_alloc_global)
    
   = 
    match (self) with
      | CreuSat_Trail_Trail _ _ _ _ a -> a
      end
  let function creusat_trail_trail_Trail_curr_i (self : creusat_trail_trail) : usize = 
    match (self) with
      | CreuSat_Trail_Trail _ _ _ a _ -> a
      end
  type creusat_conflictanalysis_conflict  = 
    | CreuSat_ConflictAnalysis_Conflict_Ground
    | CreuSat_ConflictAnalysis_Conflict_Unit (creusat_clause_clause)
    | CreuSat_ConflictAnalysis_Conflict_Learned usize (creusat_clause_clause)
    | CreuSat_ConflictAnalysis_Conflict_Panic
    
  let function creusat_conflictanalysis_conflict_Learned_0 (self : creusat_conflictanalysis_conflict) : usize = 
    match (self) with
      | CreuSat_ConflictAnalysis_Conflict_Ground -> any usize
      | CreuSat_ConflictAnalysis_Conflict_Unit _ -> any usize
      | CreuSat_ConflictAnalysis_Conflict_Learned a _ -> a
      | CreuSat_ConflictAnalysis_Conflict_Panic -> any usize
      end
  let function creusat_conflictanalysis_conflict_Learned_1 (self : creusat_conflictanalysis_conflict) : creusat_clause_clause
    
   = 
    match (self) with
      | CreuSat_ConflictAnalysis_Conflict_Ground -> any creusat_clause_clause
      | CreuSat_ConflictAnalysis_Conflict_Unit _ -> any creusat_clause_clause
      | CreuSat_ConflictAnalysis_Conflict_Learned _ a -> a
      | CreuSat_ConflictAnalysis_Conflict_Panic -> any creusat_clause_clause
      end
  let function creusat_conflictanalysis_conflict_Unit_0 (self : creusat_conflictanalysis_conflict) : creusat_clause_clause
    
   = 
    match (self) with
      | CreuSat_ConflictAnalysis_Conflict_Ground -> any creusat_clause_clause
      | CreuSat_ConflictAnalysis_Conflict_Unit a -> a
      | CreuSat_ConflictAnalysis_Conflict_Learned _ _ -> any creusat_clause_clause
      | CreuSat_ConflictAnalysis_Conflict_Panic -> any creusat_clause_clause
      end
  type creusat_decision_node  = 
    | CreuSat_Decision_Node usize usize usize
    
  let function creusat_decision_node_Node_ts (self : creusat_decision_node) : usize = 
    match (self) with
      | CreuSat_Decision_Node _ _ a -> a
      end
  let function creusat_decision_node_Node_prev (self : creusat_decision_node) : usize = 
    match (self) with
      | CreuSat_Decision_Node _ a _ -> a
      end
  let function creusat_decision_node_Node_next (self : creusat_decision_node) : usize = 
    match (self) with
      | CreuSat_Decision_Node a _ _ -> a
      end
  type creusat_decision_decisions  = 
    | CreuSat_Decision_Decisions (alloc_vec_vec (creusat_decision_node) (alloc_alloc_global)) usize usize usize
    
  let function creusat_decision_decisions_Decisions_linked_list (self : creusat_decision_decisions) : alloc_vec_vec (creusat_decision_node) (alloc_alloc_global)
    
   = 
    match (self) with
      | CreuSat_Decision_Decisions a _ _ _ -> a
      end
  let function creusat_decision_decisions_Decisions_search (self : creusat_decision_decisions) : usize = 
    match (self) with
      | CreuSat_Decision_Decisions _ _ _ a -> a
      end
  let function creusat_decision_decisions_Decisions_start (self : creusat_decision_decisions) : usize = 
    match (self) with
      | CreuSat_Decision_Decisions _ _ a _ -> a
      end
  let function creusat_decision_decisions_Decisions_timestamp (self : creusat_decision_decisions) : usize = 
    match (self) with
      | CreuSat_Decision_Decisions _ a _ _ -> a
      end
  type creusat_solver_satresult  = 
    | CreuSat_Solver_SatResult_Sat (alloc_vec_vec uint8 (alloc_alloc_global))
    | CreuSat_Solver_SatResult_Unsat
    | CreuSat_Solver_SatResult_Unknown
    | CreuSat_Solver_SatResult_Err
    
  type creusat_watches_watcher  = 
    | CreuSat_Watches_Watcher usize
    
  let function creusat_watches_watcher_Watcher_cref (self : creusat_watches_watcher) : usize = 
    match (self) with
      | CreuSat_Watches_Watcher a -> a
      end
  type creusat_watches_watches  = 
    | CreuSat_Watches_Watches (alloc_vec_vec (alloc_vec_vec (creusat_watches_watcher) (alloc_alloc_global)) (alloc_alloc_global))
    
  let function creusat_watches_watches_Watches_watches (self : creusat_watches_watches) : alloc_vec_vec (alloc_vec_vec (creusat_watches_watcher) (alloc_alloc_global)) (alloc_alloc_global)
    
   = 
    match (self) with
      | CreuSat_Watches_Watches a -> a
      end
  type core_result_result 't 'e = 
    | Core_Result_Result_Ok 't
    | Core_Result_Result_Err 'e
    
  let function core_result_result_Err_0 (self : core_result_result 't 'e) : 'e = 
    match (self) with
      | Core_Result_Result_Ok _ -> any 'e
      | Core_Result_Result_Err a -> a
      end
  let function core_result_result_Ok_0 (self : core_result_result 't 'e) : 't = 
    match (self) with
      | Core_Result_Result_Ok a -> a
      | Core_Result_Result_Err _ -> any 't
      end
  type creusat_solver_conflictresult  = 
    | CreuSat_Solver_ConflictResult_Ok
    | CreuSat_Solver_ConflictResult_Err
    | CreuSat_Solver_ConflictResult_Ground
    | CreuSat_Solver_ConflictResult_Continue
    
end
module CreuSat_Lit_Impl1_New_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  val new [@cfg:stackify] (idx : usize) (polarity : bool) : Type.creusat_lit_lit
end
module CreuSat_Lit_Impl1_New
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  let rec cfg new [@cfg:stackify] (idx : usize) (polarity : bool) : Type.creusat_lit_lit = 
  var _0 : Type.creusat_lit_lit;
  var idx_1 : usize;
  var polarity_2 : bool;
  var _3 : usize;
  var _4 : bool;
  {
    idx_1 <- idx;
    polarity_2 <- polarity;
    goto BB0
  }
  BB0 {
    _3 <- idx_1;
    _4 <- polarity_2;
    _0 <- Type.CreuSat_Lit_Lit _3 _4;
    return _0
  }
  
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use Type
  use seq.Seq
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use Type
  use seq.Seq
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_FromElem_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Alloc_Vec_FromElem
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.alloc_vec_vec t a,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.alloc_vec_vec t a,
  type modelTy = ModelTy0.modelTy
end
module CreuSat_Solver_Impl0_New_Interface
  use prelude.Prelude
  use Type
  val new [@cfg:stackify] (f : Type.creusat_formula_formula) : Type.creusat_solver_solver
end
module CreuSat_Solver_Impl0_New
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = usize, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model
  let rec cfg new [@cfg:stackify] (f : Type.creusat_formula_formula) : Type.creusat_solver_solver = 
  var _0 : Type.creusat_solver_solver;
  var f_1 : Type.creusat_formula_formula;
  var _2 : usize;
  var _3 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _4 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _5 : usize;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _3 <- Type.creusat_formula_formula_Formula_clauses f_1;
    _2 <- Len0.len _3;
    goto BB1
  }
  BB1 {
    _5 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    _4 <- FromElem0.from_elem (0 : usize) _5;
    goto BB2
  }
  BB2 {
    _0 <- Type.CreuSat_Solver_Solver (0 : usize) (2000 : usize) (0 : usize) _2 (300 : usize) (16777216 : usize) (16777216 : usize) _4;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module CreuSat_Solver_Impl0_IncreaseNumConflicts_Interface
  use prelude.Prelude
  use Type
  val increase_num_conflicts [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) : ()
end
module CreuSat_Solver_Impl0_IncreaseNumConflicts
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_solver_solver
  let rec cfg increase_num_conflicts [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) : () = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_solver_solver);
  var _2 : bool;
  var _3 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Type.creusat_solver_solver_Solver_num_conflicts ( * self_1);
    _2 <- _3 < (18446744073709551615 : usize);
    switch (_2)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    self_1 <- { self_1 with current = (let Type.CreuSat_Solver_Solver a b c d e f g h =  * self_1 in Type.CreuSat_Solver_Solver a b (Type.creusat_solver_solver_Solver_num_conflicts ( * self_1) + (1 : usize)) d e f g h) };
    assume { Resolve0.resolve self_1 };
    _0 <- ();
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    _0 <- ();
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreuSat_Solver_Impl0_IncreaseNumLemmas_Interface
  use prelude.Prelude
  use Type
  val increase_num_lemmas [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) : ()
end
module CreuSat_Solver_Impl0_IncreaseNumLemmas
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_solver_solver
  let rec cfg increase_num_lemmas [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) : () = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_solver_solver);
  var _2 : bool;
  var _3 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Type.creusat_solver_solver_Solver_num_lemmas ( * self_1);
    _2 <- _3 < (18446744073709551615 : usize);
    switch (_2)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    self_1 <- { self_1 with current = (let Type.CreuSat_Solver_Solver a b c d e f g h =  * self_1 in Type.CreuSat_Solver_Solver (Type.creusat_solver_solver_Solver_num_lemmas ( * self_1) + (1 : usize)) b c d e f g h) };
    assume { Resolve0.resolve self_1 };
    _0 <- ();
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    _0 <- ();
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreuSat_Util_UpdateFast_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  val update_fast [@cfg:stackify] (fast : borrowed usize) (lbd : usize) : ()
end
module CreuSat_Util_UpdateFast
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = usize
  let rec cfg update_fast [@cfg:stackify] (fast : borrowed usize) (lbd : usize) : () = 
  var _0 : ();
  var fast_1 : borrowed usize;
  var lbd_2 : usize;
  var _3 : usize;
  var _4 : usize;
  var _5 : bool;
  var lbd_shl_fifteen_6 : usize;
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : bool;
  var _11 : usize;
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : usize;
  var _16 : usize;
  {
    fast_1 <- fast;
    lbd_2 <- lbd;
    goto BB0
  }
  BB0 {
    _4 <-  * fast_1;
    _5 <- (32 : usize) = (0 : usize);
    assert { not _5 };
    goto BB1
  }
  BB1 {
    _3 <- _4 / (32 : usize);
    fast_1 <- { fast_1 with current = ( * fast_1 - _3) };
    _8 <- lbd_2;
    _10 <- (32768 : usize) = (0 : usize);
    assert { not _10 };
    goto BB2
  }
  BB2 {
    _9 <- (18446744073709551615 : usize) / (32768 : usize);
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    _11 <- lbd_2;
    lbd_shl_fifteen_6 <- _11 * (32768 : usize);
    goto BB5
  }
  BB4 {
    lbd_shl_fifteen_6 <- lbd_2;
    goto BB5
  }
  BB5 {
    _14 <-  * fast_1;
    _13 <- (18446744073709551615 : usize) - _14;
    _15 <- lbd_shl_fifteen_6;
    _12 <- _13 > _15;
    switch (_12)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    _16 <- lbd_shl_fifteen_6;
    fast_1 <- { fast_1 with current = ( * fast_1 + _16) };
    assume { Resolve0.resolve fast_1 };
    _0 <- ();
    goto BB8
  }
  BB7 {
    assume { Resolve0.resolve fast_1 };
    _0 <- ();
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module CreuSat_Util_UpdateSlow_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  val update_slow [@cfg:stackify] (slow : borrowed usize) (lbd : usize) : ()
end
module CreuSat_Util_UpdateSlow
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = usize
  let rec cfg update_slow [@cfg:stackify] (slow : borrowed usize) (lbd : usize) : () = 
  var _0 : ();
  var slow_1 : borrowed usize;
  var lbd_2 : usize;
  var _3 : usize;
  var _4 : usize;
  var _5 : bool;
  var lbd_shl_five_6 : usize;
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : bool;
  var _11 : usize;
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : usize;
  var _16 : usize;
  {
    slow_1 <- slow;
    lbd_2 <- lbd;
    goto BB0
  }
  BB0 {
    _4 <-  * slow_1;
    _5 <- (32768 : usize) = (0 : usize);
    assert { not _5 };
    goto BB1
  }
  BB1 {
    _3 <- _4 / (32768 : usize);
    slow_1 <- { slow_1 with current = ( * slow_1 - _3) };
    _8 <- lbd_2;
    _10 <- (32 : usize) = (0 : usize);
    assert { not _10 };
    goto BB2
  }
  BB2 {
    _9 <- (18446744073709551615 : usize) / (32 : usize);
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    _11 <- lbd_2;
    lbd_shl_five_6 <- _11 * (32 : usize);
    goto BB5
  }
  BB4 {
    lbd_shl_five_6 <- lbd_2;
    goto BB5
  }
  BB5 {
    _14 <-  * slow_1;
    _13 <- (18446744073709551615 : usize) - _14;
    _15 <- lbd_shl_five_6;
    _12 <- _13 > _15;
    switch (_12)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    _16 <- lbd_shl_five_6;
    slow_1 <- { slow_1 with current = ( * slow_1 + _16) };
    assume { Resolve0.resolve slow_1 };
    _0 <- ();
    goto BB8
  }
  BB7 {
    assume { Resolve0.resolve slow_1 };
    _0 <- ();
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module CreuSat_Assignments_RandInRange_Interface
  use mach.int.UInt64
  use prelude.UInt8
  use mach.int.Int
  use prelude.Prelude
  val rand_in_range [@cfg:stackify] (l : usize) (u : usize) : uint8
    ensures { UInt64.to_int l <= UInt8.to_int result && UInt8.to_int result < UInt64.to_int u }
    
end
module CreuSat_Assignments_RandInRange
  use mach.int.UInt64
  use prelude.UInt8
  use mach.int.Int
  use prelude.Prelude
  val rand_in_range [@cfg:stackify] (l : usize) (u : usize) : uint8
    ensures { UInt64.to_int l <= UInt8.to_int result && UInt8.to_int result < UInt64.to_int u }
    
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreuSat_Logic_LogicAssignments_Impl0_ModelTy
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  type modelTy  = 
    Seq.seq uint8
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreuSat_Logic_LogicAssignments_Impl0_Model_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function model (self : Type.creusat_assignments_assignments) : Seq.seq uint8
end
module CreuSat_Logic_LogicAssignments_Impl0_Model
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = uint8, type a = Type.alloc_alloc_global
  function model (self : Type.creusat_assignments_assignments) : Seq.seq uint8 = 
    Model0.model (Type.creusat_assignments_assignments_Assignments_0 self)
end
module CreuSat_Logic_LogicAssignments_Impl0
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusat_assignments_assignments,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusat_assignments_assignments,
  type modelTy = ModelTy0.modelTy
end
module CreuSat_Assignments_Impl0_Len_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusat_assignments_assignments) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreuSat_Assignments_Impl0_Len
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = uint8, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model
  let rec cfg len [@cfg:stackify] (self : Type.creusat_assignments_assignments) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
   = 
  var _0 : usize;
  var self_1 : Type.creusat_assignments_assignments;
  var _2 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- Type.creusat_assignments_assignments_Assignments_0 self_1;
    _0 <- Len0.len _2;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface
  use Type
  use mach.int.Int
  function index_logic [@inline:trivial] (self : Type.creusat_lit_lit) : int
end
module CreuSat_Logic_LogicLit_Impl0_IndexLogic
  use Type
  use mach.int.Int
  use mach.int.UInt64
  function index_logic [@inline:trivial] (self : Type.creusat_lit_lit) : int = 
    UInt64.to_int (Type.creusat_lit_lit_Lit_idx self)
end
module CreuSat_Logic_LogicClause_Impl0_Model_Interface
  use Type
  use seq.Seq
  function model (self : Type.creusat_clause_clause) : Seq.seq (Type.creusat_lit_lit)
end
module CreuSat_Logic_LogicClause_Impl0_Model
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  function model (self : Type.creusat_clause_clause) : Seq.seq (Type.creusat_lit_lit) = 
    Model0.model (Type.creusat_clause_clause_Clause_rest self)
end
module CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface
  use Type
  function is_positive_logic [@inline:trivial] (self : Type.creusat_lit_lit) : bool
end
module CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic
  use Type
  function is_positive_logic [@inline:trivial] (self : Type.creusat_lit_lit) : bool = 
    Type.creusat_lit_lit_Lit_polarity self
end
module CreuSat_Logic_LogicLit_Impl1_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.creusat_lit_lit) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicLit_Impl1_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  predicate sat_inner (self : Type.creusat_lit_lit) (a : Seq.seq uint8) = 
    if IsPositiveLogic0.is_positive_logic self then
      UInt8.to_int (Seq.get a (IndexLogic0.index_logic self)) = 1
    else
      UInt8.to_int (Seq.get a (IndexLogic0.index_logic self)) = 0
    
end
module CreuSat_Logic_LogicLit_Impl1_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.creusat_lit_lit) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicLit_Impl1_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  predicate unsat_inner (self : Type.creusat_lit_lit) (a : Seq.seq uint8) = 
    if IsPositiveLogic0.is_positive_logic self then
      UInt8.to_int (Seq.get a (IndexLogic0.index_logic self)) = 0
    else
      UInt8.to_int (Seq.get a (IndexLogic0.index_logic self)) = 1
    
end
module CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate post_unit_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicClause_Impl1_PostUnitInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate post_unit_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model self) && SatInner0.sat_inner (Seq.get (Model0.model self) i) a && (forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && j <> i -> UnsatInner0.unsat_inner (Seq.get (Model0.model self) j) a)
end
module CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate clause_post_with_regards_to_inner (c : Type.creusat_clause_clause) (a : Seq.seq uint8) (j : int)
end
module CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  predicate clause_post_with_regards_to_inner (c : Type.creusat_clause_clause) (a : Seq.seq uint8) (j : int) = 
    PostUnitInner0.post_unit_inner c a && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) && IndexLogic0.index_logic (Seq.get (Model0.model c) i) = j && SatInner0.sat_inner (Seq.get (Model0.model c) i) a)
end
module CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate long_are_post_unit_inner (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Seq.seq uint8)
    
end
module CreuSat_Logic_LogicTrail_LongArePostUnitInner
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  use mach.int.UInt64
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner_Interface as ClausePostWithRegardsToInner0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  predicate long_are_post_unit_inner (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Seq.seq uint8)
    
   = 
    forall j : (int) . 0 <= j && j < Seq.length trail -> match (Type.creusat_trail_step_Step_reason (Seq.get trail j)) with
      | Type.CreuSat_Trail_Reason_Long k -> ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) a (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get trail j)))
      | _ -> true
      end
end
module CreuSat_Logic_Logic_Unset_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unset (v : uint8)
end
module CreuSat_Logic_Logic_Unset
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  predicate unset (v : uint8) = 
    if UInt8.to_int v >= 2 then true else false
end
module CreuSat_Logic_LogicLit_Impl1_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.creusat_lit_lit) (n : int)
end
module CreuSat_Logic_LogicLit_Impl1_Invariant
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  predicate invariant' (self : Type.creusat_lit_lit) (n : int) = 
    IndexLogic0.index_logic self < n
end
module CreuSat_Logic_LogicTrail_Impl0_Invariant_Interface
  use Type
  predicate invariant' (self : Type.creusat_trail_reason) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_Impl0_Invariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  predicate invariant' (self : Type.creusat_trail_reason) (f : Type.creusat_formula_formula) = 
    match (self) with
      | Type.CreuSat_Trail_Reason_Long i -> 0 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) && Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int i))) > 1
      | Type.CreuSat_Trail_Reason_Unit i -> 0 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) && Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int i))) = 1
      | _ -> true
      end
end
module CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface
  use Type
  predicate invariant' (self : Type.creusat_trail_step) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_Impl1_Invariant
  use Type
  use mach.int.UInt64
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  predicate invariant' (self : Type.creusat_trail_step) (f : Type.creusat_formula_formula) = 
    Invariant0.invariant' (Type.creusat_trail_step_Step_lit self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) && Invariant1.invariant' (Type.creusat_trail_step_Step_reason self) f
end
module CreuSat_Logic_LogicTrail_CrefsInRange_Interface
  use seq.Seq
  use Type
  predicate crefs_in_range (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_CrefsInRange
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface as Invariant0
  predicate crefs_in_range (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) = 
    forall i : (int) . 0 <= i && i < Seq.length trail -> Invariant0.invariant' (Seq.get trail i) f
end
module CreuSat_Logic_LogicTrail_TrailInvariant_Interface
  use seq.Seq
  use Type
  predicate trail_invariant (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_TrailInvariant
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicTrail_CrefsInRange_Interface as CrefsInRange0
  predicate trail_invariant (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) = 
    CrefsInRange0.crefs_in_range trail f
end
module CreuSat_Logic_LogicClause_VarsInRangeInner_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate vars_in_range_inner (s : Seq.seq (Type.creusat_lit_lit)) (n : int)
end
module CreuSat_Logic_LogicClause_VarsInRangeInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  predicate vars_in_range_inner (s : Seq.seq (Type.creusat_lit_lit)) (n : int) = 
    forall i : (int) . 0 <= i && i < Seq.length s -> Invariant0.invariant' (Seq.get s i) n
end
module CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface
  use seq.Seq
  use Type
  predicate no_duplicate_indexes_inner (s : Seq.seq (Type.creusat_lit_lit))
end
module CreuSat_Logic_LogicClause_NoDuplicateIndexesInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  predicate no_duplicate_indexes_inner (s : Seq.seq (Type.creusat_lit_lit)) = 
    forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length s && 0 <= k && k < j -> not (IndexLogic0.index_logic (Seq.get s k) = IndexLogic0.index_logic (Seq.get s j))
end
module CreuSat_Logic_LogicClause_InvariantInternal_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate invariant_internal (s : Seq.seq (Type.creusat_lit_lit)) (n : int)
end
module CreuSat_Logic_LogicClause_InvariantInternal
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  predicate invariant_internal (s : Seq.seq (Type.creusat_lit_lit)) (n : int) = 
    VarsInRangeInner0.vars_in_range_inner s n && NoDuplicateIndexesInner0.no_duplicate_indexes_inner s
end
module CreuSat_Logic_LogicClause_Impl2_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.creusat_clause_clause) (n : int)
end
module CreuSat_Logic_LogicClause_Impl2_Invariant
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_InvariantInternal_Interface as InvariantInternal0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate invariant' (self : Type.creusat_clause_clause) (n : int) = 
    InvariantInternal0.invariant_internal (Model0.model self) n
end
module CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface
  use Type
  predicate invariant_old (self : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicFormula_Impl1_InvariantOld
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  predicate invariant_old (self : Type.creusat_formula_formula) = 
    (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) -> Invariant0.invariant' (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) i) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self))) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) -> Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) i)) >= 1)
end
module CreuSat_Logic_LogicFormula_Impl0_Model_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  function model (self : Type.creusat_formula_formula) : (Seq.seq (Type.creusat_clause_clause), int)
end
module CreuSat_Logic_LogicFormula_Impl0_Model
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function model (self : Type.creusat_formula_formula) : (Seq.seq (Type.creusat_clause_clause), int) = 
    (Model0.model (Type.creusat_formula_formula_Formula_clauses self), UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self))
end
module CreuSat_Logic_LogicFormula_FormulaInvariant_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate formula_invariant (f : (Seq.seq (Type.creusat_clause_clause), int))
end
module CreuSat_Logic_LogicFormula_FormulaInvariant
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  predicate formula_invariant (f : (Seq.seq (Type.creusat_clause_clause), int)) = 
    (forall i : (int) . 0 <= i && i < Seq.length (let (a, _) = f in a) -> Invariant0.invariant' (Seq.get (let (a, _) = f in a) i) (let (_, a) = f in a)) && (forall i : (int) . 0 <= i && i < Seq.length (let (a, _) = f in a) -> Seq.length (Model0.model (Seq.get (let (a, _) = f in a) i)) > 0)
end
module CreuSat_Logic_LogicFormula_Impl0_ModelTy
  use seq.Seq
  use Type
  use mach.int.Int
  type modelTy  = 
    (Seq.seq (Type.creusat_clause_clause), int)
end
module CreuSat_Logic_LogicFormula_Impl0
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusat_formula_formula,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusat_formula_formula,
  type modelTy = ModelTy0.modelTy
end
module CreuSat_Logic_LogicClause_Impl0_ModelTy
  use seq.Seq
  use Type
  type modelTy  = 
    Seq.seq (Type.creusat_lit_lit)
end
module CreuSat_Logic_LogicClause_Impl0
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusat_clause_clause,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusat_clause_clause,
  type modelTy = ModelTy0.modelTy
end
module CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  predicate invariant' (self : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicFormula_Impl1_Invariant
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  clone CreuSat_Logic_LogicFormula_Impl0_Model_Interface as Model0
  predicate invariant' (self : Type.creusat_formula_formula) = 
    FormulaInvariant0.formula_invariant (Model0.model self)
  axiom invariant'_spec : forall self : Type.creusat_formula_formula . invariant' self = InvariantOld0.invariant_old self
end
module CreuSat_Logic_LogicFormula_Impl1_Invariant_Impl
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model2 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model2.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant0.invariant', function Model1.model = Model2.model
  let rec ghost function invariant' (self : Type.creusat_formula_formula) : bool
    ensures { result = InvariantOld0.invariant_old self }
    
   = 
    let a' = Model0.model self in FormulaInvariant0.formula_invariant a'
end
module CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface
  use Type
  predicate invariant' (self : Type.creusat_assignments_assignments) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicAssignments_Impl1_Invariant
  use Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.UInt8
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate invariant' (self : Type.creusat_assignments_assignments) (f : Type.creusat_formula_formula) = 
    UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) = Seq.length (Model0.model self) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> UInt8.to_int (Seq.get (Model0.model self) i) <= 3)
end
module CreuSat_Logic_LogicLit_Impl1_Sat_Interface
  use Type
  predicate sat (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicLit_Impl1_Sat
  use Type
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate sat (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) = 
    SatInner0.sat_inner self (Model0.model a)
end
module CreusotContracts_Logic_Ghost_Impl0_Model_Interface
  type t
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Model
  type t
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreuSat_Logic_LogicTrail_LemmaAssignMaintainsPostForEach_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  function lemma_assign_maintains_post_for_each (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaAssignMaintainsPostForEach
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  function lemma_assign_maintains_post_for_each (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit) : ()
    
   = 
    ()
  axiom lemma_assign_maintains_post_for_each_spec : forall f : Type.creusat_formula_formula, a : Type.creusat_assignments_assignments, lit : Type.creusat_lit_lit . Unset0.unset (Seq.get (Model0.model a) (IndexLogic0.index_logic lit)) -> Invariant0.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) -> Invariant1.invariant' f -> Invariant2.invariant' a f -> (forall i : (int) . 0 <= i && i < Seq.length (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Model0.model a) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Seq.set (Model0.model a) (IndexLogic0.index_logic lit) (1 : uint8))) && (forall i : (int) . 0 <= i && i < Seq.length (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Model0.model a) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Seq.set (Model0.model a) (IndexLogic0.index_logic lit) (0 : uint8)))
end
module CreuSat_Logic_LogicTrail_LemmaAssignMaintainsPostForEach_Impl
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model3 with function Model0.model = Model1.model
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant3 with function Model0.model = Model4.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model4.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant3.invariant', function Model1.model = Model4.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model3.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant2 with function Model0.model = Model0.model
  let rec ghost function lemma_assign_maintains_post_for_each (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit) : ()
    requires {Unset0.unset (Seq.get (Model0.model a) (IndexLogic0.index_logic lit))}
    requires {Invariant0.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Invariant1.invariant' f}
    requires {Invariant2.invariant' a f}
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Model0.model a) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Seq.set (Model0.model a) (IndexLogic0.index_logic lit) (0 : uint8)) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Model0.model a) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Seq.set (Model0.model a) (IndexLogic0.index_logic lit) (1 : uint8)) }
    
   = 
    ()
end
module CreuSat_Logic_LogicTrail_LemmaAssignMaintainsForEachToPost_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  use Type
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_TrailInvariant_Interface as TrailInvariant0
  clone CreuSat_Logic_LogicTrail_CrefsInRange_Interface as CrefsInRange0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function lemma_assign_maintains_for_each_to_post (v : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaAssignMaintainsForEachToPost
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  use Type
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_TrailInvariant_Interface as TrailInvariant0
  clone CreuSat_Logic_LogicTrail_CrefsInRange_Interface as CrefsInRange0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function lemma_assign_maintains_for_each_to_post (v : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit) : ()
    
   = 
    ()
  axiom lemma_assign_maintains_for_each_to_post_spec : forall v : Seq.seq (Type.creusat_trail_step), f : Type.creusat_formula_formula, a : Type.creusat_assignments_assignments, lit : Type.creusat_lit_lit . (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) -> PostUnitInner0.post_unit_inner (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Model1.model a) -> PostUnitInner0.post_unit_inner (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Seq.set (Model1.model a) (IndexLogic0.index_logic lit) (0 : uint8))) -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) -> PostUnitInner0.post_unit_inner (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Model1.model a) -> PostUnitInner0.post_unit_inner (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Seq.set (Model1.model a) (IndexLogic0.index_logic lit) (1 : uint8))) -> LongArePostUnitInner0.long_are_post_unit_inner v f (Model1.model a) -> Unset0.unset (Seq.get (Model1.model a) (IndexLogic0.index_logic lit)) -> Invariant0.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) -> CrefsInRange0.crefs_in_range v f -> TrailInvariant0.trail_invariant v f -> Invariant1.invariant' f -> Invariant2.invariant' a f -> LongArePostUnitInner0.long_are_post_unit_inner v f (Seq.set (Model1.model a) (IndexLogic0.index_logic lit) (1 : uint8)) && LongArePostUnitInner0.long_are_post_unit_inner v f (Seq.set (Model1.model a) (IndexLogic0.index_logic lit) (0 : uint8))
end
module CreuSat_Logic_LogicTrail_LemmaAssignMaintainsForEachToPost_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model3 with function Model0.model = Model5.model
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model3.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant5 with function Model0.model = Model3.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant2 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant4 with function Model0.model = Model0.model,
  function Model1.model = Model3.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant3 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant4.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model4 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model1.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model4.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  let rec ghost function lemma_assign_maintains_for_each_to_post (v : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit) : ()
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) -> PostUnitInner0.post_unit_inner (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Model1.model a) -> PostUnitInner0.post_unit_inner (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Seq.set (Model1.model a) (IndexLogic0.index_logic lit) (0 : uint8))}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) -> PostUnitInner0.post_unit_inner (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Model1.model a) -> PostUnitInner0.post_unit_inner (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Seq.set (Model1.model a) (IndexLogic0.index_logic lit) (1 : uint8))}
    requires {LongArePostUnitInner0.long_are_post_unit_inner v f (Model1.model a)}
    requires {Unset0.unset (Seq.get (Model1.model a) (IndexLogic0.index_logic lit))}
    requires {Invariant0.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {CrefsInRange0.crefs_in_range v f}
    requires {TrailInvariant0.trail_invariant v f}
    requires {Invariant1.invariant' f}
    requires {Invariant2.invariant' a f}
    ensures { LongArePostUnitInner0.long_are_post_unit_inner v f (Seq.set (Model1.model a) (IndexLogic0.index_logic lit) (0 : uint8)) }
    ensures { LongArePostUnitInner0.long_are_post_unit_inner v f (Seq.set (Model1.model a) (IndexLogic0.index_logic lit) (1 : uint8)) }
    
   = 
    ()
end
module CreuSat_Logic_LogicTrail_LemmaAssignMaintainsLongArePostUnit_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_TrailInvariant_Interface as TrailInvariant0
  clone CreuSat_Logic_LogicTrail_CrefsInRange_Interface as CrefsInRange0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  function lemma_assign_maintains_long_are_post_unit (v : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaAssignMaintainsLongArePostUnit
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_TrailInvariant_Interface as TrailInvariant0
  clone CreuSat_Logic_LogicTrail_CrefsInRange_Interface as CrefsInRange0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_LemmaAssignMaintainsForEachToPost_Interface as LemmaAssignMaintainsForEachToPost0 with function Model0.model = Model1.model,
  function Model1.model = Model0.model, predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Unset0.unset = Unset0.unset, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  axiom .
  clone CreuSat_Logic_LogicTrail_LemmaAssignMaintainsPostForEach_Interface as LemmaAssignMaintainsPostForEach0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Unset0.unset = Unset0.unset,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Invariant2.invariant' = Invariant2.invariant', function Model1.model = Model1.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner, axiom .
  function lemma_assign_maintains_long_are_post_unit (v : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit) : ()
    
   = 
    let _ = LemmaAssignMaintainsPostForEach0.lemma_assign_maintains_post_for_each f a lit in let _ = LemmaAssignMaintainsForEachToPost0.lemma_assign_maintains_for_each_to_post v f a lit in ()
  axiom lemma_assign_maintains_long_are_post_unit_spec : forall v : Seq.seq (Type.creusat_trail_step), f : Type.creusat_formula_formula, a : Type.creusat_assignments_assignments, lit : Type.creusat_lit_lit . LongArePostUnitInner0.long_are_post_unit_inner v f (Model0.model a) -> Unset0.unset (Seq.get (Model0.model a) (IndexLogic0.index_logic lit)) -> Invariant0.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) -> CrefsInRange0.crefs_in_range v f -> TrailInvariant0.trail_invariant v f -> Invariant1.invariant' f -> Invariant2.invariant' a f -> LongArePostUnitInner0.long_are_post_unit_inner v f (Seq.set (Model0.model a) (IndexLogic0.index_logic lit) (1 : uint8)) && LongArePostUnitInner0.long_are_post_unit_inner v f (Seq.set (Model0.model a) (IndexLogic0.index_logic lit) (0 : uint8))
end
module CreuSat_Logic_LogicTrail_LemmaAssignMaintainsLongArePostUnit_Impl
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model4.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant5 with function Model0.model = Model4.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant4 with function Model0.model = Model2.model,
  function Model1.model = Model4.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant3 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant4.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model3 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model1.model = Model4.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model3.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant2 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicTrail_LemmaAssignMaintainsForEachToPost as LemmaAssignMaintainsForEachToPost0 with function Model0.model = Model2.model,
  function Model1.model = Model0.model, predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Unset0.unset = Unset0.unset, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaAssignMaintainsPostForEach as LemmaAssignMaintainsPostForEach0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Unset0.unset = Unset0.unset,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Invariant2.invariant' = Invariant2.invariant', function Model1.model = Model2.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  let rec ghost function lemma_assign_maintains_long_are_post_unit (v : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner v f (Model0.model a)}
    requires {Unset0.unset (Seq.get (Model0.model a) (IndexLogic0.index_logic lit))}
    requires {Invariant0.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {CrefsInRange0.crefs_in_range v f}
    requires {TrailInvariant0.trail_invariant v f}
    requires {Invariant1.invariant' f}
    requires {Invariant2.invariant' a f}
    ensures { LongArePostUnitInner0.long_are_post_unit_inner v f (Seq.set (Model0.model a) (IndexLogic0.index_logic lit) (0 : uint8)) }
    ensures { LongArePostUnitInner0.long_are_post_unit_inner v f (Seq.set (Model0.model a) (IndexLogic0.index_logic lit) (1 : uint8)) }
    
   = 
    let _ = LemmaAssignMaintainsPostForEach0.lemma_assign_maintains_post_for_each f a lit in let _ = LemmaAssignMaintainsForEachToPost0.lemma_assign_maintains_for_each_to_post v f a lit in ()
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Ghost_Impl0_ModelTy
  type t
  type modelTy  = 
    t
end
module CreusotContracts_Logic_Ghost_Impl0
  type t
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Ghost_Impl1_Record_Interface
  type t
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Ghost_Impl1_Record
  type t
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreuSat_Lit_Impl1_IsPositive_Interface
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  val is_positive [@cfg:stackify] (self : Type.creusat_lit_lit) : bool
    ensures { result = IsPositiveLogic0.is_positive_logic self }
    
end
module CreuSat_Lit_Impl1_IsPositive
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  let rec cfg is_positive [@cfg:stackify] (self : Type.creusat_lit_lit) : bool
    ensures { result = IsPositiveLogic0.is_positive_logic self }
    
   = 
  var _0 : bool;
  var self_1 : Type.creusat_lit_lit;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- Type.creusat_lit_lit_Lit_polarity self_1;
    return _0
  }
  
end
module CreuSat_Lit_Impl1_Index_Interface
  use mach.int.UInt64
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  val index [@cfg:stackify] (self : Type.creusat_lit_lit) : usize
    ensures { UInt64.to_int result = IndexLogic0.index_logic self }
    
end
module CreuSat_Lit_Impl1_Index
  use mach.int.UInt64
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  let rec cfg index [@cfg:stackify] (self : Type.creusat_lit_lit) : usize
    ensures { UInt64.to_int result = IndexLogic0.index_logic self }
    
   = 
  var _0 : usize;
  var self_1 : Type.creusat_lit_lit;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- Type.creusat_lit_lit_Lit_idx self_1;
    return _0
  }
  
end
module Core_Ops_Index_Index_Output
  type self
  type idx
  type output
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Logic_Model_Impl2_ModelTy
  type t
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module Alloc_Vec_Impl16_Output
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  type output  = 
    Output0.output
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere as ResolveElswhere0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone Alloc_Vec_Impl16_Output as Output1 with type t = t, type i = i, type a = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output1.output
end
module CreusotContracts_Std1_Vec_Impl1_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Vec_Impl1_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) = 
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Vec_Impl1_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Vec_Impl1_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) = 
    Seq.get seq (UInt64.to_int self) = out
end
module CreusotContracts_Std1_Vec_Impl1_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Vec_Impl1_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) = 
    forall i : (int) . 0 <= i && not (i = UInt64.to_int self) && i <= Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl1
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere as ResolveElswhere1 with type self = usize,
  type t = seq t, predicate resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue as HasValue1 with type self = usize, type t = seq t,
  predicate has_value = HasValue0.has_value, type ModelTy0.modelTy = ModelTy0.modelTy,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds as InBounds1 with type self = usize, type t = seq t,
  predicate in_bounds = InBounds0.in_bounds, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Core_Slice_Index_SliceIndex_Get_Interface
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Get
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut_Interface
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked_Interface
  type self
  type t
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked
  type self
  type t
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface
  type self
  type t
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut
  type self
  type t
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index_Interface
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut_Interface
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone Core_Slice_Index_Impl2_IndexMut_Interface as IndexMut0 with type t = t
  clone Core_Slice_Index_Impl2_Index_Interface as Index0 with type t = t
  clone Core_Slice_Index_Impl2_GetUncheckedMut_Interface as GetUncheckedMut0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface as GetUncheckedMut1 with type self = usize,
  type t = seq t, val get_unchecked_mut = GetUncheckedMut0.get_unchecked_mut
  clone Core_Slice_Index_Impl2_GetUnchecked_Interface as GetUnchecked0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUnchecked_Interface as GetUnchecked1 with type self = usize, type t = seq t,
  val get_unchecked = GetUnchecked0.get_unchecked
  clone Core_Slice_Index_Impl2_GetMut_Interface as GetMut0 with type t = t
  clone Core_Slice_Index_Impl2_Get_Interface as Get0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone Core_Slice_Index_SliceIndex_IndexMut_Interface as IndexMut1 with type self = usize, type t = seq t,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Index_Interface as Index1 with type self = usize, type t = seq t,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_GetMut_Interface as GetMut1 with type self = usize, type t = seq t,
  val get_mut = GetMut0.get_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Get_Interface as Get1 with type self = usize, type t = seq t, val get = Get0.get,
  type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Output as Output1 with type self = usize, type t = seq t,
  type output = Output0.output
end
module CreusotContracts_Logic_Model_Impl2_Model_Interface
  type t
  use prelude.Prelude
  use seq.Seq
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Logic_Model_Impl2_Model
  type t
  use prelude.Prelude
  use seq.Seq
  function model (self : seq t) : Seq.seq t = 
    Prelude.id self
end
module CreusotContracts_Logic_Model_Impl2
  type t
  use prelude.Prelude
  use seq.Seq
  clone CreusotContracts_Logic_Model_Impl2_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = seq t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = seq t, type modelTy = ModelTy0.modelTy
end
module CreuSat_Assignments_Impl0_SetAssignment_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreuSat_Logic_LogicLit_Impl1_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_TrailInvariant_Interface as TrailInvariant0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val set_assignment [@cfg:stackify] (self : borrowed (Type.creusat_assignments_assignments)) (lit : Type.creusat_lit_lit) (_f : Type.creusat_formula_formula) (_t : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global)) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model _t) _f (Model1.model self)}
    requires {Unset0.unset (Seq.get (Model1.model self) (IndexLogic0.index_logic lit))}
    requires {TrailInvariant0.trail_invariant (Model0.model _t) _f}
    requires {Invariant0.invariant' _f}
    requires {Invariant1.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {Invariant2.invariant' ( * self) _f}
    ensures { Sat0.sat lit ( ^ self) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model1.model self) && j <> IndexLogic0.index_logic lit -> Seq.get (Model2.model ( * self)) j = Seq.get (Model2.model ( ^ self)) j }
    ensures { Seq.length (Model2.model ( ^ self)) = Seq.length (Model1.model self) }
    ensures { not (Unset0.unset (Seq.get (Model2.model ( ^ self)) (IndexLogic0.index_logic lit))) }
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model _t) _f (Model2.model ( ^ self)) }
    ensures { Invariant2.invariant' ( ^ self) _f }
    
end
module CreuSat_Assignments_Impl0_SetAssignment
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model8 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model3 with type t = borrowed (Type.creusat_assignments_assignments)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model2 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant2 with function Model0.model = Model2.model
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model8.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model8.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model8.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant5 with function Model0.model = Model5.model,
  function Model1.model = Model8.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant3 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model6 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model5.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model8.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model6.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaAssignMaintainsPostForEach as LemmaAssignMaintainsPostForEach0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Unset0.unset = Unset0.unset,
  predicate Invariant0.invariant' = Invariant1.invariant', predicate Invariant1.invariant' = Invariant0.invariant',
  predicate Invariant2.invariant' = Invariant2.invariant', function Model1.model = Model5.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_LemmaAssignMaintainsForEachToPost as LemmaAssignMaintainsForEachToPost0 with function Model0.model = Model5.model,
  function Model1.model = Model2.model, predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Unset0.unset = Unset0.unset, predicate Invariant0.invariant' = Invariant1.invariant',
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate Invariant1.invariant' = Invariant0.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaAssignMaintainsLongArePostUnit as LemmaAssignMaintainsLongArePostUnit0 with function Model0.model = Model2.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Unset0.unset = Unset0.unset,
  predicate Invariant0.invariant' = Invariant1.invariant',
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate Invariant1.invariant' = Invariant0.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function LemmaAssignMaintainsPostForEach0.lemma_assign_maintains_post_for_each = LemmaAssignMaintainsPostForEach0.lemma_assign_maintains_post_for_each,
  function LemmaAssignMaintainsForEachToPost0.lemma_assign_maintains_for_each_to_post = LemmaAssignMaintainsForEachToPost0.lemma_assign_maintains_for_each_to_post,
  function Model1.model = Model5.model, predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  axiom .
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = uint8
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = uint8
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_assignments_assignments
  clone CreuSat_Lit_Impl1_IsPositive_Interface as IsPositive0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_assignments_assignments),
  function Model0.model = Model3.model
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model7.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone CreuSat_Lit_Impl1_Index_Interface as Index0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  let rec cfg set_assignment [@cfg:stackify] (self : borrowed (Type.creusat_assignments_assignments)) (lit : Type.creusat_lit_lit) (_f : Type.creusat_formula_formula) (_t : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global)) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model _t) _f (Model1.model self)}
    requires {Unset0.unset (Seq.get (Model1.model self) (IndexLogic0.index_logic lit))}
    requires {TrailInvariant0.trail_invariant (Model0.model _t) _f}
    requires {Invariant0.invariant' _f}
    requires {Invariant1.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {Invariant2.invariant' ( * self) _f}
    ensures { Sat0.sat lit ( ^ self) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model1.model self) && j <> IndexLogic0.index_logic lit -> Seq.get (Model2.model ( * self)) j = Seq.get (Model2.model ( ^ self)) j }
    ensures { Seq.length (Model2.model ( ^ self)) = Seq.length (Model1.model self) }
    ensures { not (Unset0.unset (Seq.get (Model2.model ( ^ self)) (IndexLogic0.index_logic lit))) }
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model _t) _f (Model2.model ( ^ self)) }
    ensures { Invariant2.invariant' ( ^ self) _f }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_assignments_assignments);
  var lit_2 : Type.creusat_lit_lit;
  var _f_3 : Type.creusat_formula_formula;
  var _t_4 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var old_self_5 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_assignments_assignments));
  var _6 : borrowed (Type.creusat_assignments_assignments);
  var _7 : borrowed (Type.creusat_assignments_assignments);
  var _8 : ();
  var _9 : ();
  var _10 : bool;
  var _11 : Type.creusat_lit_lit;
  var _12 : borrowed uint8;
  var _13 : borrowed (Type.alloc_vec_vec uint8 (Type.alloc_alloc_global));
  var _14 : usize;
  var _15 : Type.creusat_lit_lit;
  var _16 : borrowed uint8;
  var _17 : borrowed (Type.alloc_vec_vec uint8 (Type.alloc_alloc_global));
  var _18 : usize;
  var _19 : Type.creusat_lit_lit;
  var _20 : ();
  var _21 : ();
  var _22 : ();
  {
    self_1 <- self;
    lit_2 <- lit;
    _f_3 <- _f;
    _t_4 <- _t;
    goto BB0
  }
  BB0 {
    _7 <- self_1;
    _6 <- _7;
    old_self_5 <- Record0.record _6;
    goto BB1
  }
  BB1 {
    assert { let _ = LemmaAssignMaintainsLongArePostUnit0.lemma_assign_maintains_long_are_post_unit (Model0.model _t_4) _f_3 ( * Model3.model old_self_5) lit_2 in true };
    _8 <- ();
    _11 <- lit_2;
    _10 <- IsPositive0.is_positive _11;
    goto BB2
  }
  BB2 {
    switch (_10)
      | False -> goto BB6
      | _ -> goto BB3
      end
  }
  BB3 {
    _13 <- borrow_mut (Type.creusat_assignments_assignments_Assignments_0 ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Assignments_Assignments a =  * self_1 in Type.CreuSat_Assignments_Assignments ( ^ _13)) };
    assume { Resolve0.resolve self_1 };
    _15 <- lit_2;
    _14 <- Index0.index _15;
    goto BB4
  }
  BB4 {
    _12 <- IndexMut0.index_mut _13 _14;
    goto BB5
  }
  BB5 {
    _12 <- { _12 with current = (1 : uint8) };
    assume { Resolve1.resolve _12 };
    _9 <- ();
    goto BB9
  }
  BB6 {
    _17 <- borrow_mut (Type.creusat_assignments_assignments_Assignments_0 ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Assignments_Assignments a =  * self_1 in Type.CreuSat_Assignments_Assignments ( ^ _17)) };
    assume { Resolve0.resolve self_1 };
    _19 <- lit_2;
    _18 <- Index0.index _19;
    goto BB7
  }
  BB7 {
    _16 <- IndexMut0.index_mut _17 _18;
    goto BB8
  }
  BB8 {
    _16 <- { _16 with current = (0 : uint8) };
    assume { Resolve1.resolve _16 };
    _9 <- ();
    goto BB9
  }
  BB9 {
    assert { let _ = LemmaAssignMaintainsLongArePostUnit0.lemma_assign_maintains_long_are_post_unit (Model0.model _t_4) _f_3 ( * Model3.model old_self_5) lit_2 in true };
    _20 <- ();
    assert {  ^ Model3.model old_self_5 =  ^ self_1 };
    _21 <- ();
    assert { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model _t_4) _f_3 (Model1.model self_1) };
    _22 <- ();
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Assignments_Impl0_New_Interface
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  val new [@cfg:stackify] (f : Type.creusat_formula_formula) : Type.creusat_assignments_assignments
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result f }
    
end
module CreuSat_Assignments_Impl0_New
  use prelude.Prelude
  use Type
  use mach.int.Int
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model3 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant2 with function Model0.model = Model3.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant2.invariant', function Model1.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model0.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  use mach.int.UInt64
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = uint8, function Model0.model = Model4.model
  let rec cfg new [@cfg:stackify] (f : Type.creusat_formula_formula) : Type.creusat_assignments_assignments
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result f }
    
   = 
  var _0 : Type.creusat_assignments_assignments;
  var f_1 : Type.creusat_formula_formula;
  var _2 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _3 : usize;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _3 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    _2 <- FromElem0.from_elem (2 : uint8) _3;
    goto BB1
  }
  BB1 {
    _0 <- Type.CreuSat_Assignments_Assignments _2;
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module CreuSat_Clause_Impl0_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.creusat_clause_clause) : Type.creusat_clause_clause
    ensures { result = self }
    
end
module CreuSat_Clause_Impl0_Clone
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.creusat_clause_clause) : Type.creusat_clause_clause
    ensures { result = self }
    
end
module CreuSat_Clause_Impl1_Len_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusat_clause_clause) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreuSat_Clause_Impl1_Len
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model
  let rec cfg len [@cfg:stackify] (self : Type.creusat_clause_clause) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
   = 
  var _0 : usize;
  var self_1 : Type.creusat_clause_clause;
  var _2 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- Type.creusat_clause_clause_Clause_rest self_1;
    _0 <- Len0.len _2;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Core_Ops_Index_Index_Index_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module CreuSat_Lit_Impl1_CheckLitInvariant_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  val check_lit_invariant [@cfg:stackify] (self : Type.creusat_lit_lit) (n : usize) : bool
    ensures { result = Invariant0.invariant' self (UInt64.to_int n) }
    
end
module CreuSat_Lit_Impl1_CheckLitInvariant
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Lit_Impl1_Index_Interface as Index0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  let rec cfg check_lit_invariant [@cfg:stackify] (self : Type.creusat_lit_lit) (n : usize) : bool
    ensures { result = Invariant0.invariant' self (UInt64.to_int n) }
    
   = 
  var _0 : bool;
  var self_1 : Type.creusat_lit_lit;
  var n_2 : usize;
  var _3 : ();
  var _4 : usize;
  var _5 : Type.creusat_lit_lit;
  var _6 : usize;
  {
    self_1 <- self;
    n_2 <- n;
    goto BB0
  }
  BB0 {
    _5 <- self_1;
    _4 <- Index0.index _5;
    goto BB1
  }
  BB1 {
    _6 <- n_2;
    _0 <- _4 < _6;
    return _0
  }
  
end
module CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes_Interface
  use Type
  predicate no_duplicate_indexes (self : Type.creusat_clause_clause)
end
module CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes
  use Type
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate no_duplicate_indexes (self : Type.creusat_clause_clause) = 
    NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model0.model self)
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a
  clone Core_Slice_Index_SliceIndex_Output as Output2 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Output as Output0 with type t = t, type i = i, type a = a, type Output0.output = Output2.output
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.alloc_vec_vec t a, type idx = i,
  type output = Output0.output
end
module CreuSat_Clause_Impl1_NoDuplicates_Interface
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes_Interface as NoDuplicateIndexes0
  val no_duplicates [@cfg:stackify] (self : Type.creusat_clause_clause) : bool
    ensures { result = NoDuplicateIndexes0.no_duplicate_indexes self }
    
end
module CreuSat_Clause_Impl1_NoDuplicates
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_lit_lit
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model
  clone CreuSat_Lit_Impl1_Index_Interface as Index1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  let rec cfg no_duplicates [@cfg:stackify] (self : Type.creusat_clause_clause) : bool
    ensures { result = NoDuplicateIndexes0.no_duplicate_indexes self }
    
   = 
  var _0 : bool;
  var self_1 : Type.creusat_clause_clause;
  var _2 : ();
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var lit1_10 : Type.creusat_lit_lit;
  var _11 : Type.creusat_lit_lit;
  var _12 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _13 : usize;
  var j_14 : usize;
  var _15 : ();
  var _16 : bool;
  var _17 : usize;
  var _18 : usize;
  var lit2_19 : Type.creusat_lit_lit;
  var _20 : Type.creusat_lit_lit;
  var _21 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _22 : usize;
  var _23 : ();
  var _24 : bool;
  var _25 : usize;
  var _26 : Type.creusat_lit_lit;
  var _27 : usize;
  var _28 : Type.creusat_lit_lit;
  var _29 : ();
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : ();
  var _35 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    i_3 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant no_dups { forall k : (int) . forall j : (int) . 0 <= j && j < UInt64.to_int i_3 && 0 <= k && k < j -> IndexLogic0.index_logic (Seq.get (Model0.model self_1) j) <> IndexLogic0.index_logic (Seq.get (Model0.model self_1) k) };
    _7 <- i_3;
    _9 <- Type.creusat_clause_clause_Clause_rest self_1;
    _8 <- Len0.len _9;
    goto BB2
  }
  BB2 {
    _6 <- _7 < _8;
    switch (_6)
      | False -> goto BB13
      | _ -> goto BB3
      end
  }
  BB3 {
    _12 <- Type.creusat_clause_clause_Clause_rest self_1;
    _13 <- i_3;
    _11 <- Index0.index _12 _13;
    goto BB4
  }
  BB4 {
    lit1_10 <- _11;
    j_14 <- (0 : usize);
    goto BB5
  }
  BB5 {
    invariant inv { forall k : (int) . 0 <= k && k < UInt64.to_int j_14 -> IndexLogic0.index_logic lit1_10 <> IndexLogic0.index_logic (Seq.get (Model0.model self_1) k) };
    _17 <- j_14;
    _18 <- i_3;
    _16 <- _17 < _18;
    switch (_16)
      | False -> goto BB12
      | _ -> goto BB6
      end
  }
  BB6 {
    _21 <- Type.creusat_clause_clause_Clause_rest self_1;
    _22 <- j_14;
    _20 <- Index0.index _21 _22;
    goto BB7
  }
  BB7 {
    lit2_19 <- _20;
    _26 <- lit1_10;
    _25 <- Index1.index _26;
    goto BB8
  }
  BB8 {
    _28 <- lit2_19;
    _27 <- Index1.index _28;
    goto BB9
  }
  BB9 {
    _24 <- _25 = _27;
    switch (_24)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    _0 <- false;
    goto BB14
  }
  BB11 {
    _23 <- ();
    j_14 <- j_14 + (1 : usize);
    _5 <- ();
    goto BB5
  }
  BB12 {
    _15 <- ();
    i_3 <- i_3 + (1 : usize);
    _5 <- ();
    goto BB1
  }
  BB13 {
    _4 <- ();
    _0 <- true;
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module CreuSat_Clause_Impl1_CheckClauseInvariant_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  val check_clause_invariant [@cfg:stackify] (self : Type.creusat_clause_clause) (n : usize) : bool
    ensures { result = Invariant0.invariant' self (UInt64.to_int n) }
    
end
module CreuSat_Clause_Impl1_CheckClauseInvariant
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_lit_lit
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Clause_Impl1_NoDuplicates_Interface as NoDuplicates0 with predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreuSat_Lit_Impl1_CheckLitInvariant_Interface as CheckLitInvariant0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Clause_Impl1_Len_Interface as Len0 with function Model0.model = Model0.model
  let rec cfg check_clause_invariant [@cfg:stackify] (self : Type.creusat_clause_clause) (n : usize) : bool
    ensures { result = Invariant0.invariant' self (UInt64.to_int n) }
    
   = 
  var _0 : bool;
  var self_1 : Type.creusat_clause_clause;
  var n_2 : usize;
  var _3 : ();
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.creusat_clause_clause;
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : Type.creusat_lit_lit;
  var _15 : Type.creusat_lit_lit;
  var _16 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _17 : usize;
  var _18 : usize;
  var _19 : ();
  var _20 : ();
  var _21 : ();
  var _22 : ();
  var _23 : ();
  var _24 : bool;
  var _25 : Type.creusat_clause_clause;
  var _26 : ();
  {
    self_1 <- self;
    n_2 <- n;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant inv { forall j : (int) . 0 <= j && j < UInt64.to_int i_4 -> Invariant1.invariant' (Seq.get (Model0.model self_1) j) (UInt64.to_int n_2) };
    _8 <- i_4;
    _10 <- self_1;
    _9 <- Len0.len _10;
    goto BB2
  }
  BB2 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB8
      | _ -> goto BB3
      end
  }
  BB3 {
    _16 <- Type.creusat_clause_clause_Clause_rest self_1;
    _17 <- i_4;
    _15 <- Index0.index _16 _17;
    goto BB4
  }
  BB4 {
    _14 <- _15;
    _18 <- n_2;
    _13 <- CheckLitInvariant0.check_lit_invariant _14 _18;
    goto BB5
  }
  BB5 {
    _12 <- not _13;
    switch (_12)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    _0 <- false;
    goto BB12
  }
  BB7 {
    _11 <- ();
    i_4 <- i_4 + (1 : usize);
    _6 <- ();
    goto BB1
  }
  BB8 {
    _5 <- ();
    _25 <- self_1;
    _24 <- NoDuplicates0.no_duplicates _25;
    goto BB9
  }
  BB9 {
    switch (_24)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    _0 <- true;
    goto BB12
  }
  BB11 {
    _23 <- ();
    _0 <- false;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module CreuSat_Clause_Impl1_ClauseFromVec_Interface
  use prelude.Prelude
  use Type
  val clause_from_vec [@cfg:stackify] (vec : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global)) : Type.creusat_clause_clause
    
end
module CreuSat_Clause_Impl1_ClauseFromVec
  use prelude.Prelude
  use Type
  val clause_from_vec [@cfg:stackify] (vec : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global)) : Type.creusat_clause_clause
    
end
module CreuSat_Logic_LogicClause_Impl2_VarsInRange_Interface
  use Type
  use mach.int.Int
  predicate vars_in_range (self : Type.creusat_clause_clause) (n : int)
end
module CreuSat_Logic_LogicClause_Impl2_VarsInRange
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate vars_in_range (self : Type.creusat_clause_clause) (n : int) = 
    VarsInRangeInner0.vars_in_range_inner (Model0.model self) n
end
module CreuSat_Logic_LogicClause_Impl2_InvariantUnaryOk_Interface
  use Type
  use mach.int.Int
  predicate invariant_unary_ok (self : Type.creusat_clause_clause) (n : int)
end
module CreuSat_Logic_LogicClause_Impl2_InvariantUnaryOk
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes_Interface as NoDuplicateIndexes0
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange_Interface as VarsInRange0
  predicate invariant_unary_ok (self : Type.creusat_clause_clause) (n : int) = 
    VarsInRange0.vars_in_range self n && NoDuplicateIndexes0.no_duplicate_indexes self
end
module Core_Ops_Deref_Deref_Target
  type self
  type target
end
module Core_Ops_Deref_DerefMut_DerefMut_Interface
  type self
  use prelude.Prelude
  clone Core_Ops_Deref_Deref_Target as Target0 with type self = self
  val deref_mut [@cfg:stackify] (self : borrowed self) : borrowed Target0.target
    requires {false}
    
end
module Core_Ops_Deref_DerefMut_DerefMut
  type self
  use prelude.Prelude
  clone Core_Ops_Deref_Deref_Target as Target0 with type self = self
  val deref_mut [@cfg:stackify] (self : borrowed self) : borrowed Target0.target
    requires {false}
    
end
module Alloc_Vec_Impl11_DerefMut_Interface
  type t
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Impl2_Model_Interface as Model0 with type t = t
  val deref_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) : borrowed (seq t)
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    
end
module Alloc_Vec_Impl11_DerefMut
  type t
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Impl2_Model_Interface as Model0 with type t = t
  val deref_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) : borrowed (seq t)
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    
end
module Core_Slice_Impl0_Swap_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Impl2_Model_Interface as Model1 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Core_Slice_Impl0_Swap
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Impl2_Model_Interface as Model1 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Alloc_Vec_Impl10_Target
  type t
  type a
  use prelude.Prelude
  use seq.Seq
  type target  = 
    seq t
end
module Alloc_Vec_Impl11
  type t
  type a
  use Type
  clone Alloc_Vec_Impl10_Target as Target0 with type t = t, type a = a
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Impl2_Model as Model0 with type t = t
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = t, type a = a,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Deref_DerefMut_DerefMut_Interface as DerefMut1 with type self = Type.alloc_vec_vec t a,
  val deref_mut = DerefMut0.deref_mut, type Target0.target = Target0.target
end
module CreuSat_Clause_Impl1_MoveToEnd_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_Impl2_InvariantUnaryOk_Interface as InvariantUnaryOk0
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val move_to_end [@cfg:stackify] (self : borrowed (Type.creusat_clause_clause)) (idx : usize) (_f : Type.creusat_formula_formula) : ()
    requires {UInt64.to_int idx < Seq.length (Model0.model self)}
    requires {Seq.length (Model0.model self) > 0}
    requires {InvariantUnaryOk0.invariant_unary_ok ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    ensures { Seq.length (Model1.model ( ^ self)) = Seq.length (Model0.model self) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> (exists j : (int) . 0 <= j && j < Seq.length (Model1.model ( ^ self)) && Seq.get (Model1.model ( ^ self)) i = Seq.get (Model0.model self) j) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model ( ^ self)) -> (exists j : (int) . 0 <= j && j < Seq.length (Model0.model self) && Seq.get (Model1.model ( ^ self)) i = Seq.get (Model0.model self) j) }
    ensures { InvariantUnaryOk0.invariant_unary_ok ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    
end
module CreuSat_Clause_Impl1_MoveToEnd
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = borrowed (Type.creusat_clause_clause)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone CreuSat_Logic_LogicClause_Impl2_InvariantUnaryOk as InvariantUnaryOk0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = seq (Type.creusat_lit_lit)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_Model as Model4 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl1_Model as Model5 with type t = seq (Type.creusat_lit_lit),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model4.model
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = Type.creusat_lit_lit,
  function Model0.model = Model5.model, function Model1.model = Model4.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_clause_clause),
  function Model0.model = Model2.model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, function Model0.model = Model4.model, function Model1.model = Model3.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model
  let rec cfg move_to_end [@cfg:stackify] (self : borrowed (Type.creusat_clause_clause)) (idx : usize) (_f : Type.creusat_formula_formula) : ()
    requires {UInt64.to_int idx < Seq.length (Model0.model self)}
    requires {Seq.length (Model0.model self) > 0}
    requires {InvariantUnaryOk0.invariant_unary_ok ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    ensures { Seq.length (Model1.model ( ^ self)) = Seq.length (Model0.model self) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> (exists j : (int) . 0 <= j && j < Seq.length (Model1.model ( ^ self)) && Seq.get (Model1.model ( ^ self)) i = Seq.get (Model0.model self) j) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model ( ^ self)) -> (exists j : (int) . 0 <= j && j < Seq.length (Model0.model self) && Seq.get (Model1.model ( ^ self)) i = Seq.get (Model0.model self) j) }
    ensures { InvariantUnaryOk0.invariant_unary_ok ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_clause_clause);
  var idx_2 : usize;
  var _f_3 : Type.creusat_formula_formula;
  var old_self_4 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_clause_clause));
  var _5 : borrowed (Type.creusat_clause_clause);
  var _6 : borrowed (Type.creusat_clause_clause);
  var end'_7 : usize;
  var _8 : usize;
  var _9 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _10 : ();
  var _11 : borrowed (seq (Type.creusat_lit_lit));
  var _12 : borrowed (seq (Type.creusat_lit_lit));
  var _13 : borrowed (Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global));
  var _14 : usize;
  var _15 : usize;
  var _16 : ();
  {
    self_1 <- self;
    idx_2 <- idx;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    _6 <- self_1;
    _5 <- _6;
    old_self_4 <- Record0.record _5;
    goto BB1
  }
  BB1 {
    _9 <- Type.creusat_clause_clause_Clause_rest ( * self_1);
    _8 <- Len0.len _9;
    goto BB2
  }
  BB2 {
    end'_7 <- _8 - (1 : usize);
    _13 <- borrow_mut (Type.creusat_clause_clause_Clause_rest ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Clause_Clause a b =  * self_1 in Type.CreuSat_Clause_Clause a ( ^ _13)) };
    assume { Resolve0.resolve self_1 };
    _12 <- DerefMut0.deref_mut _13;
    goto BB3
  }
  BB3 {
    _11 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    _14 <- idx_2;
    _15 <- end'_7;
    _10 <- Swap0.swap _11 _14 _15;
    goto BB4
  }
  BB4 {
    assume { Resolve1.resolve _12 };
    assert {  ^ Model2.model old_self_4 =  ^ self_1 };
    _16 <- ();
    _0 <- ();
    return _0
  }
  
end
module Alloc_Vec_Impl1_Pop_Interface
  type t
  type a
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq_ext.SeqExt
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.alloc_vec_vec t a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val pop [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) : Type.core_option_option t
    ensures { match (result) with
      | Type.Core_Option_Option_Some t -> Model0.model ( ^ self) = SeqExt.subsequence (Model0.model ( * self)) 0 (Seq.length (Model0.model ( * self)) - 1) && Model1.model self = Seq.snoc (Model0.model ( ^ self)) t
      | Type.Core_Option_Option_None -> Seq.length (Model1.model self) = Seq.length (Model0.model ( ^ self)) && Seq.length (Model0.model ( * self)) = 0
      end }
    
end
module Alloc_Vec_Impl1_Pop
  type t
  type a
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq_ext.SeqExt
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.alloc_vec_vec t a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val pop [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) : Type.core_option_option t
    ensures { match (result) with
      | Type.Core_Option_Option_Some t -> Model0.model ( ^ self) = SeqExt.subsequence (Model0.model ( * self)) 0 (Seq.length (Model0.model ( * self)) - 1) && Model1.model self = Seq.snoc (Model0.model ( ^ self)) t
      | Type.Core_Option_Option_None -> Seq.length (Model1.model self) = Seq.length (Model0.model ( ^ self)) && Seq.length (Model0.model ( * self)) = 0
      end }
    
end
module CreuSat_Clause_Impl1_RemoveFromClause_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_Impl2_InvariantUnaryOk_Interface as InvariantUnaryOk0
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val remove_from_clause [@cfg:stackify] (self : borrowed (Type.creusat_clause_clause)) (idx : usize) (_f : Type.creusat_formula_formula) : ()
    requires {UInt64.to_int idx < Seq.length (Model0.model self)}
    requires {Seq.length (Model0.model self) > 0}
    requires {InvariantUnaryOk0.invariant_unary_ok ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    ensures { Seq.length (Model1.model ( ^ self)) + 1 = Seq.length (Model0.model self) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model ( ^ self)) -> (exists j : (int) . 0 <= j && j < Seq.length (Model0.model self) && Seq.get (Model1.model ( ^ self)) i = Seq.get (Model0.model self) j) }
    ensures { InvariantUnaryOk0.invariant_unary_ok ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    
end
module CreuSat_Clause_Impl1_RemoveFromClause
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone CreuSat_Logic_LogicClause_Impl2_InvariantUnaryOk as InvariantUnaryOk0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone Alloc_Vec_Impl1_Pop_Interface as Pop0 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model, function Model1.model = Model3.model
  clone CreuSat_Clause_Impl1_MoveToEnd_Interface as MoveToEnd0 with function Model0.model = Model0.model,
  predicate InvariantUnaryOk0.invariant_unary_ok = InvariantUnaryOk0.invariant_unary_ok,
  function Model1.model = Model1.model
  let rec cfg remove_from_clause [@cfg:stackify] (self : borrowed (Type.creusat_clause_clause)) (idx : usize) (_f : Type.creusat_formula_formula) : ()
    requires {UInt64.to_int idx < Seq.length (Model0.model self)}
    requires {Seq.length (Model0.model self) > 0}
    requires {InvariantUnaryOk0.invariant_unary_ok ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    ensures { Seq.length (Model1.model ( ^ self)) + 1 = Seq.length (Model0.model self) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model ( ^ self)) -> (exists j : (int) . 0 <= j && j < Seq.length (Model0.model self) && Seq.get (Model1.model ( ^ self)) i = Seq.get (Model0.model self) j) }
    ensures { InvariantUnaryOk0.invariant_unary_ok ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_clause_clause);
  var idx_2 : usize;
  var _f_3 : Type.creusat_formula_formula;
  var _4 : ();
  var _5 : borrowed (Type.creusat_clause_clause);
  var _6 : usize;
  var _7 : Type.creusat_formula_formula;
  var _8 : Type.core_option_option (Type.creusat_lit_lit);
  var _9 : borrowed (Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global));
  {
    self_1 <- self;
    idx_2 <- idx;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    _5 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _5) };
    _6 <- idx_2;
    _7 <- _f_3;
    _4 <- MoveToEnd0.move_to_end _5 _6 _7;
    goto BB1
  }
  BB1 {
    _9 <- borrow_mut (Type.creusat_clause_clause_Clause_rest ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Clause_Clause a b =  * self_1 in Type.CreuSat_Clause_Clause a ( ^ _9)) };
    _8 <- Pop0.pop _9;
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Logic_LogicLit_Impl1_UnsetInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unset_inner (self : Type.creusat_lit_lit) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicLit_Impl1_UnsetInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  predicate unset_inner (self : Type.creusat_lit_lit) (a : Seq.seq uint8) = 
    UInt8.to_int (Seq.get a (IndexLogic0.index_logic self)) >= 2
end
module CreuSat_Logic_LogicLit_Impl1_Unset_Interface
  use Type
  predicate unset (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicLit_Impl1_Unset
  use Type
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner_Interface as UnsetInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate unset (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) = 
    UnsetInner0.unset_inner self (Model0.model a)
end
module CreuSat_Logic_LogicClause_Impl2_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicClause_Impl2_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate sat_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model self) && SatInner0.sat_inner (Seq.get (Model0.model self) i) a
end
module CreuSat_Logic_LogicClause_Impl2_UnitInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unit_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicClause_Impl2_UnitInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner_Interface as UnsetInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl2_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange_Interface as VarsInRange0
  predicate unit_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8) = 
    VarsInRange0.vars_in_range self (Seq.length a) && not (SatInner0.sat_inner self a) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model self) && UnsetInner0.unset_inner (Seq.get (Model0.model self) i) a && (forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && j <> i -> not (UnsetInner0.unset_inner (Seq.get (Model0.model self) j) a)))
end
module CreuSat_Logic_LogicClause_Impl2_Unit_Interface
  use Type
  predicate unit (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicClause_Impl2_Unit
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_UnitInner_Interface as UnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate unit (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) = 
    UnitInner0.unit_inner self (Model0.model a)
end
module CreuSat_Logic_LogicLit_Impl1_Unsat_Interface
  use Type
  predicate unsat (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicLit_Impl1_Unsat
  use Type
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate unsat (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) = 
    UnsatInner0.unsat_inner self (Model0.model a)
end
module CreuSat_Lit_Impl1_LitUnsat_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreuSat_Logic_LogicLit_Impl1_Unsat_Interface as Unsat0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_unsat [@cfg:stackify] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unsat0.unsat self a }
    
end
module CreuSat_Lit_Impl1_LitUnsat
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = uint8
  clone CreuSat_Lit_Impl1_IsPositive_Interface as IsPositive0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_Lit_Impl1_Index_Interface as Index0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  let rec cfg lit_unsat [@cfg:stackify] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unsat0.unsat self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.creusat_lit_lit;
  var a_2 : Type.creusat_assignments_assignments;
  var _3 : bool;
  var _4 : Type.creusat_lit_lit;
  var _5 : uint8;
  var _6 : uint8;
  var _7 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _8 : usize;
  var _9 : Type.creusat_lit_lit;
  var _10 : uint8;
  var _11 : uint8;
  var _12 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _13 : usize;
  var _14 : Type.creusat_lit_lit;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _4 <- self_1;
    _3 <- IsPositive0.is_positive _4;
    goto BB1
  }
  BB1 {
    switch (_3)
      | False -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    _12 <- Type.creusat_assignments_assignments_Assignments_0 a_2;
    _14 <- self_1;
    _13 <- Index0.index _14;
    goto BB6
  }
  BB3 {
    _7 <- Type.creusat_assignments_assignments_Assignments_0 a_2;
    _9 <- self_1;
    _8 <- Index0.index _9;
    goto BB4
  }
  BB4 {
    _6 <- Index1.index _7 _8;
    goto BB5
  }
  BB5 {
    _5 <- _6;
    _0 <- _5 = (0 : uint8);
    goto BB8
  }
  BB6 {
    _11 <- Index1.index _12 _13;
    goto BB7
  }
  BB7 {
    _10 <- _11;
    _0 <- _10 = (1 : uint8);
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module CreuSat_Lit_Impl1_LitUnset_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreuSat_Logic_LogicLit_Impl1_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_unset [@cfg:stackify] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unset0.unset self a }
    
end
module CreuSat_Lit_Impl1_LitUnset
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner as UnsetInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Unset as Unset0 with function Model0.model = Model1.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = uint8
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_Lit_Impl1_Index_Interface as Index0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  let rec cfg lit_unset [@cfg:stackify] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unset0.unset self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.creusat_lit_lit;
  var a_2 : Type.creusat_assignments_assignments;
  var _3 : uint8;
  var _4 : uint8;
  var _5 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _6 : usize;
  var _7 : Type.creusat_lit_lit;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _5 <- Type.creusat_assignments_assignments_Assignments_0 a_2;
    _7 <- self_1;
    _6 <- Index0.index _7;
    goto BB1
  }
  BB1 {
    _4 <- Index1.index _5 _6;
    goto BB2
  }
  BB2 {
    _3 <- _4;
    _0 <- _3 >= (2 : uint8);
    return _0
  }
  
end
module CreuSat_Clause_Impl1_UnitAndUnset_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_Unit_Interface as Unit0
  clone CreuSat_Logic_LogicLit_Impl1_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicClause_InvariantInternal_Interface as InvariantInternal0
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val unit_and_unset [@cfg:stackify] (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) (_f : Type.creusat_formula_formula) : bool
    requires {Seq.length (Model0.model self) > 1}
    requires {Invariant0.invariant' a _f}
    requires {InvariantInternal0.invariant_internal (Model0.model self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    ensures { result -> Unset0.unset (Seq.get (Model0.model self) 0) a }
    ensures { result -> Unit0.unit self a }
    
end
module CreuSat_Clause_Impl1_UnitAndUnset
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner as UnsetInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model2 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicLit_Impl1_Unsat as Unsat0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Unset as Unset0 with function Model0.model = Model2.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant0 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone CreuSat_Logic_LogicClause_Impl2_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model1.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unit as Unit0 with function Model0.model = Model2.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy2
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model2.model
  clone CreuSat_Lit_Impl1_LitUnsat_Interface as LitUnsat0 with function Model0.model = Model5.model,
  predicate Invariant0.invariant' = Invariant1.invariant', predicate Unsat0.unsat = Unsat0.unsat
  clone CreuSat_Lit_Impl1_LitUnset_Interface as LitUnset0 with function Model0.model = Model5.model,
  predicate Invariant0.invariant' = Invariant1.invariant', predicate Unset0.unset = Unset0.unset
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model
  let rec cfg unit_and_unset [@cfg:stackify] (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) (_f : Type.creusat_formula_formula) : bool
    requires {Seq.length (Model0.model self) > 1}
    requires {Invariant0.invariant' a _f}
    requires {InvariantInternal0.invariant_internal (Model0.model self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    ensures { result -> Unset0.unset (Seq.get (Model0.model self) 0) a }
    ensures { result -> Unit0.unit self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.creusat_clause_clause;
  var a_2 : Type.creusat_assignments_assignments;
  var _f_3 : Type.creusat_formula_formula;
  var _4 : ();
  var i_5 : usize;
  var _6 : ();
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _12 : ();
  var _13 : bool;
  var _14 : bool;
  var _15 : Type.creusat_lit_lit;
  var _16 : Type.creusat_lit_lit;
  var _17 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _18 : usize;
  var _19 : Type.creusat_assignments_assignments;
  var _20 : ();
  var _21 : ();
  var _22 : ();
  var _23 : ();
  var _24 : Type.creusat_lit_lit;
  var _25 : Type.creusat_lit_lit;
  var _26 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _27 : Type.creusat_assignments_assignments;
  {
    self_1 <- self;
    a_2 <- a;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    i_5 <- (1 : usize);
    goto BB1
  }
  BB1 {
    invariant unsat { forall j : (int) . 1 <= j && j < UInt64.to_int i_5 -> Unsat0.unsat (Seq.get (Model0.model self_1) j) a_2 };
    _9 <- i_5;
    _11 <- Type.creusat_clause_clause_Clause_rest self_1;
    _10 <- Len0.len _11;
    goto BB2
  }
  BB2 {
    _8 <- _9 < _10;
    switch (_8)
      | False -> goto BB8
      | _ -> goto BB3
      end
  }
  BB3 {
    _17 <- Type.creusat_clause_clause_Clause_rest self_1;
    _18 <- i_5;
    _16 <- Index0.index _17 _18;
    goto BB4
  }
  BB4 {
    _15 <- _16;
    _19 <- a_2;
    _14 <- LitUnsat0.lit_unsat _15 _19;
    goto BB5
  }
  BB5 {
    _13 <- not _14;
    switch (_13)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    _0 <- false;
    goto BB11
  }
  BB7 {
    _12 <- ();
    i_5 <- i_5 + (1 : usize);
    _7 <- ();
    goto BB1
  }
  BB8 {
    _6 <- ();
    _26 <- Type.creusat_clause_clause_Clause_rest self_1;
    _25 <- Index0.index _26 (0 : usize);
    goto BB9
  }
  BB9 {
    _24 <- _25;
    _27 <- a_2;
    _0 <- LitUnset0.lit_unset _24 _27;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module CreuSat_ConflictAnalysis_IdxIn_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val idx_in [@cfg:stackify] (v : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global)) (idx : usize) : bool
    ensures { result = (exists i : (int) . 0 <= i && i < Seq.length (Model0.model v) && IndexLogic0.index_logic (Seq.get (Model0.model v) i) = UInt64.to_int idx) }
    
end
module CreuSat_ConflictAnalysis_IdxIn
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_lit_lit
  clone CreuSat_Lit_Impl1_Index_Interface as Index1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model1.model
  let rec cfg idx_in [@cfg:stackify] (v : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global)) (idx : usize) : bool
    ensures { result = (exists i : (int) . 0 <= i && i < Seq.length (Model0.model v) && IndexLogic0.index_logic (Seq.get (Model0.model v) i) = UInt64.to_int idx) }
    
   = 
  var _0 : bool;
  var v_1 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var idx_2 : usize;
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var lit_10 : Type.creusat_lit_lit;
  var _11 : Type.creusat_lit_lit;
  var _12 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _13 : usize;
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : Type.creusat_lit_lit;
  var _18 : usize;
  var _19 : ();
  var _20 : ();
  var _21 : ();
  var _22 : ();
  {
    v_1 <- v;
    idx_2 <- idx;
    goto BB0
  }
  BB0 {
    i_3 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant i_less { 0 <= UInt64.to_int i_3 && UInt64.to_int i_3 <= Seq.length (Model0.model v_1) };
    invariant not_idx { forall j : (int) . 0 <= j && j < UInt64.to_int i_3 -> IndexLogic0.index_logic (Seq.get (Model0.model v_1) j) <> UInt64.to_int idx_2 };
    _7 <- i_3;
    _9 <- v_1;
    _8 <- Len0.len _9;
    goto BB2
  }
  BB2 {
    _6 <- _7 < _8;
    switch (_6)
      | False -> goto BB8
      | _ -> goto BB3
      end
  }
  BB3 {
    _12 <- v_1;
    _13 <- i_3;
    _11 <- Index0.index _12 _13;
    goto BB4
  }
  BB4 {
    lit_10 <- _11;
    _17 <- lit_10;
    _16 <- Index1.index _17;
    goto BB5
  }
  BB5 {
    _18 <- idx_2;
    _15 <- _16 = _18;
    switch (_15)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    _0 <- true;
    goto BB9
  }
  BB7 {
    _14 <- ();
    i_3 <- i_3 + (1 : usize);
    _5 <- ();
    goto BB1
  }
  BB8 {
    _4 <- ();
    _0 <- false;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module CreuSat_Logic_LogicClause_Impl2_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicClause_Impl2_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate unsat_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> UnsatInner0.unsat_inner (Seq.get (Model0.model self) i) a
end
module CreuSat_Logic_LogicClause_Impl2_SameIdxSamePolarityExcept_Interface
  use Type
  use mach.int.Int
  predicate same_idx_same_polarity_except (self : Type.creusat_clause_clause) (other : Type.creusat_clause_clause) (exception' : int)
    
end
module CreuSat_Logic_LogicClause_Impl2_SameIdxSamePolarityExcept
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate same_idx_same_polarity_except (self : Type.creusat_clause_clause) (other : Type.creusat_clause_clause) (exception' : int)
    
   = 
    forall j : (int) . forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) && 0 <= j && j < Seq.length (Model0.model other) -> IndexLogic0.index_logic (Seq.get (Model0.model self) i) <> exception' && IndexLogic0.index_logic (Seq.get (Model0.model self) i) = IndexLogic0.index_logic (Seq.get (Model0.model other) j) -> IsPositiveLogic0.is_positive_logic (Seq.get (Model0.model self) i) = IsPositiveLogic0.is_positive_logic (Seq.get (Model0.model other) j)
end
module CreuSat_Logic_LogicLit_Impl1_IsOpp_Interface
  use Type
  predicate is_opp (self : Type.creusat_lit_lit) (o : Type.creusat_lit_lit)
end
module CreuSat_Logic_LogicLit_Impl1_IsOpp
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  predicate is_opp (self : Type.creusat_lit_lit) (o : Type.creusat_lit_lit) = 
    IndexLogic0.index_logic self = IndexLogic0.index_logic o && IsPositiveLogic0.is_positive_logic self <> IsPositiveLogic0.is_positive_logic o
end
module CreuSat_Logic_LogicClause_Impl2_InFormula_Interface
  use Type
  predicate in_formula (self : Type.creusat_clause_clause) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicClause_Impl2_InFormula
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  predicate in_formula (self : Type.creusat_clause_clause) (f : Type.creusat_formula_formula) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) && Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i = self
end
module CreuSat_Logic_LogicAssignments_CompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate complete_inner (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicAssignments_CompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  predicate complete_inner (a : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length a -> not (Unset0.unset (Seq.get a i))
end
module CreuSat_Logic_LogicFormula_FormulaSatInner_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate formula_sat_inner (f : (Seq.seq (Type.creusat_clause_clause), int)) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicFormula_FormulaSatInner
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl2_SatInner_Interface as SatInner0
  predicate formula_sat_inner (f : (Seq.seq (Type.creusat_clause_clause), int)) (a : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length (let (a, _) = f in a) -> SatInner0.sat_inner (Seq.get (let (a, _) = f in a) i) a
end
module CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate eventually_sat_complete_no_ass (f : (Seq.seq (Type.creusat_clause_clause), int))
end
module CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicFormula_FormulaSatInner_Interface as FormulaSatInner0
  clone CreuSat_Logic_LogicAssignments_CompleteInner_Interface as CompleteInner0
  predicate eventually_sat_complete_no_ass (f : (Seq.seq (Type.creusat_clause_clause), int)) = 
    exists a2 : (Seq.seq uint8) . Seq.length a2 = (let (_, a) = f in a) && CompleteInner0.complete_inner a2 && FormulaSatInner0.formula_sat_inner f a2
end
module CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  predicate equisat_extension_inner (c : Type.creusat_clause_clause) (f : (Seq.seq (Type.creusat_clause_clause), int))
end
module CreuSat_Logic_LogicClause_EquisatExtensionInner
  use Type
  use seq.Seq
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  predicate equisat_extension_inner (c : Type.creusat_clause_clause) (f : (Seq.seq (Type.creusat_clause_clause), int))
   = 
    EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f -> EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass (Seq.snoc (let (a, _) = f in a) c, let (_, a) = f in a)
end
module CreuSat_Logic_LogicLit_Impl1_LitInInternal_Interface
  use Type
  use seq.Seq
  predicate lit_in_internal (self : Type.creusat_lit_lit) (c : Seq.seq (Type.creusat_lit_lit))
end
module CreuSat_Logic_LogicLit_Impl1_LitInInternal
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate lit_in_internal (self : Type.creusat_lit_lit) (c : Seq.seq (Type.creusat_lit_lit)) = 
    exists i : (int) . 0 <= i && i < Seq.length c && Seq.get c i = self
end
module CreuSat_Logic_LogicLit_Impl1_LitIn_Interface
  use Type
  predicate lit_in (self : Type.creusat_lit_lit) (c : Type.creusat_clause_clause)
end
module CreuSat_Logic_LogicLit_Impl1_LitIn
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate lit_in (self : Type.creusat_lit_lit) (c : Type.creusat_clause_clause) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) && Seq.get (Model0.model c) i = self
end
module CreuSat_Logic_LogicConflictAnalysis_LemmaIdx_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp_Interface as IsOpp0
  clone CreuSat_Logic_LogicClause_InvariantInternal_Interface as InvariantInternal0
  clone CreuSat_Logic_LogicLit_Impl1_LitInInternal_Interface as LitInInternal0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  function lemma_idx (c : Seq.seq (Type.creusat_lit_lit)) (o : Seq.seq (Type.creusat_lit_lit)) (new : Seq.seq (Type.creusat_lit_lit)) (i : int) (idx : int) (c_idx : int) (_f : Type.creusat_formula_formula) : ()
    
end
module CreuSat_Logic_LogicConflictAnalysis_LemmaIdx
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp_Interface as IsOpp0
  clone CreuSat_Logic_LogicClause_InvariantInternal_Interface as InvariantInternal0
  clone CreuSat_Logic_LogicLit_Impl1_LitInInternal_Interface as LitInInternal0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  function lemma_idx (c : Seq.seq (Type.creusat_lit_lit)) (o : Seq.seq (Type.creusat_lit_lit)) (new : Seq.seq (Type.creusat_lit_lit)) (i : int) (idx : int) (c_idx : int) (_f : Type.creusat_formula_formula) : ()
    
   = 
    ()
  axiom lemma_idx_spec : forall c : Seq.seq (Type.creusat_lit_lit), o : Seq.seq (Type.creusat_lit_lit), new : Seq.seq (Type.creusat_lit_lit), i : int, idx : int, c_idx : int, _f : Type.creusat_formula_formula . (exists k : (int) . 0 <= k && k < Seq.length new && IndexLogic0.index_logic (Seq.get o i) = IndexLogic0.index_logic (Seq.get new k)) -> (forall j : (int) . 0 <= j && j < Seq.length new -> LitInInternal0.lit_in_internal (Seq.get new j) c || LitInInternal0.lit_in_internal (Seq.get new j) o) -> (forall j : (int) . 0 <= j && j < Seq.length c && IndexLogic0.index_logic (Seq.get c j) <> idx -> LitInInternal0.lit_in_internal (Seq.get c j) new) -> InvariantInternal0.invariant_internal c (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) -> InvariantInternal0.invariant_internal o (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) -> 0 <= i && i < Seq.length o && IndexLogic0.index_logic (Seq.get o i) <> idx -> (forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length o && 0 <= k && k < Seq.length c && k <> c_idx && IndexLogic0.index_logic (Seq.get o j) <> idx -> not (IsOpp0.is_opp (Seq.get c k) (Seq.get o j))) -> 0 <= c_idx && c_idx < Seq.length c && IndexLogic0.index_logic (Seq.get c c_idx) = idx && (exists k : (int) . 0 <= k && k < Seq.length o && k <> i && IsOpp0.is_opp (Seq.get o k) (Seq.get c c_idx)) -> (exists k : (int) . 0 <= k && k < Seq.length c && IndexLogic0.index_logic (Seq.get o i) = IndexLogic0.index_logic (Seq.get c k) || LitInInternal0.lit_in_internal (Seq.get o i) new) && (exists k : (int) . 0 <= k && k < Seq.length c && IndexLogic0.index_logic (Seq.get o i) = IndexLogic0.index_logic (Seq.get c k) && IsPositiveLogic0.is_positive_logic (Seq.get o i) = IsPositiveLogic0.is_positive_logic (Seq.get c k) || LitInInternal0.lit_in_internal (Seq.get o i) new)
end
module CreuSat_Logic_LogicConflictAnalysis_LemmaIdx_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_LitInInternal as LitInInternal0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp as IsOpp0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  let rec ghost function lemma_idx (c : Seq.seq (Type.creusat_lit_lit)) (o : Seq.seq (Type.creusat_lit_lit)) (new : Seq.seq (Type.creusat_lit_lit)) (i : int) (idx : int) (c_idx : int) (_f : Type.creusat_formula_formula) : ()
    requires {exists k : (int) . 0 <= k && k < Seq.length new && IndexLogic0.index_logic (Seq.get o i) = IndexLogic0.index_logic (Seq.get new k)}
    requires {forall j : (int) . 0 <= j && j < Seq.length new -> LitInInternal0.lit_in_internal (Seq.get new j) c || LitInInternal0.lit_in_internal (Seq.get new j) o}
    requires {forall j : (int) . 0 <= j && j < Seq.length c && IndexLogic0.index_logic (Seq.get c j) <> idx -> LitInInternal0.lit_in_internal (Seq.get c j) new}
    requires {InvariantInternal0.invariant_internal c (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {InvariantInternal0.invariant_internal o (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {0 <= i && i < Seq.length o && IndexLogic0.index_logic (Seq.get o i) <> idx}
    requires {forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length o && 0 <= k && k < Seq.length c && k <> c_idx && IndexLogic0.index_logic (Seq.get o j) <> idx -> not (IsOpp0.is_opp (Seq.get c k) (Seq.get o j))}
    requires {0 <= c_idx && c_idx < Seq.length c && IndexLogic0.index_logic (Seq.get c c_idx) = idx && (exists k : (int) . 0 <= k && k < Seq.length o && k <> i && IsOpp0.is_opp (Seq.get o k) (Seq.get c c_idx))}
    ensures { exists k : (int) . 0 <= k && k < Seq.length c && IndexLogic0.index_logic (Seq.get o i) = IndexLogic0.index_logic (Seq.get c k) && IsPositiveLogic0.is_positive_logic (Seq.get o i) = IsPositiveLogic0.is_positive_logic (Seq.get c k) || LitInInternal0.lit_in_internal (Seq.get o i) new }
    ensures { exists k : (int) . 0 <= k && k < Seq.length c && IndexLogic0.index_logic (Seq.get o i) = IndexLogic0.index_logic (Seq.get c k) || LitInInternal0.lit_in_internal (Seq.get o i) new }
    
   = 
    ()
end
module CreuSat_Logic_LogicConflictAnalysis_LemmaIdx2_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp_Interface as IsOpp0
  clone CreuSat_Logic_LogicClause_InvariantInternal_Interface as InvariantInternal0
  clone CreuSat_Logic_LogicLit_Impl1_LitInInternal_Interface as LitInInternal0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  function lemma_idx2 (c : Seq.seq (Type.creusat_lit_lit)) (o : Seq.seq (Type.creusat_lit_lit)) (new : Seq.seq (Type.creusat_lit_lit)) (i : int) (idx : int) (c_idx : int) (_f : Type.creusat_formula_formula) : ()
    
end
module CreuSat_Logic_LogicConflictAnalysis_LemmaIdx2
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp_Interface as IsOpp0
  clone CreuSat_Logic_LogicClause_InvariantInternal_Interface as InvariantInternal0
  clone CreuSat_Logic_LogicLit_Impl1_LitInInternal_Interface as LitInInternal0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicConflictAnalysis_LemmaIdx_Interface as LemmaIdx0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate LitInInternal0.lit_in_internal = LitInInternal0.lit_in_internal,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal,
  predicate IsOpp0.is_opp = IsOpp0.is_opp,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic, axiom .
  function lemma_idx2 (c : Seq.seq (Type.creusat_lit_lit)) (o : Seq.seq (Type.creusat_lit_lit)) (new : Seq.seq (Type.creusat_lit_lit)) (i : int) (idx : int) (c_idx : int) (_f : Type.creusat_formula_formula) : ()
    
   = 
    let _ = LemmaIdx0.lemma_idx c o new i idx c_idx _f in ()
  axiom lemma_idx2_spec : forall c : Seq.seq (Type.creusat_lit_lit), o : Seq.seq (Type.creusat_lit_lit), new : Seq.seq (Type.creusat_lit_lit), i : int, idx : int, c_idx : int, _f : Type.creusat_formula_formula . (exists k : (int) . 0 <= k && k < Seq.length new && IndexLogic0.index_logic (Seq.get o i) = IndexLogic0.index_logic (Seq.get new k)) -> (forall j : (int) . 0 <= j && j < Seq.length new -> LitInInternal0.lit_in_internal (Seq.get new j) c || LitInInternal0.lit_in_internal (Seq.get new j) o) -> (forall j : (int) . 0 <= j && j < Seq.length c && IndexLogic0.index_logic (Seq.get c j) <> idx -> LitInInternal0.lit_in_internal (Seq.get c j) new) -> InvariantInternal0.invariant_internal c (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) -> InvariantInternal0.invariant_internal o (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) -> 0 <= i && i < Seq.length o && IndexLogic0.index_logic (Seq.get o i) <> idx -> (forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length o && 0 <= k && k < Seq.length c && k <> c_idx && IndexLogic0.index_logic (Seq.get o j) <> idx -> not (IsOpp0.is_opp (Seq.get c k) (Seq.get o j))) -> 0 <= c_idx && c_idx < Seq.length c && IndexLogic0.index_logic (Seq.get c c_idx) = idx && (exists k : (int) . 0 <= k && k < Seq.length o && k <> i && IsOpp0.is_opp (Seq.get o k) (Seq.get c c_idx)) -> LitInInternal0.lit_in_internal (Seq.get o i) new
end
module CreuSat_Logic_LogicConflictAnalysis_LemmaIdx2_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_LitInInternal as LitInInternal0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp as IsOpp0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Logic_LogicConflictAnalysis_LemmaIdx as LemmaIdx0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate LitInInternal0.lit_in_internal = LitInInternal0.lit_in_internal,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal,
  predicate IsOpp0.is_opp = IsOpp0.is_opp,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic, axiom .
  let rec ghost function lemma_idx2 (c : Seq.seq (Type.creusat_lit_lit)) (o : Seq.seq (Type.creusat_lit_lit)) (new : Seq.seq (Type.creusat_lit_lit)) (i : int) (idx : int) (c_idx : int) (_f : Type.creusat_formula_formula) : ()
    requires {exists k : (int) . 0 <= k && k < Seq.length new && IndexLogic0.index_logic (Seq.get o i) = IndexLogic0.index_logic (Seq.get new k)}
    requires {forall j : (int) . 0 <= j && j < Seq.length new -> LitInInternal0.lit_in_internal (Seq.get new j) c || LitInInternal0.lit_in_internal (Seq.get new j) o}
    requires {forall j : (int) . 0 <= j && j < Seq.length c && IndexLogic0.index_logic (Seq.get c j) <> idx -> LitInInternal0.lit_in_internal (Seq.get c j) new}
    requires {InvariantInternal0.invariant_internal c (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {InvariantInternal0.invariant_internal o (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {0 <= i && i < Seq.length o && IndexLogic0.index_logic (Seq.get o i) <> idx}
    requires {forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length o && 0 <= k && k < Seq.length c && k <> c_idx && IndexLogic0.index_logic (Seq.get o j) <> idx -> not (IsOpp0.is_opp (Seq.get c k) (Seq.get o j))}
    requires {0 <= c_idx && c_idx < Seq.length c && IndexLogic0.index_logic (Seq.get c c_idx) = idx && (exists k : (int) . 0 <= k && k < Seq.length o && k <> i && IsOpp0.is_opp (Seq.get o k) (Seq.get c c_idx))}
    ensures { LitInInternal0.lit_in_internal (Seq.get o i) new }
    
   = 
    let _ = LemmaIdx0.lemma_idx c o new i idx c_idx _f in ()
end
module CreuSat_Logic_LogicClause_Impl2_ResolventOfIdx_Interface
  use Type
  use mach.int.Int
  predicate resolvent_of_idx (self : Type.creusat_clause_clause) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (idx : int)
    
end
module CreuSat_Logic_LogicClause_Impl2_ResolventOfIdx
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp_Interface as IsOpp0
  clone CreuSat_Logic_LogicLit_Impl1_LitIn_Interface as LitIn0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate resolvent_of_idx (self : Type.creusat_clause_clause) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (idx : int)
    
   = 
    (forall i : (int) . 0 <= i && i < Seq.length (Model0.model c) && IndexLogic0.index_logic (Seq.get (Model0.model c) i) <> idx -> LitIn0.lit_in (Seq.get (Model0.model c) i) self) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model c2) && IndexLogic0.index_logic (Seq.get (Model0.model c2) i) <> idx -> LitIn0.lit_in (Seq.get (Model0.model c2) i) self) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> LitIn0.lit_in (Seq.get (Model0.model self) i) c || LitIn0.lit_in (Seq.get (Model0.model self) i) c2) && (exists m : (int) . exists k : (int) . 0 <= k && k < Seq.length (Model0.model c2) && 0 <= m && m < Seq.length (Model0.model c) && IndexLogic0.index_logic (Seq.get (Model0.model c) m) = idx && IndexLogic0.index_logic (Seq.get (Model0.model c2) k) = idx && IsOpp0.is_opp (Seq.get (Model0.model c2) k) (Seq.get (Model0.model c) m))
end
module CreuSat_Logic_LogicClause_Impl2_InFormulaInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  predicate in_formula_inner (self : Type.creusat_clause_clause) (f : (Seq.seq (Type.creusat_clause_clause), int))
end
module CreuSat_Logic_LogicClause_Impl2_InFormulaInner
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate in_formula_inner (self : Type.creusat_clause_clause) (f : (Seq.seq (Type.creusat_clause_clause), int)) = 
    exists i : (int) . 0 <= i && i < Seq.length (let (a, _) = f in a) && Seq.get (let (a, _) = f in a) i = self
end
module CreuSat_Logic_LogicClause_Impl2_ResolventOf_Interface
  use Type
  use mach.int.Int
  predicate resolvent_of (self : Type.creusat_clause_clause) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (k : int) (m : int)
    
end
module CreuSat_Logic_LogicClause_Impl2_ResolventOf
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp_Interface as IsOpp0
  clone CreuSat_Logic_LogicLit_Impl1_LitIn_Interface as LitIn0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate resolvent_of (self : Type.creusat_clause_clause) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (k : int) (m : int)
    
   = 
    (forall i : (int) . 0 <= i && i < Seq.length (Model0.model c) && i <> m -> LitIn0.lit_in (Seq.get (Model0.model c) i) self) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model c2) && i <> k -> LitIn0.lit_in (Seq.get (Model0.model c2) i) self) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> LitIn0.lit_in (Seq.get (Model0.model self) i) c || LitIn0.lit_in (Seq.get (Model0.model self) i) c2) && not (LitIn0.lit_in (Seq.get (Model0.model c) m) self) && not (LitIn0.lit_in (Seq.get (Model0.model c2) k) self) && IsOpp0.is_opp (Seq.get (Model0.model c2) k) (Seq.get (Model0.model c) m)
end
module CreuSat_Logic_LogicClause_Impl2_Equals_Interface
  use Type
  predicate equals (self : Type.creusat_clause_clause) (o : Type.creusat_clause_clause)
end
module CreuSat_Logic_LogicClause_Impl2_Equals
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate equals (self : Type.creusat_clause_clause) (o : Type.creusat_clause_clause) = 
    Seq.length (Model0.model self) = Seq.length (Model0.model o) && (forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) -> Seq.get (Model0.model self) j = Seq.get (Model0.model o) j)
end
module CreuSat_Logic_Logic_LemmaEqFormulas_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_Equals_Interface as Equals0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  function lemma_eq_formulas (f : (Seq.seq (Type.creusat_clause_clause), int)) (f2 : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) : ()
    
end
module CreuSat_Logic_Logic_LemmaEqFormulas
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_Equals_Interface as Equals0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  function lemma_eq_formulas (f : (Seq.seq (Type.creusat_clause_clause), int)) (f2 : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) : ()
    
   = 
    ()
  axiom lemma_eq_formulas_spec : forall f : (Seq.seq (Type.creusat_clause_clause), int), f2 : (Seq.seq (Type.creusat_clause_clause), int), c : Type.creusat_clause_clause . FormulaInvariant0.formula_invariant f -> (let (a, _) = f2 in a) = Seq.snoc (let (a, _) = f in a) c -> Seq.length (let (a, _) = f in a) + 1 = Seq.length (let (a, _) = f2 in a) && (forall i : (int) . 0 <= i && i < Seq.length (let (a, _) = f in a) -> Equals0.equals (Seq.get (let (a, _) = f in a) i) (Seq.get (let (a, _) = f2 in a) i)) && Model0.model (Seq.get (let (a, _) = f2 in a) (Seq.length (let (a, _) = f2 in a) - 1)) = Model0.model c
end
module CreuSat_Logic_Logic_LemmaEqFormulas_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model0.model
  clone CreuSat_Logic_LogicClause_Impl2_Equals as Equals0 with function Model0.model = Model0.model
  let rec ghost function lemma_eq_formulas (f : (Seq.seq (Type.creusat_clause_clause), int)) (f2 : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) : ()
    requires {FormulaInvariant0.formula_invariant f}
    requires {(let (a, _) = f2 in a) = Seq.snoc (let (a, _) = f in a) c}
    ensures { Model0.model (Seq.get (let (a, _) = f2 in a) (Seq.length (let (a, _) = f2 in a) - 1)) = Model0.model c }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (let (a, _) = f in a) -> Equals0.equals (Seq.get (let (a, _) = f in a) i) (Seq.get (let (a, _) = f2 in a) i) }
    ensures { Seq.length (let (a, _) = f in a) + 1 = Seq.length (let (a, _) = f2 in a) }
    
   = 
    ()
end
module CreuSat_Logic_Logic_LemmaNotSatGivesNotSat_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  function lemma_not_sat_gives_not_sat (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) : ()
    
end
module CreuSat_Logic_Logic_LemmaNotSatGivesNotSat
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone CreuSat_Logic_LogicClause_Impl2_Equals_Interface as Equals0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_Logic_LemmaEqFormulas_Interface as LemmaEqFormulas0 with predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  function Model0.model = Model0.model, predicate Equals0.equals = Equals0.equals, axiom .
  function lemma_not_sat_gives_not_sat (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) : ()
    
   = 
    let _ = LemmaEqFormulas0.lemma_eq_formulas f (Seq.snoc (let (a, _) = f in a) c3, let (_, a) = f in a) c3 in ()
  axiom lemma_not_sat_gives_not_sat_spec : forall f : (Seq.seq (Type.creusat_clause_clause), int), c : Type.creusat_clause_clause, c2 : Type.creusat_clause_clause, c3 : Type.creusat_clause_clause . not (EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f) -> FormulaInvariant0.formula_invariant f -> not (EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass (Seq.snoc (let (a, _) = f in a) c3, let (_, a) = f in a))
end
module CreuSat_Logic_Logic_LemmaNotSatGivesNotSat_Impl
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Equals as Equals0 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model0.model
  clone CreuSat_Logic_Logic_LemmaEqFormulas as LemmaEqFormulas0 with predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  function Model0.model = Model0.model, predicate Equals0.equals = Equals0.equals, axiom .
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  let rec ghost function lemma_not_sat_gives_not_sat (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) : ()
    requires {not (EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f)}
    requires {FormulaInvariant0.formula_invariant f}
    ensures { not (EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass (Seq.snoc (let (a, _) = f in a) c3, let (_, a) = f in a)) }
    
   = 
    let _ = LemmaEqFormulas0.lemma_eq_formulas f (Seq.snoc (let (a, _) = f in a) c3, let (_, a) = f in a) c3 in ()
end
module CreuSat_Logic_Logic_LemmaSatGivesSat_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  clone CreuSat_Logic_LogicClause_Impl2_InFormulaInner_Interface as InFormulaInner0
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf_Interface as ResolventOf0
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  function lemma_sat_gives_sat (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) (k : int) (m : int) : ()
    
end
module CreuSat_Logic_Logic_LemmaSatGivesSat
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  clone CreuSat_Logic_LogicClause_Impl2_InFormulaInner_Interface as InFormulaInner0
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf_Interface as ResolventOf0
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone CreuSat_Logic_LogicClause_Impl2_Equals_Interface as Equals0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_Logic_LemmaEqFormulas_Interface as LemmaEqFormulas0 with predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  function Model0.model = Model0.model, predicate Equals0.equals = Equals0.equals, axiom .
  function lemma_sat_gives_sat (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) (k : int) (m : int) : ()
    
   = 
    let _ = LemmaEqFormulas0.lemma_eq_formulas f (Seq.snoc (let (a, _) = f in a) c3, let (_, a) = f in a) c3 in ()
  axiom lemma_sat_gives_sat_spec : forall f : (Seq.seq (Type.creusat_clause_clause), int), c : Type.creusat_clause_clause, c2 : Type.creusat_clause_clause, c3 : Type.creusat_clause_clause, k : int, m : int . EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f -> ResolventOf0.resolvent_of c3 c c2 k m -> EquisatExtensionInner0.equisat_extension_inner c2 f -> InFormulaInner0.in_formula_inner c f -> FormulaInvariant0.formula_invariant f -> EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass (Seq.snoc (let (a, _) = f in a) c3, let (_, a) = f in a)
end
module CreuSat_Logic_Logic_LemmaSatGivesSat_Impl
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp as IsOpp0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Equals as Equals0 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model0.model
  clone CreuSat_Logic_Logic_LemmaEqFormulas as LemmaEqFormulas0 with predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  function Model0.model = Model0.model, predicate Equals0.equals = Equals0.equals, axiom .
  clone CreuSat_Logic_LogicLit_Impl1_LitIn as LitIn0 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf as ResolventOf0 with function Model0.model = Model0.model,
  predicate LitIn0.lit_in = LitIn0.lit_in, predicate IsOpp0.is_opp = IsOpp0.is_opp
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_InFormulaInner as InFormulaInner0
  let rec ghost function lemma_sat_gives_sat (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) (k : int) (m : int) : ()
    requires {EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f}
    requires {ResolventOf0.resolvent_of c3 c c2 k m}
    requires {EquisatExtensionInner0.equisat_extension_inner c2 f}
    requires {InFormulaInner0.in_formula_inner c f}
    requires {FormulaInvariant0.formula_invariant f}
    ensures { EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass (Seq.snoc (let (a, _) = f in a) c3, let (_, a) = f in a) }
    
   = 
    let _ = LemmaEqFormulas0.lemma_eq_formulas f (Seq.snoc (let (a, _) = f in a) c3, let (_, a) = f in a) c3 in ()
end
module CreuSat_Logic_Logic_LemmaExtendedFormulaIsEquisatCompatible_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  clone CreuSat_Logic_LogicClause_Impl2_InFormulaInner_Interface as InFormulaInner0
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf_Interface as ResolventOf0
  function lemma_extended_formula_is_equisat_compatible (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) (k : int) (m : int) : ()
    
end
module CreuSat_Logic_Logic_LemmaExtendedFormulaIsEquisatCompatible
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  clone CreuSat_Logic_LogicClause_Impl2_InFormulaInner_Interface as InFormulaInner0
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf_Interface as ResolventOf0
  clone CreuSat_Logic_LogicClause_Impl2_Equals_Interface as Equals0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_Logic_LemmaEqFormulas_Interface as LemmaEqFormulas0 with predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  function Model0.model = Model0.model, predicate Equals0.equals = Equals0.equals, axiom .
  function lemma_extended_formula_is_equisat_compatible (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) (k : int) (m : int) : ()
    
   = 
    let _ = LemmaEqFormulas0.lemma_eq_formulas f (Seq.snoc (let (a, _) = f in a) c3, let (_, a) = f in a) c3 in ()
  axiom lemma_extended_formula_is_equisat_compatible_spec : forall f : (Seq.seq (Type.creusat_clause_clause), int), c : Type.creusat_clause_clause, c2 : Type.creusat_clause_clause, c3 : Type.creusat_clause_clause, k : int, m : int . ResolventOf0.resolvent_of c3 c c2 k m -> InFormulaInner0.in_formula_inner c2 f -> InFormulaInner0.in_formula_inner c f -> FormulaInvariant0.formula_invariant f -> EquisatExtensionInner0.equisat_extension_inner c3 f
end
module CreuSat_Logic_Logic_LemmaExtendedFormulaIsEquisatCompatible_Impl
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp as IsOpp0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_Equals as Equals0 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model0.model
  clone CreuSat_Logic_Logic_LemmaEqFormulas as LemmaEqFormulas0 with predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  function Model0.model = Model0.model, predicate Equals0.equals = Equals0.equals, axiom .
  clone CreuSat_Logic_LogicLit_Impl1_LitIn as LitIn0 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf as ResolventOf0 with function Model0.model = Model0.model,
  predicate LitIn0.lit_in = LitIn0.lit_in, predicate IsOpp0.is_opp = IsOpp0.is_opp
  clone CreuSat_Logic_LogicClause_Impl2_InFormulaInner as InFormulaInner0
  let rec ghost function lemma_extended_formula_is_equisat_compatible (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) (k : int) (m : int) : ()
    requires {ResolventOf0.resolvent_of c3 c c2 k m}
    requires {InFormulaInner0.in_formula_inner c2 f}
    requires {InFormulaInner0.in_formula_inner c f}
    requires {FormulaInvariant0.formula_invariant f}
    ensures { EquisatExtensionInner0.equisat_extension_inner c3 f }
    
   = 
    let _ = LemmaEqFormulas0.lemma_eq_formulas f (Seq.snoc (let (a, _) = f in a) c3, let (_, a) = f in a) c3 in ()
end
module CreuSat_Logic_Logic_LemmaResolventOfEquisatExtensionIsEquisat_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicClause_Impl2_InFormulaInner_Interface as InFormulaInner0
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf_Interface as ResolventOf0
  function lemma_resolvent_of_equisat_extension_is_equisat (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) (k : int) (m : int) : ()
    
end
module CreuSat_Logic_Logic_LemmaResolventOfEquisatExtensionIsEquisat
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicClause_Impl2_InFormulaInner_Interface as InFormulaInner0
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf_Interface as ResolventOf0
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone CreuSat_Logic_LogicClause_Impl2_Equals_Interface as Equals0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_Logic_LemmaNotSatGivesNotSat_Interface as LemmaNotSatGivesNotSat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_Logic_LemmaEqFormulas_Interface as LemmaEqFormulas0 with predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  function Model0.model = Model0.model, predicate Equals0.equals = Equals0.equals, axiom .
  clone CreuSat_Logic_Logic_LemmaExtendedFormulaIsEquisatCompatible_Interface as LemmaExtendedFormulaIsEquisatCompatible0 with predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of,
  predicate InFormulaInner0.in_formula_inner = InFormulaInner0.in_formula_inner,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner, axiom .
  clone CreuSat_Logic_Logic_LemmaSatGivesSat_Interface as LemmaSatGivesSat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass,
  predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  predicate InFormulaInner0.in_formula_inner = InFormulaInner0.in_formula_inner,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  function lemma_resolvent_of_equisat_extension_is_equisat (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) (k : int) (m : int) : ()
    
   = 
    let _ = LemmaEqFormulas0.lemma_eq_formulas f (Seq.snoc (let (a, _) = f in a) c3, let (_, a) = f in a) c3 in let _ = LemmaNotSatGivesNotSat0.lemma_not_sat_gives_not_sat f c c2 c3 in let _ = LemmaSatGivesSat0.lemma_sat_gives_sat f c c2 c3 k m in let _ = LemmaExtendedFormulaIsEquisatCompatible0.lemma_extended_formula_is_equisat_compatible f c c2 c3 k m in ()
  axiom lemma_resolvent_of_equisat_extension_is_equisat_spec : forall f : (Seq.seq (Type.creusat_clause_clause), int), c : Type.creusat_clause_clause, c2 : Type.creusat_clause_clause, c3 : Type.creusat_clause_clause, k : int, m : int . ResolventOf0.resolvent_of c3 c c2 k m -> InFormulaInner0.in_formula_inner c2 f -> EquisatExtensionInner0.equisat_extension_inner c f -> FormulaInvariant0.formula_invariant f -> EquisatExtensionInner0.equisat_extension_inner c3 f
end
module CreuSat_Logic_Logic_LemmaResolventOfEquisatExtensionIsEquisat_Impl
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp as IsOpp0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_Equals as Equals0 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model0.model
  clone CreuSat_Logic_Logic_LemmaEqFormulas as LemmaEqFormulas0 with predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  function Model0.model = Model0.model, predicate Equals0.equals = Equals0.equals, axiom .
  clone CreuSat_Logic_Logic_LemmaNotSatGivesNotSat as LemmaNotSatGivesNotSat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  function LemmaEqFormulas0.lemma_eq_formulas = LemmaEqFormulas0.lemma_eq_formulas,
  function Model0.model = Model0.model, predicate Equals0.equals = Equals0.equals, axiom .
  clone CreuSat_Logic_LogicLit_Impl1_LitIn as LitIn0 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf as ResolventOf0 with function Model0.model = Model0.model,
  predicate LitIn0.lit_in = LitIn0.lit_in, predicate IsOpp0.is_opp = IsOpp0.is_opp
  clone CreuSat_Logic_LogicClause_Impl2_InFormulaInner as InFormulaInner0
  clone CreuSat_Logic_Logic_LemmaExtendedFormulaIsEquisatCompatible as LemmaExtendedFormulaIsEquisatCompatible0 with predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of,
  predicate InFormulaInner0.in_formula_inner = InFormulaInner0.in_formula_inner,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  function LemmaEqFormulas0.lemma_eq_formulas = LemmaEqFormulas0.lemma_eq_formulas,
  function Model0.model = Model0.model, predicate Equals0.equals = Equals0.equals, axiom .
  clone CreuSat_Logic_Logic_LemmaSatGivesSat as LemmaSatGivesSat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass,
  predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  predicate InFormulaInner0.in_formula_inner = InFormulaInner0.in_formula_inner,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  function LemmaEqFormulas0.lemma_eq_formulas = LemmaEqFormulas0.lemma_eq_formulas,
  function Model0.model = Model0.model, predicate Equals0.equals = Equals0.equals, axiom .
  let rec ghost function lemma_resolvent_of_equisat_extension_is_equisat (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) (k : int) (m : int) : ()
    requires {ResolventOf0.resolvent_of c3 c c2 k m}
    requires {InFormulaInner0.in_formula_inner c2 f}
    requires {EquisatExtensionInner0.equisat_extension_inner c f}
    requires {FormulaInvariant0.formula_invariant f}
    ensures { EquisatExtensionInner0.equisat_extension_inner c3 f }
    
   = 
    let _ = LemmaEqFormulas0.lemma_eq_formulas f (Seq.snoc (let (a, _) = f in a) c3, let (_, a) = f in a) c3 in let _ = LemmaNotSatGivesNotSat0.lemma_not_sat_gives_not_sat f c c2 c3 in let _ = LemmaSatGivesSat0.lemma_sat_gives_sat f c c2 c3 k m in let _ = LemmaExtendedFormulaIsEquisatCompatible0.lemma_extended_formula_is_equisat_compatible f c c2 c3 k m in ()
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module CreusotContracts_Std1_Vec_Impl2_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl2_Resolve
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_Impl2
  type t
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve0 with type t = t, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) = 
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module CreuSat_ConflictAnalysis_Resolve_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange_Interface as VarsInRange0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy2
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreuSat_Logic_LogicClause_Impl2_InFormula_Interface as InFormula0
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp_Interface as IsOpp0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreuSat_Logic_LogicClause_Impl2_SameIdxSamePolarityExcept_Interface as SameIdxSamePolarityExcept0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  val resolve [@cfg:stackify] (_f : Type.creusat_formula_formula) (c : Type.creusat_clause_clause) (o : Type.creusat_clause_clause) (idx : usize) (c_idx : usize) (_a : Type.creusat_assignments_assignments) : Type.creusat_clause_clause
    requires {Invariant0.invariant' o (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {Invariant0.invariant' c (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {UnsatInner0.unsat_inner c (Model0.model _a)}
    requires {PostUnitInner0.post_unit_inner o (Model0.model _a)}
    requires {UInt64.to_int idx < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)}
    requires {SameIdxSamePolarityExcept0.same_idx_same_polarity_except c o (UInt64.to_int idx)}
    requires {forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length (Model1.model o) && 0 <= k && k < Seq.length (Model1.model c) && k <> UInt64.to_int c_idx && IndexLogic0.index_logic (Seq.get (Model1.model o) j) <> UInt64.to_int idx -> not (IsOpp0.is_opp (Seq.get (Model1.model c) k) (Seq.get (Model1.model o) j))}
    requires {UInt64.to_int c_idx < Seq.length (Model1.model c) && IndexLogic0.index_logic (Seq.get (Model1.model c) (UInt64.to_int c_idx)) = UInt64.to_int idx && (exists k : (int) . 0 <= k && k < Seq.length (Model1.model o) && IsOpp0.is_opp (Seq.get (Model1.model o) k) (Seq.get (Model1.model c) (UInt64.to_int c_idx)))}
    requires {InFormula0.in_formula o _f}
    requires {EquisatExtensionInner0.equisat_extension_inner c (Model2.model _f)}
    requires {Invariant1.invariant' _f}
    ensures { EquisatExtensionInner0.equisat_extension_inner result (Model2.model _f) }
    ensures { VarsInRange0.vars_in_range result (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    ensures { Invariant0.invariant' result (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    ensures { UnsatInner0.unsat_inner result (Model0.model _a) }
    
end
module CreuSat_ConflictAnalysis_Resolve
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model6 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicClause_Impl2_InFormulaInner as InFormulaInner0
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model4 with type t = Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global)
  clone CreuSat_Logic_LogicLit_Impl1_LitInInternal as LitInInternal0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model5 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicClause_Impl2_Equals as Equals0 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicLit_Impl1_LitIn as LitIn0 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy2
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model8 with function Model0.model = Model7.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model8.model
  clone CreuSat_Logic_LogicClause_Impl2_InFormula as InFormula0 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model5.model
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model5.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner0 with function Model0.model = Model5.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model5.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model7.model,
  predicate Invariant0.invariant' = Invariant0.invariant', function Model1.model = Model5.model
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model5.model
  clone CreuSat_Logic_Logic_LemmaEqFormulas as LemmaEqFormulas0 with predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  function Model0.model = Model5.model, predicate Equals0.equals = Equals0.equals, axiom .
  clone CreuSat_Logic_Logic_LemmaNotSatGivesNotSat as LemmaNotSatGivesNotSat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  function LemmaEqFormulas0.lemma_eq_formulas = LemmaEqFormulas0.lemma_eq_formulas,
  function Model0.model = Model5.model, predicate Equals0.equals = Equals0.equals, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model8.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model5.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone CreuSat_Logic_LogicClause_Impl2_InvariantUnaryOk as InvariantUnaryOk0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp as IsOpp0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf as ResolventOf0 with function Model0.model = Model5.model,
  predicate LitIn0.lit_in = LitIn0.lit_in, predicate IsOpp0.is_opp = IsOpp0.is_opp
  clone CreuSat_Logic_Logic_LemmaExtendedFormulaIsEquisatCompatible as LemmaExtendedFormulaIsEquisatCompatible0 with predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of,
  predicate InFormulaInner0.in_formula_inner = InFormulaInner0.in_formula_inner,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  function LemmaEqFormulas0.lemma_eq_formulas = LemmaEqFormulas0.lemma_eq_formulas,
  function Model0.model = Model5.model, predicate Equals0.equals = Equals0.equals, axiom .
  clone CreuSat_Logic_Logic_LemmaSatGivesSat as LemmaSatGivesSat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass,
  predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  predicate InFormulaInner0.in_formula_inner = InFormulaInner0.in_formula_inner,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  function LemmaEqFormulas0.lemma_eq_formulas = LemmaEqFormulas0.lemma_eq_formulas,
  function Model0.model = Model5.model, predicate Equals0.equals = Equals0.equals, axiom .
  clone CreuSat_Logic_Logic_LemmaResolventOfEquisatExtensionIsEquisat as LemmaResolventOfEquisatExtensionIsEquisat0 with predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of,
  predicate InFormulaInner0.in_formula_inner = InFormulaInner0.in_formula_inner,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  function LemmaEqFormulas0.lemma_eq_formulas = LemmaEqFormulas0.lemma_eq_formulas,
  function LemmaNotSatGivesNotSat0.lemma_not_sat_gives_not_sat = LemmaNotSatGivesNotSat0.lemma_not_sat_gives_not_sat,
  function LemmaSatGivesSat0.lemma_sat_gives_sat = LemmaSatGivesSat0.lemma_sat_gives_sat,
  function LemmaExtendedFormulaIsEquisatCompatible0.lemma_extended_formula_is_equisat_compatible = LemmaExtendedFormulaIsEquisatCompatible0.lemma_extended_formula_is_equisat_compatible,
  function Model0.model = Model5.model, predicate Equals0.equals = Equals0.equals,
  predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass,
  axiom .
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOfIdx as ResolventOfIdx0 with function Model0.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate LitIn0.lit_in = LitIn0.lit_in,
  predicate IsOpp0.is_opp = IsOpp0.is_opp
  clone CreuSat_Logic_LogicConflictAnalysis_LemmaIdx as LemmaIdx0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate LitInInternal0.lit_in_internal = LitInInternal0.lit_in_internal,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal,
  predicate IsOpp0.is_opp = IsOpp0.is_opp,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic, axiom .
  clone CreuSat_Logic_LogicConflictAnalysis_LemmaIdx2 as LemmaIdx20 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate LitInInternal0.lit_in_internal = LitInInternal0.lit_in_internal,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal,
  predicate IsOpp0.is_opp = IsOpp0.is_opp, function LemmaIdx0.lemma_idx = LemmaIdx0.lemma_idx,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic, axiom .
  clone CreuSat_Logic_LogicClause_Impl2_SameIdxSamePolarityExcept as SameIdxSamePolarityExcept0 with function Model0.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model6.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy4 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy3 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global),
  function Model0.model = Model4.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model10 with type t = Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy4.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve0 with type t = Type.creusat_lit_lit,
  function Model0.model = Model3.model, predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = Type.creusat_lit_lit, function Model0.model = Model3.model
  clone CreuSat_ConflictAnalysis_IdxIn_Interface as IdxIn0 with function Model0.model = Model10.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Lit_Impl1_Index_Interface as Index1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  let rec cfg resolve [@cfg:stackify] (_f : Type.creusat_formula_formula) (c : Type.creusat_clause_clause) (o : Type.creusat_clause_clause) (idx : usize) (c_idx : usize) (_a : Type.creusat_assignments_assignments) : Type.creusat_clause_clause
    requires {Invariant0.invariant' o (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {Invariant0.invariant' c (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {UnsatInner0.unsat_inner c (Model0.model _a)}
    requires {PostUnitInner0.post_unit_inner o (Model0.model _a)}
    requires {UInt64.to_int idx < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)}
    requires {SameIdxSamePolarityExcept0.same_idx_same_polarity_except c o (UInt64.to_int idx)}
    requires {forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length (Model1.model o) && 0 <= k && k < Seq.length (Model1.model c) && k <> UInt64.to_int c_idx && IndexLogic0.index_logic (Seq.get (Model1.model o) j) <> UInt64.to_int idx -> not (IsOpp0.is_opp (Seq.get (Model1.model c) k) (Seq.get (Model1.model o) j))}
    requires {UInt64.to_int c_idx < Seq.length (Model1.model c) && IndexLogic0.index_logic (Seq.get (Model1.model c) (UInt64.to_int c_idx)) = UInt64.to_int idx && (exists k : (int) . 0 <= k && k < Seq.length (Model1.model o) && IsOpp0.is_opp (Seq.get (Model1.model o) k) (Seq.get (Model1.model c) (UInt64.to_int c_idx)))}
    requires {InFormula0.in_formula o _f}
    requires {EquisatExtensionInner0.equisat_extension_inner c (Model2.model _f)}
    requires {Invariant1.invariant' _f}
    ensures { EquisatExtensionInner0.equisat_extension_inner result (Model2.model _f) }
    ensures { VarsInRange0.vars_in_range result (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    ensures { Invariant0.invariant' result (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    ensures { UnsatInner0.unsat_inner result (Model0.model _a) }
    
   = 
  var _0 : Type.creusat_clause_clause;
  var _f_1 : Type.creusat_formula_formula;
  var c_2 : Type.creusat_clause_clause;
  var o_3 : Type.creusat_clause_clause;
  var idx_4 : usize;
  var c_idx_5 : usize;
  var _a_6 : Type.creusat_assignments_assignments;
  var new_7 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var i_8 : usize;
  var _9 : ();
  var _10 : ();
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var old_new_15 : Type.creusotcontracts_logic_ghost_ghost (Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global));
  var _16 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _17 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _18 : ();
  var _19 : bool;
  var _20 : usize;
  var _21 : Type.creusat_lit_lit;
  var _22 : Type.creusat_lit_lit;
  var _23 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _24 : usize;
  var _25 : usize;
  var _26 : ();
  var _27 : ();
  var _28 : ();
  var _29 : bool;
  var _30 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _31 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _32 : usize;
  var _33 : Type.creusat_lit_lit;
  var _34 : Type.creusat_lit_lit;
  var _35 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _36 : usize;
  var _37 : ();
  var _38 : ();
  var _39 : ();
  var _40 : ();
  var _41 : ();
  var _42 : borrowed (Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global));
  var _43 : Type.creusat_lit_lit;
  var _44 : Type.creusat_lit_lit;
  var _45 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _46 : usize;
  var _47 : ();
  var _48 : ();
  var _49 : ();
  var _50 : ();
  var _51 : ();
  var _52 : ();
  var _53 : ();
  var _54 : ();
  var _o_idx_55 : Type.core_option_option usize;
  var old_new_56 : Type.creusotcontracts_logic_ghost_ghost (Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global));
  var _57 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _58 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _59 : ();
  var _60 : ();
  var _61 : ();
  var _62 : bool;
  var _63 : usize;
  var _64 : usize;
  var _65 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var old_new2_66 : Type.creusotcontracts_logic_ghost_ghost (Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global));
  var _67 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _68 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _69 : ();
  var _70 : ();
  var _71 : ();
  var _72 : ();
  var _73 : bool;
  var _74 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _75 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _76 : usize;
  var _77 : Type.creusat_lit_lit;
  var _78 : Type.creusat_lit_lit;
  var _79 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _80 : usize;
  var _81 : ();
  var _82 : ();
  var _83 : ();
  var _84 : ();
  var _85 : ();
  var _86 : ();
  var _87 : ();
  var _88 : ();
  var _89 : ();
  var _90 : ();
  var _91 : ();
  var _92 : bool;
  var _93 : usize;
  var _94 : Type.creusat_lit_lit;
  var _95 : Type.creusat_lit_lit;
  var _96 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _97 : usize;
  var _98 : usize;
  var _99 : ();
  var _100 : ();
  var _101 : Type.core_option_option usize;
  var _102 : usize;
  var _103 : ();
  var _104 : borrowed (Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global));
  var _105 : Type.creusat_lit_lit;
  var _106 : Type.creusat_lit_lit;
  var _107 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _108 : usize;
  var _109 : ();
  var _110 : ();
  var _111 : ();
  var _112 : ();
  var _113 : ();
  var _114 : ();
  var _115 : ();
  var _116 : ();
  var _117 : ();
  var _118 : ();
  var _119 : ();
  var out_120 : Type.creusat_clause_clause;
  var _121 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _122 : ();
  var _123 : ();
  var _124 : ();
  var _125 : ();
  var _126 : ();
  var _127 : isize;
  var o_idx_128 : usize;
  var _129 : ();
  var _130 : ();
  var _131 : ();
  var _132 : ();
  var _133 : ();
  var _134 : ();
  var _135 : ();
  var _136 : ();
  var _137 : ();
  {
    _f_1 <- _f;
    c_2 <- c;
    o_3 <- o;
    idx_4 <- idx;
    c_idx_5 <- c_idx;
    _a_6 <- _a;
    goto BB0
  }
  BB0 {
    new_7 <- New0.new ();
    goto BB1
  }
  BB1 {
    i_8 <- (0 : usize);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    invariant i_less { UInt64.to_int i_8 <= Seq.length (Model1.model c_2) };
    invariant new_elems { forall j : (int) . 0 <= j && j < Seq.length (Model3.model new_7) -> Invariant2.invariant' (Seq.get (Model3.model new_7) j) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f_1)) };
    invariant no_dups { forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length (Model3.model new_7) && 0 <= k && k < j -> IndexLogic0.index_logic (Seq.get (Model3.model new_7) j) <> IndexLogic0.index_logic (Seq.get (Model3.model new_7) k) };
    invariant not_idx { forall j : (int) . 0 <= j && j < Seq.length (Model3.model new_7) -> IndexLogic0.index_logic (Seq.get (Model3.model new_7) j) <> UInt64.to_int idx_4 };
    invariant reso { forall j : (int) . 0 <= j && j < UInt64.to_int i_8 && IndexLogic0.index_logic (Seq.get (Model1.model c_2) j) <> UInt64.to_int idx_4 -> LitInInternal0.lit_in_internal (Seq.get (Model1.model c_2) j) (Model3.model new_7) && true && true && true };
    invariant from_c { forall j : (int) . 0 <= j && j < Seq.length (Model3.model new_7) -> LitIn0.lit_in (Seq.get (Model3.model new_7) j) c_2 };
    _12 <- i_8;
    _14 <- Type.creusat_clause_clause_Clause_rest c_2;
    _13 <- Len0.len _14;
    goto BB8
  }
  BB8 {
    _11 <- _12 < _13;
    switch (_11)
      | False -> goto BB33
      | _ -> goto BB9
      end
  }
  BB9 {
    _17 <- new_7;
    _16 <- _17;
    old_new_15 <- Record0.record _16;
    goto BB10
  }
  BB10 {
    _23 <- Type.creusat_clause_clause_Clause_rest c_2;
    _24 <- i_8;
    _22 <- Index0.index _23 _24;
    goto BB11
  }
  BB11 {
    _21 <- _22;
    _20 <- Index1.index _21;
    goto BB12
  }
  BB12 {
    _25 <- idx_4;
    _19 <- _20 = _25;
    switch (_19)
      | False -> goto BB16
      | _ -> goto BB13
      end
  }
  BB13 {
    assert { Model3.model new_7 = Model3.model (Model4.model old_new_15) };
    goto BB14
  }
  BB14 {
    _26 <- ();
    assert { IndexLogic0.index_logic (Seq.get (Model1.model c_2) (UInt64.to_int i_8)) = UInt64.to_int idx_4 };
    _27 <- ();
    assert { forall j : (int) . 0 <= j && j < UInt64.to_int i_8 && IndexLogic0.index_logic (Seq.get (Model1.model c_2) j) <> UInt64.to_int idx_4 -> LitInInternal0.lit_in_internal (Seq.get (Model1.model c_2) j) (Model3.model new_7) };
    goto BB15
  }
  BB15 {
    _28 <- ();
    _18 <- ();
    goto BB32
  }
  BB16 {
    _31 <- new_7;
    _30 <- _31;
    _35 <- Type.creusat_clause_clause_Clause_rest c_2;
    _36 <- i_8;
    _34 <- Index0.index _35 _36;
    goto BB17
  }
  BB17 {
    _33 <- _34;
    _32 <- Index1.index _33;
    goto BB18
  }
  BB18 {
    _29 <- IdxIn0.idx_in _30 _32;
    goto BB19
  }
  BB19 {
    switch (_29)
      | False -> goto BB24
      | _ -> goto BB20
      end
  }
  BB20 {
    assert { Model3.model new_7 = Model3.model (Model4.model old_new_15) };
    goto BB21
  }
  BB21 {
    _37 <- ();
    assert { LitInInternal0.lit_in_internal (Seq.get (Model1.model c_2) (UInt64.to_int i_8)) (Model3.model new_7) };
    goto BB22
  }
  BB22 {
    _38 <- ();
    assert { IndexLogic0.index_logic (Seq.get (Model1.model c_2) (UInt64.to_int i_8)) <> UInt64.to_int idx_4 };
    _39 <- ();
    assert { forall j : (int) . 0 <= j && j < UInt64.to_int i_8 && IndexLogic0.index_logic (Seq.get (Model1.model c_2) j) <> UInt64.to_int idx_4 -> LitInInternal0.lit_in_internal (Seq.get (Model1.model c_2) j) (Model3.model new_7) };
    goto BB23
  }
  BB23 {
    _40 <- ();
    _18 <- ();
    goto BB31
  }
  BB24 {
    _42 <- borrow_mut new_7;
    new_7 <-  ^ _42;
    _45 <- Type.creusat_clause_clause_Clause_rest c_2;
    _46 <- i_8;
    _44 <- Index0.index _45 _46;
    goto BB25
  }
  BB25 {
    _43 <- _44;
    _41 <- Push0.push _42 _43;
    goto BB26
  }
  BB26 {
    assert { Seq.get (Model3.model new_7) (Seq.length (Model3.model new_7) - 1) = Seq.get (Model1.model c_2) (UInt64.to_int i_8) };
    goto BB27
  }
  BB27 {
    _47 <- ();
    assert { LitIn0.lit_in (Seq.get (Model3.model new_7) (Seq.length (Model3.model new_7) - 1)) c_2 };
    goto BB28
  }
  BB28 {
    _48 <- ();
    assert { LitInInternal0.lit_in_internal (Seq.get (Model1.model c_2) (UInt64.to_int i_8)) (Model3.model new_7) };
    goto BB29
  }
  BB29 {
    _49 <- ();
    assert { IndexLogic0.index_logic (Seq.get (Model1.model c_2) (UInt64.to_int i_8)) <> UInt64.to_int idx_4 };
    _50 <- ();
    assert { forall j : (int) . 0 <= j && j < UInt64.to_int i_8 && IndexLogic0.index_logic (Seq.get (Model1.model c_2) j) <> UInt64.to_int idx_4 -> LitInInternal0.lit_in_internal (Seq.get (Model1.model c_2) j) (Model3.model new_7) };
    goto BB30
  }
  BB30 {
    _51 <- ();
    _18 <- ();
    goto BB31
  }
  BB31 {
    goto BB32
  }
  BB32 {
    i_8 <- i_8 + (1 : usize);
    _10 <- ();
    goto BB7
  }
  BB33 {
    _9 <- ();
    _o_idx_55 <- Type.Core_Option_Option_None;
    _58 <- new_7;
    _57 <- _58;
    old_new_56 <- Record0.record _57;
    goto BB34
  }
  BB34 {
    assert { Model3.model new_7 = Model3.model (Model4.model old_new_56) };
    goto BB35
  }
  BB35 {
    _59 <- ();
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model3.model (Model4.model old_new_56)) -> Seq.get (Model3.model new_7) j = Seq.get (Model3.model (Model4.model old_new_56)) j };
    goto BB36
  }
  BB36 {
    _60 <- ();
    i_8 <- (0 : usize);
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    goto BB39
  }
  BB39 {
    goto BB40
  }
  BB40 {
    goto BB41
  }
  BB41 {
    goto BB42
  }
  BB42 {
    goto BB43
  }
  BB43 {
    goto BB44
  }
  BB44 {
    goto BB45
  }
  BB45 {
    goto BB46
  }
  BB46 {
    goto BB47
  }
  BB47 {
    goto BB48
  }
  BB48 {
    invariant i_less { UInt64.to_int i_8 <= Seq.length (Model3.model (Type.creusat_clause_clause_Clause_rest o_3)) };
    invariant new_elems { forall j : (int) . 0 <= j && j < Seq.length (Model3.model new_7) -> Invariant2.invariant' (Seq.get (Model3.model new_7) j) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f_1)) };
    invariant no_dups { forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length (Model3.model new_7) && 0 <= k && k < j -> IndexLogic0.index_logic (Seq.get (Model3.model new_7) j) <> IndexLogic0.index_logic (Seq.get (Model3.model new_7) k) };
    invariant not_idx { forall j : (int) . 0 <= j && j < Seq.length (Model3.model new_7) -> IndexLogic0.index_logic (Seq.get (Model3.model new_7) j) <> UInt64.to_int idx_4 };
    invariant resolve { forall j : (int) . 0 <= j && j < UInt64.to_int i_8 && IndexLogic0.index_logic (Seq.get (Model1.model o_3) j) <> UInt64.to_int idx_4 -> LitInInternal0.lit_in_internal (Seq.get (Model1.model o_3) j) (Model3.model new_7) };
    invariant from_o { forall j : (int) . 0 <= j && j < Seq.length (Model3.model new_7) - Seq.length (Model3.model (Model4.model old_new_56)) -> LitIn0.lit_in (Seq.get (Model3.model new_7) (Seq.length (Model3.model (Model4.model old_new_56)) + j)) o_3 };
    invariant from_c { forall j : (int) . 0 <= j && j < Seq.length (Model3.model (Model4.model old_new_56)) -> LitIn0.lit_in (Seq.get (Model3.model new_7) j) c_2 };
    invariant old_unchanged { forall j : (int) . 0 <= j && j < Seq.length (Model3.model (Model4.model old_new_56)) -> Seq.get (Model3.model new_7) j = Seq.get (Model3.model (Model4.model old_new_56)) j };
    invariant maintains { forall j : (int) . 0 <= j && j < Seq.length (Model1.model c_2) && IndexLogic0.index_logic (Seq.get (Model1.model c_2) j) <> UInt64.to_int idx_4 -> LitInInternal0.lit_in_internal (Seq.get (Model1.model c_2) j) (Model3.model new_7) };
    invariant new_sourced { forall j : (int) . 0 <= j && j < Seq.length (Model3.model new_7) -> LitInInternal0.lit_in_internal (Seq.get (Model3.model new_7) j) (Model1.model c_2) || LitInInternal0.lit_in_internal (Seq.get (Model3.model new_7) j) (Model1.model o_3) };
    invariant confl_idx { match (_o_idx_55) with
      | Type.Core_Option_Option_None -> forall j : (int) . 0 <= j && j < UInt64.to_int i_8 -> IndexLogic0.index_logic (Seq.get (Model1.model o_3) j) <> UInt64.to_int idx_4
      | Type.Core_Option_Option_Some j -> IndexLogic0.index_logic (Seq.get (Model1.model o_3) (UInt64.to_int j)) = UInt64.to_int idx_4
      end };
    invariant res2 { match (_o_idx_55) with
      | Type.Core_Option_Option_None -> forall j : (int) . 0 <= j && j < UInt64.to_int i_8 -> LitInInternal0.lit_in_internal (Seq.get (Model1.model o_3) j) (Model3.model new_7)
      | Type.Core_Option_Option_Some k -> UInt64.to_int k < UInt64.to_int i_8 && (forall j : (int) . 0 <= j && j < UInt64.to_int i_8 && j <> UInt64.to_int k -> LitInInternal0.lit_in_internal (Seq.get (Model1.model o_3) j) (Model3.model new_7))
      end };
    invariant res { forall j : (int) . 0 <= j && j < Seq.length (Model1.model c_2) && j <> UInt64.to_int c_idx_5 -> LitInInternal0.lit_in_internal (Seq.get (Model1.model c_2) j) (Model3.model new_7) && true };
    _63 <- i_8;
    _65 <- Type.creusat_clause_clause_Clause_rest o_3;
    _64 <- Len0.len _65;
    goto BB49
  }
  BB49 {
    _62 <- _63 < _64;
    switch (_62)
      | False -> goto BB80
      | _ -> goto BB50
      end
  }
  BB50 {
    _68 <- new_7;
    _67 <- _68;
    old_new2_66 <- Record0.record _67;
    goto BB51
  }
  BB51 {
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model3.model (Model4.model old_new_56)) -> Seq.get (Model3.model (Model4.model old_new2_66)) j = Seq.get (Model3.model (Model4.model old_new_56)) j };
    _69 <- ();
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model3.model (Model4.model old_new_56)) -> Seq.get (Model3.model new_7) j = Seq.get (Model3.model (Model4.model old_new_56)) j };
    goto BB52
  }
  BB52 {
    _70 <- ();
    assert { Model3.model new_7 = Model3.model (Model4.model old_new2_66) };
    goto BB53
  }
  BB53 {
    _71 <- ();
    _75 <- new_7;
    _74 <- _75;
    _79 <- Type.creusat_clause_clause_Clause_rest o_3;
    _80 <- i_8;
    _78 <- Index0.index _79 _80;
    goto BB54
  }
  BB54 {
    _77 <- _78;
    _76 <- Index1.index _77;
    goto BB55
  }
  BB55 {
    _73 <- IdxIn0.idx_in _74 _76;
    goto BB56
  }
  BB56 {
    switch (_73)
      | False -> goto BB64
      | _ -> goto BB57
      end
  }
  BB57 {
    assert { Model3.model new_7 = Model3.model (Model4.model old_new2_66) };
    goto BB58
  }
  BB58 {
    _81 <- ();
    assert { UInt64.to_int c_idx_5 < Seq.length (Model1.model c_2) && IndexLogic0.index_logic (Seq.get (Model1.model c_2) (UInt64.to_int c_idx_5)) = UInt64.to_int idx_4 && (exists k : (int) . 0 <= k && k < Seq.length (Model1.model o_3) && k <> UInt64.to_int i_8 && IsOpp0.is_opp (Seq.get (Model1.model o_3) k) (Seq.get (Model1.model c_2) (UInt64.to_int c_idx_5))) };
    _82 <- ();
    assert { forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length (Model1.model o_3) && 0 <= k && k < Seq.length (Model1.model c_2) && k <> UInt64.to_int c_idx_5 && IndexLogic0.index_logic (Seq.get (Model1.model o_3) j) <> UInt64.to_int idx_4 -> not (IsOpp0.is_opp (Seq.get (Model1.model c_2) k) (Seq.get (Model1.model o_3) j)) };
    _83 <- ();
    assert { InvariantUnaryOk0.invariant_unary_ok o_3 (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f_1)) };
    _84 <- ();
    assert { InvariantUnaryOk0.invariant_unary_ok c_2 (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f_1)) };
    _85 <- ();
    assert { 0 <= UInt64.to_int i_8 && UInt64.to_int i_8 < Seq.length (Model1.model o_3) && IndexLogic0.index_logic (Seq.get (Model1.model o_3) (UInt64.to_int i_8)) <> UInt64.to_int idx_4 };
    _86 <- ();
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model1.model c_2) && IndexLogic0.index_logic (Seq.get (Model1.model c_2) j) <> UInt64.to_int idx_4 -> LitInInternal0.lit_in_internal (Seq.get (Model1.model c_2) j) (Model3.model new_7) };
    goto BB59
  }
  BB59 {
    _87 <- ();
    assert { let _ = LemmaIdx0.lemma_idx (Model1.model c_2) (Model1.model o_3) (Model3.model new_7) (UInt64.to_int i_8) (UInt64.to_int idx_4) (UInt64.to_int c_idx_5) _f_1 in true };
    goto BB60
  }
  BB60 {
    _88 <- ();
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model3.model new_7) -> LitInInternal0.lit_in_internal (Seq.get (Model3.model new_7) j) (Model1.model c_2) || LitInInternal0.lit_in_internal (Seq.get (Model3.model new_7) j) (Model1.model o_3) };
    goto BB61
  }
  BB61 {
    _89 <- ();
    assert { exists k : (int) . 0 <= k && k < Seq.length (Model3.model new_7) && IndexLogic0.index_logic (Seq.get (Model1.model o_3) (UInt64.to_int i_8)) = IndexLogic0.index_logic (Seq.get (Model3.model new_7) k) };
    goto BB62
  }
  BB62 {
    _90 <- ();
    assert { let _ = LemmaIdx20.lemma_idx2 (Model1.model c_2) (Model1.model o_3) (Model3.model new_7) (UInt64.to_int i_8) (UInt64.to_int idx_4) (UInt64.to_int c_idx_5) _f_1 in LitInInternal0.lit_in_internal (Seq.get (Model1.model o_3) (UInt64.to_int i_8)) (Model3.model new_7) };
    goto BB63
  }
  BB63 {
    _91 <- ();
    _72 <- ();
    goto BB78
  }
  BB64 {
    _96 <- Type.creusat_clause_clause_Clause_rest o_3;
    _97 <- i_8;
    _95 <- Index0.index _96 _97;
    goto BB65
  }
  BB65 {
    _94 <- _95;
    _93 <- Index1.index _94;
    goto BB66
  }
  BB66 {
    _98 <- idx_4;
    _92 <- _93 = _98;
    switch (_92)
      | False -> goto BB69
      | _ -> goto BB67
      end
  }
  BB67 {
    assert { Model3.model new_7 = Model3.model (Model4.model old_new2_66) };
    goto BB68
  }
  BB68 {
    _99 <- ();
    assert { IndexLogic0.index_logic (Seq.get (Model1.model o_3) (UInt64.to_int i_8)) = UInt64.to_int idx_4 };
    _100 <- ();
    _102 <- i_8;
    _101 <- Type.Core_Option_Option_Some _102;
    _o_idx_55 <- _101;
    _72 <- ();
    goto BB77
  }
  BB69 {
    _104 <- borrow_mut new_7;
    new_7 <-  ^ _104;
    _107 <- Type.creusat_clause_clause_Clause_rest o_3;
    _108 <- i_8;
    _106 <- Index0.index _107 _108;
    goto BB70
  }
  BB70 {
    _105 <- _106;
    _103 <- Push0.push _104 _105;
    goto BB71
  }
  BB71 {
    assert { Seq.get (Model3.model new_7) (Seq.length (Model3.model new_7) - 1) = Seq.get (Model3.model (Type.creusat_clause_clause_Clause_rest o_3)) (UInt64.to_int i_8) };
    goto BB72
  }
  BB72 {
    _109 <- ();
    assert { LitIn0.lit_in (Seq.get (Model3.model new_7) (Seq.length (Model3.model new_7) - 1)) o_3 };
    goto BB73
  }
  BB73 {
    _110 <- ();
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model3.model (Model4.model old_new2_66)) -> Seq.get (Model3.model new_7) j = Seq.get (Model3.model (Model4.model old_new2_66)) j };
    goto BB74
  }
  BB74 {
    _111 <- ();
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model3.model (Model4.model old_new_56)) -> Seq.get (Model3.model new_7) j = Seq.get (Model3.model (Model4.model old_new_56)) j };
    goto BB75
  }
  BB75 {
    _112 <- ();
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model3.model (Model4.model old_new_56)) -> Seq.get (Model3.model (Model4.model old_new2_66)) j = Seq.get (Model3.model (Model4.model old_new_56)) j };
    _113 <- ();
    assert { LitInInternal0.lit_in_internal (Seq.get (Model1.model o_3) (UInt64.to_int i_8)) (Model3.model new_7) };
    goto BB76
  }
  BB76 {
    _114 <- ();
    _72 <- ();
    goto BB77
  }
  BB77 {
    goto BB78
  }
  BB78 {
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model3.model (Model4.model old_new_56)) -> Seq.get (Model3.model (Model4.model old_new2_66)) j = Seq.get (Model3.model (Model4.model old_new_56)) j };
    _115 <- ();
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model3.model (Model4.model old_new_56)) -> Seq.get (Model3.model new_7) j = Seq.get (Model3.model (Model4.model old_new_56)) j };
    goto BB79
  }
  BB79 {
    _116 <- ();
    i_8 <- i_8 + (1 : usize);
    _10 <- ();
    goto BB48
  }
  BB80 {
    _61 <- ();
    assume { Resolve0.resolve _121 };
    _121 <- new_7;
    out_120 <- Type.CreuSat_Clause_Clause false _121;
    goto BB81
  }
  BB81 {
    assert { Model5.model out_120 = Model3.model new_7 };
    goto BB82
  }
  BB82 {
    _122 <- ();
    assert { forall i : (int) . 0 <= i && i < Seq.length (Model1.model o_3) && IndexLogic0.index_logic (Seq.get (Model1.model o_3) i) <> UInt64.to_int idx_4 -> LitInInternal0.lit_in_internal (Seq.get (Model1.model o_3) i) (Model3.model new_7) };
    goto BB83
  }
  BB83 {
    _123 <- ();
    assert { exists m : (int) . exists k : (int) . 0 <= k && k < Seq.length (Model1.model o_3) && 0 <= m && m < Seq.length (Model1.model c_2) && IndexLogic0.index_logic (Seq.get (Model1.model c_2) m) = UInt64.to_int idx_4 && IndexLogic0.index_logic (Seq.get (Model1.model o_3) k) = UInt64.to_int idx_4 && IsOpp0.is_opp (Seq.get (Model1.model o_3) k) (Seq.get (Model1.model c_2) m) };
    _124 <- ();
    assert { ResolventOfIdx0.resolvent_of_idx out_120 c_2 o_3 (UInt64.to_int idx_4) };
    goto BB84
  }
  BB84 {
    _125 <- ();
    switch (_o_idx_55)
      | Type.Core_Option_Option_None -> goto BB85
      | Type.Core_Option_Option_Some _ -> goto BB87
      end
  }
  BB85 {
    absurd
  }
  BB86 {
    absurd
  }
  BB87 {
    o_idx_128 <- Type.core_option_option_Some_0 _o_idx_55;
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model1.model c_2) && j <> UInt64.to_int c_idx_5 -> LitIn0.lit_in (Seq.get (Model1.model c_2) j) out_120 };
    goto BB88
  }
  BB88 {
    _129 <- ();
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model1.model o_3) && j <> UInt64.to_int o_idx_128 -> LitIn0.lit_in (Seq.get (Model1.model o_3) j) out_120 };
    goto BB89
  }
  BB89 {
    _130 <- ();
    assert { FormulaInvariant0.formula_invariant (Model2.model _f_1) };
    _131 <- ();
    assert { EquisatExtensionInner0.equisat_extension_inner c_2 (Model2.model _f_1) };
    _132 <- ();
    assert { InFormulaInner0.in_formula_inner o_3 (Model2.model _f_1) };
    _133 <- ();
    assert { ResolventOf0.resolvent_of out_120 c_2 o_3 (UInt64.to_int o_idx_128) (UInt64.to_int c_idx_5) };
    goto BB90
  }
  BB90 {
    _134 <- ();
    assert { let _ = LemmaResolventOfEquisatExtensionIsEquisat0.lemma_resolvent_of_equisat_extension_is_equisat (Model2.model _f_1) c_2 o_3 out_120 (UInt64.to_int c_idx_5) (UInt64.to_int o_idx_128) in true };
    goto BB91
  }
  BB91 {
    _135 <- ();
    assert { EquisatExtensionInner0.equisat_extension_inner out_120 (Model2.model _f_1) };
    goto BB92
  }
  BB92 {
    _136 <- ();
    _126 <- ();
    _0 <- out_120;
    goto BB93
  }
  BB93 {
    goto BB94
  }
  BB94 {
    return _0
  }
  
end
module CreuSat_Logic_LogicClause_Impl2_Unsat_Interface
  use Type
  predicate unsat (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicClause_Impl2_Unsat
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate unsat (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) = 
    UnsatInner0.unsat_inner self (Model0.model a)
end
module CreuSat_Logic_LogicTrail_LitToLevelInvariant_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  predicate lit_to_level_invariant (lit_to_level : Seq.seq usize) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_LitToLevelInvariant
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  predicate lit_to_level_invariant (lit_to_level : Seq.seq usize) (f : Type.creusat_formula_formula) = 
    Seq.length lit_to_level = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)
end
module CreuSat_Logic_LogicLit_Impl1_LitIdxIn_Interface
  use Type
  predicate lit_idx_in (self : Type.creusat_lit_lit) (c : Type.creusat_clause_clause)
end
module CreuSat_Logic_LogicLit_Impl1_LitIdxIn
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate lit_idx_in (self : Type.creusat_lit_lit) (c : Type.creusat_clause_clause) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) && IndexLogic0.index_logic (Seq.get (Model0.model c) i) = IndexLogic0.index_logic self
end
module CreuSat_Logic_LogicTrail_LitNotInLessInner_Interface
  use seq.Seq
  use Type
  predicate lit_not_in_less_inner (t : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_LitNotInLessInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn_Interface as LitIdxIn0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  predicate lit_not_in_less_inner (t : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) = 
    forall i : (int) . 0 <= i && i < Seq.length t -> (forall j : (int) . 0 <= j && j < i -> match (Type.creusat_trail_step_Step_reason (Seq.get t j)) with
      | Type.CreuSat_Trail_Reason_Long cref -> not (LitIdxIn0.lit_idx_in (Type.creusat_trail_step_Step_lit (Seq.get t i)) (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)))
      | _ -> true
      end)
end
module CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface
  use Type
  predicate lit_not_in_less (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_Impl2_LitNotInLess
  use Type
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner_Interface as LitNotInLessInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  predicate lit_not_in_less (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) = 
    LitNotInLessInner0.lit_not_in_less_inner (Model0.model (Type.creusat_trail_trail_Trail_trail self)) f
end
module CreuSat_Logic_LogicTrail_LitIsUniqueInner_Interface
  use seq.Seq
  use Type
  predicate lit_is_unique_inner (trail : Seq.seq (Type.creusat_trail_step))
end
module CreuSat_Logic_LogicTrail_LitIsUniqueInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  predicate lit_is_unique_inner (trail : Seq.seq (Type.creusat_trail_step)) = 
    forall i : (int) . 0 <= i && i < Seq.length trail -> (forall j : (int) . 0 <= j && j < i -> IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get trail j)) <> IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get trail i)))
end
module CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface
  use Type
  predicate lit_is_unique (self : Type.creusat_trail_trail)
end
module CreuSat_Logic_LogicTrail_Impl2_LitIsUnique
  use Type
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner_Interface as LitIsUniqueInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  predicate lit_is_unique (self : Type.creusat_trail_trail) = 
    LitIsUniqueInner0.lit_is_unique_inner (Model0.model (Type.creusat_trail_trail_Trail_trail self))
end
module CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate trail_entries_are_assigned_inner (t : Seq.seq (Type.creusat_trail_step)) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  predicate trail_entries_are_assigned_inner (t : Seq.seq (Type.creusat_trail_step)) (a : Seq.seq uint8) = 
    forall j : (int) . 0 <= j && j < Seq.length t -> SatInner0.sat_inner (Type.creusat_trail_step_Step_lit (Seq.get t j)) a
end
module CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned_Interface
  use Type
  predicate trail_entries_are_assigned (self : Type.creusat_trail_trail)
end
module CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned
  use Type
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner_Interface as TrailEntriesAreAssignedInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  predicate trail_entries_are_assigned (self : Type.creusat_trail_trail) = 
    TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner (Model0.model (Type.creusat_trail_trail_Trail_trail self)) (Model1.model (Type.creusat_trail_trail_Trail_assignments self))
end
module CreuSat_Logic_LogicUtil_SortedRange_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range (s : Seq.seq usize) (l : int) (u : int)
end
module CreuSat_Logic_LogicUtil_SortedRange
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range (s : Seq.seq usize) (l : int) (u : int) = 
    forall j : (int) . forall i : (int) . l <= i && i < j && j < u -> Seq.get s i <= Seq.get s j
end
module CreuSat_Logic_LogicUtil_Sorted_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted (s : Seq.seq usize)
end
module CreuSat_Logic_LogicUtil_Sorted
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  clone CreuSat_Logic_LogicUtil_SortedRange_Interface as SortedRange0
  predicate sorted (s : Seq.seq usize) = 
    SortedRange0.sorted_range s 0 (Seq.length s)
end
module CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted_Interface
  use Type
  predicate decisions_are_sorted (self : Type.creusat_trail_trail)
end
module CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreuSat_Logic_LogicUtil_Sorted_Interface as Sorted0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize, type a = Type.alloc_alloc_global
  predicate decisions_are_sorted (self : Type.creusat_trail_trail) = 
    Sorted0.sorted (Model0.model (Type.creusat_trail_trail_Trail_decisions self))
end
module CreuSat_Logic_LogicTrail_UnitAreSat_Interface
  use seq.Seq
  use Type
  predicate unit_are_sat (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
    
end
module CreuSat_Logic_LogicTrail_UnitAreSat
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone CreuSat_Logic_LogicLit_Impl1_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  predicate unit_are_sat (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
    
   = 
    forall j : (int) . 0 <= j && j < Seq.length trail -> match (Type.creusat_trail_step_Step_reason (Seq.get trail j)) with
      | Type.CreuSat_Trail_Reason_Unit k -> Type.creusat_trail_step_Step_lit (Seq.get trail j) = Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k))) 0 && Sat0.sat (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k))) 0) a
      | _ -> true
      end
end
module CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision_Interface
  use Type
  predicate invariant_no_decision (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreuSat_Logic_LogicTrail_UnitAreSat_Interface as UnitAreSat0
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted_Interface as DecisionsAreSorted0
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned_Interface as TrailEntriesAreAssigned0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant_Interface as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_TrailInvariant_Interface as TrailInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant0
  predicate invariant_no_decision (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) = 
    Invariant0.invariant' (Type.creusat_trail_trail_Trail_assignments self) f && TrailInvariant0.trail_invariant (Model0.model (Type.creusat_trail_trail_Trail_trail self)) f && LitToLevelInvariant0.lit_to_level_invariant (Model1.model (Type.creusat_trail_trail_Trail_lit_to_level self)) f && LitNotInLess0.lit_not_in_less self f && LitIsUnique0.lit_is_unique self && LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail self)) f (Model2.model (Type.creusat_trail_trail_Trail_assignments self)) && TrailEntriesAreAssigned0.trail_entries_are_assigned self && DecisionsAreSorted0.decisions_are_sorted self && UnitAreSat0.unit_are_sat (Model0.model (Type.creusat_trail_trail_Trail_trail self)) f (Type.creusat_trail_trail_Trail_assignments self)
end
module CreuSat_Logic_LogicTrail_DecisionsInvariant_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  predicate decisions_invariant (decisions : Seq.seq usize) (trail : Seq.seq (Type.creusat_trail_step))
end
module CreuSat_Logic_LogicTrail_DecisionsInvariant
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  use mach.int.Int32
  predicate decisions_invariant (decisions : Seq.seq usize) (trail : Seq.seq (Type.creusat_trail_step)) = 
    forall i : (int) . 0 <= i && i < Seq.length decisions -> UInt64.to_int (Seq.get decisions i) <= Seq.length trail
end
module CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface
  use Type
  predicate invariant' (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_Impl2_Invariant
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant_Interface as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision_Interface as InvariantNoDecision0
  predicate invariant' (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) = 
    InvariantNoDecision0.invariant_no_decision self f && DecisionsInvariant0.decisions_invariant (Model0.model (Type.creusat_trail_trail_Trail_decisions self)) (Model1.model (Type.creusat_trail_trail_Trail_trail self))
end
module CreusotContracts_Logic_Int_Impl13_ModelTy
  use mach.int.Int
  type modelTy  = 
    int
end
module CreusotContracts_Logic_Int_Impl13_Model_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl13_Model
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : usize) : int = 
    UInt64.to_int self
end
module CreusotContracts_Logic_Int_Impl13
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Logic_Int_Impl13_Model as Model0
  clone CreusotContracts_Logic_Int_Impl13_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = usize, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = usize, type modelTy = ModelTy0.modelTy
end
module CreuSat_ConflictAnalysis_ChooseLiteral_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp_Interface as IsOpp0
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat0
  clone CreusotContracts_Logic_Int_Impl13_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = usize,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  val choose_literal [@cfg:stackify] (c : Type.creusat_clause_clause) (trail : Type.creusat_trail_trail) (i : borrowed usize) (_f : Type.creusat_formula_formula) : Type.core_option_option usize
    requires {Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail trail)) > 0}
    requires {Model1.model i <= Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail trail))}
    requires {Unsat0.unsat c (Type.creusat_trail_trail_Trail_assignments trail)}
    requires {Invariant0.invariant' trail _f}
    ensures { UInt64.to_int ( ^ i) < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail trail)) }
    ensures { match (result) with
      | Type.Core_Option_Option_Some r -> UInt64.to_int r < Seq.length (Model2.model c) && IsOpp0.is_opp (Seq.get (Model2.model c) (UInt64.to_int r)) (Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail trail)) (UInt64.to_int ( ^ i)))) && IndexLogic0.index_logic (Seq.get (Model2.model c) (UInt64.to_int r)) = IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail trail)) (UInt64.to_int ( ^ i))))
      | Type.Core_Option_Option_None -> true
      end }
    
end
module CreuSat_ConflictAnalysis_ChooseLiteral
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model7 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant4 with function Model0.model = Model10.model,
  function Model1.model = Model7.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model5 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant1 with function Model0.model = Model5.model
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model3 with type t = borrowed usize
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant2 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant4.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model10.model,
  function Model1.model = Model7.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model10.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model7.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model10.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner0 with function Model0.model = Model7.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unsat as Unsat0 with function Model0.model = Model5.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp as IsOpp0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model7.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model6.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Logic_Int_Impl13_Model as Model4
  clone CreusotContracts_Logic_Int_Impl13_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = usize,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model5.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model6.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model5.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant0 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model6.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = usize
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy3 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = Type.creusat_trail_step
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_trail_step
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_trail_step
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_trail_step
  clone Alloc_Vec_Impl16_Index_Interface as Index2 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model9.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model9.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed usize,
  function Model0.model = Model3.model
  clone CreuSat_Lit_Impl1_Index_Interface as Index1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_trail_step, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg choose_literal [@cfg:stackify] (c : Type.creusat_clause_clause) (trail : Type.creusat_trail_trail) (i : borrowed usize) (_f : Type.creusat_formula_formula) : Type.core_option_option usize
    requires {Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail trail)) > 0}
    requires {Model1.model i <= Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail trail))}
    requires {Unsat0.unsat c (Type.creusat_trail_trail_Trail_assignments trail)}
    requires {Invariant0.invariant' trail _f}
    ensures { UInt64.to_int ( ^ i) < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail trail)) }
    ensures { match (result) with
      | Type.Core_Option_Option_Some r -> UInt64.to_int r < Seq.length (Model2.model c) && IsOpp0.is_opp (Seq.get (Model2.model c) (UInt64.to_int r)) (Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail trail)) (UInt64.to_int ( ^ i)))) && IndexLogic0.index_logic (Seq.get (Model2.model c) (UInt64.to_int r)) = IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail trail)) (UInt64.to_int ( ^ i))))
      | Type.Core_Option_Option_None -> true
      end }
    
   = 
  var _0 : Type.core_option_option usize;
  var c_1 : Type.creusat_clause_clause;
  var trail_2 : Type.creusat_trail_trail;
  var i_3 : borrowed usize;
  var _f_4 : Type.creusat_formula_formula;
  var old_i_5 : Type.creusotcontracts_logic_ghost_ghost (borrowed usize);
  var _6 : borrowed usize;
  var _7 : borrowed usize;
  var _8 : ();
  var _9 : ();
  var _10 : bool;
  var _11 : usize;
  var k_12 : usize;
  var _13 : bool;
  var _14 : usize;
  var _15 : usize;
  var _16 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _17 : ();
  var _18 : bool;
  var _19 : usize;
  var _20 : Type.creusat_lit_lit;
  var _21 : Type.creusat_trail_step;
  var _22 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var _23 : usize;
  var _24 : usize;
  var _25 : Type.creusat_lit_lit;
  var _26 : Type.creusat_lit_lit;
  var _27 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _28 : usize;
  var _29 : ();
  var _30 : usize;
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : ();
  var _35 : ();
  var _36 : ();
  {
    c_1 <- c;
    trail_2 <- trail;
    i_3 <- i;
    _f_4 <- _f;
    goto BB0
  }
  BB0 {
    _7 <- i_3;
    _6 <- _7;
    old_i_5 <- Record0.record _6;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant i_bound { 0 <= Model1.model i_3 && Model1.model i_3 <= Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail trail_2)) };
    invariant proph_i {  ^ i_3 =  ^ Model3.model old_i_5 };
    _11 <-  * i_3;
    _10 <- _11 > (0 : usize);
    switch (_10)
      | False -> goto BB14
      | _ -> goto BB3
      end
  }
  BB3 {
    i_3 <- { i_3 with current = ( * i_3 - (1 : usize)) };
    k_12 <- (0 : usize);
    goto BB4
  }
  BB4 {
    invariant i_bound2 { 0 <= Model1.model i_3 && Model1.model i_3 < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail trail_2)) };
    invariant k_bound { 0 <= UInt64.to_int k_12 && UInt64.to_int k_12 <= Seq.length (Model2.model c_1) };
    invariant proph_i2 {  ^ i_3 =  ^ Model3.model old_i_5 };
    _14 <- k_12;
    _16 <- Type.creusat_clause_clause_Clause_rest c_1;
    _15 <- Len0.len _16;
    goto BB5
  }
  BB5 {
    _13 <- _14 < _15;
    switch (_13)
      | False -> goto BB13
      | _ -> goto BB6
      end
  }
  BB6 {
    _22 <- Type.creusat_trail_trail_Trail_trail trail_2;
    _23 <-  * i_3;
    _21 <- Index0.index _22 _23;
    goto BB7
  }
  BB7 {
    _20 <- Type.creusat_trail_step_Step_lit _21;
    _19 <- Index1.index _20;
    goto BB8
  }
  BB8 {
    _27 <- Type.creusat_clause_clause_Clause_rest c_1;
    _28 <- k_12;
    _26 <- Index2.index _27 _28;
    goto BB9
  }
  BB9 {
    _25 <- _26;
    _24 <- Index1.index _25;
    goto BB10
  }
  BB10 {
    _18 <- _19 = _24;
    switch (_18)
      | False -> goto BB12
      | _ -> goto BB11
      end
  }
  BB11 {
    assume { Resolve0.resolve i_3 };
    _30 <- k_12;
    _0 <- Type.Core_Option_Option_Some _30;
    goto BB15
  }
  BB12 {
    _17 <- ();
    k_12 <- k_12 + (1 : usize);
    _9 <- ();
    goto BB4
  }
  BB13 {
    _9 <- ();
    goto BB2
  }
  BB14 {
    assume { Resolve0.resolve i_3 };
    _8 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module CreuSat_Logic_LogicClause_Impl2_EquisatExtension_Interface
  use Type
  predicate equisat_extension (self : Type.creusat_clause_clause) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicClause_Impl2_EquisatExtension
  use Type
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicFormula_Impl0_Model_Interface as Model0
  predicate equisat_extension (self : Type.creusat_clause_clause) (f : Type.creusat_formula_formula) = 
    EquisatExtensionInner0.equisat_extension_inner self (Model0.model f)
end
module CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable_Interface
  use Type
  predicate not_satisfiable (self : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension_Interface as EquisatExtension0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate not_satisfiable (self : Type.creusat_formula_formula) = 
    exists c : (Type.creusat_clause_clause) . Seq.length (Model0.model c) = 0 && EquisatExtension0.equisat_extension c self
end
module CreuSat_Trail_Impl0_DecisionLevel_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize, type a = Type.alloc_alloc_global
  val decision_level [@cfg:stackify] (self : Type.creusat_trail_trail) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model (Type.creusat_trail_trail_Trail_decisions self)) }
    
end
module CreuSat_Trail_Impl0_DecisionLevel
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize, type a = Type.alloc_alloc_global
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = usize, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  let rec cfg decision_level [@cfg:stackify] (self : Type.creusat_trail_trail) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model (Type.creusat_trail_trail_Trail_decisions self)) }
    
   = 
  var _0 : usize;
  var self_1 : Type.creusat_trail_trail;
  var _2 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- Type.creusat_trail_trail_Trail_decisions self_1;
    _0 <- Len0.len _2;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module CreusotContracts_Std1_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module CreusotContracts_Std1_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module CreuSat_Clause_Impl0
  use Type
  clone CreuSat_Clause_Impl0_Clone_Interface as Clone0
  clone CreusotContracts_Std1_Clone_Clone_Clone_Interface as Clone1 with type self = Type.creusat_clause_clause,
  val clone' = Clone0.clone'
end
module CreuSat_ConflictAnalysis_DeriveEmptyFormula_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  val derive_empty_formula [@cfg:stackify] (f : Type.creusat_formula_formula) (trail : Type.creusat_trail_trail) (cref : usize) : bool
    requires {Unsat0.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)) (Type.creusat_trail_trail_Trail_assignments trail)}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' trail f}
    requires {Invariant1.invariant' f}
    ensures { if result then NotSatisfiable0.not_satisfiable f else true }
    
end
module CreuSat_ConflictAnalysis_DeriveEmptyFormula
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  use mach.int.Int32
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model4 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant2 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant4 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model2 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model2.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant3 with function Model0.model = Model2.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model2.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model2.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone CreuSat_Logic_LogicClause_Impl2_InvariantUnaryOk as InvariantUnaryOk0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unsat as Unsat0 with function Model0.model = Model4.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_SameIdxSamePolarityExcept as SameIdxSamePolarityExcept0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model3.model,
  function Model1.model = Model4.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model3.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model5.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant6 with function Model0.model = Model0.model,
  function Model1.model = Model2.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant4.invariant',
  predicate Invariant1.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model0.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model3.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model0.model,
  function Model1.model = Model2.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Model0.model = Model3.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model5.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model4.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant0 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model5.model, function Model1.model = Model3.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model6 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model6.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model2.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant3.invariant', function Model1.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model6.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Int_Impl13_Model as Model12
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy5
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy4 with type t = Type.creusat_trail_step
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_trail_step
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_trail_step
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_trail_step
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = usize
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy3
  clone CreusotContracts_Logic_Int_Impl13_ModelTy as ModelTy2
  clone CreusotContracts_Logic_Model_Impl1_Model as Model9 with type t = usize,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model12.model
  clone CreuSat_Clause_Impl0_Clone_Interface as Clone0
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Model_Impl0_Model as Model11 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy5.modelTy, function Model0.model = Model4.model
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp as IsOpp0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Lit_Impl1_Index_Interface as Index2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model7.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model10 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model2.model
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_trail_step, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_trail_step, type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model
  clone CreuSat_Logic_LogicClause_Impl2_InFormula as InFormula0 with function Model0.model = Model0.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_ConflictAnalysis_ChooseLiteral_Interface as ChooseLiteral0 with function Model0.model = Model3.model,
  function Model1.model = Model9.model, predicate Unsat0.unsat = Unsat0.unsat,
  predicate Invariant0.invariant' = Invariant0.invariant', function Model2.model = Model10.model,
  predicate IsOpp0.is_opp = IsOpp0.is_opp, function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_ConflictAnalysis_Resolve_Interface as Resolve1 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model11.model, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  predicate SameIdxSamePolarityExcept0.same_idx_same_polarity_except = SameIdxSamePolarityExcept0.same_idx_same_polarity_except,
  function Model1.model = Model10.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate IsOpp0.is_opp = IsOpp0.is_opp, predicate InFormula0.in_formula = InFormula0.in_formula,
  function Model2.model = Model1.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  predicate Invariant1.invariant' = Invariant1.invariant',
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg derive_empty_formula [@cfg:stackify] (f : Type.creusat_formula_formula) (trail : Type.creusat_trail_trail) (cref : usize) : bool
    requires {Unsat0.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)) (Type.creusat_trail_trail_Trail_assignments trail)}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' trail f}
    requires {Invariant1.invariant' f}
    ensures { if result then NotSatisfiable0.not_satisfiable f else true }
    
   = 
  var _0 : bool;
  var f_1 : Type.creusat_formula_formula;
  var trail_2 : Type.creusat_trail_trail;
  var cref_3 : usize;
  var _4 : ();
  var i_5 : usize;
  var _6 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var clause_7 : Type.creusat_clause_clause;
  var _8 : Type.creusat_clause_clause;
  var _9 : Type.creusat_clause_clause;
  var _10 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _11 : usize;
  var _12 : ();
  var _13 : ();
  var _14 : bool;
  var _15 : usize;
  var _16 : ();
  var c_idx_17 : usize;
  var _18 : Type.core_option_option usize;
  var _19 : Type.creusat_clause_clause;
  var _20 : Type.creusat_clause_clause;
  var _21 : Type.creusat_trail_trail;
  var _22 : borrowed usize;
  var _23 : borrowed usize;
  var _24 : Type.creusat_formula_formula;
  var _25 : isize;
  var _26 : ();
  var b_27 : usize;
  var _28 : ();
  var ante_29 : Type.creusat_clause_clause;
  var _30 : Type.creusat_trail_reason;
  var _31 : Type.creusat_trail_step;
  var _32 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var _33 : usize;
  var _34 : isize;
  var c_35 : usize;
  var _36 : Type.creusat_clause_clause;
  var _37 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _38 : usize;
  var c_39 : usize;
  var _40 : Type.creusat_clause_clause;
  var _41 : Type.creusat_clause_clause;
  var _42 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _43 : usize;
  var o_44 : Type.creusat_trail_reason;
  var _45 : ();
  var _46 : ();
  var _47 : Type.creusat_clause_clause;
  var _48 : Type.creusat_formula_formula;
  var _49 : Type.creusat_clause_clause;
  var _50 : Type.creusat_clause_clause;
  var _51 : Type.creusat_clause_clause;
  var _52 : Type.creusat_clause_clause;
  var _53 : usize;
  var _54 : Type.creusat_lit_lit;
  var _55 : Type.creusat_trail_step;
  var _56 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var _57 : usize;
  var _58 : usize;
  var _59 : Type.creusat_assignments_assignments;
  var _60 : Type.creusat_assignments_assignments;
  var _61 : bool;
  var _62 : usize;
  var _63 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _64 : ();
  var _65 : ();
  var _66 : ();
  var _67 : ();
  {
    f_1 <- f;
    trail_2 <- trail;
    cref_3 <- cref;
    goto BB0
  }
  BB0 {
    _6 <- Type.creusat_trail_trail_Trail_trail trail_2;
    i_5 <- Len0.len _6;
    goto BB1
  }
  BB1 {
    _10 <- Type.creusat_formula_formula_Formula_clauses f_1;
    _11 <- cref_3;
    _9 <- Index0.index _10 _11;
    goto BB2
  }
  BB2 {
    _8 <- _9;
    clause_7 <- Clone0.clone' _8;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    invariant clause_vars { InvariantUnaryOk0.invariant_unary_ok clause_7 (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1)) };
    invariant clause_equi { EquisatExtensionInner0.equisat_extension_inner clause_7 (Model1.model f_1) };
    invariant clause_unsat { Unsat0.unsat clause_7 (Type.creusat_trail_trail_Trail_assignments trail_2) };
    invariant clause_len { Seq.length (Model2.model clause_7) > 0 };
    invariant i_bound { 0 <= UInt64.to_int i_5 && UInt64.to_int i_5 <= Seq.length (Model3.model (Type.creusat_trail_trail_Trail_trail trail_2)) };
    _15 <- i_5;
    _14 <- _15 > (0 : usize);
    switch (_14)
      | False -> goto BB30
      | _ -> goto BB9
      end
  }
  BB9 {
    assert { Seq.length (Model3.model (Type.creusat_trail_trail_Trail_trail trail_2)) > 0 };
    _16 <- ();
    _20 <- clause_7;
    _19 <- _20;
    _21 <- trail_2;
    _23 <- borrow_mut i_5;
    i_5 <-  ^ _23;
    _22 <- borrow_mut ( * _23);
    _23 <- { _23 with current = ( ^ _22) };
    _24 <- f_1;
    _18 <- ChooseLiteral0.choose_literal _19 _21 _22 _24;
    goto BB10
  }
  BB10 {
    assume { Resolve0.resolve _23 };
    switch (_18)
      | Type.Core_Option_Option_None -> goto BB13
      | Type.Core_Option_Option_Some _ -> goto BB11
      end
  }
  BB11 {
    b_27 <- Type.core_option_option_Some_0 _18;
    c_idx_17 <- b_27;
    assert { UInt64.to_int i_5 < Seq.length (Model3.model (Type.creusat_trail_trail_Trail_trail trail_2)) };
    _28 <- ();
    _32 <- Type.creusat_trail_trail_Trail_trail trail_2;
    _33 <- i_5;
    _31 <- Index1.index _32 _33;
    goto BB14
  }
  BB12 {
    absurd
  }
  BB13 {
    _0 <- false;
    goto BB32
  }
  BB14 {
    _30 <- Type.creusat_trail_step_Step_reason _31;
    switch (_30)
      | Type.CreuSat_Trail_Reason_Unit _ -> goto BB18
      | Type.CreuSat_Trail_Reason_Long _ -> goto BB16
      | _ -> goto BB15
      end
  }
  BB15 {
    o_44 <- _30;
    _0 <- false;
    goto BB31
  }
  BB16 {
    c_35 <- Type.creusat_trail_reason_Long_0 _30;
    _37 <- Type.creusat_formula_formula_Formula_clauses f_1;
    _38 <- c_35;
    _36 <- Index0.index _37 _38;
    goto BB17
  }
  BB17 {
    ante_29 <- _36;
    goto BB20
  }
  BB18 {
    c_39 <- Type.creusat_trail_reason_Unit_0 _30;
    _42 <- Type.creusat_formula_formula_Formula_clauses f_1;
    _43 <- c_39;
    _41 <- Index0.index _42 _43;
    goto BB19
  }
  BB19 {
    _40 <- _41;
    ante_29 <- _40;
    goto BB20
  }
  BB20 {
    assert { SameIdxSamePolarityExcept0.same_idx_same_polarity_except clause_7 ante_29 (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get (Model3.model (Type.creusat_trail_trail_Trail_trail trail_2)) (UInt64.to_int i_5)))) };
    goto BB21
  }
  BB21 {
    _46 <- ();
    _48 <- f_1;
    _50 <- clause_7;
    _49 <- _50;
    _52 <- ante_29;
    _51 <- _52;
    _56 <- Type.creusat_trail_trail_Trail_trail trail_2;
    _57 <- i_5;
    _55 <- Index1.index _56 _57;
    goto BB22
  }
  BB22 {
    _54 <- Type.creusat_trail_step_Step_lit _55;
    _53 <- Index2.index _54;
    goto BB23
  }
  BB23 {
    _58 <- c_idx_17;
    _60 <- Type.creusat_trail_trail_Trail_assignments trail_2;
    _59 <- _60;
    _47 <- Resolve1.resolve _48 _49 _51 _53 _58 _59;
    goto BB24
  }
  BB24 {
    clause_7 <- _47;
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    _63 <- Type.creusat_clause_clause_Clause_rest clause_7;
    _62 <- Len1.len _63;
    goto BB27
  }
  BB27 {
    _61 <- _62 = (0 : usize);
    switch (_61)
      | False -> goto BB29
      | _ -> goto BB28
      end
  }
  BB28 {
    _0 <- true;
    goto BB31
  }
  BB29 {
    _13 <- ();
    goto BB8
  }
  BB30 {
    _12 <- ();
    _0 <- false;
    goto BB33
  }
  BB31 {
    goto BB32
  }
  BB32 {
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    return _0
  }
  
end
module CreuSat_ConflictAnalysis_AnalyzeConflict_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Type
  use mach.int.Int32
  use prelude.Prelude
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model3 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model2
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable_Interface as NotSatisfiable0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  val analyze_conflict [@cfg:stackify] (f : Type.creusat_formula_formula) (trail : Type.creusat_trail_trail) (cref : usize) : Type.creusat_conflictanalysis_conflict
    requires {Unsat0.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)) (Type.creusat_trail_trail_Trail_assignments trail)}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' trail f}
    requires {Invariant1.invariant' f}
    ensures { match (result) with
      | Type.CreuSat_ConflictAnalysis_Conflict_Ground -> Seq.length (Model1.model (Type.creusat_trail_trail_Trail_decisions trail)) = 0
      | Type.CreuSat_ConflictAnalysis_Conflict_Panic -> true
      | _ -> Seq.length (Model1.model (Type.creusat_trail_trail_Trail_decisions trail)) > 0
      end }
    ensures { match (result) with
      | Type.CreuSat_ConflictAnalysis_Conflict_Ground -> NotSatisfiable0.not_satisfiable f
      | Type.CreuSat_ConflictAnalysis_Conflict_Unit clause -> Invariant2.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) && Seq.length (Model2.model clause) = 1 && VarsInRangeInner0.vars_in_range_inner (Model2.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) && NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model2.model clause) && EquisatExtensionInner0.equisat_extension_inner clause (Model3.model f)
      | Type.CreuSat_ConflictAnalysis_Conflict_Learned s_idx clause -> Invariant2.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) && Seq.length (Model2.model clause) > 1 && VarsInRangeInner0.vars_in_range_inner (Model2.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) && NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model2.model clause) && EquisatExtensionInner0.equisat_extension_inner clause (Model3.model f) && UInt64.to_int s_idx < Seq.length (Model2.model clause)
      | _ -> true
      end }
    
end
module CreuSat_ConflictAnalysis_AnalyzeConflict
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Type
  use mach.int.Int32
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model5 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model2 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model2.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model2.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model2.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone CreuSat_Logic_LogicClause_Impl2_InvariantUnaryOk as InvariantUnaryOk0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unsat as Unsat0 with function Model0.model = Model5.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_SameIdxSamePolarityExcept as SameIdxSamePolarityExcept0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant2 with function Model0.model = Model2.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Model0.model = Model2.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model4.model,
  function Model1.model = Model5.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model4.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model1.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant6 with function Model0.model = Model0.model,
  function Model1.model = Model2.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model0.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model4.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model0.model,
  function Model1.model = Model2.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model4.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model1.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model5.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant0 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model1.model, function Model1.model = Model4.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model6 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model6.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model2.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant', function Model1.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model6.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Int_Impl13_Model as Model12
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy7 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output3 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue3 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds3 with type t = usize
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy6 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output2 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue2 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds2 with type t = Type.creusat_lit_lit
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy5
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy4 with type t = Type.creusat_trail_step
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_trail_step
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_trail_step
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_trail_step
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = usize
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy3
  clone CreusotContracts_Logic_Int_Impl13_ModelTy as ModelTy2
  clone CreusotContracts_Logic_Model_Impl1_Model as Model9 with type t = usize,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model12.model
  clone CreuSat_Clause_Impl0_Clone_Interface as Clone0
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Model_Impl0_Model as Model11 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy5.modelTy, function Model0.model = Model5.model
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp as IsOpp0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Lit_Impl1_Index_Interface as Index2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Alloc_Vec_Impl16_Index_Interface as Index3 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model7.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue2.has_value,
  type Output0.output = Output2.output
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model7.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model10 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model2.model
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_trail_step, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model4.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_trail_step, type a = Type.alloc_alloc_global,
  function Model0.model = Model4.model
  clone Alloc_Vec_Impl16_Index_Interface as Index4 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds3.in_bounds, predicate HasValue0.has_value = HasValue3.has_value,
  type Output0.output = Output3.output
  clone CreuSat_Trail_Impl0_DecisionLevel_Interface as DecisionLevel0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl2_InFormula as InFormula0 with function Model0.model = Model0.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_ConflictAnalysis_ChooseLiteral_Interface as ChooseLiteral0 with function Model0.model = Model4.model,
  function Model1.model = Model9.model, predicate Unsat0.unsat = Unsat0.unsat,
  predicate Invariant0.invariant' = Invariant0.invariant', function Model2.model = Model10.model,
  predicate IsOpp0.is_opp = IsOpp0.is_opp, function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_ConflictAnalysis_Resolve_Interface as Resolve1 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Model0.model = Model11.model, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  predicate SameIdxSamePolarityExcept0.same_idx_same_polarity_except = SameIdxSamePolarityExcept0.same_idx_same_polarity_except,
  function Model1.model = Model10.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate IsOpp0.is_opp = IsOpp0.is_opp, predicate InFormula0.in_formula = InFormula0.in_formula,
  function Model2.model = Model3.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  predicate Invariant1.invariant' = Invariant1.invariant',
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_ConflictAnalysis_DeriveEmptyFormula_Interface as DeriveEmptyFormula0 with function Model0.model = Model0.model,
  predicate Unsat0.unsat = Unsat0.unsat, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant',
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg analyze_conflict [@cfg:stackify] (f : Type.creusat_formula_formula) (trail : Type.creusat_trail_trail) (cref : usize) : Type.creusat_conflictanalysis_conflict
    requires {Unsat0.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)) (Type.creusat_trail_trail_Trail_assignments trail)}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' trail f}
    requires {Invariant1.invariant' f}
    ensures { match (result) with
      | Type.CreuSat_ConflictAnalysis_Conflict_Ground -> Seq.length (Model1.model (Type.creusat_trail_trail_Trail_decisions trail)) = 0
      | Type.CreuSat_ConflictAnalysis_Conflict_Panic -> true
      | _ -> Seq.length (Model1.model (Type.creusat_trail_trail_Trail_decisions trail)) > 0
      end }
    ensures { match (result) with
      | Type.CreuSat_ConflictAnalysis_Conflict_Ground -> NotSatisfiable0.not_satisfiable f
      | Type.CreuSat_ConflictAnalysis_Conflict_Unit clause -> Invariant2.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) && Seq.length (Model2.model clause) = 1 && VarsInRangeInner0.vars_in_range_inner (Model2.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) && NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model2.model clause) && EquisatExtensionInner0.equisat_extension_inner clause (Model3.model f)
      | Type.CreuSat_ConflictAnalysis_Conflict_Learned s_idx clause -> Invariant2.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) && Seq.length (Model2.model clause) > 1 && VarsInRangeInner0.vars_in_range_inner (Model2.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) && NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model2.model clause) && EquisatExtensionInner0.equisat_extension_inner clause (Model3.model f) && UInt64.to_int s_idx < Seq.length (Model2.model clause)
      | _ -> true
      end }
    
   = 
  var _0 : Type.creusat_conflictanalysis_conflict;
  var f_1 : Type.creusat_formula_formula;
  var trail_2 : Type.creusat_trail_trail;
  var cref_3 : usize;
  var _4 : ();
  var decisionlevel_5 : usize;
  var _6 : Type.creusat_trail_trail;
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : ();
  var _11 : bool;
  var _12 : Type.creusat_formula_formula;
  var _13 : Type.creusat_trail_trail;
  var _14 : usize;
  var i_15 : usize;
  var _16 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var clause_17 : Type.creusat_clause_clause;
  var _18 : Type.creusat_clause_clause;
  var _19 : Type.creusat_clause_clause;
  var _20 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _21 : usize;
  var s_idx_22 : usize;
  var _23 : ();
  var _24 : ();
  var _25 : bool;
  var _26 : usize;
  var _27 : ();
  var c_idx_28 : usize;
  var _29 : Type.core_option_option usize;
  var _30 : Type.creusat_clause_clause;
  var _31 : Type.creusat_clause_clause;
  var _32 : Type.creusat_trail_trail;
  var _33 : borrowed usize;
  var _34 : borrowed usize;
  var _35 : Type.creusat_formula_formula;
  var _36 : isize;
  var _37 : ();
  var b_38 : usize;
  var _39 : ();
  var ante_40 : Type.creusat_clause_clause;
  var _41 : Type.creusat_trail_reason;
  var _42 : Type.creusat_trail_step;
  var _43 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var _44 : usize;
  var _45 : isize;
  var c_46 : usize;
  var _47 : Type.creusat_clause_clause;
  var _48 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _49 : usize;
  var o_50 : Type.creusat_trail_reason;
  var _51 : ();
  var _52 : ();
  var _53 : Type.creusat_clause_clause;
  var _54 : Type.creusat_formula_formula;
  var _55 : Type.creusat_clause_clause;
  var _56 : Type.creusat_clause_clause;
  var _57 : Type.creusat_clause_clause;
  var _58 : Type.creusat_clause_clause;
  var _59 : usize;
  var _60 : Type.creusat_lit_lit;
  var _61 : Type.creusat_trail_step;
  var _62 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var _63 : usize;
  var _64 : usize;
  var _65 : Type.creusat_assignments_assignments;
  var _66 : Type.creusat_assignments_assignments;
  var k_67 : usize;
  var cnt_68 : usize;
  var _69 : ();
  var _70 : bool;
  var _71 : usize;
  var _72 : usize;
  var _73 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _74 : ();
  var _75 : bool;
  var _76 : usize;
  var _77 : usize;
  var _78 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _79 : usize;
  var _80 : Type.creusat_lit_lit;
  var _81 : Type.creusat_lit_lit;
  var _82 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _83 : usize;
  var _84 : usize;
  var _85 : ();
  var _86 : bool;
  var _87 : usize;
  var _88 : ();
  var _89 : usize;
  var _90 : ();
  var _91 : ();
  var _92 : ();
  var _93 : bool;
  var _94 : usize;
  var _95 : ();
  var _96 : bool;
  var _97 : usize;
  var _98 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _99 : Type.creusat_clause_clause;
  var _100 : usize;
  var _101 : Type.creusat_clause_clause;
  var _102 : ();
  var _103 : ();
  var _104 : ();
  {
    f_1 <- f;
    trail_2 <- trail;
    cref_3 <- cref;
    goto BB0
  }
  BB0 {
    _6 <- trail_2;
    decisionlevel_5 <- DecisionLevel0.decision_level _6;
    goto BB1
  }
  BB1 {
    _9 <- decisionlevel_5;
    _8 <- _9 = (0 : usize);
    switch (_8)
      | False -> goto BB6
      | _ -> goto BB2
      end
  }
  BB2 {
    _12 <- f_1;
    _13 <- trail_2;
    _14 <- cref_3;
    _11 <- DeriveEmptyFormula0.derive_empty_formula _12 _13 _14;
    goto BB3
  }
  BB3 {
    switch (_11)
      | False -> goto BB4
      | _ -> goto BB5
      end
  }
  BB4 {
    _0 <- Type.CreuSat_ConflictAnalysis_Conflict_Panic;
    goto BB57
  }
  BB5 {
    _0 <- Type.CreuSat_ConflictAnalysis_Conflict_Ground;
    goto BB57
  }
  BB6 {
    _7 <- ();
    _16 <- Type.creusat_trail_trail_Trail_trail trail_2;
    i_15 <- Len0.len _16;
    goto BB7
  }
  BB7 {
    _20 <- Type.creusat_formula_formula_Formula_clauses f_1;
    _21 <- cref_3;
    _19 <- Index0.index _20 _21;
    goto BB8
  }
  BB8 {
    _18 <- _19;
    clause_17 <- Clone0.clone' _18;
    goto BB9
  }
  BB9 {
    s_idx_22 <- (0 : usize);
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    invariant clause_vars { InvariantUnaryOk0.invariant_unary_ok clause_17 (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1)) };
    invariant clause_equi { EquisatExtensionInner0.equisat_extension_inner clause_17 (Model3.model f_1) };
    invariant clause_unsat { Unsat0.unsat clause_17 (Type.creusat_trail_trail_Trail_assignments trail_2) };
    invariant i_bound { 0 <= UInt64.to_int i_15 && UInt64.to_int i_15 <= Seq.length (Model4.model (Type.creusat_trail_trail_Trail_trail trail_2)) };
    _26 <- i_15;
    _25 <- _26 > (0 : usize);
    switch (_25)
      | False -> goto BB52
      | _ -> goto BB14
      end
  }
  BB14 {
    assert { Seq.length (Model4.model (Type.creusat_trail_trail_Trail_trail trail_2)) > 0 };
    _27 <- ();
    _31 <- clause_17;
    _30 <- _31;
    _32 <- trail_2;
    _34 <- borrow_mut i_15;
    i_15 <-  ^ _34;
    _33 <- borrow_mut ( * _34);
    _34 <- { _34 with current = ( ^ _33) };
    _35 <- f_1;
    _29 <- ChooseLiteral0.choose_literal _30 _32 _33 _35;
    goto BB15
  }
  BB15 {
    assume { Resolve0.resolve _34 };
    switch (_29)
      | Type.Core_Option_Option_None -> goto BB18
      | Type.Core_Option_Option_Some _ -> goto BB16
      end
  }
  BB16 {
    b_38 <- Type.core_option_option_Some_0 _29;
    c_idx_28 <- b_38;
    assert { UInt64.to_int i_15 < Seq.length (Model4.model (Type.creusat_trail_trail_Trail_trail trail_2)) };
    _39 <- ();
    _43 <- Type.creusat_trail_trail_Trail_trail trail_2;
    _44 <- i_15;
    _42 <- Index1.index _43 _44;
    goto BB19
  }
  BB17 {
    absurd
  }
  BB18 {
    _0 <- Type.CreuSat_ConflictAnalysis_Conflict_Panic;
    goto BB54
  }
  BB19 {
    _41 <- Type.creusat_trail_step_Step_reason _42;
    switch (_41)
      | Type.CreuSat_Trail_Reason_Long _ -> goto BB21
      | _ -> goto BB20
      end
  }
  BB20 {
    o_50 <- _41;
    _0 <- Type.CreuSat_ConflictAnalysis_Conflict_Panic;
    goto BB53
  }
  BB21 {
    c_46 <- Type.creusat_trail_reason_Long_0 _41;
    _48 <- Type.creusat_formula_formula_Formula_clauses f_1;
    _49 <- c_46;
    _47 <- Index0.index _48 _49;
    goto BB22
  }
  BB22 {
    ante_40 <- _47;
    assert { SameIdxSamePolarityExcept0.same_idx_same_polarity_except clause_17 ante_40 (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get (Model4.model (Type.creusat_trail_trail_Trail_trail trail_2)) (UInt64.to_int i_15)))) };
    goto BB23
  }
  BB23 {
    _52 <- ();
    _54 <- f_1;
    _56 <- clause_17;
    _55 <- _56;
    _58 <- ante_40;
    _57 <- _58;
    _62 <- Type.creusat_trail_trail_Trail_trail trail_2;
    _63 <- i_15;
    _61 <- Index1.index _62 _63;
    goto BB24
  }
  BB24 {
    _60 <- Type.creusat_trail_step_Step_lit _61;
    _59 <- Index2.index _60;
    goto BB25
  }
  BB25 {
    _64 <- c_idx_28;
    _66 <- Type.creusat_trail_trail_Trail_assignments trail_2;
    _65 <- _66;
    _53 <- Resolve1.resolve _54 _55 _57 _59 _64 _65;
    goto BB26
  }
  BB26 {
    clause_17 <- _53;
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    s_idx_22 <- (0 : usize);
    k_67 <- (0 : usize);
    cnt_68 <- (0 : usize);
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    invariant k_bound { UInt64.to_int k_67 <= Seq.length (Model2.model clause_17) };
    invariant s_idx_ok { UInt64.to_int cnt_68 = 0 || UInt64.to_int s_idx_22 < Seq.length (Model2.model clause_17) };
    invariant cnt_bound { UInt64.to_int cnt_68 <= 2 };
    _71 <- k_67;
    _73 <- Type.creusat_clause_clause_Clause_rest clause_17;
    _72 <- Len1.len _73;
    goto BB32
  }
  BB32 {
    _70 <- _71 < _72;
    switch (_70)
      | False -> goto BB42
      | _ -> goto BB33
      end
  }
  BB33 {
    _78 <- Type.creusat_trail_trail_Trail_lit_to_level trail_2;
    _82 <- Type.creusat_clause_clause_Clause_rest clause_17;
    _83 <- k_67;
    _81 <- Index3.index _82 _83;
    goto BB34
  }
  BB34 {
    _80 <- _81;
    _79 <- Index2.index _80;
    goto BB35
  }
  BB35 {
    _77 <- Index4.index _78 _79;
    goto BB36
  }
  BB36 {
    _76 <- _77;
    _84 <- decisionlevel_5;
    _75 <- _76 = _84;
    switch (_75)
      | False -> goto BB40
      | _ -> goto BB37
      end
  }
  BB37 {
    cnt_68 <- cnt_68 + (1 : usize);
    _87 <- cnt_68;
    _86 <- _87 > (1 : usize);
    switch (_86)
      | False -> goto BB39
      | _ -> goto BB38
      end
  }
  BB38 {
    _69 <- ();
    goto BB43
  }
  BB39 {
    _85 <- ();
    _89 <- k_67;
    s_idx_22 <- _89;
    _74 <- ();
    goto BB41
  }
  BB40 {
    _74 <- ();
    goto BB41
  }
  BB41 {
    k_67 <- k_67 + (1 : usize);
    _24 <- ();
    goto BB31
  }
  BB42 {
    _69 <- ();
    goto BB43
  }
  BB43 {
    _94 <- cnt_68;
    _93 <- _94 = (1 : usize);
    switch (_93)
      | False -> goto BB51
      | _ -> goto BB44
      end
  }
  BB44 {
    _98 <- Type.creusat_clause_clause_Clause_rest clause_17;
    _97 <- Len1.len _98;
    goto BB45
  }
  BB45 {
    _96 <- _97 = (1 : usize);
    switch (_96)
      | False -> goto BB48
      | _ -> goto BB46
      end
  }
  BB46 {
    _99 <- clause_17;
    _0 <- Type.CreuSat_ConflictAnalysis_Conflict_Unit _99;
    goto BB47
  }
  BB47 {
    goto BB50
  }
  BB48 {
    _100 <- s_idx_22;
    _101 <- clause_17;
    _0 <- Type.CreuSat_ConflictAnalysis_Conflict_Learned _100 _101;
    goto BB49
  }
  BB49 {
    goto BB50
  }
  BB50 {
    goto BB53
  }
  BB51 {
    _24 <- ();
    goto BB13
  }
  BB52 {
    _23 <- ();
    _0 <- Type.CreuSat_ConflictAnalysis_Conflict_Panic;
    goto BB55
  }
  BB53 {
    goto BB54
  }
  BB54 {
    goto BB55
  }
  BB55 {
    goto BB56
  }
  BB56 {
    goto BB58
  }
  BB57 {
    goto BB58
  }
  BB58 {
    return _0
  }
  
end
module CreuSat_Decision_Impl2_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.creusat_decision_node) : Type.creusat_decision_node
end
module CreuSat_Decision_Impl2_Clone
  use prelude.Prelude
  use Type
  let rec cfg clone' [@cfg:stackify] (self : Type.creusat_decision_node) : Type.creusat_decision_node = 
  var _0 : Type.creusat_decision_node;
  var self_1 : Type.creusat_decision_node;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    return _0
  }
  
end
module CreuSat_Decision_Impl0_Default_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  val default [@cfg:stackify] (_ : ()) : Type.creusat_decision_node
    ensures { UInt64.to_int (Type.creusat_decision_node_Node_ts result) = 0 }
    ensures { UInt64.to_int (Type.creusat_decision_node_Node_prev result) = 18446744073709551615 }
    ensures { UInt64.to_int (Type.creusat_decision_node_Node_next result) = 18446744073709551615 }
    
end
module CreuSat_Decision_Impl0_Default
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  let rec cfg default [@cfg:stackify] (_ : ()) : Type.creusat_decision_node
    ensures { UInt64.to_int (Type.creusat_decision_node_Node_ts result) = 0 }
    ensures { UInt64.to_int (Type.creusat_decision_node_Node_prev result) = 18446744073709551615 }
    ensures { UInt64.to_int (Type.creusat_decision_node_Node_next result) = 18446744073709551615 }
    
   = 
  var _0 : Type.creusat_decision_node;
  {
    goto BB0
  }
  BB0 {
    _0 <- Type.CreuSat_Decision_Node (18446744073709551615 : usize) (18446744073709551615 : usize) (0 : usize);
    return _0
  }
  
end
module CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.creusat_decision_decisions) (n : int)
end
module CreuSat_Logic_LogicDecision_Impl0_Invariant
  use Type
  use mach.int.Int
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int32
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  predicate invariant' (self : Type.creusat_decision_decisions) (n : int) = 
    Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) = n && (UInt64.to_int (Type.creusat_decision_decisions_Decisions_search self) < Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) || UInt64.to_int (Type.creusat_decision_decisions_Decisions_search self) = 18446744073709551615) && UInt64.to_int (Type.creusat_decision_decisions_Decisions_start self) < Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) -> (UInt64.to_int (Type.creusat_decision_node_Node_next (Seq.get (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) i)) = 18446744073709551615 || UInt64.to_int (Type.creusat_decision_node_Node_next (Seq.get (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) i)) < n) && (UInt64.to_int (Type.creusat_decision_node_Node_prev (Seq.get (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) i)) = 18446744073709551615 || UInt64.to_int (Type.creusat_decision_node_Node_prev (Seq.get (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) i)) < n))
end
module Core_Default_Default_Default_Interface
  type self
  val default [@cfg:stackify] (_ : ()) : self
    requires {false}
    
end
module Core_Default_Default_Default
  type self
  val default [@cfg:stackify] (_ : ()) : self
    requires {false}
    
end
module CreuSat_Decision_Impl0
  use Type
  clone CreuSat_Decision_Impl0_Default_Interface as Default0
  clone Core_Default_Default_Default_Interface as Default1 with type self = Type.creusat_decision_node,
  val default = Default0.default
end
module CreuSat_Decision_Impl1_MakeLinkedList_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize, type a = Type.alloc_alloc_global
  val make_linked_list [@cfg:stackify] (f : Type.creusat_formula_formula) (lit_order : Type.alloc_vec_vec usize (Type.alloc_alloc_global)) : Type.creusat_decision_decisions
    requires {Seq.length (Model0.model lit_order) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model lit_order) -> UInt64.to_int (Seq.get (Model0.model lit_order) i) < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {0 < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) && UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    
end
module CreuSat_Decision_Impl1_MakeLinkedList
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant2 with function Model0.model = Model4.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model2 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant2.invariant', function Model1.model = Model4.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model2.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = Type.creusat_decision_node
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_decision_node
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_decision_node
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_decision_node
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = usize
  clone CreuSat_Decision_Impl0_Default_Interface as Default0
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve1 with type t = Type.creusat_decision_node,
  function Model0.model = Model1.model, predicate Resolve0.resolve = Resolve3.resolve
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.creusat_decision_node, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue1.has_value, type Output0.output = Output1.output
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = Type.creusat_decision_node,
  function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve2 with type t = usize, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve4.resolve
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg make_linked_list [@cfg:stackify] (f : Type.creusat_formula_formula) (lit_order : Type.alloc_vec_vec usize (Type.alloc_alloc_global)) : Type.creusat_decision_decisions
    requires {Seq.length (Model0.model lit_order) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model lit_order) -> UInt64.to_int (Seq.get (Model0.model lit_order) i) < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {0 < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) && UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    
   = 
  var _0 : Type.creusat_decision_decisions;
  var f_1 : Type.creusat_formula_formula;
  var lit_order_2 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var iNVALID'_3 : usize;
  var linked_list_4 : Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global);
  var _5 : Type.creusat_decision_node;
  var _6 : usize;
  var i_7 : usize;
  var head_8 : usize;
  var _9 : ();
  var _10 : ();
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var j_14 : usize;
  var _15 : usize;
  var _16 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _17 : usize;
  var _18 : ();
  var _19 : bool;
  var _20 : usize;
  var _21 : ();
  var _22 : bool;
  var _23 : usize;
  var _24 : usize;
  var _25 : usize;
  var _26 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _27 : borrowed (Type.creusat_decision_node);
  var _28 : borrowed (Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global));
  var _29 : usize;
  var _30 : usize;
  var _31 : borrowed (Type.creusat_decision_node);
  var _32 : borrowed (Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global));
  var _33 : usize;
  var _34 : usize;
  var _35 : borrowed (Type.creusat_decision_node);
  var _36 : borrowed (Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global));
  var _37 : usize;
  var _38 : usize;
  var _39 : bool;
  var _40 : usize;
  var _41 : usize;
  var _42 : usize;
  var _43 : usize;
  var _44 : borrowed (Type.creusat_decision_node);
  var _45 : borrowed (Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global));
  var _46 : usize;
  var _47 : usize;
  var _48 : usize;
  var _49 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _50 : usize;
  var _51 : usize;
  var _52 : borrowed (Type.creusat_decision_node);
  var _53 : borrowed (Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global));
  var _54 : usize;
  var _55 : usize;
  var _56 : usize;
  var _57 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _58 : usize;
  var _59 : usize;
  var _60 : borrowed (Type.creusat_decision_node);
  var _61 : borrowed (Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global));
  var _62 : usize;
  var _63 : usize;
  var _64 : usize;
  var _65 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _66 : usize;
  var _67 : usize;
  var _68 : borrowed (Type.creusat_decision_node);
  var _69 : borrowed (Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global));
  var _70 : usize;
  var _71 : usize;
  var _72 : usize;
  var _73 : borrowed (Type.creusat_decision_node);
  var _74 : borrowed (Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global));
  var _75 : usize;
  var _76 : ();
  var _77 : ();
  var _78 : ();
  var _79 : Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global);
  var _80 : usize;
  var _81 : usize;
  var _82 : usize;
  var _83 : usize;
  {
    f_1 <- f;
    lit_order_2 <- lit_order;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    iNVALID'_3 <- (18446744073709551615 : usize);
    _5 <- Default0.default ();
    goto BB2
  }
  BB2 {
    _6 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    linked_list_4 <- FromElem0.from_elem _5 _6;
    goto BB3
  }
  BB3 {
    i_7 <- (0 : usize);
    head_8 <- (0 : usize);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant len_ok { Seq.length (Model1.model linked_list_4) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) };
    invariant head_ok { UInt64.to_int head_8 < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) };
    invariant inv { forall j : (int) . 0 <= j && j < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) -> (UInt64.to_int (Type.creusat_decision_node_Node_next (Seq.get (Model1.model linked_list_4) j)) = 18446744073709551615 || UInt64.to_int (Type.creusat_decision_node_Node_next (Seq.get (Model1.model linked_list_4) j)) < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1)) && (UInt64.to_int (Type.creusat_decision_node_Node_prev (Seq.get (Model1.model linked_list_4) j)) = 18446744073709551615 || UInt64.to_int (Type.creusat_decision_node_Node_prev (Seq.get (Model1.model linked_list_4) j)) < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1)) };
    _12 <- i_7;
    _13 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    _11 <- _12 < _13;
    switch (_11)
      | False -> goto BB30
      | _ -> goto BB7
      end
  }
  BB7 {
    _16 <- lit_order_2;
    _17 <- i_7;
    _15 <- Index0.index _16 _17;
    goto BB8
  }
  BB8 {
    j_14 <- _15;
    _20 <- i_7;
    _19 <- _20 = (0 : usize);
    switch (_19)
      | False -> goto BB17
      | _ -> goto BB9
      end
  }
  BB9 {
    _23 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    _22 <- _23 > (1 : usize);
    switch (_22)
      | False -> goto BB13
      | _ -> goto BB10
      end
  }
  BB10 {
    _26 <- lit_order_2;
    _25 <- Index0.index _26 (1 : usize);
    goto BB11
  }
  BB11 {
    _24 <- _25;
    _28 <- borrow_mut linked_list_4;
    linked_list_4 <-  ^ _28;
    _29 <- j_14;
    _27 <- IndexMut0.index_mut _28 _29;
    goto BB12
  }
  BB12 {
    _27 <- { _27 with current = (let Type.CreuSat_Decision_Node a b c =  * _27 in Type.CreuSat_Decision_Node _24 b c) };
    assume { Resolve0.resolve _27 };
    _21 <- ();
    goto BB15
  }
  BB13 {
    _30 <- iNVALID'_3;
    _32 <- borrow_mut linked_list_4;
    linked_list_4 <-  ^ _32;
    _33 <- j_14;
    _31 <- IndexMut0.index_mut _32 _33;
    goto BB14
  }
  BB14 {
    _31 <- { _31 with current = (let Type.CreuSat_Decision_Node a b c =  * _31 in Type.CreuSat_Decision_Node _30 b c) };
    assume { Resolve0.resolve _31 };
    _21 <- ();
    goto BB15
  }
  BB15 {
    _34 <- iNVALID'_3;
    _36 <- borrow_mut linked_list_4;
    linked_list_4 <-  ^ _36;
    _37 <- j_14;
    _35 <- IndexMut0.index_mut _36 _37;
    goto BB16
  }
  BB16 {
    _35 <- { _35 with current = (let Type.CreuSat_Decision_Node a b c =  * _35 in Type.CreuSat_Decision_Node a _34 c) };
    assume { Resolve0.resolve _35 };
    _38 <- j_14;
    head_8 <- _38;
    _18 <- ();
    goto BB28
  }
  BB17 {
    _40 <- i_7;
    _42 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    _41 <- _42 - (1 : usize);
    _39 <- _40 = _41;
    switch (_39)
      | False -> goto BB22
      | _ -> goto BB18
      end
  }
  BB18 {
    _43 <- iNVALID'_3;
    _45 <- borrow_mut linked_list_4;
    linked_list_4 <-  ^ _45;
    _46 <- j_14;
    _44 <- IndexMut0.index_mut _45 _46;
    goto BB19
  }
  BB19 {
    _44 <- { _44 with current = (let Type.CreuSat_Decision_Node a b c =  * _44 in Type.CreuSat_Decision_Node _43 b c) };
    assume { Resolve0.resolve _44 };
    _49 <- lit_order_2;
    _51 <- i_7;
    _50 <- _51 - (1 : usize);
    _48 <- Index0.index _49 _50;
    goto BB20
  }
  BB20 {
    _47 <- _48;
    _53 <- borrow_mut linked_list_4;
    linked_list_4 <-  ^ _53;
    _54 <- j_14;
    _52 <- IndexMut0.index_mut _53 _54;
    goto BB21
  }
  BB21 {
    _52 <- { _52 with current = (let Type.CreuSat_Decision_Node a b c =  * _52 in Type.CreuSat_Decision_Node a _47 c) };
    assume { Resolve0.resolve _52 };
    _18 <- ();
    goto BB27
  }
  BB22 {
    _57 <- lit_order_2;
    _59 <- i_7;
    _58 <- _59 + (1 : usize);
    _56 <- Index0.index _57 _58;
    goto BB23
  }
  BB23 {
    _55 <- _56;
    _61 <- borrow_mut linked_list_4;
    linked_list_4 <-  ^ _61;
    _62 <- j_14;
    _60 <- IndexMut0.index_mut _61 _62;
    goto BB24
  }
  BB24 {
    _60 <- { _60 with current = (let Type.CreuSat_Decision_Node a b c =  * _60 in Type.CreuSat_Decision_Node _55 b c) };
    assume { Resolve0.resolve _60 };
    _65 <- lit_order_2;
    _67 <- i_7;
    _66 <- _67 - (1 : usize);
    _64 <- Index0.index _65 _66;
    goto BB25
  }
  BB25 {
    _63 <- _64;
    _69 <- borrow_mut linked_list_4;
    linked_list_4 <-  ^ _69;
    _70 <- j_14;
    _68 <- IndexMut0.index_mut _69 _70;
    goto BB26
  }
  BB26 {
    _68 <- { _68 with current = (let Type.CreuSat_Decision_Node a b c =  * _68 in Type.CreuSat_Decision_Node a _63 c) };
    assume { Resolve0.resolve _68 };
    _18 <- ();
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    _71 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    _72 <- i_7;
    _74 <- borrow_mut linked_list_4;
    linked_list_4 <-  ^ _74;
    _75 <- j_14;
    _73 <- IndexMut0.index_mut _74 _75;
    goto BB29
  }
  BB29 {
    _73 <- { _73 with current = (let Type.CreuSat_Decision_Node a b c =  * _73 in Type.CreuSat_Decision_Node a b (_71 - _72)) };
    assume { Resolve0.resolve _73 };
    i_7 <- i_7 + (1 : usize);
    _10 <- ();
    goto BB6
  }
  BB30 {
    _9 <- ();
    assume { Resolve1.resolve _79 };
    _79 <- linked_list_4;
    _81 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    _80 <- _81 + (1 : usize);
    _82 <- head_8;
    _83 <- head_8;
    _0 <- Type.CreuSat_Decision_Decisions _79 _80 _82 _83;
    goto BB31
  }
  BB31 {
    goto BB32
  }
  BB32 {
    goto BB33
  }
  BB33 {
    assume { Resolve2.resolve lit_order_2 };
    return _0
  }
  
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface
  type t
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) = 
    Permut.permut self o 0 (Seq.length self)
end
module CreuSat_Logic_LogicUtil_SortedRangeRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range_rev (s : Seq.seq (usize, usize)) (l : int) (u : int)
end
module CreuSat_Logic_LogicUtil_SortedRangeRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range_rev (s : Seq.seq (usize, usize)) (l : int) (u : int) = 
    forall j : (int) . forall i : (int) . l <= i && i < j && j < u -> (let (a, _) = Seq.get s i in a) >= (let (a, _) = Seq.get s j in a)
end
module CreuSat_Logic_LogicUtil_SortedRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_rev (s : Seq.seq (usize, usize))
end
module CreuSat_Logic_LogicUtil_SortedRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  clone CreuSat_Logic_LogicUtil_SortedRangeRev_Interface as SortedRangeRev0
  predicate sorted_rev (s : Seq.seq (usize, usize)) = 
    SortedRangeRev0.sorted_range_rev s 0 (Seq.length s)
end
module CreuSat_Logic_LogicUtil_PartitionRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate partition_rev (v : Seq.seq (usize, usize)) (i : int)
end
module CreuSat_Logic_LogicUtil_PartitionRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  predicate partition_rev (v : Seq.seq (usize, usize)) (i : int) = 
    forall k2 : (int) . forall k1 : (int) . 0 <= k1 && k1 < i && i <= k2 && k2 < Seq.length v -> (let (a, _) = Seq.get v k1 in a) >= (let (a, _) = Seq.get v k2 in a)
end
module CreuSat_Util_SortReverse_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreuSat_Logic_LogicUtil_SortedRev_Interface as SortedRev0
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = (usize, usize),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = (usize, usize),
  type a = Type.alloc_alloc_global
  val sort_reverse [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global))) : ()
    ensures { PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    ensures { SortedRev0.sorted_rev (Model0.model ( ^ v)) }
    
end
module CreuSat_Util_SortReverse
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  clone CreuSat_Logic_LogicUtil_PartitionRev as PartitionRev0
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global))
  clone CreuSat_Logic_LogicUtil_SortedRangeRev as SortedRangeRev0
  clone CreuSat_Logic_LogicUtil_SortedRev as SortedRev0 with predicate SortedRangeRev0.sorted_range_rev = SortedRangeRev0.sorted_range_rev
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = (usize, usize),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = (usize, usize), type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = seq (usize, usize)
  clone CreusotContracts_Logic_Model_Impl2_Model as Model3 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl1_Model as Model4 with type t = seq (usize, usize),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = (usize, usize), function Model0.model = Model4.model,
  function Model1.model = Model3.model
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global)),
  function Model0.model = Model2.model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = (usize, usize), type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model, function Model1.model = Model0.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = (usize, usize), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = (usize, usize), type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  let rec cfg sort_reverse [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global))) : ()
    ensures { PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    ensures { SortedRev0.sorted_rev (Model0.model ( ^ v)) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var i_2 : usize;
  var old_v_3 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global)));
  var _4 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _5 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var max_11 : usize;
  var j_12 : usize;
  var _13 : usize;
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _19 : ();
  var _20 : bool;
  var _21 : usize;
  var _22 : (usize, usize);
  var _23 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _24 : usize;
  var _25 : usize;
  var _26 : (usize, usize);
  var _27 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _28 : usize;
  var _29 : usize;
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : borrowed (seq (usize, usize));
  var _35 : borrowed (seq (usize, usize));
  var _36 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _37 : usize;
  var _38 : usize;
  var _39 : ();
  var _40 : ();
  var _41 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    _5 <- v_1;
    _4 <- _5;
    old_v_3 <- Record0.record _4;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant proph_const {  ^ v_1 =  ^ Model2.model old_v_3 };
    invariant permutation { PermutationOf0.permutation_of (Model1.model v_1) (Model0.model ( * Model2.model old_v_3)) };
    invariant i_bound { UInt64.to_int i_2 <= Seq.length (Model1.model v_1) };
    invariant sorted { SortedRangeRev0.sorted_range_rev (Model1.model v_1) 0 (UInt64.to_int i_2) };
    invariant partition { PartitionRev0.partition_rev (Model1.model v_1) (UInt64.to_int i_2) };
    _8 <- i_2;
    _10 <-  * v_1;
    _9 <- Len0.len _10;
    goto BB3
  }
  BB3 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB16
      | _ -> goto BB4
      end
  }
  BB4 {
    max_11 <- i_2;
    _13 <- i_2;
    j_12 <- _13 + (1 : usize);
    goto BB5
  }
  BB5 {
    invariant max_is_max { forall k : (int) . UInt64.to_int i_2 <= k && k < UInt64.to_int j_12 -> (let (a, _) = Seq.get (Model1.model v_1) (UInt64.to_int max_11) in a) >= (let (a, _) = Seq.get (Model1.model v_1) k in a) };
    invariant j_bound { UInt64.to_int i_2 <= UInt64.to_int j_12 && UInt64.to_int j_12 <= Seq.length (Model1.model v_1) };
    invariant max_bound { UInt64.to_int i_2 <= UInt64.to_int max_11 && UInt64.to_int max_11 < UInt64.to_int j_12 };
    _16 <- j_12;
    _18 <-  * v_1;
    _17 <- Len0.len _18;
    goto BB6
  }
  BB6 {
    _15 <- _16 < _17;
    switch (_15)
      | False -> goto BB13
      | _ -> goto BB7
      end
  }
  BB7 {
    _23 <-  * v_1;
    _24 <- j_12;
    _22 <- Index0.index _23 _24;
    goto BB8
  }
  BB8 {
    _21 <- (let (a, _) = _22 in a);
    _27 <-  * v_1;
    _28 <- max_11;
    _26 <- Index0.index _27 _28;
    goto BB9
  }
  BB9 {
    _25 <- (let (a, _) = _26 in a);
    _20 <- _21 > _25;
    switch (_20)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    _29 <- j_12;
    max_11 <- _29;
    _19 <- ();
    goto BB12
  }
  BB11 {
    _19 <- ();
    goto BB12
  }
  BB12 {
    j_12 <- j_12 + (1 : usize);
    _6 <- ();
    goto BB5
  }
  BB13 {
    _14 <- ();
    _36 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _36) };
    _35 <- DerefMut0.deref_mut _36;
    goto BB14
  }
  BB14 {
    _34 <- borrow_mut ( * _35);
    _35 <- { _35 with current = ( ^ _34) };
    _37 <- i_2;
    _38 <- max_11;
    _33 <- Swap0.swap _34 _37 _38;
    goto BB15
  }
  BB15 {
    assume { Resolve0.resolve _35 };
    i_2 <- i_2 + (1 : usize);
    _6 <- ();
    goto BB2
  }
  BB16 {
    assume { Resolve1.resolve v_1 };
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) = 
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t1
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = t1, type t2 = t2,
  predicate Resolve0.resolve = Resolve2.resolve, predicate Resolve1.resolve = Resolve3.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = (t1, t2),
  predicate resolve = Resolve0.resolve
end
module CreuSat_Decision_Impl1_New_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  val new [@cfg:stackify] (f : Type.creusat_formula_formula) : Type.creusat_decision_decisions
    requires {0 < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) && UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    
end
module CreuSat_Decision_Impl1_New
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model6 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant2 with function Model0.model = Model6.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = (usize, usize), type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model4 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant', function Model1.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model4.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant1 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicUtil_SortedRangeRev as SortedRangeRev0
  clone CreuSat_Logic_LogicUtil_SortedRev as SortedRev0 with predicate SortedRangeRev0.sorted_range_rev = SortedRangeRev0.sorted_range_rev
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve6 with type t1 = usize, type t2 = usize,
  predicate Resolve0.resolve = Resolve5.resolve, predicate Resolve1.resolve = Resolve5.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy5 with type t = (usize, usize),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy4 with type t = (usize, usize)
  clone Core_Slice_Index_Impl2_Output as Output3 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue3 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere1 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds3 with type t = (usize, usize)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = usize
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy3 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output2 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue2 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds2 with type t = usize
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreuSat_Lit_Impl1_Index_Interface as Index2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model7.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model7.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model8 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy5.modelTy, function Model0.model = Model3.model
  clone CreuSat_Util_SortReverse_Interface as SortReverse0 with function Model0.model = Model3.model,
  function Model1.model = Model8.model, predicate PermutationOf0.permutation_of = PermutationOf0.permutation_of,
  predicate SortedRev0.sorted_rev = SortedRev0.sorted_rev
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve4 with type t = (usize, usize),
  function Model0.model = Model3.model, predicate Resolve0.resolve = Resolve6.resolve
  clone Alloc_Vec_Impl16_Index_Interface as Index4 with type t = (usize, usize), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds3.in_bounds, predicate HasValue0.has_value = HasValue3.has_value,
  type Output0.output = Output3.output
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with type t = (usize, usize), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds3.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere,
  predicate HasValue0.has_value = HasValue3.has_value, type Output0.output = Output3.output
  clone Alloc_Vec_FromElem_Interface as FromElem1 with type t = (usize, usize), function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve3 with type t = usize, function Model0.model = Model1.model,
  predicate Resolve0.resolve = Resolve5.resolve
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue2.has_value, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index3 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue2.has_value,
  type Output0.output = Output2.output
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = usize, function Model0.model = Model1.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model
  clone CreuSat_Decision_Impl1_MakeLinkedList_Interface as MakeLinkedList0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg new [@cfg:stackify] (f : Type.creusat_formula_formula) : Type.creusat_decision_decisions
    requires {0 < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) && UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    
   = 
  var _0 : Type.creusat_decision_decisions;
  var f_1 : Type.creusat_formula_formula;
  var lit_order_2 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _3 : usize;
  var counts_4 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _5 : usize;
  var counts_with_index_6 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _7 : (usize, usize);
  var _8 : usize;
  var i_9 : usize;
  var _10 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var curr_clause_16 : Type.creusat_clause_clause;
  var _17 : Type.creusat_clause_clause;
  var _18 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _19 : usize;
  var j_20 : usize;
  var _21 : ();
  var _22 : bool;
  var _23 : usize;
  var _24 : usize;
  var _25 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _26 : ();
  var _27 : bool;
  var _28 : usize;
  var _29 : usize;
  var _30 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _31 : usize;
  var _32 : Type.creusat_lit_lit;
  var _33 : Type.creusat_lit_lit;
  var _34 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _35 : usize;
  var _36 : usize;
  var _37 : borrowed usize;
  var _38 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _39 : usize;
  var _40 : Type.creusat_lit_lit;
  var _41 : Type.creusat_lit_lit;
  var _42 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _43 : usize;
  var _44 : ();
  var _45 : ();
  var _46 : ();
  var _47 : ();
  var _48 : ();
  var _49 : ();
  var _50 : ();
  var _51 : bool;
  var _52 : usize;
  var _53 : usize;
  var _54 : usize;
  var _55 : usize;
  var _56 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _57 : usize;
  var _58 : usize;
  var _59 : borrowed (usize, usize);
  var _60 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _61 : usize;
  var _62 : ();
  var _63 : ();
  var _64 : ();
  var _65 : ();
  var _66 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _67 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _68 : ();
  var _69 : ();
  var _70 : bool;
  var _71 : usize;
  var _72 : usize;
  var _73 : usize;
  var _74 : (usize, usize);
  var _75 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _76 : usize;
  var _77 : borrowed usize;
  var _78 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _79 : usize;
  var _80 : ();
  var _81 : ();
  var _82 : ();
  var _83 : Type.creusat_formula_formula;
  var _84 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _3 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    lit_order_2 <- FromElem0.from_elem (0 : usize) _3;
    goto BB1
  }
  BB1 {
    _5 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    counts_4 <- FromElem0.from_elem (0 : usize) _5;
    goto BB2
  }
  BB2 {
    _7 <- ((0 : usize), (0 : usize));
    _8 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    counts_with_index_6 <- FromElem1.from_elem _7 _8;
    goto BB3
  }
  BB3 {
    i_9 <- (0 : usize);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant i_bound { UInt64.to_int i_9 <= Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f_1)) };
    invariant counts_len1 { Seq.length (Model1.model counts_4) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) };
    _13 <- i_9;
    _15 <- Type.creusat_formula_formula_Formula_clauses f_1;
    _14 <- Len0.len _15;
    goto BB6
  }
  BB6 {
    _12 <- _13 < _14;
    switch (_12)
      | False -> goto BB23
      | _ -> goto BB7
      end
  }
  BB7 {
    _18 <- Type.creusat_formula_formula_Formula_clauses f_1;
    _19 <- i_9;
    _17 <- Index0.index _18 _19;
    goto BB8
  }
  BB8 {
    curr_clause_16 <- _17;
    j_20 <- (0 : usize);
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    invariant i_bound2 { UInt64.to_int i_9 <= Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f_1)) };
    invariant j_bound { UInt64.to_int j_20 <= Seq.length (Model2.model curr_clause_16) };
    invariant counts_len { Seq.length (Model1.model counts_4) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) };
    _23 <- j_20;
    _25 <- Type.creusat_clause_clause_Clause_rest curr_clause_16;
    _24 <- Len1.len _25;
    goto BB11
  }
  BB11 {
    _22 <- _23 < _24;
    switch (_22)
      | False -> goto BB22
      | _ -> goto BB12
      end
  }
  BB12 {
    _30 <- counts_4;
    _34 <- Type.creusat_clause_clause_Clause_rest curr_clause_16;
    _35 <- j_20;
    _33 <- Index1.index _34 _35;
    goto BB13
  }
  BB13 {
    _32 <- _33;
    _31 <- Index2.index _32;
    goto BB14
  }
  BB14 {
    _29 <- Index3.index _30 _31;
    goto BB15
  }
  BB15 {
    _28 <- _29;
    _36 <- (18446744073709551615 : usize) - (1 : usize);
    _27 <- _28 < _36;
    switch (_27)
      | False -> goto BB20
      | _ -> goto BB16
      end
  }
  BB16 {
    _38 <- borrow_mut counts_4;
    counts_4 <-  ^ _38;
    _42 <- Type.creusat_clause_clause_Clause_rest curr_clause_16;
    _43 <- j_20;
    _41 <- Index1.index _42 _43;
    goto BB17
  }
  BB17 {
    _40 <- _41;
    _39 <- Index2.index _40;
    goto BB18
  }
  BB18 {
    _37 <- IndexMut0.index_mut _38 _39;
    goto BB19
  }
  BB19 {
    _37 <- { _37 with current = ( * _37 + (1 : usize)) };
    assume { Resolve0.resolve _37 };
    _26 <- ();
    goto BB21
  }
  BB20 {
    _26 <- ();
    goto BB21
  }
  BB21 {
    j_20 <- j_20 + (1 : usize);
    _11 <- ();
    goto BB10
  }
  BB22 {
    _21 <- ();
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    goto BB5
  }
  BB23 {
    _10 <- ();
    i_9 <- (0 : usize);
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    invariant i_bound { UInt64.to_int i_9 <= UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) };
    invariant counts_with_idx_len { Seq.length (Model3.model counts_with_index_6) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) };
    invariant second_ok { forall j : (int) . 0 <= j && j < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) -> UInt64.to_int (let (_, a) = Seq.get (Model3.model counts_with_index_6) j in a) < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) };
    _52 <- i_9;
    _53 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    _51 <- _52 < _53;
    switch (_51)
      | False -> goto BB30
      | _ -> goto BB27
      end
  }
  BB27 {
    _56 <- counts_4;
    _57 <- i_9;
    _55 <- Index3.index _56 _57;
    goto BB28
  }
  BB28 {
    _54 <- _55;
    _58 <- i_9;
    _60 <- borrow_mut counts_with_index_6;
    counts_with_index_6 <-  ^ _60;
    _61 <- i_9;
    _59 <- IndexMut1.index_mut _60 _61;
    goto BB29
  }
  BB29 {
    _59 <- { _59 with current = (_54, _58) };
    assume { Resolve1.resolve _59 };
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    goto BB26
  }
  BB30 {
    _50 <- ();
    _67 <- borrow_mut counts_with_index_6;
    counts_with_index_6 <-  ^ _67;
    _66 <- borrow_mut ( * _67);
    _67 <- { _67 with current = ( ^ _66) };
    _65 <- SortReverse0.sort_reverse _66;
    goto BB31
  }
  BB31 {
    assume { Resolve2.resolve _67 };
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model3.model counts_with_index_6) -> UInt64.to_int (let (_, a) = Seq.get (Model3.model counts_with_index_6) j in a) < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) };
    goto BB32
  }
  BB32 {
    _68 <- ();
    i_9 <- (0 : usize);
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    goto BB35
  }
  BB35 {
    invariant i_bound { 0 <= UInt64.to_int i_9 && UInt64.to_int i_9 <= UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) };
    invariant lit_order_len { Seq.length (Model1.model lit_order_2) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) };
    invariant second_ok { forall j : (int) . 0 <= j && j < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) -> UInt64.to_int (Seq.get (Model1.model lit_order_2) j) < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) };
    _71 <- i_9;
    _72 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    _70 <- _71 < _72;
    switch (_70)
      | False -> goto BB39
      | _ -> goto BB36
      end
  }
  BB36 {
    _75 <- counts_with_index_6;
    _76 <- i_9;
    _74 <- Index4.index _75 _76;
    goto BB37
  }
  BB37 {
    _73 <- (let (_, a) = _74 in a);
    _78 <- borrow_mut lit_order_2;
    lit_order_2 <-  ^ _78;
    _79 <- i_9;
    _77 <- IndexMut0.index_mut _78 _79;
    goto BB38
  }
  BB38 {
    _77 <- { _77 with current = _73 };
    assume { Resolve0.resolve _77 };
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    goto BB35
  }
  BB39 {
    _69 <- ();
    _83 <- f_1;
    assume { Resolve3.resolve _84 };
    _84 <- lit_order_2;
    _0 <- MakeLinkedList0.make_linked_list _83 _84;
    goto BB40
  }
  BB40 {
    goto BB41
  }
  BB41 {
    assume { Resolve4.resolve counts_with_index_6 };
    goto BB42
  }
  BB42 {
    assume { Resolve3.resolve counts_4 };
    goto BB43
  }
  BB43 {
    return _0
  }
  
end
module CreuSat_Decision_Impl1_Rescore_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  val rescore [@cfg:stackify] (self : borrowed (Type.creusat_decision_decisions)) (_f : Type.creusat_formula_formula) : ()
    requires {Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self))) < 18446744073709551615}
    requires {Invariant0.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    ensures { Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( ^ self))) = Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self))) }
    ensures { UInt64.to_int (Type.creusat_decision_decisions_Decisions_timestamp ( ^ self)) = Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self))) + 1 }
    ensures { Invariant0.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    
end
module CreuSat_Decision_Impl1_Rescore
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = borrowed (Type.creusat_decision_decisions)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_decision_decisions
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_decision_node
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.creusat_decision_node
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_decision_node
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_decision_decisions),
  function Model0.model = Model1.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_decision_node, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.creusat_decision_node, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model
  let rec cfg rescore [@cfg:stackify] (self : borrowed (Type.creusat_decision_decisions)) (_f : Type.creusat_formula_formula) : ()
    requires {Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self))) < 18446744073709551615}
    requires {Invariant0.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    ensures { Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( ^ self))) = Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self))) }
    ensures { UInt64.to_int (Type.creusat_decision_decisions_Decisions_timestamp ( ^ self)) = Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self))) + 1 }
    ensures { Invariant0.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_decision_decisions);
  var _f_2 : Type.creusat_formula_formula;
  var iNVALID'_3 : usize;
  var old_self_4 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_decision_decisions));
  var _5 : borrowed (Type.creusat_decision_decisions);
  var _6 : borrowed (Type.creusat_decision_decisions);
  var curr_score_7 : usize;
  var _8 : Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global);
  var i_9 : usize;
  var curr_10 : usize;
  var _11 : ();
  var _12 : ();
  var _13 : bool;
  var _14 : usize;
  var _15 : usize;
  var _16 : usize;
  var _17 : borrowed (Type.creusat_decision_node);
  var _18 : borrowed (Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global));
  var _19 : usize;
  var _20 : ();
  var _21 : bool;
  var _22 : usize;
  var _23 : ();
  var _24 : usize;
  var _25 : Type.creusat_decision_node;
  var _26 : Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global);
  var _27 : usize;
  var _28 : ();
  var _29 : ();
  var _30 : ();
  var _31 : usize;
  var _32 : Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global);
  {
    self_1 <- self;
    _f_2 <- _f;
    goto BB0
  }
  BB0 {
    iNVALID'_3 <- (18446744073709551615 : usize);
    _6 <- self_1;
    _5 <- _6;
    old_self_4 <- Record0.record _5;
    goto BB1
  }
  BB1 {
    _8 <- Type.creusat_decision_decisions_Decisions_linked_list ( * self_1);
    curr_score_7 <- Len0.len _8;
    goto BB2
  }
  BB2 {
    i_9 <- (0 : usize);
    curr_10 <- Type.creusat_decision_decisions_Decisions_start ( * self_1);
    goto BB3
  }
  BB3 {
    invariant curr_ok { curr_10 = (18446744073709551615 : usize) || UInt64.to_int curr_10 < Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self_1))) };
    invariant proph {  ^ Model1.model old_self_4 =  ^ self_1 };
    invariant unch { forall j : (int) . 0 <= j && j < Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self_1))) -> Type.creusat_decision_node_Node_next (Seq.get (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self_1))) j) = Type.creusat_decision_node_Node_next (Seq.get (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * Model1.model old_self_4))) j) && Type.creusat_decision_node_Node_prev (Seq.get (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self_1))) j) = Type.creusat_decision_node_Node_prev (Seq.get (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * Model1.model old_self_4))) j) };
    invariant inv { Invariant0.invariant' ( * self_1) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f_2)) };
    _14 <- curr_10;
    _15 <- iNVALID'_3;
    _13 <- _14 <> _15;
    switch (_13)
      | False -> goto BB9
      | _ -> goto BB4
      end
  }
  BB4 {
    _16 <- curr_score_7;
    _18 <- borrow_mut (Type.creusat_decision_decisions_Decisions_linked_list ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Decision_Decisions a b c d =  * self_1 in Type.CreuSat_Decision_Decisions ( ^ _18) b c d) };
    _19 <- curr_10;
    _17 <- IndexMut0.index_mut _18 _19;
    goto BB5
  }
  BB5 {
    _17 <- { _17 with current = (let Type.CreuSat_Decision_Node a b c =  * _17 in Type.CreuSat_Decision_Node a b _16) };
    assume { Resolve0.resolve _17 };
    _22 <- curr_score_7;
    _21 <- _22 > (0 : usize);
    switch (_21)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    curr_score_7 <- curr_score_7 - (1 : usize);
    _20 <- ();
    _26 <- Type.creusat_decision_decisions_Decisions_linked_list ( * self_1);
    _27 <- curr_10;
    _25 <- Index0.index _26 _27;
    goto BB8
  }
  BB7 {
    _11 <- ();
    goto BB10
  }
  BB8 {
    _24 <- Type.creusat_decision_node_Node_next _25;
    curr_10 <- _24;
    _12 <- ();
    goto BB3
  }
  BB9 {
    _11 <- ();
    goto BB10
  }
  BB10 {
    _32 <- Type.creusat_decision_decisions_Decisions_linked_list ( * self_1);
    _31 <- Len0.len _32;
    goto BB11
  }
  BB11 {
    self_1 <- { self_1 with current = (let Type.CreuSat_Decision_Decisions a b c d =  * self_1 in Type.CreuSat_Decision_Decisions a (_31 + (1 : usize)) c d) };
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Decision_Impl1_MoveToFront_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant0
  val move_to_front [@cfg:stackify] (self : borrowed (Type.creusat_decision_decisions)) (tomove : usize) (_f : Type.creusat_formula_formula) : ()
    requires {Invariant0.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {UInt64.to_int tomove < Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f) < 18446744073709551615}
    ensures { Invariant0.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    
end
module CreuSat_Decision_Impl1_MoveToFront
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_decision_node
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.creusat_decision_node
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_decision_node
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_decision_decisions
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.creusat_decision_node, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone CreuSat_Decision_Impl1_Rescore_Interface as Rescore0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant0.invariant'
  let rec cfg move_to_front [@cfg:stackify] (self : borrowed (Type.creusat_decision_decisions)) (tomove : usize) (_f : Type.creusat_formula_formula) : ()
    requires {Invariant0.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {UInt64.to_int tomove < Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f) < 18446744073709551615}
    ensures { Invariant0.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_decision_decisions);
  var tomove_2 : usize;
  var _f_3 : Type.creusat_formula_formula;
  var iNVALID'_4 : usize;
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : ();
  var moving_10 : borrowed (Type.creusat_decision_node);
  var _11 : borrowed (Type.creusat_decision_node);
  var _12 : borrowed (Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global));
  var _13 : usize;
  var prev_14 : usize;
  var old_next_15 : usize;
  var _16 : usize;
  var _17 : usize;
  var _18 : usize;
  var _19 : ();
  var _20 : bool;
  var _21 : usize;
  var _22 : ();
  var _23 : borrowed (Type.creusat_decision_decisions);
  var _24 : Type.creusat_formula_formula;
  var _25 : ();
  var _26 : usize;
  var _27 : borrowed (Type.creusat_decision_node);
  var _28 : borrowed (Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global));
  var _29 : usize;
  var _30 : usize;
  var _31 : ();
  var _32 : bool;
  var _33 : usize;
  var _34 : usize;
  var _35 : usize;
  var _36 : borrowed (Type.creusat_decision_node);
  var _37 : borrowed (Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global));
  var _38 : usize;
  var _39 : bool;
  var _40 : usize;
  var _41 : usize;
  var _42 : usize;
  var _43 : borrowed (Type.creusat_decision_node);
  var _44 : borrowed (Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global));
  var _45 : usize;
  {
    self_1 <- self;
    tomove_2 <- tomove;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    iNVALID'_4 <- (18446744073709551615 : usize);
    _7 <- tomove_2;
    _8 <- Type.creusat_decision_decisions_Decisions_start ( * self_1);
    _6 <- _7 = _8;
    switch (_6)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    _0 <- ();
    goto BB17
  }
  BB2 {
    _5 <- ();
    _12 <- borrow_mut (Type.creusat_decision_decisions_Decisions_linked_list ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Decision_Decisions a b c d =  * self_1 in Type.CreuSat_Decision_Decisions ( ^ _12) b c d) };
    _13 <- tomove_2;
    _11 <- IndexMut0.index_mut _12 _13;
    goto BB3
  }
  BB3 {
    moving_10 <- borrow_mut ( * _11);
    _11 <- { _11 with current = ( ^ moving_10) };
    assume { Resolve1.resolve _11 };
    prev_14 <- Type.creusat_decision_node_Node_prev ( * moving_10);
    old_next_15 <- Type.creusat_decision_node_Node_next ( * moving_10);
    _16 <- iNVALID'_4;
    moving_10 <- { moving_10 with current = (let Type.CreuSat_Decision_Node a b c =  * moving_10 in Type.CreuSat_Decision_Node a _16 c) };
    _17 <- Type.creusat_decision_decisions_Decisions_start ( * self_1);
    moving_10 <- { moving_10 with current = (let Type.CreuSat_Decision_Node a b c =  * moving_10 in Type.CreuSat_Decision_Node _17 b c) };
    _18 <- Type.creusat_decision_decisions_Decisions_timestamp ( * self_1);
    moving_10 <- { moving_10 with current = (let Type.CreuSat_Decision_Node a b c =  * moving_10 in Type.CreuSat_Decision_Node a b _18) };
    assume { Resolve1.resolve moving_10 };
    _21 <- Type.creusat_decision_decisions_Decisions_timestamp ( * self_1);
    _20 <- _21 = (18446744073709551615 : usize);
    switch (_20)
      | False -> goto BB6
      | _ -> goto BB4
      end
  }
  BB4 {
    _23 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _23) };
    _24 <- _f_3;
    _22 <- Rescore0.rescore _23 _24;
    goto BB5
  }
  BB5 {
    _19 <- ();
    goto BB7
  }
  BB6 {
    self_1 <- { self_1 with current = (let Type.CreuSat_Decision_Decisions a b c d =  * self_1 in Type.CreuSat_Decision_Decisions a (Type.creusat_decision_decisions_Decisions_timestamp ( * self_1) + (1 : usize)) c d) };
    _19 <- ();
    goto BB7
  }
  BB7 {
    assert { UInt64.to_int (Type.creusat_decision_decisions_Decisions_start ( * self_1)) < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f_3) };
    _25 <- ();
    _26 <- tomove_2;
    _28 <- borrow_mut (Type.creusat_decision_decisions_Decisions_linked_list ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Decision_Decisions a b c d =  * self_1 in Type.CreuSat_Decision_Decisions ( ^ _28) b c d) };
    _29 <- Type.creusat_decision_decisions_Decisions_start ( * self_1);
    _27 <- IndexMut0.index_mut _28 _29;
    goto BB8
  }
  BB8 {
    _27 <- { _27 with current = (let Type.CreuSat_Decision_Node a b c =  * _27 in Type.CreuSat_Decision_Node a _26 c) };
    assume { Resolve1.resolve _27 };
    _30 <- tomove_2;
    self_1 <- { self_1 with current = (let Type.CreuSat_Decision_Decisions a b c d =  * self_1 in Type.CreuSat_Decision_Decisions a b _30 d) };
    _33 <- prev_14;
    _34 <- iNVALID'_4;
    _32 <- _33 <> _34;
    switch (_32)
      | False -> goto BB11
      | _ -> goto BB9
      end
  }
  BB9 {
    _35 <- old_next_15;
    _37 <- borrow_mut (Type.creusat_decision_decisions_Decisions_linked_list ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Decision_Decisions a b c d =  * self_1 in Type.CreuSat_Decision_Decisions ( ^ _37) b c d) };
    _38 <- prev_14;
    _36 <- IndexMut0.index_mut _37 _38;
    goto BB10
  }
  BB10 {
    _36 <- { _36 with current = (let Type.CreuSat_Decision_Node a b c =  * _36 in Type.CreuSat_Decision_Node _35 b c) };
    assume { Resolve1.resolve _36 };
    _31 <- ();
    goto BB12
  }
  BB11 {
    _31 <- ();
    goto BB12
  }
  BB12 {
    _40 <- old_next_15;
    _41 <- iNVALID'_4;
    _39 <- _40 <> _41;
    switch (_39)
      | False -> goto BB15
      | _ -> goto BB13
      end
  }
  BB13 {
    _42 <- prev_14;
    _44 <- borrow_mut (Type.creusat_decision_decisions_Decisions_linked_list ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Decision_Decisions a b c d =  * self_1 in Type.CreuSat_Decision_Decisions ( ^ _44) b c d) };
    assume { Resolve0.resolve self_1 };
    _45 <- old_next_15;
    _43 <- IndexMut0.index_mut _44 _45;
    goto BB14
  }
  BB14 {
    _43 <- { _43 with current = (let Type.CreuSat_Decision_Node a b c =  * _43 in Type.CreuSat_Decision_Node a _42 c) };
    assume { Resolve1.resolve _43 };
    _0 <- ();
    goto BB16
  }
  BB15 {
    assume { Resolve0.resolve self_1 };
    _0 <- ();
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    return _0
  }
  
end
module CreuSat_Logic_LogicUtil_SortedRangeTupleZeroth_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range_tuple_zeroth (s : Seq.seq (usize, usize)) (l : int) (u : int)
end
module CreuSat_Logic_LogicUtil_SortedRangeTupleZeroth
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range_tuple_zeroth (s : Seq.seq (usize, usize)) (l : int) (u : int) = 
    forall j : (int) . forall i : (int) . l <= i && i < j && j < u -> (let (a, _) = Seq.get s i in a) <= (let (a, _) = Seq.get s j in a)
end
module CreuSat_Logic_LogicUtil_SortedTupleZeroth_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_tuple_zeroth (s : Seq.seq (usize, usize))
end
module CreuSat_Logic_LogicUtil_SortedTupleZeroth
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  clone CreuSat_Logic_LogicUtil_SortedRangeTupleZeroth_Interface as SortedRangeTupleZeroth0
  predicate sorted_tuple_zeroth (s : Seq.seq (usize, usize)) = 
    SortedRangeTupleZeroth0.sorted_range_tuple_zeroth s 0 (Seq.length s)
end
module CreuSat_Logic_LogicUtil_Partition_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate partition (v : Seq.seq (usize, usize)) (i : int)
end
module CreuSat_Logic_LogicUtil_Partition
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  predicate partition (v : Seq.seq (usize, usize)) (i : int) = 
    forall k2 : (int) . forall k1 : (int) . 0 <= k1 && k1 < i && i <= k2 && k2 < Seq.length v -> (let (a, _) = Seq.get v k1 in a) <= (let (a, _) = Seq.get v k2 in a)
end
module CreuSat_Util_Sort_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreuSat_Logic_LogicUtil_SortedTupleZeroth_Interface as SortedTupleZeroth0
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = (usize, usize),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = (usize, usize),
  type a = Type.alloc_alloc_global
  val sort [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global))) : ()
    ensures { PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    ensures { SortedTupleZeroth0.sorted_tuple_zeroth (Model0.model ( ^ v)) }
    
end
module CreuSat_Util_Sort
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  clone CreuSat_Logic_LogicUtil_Partition as Partition0
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global))
  clone CreuSat_Logic_LogicUtil_SortedRangeTupleZeroth as SortedRangeTupleZeroth0
  clone CreuSat_Logic_LogicUtil_SortedTupleZeroth as SortedTupleZeroth0 with predicate SortedRangeTupleZeroth0.sorted_range_tuple_zeroth = SortedRangeTupleZeroth0.sorted_range_tuple_zeroth
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = (usize, usize),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = (usize, usize), type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = seq (usize, usize)
  clone CreusotContracts_Logic_Model_Impl2_Model as Model3 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl1_Model as Model4 with type t = seq (usize, usize),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = (usize, usize), function Model0.model = Model4.model,
  function Model1.model = Model3.model
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global)),
  function Model0.model = Model2.model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = (usize, usize), type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model, function Model1.model = Model0.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = (usize, usize), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = (usize, usize), type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  let rec cfg sort [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global))) : ()
    ensures { PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    ensures { SortedTupleZeroth0.sorted_tuple_zeroth (Model0.model ( ^ v)) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var i_2 : usize;
  var old_v_3 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global)));
  var _4 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _5 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var max_11 : usize;
  var j_12 : usize;
  var _13 : usize;
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _19 : ();
  var _20 : bool;
  var _21 : usize;
  var _22 : (usize, usize);
  var _23 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _24 : usize;
  var _25 : usize;
  var _26 : (usize, usize);
  var _27 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _28 : usize;
  var _29 : usize;
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : borrowed (seq (usize, usize));
  var _35 : borrowed (seq (usize, usize));
  var _36 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _37 : usize;
  var _38 : usize;
  var _39 : ();
  var _40 : ();
  var _41 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    _5 <- v_1;
    _4 <- _5;
    old_v_3 <- Record0.record _4;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant proph_const {  ^ v_1 =  ^ Model2.model old_v_3 };
    invariant permutation { PermutationOf0.permutation_of (Model1.model v_1) (Model0.model ( * Model2.model old_v_3)) };
    invariant i_bound { UInt64.to_int i_2 <= Seq.length (Model1.model v_1) };
    invariant sorted { SortedRangeTupleZeroth0.sorted_range_tuple_zeroth (Model1.model v_1) 0 (UInt64.to_int i_2) };
    invariant partition { Partition0.partition (Model1.model v_1) (UInt64.to_int i_2) };
    _8 <- i_2;
    _10 <-  * v_1;
    _9 <- Len0.len _10;
    goto BB3
  }
  BB3 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB16
      | _ -> goto BB4
      end
  }
  BB4 {
    max_11 <- i_2;
    _13 <- i_2;
    j_12 <- _13 + (1 : usize);
    goto BB5
  }
  BB5 {
    invariant max_is_max { forall k : (int) . UInt64.to_int i_2 <= k && k < UInt64.to_int j_12 -> (let (a, _) = Seq.get (Model1.model v_1) (UInt64.to_int max_11) in a) <= (let (a, _) = Seq.get (Model1.model v_1) k in a) };
    invariant j_bound { UInt64.to_int i_2 <= UInt64.to_int j_12 && UInt64.to_int j_12 <= Seq.length (Model1.model v_1) };
    invariant max_bound { UInt64.to_int i_2 <= UInt64.to_int max_11 && UInt64.to_int max_11 < UInt64.to_int j_12 };
    _16 <- j_12;
    _18 <-  * v_1;
    _17 <- Len0.len _18;
    goto BB6
  }
  BB6 {
    _15 <- _16 < _17;
    switch (_15)
      | False -> goto BB13
      | _ -> goto BB7
      end
  }
  BB7 {
    _23 <-  * v_1;
    _24 <- j_12;
    _22 <- Index0.index _23 _24;
    goto BB8
  }
  BB8 {
    _21 <- (let (a, _) = _22 in a);
    _27 <-  * v_1;
    _28 <- max_11;
    _26 <- Index0.index _27 _28;
    goto BB9
  }
  BB9 {
    _25 <- (let (a, _) = _26 in a);
    _20 <- _21 < _25;
    switch (_20)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    _29 <- j_12;
    max_11 <- _29;
    _19 <- ();
    goto BB12
  }
  BB11 {
    _19 <- ();
    goto BB12
  }
  BB12 {
    j_12 <- j_12 + (1 : usize);
    _6 <- ();
    goto BB5
  }
  BB13 {
    _14 <- ();
    _36 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _36) };
    _35 <- DerefMut0.deref_mut _36;
    goto BB14
  }
  BB14 {
    _34 <- borrow_mut ( * _35);
    _35 <- { _35 with current = ( ^ _34) };
    _37 <- i_2;
    _38 <- max_11;
    _33 <- Swap0.swap _34 _37 _38;
    goto BB15
  }
  BB15 {
    assume { Resolve0.resolve _35 };
    i_2 <- i_2 + (1 : usize);
    _6 <- ();
    goto BB2
  }
  BB16 {
    assume { Resolve1.resolve v_1 };
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Decision_Impl1_IncrementAndMove_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant0
  val increment_and_move [@cfg:stackify] (self : borrowed (Type.creusat_decision_decisions)) (f : Type.creusat_formula_formula) (cref : usize) (a : Type.creusat_assignments_assignments) : ()
    requires {Invariant0.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {Invariant1.invariant' a f}
    requires {Invariant2.invariant' f}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < 18446744073709551615}
    ensures { Invariant0.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    
end
module CreuSat_Decision_Impl1_IncrementAndMove
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  use mach.int.Int32
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant4 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model7 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant3 with function Model0.model = Model7.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model7.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model5 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant1 with function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = (usize, usize), type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model7.model
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = borrowed (Type.creusat_decision_decisions)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model6 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant3.invariant', function Model1.model = Model7.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model6.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant0 with function Model0.model = Model4.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = usize, type t2 = usize,
  predicate Resolve0.resolve = Resolve5.resolve, predicate Resolve1.resolve = Resolve5.resolve
  clone CreuSat_Logic_LogicUtil_SortedRangeTupleZeroth as SortedRangeTupleZeroth0
  clone CreuSat_Logic_LogicUtil_SortedTupleZeroth as SortedTupleZeroth0 with predicate SortedRangeTupleZeroth0.sorted_range_tuple_zeroth = SortedRangeTupleZeroth0.sorted_range_tuple_zeroth
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_decision_decisions
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy5 with type t = (usize, usize),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy4 with type t = (usize, usize)
  clone Core_Slice_Index_Impl2_Output as Output3 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue3 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds3 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy3 with type t = Type.creusat_decision_node
  clone Core_Slice_Index_Impl2_Output as Output2 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue2 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds2 with type t = Type.creusat_decision_node
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreuSat_Lit_Impl1_Index_Interface as Index2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model9.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model9.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model10 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy5.modelTy, function Model0.model = Model3.model
  clone CreuSat_Util_Sort_Interface as Sort0 with function Model0.model = Model3.model,
  function Model1.model = Model10.model, predicate PermutationOf0.permutation_of = PermutationOf0.permutation_of,
  predicate SortedTupleZeroth0.sorted_tuple_zeroth = SortedTupleZeroth0.sorted_tuple_zeroth
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve3 with type t = (usize, usize),
  function Model0.model = Model3.model, predicate Resolve0.resolve = Resolve4.resolve
  clone Alloc_Vec_Impl16_Index_Interface as Index4 with type t = (usize, usize), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds3.in_bounds, predicate HasValue0.has_value = HasValue3.has_value,
  type Output0.output = Output3.output
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with type t = (usize, usize), type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = (usize, usize), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds3.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue3.has_value, type Output0.output = Output3.output
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = (usize, usize), function Model0.model = Model3.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_decision_decisions),
  function Model0.model = Model1.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl16_Index_Interface as Index3 with type t = Type.creusat_decision_node, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model4.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue2.has_value,
  type Output0.output = Output2.output
  clone CreuSat_Decision_Impl1_MoveToFront_Interface as MoveToFront0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model4.model
  let rec cfg increment_and_move [@cfg:stackify] (self : borrowed (Type.creusat_decision_decisions)) (f : Type.creusat_formula_formula) (cref : usize) (a : Type.creusat_assignments_assignments) : ()
    requires {Invariant0.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {Invariant1.invariant' a f}
    requires {Invariant2.invariant' f}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < 18446744073709551615}
    ensures { Invariant0.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_decision_decisions);
  var f_2 : Type.creusat_formula_formula;
  var cref_3 : usize;
  var a_4 : Type.creusat_assignments_assignments;
  var clause_5 : Type.creusat_clause_clause;
  var _6 : Type.creusat_clause_clause;
  var _7 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _8 : usize;
  var counts_with_index_9 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _10 : (usize, usize);
  var _11 : usize;
  var _12 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var old_self_13 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_decision_decisions));
  var _14 : borrowed (Type.creusat_decision_decisions);
  var _15 : borrowed (Type.creusat_decision_decisions);
  var i_16 : usize;
  var _17 : ();
  var _18 : ();
  var _19 : bool;
  var _20 : usize;
  var _21 : usize;
  var _22 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _23 : usize;
  var _24 : Type.creusat_decision_node;
  var _25 : Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global);
  var _26 : usize;
  var _27 : Type.creusat_lit_lit;
  var _28 : Type.creusat_lit_lit;
  var _29 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _30 : usize;
  var _31 : usize;
  var _32 : Type.creusat_lit_lit;
  var _33 : Type.creusat_lit_lit;
  var _34 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _35 : usize;
  var _36 : borrowed (usize, usize);
  var _37 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _38 : usize;
  var _39 : ();
  var _40 : ();
  var _41 : ();
  var _42 : ();
  var _43 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _44 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _45 : bool;
  var _46 : usize;
  var _47 : usize;
  var _48 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _49 : ();
  var _50 : borrowed (Type.creusat_decision_decisions);
  var _51 : usize;
  var _52 : (usize, usize);
  var _53 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _54 : usize;
  var _55 : Type.creusat_formula_formula;
  var _56 : ();
  var _57 : ();
  var _58 : ();
  {
    self_1 <- self;
    f_2 <- f;
    cref_3 <- cref;
    a_4 <- a;
    goto BB0
  }
  BB0 {
    _7 <- Type.creusat_formula_formula_Formula_clauses f_2;
    _8 <- cref_3;
    _6 <- Index0.index _7 _8;
    goto BB1
  }
  BB1 {
    clause_5 <- _6;
    _10 <- ((0 : usize), (0 : usize));
    _12 <- Type.creusat_clause_clause_Clause_rest clause_5;
    _11 <- Len0.len _12;
    goto BB2
  }
  BB2 {
    counts_with_index_9 <- FromElem0.from_elem _10 _11;
    goto BB3
  }
  BB3 {
    _15 <- self_1;
    _14 <- _15;
    old_self_13 <- Record0.record _14;
    goto BB4
  }
  BB4 {
    i_16 <- (0 : usize);
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    invariant unch { Model1.model old_self_13 = self_1 };
    invariant proph {  ^ Model1.model old_self_13 =  ^ self_1 };
    invariant len_same { Seq.length (Model2.model clause_5) = Seq.length (Model3.model counts_with_index_9) };
    invariant all_less { forall j : (int) . 0 <= j && j < UInt64.to_int i_16 -> UInt64.to_int (let (_, a) = Seq.get (Model3.model counts_with_index_9) j in a) < Seq.length (Model4.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self_1))) };
    _20 <- i_16;
    _22 <- Type.creusat_clause_clause_Clause_rest clause_5;
    _21 <- Len0.len _22;
    goto BB8
  }
  BB8 {
    _19 <- _20 < _21;
    switch (_19)
      | False -> goto BB16
      | _ -> goto BB9
      end
  }
  BB9 {
    _25 <- Type.creusat_decision_decisions_Decisions_linked_list ( * self_1);
    _29 <- Type.creusat_clause_clause_Clause_rest clause_5;
    _30 <- i_16;
    _28 <- Index1.index _29 _30;
    goto BB10
  }
  BB10 {
    _27 <- _28;
    _26 <- Index2.index _27;
    goto BB11
  }
  BB11 {
    _24 <- Index3.index _25 _26;
    goto BB12
  }
  BB12 {
    _23 <- Type.creusat_decision_node_Node_ts _24;
    _34 <- Type.creusat_clause_clause_Clause_rest clause_5;
    _35 <- i_16;
    _33 <- Index1.index _34 _35;
    goto BB13
  }
  BB13 {
    _32 <- _33;
    _31 <- Index2.index _32;
    goto BB14
  }
  BB14 {
    _37 <- borrow_mut counts_with_index_9;
    counts_with_index_9 <-  ^ _37;
    _38 <- i_16;
    _36 <- IndexMut0.index_mut _37 _38;
    goto BB15
  }
  BB15 {
    _36 <- { _36 with current = (_23, _31) };
    assume { Resolve0.resolve _36 };
    i_16 <- i_16 + (1 : usize);
    _18 <- ();
    goto BB7
  }
  BB16 {
    _17 <- ();
    _44 <- borrow_mut counts_with_index_9;
    counts_with_index_9 <-  ^ _44;
    _43 <- borrow_mut ( * _44);
    _44 <- { _44 with current = ( ^ _43) };
    _42 <- Sort0.sort _43;
    goto BB17
  }
  BB17 {
    assume { Resolve1.resolve _44 };
    i_16 <- (0 : usize);
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    invariant proph {  ^ Model1.model old_self_13 =  ^ self_1 };
    invariant inv { Invariant0.invariant' ( * self_1) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_2)) };
    invariant len_same { Seq.length (Model2.model clause_5) = Seq.length (Model3.model counts_with_index_9) };
    _46 <- i_16;
    _48 <- counts_with_index_9;
    _47 <- Len1.len _48;
    goto BB20
  }
  BB20 {
    _45 <- _46 < _47;
    switch (_45)
      | False -> goto BB24
      | _ -> goto BB21
      end
  }
  BB21 {
    _50 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _50) };
    _53 <- counts_with_index_9;
    _54 <- i_16;
    _52 <- Index4.index _53 _54;
    goto BB22
  }
  BB22 {
    _51 <- (let (_, a) = _52 in a);
    _55 <- f_2;
    _49 <- MoveToFront0.move_to_front _50 _51 _55;
    goto BB23
  }
  BB23 {
    i_16 <- i_16 + (1 : usize);
    _18 <- ();
    goto BB19
  }
  BB24 {
    assume { Resolve2.resolve self_1 };
    _0 <- ();
    goto BB25
  }
  BB25 {
    assume { Resolve3.resolve counts_with_index_9 };
    return _0
  }
  
end
module CreuSat_Logic_LogicAssignments_Impl1_Complete_Interface
  use Type
  predicate complete (self : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicAssignments_Impl1_Complete
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate complete (self : Type.creusat_assignments_assignments) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> not (Unset0.unset (Seq.get (Model0.model self) i))
end
module CreuSat_Decision_Impl1_GetNext_Interface
  use mach.int.UInt64
  use Type
  use mach.int.Int
  use prelude.Prelude
  use seq.Seq
  clone CreuSat_Logic_LogicAssignments_Impl1_Complete_Interface as Complete0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant0
  val get_next [@cfg:stackify] (self : borrowed (Type.creusat_decision_decisions)) (a : Type.creusat_assignments_assignments) (_f : Type.creusat_formula_formula) : Type.core_option_option usize
    requires {Invariant0.invariant' a _f}
    requires {Invariant1.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    ensures { match (result) with
      | Type.Core_Option_Option_Some k -> UInt64.to_int k < Seq.length (Model0.model a) && Unset0.unset (Seq.get (Model0.model a) (UInt64.to_int k))
      | Type.Core_Option_Option_None -> Complete0.complete a
      end }
    ensures { Invariant1.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    
end
module CreuSat_Decision_Impl1_GetNext
  use mach.int.UInt64
  use Type
  use mach.int.Int
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int32
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_Impl1_Complete as Complete0 with function Model0.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant1 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_decision_decisions
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = Type.creusat_decision_node
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_decision_node
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = uint8
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = uint8, type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_decision_node, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  let rec cfg get_next [@cfg:stackify] (self : borrowed (Type.creusat_decision_decisions)) (a : Type.creusat_assignments_assignments) (_f : Type.creusat_formula_formula) : Type.core_option_option usize
    requires {Invariant0.invariant' a _f}
    requires {Invariant1.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    ensures { match (result) with
      | Type.Core_Option_Option_Some k -> UInt64.to_int k < Seq.length (Model0.model a) && Unset0.unset (Seq.get (Model0.model a) (UInt64.to_int k))
      | Type.Core_Option_Option_None -> Complete0.complete a
      end }
    ensures { Invariant1.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    
   = 
  var _0 : Type.core_option_option usize;
  var self_1 : borrowed (Type.creusat_decision_decisions);
  var a_2 : Type.creusat_assignments_assignments;
  var _f_3 : Type.creusat_formula_formula;
  var _4 : ();
  var iNVALID'_5 : usize;
  var curr_6 : usize;
  var _7 : ();
  var _8 : ();
  var _9 : bool;
  var _10 : usize;
  var _11 : usize;
  var _12 : ();
  var _13 : bool;
  var _14 : uint8;
  var _15 : uint8;
  var _16 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _17 : usize;
  var _18 : ();
  var _19 : usize;
  var _20 : Type.creusat_decision_node;
  var _21 : Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global);
  var _22 : usize;
  var _23 : usize;
  var _24 : usize;
  var _25 : Type.creusat_decision_node;
  var _26 : Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global);
  var _27 : usize;
  var _28 : ();
  var _29 : ();
  var _30 : ();
  var i_31 : usize;
  var _32 : ();
  var _33 : bool;
  var _34 : usize;
  var _35 : usize;
  var _36 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _37 : ();
  var _38 : bool;
  var _39 : uint8;
  var _40 : uint8;
  var _41 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _42 : usize;
  var _43 : ();
  var _44 : usize;
  var _45 : ();
  var _46 : ();
  var _47 : ();
  {
    self_1 <- self;
    a_2 <- a;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    iNVALID'_5 <- (18446744073709551615 : usize);
    curr_6 <- Type.creusat_decision_decisions_Decisions_search ( * self_1);
    goto BB1
  }
  BB1 {
    invariant inv { curr_6 = (18446744073709551615 : usize) || UInt64.to_int curr_6 < Seq.length (Model0.model a_2) };
    _10 <- curr_6;
    _11 <- iNVALID'_5;
    _9 <- _10 <> _11;
    switch (_9)
      | False -> goto BB8
      | _ -> goto BB2
      end
  }
  BB2 {
    _16 <- Type.creusat_assignments_assignments_Assignments_0 a_2;
    _17 <- curr_6;
    _15 <- Index0.index _16 _17;
    goto BB3
  }
  BB3 {
    _14 <- _15;
    _13 <- _14 >= (2 : uint8);
    switch (_13)
      | False -> goto BB6
      | _ -> goto BB4
      end
  }
  BB4 {
    _21 <- Type.creusat_decision_decisions_Decisions_linked_list ( * self_1);
    _22 <- curr_6;
    _20 <- Index1.index _21 _22;
    goto BB5
  }
  BB5 {
    _19 <- Type.creusat_decision_node_Node_next _20;
    self_1 <- { self_1 with current = (let Type.CreuSat_Decision_Decisions a b c d =  * self_1 in Type.CreuSat_Decision_Decisions a b c _19) };
    assume { Resolve0.resolve self_1 };
    _23 <- curr_6;
    _0 <- Type.Core_Option_Option_Some _23;
    goto BB17
  }
  BB6 {
    _12 <- ();
    _26 <- Type.creusat_decision_decisions_Decisions_linked_list ( * self_1);
    _27 <- curr_6;
    _25 <- Index1.index _26 _27;
    goto BB7
  }
  BB7 {
    _24 <- Type.creusat_decision_node_Node_next _25;
    curr_6 <- _24;
    _8 <- ();
    goto BB1
  }
  BB8 {
    assume { Resolve0.resolve self_1 };
    _7 <- ();
    i_31 <- (0 : usize);
    goto BB9
  }
  BB9 {
    invariant prev { forall j : (int) . 0 <= j && j < UInt64.to_int i_31 -> not (Unset0.unset (Seq.get (Model0.model a_2) j)) };
    _34 <- i_31;
    _36 <- Type.creusat_assignments_assignments_Assignments_0 a_2;
    _35 <- Len0.len _36;
    goto BB10
  }
  BB10 {
    _33 <- _34 < _35;
    switch (_33)
      | False -> goto BB15
      | _ -> goto BB11
      end
  }
  BB11 {
    _41 <- Type.creusat_assignments_assignments_Assignments_0 a_2;
    _42 <- i_31;
    _40 <- Index0.index _41 _42;
    goto BB12
  }
  BB12 {
    _39 <- _40;
    _38 <- _39 >= (2 : uint8);
    switch (_38)
      | False -> goto BB14
      | _ -> goto BB13
      end
  }
  BB13 {
    _44 <- i_31;
    _0 <- Type.Core_Option_Option_Some _44;
    goto BB16
  }
  BB14 {
    _37 <- ();
    i_31 <- i_31 + (1 : usize);
    _8 <- ();
    goto BB9
  }
  BB15 {
    _32 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    return _0
  }
  
end
module CreuSat_Formula_Impl0_CheckFormulaInvariant_Interface
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicFormula_FormulaSatInner_Interface as FormulaSatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val check_formula_invariant [@cfg:stackify] (self : Type.creusat_formula_formula) : Type.creusat_solver_satresult
    ensures { match (result) with
      | Type.CreuSat_Solver_SatResult_Sat assn -> FormulaSatInner0.formula_sat_inner (Model0.model self) (Model1.model assn)
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable self
      | Type.CreuSat_Solver_SatResult_Unknown -> Invariant0.invariant' self && 0 < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self) && UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self) < div 18446744073709551615 2
      | Type.CreuSat_Solver_SatResult_Err -> true
      end }
    
end
module CreuSat_Formula_Impl0_CheckFormulaInvariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use seq.Seq
  use prelude.UInt8
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model3 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant1 with function Model0.model = Model3.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant1.invariant', function Model1.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model4 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model4.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model3.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model4.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model4.model
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy2
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Model_Impl0_Model as Model6 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model3.model
  clone CreuSat_Clause_Impl1_Len_Interface as Len1 with function Model0.model = Model6.model
  clone CreuSat_Clause_Impl1_CheckClauseInvariant_Interface as CheckClauseInvariant0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = uint8, function Model0.model = Model1.model
  let rec cfg check_formula_invariant [@cfg:stackify] (self : Type.creusat_formula_formula) : Type.creusat_solver_satresult
    ensures { match (result) with
      | Type.CreuSat_Solver_SatResult_Sat assn -> FormulaSatInner0.formula_sat_inner (Model0.model self) (Model1.model assn)
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable self
      | Type.CreuSat_Solver_SatResult_Unknown -> Invariant0.invariant' self && 0 < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self) && UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self) < div 18446744073709551615 2
      | Type.CreuSat_Solver_SatResult_Err -> true
      end }
    
   = 
  var _0 : Type.creusat_solver_satresult;
  var self_1 : Type.creusat_formula_formula;
  var _2 : ();
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : usize;
  var _7 : bool;
  var _8 : ();
  var _9 : ();
  var _10 : bool;
  var _11 : usize;
  var _12 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _13 : ();
  var _14 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _15 : ();
  var _16 : bool;
  var _17 : usize;
  var _18 : ();
  var i_19 : usize;
  var _20 : ();
  var _21 : ();
  var _22 : bool;
  var _23 : usize;
  var _24 : usize;
  var _25 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _26 : ();
  var _27 : bool;
  var _28 : bool;
  var _29 : Type.creusat_clause_clause;
  var _30 : Type.creusat_clause_clause;
  var _31 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _32 : usize;
  var _33 : usize;
  var _34 : ();
  var _35 : ();
  var _36 : bool;
  var _37 : usize;
  var _38 : Type.creusat_clause_clause;
  var _39 : Type.creusat_clause_clause;
  var _40 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _41 : usize;
  var _42 : ();
  var _43 : ();
  var _44 : ();
  var _45 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- Type.creusat_formula_formula_Formula_num_vars self_1;
    _7 <- (2 : usize) = (0 : usize);
    assert { not _7 };
    goto BB1
  }
  BB1 {
    _6 <- (18446744073709551615 : usize) / (2 : usize);
    _4 <- _5 >= _6;
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- Type.CreuSat_Solver_SatResult_Err;
    goto BB25
  }
  BB3 {
    _3 <- ();
    _12 <- Type.creusat_formula_formula_Formula_clauses self_1;
    _11 <- Len0.len _12;
    goto BB4
  }
  BB4 {
    _10 <- _11 = (0 : usize);
    switch (_10)
      | False -> goto BB8
      | _ -> goto BB5
      end
  }
  BB5 {
    _14 <- New0.new ();
    goto BB6
  }
  BB6 {
    _0 <- Type.CreuSat_Solver_SatResult_Sat _14;
    goto BB7
  }
  BB7 {
    goto BB25
  }
  BB8 {
    _9 <- ();
    _17 <- Type.creusat_formula_formula_Formula_num_vars self_1;
    _16 <- _17 = (0 : usize);
    switch (_16)
      | False -> goto BB10
      | _ -> goto BB9
      end
  }
  BB9 {
    _0 <- Type.CreuSat_Solver_SatResult_Err;
    goto BB25
  }
  BB10 {
    _15 <- ();
    i_19 <- (0 : usize);
    goto BB11
  }
  BB11 {
    invariant inv { forall j : (int) . 0 <= j && j < UInt64.to_int i_19 -> Invariant1.invariant' (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses self_1)) j) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self_1)) };
    invariant clause_len { forall j : (int) . 0 <= j && j < UInt64.to_int i_19 -> Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses self_1)) j)) > 0 };
    _23 <- i_19;
    _25 <- Type.creusat_formula_formula_Formula_clauses self_1;
    _24 <- Len0.len _25;
    goto BB12
  }
  BB12 {
    _22 <- _23 < _24;
    switch (_22)
      | False -> goto BB22
      | _ -> goto BB13
      end
  }
  BB13 {
    _31 <- Type.creusat_formula_formula_Formula_clauses self_1;
    _32 <- i_19;
    _30 <- Index0.index _31 _32;
    goto BB14
  }
  BB14 {
    _29 <- _30;
    _33 <- Type.creusat_formula_formula_Formula_num_vars self_1;
    _28 <- CheckClauseInvariant0.check_clause_invariant _29 _33;
    goto BB15
  }
  BB15 {
    _27 <- not _28;
    switch (_27)
      | False -> goto BB17
      | _ -> goto BB16
      end
  }
  BB16 {
    _0 <- Type.CreuSat_Solver_SatResult_Err;
    goto BB23
  }
  BB17 {
    _26 <- ();
    _40 <- Type.creusat_formula_formula_Formula_clauses self_1;
    _41 <- i_19;
    _39 <- Index0.index _40 _41;
    goto BB18
  }
  BB18 {
    _38 <- _39;
    _37 <- Len1.len _38;
    goto BB19
  }
  BB19 {
    _36 <- _37 = (0 : usize);
    switch (_36)
      | False -> goto BB21
      | _ -> goto BB20
      end
  }
  BB20 {
    _0 <- Type.CreuSat_Solver_SatResult_Unsat;
    goto BB23
  }
  BB21 {
    _35 <- ();
    i_19 <- i_19 + (1 : usize);
    _21 <- ();
    goto BB11
  }
  BB22 {
    _20 <- ();
    _0 <- Type.CreuSat_Solver_SatResult_Unknown;
    goto BB24
  }
  BB23 {
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
module CreuSat_Logic_LogicClause_Impl2_Sat_Interface
  use Type
  predicate sat (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicClause_Impl2_Sat
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate sat (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) = 
    SatInner0.sat_inner self (Model0.model a)
end
module CreuSat_Lit_Impl1_LitSat_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreuSat_Logic_LogicLit_Impl1_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_sat [@cfg:stackify] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Sat0.sat self a }
    
end
module CreuSat_Lit_Impl1_LitSat
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = uint8
  clone CreuSat_Lit_Impl1_IsPositive_Interface as IsPositive0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_Lit_Impl1_Index_Interface as Index0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  let rec cfg lit_sat [@cfg:stackify] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Sat0.sat self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.creusat_lit_lit;
  var a_2 : Type.creusat_assignments_assignments;
  var _3 : bool;
  var _4 : Type.creusat_lit_lit;
  var _5 : uint8;
  var _6 : uint8;
  var _7 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _8 : usize;
  var _9 : Type.creusat_lit_lit;
  var _10 : uint8;
  var _11 : uint8;
  var _12 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _13 : usize;
  var _14 : Type.creusat_lit_lit;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _4 <- self_1;
    _3 <- IsPositive0.is_positive _4;
    goto BB1
  }
  BB1 {
    switch (_3)
      | False -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    _12 <- Type.creusat_assignments_assignments_Assignments_0 a_2;
    _14 <- self_1;
    _13 <- Index0.index _14;
    goto BB6
  }
  BB3 {
    _7 <- Type.creusat_assignments_assignments_Assignments_0 a_2;
    _9 <- self_1;
    _8 <- Index0.index _9;
    goto BB4
  }
  BB4 {
    _6 <- Index1.index _7 _8;
    goto BB5
  }
  BB5 {
    _5 <- _6;
    _0 <- _5 = (1 : uint8);
    goto BB8
  }
  BB6 {
    _11 <- Index1.index _12 _13;
    goto BB7
  }
  BB7 {
    _10 <- _11;
    _0 <- _10 = (0 : uint8);
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module CreuSat_Formula_Impl0_IsClauseSat_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  val is_clause_sat [@cfg:stackify] (self : Type.creusat_formula_formula) (idx : usize) (a : Type.creusat_assignments_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self))}
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Sat0.sat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) (UInt64.to_int idx)) a }
    
end
module CreuSat_Formula_Impl0_IsClauseSat
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  use mach.int.Int32
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model4 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant2 with function Model0.model = Model4.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Model0.model = Model4.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model2 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat1 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Sat as Sat0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant0 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model3 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant', function Model1.model = Model4.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model3.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy3
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model6.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model6.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model2.model
  clone CreuSat_Lit_Impl1_LitSat_Interface as LitSat0 with function Model0.model = Model7.model,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Sat0.sat = Sat1.sat
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg is_clause_sat [@cfg:stackify] (self : Type.creusat_formula_formula) (idx : usize) (a : Type.creusat_assignments_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self))}
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Sat0.sat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) (UInt64.to_int idx)) a }
    
   = 
  var _0 : bool;
  var self_1 : Type.creusat_formula_formula;
  var idx_2 : usize;
  var a_3 : Type.creusat_assignments_assignments;
  var _4 : ();
  var clause_5 : Type.creusat_clause_clause;
  var _6 : Type.creusat_clause_clause;
  var _7 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _8 : usize;
  var i_9 : usize;
  var _10 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _16 : ();
  var _17 : bool;
  var _18 : Type.creusat_lit_lit;
  var _19 : Type.creusat_lit_lit;
  var _20 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _21 : usize;
  var _22 : Type.creusat_assignments_assignments;
  var _23 : ();
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    self_1 <- self;
    idx_2 <- idx;
    a_3 <- a;
    goto BB0
  }
  BB0 {
    _7 <- Type.creusat_formula_formula_Formula_clauses self_1;
    _8 <- idx_2;
    _6 <- Index0.index _7 _8;
    goto BB1
  }
  BB1 {
    clause_5 <- _6;
    i_9 <- (0 : usize);
    goto BB2
  }
  BB2 {
    invariant previous_not_sat { forall j : (int) . 0 <= j && j < UInt64.to_int i_9 -> not (Sat1.sat (Seq.get (Model1.model clause_5) j) a_3) };
    _13 <- i_9;
    _15 <- Type.creusat_clause_clause_Clause_rest clause_5;
    _14 <- Len0.len _15;
    goto BB3
  }
  BB3 {
    _12 <- _13 < _14;
    switch (_12)
      | False -> goto BB9
      | _ -> goto BB4
      end
  }
  BB4 {
    _20 <- Type.creusat_clause_clause_Clause_rest clause_5;
    _21 <- i_9;
    _19 <- Index1.index _20 _21;
    goto BB5
  }
  BB5 {
    _18 <- _19;
    _22 <- a_3;
    _17 <- LitSat0.lit_sat _18 _22;
    goto BB6
  }
  BB6 {
    switch (_17)
      | False -> goto BB8
      | _ -> goto BB7
      end
  }
  BB7 {
    _0 <- true;
    goto BB10
  }
  BB8 {
    _16 <- ();
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    goto BB2
  }
  BB9 {
    _10 <- ();
    _0 <- false;
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module CreuSat_Logic_LogicWatches_WatchesInvariantInternal_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate watches_invariant_internal (w : Seq.seq (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global))) (n : int) (f : Type.creusat_formula_formula)
    
end
module CreuSat_Logic_LogicWatches_WatchesInvariantInternal
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  predicate watches_invariant_internal (w : Seq.seq (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global))) (n : int) (f : Type.creusat_formula_formula)
    
   = 
    2 * n = Seq.length w && (forall i : (int) . 0 <= i && i < Seq.length w -> (forall j : (int) . 0 <= j && j < Seq.length (Model0.model (Seq.get w i)) -> UInt64.to_int (Type.creusat_watches_watcher_Watcher_cref (Seq.get (Model0.model (Seq.get w i)) j)) < Seq.length (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) && Seq.length (Model2.model (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int (Type.creusat_watches_watcher_Watcher_cref (Seq.get (Model0.model (Seq.get w i)) j))))) > 1))
end
module CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface
  use Type
  predicate invariant' (self : Type.creusat_watches_watches) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicWatches_Impl0_Invariant
  use Type
  use mach.int.UInt64
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal_Interface as WatchesInvariantInternal0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  predicate invariant' (self : Type.creusat_watches_watches) (f : Type.creusat_formula_formula) = 
    WatchesInvariantInternal0.watches_invariant_internal (Model0.model (Type.creusat_watches_watches_Watches_watches self)) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) f
end
module CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.creusat_formula_formula) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicFormula_Impl1_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl2_SatInner_Interface as SatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  predicate sat_inner (self : Type.creusat_formula_formula) (a : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) -> SatInner0.sat_inner (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) i) a
end
module CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss_Interface
  use Type
  predicate eventually_sat_complete_no_ass (self : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_CompleteInner_Interface as CompleteInner0
  predicate eventually_sat_complete_no_ass (self : Type.creusat_formula_formula) = 
    exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self) && CompleteInner0.complete_inner a2 && SatInner0.sat_inner self a2
end
module CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface
  use Type
  predicate equisat (self : Type.creusat_formula_formula) (o : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicFormula_Impl1_Equisat
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  predicate equisat (self : Type.creusat_formula_formula) (o : Type.creusat_formula_formula) = 
    EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass self = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass o
end
module CreuSat_Logic_LogicClause_Impl1_PostUnit_Interface
  use Type
  predicate post_unit (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicClause_Impl1_PostUnit
  use Type
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate post_unit (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) = 
    PostUnitInner0.post_unit_inner self (Model0.model a)
end
module CreuSat_Logic_Logic_LemmaSwapClauseNoDups_Interface
  use seq.Permut
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  function lemma_swap_clause_no_dups (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : int) (b : int) : ()
    
end
module CreuSat_Logic_Logic_LemmaSwapClauseNoDups
  use seq.Permut
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  function lemma_swap_clause_no_dups (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : int) (b : int) : ()
    
   = 
    ()
  axiom lemma_swap_clause_no_dups_spec : forall c : Type.creusat_clause_clause, c2 : Type.creusat_clause_clause, a : int, b : int . NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model0.model c) -> Permut.exchange (Model0.model c2) (Model0.model c) a b -> Seq.length (Model0.model c2) = Seq.length (Model0.model c) -> Seq.length (Model0.model c) >= 2 -> NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model0.model c2)
end
module CreuSat_Logic_Logic_LemmaSwapClauseNoDups_Impl
  use seq.Permut
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model1.model
  let rec ghost function lemma_swap_clause_no_dups (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : int) (b : int) : ()
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model0.model c)}
    requires {Permut.exchange (Model0.model c2) (Model0.model c) a b}
    requires {Seq.length (Model0.model c2) = Seq.length (Model0.model c)}
    requires {Seq.length (Model0.model c) >= 2}
    ensures { NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model0.model c2) }
    
   = 
    ()
end
module CreuSat_Logic_Logic_LemmaSwapMaintainsPostUnit_Interface
  use seq.Permut
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit_Interface as PostUnit0
  function lemma_swap_maintains_post_unit (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : int) (b : int) (ass : Type.creusat_assignments_assignments) : ()
    
end
module CreuSat_Logic_Logic_LemmaSwapMaintainsPostUnit
  use seq.Permut
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit_Interface as PostUnit0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_Logic_LemmaSwapClauseNoDups_Interface as LemmaSwapClauseNoDups0 with function Model0.model = Model0.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  axiom .
  function lemma_swap_maintains_post_unit (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : int) (b : int) (ass : Type.creusat_assignments_assignments) : ()
    
   = 
    let _ = LemmaSwapClauseNoDups0.lemma_swap_clause_no_dups c c2 a b in ()
  axiom lemma_swap_maintains_post_unit_spec : forall c : Type.creusat_clause_clause, c2 : Type.creusat_clause_clause, a : int, b : int, ass : Type.creusat_assignments_assignments . PostUnit0.post_unit c ass -> Permut.exchange (Model0.model c2) (Model0.model c) a b -> Seq.length (Model0.model c2) = Seq.length (Model0.model c) -> Seq.length (Model0.model c) >= 2 -> PostUnit0.post_unit c2 ass
end
module CreuSat_Logic_Logic_LemmaSwapMaintainsPostUnit_Impl
  use seq.Permut
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit as PostUnit0 with function Model0.model = Model1.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner
  clone CreuSat_Logic_Logic_LemmaSwapClauseNoDups as LemmaSwapClauseNoDups0 with function Model0.model = Model0.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  axiom .
  let rec ghost function lemma_swap_maintains_post_unit (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : int) (b : int) (ass : Type.creusat_assignments_assignments) : ()
    requires {PostUnit0.post_unit c ass}
    requires {Permut.exchange (Model0.model c2) (Model0.model c) a b}
    requires {Seq.length (Model0.model c2) = Seq.length (Model0.model c)}
    requires {Seq.length (Model0.model c) >= 2}
    ensures { PostUnit0.post_unit c2 ass }
    
   = 
    let _ = LemmaSwapClauseNoDups0.lemma_swap_clause_no_dups c c2 a b in ()
end
module CreuSat_Formula_Impl0_SwapLitsInClause_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  val swap_lits_in_clause [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (trail : Type.creusat_trail_trail) (watches : Type.creusat_watches_watches) (cref : usize) (j : usize) (k : usize) : ()
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) > UInt64.to_int k}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) > UInt64.to_int j}
    requires {Invariant0.invariant' watches ( * self)}
    requires {Invariant1.invariant' ( * self)}
    requires {Invariant2.invariant' trail ( * self)}
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) = Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int cref))) }
    ensures { Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) = Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { Invariant0.invariant' watches ( ^ self) }
    ensures { Invariant1.invariant' ( ^ self) }
    ensures { Invariant2.invariant' trail ( ^ self) }
    
end
module CreuSat_Formula_Impl0_SwapLitsInClause
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model4 with type t = borrowed (Type.creusat_formula_formula)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model3 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant5 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model2.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model8.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner2 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit as PostUnit0 with function Model0.model = Model3.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model1.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model1.model
  clone CreuSat_Logic_Logic_LemmaSwapClauseNoDups as LemmaSwapClauseNoDups0 with function Model0.model = Model1.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  axiom .
  clone CreuSat_Logic_Logic_LemmaSwapMaintainsPostUnit as LemmaSwapMaintainsPostUnit0 with predicate PostUnit0.post_unit = PostUnit0.post_unit,
  function Model0.model = Model1.model,
  function LemmaSwapClauseNoDups0.lemma_swap_clause_no_dups = LemmaSwapClauseNoDups0.lemma_swap_clause_no_dups,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model0.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model2.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model7 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model7.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model10.model,
  function Model1.model = Model0.model, function Model2.model = Model1.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant0 with function Model0.model = Model6.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model2.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model8.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model3.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant2 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model8.model, function Model1.model = Model2.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = seq (Type.creusat_lit_lit)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_Model as Model11 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl1_Model as Model12 with type t = seq (Type.creusat_lit_lit),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model11.model
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = Type.creusat_lit_lit,
  function Model0.model = Model12.model, function Model1.model = Model11.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model4.model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, function Model0.model = Model11.model, function Model1.model = Model5.model
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  let rec cfg swap_lits_in_clause [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (trail : Type.creusat_trail_trail) (watches : Type.creusat_watches_watches) (cref : usize) (j : usize) (k : usize) : ()
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) > UInt64.to_int k}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) > UInt64.to_int j}
    requires {Invariant0.invariant' watches ( * self)}
    requires {Invariant1.invariant' ( * self)}
    requires {Invariant2.invariant' trail ( * self)}
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) = Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int cref))) }
    ensures { Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) = Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { Invariant0.invariant' watches ( ^ self) }
    ensures { Invariant1.invariant' ( ^ self) }
    ensures { Invariant2.invariant' trail ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_formula_formula);
  var trail_2 : Type.creusat_trail_trail;
  var watches_3 : Type.creusat_watches_watches;
  var cref_4 : usize;
  var j_5 : usize;
  var k_6 : usize;
  var old_f_7 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _8 : borrowed (Type.creusat_formula_formula);
  var _9 : borrowed (Type.creusat_formula_formula);
  var _10 : ();
  var _11 : ();
  var _12 : ();
  var _13 : borrowed (seq (Type.creusat_lit_lit));
  var _14 : borrowed (seq (Type.creusat_lit_lit));
  var _15 : borrowed (Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global));
  var _16 : borrowed (Type.creusat_clause_clause);
  var _17 : borrowed (Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global));
  var _18 : usize;
  var _19 : usize;
  var _20 : usize;
  var _21 : ();
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : ();
  {
    self_1 <- self;
    trail_2 <- trail;
    watches_3 <- watches;
    cref_4 <- cref;
    j_5 <- j;
    k_6 <- k;
    goto BB0
  }
  BB0 {
    _9 <- self_1;
    _8 <- _9;
    old_f_7 <- Record0.record _8;
    goto BB1
  }
  BB1 {
    assert { NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self_1))) (UInt64.to_int cref_4))) };
    _10 <- ();
    assert { LongArePostUnitInner0.long_are_post_unit_inner (Model2.model (Type.creusat_trail_trail_Trail_trail trail_2)) ( * self_1) (Model3.model (Type.creusat_trail_trail_Trail_assignments trail_2)) && true };
    _11 <- ();
    _17 <- borrow_mut (Type.creusat_formula_formula_Formula_clauses ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Formula_Formula a b =  * self_1 in Type.CreuSat_Formula_Formula ( ^ _17) b) };
    assume { Resolve0.resolve self_1 };
    _18 <- cref_4;
    _16 <- IndexMut0.index_mut _17 _18;
    goto BB2
  }
  BB2 {
    _15 <- borrow_mut (Type.creusat_clause_clause_Clause_rest ( * _16));
    _16 <- { _16 with current = (let Type.CreuSat_Clause_Clause a b =  * _16 in Type.CreuSat_Clause_Clause a ( ^ _15)) };
    assume { Resolve1.resolve _16 };
    _14 <- DerefMut0.deref_mut _15;
    goto BB3
  }
  BB3 {
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    _19 <- j_5;
    _20 <- k_6;
    _12 <- Swap0.swap _13 _19 _20;
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve _14 };
    assert { let _ = LemmaSwapMaintainsPostUnit0.lemma_swap_maintains_post_unit (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * Model4.model old_f_7))) (UInt64.to_int cref_4)) (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self_1))) (UInt64.to_int cref_4)) (UInt64.to_int j_5) (UInt64.to_int k_6) (Type.creusat_trail_trail_Trail_assignments trail_2) in true };
    _21 <- ();
    assert { VarsInRangeInner0.vars_in_range_inner (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self_1))) (UInt64.to_int cref_4))) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self_1))) };
    _22 <- ();
    assert { NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self_1))) (UInt64.to_int cref_4))) };
    _23 <- ();
    assert { LongArePostUnitInner0.long_are_post_unit_inner (Model2.model (Type.creusat_trail_trail_Trail_trail trail_2)) ( * self_1) (Model3.model (Type.creusat_trail_trail_Trail_assignments trail_2)) };
    _24 <- ();
    assert {  ^ Model4.model old_f_7 =  ^ self_1 };
    _25 <- ();
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Logic_LogicFormula_Compatible_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate compatible (f : (Seq.seq (Type.creusat_clause_clause), int)) (o : (Seq.seq (Type.creusat_clause_clause), int))
    
end
module CreuSat_Logic_LogicFormula_Compatible
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl2_Equals_Interface as Equals0
  predicate compatible (f : (Seq.seq (Type.creusat_clause_clause), int)) (o : (Seq.seq (Type.creusat_clause_clause), int))
    
   = 
    (let (_, a) = f in a) = (let (_, a) = o in a) && Seq.length (let (a, _) = o in a) >= Seq.length (let (a, _) = f in a) && (forall i : (int) . 0 <= i && i < Seq.length (let (a, _) = f in a) -> Equals0.equals (Seq.get (let (a, _) = f in a) i) (Seq.get (let (a, _) = o in a) i))
end
module CreuSat_Logic_LogicFormula_Equisat_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate equisat (f : (Seq.seq (Type.creusat_clause_clause), int)) (o : (Seq.seq (Type.creusat_clause_clause), int))
end
module CreuSat_Logic_LogicFormula_Equisat
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  predicate equisat (f : (Seq.seq (Type.creusat_clause_clause), int)) (o : (Seq.seq (Type.creusat_clause_clause), int))
   = 
    EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass o
end
module CreuSat_Logic_LogicFormula_EquisatCompatibleInner_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate equisat_compatible_inner (f : (Seq.seq (Type.creusat_clause_clause), int)) (o : (Seq.seq (Type.creusat_clause_clause), int))
    
end
module CreuSat_Logic_LogicFormula_EquisatCompatibleInner
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Compatible_Interface as Compatible0
  predicate equisat_compatible_inner (f : (Seq.seq (Type.creusat_clause_clause), int)) (o : (Seq.seq (Type.creusat_clause_clause), int))
    
   = 
    Compatible0.compatible f o && Equisat0.equisat f o
end
module CreuSat_Logic_LogicFormula_Impl1_EquisatCompatible_Interface
  use Type
  predicate equisat_compatible (self : Type.creusat_formula_formula) (o : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicFormula_Impl1_EquisatCompatible
  use Type
  clone CreuSat_Logic_LogicFormula_EquisatCompatibleInner_Interface as EquisatCompatibleInner0
  clone CreuSat_Logic_LogicFormula_Impl0_Model_Interface as Model0
  predicate equisat_compatible (self : Type.creusat_formula_formula) (o : Type.creusat_formula_formula) = 
    EquisatCompatibleInner0.equisat_compatible_inner (Model0.model self) (Model0.model o)
end
module CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic_Interface
  use Type
  use mach.int.Int
  function to_neg_watchidx_logic [@inline:trivial] (self : Type.creusat_lit_lit) : int
end
module CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  function to_neg_watchidx_logic [@inline:trivial] (self : Type.creusat_lit_lit) : int = 
    IndexLogic0.index_logic self * 2 + (if IsPositiveLogic0.is_positive_logic self then 1 else 0)
end
module CreuSat_Lit_Impl1_ToNegWatchidx_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic_Interface as ToNegWatchidxLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  val to_neg_watchidx [@cfg:stackify] (self : Type.creusat_lit_lit) : usize
    requires {IndexLogic0.index_logic self < div 18446744073709551615 2}
    ensures { UInt64.to_int result = IndexLogic0.index_logic self * 2 + (if IsPositiveLogic0.is_positive_logic self then
      1
    else
      0
    ) }
    ensures { UInt64.to_int result = ToNegWatchidxLogic0.to_neg_watchidx_logic self }
    
end
module CreuSat_Lit_Impl1_ToNegWatchidx
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic as ToNegWatchidxLogic0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Lit_Impl1_IsPositive_Interface as IsPositive0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Lit_Impl1_Index_Interface as Index0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  let rec cfg to_neg_watchidx [@cfg:stackify] (self : Type.creusat_lit_lit) : usize
    requires {IndexLogic0.index_logic self < div 18446744073709551615 2}
    ensures { UInt64.to_int result = IndexLogic0.index_logic self * 2 + (if IsPositiveLogic0.is_positive_logic self then
      1
    else
      0
    ) }
    ensures { UInt64.to_int result = ToNegWatchidxLogic0.to_neg_watchidx_logic self }
    
   = 
  var _0 : usize;
  var self_1 : Type.creusat_lit_lit;
  var _2 : usize;
  var _3 : usize;
  var _4 : Type.creusat_lit_lit;
  var _5 : usize;
  var _6 : bool;
  var _7 : Type.creusat_lit_lit;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- self_1;
    _3 <- Index0.index _4;
    goto BB1
  }
  BB1 {
    _2 <- _3 * (2 : usize);
    _7 <- self_1;
    _6 <- IsPositive0.is_positive _7;
    goto BB2
  }
  BB2 {
    switch (_6)
      | False -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    _5 <- (1 : usize);
    goto BB5
  }
  BB4 {
    _5 <- (0 : usize);
    goto BB5
  }
  BB5 {
    _0 <- _2 + _5;
    return _0
  }
  
end
module CreuSat_Watches_Impl0_AddWatcher_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic_Interface as ToNegWatchidxLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  val add_watcher [@cfg:stackify] (self : borrowed (Type.creusat_watches_watches)) (lit : Type.creusat_lit_lit) (cref : usize) (_f : Type.creusat_formula_formula) : ()
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int cref))) > 1}
    requires {ToNegWatchidxLogic0.to_neg_watchidx_logic lit < Seq.length (Model2.model (Type.creusat_watches_watches_Watches_watches ( * self)))}
    requires {IndexLogic0.index_logic lit < div 18446744073709551615 2}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses _f))}
    requires {Invariant0.invariant' ( * self) _f}
    ensures { Seq.length (Model2.model (Type.creusat_watches_watches_Watches_watches ( * self))) = Seq.length (Model2.model (Type.creusat_watches_watches_Watches_watches ( ^ self))) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module CreuSat_Watches_Impl0_AddWatcher
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic as ToNegWatchidxLogic0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model4.model,
  function Model1.model = Model0.model, function Model2.model = Model1.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant0 with function Model0.model = Model2.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_watches_watches
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, function Model0.model = Model4.model
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone CreuSat_Lit_Impl1_ToNegWatchidx_Interface as ToNegWatchidx0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function ToNegWatchidxLogic0.to_neg_watchidx_logic = ToNegWatchidxLogic0.to_neg_watchidx_logic
  let rec cfg add_watcher [@cfg:stackify] (self : borrowed (Type.creusat_watches_watches)) (lit : Type.creusat_lit_lit) (cref : usize) (_f : Type.creusat_formula_formula) : ()
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int cref))) > 1}
    requires {ToNegWatchidxLogic0.to_neg_watchidx_logic lit < Seq.length (Model2.model (Type.creusat_watches_watches_Watches_watches ( * self)))}
    requires {IndexLogic0.index_logic lit < div 18446744073709551615 2}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses _f))}
    requires {Invariant0.invariant' ( * self) _f}
    ensures { Seq.length (Model2.model (Type.creusat_watches_watches_Watches_watches ( * self))) = Seq.length (Model2.model (Type.creusat_watches_watches_Watches_watches ( ^ self))) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_watches_watches);
  var lit_2 : Type.creusat_lit_lit;
  var cref_3 : usize;
  var _f_4 : Type.creusat_formula_formula;
  var _5 : ();
  var _6 : borrowed (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global));
  var _7 : borrowed (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global));
  var _8 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _9 : usize;
  var _10 : Type.creusat_lit_lit;
  var _11 : Type.creusat_watches_watcher;
  var _12 : usize;
  {
    self_1 <- self;
    lit_2 <- lit;
    cref_3 <- cref;
    _f_4 <- _f;
    goto BB0
  }
  BB0 {
    _8 <- borrow_mut (Type.creusat_watches_watches_Watches_watches ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Watches_Watches a =  * self_1 in Type.CreuSat_Watches_Watches ( ^ _8)) };
    assume { Resolve0.resolve self_1 };
    _10 <- lit_2;
    _9 <- ToNegWatchidx0.to_neg_watchidx _10;
    goto BB1
  }
  BB1 {
    _7 <- IndexMut0.index_mut _8 _9;
    goto BB2
  }
  BB2 {
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _12 <- cref_3;
    _11 <- Type.CreuSat_Watches_Watcher _12;
    _5 <- Push0.push _6 _11;
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve _7 };
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Formula_Impl0_AddClause_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val add_clause [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (clause : Type.creusat_clause_clause) (watches : borrowed (Type.creusat_watches_watches)) (_t : Type.creusat_trail_trail) : usize
    requires {EquisatExtensionInner0.equisat_extension_inner clause (Model0.model self)}
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause)}
    requires {VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Seq.length (Model1.model clause) >= 2}
    requires {Invariant0.invariant' ( * watches) ( * self)}
    requires {Invariant1.invariant' _t ( * self)}
    requires {Invariant2.invariant' ( * self)}
    ensures { Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) + 1 = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    ensures { Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int result) = clause }
    ensures { UInt64.to_int result = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) }
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ self) }
    ensures { Invariant1.invariant' _t ( ^ self) }
    ensures { Invariant2.invariant' ( ^ self) }
    
end
module CreuSat_Formula_Impl0_AddClause
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model11 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model10 with function Model0.model = Model11.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model10.model
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model3 with type t = borrowed (Type.creusat_formula_formula)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model5 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model8.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model10.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model4.model,
  function Model1.model = Model10.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model4.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model1.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model2.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model4.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model2.model,
  function Model1.model = Model1.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicClause_Impl2_Equals as Equals0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Compatible as Compatible0 with predicate Equals0.equals = Equals0.equals
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicFormula_Equisat as Equisat1 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicFormula_EquisatCompatibleInner as EquisatCompatibleInner0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Equisat0.equisat = Equisat1.equisat
  clone CreuSat_Logic_LogicFormula_Impl1_EquisatCompatible as EquisatCompatible0 with function Model0.model = Model5.model,
  predicate EquisatCompatibleInner0.equisat_compatible_inner = EquisatCompatibleInner0.equisat_compatible_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant5 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model1.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model5.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model2.model,
  function Model1.model = Model1.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model4.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model8.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model10.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model8.model, function Model1.model = Model4.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model9.model,
  function Model1.model = Model2.model, function Model2.model = Model1.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant0 with function Model0.model = Model7.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model5.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model3.model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model
  clone CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic as ToNegWatchidxLogic0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model6.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_Watches_Impl0_AddWatcher_Interface as AddWatcher0 with function Model0.model = Model2.model,
  function Model1.model = Model1.model,
  function ToNegWatchidxLogic0.to_neg_watchidx_logic = ToNegWatchidxLogic0.to_neg_watchidx_logic,
  function Model2.model = Model7.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Invariant0.invariant' = Invariant0.invariant'
  let rec cfg add_clause [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (clause : Type.creusat_clause_clause) (watches : borrowed (Type.creusat_watches_watches)) (_t : Type.creusat_trail_trail) : usize
    requires {EquisatExtensionInner0.equisat_extension_inner clause (Model0.model self)}
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause)}
    requires {VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Seq.length (Model1.model clause) >= 2}
    requires {Invariant0.invariant' ( * watches) ( * self)}
    requires {Invariant1.invariant' _t ( * self)}
    requires {Invariant2.invariant' ( * self)}
    ensures { Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) + 1 = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    ensures { Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int result) = clause }
    ensures { UInt64.to_int result = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) }
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ self) }
    ensures { Invariant1.invariant' _t ( ^ self) }
    ensures { Invariant2.invariant' ( ^ self) }
    
   = 
  var _0 : usize;
  var self_1 : borrowed (Type.creusat_formula_formula);
  var clause_2 : Type.creusat_clause_clause;
  var watches_3 : borrowed (Type.creusat_watches_watches);
  var _t_4 : Type.creusat_trail_trail;
  var old_self_5 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _6 : borrowed (Type.creusat_formula_formula);
  var _7 : borrowed (Type.creusat_formula_formula);
  var cref_8 : usize;
  var _9 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var first_lit_10 : Type.creusat_lit_lit;
  var _11 : Type.creusat_lit_lit;
  var _12 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var second_lit_13 : Type.creusat_lit_lit;
  var _14 : Type.creusat_lit_lit;
  var _15 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _16 : ();
  var _17 : borrowed (Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global));
  var _18 : Type.creusat_clause_clause;
  var _19 : ();
  var _20 : borrowed (Type.creusat_watches_watches);
  var _21 : Type.creusat_lit_lit;
  var _22 : usize;
  var _23 : Type.creusat_formula_formula;
  var _24 : ();
  var _25 : borrowed (Type.creusat_watches_watches);
  var _26 : Type.creusat_lit_lit;
  var _27 : usize;
  var _28 : Type.creusat_formula_formula;
  var _29 : ();
  var _30 : ();
  var _31 : ();
  {
    self_1 <- self;
    clause_2 <- clause;
    watches_3 <- watches;
    _t_4 <- _t;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    _7 <- self_1;
    _6 <- _7;
    old_self_5 <- Record0.record _6;
    goto BB6
  }
  BB6 {
    _9 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    cref_8 <- Len0.len _9;
    goto BB7
  }
  BB7 {
    _12 <- Type.creusat_clause_clause_Clause_rest clause_2;
    _11 <- Index0.index _12 (0 : usize);
    goto BB8
  }
  BB8 {
    first_lit_10 <- _11;
    _15 <- Type.creusat_clause_clause_Clause_rest clause_2;
    _14 <- Index0.index _15 (1 : usize);
    goto BB9
  }
  BB9 {
    second_lit_13 <- _14;
    _17 <- borrow_mut (Type.creusat_formula_formula_Formula_clauses ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Formula_Formula a b =  * self_1 in Type.CreuSat_Formula_Formula ( ^ _17) b) };
    _18 <- clause_2;
    _16 <- Push0.push _17 _18;
    goto BB10
  }
  BB10 {
    _20 <- borrow_mut ( * watches_3);
    watches_3 <- { watches_3 with current = ( ^ _20) };
    _21 <- first_lit_10;
    _22 <- cref_8;
    _23 <-  * self_1;
    _19 <- AddWatcher0.add_watcher _20 _21 _22 _23;
    goto BB11
  }
  BB11 {
    _25 <- borrow_mut ( * watches_3);
    watches_3 <- { watches_3 with current = ( ^ _25) };
    _26 <- second_lit_13;
    _27 <- cref_8;
    _28 <-  * self_1;
    assume { Resolve0.resolve self_1 };
    _24 <- AddWatcher0.add_watcher _25 _26 _27 _28;
    goto BB12
  }
  BB12 {
    assume { Resolve1.resolve watches_3 };
    assert {  ^ Model3.model old_self_5 =  ^ self_1 };
    _29 <- ();
    assert { EquisatCompatible0.equisat_compatible ( * Model3.model old_self_5) ( * self_1) };
    _30 <- ();
    assert { TrailInvariant0.trail_invariant (Model4.model (Type.creusat_trail_trail_Trail_trail _t_4)) ( * self_1) };
    _31 <- ();
    _0 <- cref_8;
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module CreuSat_Formula_Impl0_AddUnwatchedClause_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val add_unwatched_clause [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (clause : Type.creusat_clause_clause) (watches : borrowed (Type.creusat_watches_watches)) (_t : Type.creusat_trail_trail) : usize
    requires {EquisatExtensionInner0.equisat_extension_inner clause (Model0.model self)}
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause)}
    requires {VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Seq.length (Model1.model clause) >= 2}
    requires {Invariant0.invariant' ( * watches) ( * self)}
    requires {Invariant1.invariant' _t ( * self)}
    requires {Invariant2.invariant' ( * self)}
    ensures { Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) + 1 = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    ensures { Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int result) = clause }
    ensures { UInt64.to_int result = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) }
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ self) }
    ensures { Invariant1.invariant' _t ( ^ self) }
    ensures { Invariant2.invariant' ( ^ self) }
    
end
module CreuSat_Formula_Impl0_AddUnwatchedClause
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model11 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model10 with function Model0.model = Model11.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model10.model
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model3 with type t = borrowed (Type.creusat_formula_formula)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model5 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model8.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model10.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model4.model,
  function Model1.model = Model10.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model4.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model1.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model2.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model4.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model2.model,
  function Model1.model = Model1.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicClause_Impl2_Equals as Equals0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Compatible as Compatible0 with predicate Equals0.equals = Equals0.equals
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicFormula_Equisat as Equisat1 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicFormula_EquisatCompatibleInner as EquisatCompatibleInner0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Equisat0.equisat = Equisat1.equisat
  clone CreuSat_Logic_LogicFormula_Impl1_EquisatCompatible as EquisatCompatible0 with function Model0.model = Model5.model,
  predicate EquisatCompatibleInner0.equisat_compatible_inner = EquisatCompatibleInner0.equisat_compatible_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant5 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model1.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model5.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model2.model,
  function Model1.model = Model1.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model4.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model8.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model10.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model8.model, function Model1.model = Model4.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model9.model,
  function Model1.model = Model2.model, function Model2.model = Model1.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant0 with function Model0.model = Model7.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model5.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model3.model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model
  let rec cfg add_unwatched_clause [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (clause : Type.creusat_clause_clause) (watches : borrowed (Type.creusat_watches_watches)) (_t : Type.creusat_trail_trail) : usize
    requires {EquisatExtensionInner0.equisat_extension_inner clause (Model0.model self)}
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause)}
    requires {VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Seq.length (Model1.model clause) >= 2}
    requires {Invariant0.invariant' ( * watches) ( * self)}
    requires {Invariant1.invariant' _t ( * self)}
    requires {Invariant2.invariant' ( * self)}
    ensures { Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) + 1 = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    ensures { Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int result) = clause }
    ensures { UInt64.to_int result = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) }
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ self) }
    ensures { Invariant1.invariant' _t ( ^ self) }
    ensures { Invariant2.invariant' ( ^ self) }
    
   = 
  var _0 : usize;
  var self_1 : borrowed (Type.creusat_formula_formula);
  var clause_2 : Type.creusat_clause_clause;
  var watches_3 : borrowed (Type.creusat_watches_watches);
  var _t_4 : Type.creusat_trail_trail;
  var old_self_5 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _6 : borrowed (Type.creusat_formula_formula);
  var _7 : borrowed (Type.creusat_formula_formula);
  var cref_8 : usize;
  var _9 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _10 : ();
  var _11 : borrowed (Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global));
  var _12 : Type.creusat_clause_clause;
  var _13 : ();
  var _14 : ();
  var _15 : ();
  {
    self_1 <- self;
    clause_2 <- clause;
    watches_3 <- watches;
    _t_4 <- _t;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve watches_3 };
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    _7 <- self_1;
    _6 <- _7;
    old_self_5 <- Record0.record _6;
    goto BB6
  }
  BB6 {
    _9 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    cref_8 <- Len0.len _9;
    goto BB7
  }
  BB7 {
    _11 <- borrow_mut (Type.creusat_formula_formula_Formula_clauses ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Formula_Formula a b =  * self_1 in Type.CreuSat_Formula_Formula ( ^ _11) b) };
    _12 <- clause_2;
    _10 <- Push0.push _11 _12;
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve self_1 };
    assert {  ^ Model3.model old_self_5 =  ^ self_1 };
    _13 <- ();
    assert { EquisatCompatible0.equisat_compatible ( * Model3.model old_self_5) ( * self_1) };
    _14 <- ();
    assert { TrailInvariant0.trail_invariant (Model4.model (Type.creusat_trail_trail_Trail_trail _t_4)) ( * self_1) };
    _15 <- ();
    _0 <- cref_8;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module CreuSat_Formula_Impl0_MakeAssertingClauseAndWatch_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  val make_asserting_clause_and_watch [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) (idx : usize) (cref : usize) : ()
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * watches) ( * self)}
    requires {Invariant1.invariant' t ( * self)}
    requires {Invariant2.invariant' ( * self)}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) > UInt64.to_int idx}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) > 1}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self)))}
    ensures { Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) = Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int cref))) = Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ self) }
    ensures { Invariant1.invariant' t ( ^ self) }
    ensures { Invariant2.invariant' ( ^ self) }
    
end
module CreuSat_Formula_Impl0_MakeAssertingClauseAndWatch
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model9 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model9.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = borrowed (Type.creusat_formula_formula)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model1.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model0.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model6 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model6.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model8.model,
  function Model1.model = Model0.model, function Model2.model = Model1.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model5.model,
  function Model1.model = Model9.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model5.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model5.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model4.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model5.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model4.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model9.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model4.model, function Model1.model = Model5.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant0 with function Model0.model = Model3.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic as ToNegWatchidxLogic0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model2.model
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model7.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_Watches_Impl0_AddWatcher_Interface as AddWatcher0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  function ToNegWatchidxLogic0.to_neg_watchidx_logic = ToNegWatchidxLogic0.to_neg_watchidx_logic,
  function Model2.model = Model3.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Formula_Impl0_SwapLitsInClause_Interface as SwapLitsInClause0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg make_asserting_clause_and_watch [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) (idx : usize) (cref : usize) : ()
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * watches) ( * self)}
    requires {Invariant1.invariant' t ( * self)}
    requires {Invariant2.invariant' ( * self)}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) > UInt64.to_int idx}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) > 1}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self)))}
    ensures { Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) = Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int cref))) = Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ self) }
    ensures { Invariant1.invariant' t ( ^ self) }
    ensures { Invariant2.invariant' ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_formula_formula);
  var watches_2 : borrowed (Type.creusat_watches_watches);
  var t_3 : Type.creusat_trail_trail;
  var idx_4 : usize;
  var cref_5 : usize;
  var old_self_6 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _7 : borrowed (Type.creusat_formula_formula);
  var _8 : borrowed (Type.creusat_formula_formula);
  var _9 : ();
  var _10 : borrowed (Type.creusat_formula_formula);
  var _11 : Type.creusat_trail_trail;
  var _12 : Type.creusat_watches_watches;
  var _13 : usize;
  var _14 : usize;
  var first_lit_15 : Type.creusat_lit_lit;
  var _16 : Type.creusat_lit_lit;
  var _17 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _18 : Type.creusat_clause_clause;
  var _19 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _20 : usize;
  var second_lit_21 : Type.creusat_lit_lit;
  var _22 : Type.creusat_lit_lit;
  var _23 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _24 : Type.creusat_clause_clause;
  var _25 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _26 : usize;
  var _27 : ();
  var _28 : borrowed (Type.creusat_watches_watches);
  var _29 : Type.creusat_lit_lit;
  var _30 : usize;
  var _31 : Type.creusat_formula_formula;
  var _32 : ();
  var _33 : borrowed (Type.creusat_watches_watches);
  var _34 : Type.creusat_lit_lit;
  var _35 : usize;
  var _36 : Type.creusat_formula_formula;
  var _37 : ();
  var _38 : ();
  {
    self_1 <- self;
    watches_2 <- watches;
    t_3 <- t;
    idx_4 <- idx;
    cref_5 <- cref;
    goto BB0
  }
  BB0 {
    _8 <- self_1;
    _7 <- _8;
    old_self_6 <- Record0.record _7;
    goto BB1
  }
  BB1 {
    _10 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _10) };
    _11 <- t_3;
    _12 <-  * watches_2;
    _13 <- cref_5;
    _14 <- idx_4;
    _9 <- SwapLitsInClause0.swap_lits_in_clause _10 _11 _12 _13 (1 : usize) _14;
    goto BB2
  }
  BB2 {
    _19 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    _20 <- cref_5;
    _18 <- Index0.index _19 _20;
    goto BB3
  }
  BB3 {
    _17 <- Type.creusat_clause_clause_Clause_rest _18;
    _16 <- Index1.index _17 (0 : usize);
    goto BB4
  }
  BB4 {
    first_lit_15 <- _16;
    _25 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    _26 <- cref_5;
    _24 <- Index0.index _25 _26;
    goto BB5
  }
  BB5 {
    _23 <- Type.creusat_clause_clause_Clause_rest _24;
    _22 <- Index1.index _23 (1 : usize);
    goto BB6
  }
  BB6 {
    second_lit_21 <- _22;
    _28 <- borrow_mut ( * watches_2);
    watches_2 <- { watches_2 with current = ( ^ _28) };
    _29 <- first_lit_15;
    _30 <- cref_5;
    _31 <-  * self_1;
    _27 <- AddWatcher0.add_watcher _28 _29 _30 _31;
    goto BB7
  }
  BB7 {
    _33 <- borrow_mut ( * watches_2);
    watches_2 <- { watches_2 with current = ( ^ _33) };
    _34 <- second_lit_21;
    _35 <- cref_5;
    _36 <-  * self_1;
    assume { Resolve0.resolve self_1 };
    _32 <- AddWatcher0.add_watcher _33 _34 _35 _36;
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve watches_2 };
    assert {  ^ Model2.model old_self_6 =  ^ self_1 };
    _37 <- ();
    assert { Equisat0.equisat ( * Model2.model old_self_6) ( * self_1) };
    _38 <- ();
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Formula_Impl0_AddAndSwapFirst_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val add_and_swap_first [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (clause : Type.creusat_clause_clause) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) (s_idx : usize) : usize
    requires {EquisatExtensionInner0.equisat_extension_inner clause (Model0.model self)}
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause)}
    requires {VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Seq.length (Model1.model clause) >= 2}
    requires {Invariant0.invariant' ( * watches) ( * self)}
    requires {Invariant1.invariant' t ( * self)}
    requires {Invariant2.invariant' ( * self)}
    requires {UInt64.to_int s_idx < Seq.length (Model1.model clause)}
    ensures { Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) + 1 = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    ensures { UInt64.to_int result = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) }
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { Seq.length (Model1.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int result))) = Seq.length (Model1.model clause) }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ self) }
    ensures { Invariant1.invariant' t ( ^ self) }
    ensures { Invariant2.invariant' ( ^ self) }
    
end
module CreuSat_Formula_Impl0_AddAndSwapFirst
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model9 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model9.model
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model3 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model6.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model9.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model7.model,
  function Model1.model = Model9.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model7.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model2.model,
  function Model1.model = Model1.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model1.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model2.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model7.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant5 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model1.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model3.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model2.model,
  function Model1.model = Model1.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model7.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model6.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model9.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model6.model, function Model1.model = Model7.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model8.model,
  function Model1.model = Model2.model, function Model2.model = Model1.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant0 with function Model0.model = Model5.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model11 with type t = borrowed (Type.creusat_formula_formula)
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model11.model
  clone CreuSat_Formula_Impl0_SwapLitsInClause_Interface as SwapLitsInClause0 with function Model0.model = Model2.model,
  function Model1.model = Model1.model, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Formula_Impl0_AddUnwatchedClause_Interface as AddUnwatchedClause0 with function Model0.model = Model0.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  function Model1.model = Model1.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Invariant2.invariant' = Invariant2.invariant', function Model2.model = Model2.model,
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg add_and_swap_first [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (clause : Type.creusat_clause_clause) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) (s_idx : usize) : usize
    requires {EquisatExtensionInner0.equisat_extension_inner clause (Model0.model self)}
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause)}
    requires {VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Seq.length (Model1.model clause) >= 2}
    requires {Invariant0.invariant' ( * watches) ( * self)}
    requires {Invariant1.invariant' t ( * self)}
    requires {Invariant2.invariant' ( * self)}
    requires {UInt64.to_int s_idx < Seq.length (Model1.model clause)}
    ensures { Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) + 1 = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    ensures { UInt64.to_int result = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) }
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { Seq.length (Model1.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int result))) = Seq.length (Model1.model clause) }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ self) }
    ensures { Invariant1.invariant' t ( ^ self) }
    ensures { Invariant2.invariant' ( ^ self) }
    
   = 
  var _0 : usize;
  var self_1 : borrowed (Type.creusat_formula_formula);
  var clause_2 : Type.creusat_clause_clause;
  var watches_3 : borrowed (Type.creusat_watches_watches);
  var t_4 : Type.creusat_trail_trail;
  var s_idx_5 : usize;
  var old_self_6 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _7 : borrowed (Type.creusat_formula_formula);
  var _8 : borrowed (Type.creusat_formula_formula);
  var cref_9 : usize;
  var _10 : borrowed (Type.creusat_formula_formula);
  var _11 : Type.creusat_clause_clause;
  var _12 : borrowed (Type.creusat_watches_watches);
  var _13 : Type.creusat_trail_trail;
  var _14 : ();
  var _15 : borrowed (Type.creusat_formula_formula);
  var _16 : Type.creusat_trail_trail;
  var _17 : Type.creusat_watches_watches;
  var _18 : usize;
  var _19 : usize;
  {
    self_1 <- self;
    clause_2 <- clause;
    watches_3 <- watches;
    t_4 <- t;
    s_idx_5 <- s_idx;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    _8 <- self_1;
    _7 <- _8;
    old_self_6 <- Record0.record _7;
    goto BB7
  }
  BB7 {
    _10 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _10) };
    _11 <- clause_2;
    _12 <- borrow_mut ( * watches_3);
    watches_3 <- { watches_3 with current = ( ^ _12) };
    _13 <- t_4;
    cref_9 <- AddUnwatchedClause0.add_unwatched_clause _10 _11 _12 _13;
    goto BB8
  }
  BB8 {
    _15 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _15) };
    _16 <- t_4;
    _17 <-  * watches_3;
    assume { Resolve0.resolve watches_3 };
    _18 <- cref_9;
    _19 <- s_idx_5;
    _14 <- SwapLitsInClause0.swap_lits_in_clause _15 _16 _17 _18 (0 : usize) _19;
    goto BB9
  }
  BB9 {
    assume { Resolve1.resolve self_1 };
    _0 <- cref_9;
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module CreuSat_Formula_Impl0_AddUnit_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val add_unit [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (clause : Type.creusat_clause_clause) (_t : Type.creusat_trail_trail) : usize
    requires {EquisatExtensionInner0.equisat_extension_inner clause (Model0.model self)}
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause)}
    requires {VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)))}
    requires {Seq.length (Model1.model clause) = 1}
    requires {Invariant1.invariant' _t ( * self)}
    requires {Invariant2.invariant' ( * self)}
    ensures { Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) + 1 = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    ensures { Seq.length (Model1.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int result))) = 1 }
    ensures { UInt64.to_int result = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) }
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { EquisatCompatible0.equisat_compatible ( * self) ( ^ self) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { Invariant1.invariant' _t ( ^ self) }
    ensures { Invariant2.invariant' ( ^ self) }
    
end
module CreuSat_Formula_Impl0_AddUnit
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model8 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model8.model
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model3 with type t = borrowed (Type.creusat_formula_formula)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model5 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model7.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model4.model,
  function Model1.model = Model8.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model4.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model1.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model2.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model4.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant6 with function Model0.model = Model2.model,
  function Model1.model = Model1.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicClause_Impl2_Equals as Equals0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Compatible as Compatible0 with predicate Equals0.equals = Equals0.equals
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicFormula_Equisat as Equisat1 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicFormula_EquisatCompatibleInner as EquisatCompatibleInner0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Equisat0.equisat = Equisat1.equisat
  clone CreuSat_Logic_LogicFormula_Impl1_EquisatCompatible as EquisatCompatible0 with function Model0.model = Model5.model,
  predicate EquisatCompatibleInner0.equisat_compatible_inner = EquisatCompatibleInner0.equisat_compatible_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model2.model,
  function Model1.model = Model1.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model4.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model7.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model8.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model7.model, function Model1.model = Model4.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant0.invariant', function Model1.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model5.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model5.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model3.model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model
  let rec cfg add_unit [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (clause : Type.creusat_clause_clause) (_t : Type.creusat_trail_trail) : usize
    requires {EquisatExtensionInner0.equisat_extension_inner clause (Model0.model self)}
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause)}
    requires {VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)))}
    requires {Seq.length (Model1.model clause) = 1}
    requires {Invariant1.invariant' _t ( * self)}
    requires {Invariant2.invariant' ( * self)}
    ensures { Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) + 1 = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    ensures { Seq.length (Model1.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int result))) = 1 }
    ensures { UInt64.to_int result = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) }
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { EquisatCompatible0.equisat_compatible ( * self) ( ^ self) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { Invariant1.invariant' _t ( ^ self) }
    ensures { Invariant2.invariant' ( ^ self) }
    
   = 
  var _0 : usize;
  var self_1 : borrowed (Type.creusat_formula_formula);
  var clause_2 : Type.creusat_clause_clause;
  var _t_3 : Type.creusat_trail_trail;
  var old_self_4 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _5 : borrowed (Type.creusat_formula_formula);
  var _6 : borrowed (Type.creusat_formula_formula);
  var cref_7 : usize;
  var _8 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _9 : ();
  var _10 : borrowed (Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global));
  var _11 : Type.creusat_clause_clause;
  var _12 : ();
  var _13 : ();
  var _14 : ();
  {
    self_1 <- self;
    clause_2 <- clause;
    _t_3 <- _t;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    _6 <- self_1;
    _5 <- _6;
    old_self_4 <- Record0.record _5;
    goto BB6
  }
  BB6 {
    _8 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    cref_7 <- Len0.len _8;
    goto BB7
  }
  BB7 {
    _10 <- borrow_mut (Type.creusat_formula_formula_Formula_clauses ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Formula_Formula a b =  * self_1 in Type.CreuSat_Formula_Formula ( ^ _10) b) };
    _11 <- clause_2;
    _9 <- Push0.push _10 _11;
    goto BB8
  }
  BB8 {
    assume { Resolve0.resolve self_1 };
    assert {  ^ Model3.model old_self_4 =  ^ self_1 };
    _12 <- ();
    assert { EquisatCompatible0.equisat_compatible ( * Model3.model old_self_4) ( * self_1) };
    _13 <- ();
    assert { TrailInvariant0.trail_invariant (Model4.model (Type.creusat_trail_trail_Trail_trail _t_3)) ( * self_1) };
    _14 <- ();
    _0 <- cref_7;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module CreuSat_Logic_LogicFormula_Impl1_Sat_Interface
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate sat (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicFormula_Impl1_Sat
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicFormula_FormulaSatInner_Interface as FormulaSatInner0
  clone CreuSat_Logic_LogicFormula_Impl0_Model_Interface as Model1
  predicate sat (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) = 
    FormulaSatInner0.formula_sat_inner (Model1.model self) (Model0.model a)
  axiom sat_spec : forall self : Type.creusat_formula_formula, a : Type.creusat_assignments_assignments . sat self a = SatInner0.sat_inner self (Model0.model a)
end
module CreuSat_Logic_LogicFormula_Impl1_Sat_Impl
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  let rec ghost function sat (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) : bool
    ensures { result = SatInner0.sat_inner self (Model0.model a) }
    
   = 
    let a' = Model1.model self in let b' = Model0.model a in FormulaSatInner0.formula_sat_inner a' b'
end
module CreuSat_Formula_Impl0_IsSat_Interface
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicFormula_Impl1_Sat_Interface as Sat0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant0
  val is_sat [@cfg:stackify] (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Sat0.sat self a }
    
end
module CreuSat_Formula_Impl0_IsSat
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant2 with function Model0.model = Model4.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Model0.model = Model4.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicClause_Impl2_Sat as Sat1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model2 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model1.model = Model2.model,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant', function Model1.model = Model4.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model2.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model
  clone CreuSat_Formula_Impl0_IsClauseSat_Interface as IsClauseSat0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Sat0.sat = Sat1.sat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg is_sat [@cfg:stackify] (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Sat0.sat self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.creusat_formula_formula;
  var a_2 : Type.creusat_assignments_assignments;
  var _3 : ();
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : Type.creusat_formula_formula;
  var _15 : usize;
  var _16 : Type.creusat_assignments_assignments;
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var _20 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant prev { forall k : (int) . 0 <= k && k < UInt64.to_int i_4 -> Sat1.sat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses self_1)) k) a_2 };
    _8 <- i_4;
    _10 <- Type.creusat_formula_formula_Formula_clauses self_1;
    _9 <- Len0.len _10;
    goto BB2
  }
  BB2 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB7
      | _ -> goto BB3
      end
  }
  BB3 {
    _14 <- self_1;
    _15 <- i_4;
    _16 <- a_2;
    _13 <- IsClauseSat0.is_clause_sat _14 _15 _16;
    goto BB4
  }
  BB4 {
    _12 <- not _13;
    switch (_12)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    _0 <- false;
    goto BB8
  }
  BB6 {
    _11 <- ();
    i_4 <- i_4 + (1 : usize);
    _6 <- ();
    goto BB1
  }
  BB7 {
    _5 <- ();
    _0 <- true;
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module CreuSat_Logic_LogicWatches_WatcherCrefsInRange_Interface
  use seq.Seq
  use Type
  predicate watcher_crefs_in_range (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicWatches_WatcherCrefsInRange
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  predicate watcher_crefs_in_range (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula) = 
    forall j : (int) . 0 <= j && j < Seq.length w -> UInt64.to_int (Type.creusat_watches_watcher_Watcher_cref (Seq.get w j)) < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))
end
module CreuSat_Logic_LogicUtil_Pop_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq_ext.SeqExt
  function pop (s : Seq.seq t) : Seq.seq t
end
module CreuSat_Logic_LogicUtil_Pop
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq_ext.SeqExt
  function pop (s : Seq.seq t) : Seq.seq t = 
    SeqExt.subsequence s 0 (Seq.length s - 1)
  axiom pop_spec : forall s : Seq.seq t . Seq.length s > 0 -> pop s = SeqExt.subsequence s 0 (Seq.length s - 1) && Seq.length (pop s) = Seq.length s - 1 && (forall i : (int) . 0 <= i && i < Seq.length (pop s) -> Seq.get (pop s) i = Seq.get s i)
end
module CreuSat_Logic_LogicUtil_Pop_Impl
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq_ext.SeqExt
  let rec ghost function pop (s : Seq.seq t) : Seq.seq t
    requires {Seq.length s > 0}
    ensures { forall i : (int) . 0 <= i && i < Seq.length result -> Seq.get result i = Seq.get s i }
    ensures { Seq.length result = Seq.length s - 1 }
    ensures { result = SeqExt.subsequence s 0 (Seq.length s - 1) }
    
   = 
    SeqExt.subsequence s 0 (Seq.length s - 1)
end
module CreuSat_Logic_LogicWatches_LemmaPopWatchMaintainsWatcherInvariant_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = Type.creusat_watches_watcher, axiom .
  clone CreuSat_Logic_LogicWatches_WatcherCrefsInRange_Interface as WatcherCrefsInRange0
  function lemma_pop_watch_maintains_watcher_invariant (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula) : ()
    
end
module CreuSat_Logic_LogicWatches_LemmaPopWatchMaintainsWatcherInvariant
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = Type.creusat_watches_watcher, axiom .
  clone CreuSat_Logic_LogicWatches_WatcherCrefsInRange_Interface as WatcherCrefsInRange0
  function lemma_pop_watch_maintains_watcher_invariant (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula) : ()
    
   = 
    ()
  axiom lemma_pop_watch_maintains_watcher_invariant_spec : forall w : Seq.seq (Type.creusat_watches_watcher), f : Type.creusat_formula_formula . WatcherCrefsInRange0.watcher_crefs_in_range w f -> Seq.length w > 0 -> WatcherCrefsInRange0.watcher_crefs_in_range (Pop0.pop w) f
end
module CreuSat_Logic_LogicWatches_LemmaPopWatchMaintainsWatcherInvariant_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicUtil_Pop as Pop0 with type t = Type.creusat_watches_watcher, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_WatcherCrefsInRange as WatcherCrefsInRange0 with function Model0.model = Model0.model
  let rec ghost function lemma_pop_watch_maintains_watcher_invariant (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula) : ()
    requires {WatcherCrefsInRange0.watcher_crefs_in_range w f}
    requires {Seq.length w > 0}
    ensures { WatcherCrefsInRange0.watcher_crefs_in_range (Pop0.pop w) f }
    
   = 
    ()
end
module CreuSat_Watches_Impl0_Unwatch_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  val unwatch [@cfg:stackify] (self : borrowed (Type.creusat_watches_watches)) (f : Type.creusat_formula_formula) (trail : Type.creusat_trail_trail) (cref : usize) (lit : Type.creusat_lit_lit) : ()
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) >= 2}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' trail f}
    requires {Invariant1.invariant' f}
    requires {IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    requires {Invariant2.invariant' ( * self) f}
    ensures { Invariant2.invariant' ( ^ self) f }
    
end
module CreuSat_Watches_Impl0_Unwatch
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model9 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicUtil_Pop as Pop0 with type t = Type.creusat_watches_watcher, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = borrowed (Type.creusat_watches_watches)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model9.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model7.model,
  function Model1.model = Model9.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model7.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model6.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model1.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model0.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model7.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model7.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model6.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model9.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant0 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model6.model, function Model1.model = Model7.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model4.model,
  function Model1.model = Model0.model, function Model2.model = Model1.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant2 with function Model0.model = Model3.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model8 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model8.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicWatches_WatcherCrefsInRange as WatcherCrefsInRange0 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicWatches_LemmaPopWatchMaintainsWatcherInvariant as LemmaPopWatchMaintainsWatcherInvariant0 with predicate WatcherCrefsInRange0.watcher_crefs_in_range = WatcherCrefsInRange0.watcher_crefs_in_range,
  function Pop0.pop = Pop0.pop, axiom .
  use mach.int.Int64
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = seq (Type.creusat_watches_watcher)
  clone CreusotContracts_Logic_Model_Impl2_Model as Model11 with type t = Type.creusat_watches_watcher
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_watches_watcher
  clone CreusotContracts_Logic_Model_Impl1_Model as Model12 with type t = seq (Type.creusat_watches_watcher),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model11.model
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = Type.creusat_watches_watcher,
  function Model0.model = Model12.model, function Model1.model = Model11.model
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_watches_watcher
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_watches_watcher
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_watches_watcher
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Model_Impl1_Model as Model13 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model4.model
  clone Alloc_Vec_Impl1_Pop_Interface as Pop1 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, function Model0.model = Model4.model, function Model1.model = Model13.model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, function Model0.model = Model11.model, function Model1.model = Model4.model
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_watches_watcher, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model4.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, function Model0.model = Model4.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_watches_watches),
  function Model0.model = Model2.model
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic as ToNegWatchidxLogic0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Lit_Impl1_ToNegWatchidx_Interface as ToNegWatchidx0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function ToNegWatchidxLogic0.to_neg_watchidx_logic = ToNegWatchidxLogic0.to_neg_watchidx_logic
  let rec cfg unwatch [@cfg:stackify] (self : borrowed (Type.creusat_watches_watches)) (f : Type.creusat_formula_formula) (trail : Type.creusat_trail_trail) (cref : usize) (lit : Type.creusat_lit_lit) : ()
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) >= 2}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' trail f}
    requires {Invariant1.invariant' f}
    requires {IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    requires {Invariant2.invariant' ( * self) f}
    ensures { Invariant2.invariant' ( ^ self) f }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_watches_watches);
  var f_2 : Type.creusat_formula_formula;
  var trail_3 : Type.creusat_trail_trail;
  var cref_4 : usize;
  var lit_5 : Type.creusat_lit_lit;
  var watchidx_6 : usize;
  var _7 : Type.creusat_lit_lit;
  var i_8 : usize;
  var _9 : ();
  var _10 : bool;
  var _11 : usize;
  var _12 : usize;
  var _13 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _14 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _15 : Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _16 : usize;
  var _17 : ();
  var _18 : bool;
  var _19 : usize;
  var _20 : Type.creusat_watches_watcher;
  var _21 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _22 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _23 : Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _24 : usize;
  var _25 : usize;
  var _26 : usize;
  var _27 : ();
  var end'_28 : usize;
  var _29 : usize;
  var _30 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _31 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _32 : Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _33 : usize;
  var _34 : ();
  var _35 : borrowed (seq (Type.creusat_watches_watcher));
  var _36 : borrowed (seq (Type.creusat_watches_watcher));
  var _37 : borrowed (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global));
  var _38 : borrowed (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global));
  var _39 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _40 : usize;
  var _41 : usize;
  var _42 : usize;
  var old_w_43 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_watches_watches));
  var _44 : borrowed (Type.creusat_watches_watches);
  var _45 : borrowed (Type.creusat_watches_watches);
  var _46 : ();
  var _47 : Type.core_option_option (Type.creusat_watches_watcher);
  var _48 : borrowed (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global));
  var _49 : borrowed (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global));
  var _50 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _51 : usize;
  var _52 : isize;
  var w_53 : Type.creusat_watches_watcher;
  var _54 : ();
  var _55 : ();
  var _56 : ();
  var _57 : ();
  var _58 : ();
  var _59 : ();
  var _60 : ();
  var _61 : ();
  var _62 : ();
  var _63 : ();
  var _64 : ();
  {
    self_1 <- self;
    f_2 <- f;
    trail_3 <- trail;
    cref_4 <- cref;
    lit_5 <- lit;
    goto BB0
  }
  BB0 {
    _7 <- lit_5;
    watchidx_6 <- ToNegWatchidx0.to_neg_watchidx _7;
    goto BB1
  }
  BB1 {
    i_8 <- (0 : usize);
    goto BB2
  }
  BB2 {
    invariant self_inv { Invariant2.invariant' ( * self_1) f_2 };
    _11 <- i_8;
    _15 <- Type.creusat_watches_watches_Watches_watches ( * self_1);
    _16 <- watchidx_6;
    _14 <- Index0.index _15 _16;
    goto BB3
  }
  BB3 {
    _13 <- _14;
    _12 <- Len0.len _13;
    goto BB4
  }
  BB4 {
    _10 <- _11 < _12;
    switch (_10)
      | False -> goto BB21
      | _ -> goto BB5
      end
  }
  BB5 {
    _23 <- Type.creusat_watches_watches_Watches_watches ( * self_1);
    _24 <- watchidx_6;
    _22 <- Index0.index _23 _24;
    goto BB6
  }
  BB6 {
    _21 <- _22;
    _25 <- i_8;
    _20 <- Index1.index _21 _25;
    goto BB7
  }
  BB7 {
    _19 <- Type.creusat_watches_watcher_Watcher_cref _20;
    _26 <- cref_4;
    _18 <- _19 = _26;
    switch (_18)
      | False -> goto BB20
      | _ -> goto BB8
      end
  }
  BB8 {
    _32 <- Type.creusat_watches_watches_Watches_watches ( * self_1);
    _33 <- watchidx_6;
    _31 <- Index0.index _32 _33;
    goto BB9
  }
  BB9 {
    _30 <- _31;
    _29 <- Len0.len _30;
    goto BB10
  }
  BB10 {
    end'_28 <- _29 - (1 : usize);
    _39 <- borrow_mut (Type.creusat_watches_watches_Watches_watches ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Watches_Watches a =  * self_1 in Type.CreuSat_Watches_Watches ( ^ _39)) };
    _40 <- watchidx_6;
    _38 <- IndexMut0.index_mut _39 _40;
    goto BB11
  }
  BB11 {
    _37 <- borrow_mut ( * _38);
    _38 <- { _38 with current = ( ^ _37) };
    assume { Resolve0.resolve _38 };
    _36 <- DerefMut0.deref_mut _37;
    goto BB12
  }
  BB12 {
    _35 <- borrow_mut ( * _36);
    _36 <- { _36 with current = ( ^ _35) };
    _41 <- i_8;
    _42 <- end'_28;
    _34 <- Swap0.swap _35 _41 _42;
    goto BB13
  }
  BB13 {
    assume { Resolve1.resolve _36 };
    _45 <- self_1;
    _44 <- _45;
    old_w_43 <- Record0.record _44;
    goto BB14
  }
  BB14 {
    _50 <- borrow_mut (Type.creusat_watches_watches_Watches_watches ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Watches_Watches a =  * self_1 in Type.CreuSat_Watches_Watches ( ^ _50)) };
    assume { Resolve2.resolve self_1 };
    _51 <- watchidx_6;
    _49 <- IndexMut0.index_mut _50 _51;
    goto BB15
  }
  BB15 {
    _48 <- borrow_mut ( * _49);
    _49 <- { _49 with current = ( ^ _48) };
    _47 <- Pop1.pop _48;
    goto BB16
  }
  BB16 {
    assume { Resolve0.resolve _49 };
    switch (_47)
      | Type.Core_Option_Option_None -> goto BB17
      | Type.Core_Option_Option_Some _ -> goto BB19
      end
  }
  BB17 {
    absurd
  }
  BB18 {
    absurd
  }
  BB19 {
    w_53 <- Type.core_option_option_Some_0 _47;
    assert {  ^ Model2.model old_w_43 =  ^ self_1 };
    _54 <- ();
    assert { let _ = LemmaPopWatchMaintainsWatcherInvariant0.lemma_pop_watch_maintains_watcher_invariant (Model4.model (Seq.get (Model3.model (Type.creusat_watches_watches_Watches_watches ( * Model2.model old_w_43))) (UInt64.to_int watchidx_6))) f_2 in true };
    _55 <- ();
    assert { WatcherCrefsInRange0.watcher_crefs_in_range (Pop0.pop (Model4.model (Seq.get (Model3.model (Type.creusat_watches_watches_Watches_watches ( * Model2.model old_w_43))) (UInt64.to_int watchidx_6)))) f_2 };
    _56 <- ();
    assert { Model4.model (Seq.get (Model3.model (Type.creusat_watches_watches_Watches_watches ( * self_1))) (UInt64.to_int watchidx_6)) = Pop0.pop (Model4.model (Seq.get (Model3.model (Type.creusat_watches_watches_Watches_watches ( * Model2.model old_w_43))) (UInt64.to_int watchidx_6))) };
    _57 <- ();
    assert { WatcherCrefsInRange0.watcher_crefs_in_range (Model4.model (Seq.get (Model3.model (Type.creusat_watches_watches_Watches_watches ( * self_1))) (UInt64.to_int watchidx_6))) f_2 };
    _58 <- ();
    assert { Invariant2.invariant' ( * self_1) f_2 };
    _59 <- ();
    _46 <- ();
    _0 <- ();
    goto BB22
  }
  BB20 {
    _17 <- ();
    i_8 <- i_8 + (1 : usize);
    _9 <- ();
    goto BB2
  }
  BB21 {
    assume { Resolve2.resolve self_1 };
    _0 <- ();
    goto BB22
  }
  BB22 {
    return _0
  }
  
end
module CreuSat_Formula_Impl0_DeleteClause_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  val delete_clause [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (cref : usize) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) : ()
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self)))}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) > 1}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' t ( * self)}
    requires {Invariant1.invariant' ( * self)}
    requires {Invariant2.invariant' ( * watches) ( * self)}
    ensures { Type.creusat_formula_formula_Formula_num_vars ( * self) = Type.creusat_formula_formula_Formula_num_vars ( ^ self) }
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { Invariant0.invariant' t ( ^ self) }
    ensures { Invariant1.invariant' ( ^ self) }
    ensures { Invariant2.invariant' ( ^ watches) ( ^ self) }
    
end
module CreuSat_Formula_Impl0_DeleteClause
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model8 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model8.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = borrowed (Type.creusat_formula_formula)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model5.model,
  function Model1.model = Model8.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model5.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model4.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model1.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model0.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model5.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model5.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model4.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model8.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant0 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model4.model, function Model1.model = Model5.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model9.model,
  function Model1.model = Model0.model, function Model2.model = Model1.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant2 with function Model0.model = Model7.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model6 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model6.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model2.model
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_Watches_Impl0_Unwatch_Interface as Unwatch0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Invariant2.invariant' = Invariant2.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg delete_clause [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (cref : usize) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) : ()
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self)))}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) > 1}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' t ( * self)}
    requires {Invariant1.invariant' ( * self)}
    requires {Invariant2.invariant' ( * watches) ( * self)}
    ensures { Type.creusat_formula_formula_Formula_num_vars ( * self) = Type.creusat_formula_formula_Formula_num_vars ( ^ self) }
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { Invariant0.invariant' t ( ^ self) }
    ensures { Invariant1.invariant' ( ^ self) }
    ensures { Invariant2.invariant' ( ^ watches) ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_formula_formula);
  var cref_2 : usize;
  var watches_3 : borrowed (Type.creusat_watches_watches);
  var t_4 : Type.creusat_trail_trail;
  var old_f_5 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _6 : borrowed (Type.creusat_formula_formula);
  var _7 : borrowed (Type.creusat_formula_formula);
  var _8 : ();
  var _9 : borrowed (Type.creusat_watches_watches);
  var _10 : Type.creusat_formula_formula;
  var _11 : Type.creusat_trail_trail;
  var _12 : usize;
  var _13 : Type.creusat_lit_lit;
  var _14 : Type.creusat_lit_lit;
  var _15 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _16 : Type.creusat_clause_clause;
  var _17 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _18 : usize;
  var _19 : ();
  var _20 : borrowed (Type.creusat_watches_watches);
  var _21 : Type.creusat_formula_formula;
  var _22 : Type.creusat_trail_trail;
  var _23 : usize;
  var _24 : Type.creusat_lit_lit;
  var _25 : Type.creusat_lit_lit;
  var _26 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _27 : Type.creusat_clause_clause;
  var _28 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _29 : usize;
  var _30 : borrowed (Type.creusat_clause_clause);
  var _31 : borrowed (Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global));
  var _32 : usize;
  var _33 : ();
  var _34 : ();
  var _35 : ();
  {
    self_1 <- self;
    cref_2 <- cref;
    watches_3 <- watches;
    t_4 <- t;
    goto BB0
  }
  BB0 {
    _7 <- self_1;
    _6 <- _7;
    old_f_5 <- Record0.record _6;
    goto BB1
  }
  BB1 {
    _9 <- borrow_mut ( * watches_3);
    watches_3 <- { watches_3 with current = ( ^ _9) };
    _10 <-  * self_1;
    _11 <- t_4;
    _12 <- cref_2;
    _17 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    _18 <- cref_2;
    _16 <- Index0.index _17 _18;
    goto BB2
  }
  BB2 {
    _15 <- Type.creusat_clause_clause_Clause_rest _16;
    _14 <- Index1.index _15 (0 : usize);
    goto BB3
  }
  BB3 {
    _13 <- _14;
    _8 <- Unwatch0.unwatch _9 _10 _11 _12 _13;
    goto BB4
  }
  BB4 {
    _20 <- borrow_mut ( * watches_3);
    watches_3 <- { watches_3 with current = ( ^ _20) };
    _21 <-  * self_1;
    _22 <- t_4;
    _23 <- cref_2;
    _28 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    _29 <- cref_2;
    _27 <- Index0.index _28 _29;
    goto BB5
  }
  BB5 {
    _26 <- Type.creusat_clause_clause_Clause_rest _27;
    _25 <- Index1.index _26 (1 : usize);
    goto BB6
  }
  BB6 {
    _24 <- _25;
    _19 <- Unwatch0.unwatch _20 _21 _22 _23 _24;
    goto BB7
  }
  BB7 {
    assume { Resolve0.resolve watches_3 };
    _31 <- borrow_mut (Type.creusat_formula_formula_Formula_clauses ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Formula_Formula a b =  * self_1 in Type.CreuSat_Formula_Formula ( ^ _31) b) };
    assume { Resolve1.resolve self_1 };
    _32 <- cref_2;
    _30 <- IndexMut0.index_mut _31 _32;
    goto BB8
  }
  BB8 {
    _30 <- { _30 with current = (let Type.CreuSat_Clause_Clause a b =  * _30 in Type.CreuSat_Clause_Clause true b) };
    assume { Resolve2.resolve _30 };
    assert { forall i : (int) . 0 <= i && i < Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self_1))) (UInt64.to_int cref_2))) -> Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self_1))) (UInt64.to_int cref_2))) i = Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * Model2.model old_f_5))) (UInt64.to_int cref_2))) i };
    _33 <- ();
    assert { Equisat0.equisat ( * Model2.model old_f_5) ( * self_1) };
    _34 <- ();
    assert {  ^ self_1 =  ^ Model2.model old_f_5 };
    _35 <- ();
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Formula_Impl0_DeleteClauses_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  val delete_clauses [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) : ()
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' t ( * self)}
    requires {Invariant0.invariant' t ( * self)}
    requires {Invariant1.invariant' ( * watches) ( * self)}
    requires {Invariant2.invariant' ( * self)}
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { Type.creusat_formula_formula_Formula_num_vars ( * self) = Type.creusat_formula_formula_Formula_num_vars ( ^ self) }
    ensures { Invariant0.invariant' t ( ^ self) }
    ensures { Invariant1.invariant' ( ^ watches) ( ^ self) }
    ensures { Invariant2.invariant' ( ^ self) }
    
end
module CreuSat_Formula_Impl0_DeleteClauses
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model11 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model9 with function Model0.model = Model11.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model9.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model9.model
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model9.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model9.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model9.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model9.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model6 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model8.model,
  function Model1.model = Model9.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model8.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model8.model,
  function Model1.model = Model9.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model8.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model5 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model8.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model9.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model5.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model7.model,
  function Model1.model = Model8.model, function Model2.model = Model9.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = borrowed (Type.creusat_formula_formula)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = borrowed (Type.creusat_watches_watches)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant1 with function Model0.model = Model4.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model3.model,
  function Model1.model = Model6.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model3.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model3.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model2.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model3.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model2.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model6.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant0 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model2.model, function Model1.model = Model3.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_formula_formula
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Model_Impl0_Model as Model12 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model9.model
  clone CreuSat_Clause_Impl1_Len_Interface as Len1 with function Model0.model = Model12.model
  clone CreuSat_Logic_LogicClause_Impl2_Sat as Sat1 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model8.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model8.model
  clone CreuSat_Formula_Impl0_IsClauseSat_Interface as IsClauseSat0 with function Model0.model = Model8.model,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Invariant1.invariant' = Invariant2.invariant',
  predicate Sat0.sat = Sat1.sat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model1.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record1 with type t = borrowed (Type.creusat_watches_watches),
  function Model0.model = Model0.model
  clone CreuSat_Formula_Impl0_DeleteClause_Interface as DeleteClause0 with function Model0.model = Model8.model,
  function Model1.model = Model9.model, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg delete_clauses [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) : ()
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' t ( * self)}
    requires {Invariant0.invariant' t ( * self)}
    requires {Invariant1.invariant' ( * watches) ( * self)}
    requires {Invariant2.invariant' ( * self)}
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { Type.creusat_formula_formula_Formula_num_vars ( * self) = Type.creusat_formula_formula_Formula_num_vars ( ^ self) }
    ensures { Invariant0.invariant' t ( ^ self) }
    ensures { Invariant1.invariant' ( ^ watches) ( ^ self) }
    ensures { Invariant2.invariant' ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_formula_formula);
  var watches_2 : borrowed (Type.creusat_watches_watches);
  var t_3 : Type.creusat_trail_trail;
  var old_f_4 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _5 : borrowed (Type.creusat_formula_formula);
  var _6 : borrowed (Type.creusat_formula_formula);
  var old_w_7 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_watches_watches));
  var _8 : borrowed (Type.creusat_watches_watches);
  var _9 : borrowed (Type.creusat_watches_watches);
  var i_10 : usize;
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _16 : ();
  var _17 : bool;
  var _18 : bool;
  var _19 : Type.creusat_clause_clause;
  var _20 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _21 : usize;
  var _22 : ();
  var _23 : bool;
  var _24 : bool;
  var _25 : usize;
  var _26 : Type.creusat_clause_clause;
  var _27 : Type.creusat_clause_clause;
  var _28 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _29 : usize;
  var _30 : bool;
  var _31 : Type.creusat_formula_formula;
  var _32 : usize;
  var _33 : Type.creusat_assignments_assignments;
  var _34 : Type.creusat_assignments_assignments;
  var _35 : ();
  var _36 : borrowed (Type.creusat_formula_formula);
  var _37 : usize;
  var _38 : borrowed (Type.creusat_watches_watches);
  var _39 : Type.creusat_trail_trail;
  var _40 : ();
  var _41 : ();
  var _42 : ();
  {
    self_1 <- self;
    watches_2 <- watches;
    t_3 <- t;
    goto BB0
  }
  BB0 {
    _6 <- self_1;
    _5 <- _6;
    old_f_4 <- Record0.record _5;
    goto BB1
  }
  BB1 {
    _9 <- watches_2;
    _8 <- _9;
    old_w_7 <- Record1.record _8;
    goto BB2
  }
  BB2 {
    i_10 <- (0 : usize);
    goto BB3
  }
  BB3 {
    invariant w_inv { Invariant1.invariant' ( * watches_2) ( * self_1) };
    invariant t_inv { Invariant0.invariant' t_3 ( * self_1) };
    invariant f_inv { Invariant2.invariant' ( * self_1) };
    invariant proph_w {  ^ watches_2 =  ^ Model0.model old_w_7 };
    invariant proph_f {  ^ self_1 =  ^ Model1.model old_f_4 };
    invariant num_vars_unch { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self_1)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * Model1.model old_f_4)) };
    invariant equi { Equisat0.equisat ( * self_1) ( * Model1.model old_f_4) };
    _13 <- i_10;
    _15 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    _14 <- Len0.len _15;
    goto BB4
  }
  BB4 {
    _12 <- _13 < _14;
    switch (_12)
      | False -> goto BB20
      | _ -> goto BB5
      end
  }
  BB5 {
    _20 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    _21 <- i_10;
    _19 <- Index0.index _20 _21;
    goto BB6
  }
  BB6 {
    _18 <- Type.creusat_clause_clause_Clause_deleted _19;
    _17 <- not _18;
    switch (_17)
      | False -> goto BB18
      | _ -> goto BB7
      end
  }
  BB7 {
    assert { Invariant3.invariant' (Type.creusat_trail_trail_Trail_assignments t_3) ( * self_1) };
    _22 <- ();
    _28 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    _29 <- i_10;
    _27 <- Index0.index _28 _29;
    goto BB11
  }
  BB8 {
    _23 <- false;
    goto BB10
  }
  BB9 {
    _31 <-  * self_1;
    _32 <- i_10;
    _34 <- Type.creusat_trail_trail_Trail_assignments t_3;
    _33 <- _34;
    _30 <- IsClauseSat0.is_clause_sat _31 _32 _33;
    goto BB13
  }
  BB10 {
    switch (_23)
      | False -> goto BB16
      | _ -> goto BB14
      end
  }
  BB11 {
    _26 <- _27;
    _25 <- Len1.len _26;
    goto BB12
  }
  BB12 {
    _24 <- _25 > (1 : usize);
    switch (_24)
      | False -> goto BB8
      | _ -> goto BB9
      end
  }
  BB13 {
    _23 <- _30;
    goto BB10
  }
  BB14 {
    _36 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _36) };
    _37 <- i_10;
    _38 <- borrow_mut ( * watches_2);
    watches_2 <- { watches_2 with current = ( ^ _38) };
    _39 <- t_3;
    _35 <- DeleteClause0.delete_clause _36 _37 _38 _39;
    goto BB15
  }
  BB15 {
    _16 <- ();
    goto BB17
  }
  BB16 {
    _16 <- ();
    goto BB17
  }
  BB17 {
    goto BB19
  }
  BB18 {
    _16 <- ();
    goto BB19
  }
  BB19 {
    i_10 <- i_10 + (1 : usize);
    _11 <- ();
    goto BB3
  }
  BB20 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve watches_2 };
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Formula_Impl0_SimplifyFormula_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  val simplify_formula [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) : ()
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' t ( * self)}
    requires {Invariant1.invariant' ( * watches) ( * self)}
    requires {Invariant2.invariant' ( * self)}
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { Type.creusat_formula_formula_Formula_num_vars ( * self) = Type.creusat_formula_formula_Formula_num_vars ( ^ self) }
    ensures { Invariant0.invariant' t ( ^ self) }
    ensures { Invariant1.invariant' ( ^ watches) ( ^ self) }
    ensures { Invariant2.invariant' ( ^ self) }
    
end
module CreuSat_Formula_Impl0_SimplifyFormula
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model7 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model7.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model7.model
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model7.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model4 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model6.model,
  function Model1.model = Model7.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model6.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model6.model,
  function Model1.model = Model7.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model3 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model6.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model7.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model3.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model5.model,
  function Model1.model = Model6.model, function Model2.model = Model7.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model1.model,
  function Model1.model = Model4.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model1.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model1.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model0.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model1.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model0.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model4.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant0 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model0.model, function Model1.model = Model1.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_formula_formula
  clone CreuSat_Formula_Impl0_DeleteClauses_Interface as DeleteClauses0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg simplify_formula [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) : ()
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' t ( * self)}
    requires {Invariant1.invariant' ( * watches) ( * self)}
    requires {Invariant2.invariant' ( * self)}
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { Type.creusat_formula_formula_Formula_num_vars ( * self) = Type.creusat_formula_formula_Formula_num_vars ( ^ self) }
    ensures { Invariant0.invariant' t ( ^ self) }
    ensures { Invariant1.invariant' ( ^ watches) ( ^ self) }
    ensures { Invariant2.invariant' ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_formula_formula);
  var watches_2 : borrowed (Type.creusat_watches_watches);
  var t_3 : Type.creusat_trail_trail;
  var _4 : ();
  var _5 : borrowed (Type.creusat_formula_formula);
  var _6 : borrowed (Type.creusat_watches_watches);
  var _7 : Type.creusat_trail_trail;
  {
    self_1 <- self;
    watches_2 <- watches;
    t_3 <- t;
    goto BB0
  }
  BB0 {
    _5 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _5) };
    _6 <- borrow_mut ( * watches_2);
    watches_2 <- { watches_2 with current = ( ^ _6) };
    _7 <- t_3;
    _4 <- DeleteClauses0.delete_clauses _5 _6 _7;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve watches_2 };
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Formula_Impl0_ReduceDb_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  val reduceDB [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) (s : borrowed (Type.creusat_solver_solver)) : ()
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' t ( * self)}
    requires {Invariant1.invariant' ( * self)}
    requires {Invariant0.invariant' t ( * self)}
    requires {Invariant2.invariant' ( * watches) ( * self)}
    requires {Invariant1.invariant' ( * self)}
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { Type.creusat_formula_formula_Formula_num_vars ( * self) = Type.creusat_formula_formula_Formula_num_vars ( ^ self) }
    ensures { Invariant0.invariant' t ( ^ self) }
    ensures { Invariant2.invariant' ( ^ watches) ( ^ self) }
    ensures { Invariant1.invariant' ( ^ self) }
    
end
module CreuSat_Formula_Impl0_ReduceDb
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model11 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model8 with function Model0.model = Model11.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model8.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model8.model
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model8.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model8.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model6 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model7.model,
  function Model1.model = Model8.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model7.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model7.model,
  function Model1.model = Model8.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model9.model,
  function Model1.model = Model7.model, function Model2.model = Model8.model
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model4 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model7.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model8.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model4.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = borrowed (Type.creusat_formula_formula)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = borrowed (Type.creusat_watches_watches)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant2 with function Model0.model = Model5.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model3.model,
  function Model1.model = Model6.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model3.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model3.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model2.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model3.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model2.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model6.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant0 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model2.model, function Model1.model = Model3.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_solver_solver
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_formula_formula
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy3
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_lit_lit
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model11.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone CreusotContracts_Logic_Model_Impl0_Model as Model12 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model8.model
  clone CreuSat_Clause_Impl1_Len_Interface as Len1 with function Model0.model = Model12.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model13 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model6.model
  clone CreuSat_Lit_Impl1_LitSat_Interface as LitSat0 with function Model0.model = Model13.model,
  predicate Invariant0.invariant' = Invariant6.invariant', predicate Sat0.sat = Sat0.sat
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model7.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model7.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model1.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record1 with type t = borrowed (Type.creusat_watches_watches),
  function Model0.model = Model0.model
  clone CreuSat_Formula_Impl0_DeleteClause_Interface as DeleteClause0 with function Model0.model = Model7.model,
  function Model1.model = Model8.model, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg reduceDB [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) (s : borrowed (Type.creusat_solver_solver)) : ()
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' t ( * self)}
    requires {Invariant1.invariant' ( * self)}
    requires {Invariant0.invariant' t ( * self)}
    requires {Invariant2.invariant' ( * watches) ( * self)}
    requires {Invariant1.invariant' ( * self)}
    ensures { Equisat0.equisat ( * self) ( ^ self) }
    ensures { Type.creusat_formula_formula_Formula_num_vars ( * self) = Type.creusat_formula_formula_Formula_num_vars ( ^ self) }
    ensures { Invariant0.invariant' t ( ^ self) }
    ensures { Invariant2.invariant' ( ^ watches) ( ^ self) }
    ensures { Invariant1.invariant' ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_formula_formula);
  var watches_2 : borrowed (Type.creusat_watches_watches);
  var t_3 : Type.creusat_trail_trail;
  var s_4 : borrowed (Type.creusat_solver_solver);
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : bool;
  var _11 : usize;
  var _12 : usize;
  var _13 : ();
  var _14 : ();
  var _15 : ();
  var _16 : ();
  var i_17 : usize;
  var old_f_18 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _19 : borrowed (Type.creusat_formula_formula);
  var _20 : borrowed (Type.creusat_formula_formula);
  var old_w_21 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_watches_watches));
  var _22 : borrowed (Type.creusat_watches_watches);
  var _23 : borrowed (Type.creusat_watches_watches);
  var _24 : bool;
  var _25 : usize;
  var _26 : usize;
  var _27 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _28 : ();
  var _29 : bool;
  var _30 : bool;
  var _31 : Type.creusat_clause_clause;
  var _32 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _33 : usize;
  var _34 : bool;
  var _35 : usize;
  var _36 : Type.creusat_clause_clause;
  var _37 : Type.creusat_clause_clause;
  var _38 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _39 : usize;
  var cnt_40 : int32;
  var j_41 : usize;
  var _42 : ();
  var _43 : bool;
  var _44 : bool;
  var _45 : usize;
  var _46 : usize;
  var _47 : Type.creusat_clause_clause;
  var _48 : Type.creusat_clause_clause;
  var _49 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _50 : usize;
  var _51 : bool;
  var _52 : int32;
  var _53 : ();
  var _54 : bool;
  var _55 : Type.creusat_lit_lit;
  var _56 : Type.creusat_lit_lit;
  var _57 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _58 : Type.creusat_clause_clause;
  var _59 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _60 : usize;
  var _61 : usize;
  var _62 : Type.creusat_assignments_assignments;
  var _63 : Type.creusat_assignments_assignments;
  var _64 : ();
  var _65 : ();
  var _66 : ();
  var _67 : bool;
  var _68 : int32;
  var _69 : ();
  var _70 : bool;
  var _71 : usize;
  var _72 : ();
  var _73 : borrowed (Type.creusat_formula_formula);
  var _74 : usize;
  var _75 : borrowed (Type.creusat_watches_watches);
  var _76 : Type.creusat_trail_trail;
  var _77 : ();
  var _78 : ();
  var _79 : ();
  {
    self_1 <- self;
    watches_2 <- watches;
    t_3 <- t;
    s_4 <- s;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _8 <- Type.creusat_solver_solver_Solver_num_lemmas ( * s_4);
    _9 <- Type.creusat_solver_solver_Solver_max_lemmas ( * s_4);
    _7 <- _8 > _9;
    switch (_7)
      | False -> goto BB5
      | _ -> goto BB2
      end
  }
  BB2 {
    _11 <- (18446744073709551615 : usize) - (300 : usize);
    _12 <- Type.creusat_solver_solver_Solver_max_lemmas ( * s_4);
    _10 <- _11 > _12;
    switch (_10)
      | False -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    s_4 <- { s_4 with current = (let Type.CreuSat_Solver_Solver a b c d e f g h =  * s_4 in Type.CreuSat_Solver_Solver a (Type.creusat_solver_solver_Solver_max_lemmas ( * s_4) + (300 : usize)) c d e f g h) };
    _6 <- ();
    goto BB1
  }
  BB4 {
    _5 <- ();
    goto BB6
  }
  BB5 {
    _5 <- ();
    goto BB6
  }
  BB6 {
    i_17 <- Type.creusat_solver_solver_Solver_initial_len ( * s_4);
    _20 <- self_1;
    _19 <- _20;
    old_f_18 <- Record0.record _19;
    goto BB7
  }
  BB7 {
    _23 <- watches_2;
    _22 <- _23;
    old_w_21 <- Record1.record _22;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    invariant w_inv { Invariant2.invariant' ( * watches_2) ( * self_1) };
    invariant t_inv { Invariant0.invariant' t_3 ( * self_1) };
    invariant f_inv { Invariant1.invariant' ( * self_1) };
    invariant proph_w {  ^ watches_2 =  ^ Model0.model old_w_21 };
    invariant proph_f {  ^ self_1 =  ^ Model1.model old_f_18 };
    invariant num_vars_unch { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self_1)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * Model1.model old_f_18)) };
    invariant equi { Equisat0.equisat ( * self_1) ( * Model1.model old_f_18) };
    _25 <- i_17;
    _27 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    _26 <- Len0.len _27;
    goto BB10
  }
  BB10 {
    _24 <- _25 < _26;
    switch (_24)
      | False -> goto BB42
      | _ -> goto BB11
      end
  }
  BB11 {
    _32 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    _33 <- i_17;
    _31 <- Index0.index _32 _33;
    goto BB12
  }
  BB12 {
    _30 <- Type.creusat_clause_clause_Clause_deleted _31;
    _29 <- not _30;
    switch (_29)
      | False -> goto BB40
      | _ -> goto BB13
      end
  }
  BB13 {
    _38 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    _39 <- i_17;
    _37 <- Index0.index _38 _39;
    goto BB14
  }
  BB14 {
    _36 <- _37;
    _35 <- Len1.len _36;
    goto BB15
  }
  BB15 {
    _34 <- _35 > (6 : usize);
    switch (_34)
      | False -> goto BB38
      | _ -> goto BB16
      end
  }
  BB16 {
    cnt_40 <- (0 : int32);
    j_41 <- (0 : usize);
    goto BB17
  }
  BB17 {
    _45 <- j_41;
    _49 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    _50 <- i_17;
    _48 <- Index0.index _49 _50;
    goto BB21
  }
  BB18 {
    _43 <- false;
    goto BB20
  }
  BB19 {
    _52 <- cnt_40;
    _51 <- _52 < (6 : int32);
    _43 <- _51;
    goto BB20
  }
  BB20 {
    switch (_43)
      | False -> goto BB30
      | _ -> goto BB23
      end
  }
  BB21 {
    _47 <- _48;
    _46 <- Len1.len _47;
    goto BB22
  }
  BB22 {
    _44 <- _45 < _46;
    switch (_44)
      | False -> goto BB18
      | _ -> goto BB19
      end
  }
  BB23 {
    _59 <- Type.creusat_formula_formula_Formula_clauses ( * self_1);
    _60 <- i_17;
    _58 <- Index0.index _59 _60;
    goto BB24
  }
  BB24 {
    _57 <- Type.creusat_clause_clause_Clause_rest _58;
    _61 <- j_41;
    _56 <- Index1.index _57 _61;
    goto BB25
  }
  BB25 {
    _55 <- _56;
    _63 <- Type.creusat_trail_trail_Trail_assignments t_3;
    _62 <- _63;
    _54 <- LitSat0.lit_sat _55 _62;
    goto BB26
  }
  BB26 {
    switch (_54)
      | False -> goto BB28
      | _ -> goto BB27
      end
  }
  BB27 {
    cnt_40 <- cnt_40 + (1 : int32);
    _53 <- ();
    goto BB29
  }
  BB28 {
    _53 <- ();
    goto BB29
  }
  BB29 {
    j_41 <- j_41 + (1 : usize);
    _6 <- ();
    goto BB17
  }
  BB30 {
    _42 <- ();
    _68 <- cnt_40;
    _67 <- _68 >= (6 : int32);
    switch (_67)
      | False -> goto BB32
      | _ -> goto BB31
      end
  }
  BB31 {
    _71 <- Type.creusat_solver_solver_Solver_num_lemmas ( * s_4);
    _70 <- _71 > (0 : usize);
    switch (_70)
      | False -> goto BB34
      | _ -> goto BB33
      end
  }
  BB32 {
    _28 <- ();
    goto BB37
  }
  BB33 {
    s_4 <- { s_4 with current = (let Type.CreuSat_Solver_Solver a b c d e f g h =  * s_4 in Type.CreuSat_Solver_Solver (Type.creusat_solver_solver_Solver_num_lemmas ( * s_4) - (1 : usize)) b c d e f g h) };
    _69 <- ();
    goto BB35
  }
  BB34 {
    _69 <- ();
    goto BB35
  }
  BB35 {
    _73 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _73) };
    _74 <- i_17;
    _75 <- borrow_mut ( * watches_2);
    watches_2 <- { watches_2 with current = ( ^ _75) };
    _76 <- t_3;
    _72 <- DeleteClause0.delete_clause _73 _74 _75 _76;
    goto BB36
  }
  BB36 {
    _28 <- ();
    goto BB37
  }
  BB37 {
    goto BB39
  }
  BB38 {
    _28 <- ();
    goto BB39
  }
  BB39 {
    goto BB41
  }
  BB40 {
    _28 <- ();
    goto BB41
  }
  BB41 {
    i_17 <- i_17 + (1 : usize);
    _6 <- ();
    goto BB9
  }
  BB42 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve watches_2 };
    assume { Resolve2.resolve s_4 };
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Lit_Impl4_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.creusat_lit_lit) : Type.creusat_lit_lit
end
module CreuSat_Lit_Impl4_Clone
  use prelude.Prelude
  use Type
  let rec cfg clone' [@cfg:stackify] (self : Type.creusat_lit_lit) : Type.creusat_lit_lit = 
  var _0 : Type.creusat_lit_lit;
  var self_1 : Type.creusat_lit_lit;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    return _0
  }
  
end
module CreuSat_Lit_Impl0_Model_Interface
  use Type
  function model (self : Type.creusat_lit_lit) : Type.creusat_lit_lit
end
module CreuSat_Lit_Impl0_Model
  use Type
  function model (self : Type.creusat_lit_lit) : Type.creusat_lit_lit = 
    self
end
module CreuSat_Lit_Impl1_LitSet_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreuSat_Logic_LogicLit_Impl1_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_set [@cfg:stackify] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = not (Unset0.unset self a) }
    
end
module CreuSat_Lit_Impl1_LitSet
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner as UnsetInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Unset as Unset0 with function Model0.model = Model1.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = uint8
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_Lit_Impl1_Index_Interface as Index0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  let rec cfg lit_set [@cfg:stackify] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = not (Unset0.unset self a) }
    
   = 
  var _0 : bool;
  var self_1 : Type.creusat_lit_lit;
  var a_2 : Type.creusat_assignments_assignments;
  var _3 : uint8;
  var _4 : uint8;
  var _5 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _6 : usize;
  var _7 : Type.creusat_lit_lit;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _5 <- Type.creusat_assignments_assignments_Assignments_0 a_2;
    _7 <- self_1;
    _6 <- Index0.index _7;
    goto BB1
  }
  BB1 {
    _4 <- Index1.index _5 _6;
    goto BB2
  }
  BB2 {
    _3 <- _4;
    _0 <- _3 < (2 : uint8);
    return _0
  }
  
end
module CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic_Interface
  use Type
  use mach.int.Int
  function to_watchidx_logic [@inline:trivial] (self : Type.creusat_lit_lit) : int
end
module CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  function to_watchidx_logic [@inline:trivial] (self : Type.creusat_lit_lit) : int = 
    IndexLogic0.index_logic self * 2 + (if IsPositiveLogic0.is_positive_logic self then 0 else 1)
end
module CreuSat_Lit_Impl1_ToWatchidx_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic_Interface as ToWatchidxLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  val to_watchidx [@cfg:stackify] (self : Type.creusat_lit_lit) : usize
    requires {IndexLogic0.index_logic self < div 18446744073709551615 2}
    ensures { UInt64.to_int result = IndexLogic0.index_logic self * 2 + (if IsPositiveLogic0.is_positive_logic self then
      0
    else
      1
    ) }
    ensures { UInt64.to_int result = ToWatchidxLogic0.to_watchidx_logic self }
    
end
module CreuSat_Lit_Impl1_ToWatchidx
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic as ToWatchidxLogic0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Lit_Impl1_IsPositive_Interface as IsPositive0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Lit_Impl1_Index_Interface as Index0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  let rec cfg to_watchidx [@cfg:stackify] (self : Type.creusat_lit_lit) : usize
    requires {IndexLogic0.index_logic self < div 18446744073709551615 2}
    ensures { UInt64.to_int result = IndexLogic0.index_logic self * 2 + (if IsPositiveLogic0.is_positive_logic self then
      0
    else
      1
    ) }
    ensures { UInt64.to_int result = ToWatchidxLogic0.to_watchidx_logic self }
    
   = 
  var _0 : usize;
  var self_1 : Type.creusat_lit_lit;
  var _2 : usize;
  var _3 : usize;
  var _4 : Type.creusat_lit_lit;
  var _5 : usize;
  var _6 : bool;
  var _7 : Type.creusat_lit_lit;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- self_1;
    _3 <- Index0.index _4;
    goto BB1
  }
  BB1 {
    _2 <- _3 * (2 : usize);
    _7 <- self_1;
    _6 <- IsPositive0.is_positive _7;
    goto BB2
  }
  BB2 {
    switch (_6)
      | False -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    _5 <- (0 : usize);
    goto BB5
  }
  BB4 {
    _5 <- (1 : usize);
    goto BB5
  }
  BB5 {
    _0 <- _2 + _5;
    return _0
  }
  
end
module CreuSat_Lit_Impl1_PhaseSaved_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val phase_saved [@cfg:stackify] (idx : usize) (assignments : Type.creusat_assignments_assignments) : Type.creusat_lit_lit
    requires {UInt64.to_int idx < Seq.length (Model0.model assignments)}
    ensures { IsPositiveLogic0.is_positive_logic result = (UInt8.to_int (Seq.get (Model0.model assignments) (UInt64.to_int idx)) = 1) }
    ensures { IndexLogic0.index_logic result = UInt64.to_int idx }
    
end
module CreuSat_Lit_Impl1_PhaseSaved
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = uint8
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg phase_saved [@cfg:stackify] (idx : usize) (assignments : Type.creusat_assignments_assignments) : Type.creusat_lit_lit
    requires {UInt64.to_int idx < Seq.length (Model0.model assignments)}
    ensures { IsPositiveLogic0.is_positive_logic result = (UInt8.to_int (Seq.get (Model0.model assignments) (UInt64.to_int idx)) = 1) }
    ensures { IndexLogic0.index_logic result = UInt64.to_int idx }
    
   = 
  var _0 : Type.creusat_lit_lit;
  var idx_1 : usize;
  var assignments_2 : Type.creusat_assignments_assignments;
  var _3 : usize;
  var _4 : bool;
  var _5 : bool;
  var _6 : uint8;
  var _7 : uint8;
  var _8 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _9 : usize;
  {
    idx_1 <- idx;
    assignments_2 <- assignments;
    goto BB0
  }
  BB0 {
    _3 <- idx_1;
    _8 <- Type.creusat_assignments_assignments_Assignments_0 assignments_2;
    _9 <- idx_1;
    _7 <- Index0.index _8 _9;
    goto BB1
  }
  BB1 {
    _6 <- _7;
    _5 <- _6 = (1 : uint8);
    switch (_5)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _4 <- true;
    goto BB4
  }
  BB3 {
    _4 <- false;
    goto BB4
  }
  BB4 {
    _0 <- Type.CreuSat_Lit_Lit _3 _4;
    return _0
  }
  
end
module CreuSat_Lit_Impl2_Eq_Interface
  use prelude.Prelude
  use Type
  val eq [@cfg:stackify] (self : Type.creusat_lit_lit) (other : Type.creusat_lit_lit) : bool
    ensures { result = (self = other) }
    
end
module CreuSat_Lit_Impl2_Eq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Lit_Impl1_IsPositive_Interface as IsPositive0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Lit_Impl1_Index_Interface as Index0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  let rec cfg eq [@cfg:stackify] (self : Type.creusat_lit_lit) (other : Type.creusat_lit_lit) : bool
    ensures { result = (self = other) }
    
   = 
  var _0 : bool;
  var self_1 : Type.creusat_lit_lit;
  var other_2 : Type.creusat_lit_lit;
  var _3 : bool;
  var _4 : usize;
  var _5 : Type.creusat_lit_lit;
  var _6 : usize;
  var _7 : Type.creusat_lit_lit;
  var _8 : bool;
  var _9 : bool;
  var _10 : Type.creusat_lit_lit;
  var _11 : bool;
  var _12 : Type.creusat_lit_lit;
  {
    self_1 <- self;
    other_2 <- other;
    goto BB0
  }
  BB0 {
    _5 <- self_1;
    _4 <- Index0.index _5;
    goto BB4
  }
  BB1 {
    _0 <- false;
    goto BB3
  }
  BB2 {
    _10 <- self_1;
    _9 <- IsPositive0.is_positive _10;
    goto BB6
  }
  BB3 {
    return _0
  }
  BB4 {
    _7 <- other_2;
    _6 <- Index0.index _7;
    goto BB5
  }
  BB5 {
    _3 <- _4 = _6;
    switch (_3)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB6 {
    _12 <- other_2;
    _11 <- IsPositive0.is_positive _12;
    goto BB7
  }
  BB7 {
    _8 <- Prelude.eqb _9 _11;
    _0 <- _8;
    goto BB3
  }
  
end
module CreuSat_Lit_Impl3_Not_Interface
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  val not' [@cfg:stackify] (self : Type.creusat_lit_lit) : Type.creusat_lit_lit
    ensures { IsPositiveLogic0.is_positive_logic result = not (IsPositiveLogic0.is_positive_logic self) }
    ensures { IndexLogic0.index_logic result = IndexLogic0.index_logic self }
    
end
module CreuSat_Lit_Impl3_Not
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreuSat_Lit_Impl1_Index_Interface as Index0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Lit_Impl1_IsPositive_Interface as IsPositive0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  let rec cfg not' [@cfg:stackify] (self : Type.creusat_lit_lit) : Type.creusat_lit_lit
    ensures { IsPositiveLogic0.is_positive_logic result = not (IsPositiveLogic0.is_positive_logic self) }
    ensures { IndexLogic0.index_logic result = IndexLogic0.index_logic self }
    
   = 
  var _0 : Type.creusat_lit_lit;
  var self_1 : Type.creusat_lit_lit;
  var _2 : usize;
  var _3 : Type.creusat_lit_lit;
  var _4 : bool;
  var _5 : bool;
  var _6 : Type.creusat_lit_lit;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- self_1;
    _2 <- Index0.index _3;
    goto BB1
  }
  BB1 {
    _6 <- self_1;
    _5 <- IsPositive0.is_positive _6;
    goto BB2
  }
  BB2 {
    _4 <- not _5;
    _0 <- Type.CreuSat_Lit_Lit _2 _4;
    return _0
  }
  
end
module CreuSat_Logic_Logic_Pos_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function pos (_ : ()) : uint8
end
module CreuSat_Logic_Logic_Pos
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function pos (_ : ()) : uint8 = 
    (1 : uint8)
end
module CreuSat_Logic_Logic_Neg_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function neg (_ : ()) : uint8
end
module CreuSat_Logic_Logic_Neg
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function neg (_ : ()) : uint8 = 
    (0 : uint8)
end
module CreuSat_Logic_Logic_LemmaPermutClauseOk_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  function lemma_permut_clause_ok (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) : ()
    
end
module CreuSat_Logic_Logic_LemmaPermutClauseOk
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  function lemma_permut_clause_ok (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) : ()
    
   = 
    ()
  axiom lemma_permut_clause_ok_spec : forall c : Type.creusat_clause_clause, c2 : Type.creusat_clause_clause, a : Type.creusat_assignments_assignments . Permut.permut (Model0.model c2) (Model0.model c) 0 (Seq.length (Model0.model c)) -> Sat0.sat c a -> Sat0.sat c2 a
end
module CreuSat_Logic_Logic_LemmaPermutClauseOk_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model2 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Sat as Sat0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  let rec ghost function lemma_permut_clause_ok (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) : ()
    requires {Permut.permut (Model0.model c2) (Model0.model c) 0 (Seq.length (Model0.model c))}
    requires {Sat0.sat c a}
    ensures { Sat0.sat c2 a }
    
   = 
    ()
end
module CreuSat_Logic_Logic_LemmaPermutClauseOk2_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  function lemma_permut_clause_ok2 (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) : ()
    
end
module CreuSat_Logic_Logic_LemmaPermutClauseOk2
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  function lemma_permut_clause_ok2 (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) : ()
    
   = 
    ()
  axiom lemma_permut_clause_ok2_spec : forall c : Type.creusat_clause_clause, c2 : Type.creusat_clause_clause, a : Type.creusat_assignments_assignments . Permut.permut (Model0.model c2) (Model0.model c) 0 (Seq.length (Model0.model c)) -> Unsat0.unsat c a -> Unsat0.unsat c2 a
end
module CreuSat_Logic_Logic_LemmaPermutClauseOk2_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model2 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unsat as Unsat0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  let rec ghost function lemma_permut_clause_ok2 (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) : ()
    requires {Permut.permut (Model0.model c2) (Model0.model c) 0 (Seq.length (Model0.model c))}
    requires {Unsat0.unsat c a}
    ensures { Unsat0.unsat c2 a }
    
   = 
    ()
end
module CreuSat_Logic_LogicTrail_ClausePostWithRegardsTo_Interface
  use Type
  use mach.int.Int
  predicate clause_post_with_regards_to (c : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) (j : int)
    
end
module CreuSat_Logic_LogicTrail_ClausePostWithRegardsTo
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl1_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit_Interface as PostUnit0
  predicate clause_post_with_regards_to (c : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) (j : int)
    
   = 
    PostUnit0.post_unit c a && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) && IndexLogic0.index_logic (Seq.get (Model0.model c) i) = j && Sat0.sat (Seq.get (Model0.model c) i) a)
end
module CreuSat_Logic_Logic_LemmaSwapMaintainsPostWithRegardsTo_Interface
  use seq.Permut
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner_Interface as ClausePostWithRegardsToInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsTo_Interface as ClausePostWithRegardsTo0
  function lemma_swap_maintains_post_with_regards_to (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : int) (b : int) (ass : Type.creusat_assignments_assignments) (j : int) : ()
    
end
module CreuSat_Logic_Logic_LemmaSwapMaintainsPostWithRegardsTo
  use seq.Permut
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner_Interface as ClausePostWithRegardsToInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsTo_Interface as ClausePostWithRegardsTo0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit_Interface as PostUnit0
  clone CreuSat_Logic_Logic_LemmaSwapMaintainsPostUnit_Interface as LemmaSwapMaintainsPostUnit0 with predicate PostUnit0.post_unit = PostUnit0.post_unit,
  function Model0.model = Model0.model, axiom .
  function lemma_swap_maintains_post_with_regards_to (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : int) (b : int) (ass : Type.creusat_assignments_assignments) (j : int) : ()
    
   = 
    let _ = LemmaSwapMaintainsPostUnit0.lemma_swap_maintains_post_unit c c2 a b ass in ()
  axiom lemma_swap_maintains_post_with_regards_to_spec : forall c : Type.creusat_clause_clause, c2 : Type.creusat_clause_clause, a : int, b : int, ass : Type.creusat_assignments_assignments, j : int . ClausePostWithRegardsTo0.clause_post_with_regards_to c ass j -> Permut.exchange (Model0.model c2) (Model0.model c) a b -> Seq.length (Model0.model c2) = Seq.length (Model0.model c) -> Seq.length (Model0.model c) >= 2 -> ClausePostWithRegardsTo0.clause_post_with_regards_to c2 ass j && ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner c2 (Model1.model ass) j
end
module CreuSat_Logic_Logic_LemmaSwapMaintainsPostWithRegardsTo_Impl
  use seq.Permut
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_Logic_LemmaSwapClauseNoDups as LemmaSwapClauseNoDups0 with function Model0.model = Model0.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  axiom .
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit as PostUnit0 with function Model0.model = Model1.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner
  clone CreuSat_Logic_Logic_LemmaSwapMaintainsPostUnit as LemmaSwapMaintainsPostUnit0 with predicate PostUnit0.post_unit = PostUnit0.post_unit,
  function Model0.model = Model0.model,
  function LemmaSwapClauseNoDups0.lemma_swap_clause_no_dups = LemmaSwapClauseNoDups0.lemma_swap_clause_no_dups,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  axiom .
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model0.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsTo as ClausePostWithRegardsTo0 with predicate PostUnit0.post_unit = PostUnit0.post_unit,
  function Model0.model = Model0.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Sat0.sat = Sat0.sat
  let rec ghost function lemma_swap_maintains_post_with_regards_to (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : int) (b : int) (ass : Type.creusat_assignments_assignments) (j : int) : ()
    requires {ClausePostWithRegardsTo0.clause_post_with_regards_to c ass j}
    requires {Permut.exchange (Model0.model c2) (Model0.model c) a b}
    requires {Seq.length (Model0.model c2) = Seq.length (Model0.model c)}
    requires {Seq.length (Model0.model c) >= 2}
    ensures { ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner c2 (Model1.model ass) j }
    ensures { ClausePostWithRegardsTo0.clause_post_with_regards_to c2 ass j }
    
   = 
    let _ = LemmaSwapMaintainsPostUnit0.lemma_swap_maintains_post_unit c c2 a b ass in ()
end
module CreuSat_Logic_Logic_LemmaPermutFormulaOk_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicFormula_Impl1_Sat_Interface as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function lemma_permut_formula_ok (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) : ()
    
end
module CreuSat_Logic_Logic_LemmaPermutFormulaOk
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicFormula_Impl1_Sat_Interface as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function lemma_permut_formula_ok (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) : ()
    
   = 
    ()
  axiom lemma_permut_formula_ok_spec : forall f : Type.creusat_formula_formula, f2 : Type.creusat_formula_formula, a : Type.creusat_assignments_assignments . UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f2) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) -> Permut.permut (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) 0 (Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))) -> Sat0.sat f a -> Sat0.sat f2 a
end
module CreuSat_Logic_Logic_LemmaPermutFormulaOk_Impl
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model2 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model1.model = Model2.model,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner, axiom .
  let rec ghost function lemma_permut_formula_ok (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) : ()
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f2) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)}
    requires {Permut.permut (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) 0 (Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)))}
    requires {Sat0.sat f a}
    ensures { Sat0.sat f2 a }
    
   = 
    ()
end
module CreuSat_Logic_LogicFormula_Impl1_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.creusat_formula_formula) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicFormula_Impl1_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner_Interface as UnsatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  predicate unsat_inner (self : Type.creusat_formula_formula) (a : Seq.seq uint8) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) && UnsatInner0.unsat_inner (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) i) a
end
module CreuSat_Logic_LogicFormula_Impl1_Unsat_Interface
  use Type
  predicate unsat (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicFormula_Impl1_Unsat
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate unsat (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) = 
    UnsatInner0.unsat_inner self (Model0.model a)
end
module CreuSat_Logic_Logic_LemmaPermutFormulaOk2_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function lemma_permut_formula_ok2 (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) : ()
    
end
module CreuSat_Logic_Logic_LemmaPermutFormulaOk2
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function lemma_permut_formula_ok2 (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) : ()
    
   = 
    ()
  axiom lemma_permut_formula_ok2_spec : forall f : Type.creusat_formula_formula, f2 : Type.creusat_formula_formula, a : Type.creusat_assignments_assignments . UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f2) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) -> Permut.permut (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) 0 (Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))) -> Unsat0.unsat f a -> Unsat0.unsat f2 a
end
module CreuSat_Logic_Logic_LemmaPermutFormulaOk2_Impl
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  let rec ghost function lemma_permut_formula_ok2 (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) : ()
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f2) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)}
    requires {Permut.permut (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) 0 (Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)))}
    requires {Unsat0.unsat f a}
    ensures { Unsat0.unsat f2 a }
    
   = 
    ()
end
module CreuSat_Logic_Logic_LemmaPermutFormulaOkNoAss_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function lemma_permut_formula_ok_no_ass (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) : ()
end
module CreuSat_Logic_Logic_LemmaPermutFormulaOkNoAss
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function lemma_permut_formula_ok_no_ass (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) : () = 
    ()
  axiom lemma_permut_formula_ok_no_ass_spec : forall f : Type.creusat_formula_formula, f2 : Type.creusat_formula_formula . UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f2) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) -> Permut.permut (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) 0 (Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))) -> EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f -> EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f2
end
module CreuSat_Logic_Logic_LemmaPermutFormulaOkNoAss_Impl
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  let rec ghost function lemma_permut_formula_ok_no_ass (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) : ()
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f2) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)}
    requires {Permut.permut (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) 0 (Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)))}
    requires {EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f}
    ensures { EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f2 }
    
   = 
    ()
end
module CreuSat_Logic_Logic_LemmaPermutClauseInFormulaMaintainsSat_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function lemma_permut_clause_in_formula_maintains_sat (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (cref : int) : ()
    
end
module CreuSat_Logic_Logic_LemmaPermutClauseInFormulaMaintainsSat
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function lemma_permut_clause_in_formula_maintains_sat (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (cref : int) : ()
    
   = 
    ()
  axiom lemma_permut_clause_in_formula_maintains_sat_spec : forall f : Type.creusat_formula_formula, f2 : Type.creusat_formula_formula, cref : int . UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f2) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) -> Permut.permut (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) cref)) (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) cref)) 0 (Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) cref))) -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) && i <> cref -> Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) i) = Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i)) -> Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) = Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) -> EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f -> EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f2
end
module CreuSat_Logic_Logic_LemmaPermutClauseInFormulaMaintainsSat_Impl
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  let rec ghost function lemma_permut_clause_in_formula_maintains_sat (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (cref : int) : ()
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f2) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)}
    requires {Permut.permut (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) cref)) (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) cref)) 0 (Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) cref)))}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) && i <> cref -> Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) i) = Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i)}
    requires {Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) = Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f}
    ensures { EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f2 }
    
   = 
    ()
end
module CreuSat_Logic_Logic_LemmaPermutClauseInFormulaMaintainsUnsat_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function lemma_permut_clause_in_formula_maintains_unsat (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (cref : int) : ()
    
end
module CreuSat_Logic_Logic_LemmaPermutClauseInFormulaMaintainsUnsat
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function lemma_permut_clause_in_formula_maintains_unsat (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (cref : int) : ()
    
   = 
    ()
  axiom lemma_permut_clause_in_formula_maintains_unsat_spec : forall f : Type.creusat_formula_formula, f2 : Type.creusat_formula_formula, cref : int . UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f2) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) -> Permut.permut (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) cref)) (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) cref)) 0 (Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) cref))) -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) && i <> cref -> Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) i) = Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i)) -> Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) = Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) -> not (EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f) -> not (EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f2)
end
module CreuSat_Logic_Logic_LemmaPermutClauseInFormulaMaintainsUnsat_Impl
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  let rec ghost function lemma_permut_clause_in_formula_maintains_unsat (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (cref : int) : ()
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f2) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)}
    requires {Permut.permut (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) cref)) (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) cref)) 0 (Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) cref)))}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) && i <> cref -> Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) i) = Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i)}
    requires {Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) = Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {not (EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f)}
    ensures { not (EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f2) }
    
   = 
    ()
end
module CreuSat_Logic_Logic_LemmaSamePol_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicClause_Impl2_SameIdxSamePolarityExcept_Interface as SameIdxSamePolarityExcept0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner_Interface as UnsatInner0
  function lemma_same_pol (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : Seq.seq uint8) (idx : int) : ()
    
end
module CreuSat_Logic_Logic_LemmaSamePol
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicClause_Impl2_SameIdxSamePolarityExcept_Interface as SameIdxSamePolarityExcept0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner_Interface as UnsatInner0
  function lemma_same_pol (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : Seq.seq uint8) (idx : int) : ()
    
   = 
    ()
  axiom lemma_same_pol_spec : forall c : Type.creusat_clause_clause, c2 : Type.creusat_clause_clause, a : Seq.seq uint8, idx : int . UnsatInner0.unsat_inner c2 a -> (exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) && IndexLogic0.index_logic (Seq.get (Model0.model c) i) = idx && SatInner0.sat_inner (Seq.get (Model0.model c) i) a) -> Invariant0.invariant' c2 (Seq.length a) -> Invariant0.invariant' c (Seq.length a) -> PostUnitInner0.post_unit_inner c a -> SameIdxSamePolarityExcept0.same_idx_same_polarity_except c2 c idx
end
module CreuSat_Logic_Logic_LemmaSamePol_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl2_SameIdxSamePolarityExcept as SameIdxSamePolarityExcept0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  let rec ghost function lemma_same_pol (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (a : Seq.seq uint8) (idx : int) : ()
    requires {UnsatInner0.unsat_inner c2 a}
    requires {exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) && IndexLogic0.index_logic (Seq.get (Model0.model c) i) = idx && SatInner0.sat_inner (Seq.get (Model0.model c) i) a}
    requires {Invariant0.invariant' c2 (Seq.length a)}
    requires {Invariant0.invariant' c (Seq.length a)}
    requires {PostUnitInner0.post_unit_inner c a}
    ensures { SameIdxSamePolarityExcept0.same_idx_same_polarity_except c2 c idx }
    
   = 
    ()
end
module CreuSat_Logic_Logic_LemmaResolvedPostAndUnsatIsUnsat_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf_Interface as ResolventOf0
  function lemma_resolved_post_and_unsat_is_unsat (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) (a : Seq.seq uint8) (c_idx : int) (c2_idx : int) : ()
    
end
module CreuSat_Logic_Logic_LemmaResolvedPostAndUnsatIsUnsat
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf_Interface as ResolventOf0
  function lemma_resolved_post_and_unsat_is_unsat (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) (a : Seq.seq uint8) (c_idx : int) (c2_idx : int) : ()
    
   = 
    ()
  axiom lemma_resolved_post_and_unsat_is_unsat_spec : forall c : Type.creusat_clause_clause, c2 : Type.creusat_clause_clause, c3 : Type.creusat_clause_clause, a : Seq.seq uint8, c_idx : int, c2_idx : int . ResolventOf0.resolvent_of c3 c c2 c2_idx c_idx -> 0 <= c2_idx && c2_idx < Seq.length (Model0.model c2) -> 0 <= c_idx && c_idx < Seq.length (Model0.model c) -> UnsatInner0.unsat_inner c2 a -> SatInner0.sat_inner (Seq.get (Model0.model c) c_idx) a -> Invariant0.invariant' c2 (Seq.length a) -> Invariant0.invariant' c (Seq.length a) -> PostUnitInner0.post_unit_inner c a -> UnsatInner0.unsat_inner c3 a
end
module CreuSat_Logic_Logic_LemmaResolvedPostAndUnsatIsUnsat_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp as IsOpp0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicLit_Impl1_LitIn as LitIn0 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf as ResolventOf0 with function Model0.model = Model0.model,
  predicate LitIn0.lit_in = LitIn0.lit_in, predicate IsOpp0.is_opp = IsOpp0.is_opp
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  let rec ghost function lemma_resolved_post_and_unsat_is_unsat (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) (a : Seq.seq uint8) (c_idx : int) (c2_idx : int) : ()
    requires {ResolventOf0.resolvent_of c3 c c2 c2_idx c_idx}
    requires {0 <= c2_idx && c2_idx < Seq.length (Model0.model c2)}
    requires {0 <= c_idx && c_idx < Seq.length (Model0.model c)}
    requires {UnsatInner0.unsat_inner c2 a}
    requires {SatInner0.sat_inner (Seq.get (Model0.model c) c_idx) a}
    requires {Invariant0.invariant' c2 (Seq.length a)}
    requires {Invariant0.invariant' c (Seq.length a)}
    requires {PostUnitInner0.post_unit_inner c a}
    ensures { UnsatInner0.unsat_inner c3 a }
    
   = 
    ()
end
module CreuSat_Logic_Logic_LemmaExtendingWithEquiExtIsEquiCompat_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_EquisatCompatibleInner_Interface as EquisatCompatibleInner0
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  function lemma_extending_with_equi_ext_is_equi_compat (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) : ()
    
end
module CreuSat_Logic_Logic_LemmaExtendingWithEquiExtIsEquiCompat
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_EquisatCompatibleInner_Interface as EquisatCompatibleInner0
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  function lemma_extending_with_equi_ext_is_equi_compat (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) : ()
    
   = 
    ()
  axiom lemma_extending_with_equi_ext_is_equi_compat_spec : forall f : (Seq.seq (Type.creusat_clause_clause), int), c : Type.creusat_clause_clause . EquisatExtensionInner0.equisat_extension_inner c f -> FormulaInvariant0.formula_invariant f -> EquisatCompatibleInner0.equisat_compatible_inner f (Seq.snoc (let (a, _) = f in a) c, let (_, a) = f in a)
end
module CreuSat_Logic_Logic_LemmaExtendingWithEquiExtIsEquiCompat_Impl
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicFormula_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_Equals as Equals0 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Compatible as Compatible0 with predicate Equals0.equals = Equals0.equals
  clone CreuSat_Logic_LogicFormula_EquisatCompatibleInner as EquisatCompatibleInner0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Equisat0.equisat = Equisat0.equisat
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model0.model
  let rec ghost function lemma_extending_with_equi_ext_is_equi_compat (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) : ()
    requires {EquisatExtensionInner0.equisat_extension_inner c f}
    requires {FormulaInvariant0.formula_invariant f}
    ensures { EquisatCompatibleInner0.equisat_compatible_inner f (Seq.snoc (let (a, _) = f in a) c, let (_, a) = f in a) }
    
   = 
    ()
end
module CreuSat_Logic_Logic_LemmaEquisatIsTrans_Interface
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  function lemma_equisat_is_trans (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (f3 : Type.creusat_formula_formula) : ()
    
end
module CreuSat_Logic_Logic_LemmaEquisatIsTrans
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  function lemma_equisat_is_trans (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (f3 : Type.creusat_formula_formula) : ()
    
   = 
    ()
  axiom lemma_equisat_is_trans_spec : forall f : Type.creusat_formula_formula, f2 : Type.creusat_formula_formula, f3 : Type.creusat_formula_formula . EquisatCompatible0.equisat_compatible f2 f3 -> EquisatCompatible0.equisat_compatible f f2 -> Invariant0.invariant' f3 -> Invariant0.invariant' f2 -> Invariant0.invariant' f -> EquisatCompatible0.equisat_compatible f f3
end
module CreuSat_Logic_Logic_LemmaEquisatIsTrans_Impl
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model2 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicFormula_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_Equals as Equals0 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Compatible as Compatible0 with predicate Equals0.equals = Equals0.equals
  clone CreuSat_Logic_LogicFormula_EquisatCompatibleInner as EquisatCompatibleInner0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Equisat0.equisat = Equisat0.equisat
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant1.invariant', function Model1.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model0.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_EquisatCompatible as EquisatCompatible0 with function Model0.model = Model0.model,
  predicate EquisatCompatibleInner0.equisat_compatible_inner = EquisatCompatibleInner0.equisat_compatible_inner
  let rec ghost function lemma_equisat_is_trans (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula) (f3 : Type.creusat_formula_formula) : ()
    requires {EquisatCompatible0.equisat_compatible f2 f3}
    requires {EquisatCompatible0.equisat_compatible f f2}
    requires {Invariant0.invariant' f3}
    requires {Invariant0.invariant' f2}
    requires {Invariant0.invariant' f}
    ensures { EquisatCompatible0.equisat_compatible f f3 }
    
   = 
    ()
end
module CreuSat_Logic_Logic_BoolToAssignedstate_Interface
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function bool_to_assignedstate (b : bool) : uint8
end
module CreuSat_Logic_Logic_BoolToAssignedstate
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function bool_to_assignedstate (b : bool) : uint8 = 
    if b then (1 : uint8) else (0 : uint8)
  axiom bool_to_assignedstate_spec : forall b : bool . (b -> UInt8.to_int (bool_to_assignedstate b) = 1) && (not b -> UInt8.to_int (bool_to_assignedstate b) = 0)
end
module CreuSat_Logic_Logic_BoolToAssignedstate_Impl
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  let rec ghost function bool_to_assignedstate (b : bool) : uint8
    ensures { not b -> UInt8.to_int result = 0 }
    ensures { b -> UInt8.to_int result = 1 }
    
   = 
    if b then (1 : uint8) else (0 : uint8)
end
module CreuSat_Logic_Logic_FlipV_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function flip_v (v : uint8) : uint8
end
module CreuSat_Logic_Logic_FlipV
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  function flip_v (v : uint8) : uint8 = 
    if UInt8.to_int v = 0 then (1 : uint8) else if UInt8.to_int v = 1 then (0 : uint8) else v
end
module CreuSat_Logic_LogicAssignments_AssignmentsInvariant_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  predicate assignments_invariant (a : Seq.seq uint8) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicAssignments_AssignmentsInvariant
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  use mach.int.UInt64
  use mach.int.Int32
  predicate assignments_invariant (a : Seq.seq uint8) (f : Type.creusat_formula_formula) = 
    UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) = Seq.length a && (forall i : (int) . 0 <= i && i < Seq.length a -> UInt8.to_int (Seq.get a i) <= 3)
end
module CreuSat_Logic_Logic_LemmaCompleteImpliesSatOrUnsat_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicAssignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone CreuSat_Logic_LogicAssignments_CompleteInner_Interface as CompleteInner0
  function lemma_complete_implies_sat_or_unsat (f : Type.creusat_formula_formula) (a : Seq.seq uint8) : ()
end
module CreuSat_Logic_Logic_LemmaCompleteImpliesSatOrUnsat
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicAssignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone CreuSat_Logic_LogicAssignments_CompleteInner_Interface as CompleteInner0
  function lemma_complete_implies_sat_or_unsat (f : Type.creusat_formula_formula) (a : Seq.seq uint8) : () = 
    ()
  axiom lemma_complete_implies_sat_or_unsat_spec : forall f : Type.creusat_formula_formula, a : Seq.seq uint8 . CompleteInner0.complete_inner a -> AssignmentsInvariant0.assignments_invariant a f -> Invariant0.invariant' f -> UnsatInner0.unsat_inner f a || SatInner0.sat_inner f a
end
module CreuSat_Logic_Logic_LemmaCompleteImpliesSatOrUnsat_Impl
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model2 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant1.invariant', function Model1.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model0.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicAssignments_AssignmentsInvariant as AssignmentsInvariant0
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  let rec ghost function lemma_complete_implies_sat_or_unsat (f : Type.creusat_formula_formula) (a : Seq.seq uint8) : ()
    requires {CompleteInner0.complete_inner a}
    requires {AssignmentsInvariant0.assignments_invariant a f}
    requires {Invariant0.invariant' f}
    ensures { UnsatInner0.unsat_inner f a || SatInner0.sat_inner f a }
    
   = 
    ()
end
module CreuSat_Logic_Logic_LemmaCompleteAndNotSatImpliesUnsat_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicAssignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone CreuSat_Logic_LogicAssignments_CompleteInner_Interface as CompleteInner0
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  function lemma_complete_and_not_sat_implies_unsat (f : Type.creusat_formula_formula) (a : Seq.seq uint8) : ()
end
module CreuSat_Logic_Logic_LemmaCompleteAndNotSatImpliesUnsat
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicAssignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone CreuSat_Logic_LogicAssignments_CompleteInner_Interface as CompleteInner0
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_Logic_LemmaCompleteImpliesSatOrUnsat_Interface as LemmaCompleteImpliesSatOrUnsat0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, axiom .
  function lemma_complete_and_not_sat_implies_unsat (f : Type.creusat_formula_formula) (a : Seq.seq uint8) : () = 
    let _ = LemmaCompleteImpliesSatOrUnsat0.lemma_complete_implies_sat_or_unsat f a in ()
  axiom lemma_complete_and_not_sat_implies_unsat_spec : forall f : Type.creusat_formula_formula, a : Seq.seq uint8 . not (SatInner0.sat_inner f a) -> CompleteInner0.complete_inner a -> AssignmentsInvariant0.assignments_invariant a f -> Invariant0.invariant' f -> UnsatInner0.unsat_inner f a
end
module CreuSat_Logic_Logic_LemmaCompleteAndNotSatImpliesUnsat_Impl
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model2 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicAssignments_AssignmentsInvariant as AssignmentsInvariant0
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model1 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant', function Model1.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model1.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_Logic_LemmaCompleteImpliesSatOrUnsat as LemmaCompleteImpliesSatOrUnsat0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  let rec ghost function lemma_complete_and_not_sat_implies_unsat (f : Type.creusat_formula_formula) (a : Seq.seq uint8) : ()
    requires {not (SatInner0.sat_inner f a)}
    requires {CompleteInner0.complete_inner a}
    requires {AssignmentsInvariant0.assignments_invariant a f}
    requires {Invariant0.invariant' f}
    ensures { UnsatInner0.unsat_inner f a }
    
   = 
    let _ = LemmaCompleteImpliesSatOrUnsat0.lemma_complete_implies_sat_or_unsat f a in ()
end
module CreuSat_Logic_Logic_LemmaCompleteAndNotUnsatImpliesSat_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicAssignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone CreuSat_Logic_LogicAssignments_CompleteInner_Interface as CompleteInner0
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner_Interface as UnsatInner0
  function lemma_complete_and_not_unsat_implies_sat (f : Type.creusat_formula_formula) (a : Seq.seq uint8) : ()
end
module CreuSat_Logic_Logic_LemmaCompleteAndNotUnsatImpliesSat
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicAssignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone CreuSat_Logic_LogicAssignments_CompleteInner_Interface as CompleteInner0
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_Logic_LemmaCompleteImpliesSatOrUnsat_Interface as LemmaCompleteImpliesSatOrUnsat0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, axiom .
  function lemma_complete_and_not_unsat_implies_sat (f : Type.creusat_formula_formula) (a : Seq.seq uint8) : () = 
    let _ = LemmaCompleteImpliesSatOrUnsat0.lemma_complete_implies_sat_or_unsat f a in ()
  axiom lemma_complete_and_not_unsat_implies_sat_spec : forall f : Type.creusat_formula_formula, a : Seq.seq uint8 . not (UnsatInner0.unsat_inner f a) -> CompleteInner0.complete_inner a -> AssignmentsInvariant0.assignments_invariant a f -> Invariant0.invariant' f -> SatInner0.sat_inner f a
end
module CreuSat_Logic_Logic_LemmaCompleteAndNotUnsatImpliesSat_Impl
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model2 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreuSat_Logic_LogicAssignments_AssignmentsInvariant as AssignmentsInvariant0
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model1 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant', function Model1.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model1.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_Logic_LemmaCompleteImpliesSatOrUnsat as LemmaCompleteImpliesSatOrUnsat0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  let rec ghost function lemma_complete_and_not_unsat_implies_sat (f : Type.creusat_formula_formula) (a : Seq.seq uint8) : ()
    requires {not (UnsatInner0.unsat_inner f a)}
    requires {CompleteInner0.complete_inner a}
    requires {AssignmentsInvariant0.assignments_invariant a f}
    requires {Invariant0.invariant' f}
    ensures { SatInner0.sat_inner f a }
    
   = 
    let _ = LemmaCompleteImpliesSatOrUnsat0.lemma_complete_implies_sat_or_unsat f a in ()
end
module CreuSat_Logic_LogicAssignments_CompatibleInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate compatible_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module CreuSat_Logic_LogicAssignments_CompatibleInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  predicate compatible_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8) = 
    Seq.length a = Seq.length a2 && (forall i : (int) . 0 <= i && i < Seq.length a -> Unset0.unset (Seq.get a i) || Seq.get a i = Seq.get a2 i)
end
module CreuSat_Logic_LogicAssignments_CompatibleCompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate compatible_complete_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module CreuSat_Logic_LogicAssignments_CompatibleCompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicAssignments_CompleteInner_Interface as CompleteInner0
  clone CreuSat_Logic_LogicAssignments_CompatibleInner_Interface as CompatibleInner0
  predicate compatible_complete_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8) = 
    CompatibleInner0.compatible_inner a a2 && CompleteInner0.complete_inner a2
end
module CreuSat_Logic_LogicAssignments_Impl1_Compatible_Interface
  use Type
  predicate compatible (self : Type.creusat_assignments_assignments) (a2 : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicAssignments_Impl1_Compatible
  use Type
  clone CreuSat_Logic_LogicAssignments_CompatibleInner_Interface as CompatibleInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate compatible (self : Type.creusat_assignments_assignments) (a2 : Type.creusat_assignments_assignments) = 
    CompatibleInner0.compatible_inner (Model0.model self) (Model0.model a2)
end
module CreuSat_Logic_LogicAssignments_Impl1_CompatibleComplete_Interface
  use Type
  predicate compatible_complete (self : Type.creusat_assignments_assignments) (a2 : Type.creusat_assignments_assignments)
    
end
module CreuSat_Logic_LogicAssignments_Impl1_CompatibleComplete
  use Type
  clone CreuSat_Logic_LogicAssignments_Impl1_Complete_Interface as Complete0
  clone CreuSat_Logic_LogicAssignments_Impl1_Compatible_Interface as Compatible0
  predicate compatible_complete (self : Type.creusat_assignments_assignments) (a2 : Type.creusat_assignments_assignments)
    
   = 
    Compatible0.compatible self a2 && Complete0.complete a2
end
module CreuSat_Logic_LogicClause_InvariantUnaryOkInternal_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate invariant_unary_ok_internal (s : Seq.seq (Type.creusat_lit_lit)) (n : int)
end
module CreuSat_Logic_LogicClause_InvariantUnaryOkInternal
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  predicate invariant_unary_ok_internal (s : Seq.seq (Type.creusat_lit_lit)) (n : int) = 
    VarsInRangeInner0.vars_in_range_inner s n && NoDuplicateIndexesInner0.no_duplicate_indexes_inner s
end
module CreuSat_Logic_LogicClause_Impl1_NoUnsetInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate no_unset_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicClause_Impl1_NoUnsetInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner_Interface as UnsetInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate no_unset_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8) = 
    forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) -> not (UnsetInner0.unset_inner (Seq.get (Model0.model self) j) a)
end
module CreuSat_Logic_LogicClause_Impl1_EqAssnInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate eq_assn_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module CreuSat_Logic_LogicClause_Impl1_EqAssnInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate eq_assn_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8) (a2 : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Seq.get a (IndexLogic0.index_logic (Seq.get (Model0.model self) i)) = Seq.get a2 (IndexLogic0.index_logic (Seq.get (Model0.model self) i))
end
module CreuSat_Logic_LogicClause_Impl2_EquisatExtensionDouble_Interface
  use Type
  predicate equisat_extension_double (self : Type.creusat_clause_clause) (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula)
    
end
module CreuSat_Logic_LogicClause_Impl2_EquisatExtensionDouble
  use Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicFormula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_Impl2_Equals_Interface as Equals0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  predicate equisat_extension_double (self : Type.creusat_clause_clause) (f : Type.creusat_formula_formula) (f2 : Type.creusat_formula_formula)
    
   = 
    Invariant0.invariant' f && Invariant0.invariant' f2 && UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f2) && Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) + 1 = Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) -> Equals0.equals (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i) (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) i)) && Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) (Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f2)) - 1)) = Model1.model self && EquisatCompatible0.equisat_compatible f f2
end
module CreuSat_Logic_LogicClause_Impl2_ResolventOfIdx2_Interface
  use Type
  use mach.int.Int
  predicate resolvent_of_idx2 (self : Type.creusat_clause_clause) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (idx : int) (c_idx : int)
    
end
module CreuSat_Logic_LogicClause_Impl2_ResolventOfIdx2
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp_Interface as IsOpp0
  clone CreuSat_Logic_LogicLit_Impl1_LitIn_Interface as LitIn0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate resolvent_of_idx2 (self : Type.creusat_clause_clause) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (idx : int) (c_idx : int)
    
   = 
    (forall i : (int) . 0 <= i && i < Seq.length (Model0.model c) && IndexLogic0.index_logic (Seq.get (Model0.model c) i) <> idx -> LitIn0.lit_in (Seq.get (Model0.model c) i) self) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model c2) && IndexLogic0.index_logic (Seq.get (Model0.model c2) i) <> idx -> LitIn0.lit_in (Seq.get (Model0.model c2) i) self) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> LitIn0.lit_in (Seq.get (Model0.model self) i) c || LitIn0.lit_in (Seq.get (Model0.model self) i) c2) && 0 <= c_idx && c_idx < Seq.length (Model0.model c) && IndexLogic0.index_logic (Seq.get (Model0.model c) c_idx) = idx && (exists k : (int) . 0 <= k && k < Seq.length (Model0.model c2) && IsOpp0.is_opp (Seq.get (Model0.model c2) k) (Seq.get (Model0.model c) c_idx))
end
module CreuSat_Logic_LogicClause_Impl2_Unknown_Interface
  use Type
  predicate unknown (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicClause_Impl2_Unknown
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat0
  clone CreuSat_Logic_LogicClause_Impl2_Sat_Interface as Sat0
  predicate unknown (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) = 
    not (Sat0.sat self a) && not (Unsat0.unsat self a)
end
module CreuSat_Logic_LogicFormula_Impl1_Compatible_Interface
  use Type
  predicate compatible (self : Type.creusat_formula_formula) (o : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicFormula_Impl1_Compatible
  use Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl2_Equals_Interface as Equals0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  predicate compatible (self : Type.creusat_formula_formula) (o : Type.creusat_formula_formula) = 
    UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars o) && Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses o)) >= Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) -> Equals0.equals (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) i) (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses o)) i))
end
module CreuSat_Logic_LogicFormula_Impl1_EventuallySatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate eventually_sat_inner (self : Type.creusat_formula_formula) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicFormula_Impl1_EventuallySatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_CompatibleInner_Interface as CompatibleInner0
  predicate eventually_sat_inner (self : Type.creusat_formula_formula) (a : Seq.seq uint8) = 
    exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self) && CompatibleInner0.compatible_inner a a2 && SatInner0.sat_inner self a2
end
module CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate eventually_sat_complete_inner (self : Type.creusat_formula_formula) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_CompatibleCompleteInner_Interface as CompatibleCompleteInner0
  predicate eventually_sat_complete_inner (self : Type.creusat_formula_formula) (a : Seq.seq uint8) = 
    exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self) && CompatibleCompleteInner0.compatible_complete_inner a a2 && SatInner0.sat_inner self a2
end
module CreuSat_Logic_LogicFormula_Impl1_EventuallySatComplete_Interface
  use Type
  predicate eventually_sat_complete (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicFormula_Impl1_EventuallySatComplete
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate eventually_sat_complete (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) = 
    EventuallySatCompleteInner0.eventually_sat_complete_inner self (Model0.model a)
end
module CreuSat_Logic_LogicFormula_Impl1_EventuallySat_Interface
  use Type
  predicate eventually_sat (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicFormula_Impl1_EventuallySat
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatInner_Interface as EventuallySatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate eventually_sat (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) = 
    EventuallySatInner0.eventually_sat_inner self (Model0.model a)
end
module CreuSat_Logic_LogicLit_Impl1_IdxInTrail_Interface
  use Type
  predicate idx_in_trail (self : Type.creusat_lit_lit) (t : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global))
    
end
module CreuSat_Logic_LogicLit_Impl1_IdxInTrail
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  predicate idx_in_trail (self : Type.creusat_lit_lit) (t : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global))
    
   = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model t) && IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get (Model0.model t) i)) = IndexLogic0.index_logic self
end
module CreuSat_Logic_LogicTrail_Impl2_InvariantSwap_Interface
  use Type
  predicate invariant_swap (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_Impl2_InvariantSwap
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned_Interface as TrailEntriesAreAssigned0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant_Interface as DecisionsInvariant0
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant_Interface as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_TrailInvariant_Interface as TrailInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant0
  predicate invariant_swap (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) = 
    Invariant0.invariant' (Type.creusat_trail_trail_Trail_assignments self) f && TrailInvariant0.trail_invariant (Model0.model (Type.creusat_trail_trail_Trail_trail self)) f && LitToLevelInvariant0.lit_to_level_invariant (Model1.model (Type.creusat_trail_trail_Trail_lit_to_level self)) f && DecisionsInvariant0.decisions_invariant (Model1.model (Type.creusat_trail_trail_Trail_decisions self)) (Model0.model (Type.creusat_trail_trail_Trail_trail self)) && LitNotInLess0.lit_not_in_less self f && LitIsUnique0.lit_is_unique self && LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail self)) f (Model2.model (Type.creusat_trail_trail_Trail_assignments self)) && TrailEntriesAreAssigned0.trail_entries_are_assigned self
end
module CreuSat_Logic_LogicTrail_AssignmentsAreInTrail_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate assignments_are_in_trail (t : Seq.seq (Type.creusat_trail_step)) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicTrail_AssignmentsAreInTrail
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  predicate assignments_are_in_trail (t : Seq.seq (Type.creusat_trail_step)) (a : Seq.seq uint8) = 
    forall j : (int) . 0 <= j && j < Seq.length a -> (exists i : (int) . 0 <= i && i < Seq.length t && IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get t i)) = j && BoolToAssignedstate0.bool_to_assignedstate (IsPositiveLogic0.is_positive_logic (Type.creusat_trail_step_Step_lit (Seq.get t i))) = Seq.get a j)
end
module CreuSat_Logic_LogicTrail_ClausePostWithRegardsToLit_Interface
  use Type
  predicate clause_post_with_regards_to_lit (c : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit)
    
end
module CreuSat_Logic_LogicTrail_ClausePostWithRegardsToLit
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl1_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit_Interface as PostUnit0
  predicate clause_post_with_regards_to_lit (c : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit)
    
   = 
    PostUnit0.post_unit c a && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) && IsPositiveLogic0.is_positive_logic (Seq.get (Model0.model c) i) = IsPositiveLogic0.is_positive_logic lit && IndexLogic0.index_logic (Seq.get (Model0.model c) i) = IndexLogic0.index_logic lit && Sat0.sat (Seq.get (Model0.model c) i) a)
end
module CreuSat_Logic_LogicTrail_LongArePostUnit_Interface
  use Type
  predicate long_are_post_unit (trail : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_LongArePostUnit
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsTo_Interface as ClausePostWithRegardsTo0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  predicate long_are_post_unit (trail : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) = 
    forall j : (int) . 0 <= j && j < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail trail)) -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail trail)) j)) with
      | Type.CreuSat_Trail_Reason_Long k -> ClausePostWithRegardsTo0.clause_post_with_regards_to (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Type.creusat_trail_trail_Trail_assignments trail) (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail trail)) j)))
      | _ -> true
      end
end
module CreuSat_Logic_LogicTrail_LemmaTrailPost_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn_Interface as LitIdxIn0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  function lemma_trail_post (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) (t : Type.creusat_trail_trail) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaTrailPost
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn_Interface as LitIdxIn0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  function lemma_trail_post (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) (t : Type.creusat_trail_trail) : ()
    
   = 
    ()
  axiom lemma_trail_post_spec : forall f : Type.creusat_formula_formula, lit : Type.creusat_lit_lit, t : Type.creusat_trail_trail . Invariant0.invariant' t f -> Invariant1.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) -> Invariant2.invariant' f -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
    | Type.CreuSat_Trail_Reason_Long k -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) && not (LitIdxIn0.lit_idx_in lit (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k))) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Seq.set (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (3 : uint8))
    | _ -> true
    end) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
    | Type.CreuSat_Trail_Reason_Long k -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) && not (LitIdxIn0.lit_idx_in lit (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k))) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Seq.set (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (2 : uint8))
    | _ -> true
    end)
end
module CreuSat_Logic_LogicTrail_LemmaTrailPost_Impl
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model6 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model2 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant6 with function Model0.model = Model1.model,
  function Model1.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model4 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model1.model,
  function Model1.model = Model6.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model6.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model1.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model6.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model4.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model2.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model3.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model3.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model2.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant0 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model3.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  let rec ghost function lemma_trail_post (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) (t : Type.creusat_trail_trail) : ()
    requires {Invariant0.invariant' t f}
    requires {Invariant1.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Invariant2.invariant' f}
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
      | Type.CreuSat_Trail_Reason_Long k -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) && not (LitIdxIn0.lit_idx_in lit (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k))) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Seq.set (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (2 : uint8))
      | _ -> true
      end }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
      | Type.CreuSat_Trail_Reason_Long k -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) && not (LitIdxIn0.lit_idx_in lit (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k))) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Seq.set (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (3 : uint8))
      | _ -> true
      end }
    
   = 
    ()
end
module CreuSat_Logic_LogicTrail_LemmaTrailOnlyLast_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn_Interface as LitIdxIn0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  function lemma_trail_only_last (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) (t : Type.creusat_trail_trail) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaTrailOnlyLast
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn_Interface as LitIdxIn0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  function lemma_trail_only_last (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) (t : Type.creusat_trail_trail) : ()
    
   = 
    ()
  axiom lemma_trail_only_last_spec : forall f : Type.creusat_formula_formula, lit : Type.creusat_lit_lit, t : Type.creusat_trail_trail . lit = Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) (Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1)) -> Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) > 0 -> Invariant0.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) -> LitIsUnique0.lit_is_unique t -> LitNotInLess0.lit_not_in_less t f -> Invariant1.invariant' f -> Invariant2.invariant' t f -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1 -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
    | Type.CreuSat_Trail_Reason_Long k -> not (LitIdxIn0.lit_idx_in lit (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)))
    | _ -> true
    end)
end
module CreuSat_Logic_LogicTrail_LemmaTrailOnlyLast_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model5 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model4 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant6 with function Model0.model = Model1.model,
  function Model1.model = Model4.model
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model2 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model3.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model4.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model1.model,
  function Model1.model = Model4.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model4.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model1.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant3 with function Model0.model = Model4.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model4.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant3.invariant', function Model1.model = Model4.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model2.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model5.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model3.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model5.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant2 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model3.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  let rec ghost function lemma_trail_only_last (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) (t : Type.creusat_trail_trail) : ()
    requires {lit = Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) (Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1))}
    requires {Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) > 0}
    requires {Invariant0.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {LitIsUnique0.lit_is_unique t}
    requires {LitNotInLess0.lit_not_in_less t f}
    requires {Invariant1.invariant' f}
    requires {Invariant2.invariant' t f}
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1 -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
      | Type.CreuSat_Trail_Reason_Long k -> not (LitIdxIn0.lit_idx_in lit (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)))
      | _ -> true
      end }
    
   = 
    ()
end
module CreuSat_Logic_LogicTrail_LemmaTrailFin_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  function lemma_trail_fin (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaTrailFin
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn_Interface as LitIdxIn0
  clone CreuSat_Logic_LogicTrail_LemmaTrailOnlyLast_Interface as LemmaTrailOnlyLast0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant0.invariant',
  function Model1.model = Model1.model, predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailPost_Interface as LemmaTrailPost0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  function Model0.model = Model0.model, function Model1.model = Model1.model, function Model2.model = Model2.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  axiom .
  function lemma_trail_fin (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) : ()
    
   = 
    let _ = LemmaTrailPost0.lemma_trail_post f lit t in let _ = LemmaTrailOnlyLast0.lemma_trail_only_last f lit t in ()
  axiom lemma_trail_fin_spec : forall t : Type.creusat_trail_trail, f : Type.creusat_formula_formula, lit : Type.creusat_lit_lit . lit = Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) (Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1)) -> Invariant0.invariant' t f -> Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) > 0 -> Invariant1.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) -> LitIsUnique0.lit_is_unique t -> LitNotInLess0.lit_not_in_less t f -> Invariant2.invariant' f -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1 -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
    | Type.CreuSat_Trail_Reason_Long k -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Seq.set (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (3 : uint8))
    | _ -> true
    end) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1 -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
    | Type.CreuSat_Trail_Reason_Long k -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Seq.set (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (2 : uint8))
    | _ -> true
    end)
end
module CreuSat_Logic_LogicTrail_LemmaTrailFin_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model6 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model2 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant6 with function Model0.model = Model1.model,
  function Model1.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model4 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model1.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model1.model,
  function Model1.model = Model6.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model6.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model6.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model4.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model3.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model2.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model3.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model2.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant0 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model3.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicTrail_LemmaTrailOnlyLast as LemmaTrailOnlyLast0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant0.invariant',
  function Model1.model = Model1.model, predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailPost as LemmaTrailPost0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  function Model0.model = Model0.model, function Model1.model = Model1.model, function Model2.model = Model2.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  let rec ghost function lemma_trail_fin (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) : ()
    requires {lit = Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) (Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1))}
    requires {Invariant0.invariant' t f}
    requires {Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) > 0}
    requires {Invariant1.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {LitIsUnique0.lit_is_unique t}
    requires {LitNotInLess0.lit_not_in_less t f}
    requires {Invariant2.invariant' f}
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1 -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
      | Type.CreuSat_Trail_Reason_Long k -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Seq.set (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (2 : uint8))
      | _ -> true
      end }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1 -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
      | Type.CreuSat_Trail_Reason_Long k -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) -> PostUnitInner0.post_unit_inner (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Seq.set (Model2.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (3 : uint8))
      | _ -> true
      end }
    
   = 
    let _ = LemmaTrailPost0.lemma_trail_post f lit t in let _ = LemmaTrailOnlyLast0.lemma_trail_only_last f lit t in ()
end
module CreuSat_Logic_LogicTrail_LemmaTrailFin2_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use mach.int.UInt64
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = Type.creusat_trail_step, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  function lemma_trail_fin2 (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaTrailFin2
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use mach.int.UInt64
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = Type.creusat_trail_step, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn_Interface as LitIdxIn0
  clone CreuSat_Logic_LogicTrail_LemmaTrailOnlyLast_Interface as LemmaTrailOnlyLast0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  function Model1.model = Model2.model, predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailPost_Interface as LemmaTrailPost0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant0.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  function Model0.model = Model0.model, function Model1.model = Model2.model, function Model2.model = Model1.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  axiom .
  function lemma_trail_fin2 (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) : ()
    
   = 
    let _ = LemmaTrailPost0.lemma_trail_post f lit t in let _ = LemmaTrailOnlyLast0.lemma_trail_only_last f lit t in ()
  axiom lemma_trail_fin2_spec : forall t : Type.creusat_trail_trail, f : Type.creusat_formula_formula, lit : Type.creusat_lit_lit . LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail t)) f (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1 -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
    | Type.CreuSat_Trail_Reason_Long k -> PostUnitInner0.post_unit_inner (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) -> PostUnitInner0.post_unit_inner (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (2 : uint8))
    | _ -> true
    end) -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1 -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
    | Type.CreuSat_Trail_Reason_Long k -> PostUnitInner0.post_unit_inner (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) -> PostUnitInner0.post_unit_inner (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (3 : uint8))
    | _ -> true
    end) -> lit = Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) (Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1)) -> Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) > 0 -> Invariant0.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) -> LitIsUnique0.lit_is_unique t -> LitNotInLess0.lit_not_in_less t f -> Invariant1.invariant' t f -> Invariant2.invariant' f -> LongArePostUnitInner0.long_are_post_unit_inner (Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail t))) f (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (2 : uint8)) && LongArePostUnitInner0.long_are_post_unit_inner (Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail t))) f (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (3 : uint8))
end
module CreuSat_Logic_LogicTrail_LemmaTrailFin2_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use mach.int.UInt64
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model4 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicUtil_Pop as Pop0 with type t = Type.creusat_trail_step, axiom .
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model5.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model4.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model4.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model4.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant6 with function Model0.model = Model2.model,
  function Model1.model = Model4.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model6 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model4.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model6.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model2.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model2.model,
  function Model1.model = Model4.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model5.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model5.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicTrail_LemmaTrailOnlyLast as LemmaTrailOnlyLast0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  function Model1.model = Model2.model, predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailPost as LemmaTrailPost0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant0.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  function Model0.model = Model0.model, function Model1.model = Model2.model, function Model2.model = Model1.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  let rec ghost function lemma_trail_fin2 (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail t)) f (Model1.model (Type.creusat_trail_trail_Trail_assignments t))}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1 -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
      | Type.CreuSat_Trail_Reason_Long k -> PostUnitInner0.post_unit_inner (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) -> PostUnitInner0.post_unit_inner (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (2 : uint8))
      | _ -> true
      end}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1 -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
      | Type.CreuSat_Trail_Reason_Long k -> PostUnitInner0.post_unit_inner (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) -> PostUnitInner0.post_unit_inner (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (3 : uint8))
      | _ -> true
      end}
    requires {lit = Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) (Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1))}
    requires {Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) > 0}
    requires {Invariant0.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {LitIsUnique0.lit_is_unique t}
    requires {LitNotInLess0.lit_not_in_less t f}
    requires {Invariant1.invariant' t f}
    requires {Invariant2.invariant' f}
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail t))) f (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (3 : uint8)) }
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail t))) f (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (2 : uint8)) }
    
   = 
    let _ = LemmaTrailPost0.lemma_trail_post f lit t in let _ = LemmaTrailOnlyLast0.lemma_trail_only_last f lit t in ()
end
module CreuSat_Logic_LogicTrail_LemmaTrailFin3_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = Type.creusat_trail_step, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  function lemma_trail_fin3 (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaTrailFin3
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = Type.creusat_trail_step, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_LemmaTrailFin2_Interface as LemmaTrailFin20 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  function Model2.model = Model2.model, predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  function Pop0.pop = Pop0.pop, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailFin_Interface as LemmaTrailFin0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant', predicate Invariant1.invariant' = Invariant0.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant2.invariant' = Invariant2.invariant', function Model1.model = Model2.model,
  function Model2.model = Model1.model, predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, axiom .
  function lemma_trail_fin3 (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) : ()
    
   = 
    let _ = LemmaTrailFin0.lemma_trail_fin t f lit in let _ = LemmaTrailFin20.lemma_trail_fin2 t f lit in ()
  axiom lemma_trail_fin3_spec : forall t : Type.creusat_trail_trail, f : Type.creusat_formula_formula, lit : Type.creusat_lit_lit . LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail t)) f (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) -> lit = Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) (Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1)) -> Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) > 0 -> Invariant0.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) -> LitIsUnique0.lit_is_unique t -> LitNotInLess0.lit_not_in_less t f -> Invariant1.invariant' t f -> Invariant2.invariant' f -> LongArePostUnitInner0.long_are_post_unit_inner (Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail t))) f (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (3 : uint8)) && LongArePostUnitInner0.long_are_post_unit_inner (Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail t))) f (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (2 : uint8))
end
module CreuSat_Logic_LogicTrail_LemmaTrailFin3_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model6 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicUtil_Pop as Pop0 with type t = Type.creusat_trail_step, axiom .
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model4.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model6.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model6.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant6 with function Model0.model = Model3.model,
  function Model1.model = Model6.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model5 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model5.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model3.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model3.model,
  function Model1.model = Model6.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model4.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model4.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicTrail_LemmaTrailOnlyLast as LemmaTrailOnlyLast0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  function Model1.model = Model3.model, predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailPost as LemmaTrailPost0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant0.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  function Model0.model = Model0.model, function Model1.model = Model3.model, function Model2.model = Model1.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailFin2 as LemmaTrailFin20 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  function Model2.model = Model3.model, predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  function Pop0.pop = Pop0.pop, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function LemmaTrailPost0.lemma_trail_post = LemmaTrailPost0.lemma_trail_post,
  function LemmaTrailOnlyLast0.lemma_trail_only_last = LemmaTrailOnlyLast0.lemma_trail_only_last,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailFin as LemmaTrailFin0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant', predicate Invariant1.invariant' = Invariant0.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant2.invariant' = Invariant2.invariant', function Model1.model = Model3.model,
  function Model2.model = Model1.model, predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function LemmaTrailPost0.lemma_trail_post = LemmaTrailPost0.lemma_trail_post,
  function LemmaTrailOnlyLast0.lemma_trail_only_last = LemmaTrailOnlyLast0.lemma_trail_only_last,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, axiom .
  let rec ghost function lemma_trail_fin3 (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (lit : Type.creusat_lit_lit) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail t)) f (Model1.model (Type.creusat_trail_trail_Trail_assignments t))}
    requires {lit = Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) (Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1))}
    requires {Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) > 0}
    requires {Invariant0.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {LitIsUnique0.lit_is_unique t}
    requires {LitNotInLess0.lit_not_in_less t f}
    requires {Invariant1.invariant' t f}
    requires {Invariant2.invariant' f}
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail t))) f (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (2 : uint8)) }
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail t))) f (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic lit) (3 : uint8)) }
    
   = 
    let _ = LemmaTrailFin0.lemma_trail_fin t f lit in let _ = LemmaTrailFin20.lemma_trail_fin2 t f lit in ()
end
module CreuSat_Logic_LogicTrail_LemmaPopNoUnassIsOk_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = Type.creusat_trail_step, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  function lemma_pop_no_unass_is_ok (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (l : Type.creusat_lit_lit) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaPopNoUnassIsOk
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = Type.creusat_trail_step, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  function lemma_pop_no_unass_is_ok (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (l : Type.creusat_lit_lit) : ()
    
   = 
    ()
  axiom lemma_pop_no_unass_is_ok_spec : forall t : Type.creusat_trail_trail, f : Type.creusat_formula_formula, l : Type.creusat_lit_lit . LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail t)) f (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) -> l = Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) (Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1)) -> Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) > 0 -> LitIsUnique0.lit_is_unique t -> LitNotInLess0.lit_not_in_less t f -> Invariant0.invariant' t f -> LongArePostUnitInner0.long_are_post_unit_inner (Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail t))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments t))
end
module CreuSat_Logic_LogicTrail_LemmaPopNoUnassIsOk_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use mach.int.UInt64
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model5 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicUtil_Pop as Pop0 with type t = Type.creusat_trail_step, axiom .
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model4.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model5.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant4 with function Model0.model = Model3.model,
  function Model1.model = Model5.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant2 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant4.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model3.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model3.model,
  function Model1.model = Model5.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model4.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant0 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model4.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  let rec ghost function lemma_pop_no_unass_is_ok (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (l : Type.creusat_lit_lit) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail t)) f (Model1.model (Type.creusat_trail_trail_Trail_assignments t))}
    requires {l = Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) (Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1))}
    requires {Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) > 0}
    requires {LitIsUnique0.lit_is_unique t}
    requires {LitNotInLess0.lit_not_in_less t f}
    requires {Invariant0.invariant' t f}
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail t))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) }
    
   = 
    ()
end
module CreuSat_Logic_LogicTrail_LemmaBacktrackOk_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = Type.creusat_trail_step, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  function lemma_backtrack_ok (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (l : Type.creusat_lit_lit) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaBacktrackOk
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = Type.creusat_trail_step, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_LemmaTrailFin2_Interface as LemmaTrailFin20 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  function Model2.model = Model2.model, predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  function Pop0.pop = Pop0.pop, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailFin_Interface as LemmaTrailFin0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant', predicate Invariant1.invariant' = Invariant0.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant2.invariant' = Invariant2.invariant', function Model1.model = Model2.model,
  function Model2.model = Model1.model, predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaPopNoUnassIsOk_Interface as LemmaPopNoUnassIsOk0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant0.invariant' = Invariant1.invariant', function Pop0.pop = Pop0.pop, axiom .
  function lemma_backtrack_ok (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (l : Type.creusat_lit_lit) : ()
    
   = 
    let _ = LemmaPopNoUnassIsOk0.lemma_pop_no_unass_is_ok t f l in let _ = LemmaTrailFin0.lemma_trail_fin t f l in let _ = LemmaTrailFin20.lemma_trail_fin2 t f l in ()
  axiom lemma_backtrack_ok_spec : forall t : Type.creusat_trail_trail, f : Type.creusat_formula_formula, l : Type.creusat_lit_lit . LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail t)) f (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) -> l = Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) (Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1)) -> Invariant0.invariant' l (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) -> Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) > 0 -> LitIsUnique0.lit_is_unique t -> LitNotInLess0.lit_not_in_less t f -> Invariant1.invariant' t f -> Invariant2.invariant' f -> LongArePostUnitInner0.long_are_post_unit_inner (Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail t))) f (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic l) (3 : uint8)) && LongArePostUnitInner0.long_are_post_unit_inner (Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail t))) f (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic l) (2 : uint8))
end
module CreuSat_Logic_LogicTrail_LemmaBacktrackOk_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model6 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicUtil_Pop as Pop0 with type t = Type.creusat_trail_step, axiom .
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model4.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model6.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model6.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant6 with function Model0.model = Model3.model,
  function Model1.model = Model6.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model5 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model5.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model3.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model3.model,
  function Model1.model = Model6.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model4.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model4.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicTrail_LemmaTrailOnlyLast as LemmaTrailOnlyLast0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  function Model1.model = Model3.model, predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailPost as LemmaTrailPost0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant0.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  function Model0.model = Model0.model, function Model1.model = Model3.model, function Model2.model = Model1.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailFin2 as LemmaTrailFin20 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  function Model2.model = Model3.model, predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  function Pop0.pop = Pop0.pop, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function LemmaTrailPost0.lemma_trail_post = LemmaTrailPost0.lemma_trail_post,
  function LemmaTrailOnlyLast0.lemma_trail_only_last = LemmaTrailOnlyLast0.lemma_trail_only_last,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailFin as LemmaTrailFin0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant', predicate Invariant1.invariant' = Invariant0.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant2.invariant' = Invariant2.invariant', function Model1.model = Model3.model,
  function Model2.model = Model1.model, predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function LemmaTrailPost0.lemma_trail_post = LemmaTrailPost0.lemma_trail_post,
  function LemmaTrailOnlyLast0.lemma_trail_only_last = LemmaTrailOnlyLast0.lemma_trail_only_last,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaPopNoUnassIsOk as LemmaPopNoUnassIsOk0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant0.invariant' = Invariant1.invariant', function Pop0.pop = Pop0.pop, axiom .
  let rec ghost function lemma_backtrack_ok (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (l : Type.creusat_lit_lit) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail t)) f (Model1.model (Type.creusat_trail_trail_Trail_assignments t))}
    requires {l = Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) (Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) - 1))}
    requires {Invariant0.invariant' l (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) > 0}
    requires {LitIsUnique0.lit_is_unique t}
    requires {LitNotInLess0.lit_not_in_less t f}
    requires {Invariant1.invariant' t f}
    requires {Invariant2.invariant' f}
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail t))) f (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic l) (2 : uint8)) }
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail t))) f (Seq.set (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic l) (3 : uint8)) }
    
   = 
    let _ = LemmaPopNoUnassIsOk0.lemma_pop_no_unass_is_ok t f l in let _ = LemmaTrailFin0.lemma_trail_fin t f l in let _ = LemmaTrailFin20.lemma_trail_fin2 t f l in ()
end
module CreuSat_Logic_LogicTrail_LemmaAssignMaintainsLongArePostUnit2_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_TrailInvariant_Interface as TrailInvariant0
  clone CreuSat_Logic_LogicTrail_CrefsInRange_Interface as CrefsInRange0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  function lemma_assign_maintains_long_are_post_unit2 (v : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) (idx : usize) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaAssignMaintainsLongArePostUnit2
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_TrailInvariant_Interface as TrailInvariant0
  clone CreuSat_Logic_LogicTrail_CrefsInRange_Interface as CrefsInRange0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  function lemma_assign_maintains_long_are_post_unit2 (v : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) (idx : usize) : ()
    
   = 
    ()
  axiom lemma_assign_maintains_long_are_post_unit2_spec : forall v : Seq.seq (Type.creusat_trail_step), f : Type.creusat_formula_formula, a : Type.creusat_assignments_assignments, idx : usize . LongArePostUnitInner0.long_are_post_unit_inner v f (Model0.model a) -> Unset0.unset (Seq.get (Model0.model a) (UInt64.to_int idx)) -> UInt64.to_int idx < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) -> CrefsInRange0.crefs_in_range v f -> TrailInvariant0.trail_invariant v f -> Invariant0.invariant' f -> Invariant1.invariant' a f -> LongArePostUnitInner0.long_are_post_unit_inner v f (Seq.set (Model0.model a) (UInt64.to_int idx) (1 : uint8)) && LongArePostUnitInner0.long_are_post_unit_inner v f (Seq.set (Model0.model a) (UInt64.to_int idx) (0 : uint8))
end
module CreuSat_Logic_LogicTrail_LemmaAssignMaintainsLongArePostUnit2_Impl
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant5 with function Model0.model = Model4.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model4.model
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model4.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant4 with function Model0.model = Model2.model,
  function Model1.model = Model4.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant2 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant4.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model3 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model1.model = Model4.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model3.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant1 with function Model0.model = Model0.model
  let rec ghost function lemma_assign_maintains_long_are_post_unit2 (v : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) (idx : usize) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner v f (Model0.model a)}
    requires {Unset0.unset (Seq.get (Model0.model a) (UInt64.to_int idx))}
    requires {UInt64.to_int idx < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)}
    requires {CrefsInRange0.crefs_in_range v f}
    requires {TrailInvariant0.trail_invariant v f}
    requires {Invariant0.invariant' f}
    requires {Invariant1.invariant' a f}
    ensures { LongArePostUnitInner0.long_are_post_unit_inner v f (Seq.set (Model0.model a) (UInt64.to_int idx) (0 : uint8)) }
    ensures { LongArePostUnitInner0.long_are_post_unit_inner v f (Seq.set (Model0.model a) (UInt64.to_int idx) (1 : uint8)) }
    
   = 
    ()
end
module CreuSat_Logic_LogicTrail_LemmaPostUnitNoUnset_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicLit_Impl1_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit_Interface as PostUnit0
  function lemma_post_unit_no_unset (c : Type.creusat_clause_clause) (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaPostUnitNoUnset
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicLit_Impl1_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit_Interface as PostUnit0
  function lemma_post_unit_no_unset (c : Type.creusat_clause_clause) (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) : ()
    
   = 
    ()
  axiom lemma_post_unit_no_unset_spec : forall c : Type.creusat_clause_clause, t : Type.creusat_trail_trail, f : Type.creusat_formula_formula . PostUnit0.post_unit c (Type.creusat_trail_trail_Trail_assignments t) -> Invariant0.invariant' c (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model c) -> not (Unset0.unset (Seq.get (Model0.model c) i) (Type.creusat_trail_trail_Trail_assignments t)))
end
module CreuSat_Logic_LogicTrail_LemmaPostUnitNoUnset_Impl
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner as UnsetInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicLit_Impl1_Unset as Unset0 with function Model0.model = Model1.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit as PostUnit0 with function Model0.model = Model1.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  let rec ghost function lemma_post_unit_no_unset (c : Type.creusat_clause_clause) (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) : ()
    requires {PostUnit0.post_unit c (Type.creusat_trail_trail_Trail_assignments t)}
    requires {Invariant0.invariant' c (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model c) -> not (Unset0.unset (Seq.get (Model0.model c) i) (Type.creusat_trail_trail_Trail_assignments t)) }
    
   = 
    ()
end
module CreuSat_Logic_LogicTrail_LemmaIdxNotInPostUnit_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit_Interface as PostUnit0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  function lemma_idx_not_in_post_unit (c : Type.creusat_clause_clause) (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (idx : int) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaIdxNotInPostUnit
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit_Interface as PostUnit0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  function lemma_idx_not_in_post_unit (c : Type.creusat_clause_clause) (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (idx : int) : ()
    
   = 
    ()
  axiom lemma_idx_not_in_post_unit_spec : forall c : Type.creusat_clause_clause, t : Type.creusat_trail_trail, f : Type.creusat_formula_formula, idx : int . Unset0.unset (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_assignments t)) idx) -> idx < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) -> PostUnit0.post_unit c (Type.creusat_trail_trail_Trail_assignments t) -> Invariant0.invariant' c (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) -> (forall i : (int) . 0 <= i && i < Seq.length (Model1.model c) -> IndexLogic0.index_logic (Seq.get (Model1.model c) i) <> idx)
end
module CreuSat_Logic_LogicTrail_LemmaIdxNotInPostUnit_Impl
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit as PostUnit0 with function Model0.model = Model0.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner
  let rec ghost function lemma_idx_not_in_post_unit (c : Type.creusat_clause_clause) (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (idx : int) : ()
    requires {Unset0.unset (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_assignments t)) idx)}
    requires {idx < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)}
    requires {PostUnit0.post_unit c (Type.creusat_trail_trail_Trail_assignments t)}
    requires {Invariant0.invariant' c (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model c) -> IndexLogic0.index_logic (Seq.get (Model1.model c) i) <> idx }
    
   = 
    ()
end
module CreuSat_Logic_LogicTrail_LemmaUnsetToForall_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use mach.int.UInt64
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model3
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  function lemma_unset_to_forall (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (step : Type.creusat_trail_step) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaUnsetToForall
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use mach.int.UInt64
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model3
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  function lemma_unset_to_forall (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (step : Type.creusat_trail_step) : ()
    
   = 
    ()
  axiom lemma_unset_to_forall_spec : forall t : Type.creusat_trail_trail, f : Type.creusat_formula_formula, step : Type.creusat_trail_step . Unset0.unset (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step))) -> Invariant0.invariant' step f -> Invariant1.invariant' t f -> (forall i : (int) . 0 <= i && i < Seq.length (Model1.model (Type.creusat_trail_trail_Trail_trail t)) -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
    | Type.CreuSat_Trail_Reason_Long cref -> forall k : (int) . 0 <= k && k < Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) -> IndexLogic0.index_logic (Seq.get (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) k) <> IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step)
    | _ -> true
    end)
end
module CreuSat_Logic_LogicTrail_LemmaUnsetToForall_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use mach.int.UInt64
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model3 with function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant3 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model5.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model3.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model2.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model1.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model1.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model0 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model1.model,
  function Model1.model = Model0.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model1.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model5.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model0.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model5.model, function Model1.model = Model1.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  let rec ghost function lemma_unset_to_forall (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (step : Type.creusat_trail_step) : ()
    requires {Unset0.unset (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step)))}
    requires {Invariant0.invariant' step f}
    requires {Invariant1.invariant' t f}
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model (Type.creusat_trail_trail_Trail_trail t)) -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
      | Type.CreuSat_Trail_Reason_Long cref -> forall k : (int) . 0 <= k && k < Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) -> IndexLogic0.index_logic (Seq.get (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) k) <> IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step)
      | _ -> true
      end }
    
   = 
    ()
end
module CreuSat_Logic_LogicTrail_LemmaForallToUnsetPush_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use mach.int.UInt64
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner_Interface as LitNotInLessInner0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model3
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  function lemma_forall_to_unset_push (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (step : Type.creusat_trail_step) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaForallToUnsetPush
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use mach.int.UInt64
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner_Interface as LitNotInLessInner0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model3
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  function lemma_forall_to_unset_push (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (step : Type.creusat_trail_step) : ()
    
   = 
    ()
  axiom lemma_forall_to_unset_push_spec : forall t : Type.creusat_trail_trail, f : Type.creusat_formula_formula, step : Type.creusat_trail_step . (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
    | Type.CreuSat_Trail_Reason_Long cref -> forall k : (int) . 0 <= k && k < Seq.length (Model2.model (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) -> IndexLogic0.index_logic (Seq.get (Model2.model (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) k) <> IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step)
    | _ -> true
    end) -> Invariant0.invariant' step f -> Unset0.unset (Seq.get (Model3.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step))) -> Invariant1.invariant' t f -> LitNotInLessInner0.lit_not_in_less_inner (Seq.snoc (Model0.model (Type.creusat_trail_trail_Trail_trail t)) step) f
end
module CreuSat_Logic_LogicTrail_LemmaForallToUnsetPush_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use mach.int.UInt64
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model6.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model3 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model2 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model2.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model1.model,
  function Model1.model = Model2.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant3 with function Model0.model = Model1.model,
  function Model1.model = Model2.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model1.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model3.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model6.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model3.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model6.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  let rec ghost function lemma_forall_to_unset_push (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (step : Type.creusat_trail_step) : ()
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail t)) -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail t)) i)) with
      | Type.CreuSat_Trail_Reason_Long cref -> forall k : (int) . 0 <= k && k < Seq.length (Model2.model (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) -> IndexLogic0.index_logic (Seq.get (Model2.model (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) k) <> IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step)
      | _ -> true
      end}
    requires {Invariant0.invariant' step f}
    requires {Unset0.unset (Seq.get (Model3.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step)))}
    requires {Invariant1.invariant' t f}
    ensures { LitNotInLessInner0.lit_not_in_less_inner (Seq.snoc (Model0.model (Type.creusat_trail_trail_Trail_trail t)) step) f }
    
   = 
    ()
end
module CreuSat_Logic_LogicTrail_LemmaPushMaintainsLitNotInLess_Interface
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner_Interface as LitNotInLessInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  function lemma_push_maintains_lit_not_in_less (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (step : Type.creusat_trail_step) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaPushMaintainsLitNotInLess
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner_Interface as LitNotInLessInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model3
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_LemmaForallToUnsetPush_Interface as LemmaForallToUnsetPush0 with function Model0.model = Model0.model,
  function Model1.model = Model2.model, function Model2.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Invariant0.invariant' = Invariant0.invariant',
  function Model3.model = Model1.model, predicate Unset0.unset = Unset0.unset,
  predicate Invariant1.invariant' = Invariant1.invariant',
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaUnsetToForall_Interface as LemmaUnsetToForall0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Unset0.unset = Unset0.unset,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  function Model1.model = Model0.model, function Model2.model = Model2.model, function Model3.model = Model3.model,
  axiom .
  function lemma_push_maintains_lit_not_in_less (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (step : Type.creusat_trail_step) : ()
    
   = 
    let _ = LemmaUnsetToForall0.lemma_unset_to_forall t f step in let _ = LemmaForallToUnsetPush0.lemma_forall_to_unset_push t f step in ()
  axiom lemma_push_maintains_lit_not_in_less_spec : forall t : Type.creusat_trail_trail, f : Type.creusat_formula_formula, step : Type.creusat_trail_step . LitNotInLessInner0.lit_not_in_less_inner (Model0.model (Type.creusat_trail_trail_Trail_trail t)) f -> Invariant0.invariant' step f -> Unset0.unset (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step))) -> Invariant1.invariant' t f -> Invariant2.invariant' f -> LitNotInLessInner0.lit_not_in_less_inner (Seq.snoc (Model0.model (Type.creusat_trail_trail_Trail_trail t)) step) f
end
module CreuSat_Logic_LogicTrail_LemmaPushMaintainsLitNotInLess_Impl
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model6 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model4.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model6.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant6 with function Model0.model = Model6.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant6.invariant',
  function Model0.model = Model6.model
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant5 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model2.model,
  function Model1.model = Model6.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model5 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant6.invariant', function Model1.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model5.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant4 with function Model0.model = Model2.model,
  function Model1.model = Model6.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant0 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant4.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model2.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model4.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model4.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicTrail_LemmaForallToUnsetPush as LemmaForallToUnsetPush0 with function Model0.model = Model0.model,
  function Model1.model = Model2.model, function Model2.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Invariant0.invariant' = Invariant0.invariant',
  function Model3.model = Model1.model, predicate Unset0.unset = Unset0.unset,
  predicate Invariant1.invariant' = Invariant1.invariant',
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaUnsetToForall as LemmaUnsetToForall0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Unset0.unset = Unset0.unset,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  function Model1.model = Model0.model, function Model2.model = Model2.model, function Model3.model = Model6.model,
  axiom .
  let rec ghost function lemma_push_maintains_lit_not_in_less (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (step : Type.creusat_trail_step) : ()
    requires {LitNotInLessInner0.lit_not_in_less_inner (Model0.model (Type.creusat_trail_trail_Trail_trail t)) f}
    requires {Invariant0.invariant' step f}
    requires {Unset0.unset (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step)))}
    requires {Invariant1.invariant' t f}
    requires {Invariant2.invariant' f}
    ensures { LitNotInLessInner0.lit_not_in_less_inner (Seq.snoc (Model0.model (Type.creusat_trail_trail_Trail_trail t)) step) f }
    
   = 
    let _ = LemmaUnsetToForall0.lemma_unset_to_forall t f step in let _ = LemmaForallToUnsetPush0.lemma_forall_to_unset_push t f step in ()
end
module CreuSat_Logic_LogicUtil_LastIdx_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  function last_idx (s : Seq.seq t) : int
end
module CreuSat_Logic_LogicUtil_LastIdx
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  function last_idx (s : Seq.seq t) : int = 
    Seq.length s - 1
  axiom last_idx_spec : forall s : Seq.seq t . Seq.length s > 0 -> true
end
module CreuSat_Logic_LogicUtil_LastIdx_Impl
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  let rec ghost function last_idx (s : Seq.seq t) : int
    requires {Seq.length s > 0}
    
   = 
    Seq.length s - 1
end
module CreuSat_Logic_LogicUtil_LastElem_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  function last_elem (s : Seq.seq t) : t
end
module CreuSat_Logic_LogicUtil_LastElem
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  function last_elem (s : Seq.seq t) : t = 
    Seq.get s (Seq.length s - 1)
  axiom last_elem_spec : forall s : Seq.seq t . Seq.length s > 0 -> true
end
module CreuSat_Logic_LogicUtil_LastElem_Impl
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  let rec ghost function last_elem (s : Seq.seq t) : t
    requires {Seq.length s > 0}
    
   = 
    Seq.get s (Seq.length s - 1)
end
module CreuSat_Logic_LogicUtil_LemmaPopMaintainsSorted_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = usize, axiom .
  clone CreuSat_Logic_LogicUtil_Sorted_Interface as Sorted0
  function lemma_pop_maintains_sorted (s : Seq.seq usize) : ()
end
module CreuSat_Logic_LogicUtil_LemmaPopMaintainsSorted
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = usize, axiom .
  clone CreuSat_Logic_LogicUtil_Sorted_Interface as Sorted0
  function lemma_pop_maintains_sorted (s : Seq.seq usize) : () = 
    ()
  axiom lemma_pop_maintains_sorted_spec : forall s : Seq.seq usize . Sorted0.sorted s -> Seq.length s > 0 -> Sorted0.sorted (Pop0.pop s)
end
module CreuSat_Logic_LogicUtil_LemmaPopMaintainsSorted_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  clone CreuSat_Logic_LogicUtil_Pop as Pop0 with type t = usize, axiom .
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  let rec ghost function lemma_pop_maintains_sorted (s : Seq.seq usize) : ()
    requires {Sorted0.sorted s}
    requires {Seq.length s > 0}
    ensures { Sorted0.sorted (Pop0.pop s) }
    
   = 
    ()
end
module CreuSat_Logic_LogicWatches_WatchesCrefsInRange_Interface
  use seq.Seq
  use Type
  predicate watches_crefs_in_range (w : Seq.seq (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global))) (f : Type.creusat_formula_formula)
    
end
module CreuSat_Logic_LogicWatches_WatchesCrefsInRange
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicWatches_WatcherCrefsInRange_Interface as WatcherCrefsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  predicate watches_crefs_in_range (w : Seq.seq (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global))) (f : Type.creusat_formula_formula)
    
   = 
    forall i : (int) . 0 <= i && i < Seq.length w -> WatcherCrefsInRange0.watcher_crefs_in_range (Model0.model (Seq.get w i)) f
end
module CreuSat_Logic_LogicWatches_LemmaPushMaintainsWatcherInvariant_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Type
  clone CreuSat_Logic_LogicWatches_WatcherCrefsInRange_Interface as WatcherCrefsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function lemma_push_maintains_watcher_invariant (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula) (o : Type.creusat_watches_watcher) : ()
    
end
module CreuSat_Logic_LogicWatches_LemmaPushMaintainsWatcherInvariant
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Type
  clone CreuSat_Logic_LogicWatches_WatcherCrefsInRange_Interface as WatcherCrefsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  function lemma_push_maintains_watcher_invariant (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula) (o : Type.creusat_watches_watcher) : ()
    
   = 
    ()
  axiom lemma_push_maintains_watcher_invariant_spec : forall w : Seq.seq (Type.creusat_watches_watcher), f : Type.creusat_formula_formula, o : Type.creusat_watches_watcher . UInt64.to_int (Type.creusat_watches_watcher_Watcher_cref o) < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) -> WatcherCrefsInRange0.watcher_crefs_in_range w f -> WatcherCrefsInRange0.watcher_crefs_in_range (Seq.snoc w o) f
end
module CreuSat_Logic_LogicWatches_LemmaPushMaintainsWatcherInvariant_Impl
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_WatcherCrefsInRange as WatcherCrefsInRange0 with function Model0.model = Model0.model
  let rec ghost function lemma_push_maintains_watcher_invariant (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula) (o : Type.creusat_watches_watcher) : ()
    requires {UInt64.to_int (Type.creusat_watches_watcher_Watcher_cref o) < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {WatcherCrefsInRange0.watcher_crefs_in_range w f}
    ensures { WatcherCrefsInRange0.watcher_crefs_in_range (Seq.snoc w o) f }
    
   = 
    ()
end
module CreuSat_Solver_GetAssertingLevel_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val get_asserting_level [@cfg:stackify] (clause : Type.creusat_clause_clause) (trail : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) : (usize, usize)
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model0.model clause)}
    requires {VarsInRangeInner0.vars_in_range_inner (Model0.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Seq.length (Model0.model clause) > 1}
    requires {Invariant0.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {EquisatExtensionInner0.equisat_extension_inner clause (Model1.model f)}
    requires {Invariant1.invariant' trail f}
    requires {Invariant2.invariant' f}
    ensures { UInt64.to_int (let (a, _) = result in a) < Seq.length (Model0.model clause) }
    
end
module CreuSat_Solver_GetAssertingLevel
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model8 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model8.model
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model3 with function Model0.model = Model7.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model2 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant6 with function Model0.model = Model7.model,
  function Model1.model = Model2.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model4.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model7.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model5.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model2.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model7.model,
  function Model1.model = Model2.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model5.model,
  function Model1.model = Model8.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model5.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model5.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model4.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model8.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model4.model, function Model1.model = Model5.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model2.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model7.model,
  predicate Invariant0.invariant' = Invariant0.invariant', function Model1.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model3.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy3 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = usize
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_lit_lit
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model6.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model6.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl16_Index_Interface as Index2 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model4.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone CreuSat_Lit_Impl1_Index_Interface as Index1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  let rec cfg get_asserting_level [@cfg:stackify] (clause : Type.creusat_clause_clause) (trail : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) : (usize, usize)
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model0.model clause)}
    requires {VarsInRangeInner0.vars_in_range_inner (Model0.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Seq.length (Model0.model clause) > 1}
    requires {Invariant0.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {EquisatExtensionInner0.equisat_extension_inner clause (Model1.model f)}
    requires {Invariant1.invariant' trail f}
    requires {Invariant2.invariant' f}
    ensures { UInt64.to_int (let (a, _) = result in a) < Seq.length (Model0.model clause) }
    
   = 
  var _0 : (usize, usize);
  var clause_1 : Type.creusat_clause_clause;
  var trail_2 : Type.creusat_trail_trail;
  var f_3 : Type.creusat_formula_formula;
  var _4 : ();
  var max_i_5 : usize;
  var max_level_6 : usize;
  var _7 : usize;
  var _8 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _9 : usize;
  var _10 : Type.creusat_lit_lit;
  var _11 : Type.creusat_lit_lit;
  var _12 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var i_13 : usize;
  var _14 : ();
  var _15 : ();
  var _16 : bool;
  var _17 : usize;
  var _18 : usize;
  var _19 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var level_20 : usize;
  var _21 : usize;
  var _22 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _23 : usize;
  var _24 : Type.creusat_lit_lit;
  var _25 : Type.creusat_lit_lit;
  var _26 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _27 : usize;
  var _28 : ();
  var _29 : bool;
  var _30 : usize;
  var _31 : usize;
  var _32 : usize;
  var _33 : usize;
  var _34 : ();
  var _35 : ();
  var _36 : ();
  var _37 : usize;
  var _38 : usize;
  {
    clause_1 <- clause;
    trail_2 <- trail;
    f_3 <- f;
    goto BB0
  }
  BB0 {
    max_i_5 <- (1 : usize);
    _8 <- Type.creusat_trail_trail_Trail_lit_to_level trail_2;
    _12 <- Type.creusat_clause_clause_Clause_rest clause_1;
    _11 <- Index0.index _12 (1 : usize);
    goto BB1
  }
  BB1 {
    _10 <- _11;
    _9 <- Index1.index _10;
    goto BB2
  }
  BB2 {
    _7 <- Index2.index _8 _9;
    goto BB3
  }
  BB3 {
    max_level_6 <- _7;
    i_13 <- (2 : usize);
    goto BB4
  }
  BB4 {
    invariant max_i_less { UInt64.to_int max_i_5 < Seq.length (Model0.model clause_1) };
    _17 <- i_13;
    _19 <- Type.creusat_clause_clause_Clause_rest clause_1;
    _18 <- Len0.len _19;
    goto BB5
  }
  BB5 {
    _16 <- _17 < _18;
    switch (_16)
      | False -> goto BB13
      | _ -> goto BB6
      end
  }
  BB6 {
    _22 <- Type.creusat_trail_trail_Trail_lit_to_level trail_2;
    _26 <- Type.creusat_clause_clause_Clause_rest clause_1;
    _27 <- i_13;
    _25 <- Index0.index _26 _27;
    goto BB7
  }
  BB7 {
    _24 <- _25;
    _23 <- Index1.index _24;
    goto BB8
  }
  BB8 {
    _21 <- Index2.index _22 _23;
    goto BB9
  }
  BB9 {
    level_20 <- _21;
    _30 <- level_20;
    _31 <- max_level_6;
    _29 <- _30 > _31;
    switch (_29)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    _32 <- level_20;
    max_level_6 <- _32;
    _33 <- i_13;
    max_i_5 <- _33;
    _28 <- ();
    goto BB12
  }
  BB11 {
    _28 <- ();
    goto BB12
  }
  BB12 {
    i_13 <- i_13 + (1 : usize);
    _15 <- ();
    goto BB4
  }
  BB13 {
    _14 <- ();
    _37 <- max_i_5;
    _38 <- max_level_6;
    _0 <- (_37, _38);
    return _0
  }
  
end
module CreuSat_Trail_Impl0_Backstep_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision_Interface as InvariantNoDecision0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  val backstep [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (f : Type.creusat_formula_formula) : usize
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    requires {InvariantNoDecision0.invariant_no_decision ( * self) f}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) > 0}
    requires {Invariant0.invariant' f}
    ensures { UInt64.to_int result < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) }
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { InvariantNoDecision0.invariant_no_decision ( ^ self) f }
    
end
module CreuSat_Trail_Impl0_Backstep
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model7 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreuSat_Logic_LogicUtil_Pop as Pop0 with type t = Type.creusat_trail_step, axiom .
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model3 with type t = borrowed (Type.creusat_trail_trail)
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model2.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model7.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model7.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model7.model
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant6 with function Model0.model = Model5.model,
  function Model1.model = Model7.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Invariant1.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model5.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model6 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model5.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model7.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model6.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model5.model,
  function Model1.model = Model7.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model2.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant3 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model2.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicTrail_LemmaTrailOnlyLast as LemmaTrailOnlyLast0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant1.invariant' = Invariant0.invariant', predicate Invariant2.invariant' = Invariant3.invariant',
  function Model1.model = Model5.model, predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailPost as LemmaTrailPost0 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant0.invariant',
  function Model0.model = Model0.model, function Model1.model = Model5.model, function Model2.model = Model1.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailFin2 as LemmaTrailFin20 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  function Model2.model = Model5.model, predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Invariant0.invariant' = Invariant2.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant1.invariant' = Invariant3.invariant', predicate Invariant2.invariant' = Invariant0.invariant',
  function Pop0.pop = Pop0.pop, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function LemmaTrailPost0.lemma_trail_post = LemmaTrailPost0.lemma_trail_post,
  function LemmaTrailOnlyLast0.lemma_trail_only_last = LemmaTrailOnlyLast0.lemma_trail_only_last,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaTrailFin as LemmaTrailFin0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Invariant1.invariant' = Invariant2.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant2.invariant' = Invariant0.invariant', function Model1.model = Model5.model,
  function Model2.model = Model1.model, predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function LemmaTrailPost0.lemma_trail_post = LemmaTrailPost0.lemma_trail_post,
  function LemmaTrailOnlyLast0.lemma_trail_only_last = LemmaTrailOnlyLast0.lemma_trail_only_last,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaPopNoUnassIsOk as LemmaPopNoUnassIsOk0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant0.invariant' = Invariant3.invariant', function Pop0.pop = Pop0.pop, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaBacktrackOk as LemmaBacktrackOk0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Invariant0.invariant' = Invariant2.invariant',
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate Invariant1.invariant' = Invariant3.invariant', predicate Invariant2.invariant' = Invariant0.invariant',
  function Pop0.pop = Pop0.pop, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function LemmaPopNoUnassIsOk0.lemma_pop_no_unass_is_ok = LemmaPopNoUnassIsOk0.lemma_pop_no_unass_is_ok,
  function LemmaTrailFin0.lemma_trail_fin = LemmaTrailFin0.lemma_trail_fin,
  function LemmaTrailFin20.lemma_trail_fin2 = LemmaTrailFin20.lemma_trail_fin2, function Model2.model = Model5.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner, axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = usize
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere1 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = uint8
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = uint8
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_trail_trail),
  function Model0.model = Model3.model
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere,
  predicate HasValue0.has_value = HasValue1.has_value, type Output0.output = Output1.output
  clone CreuSat_Lit_Impl1_Index_Interface as Index0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model4.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Model_Impl1_Model as Model9 with type t = Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone Alloc_Vec_Impl1_Pop_Interface as Pop1 with type t = Type.creusat_trail_step, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model, function Model1.model = Model9.model
  let rec cfg backstep [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (f : Type.creusat_formula_formula) : usize
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    requires {InvariantNoDecision0.invariant_no_decision ( * self) f}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) > 0}
    requires {Invariant0.invariant' f}
    ensures { UInt64.to_int result < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) }
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { InvariantNoDecision0.invariant_no_decision ( ^ self) f }
    
   = 
  var _0 : usize;
  var self_1 : borrowed (Type.creusat_trail_trail);
  var f_2 : Type.creusat_formula_formula;
  var _3 : ();
  var old_t_4 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_trail_trail));
  var _5 : borrowed (Type.creusat_trail_trail);
  var _6 : borrowed (Type.creusat_trail_trail);
  var last_7 : Type.core_option_option (Type.creusat_trail_step);
  var _8 : borrowed (Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global));
  var _9 : ();
  var _10 : isize;
  var step_11 : Type.creusat_trail_step;
  var _12 : ();
  var _13 : borrowed uint8;
  var _14 : borrowed (Type.alloc_vec_vec uint8 (Type.alloc_alloc_global));
  var _15 : usize;
  var _16 : Type.creusat_lit_lit;
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var _20 : borrowed usize;
  var _21 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _22 : usize;
  var _23 : Type.creusat_lit_lit;
  var _24 : ();
  var _25 : Type.creusat_lit_lit;
  var _26 : ();
  var _27 : ();
  var _28 : ();
  var _29 : ();
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : ();
  {
    self_1 <- self;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    _6 <- self_1;
    _5 <- _6;
    old_t_4 <- Record0.record _5;
    goto BB1
  }
  BB1 {
    _8 <- borrow_mut (Type.creusat_trail_trail_Trail_trail ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Trail_Trail a b c d e =  * self_1 in Type.CreuSat_Trail_Trail a b ( ^ _8) d e) };
    last_7 <- Pop1.pop _8;
    goto BB2
  }
  BB2 {
    switch (last_7)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    assert { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) f_2 (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self_1))) };
    _26 <- ();
    _9 <- ();
    assert { Invariant1.invariant' (Type.creusat_trail_trail_Trail_assignments ( * self_1)) f_2 };
    _27 <- ();
    assert { TrailInvariant0.trail_invariant (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) f_2 };
    _28 <- ();
    assert { LitToLevelInvariant0.lit_to_level_invariant (Model2.model (Type.creusat_trail_trail_Trail_lit_to_level ( * self_1))) f_2 };
    _29 <- ();
    assert { LitNotInLess0.lit_not_in_less ( * self_1) f_2 };
    _30 <- ();
    assert { LitIsUnique0.lit_is_unique ( * self_1) };
    _31 <- ();
    assert { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) f_2 (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self_1))) };
    _32 <- ();
    assert { TrailEntriesAreAssigned0.trail_entries_are_assigned ( * self_1) };
    _33 <- ();
    _0 <- (0 : usize);
    goto BB11
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB5 {
    step_11 <- Type.core_option_option_Some_0 last_7;
    _14 <- borrow_mut (Type.creusat_assignments_assignments_Assignments_0 (Type.creusat_trail_trail_Trail_assignments ( * self_1)));
    self_1 <- { self_1 with current = (let Type.CreuSat_Trail_Trail a b c d e =  * self_1 in Type.CreuSat_Trail_Trail (let Type.CreuSat_Assignments_Assignments a = Type.creusat_trail_trail_Trail_assignments ( * self_1) in Type.CreuSat_Assignments_Assignments ( ^ _14)) b c d e) };
    _16 <- Type.creusat_trail_step_Step_lit step_11;
    _15 <- Index0.index _16;
    goto BB6
  }
  BB6 {
    _13 <- IndexMut0.index_mut _14 _15;
    goto BB7
  }
  BB7 {
    _13 <- { _13 with current = ( * _13 + (2 : uint8)) };
    assume { Resolve1.resolve _13 };
    assert { Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1)) = Pop0.pop (Model0.model (Type.creusat_trail_trail_Trail_trail ( * Model3.model old_t_4))) };
    _17 <- ();
    assert {  ^ Model3.model old_t_4 =  ^ self_1 };
    _18 <- ();
    assert { let _ = LemmaBacktrackOk0.lemma_backtrack_ok ( * self_1) f_2 (Type.creusat_trail_step_Step_lit step_11) in true };
    _19 <- ();
    _21 <- borrow_mut (Type.creusat_trail_trail_Trail_lit_to_level ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Trail_Trail a b c d e =  * self_1 in Type.CreuSat_Trail_Trail a ( ^ _21) c d e) };
    assume { Resolve0.resolve self_1 };
    _23 <- Type.creusat_trail_step_Step_lit step_11;
    _22 <- Index0.index _23;
    goto BB8
  }
  BB8 {
    _20 <- IndexMut1.index_mut _21 _22;
    goto BB9
  }
  BB9 {
    _20 <- { _20 with current = (18446744073709551615 : usize) };
    assume { Resolve2.resolve _20 };
    assert { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) f_2 (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self_1))) };
    _24 <- ();
    _25 <- Type.creusat_trail_step_Step_lit step_11;
    _0 <- Index0.index _25;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module CreuSat_Trail_Impl0_BacktrackTo_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  val backtrack_to [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (level : usize) (f : Type.creusat_formula_formula) (d : borrowed (Type.creusat_decision_decisions)) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    requires {Invariant0.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Invariant1.invariant' ( * self) f}
    requires {Invariant2.invariant' f}
    requires {Seq.length (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self))) > UInt64.to_int level}
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { Invariant0.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    ensures { Invariant1.invariant' ( ^ self) f }
    
end
module CreuSat_Trail_Impl0_BacktrackTo
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  use mach.int.Int32
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model9 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicUtil_Pop as Pop0 with type t = usize, axiom .
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicUtil_LemmaPopMaintainsSorted as LemmaPopMaintainsSorted0 with predicate Sorted0.sorted = Sorted0.sorted,
  function Pop0.pop = Pop0.pop, axiom .
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model4 with type t = borrowed (Type.creusat_decision_decisions)
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model3 with type t = borrowed (Type.creusat_trail_trail)
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model2.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant0 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model9.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model9.model
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model9.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model9.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model9.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model7.model,
  function Model1.model = Model9.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model7.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model8 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model7.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model9.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model8.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model7.model,
  function Model1.model = Model9.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model2.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model2.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = usize, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_decision_decisions
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_decision_node
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_decision_node
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_decision_node
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = usize
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record1 with type t = borrowed (Type.creusat_decision_decisions),
  function Model0.model = Model4.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_trail_trail),
  function Model0.model = Model3.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model11 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model2.model
  clone Alloc_Vec_Impl1_Pop_Interface as Pop1 with type t = usize, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model, function Model1.model = Model11.model
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with type t = usize, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_decision_node, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model5.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_trail_step, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  clone CreuSat_Trail_Impl0_Backstep_Interface as Backstep0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  predicate Invariant0.invariant' = Invariant2.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg backtrack_to [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (level : usize) (f : Type.creusat_formula_formula) (d : borrowed (Type.creusat_decision_decisions)) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    requires {Invariant0.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Invariant1.invariant' ( * self) f}
    requires {Invariant2.invariant' f}
    requires {Seq.length (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self))) > UInt64.to_int level}
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { Invariant0.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    ensures { Invariant1.invariant' ( ^ self) f }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_trail_trail);
  var level_2 : usize;
  var f_3 : Type.creusat_formula_formula;
  var d_4 : borrowed (Type.creusat_decision_decisions);
  var old_t_5 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_trail_trail));
  var _6 : borrowed (Type.creusat_trail_trail);
  var _7 : borrowed (Type.creusat_trail_trail);
  var old_d_8 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_decision_decisions));
  var _9 : borrowed (Type.creusat_decision_decisions);
  var _10 : borrowed (Type.creusat_decision_decisions);
  var how_many_11 : usize;
  var _12 : usize;
  var _13 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var _14 : usize;
  var _15 : usize;
  var _16 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _17 : usize;
  var des_18 : usize;
  var _19 : usize;
  var _20 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _21 : usize;
  var i_22 : usize;
  var curr_23 : usize;
  var timestamp_24 : usize;
  var _25 : bool;
  var _26 : usize;
  var _27 : Type.creusat_decision_node;
  var _28 : Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global);
  var _29 : usize;
  var _30 : ();
  var _31 : ();
  var _32 : bool;
  var _33 : usize;
  var _34 : usize;
  var idx_35 : usize;
  var _36 : borrowed (Type.creusat_trail_trail);
  var _37 : Type.creusat_formula_formula;
  var _38 : ();
  var curr_timestamp_39 : usize;
  var _40 : Type.creusat_decision_node;
  var _41 : Type.alloc_vec_vec (Type.creusat_decision_node) (Type.alloc_alloc_global);
  var _42 : usize;
  var _43 : ();
  var _44 : bool;
  var _45 : usize;
  var _46 : usize;
  var _47 : usize;
  var _48 : usize;
  var _49 : ();
  var _50 : ();
  var _51 : ();
  var _52 : usize;
  var _53 : ();
  var _54 : bool;
  var _55 : usize;
  var _56 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _57 : usize;
  var old_t2_58 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_trail_trail));
  var _59 : borrowed (Type.creusat_trail_trail);
  var _60 : borrowed (Type.creusat_trail_trail);
  var _61 : ();
  var _62 : ();
  var _63 : ();
  var _64 : ();
  var _65 : Type.core_option_option usize;
  var _66 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _67 : isize;
  var _68 : ();
  var _69 : ();
  var _70 : ();
  var _71 : ();
  var _72 : ();
  var _73 : ();
  var _74 : ();
  var _75 : ();
  var _76 : ();
  var _77 : bool;
  var _78 : bool;
  var _79 : usize;
  var _80 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _81 : bool;
  var _82 : usize;
  var _83 : usize;
  var _84 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _85 : usize;
  var _86 : usize;
  var _87 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _88 : usize;
  var _89 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var old_t3_90 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_trail_trail));
  var _91 : borrowed (Type.creusat_trail_trail);
  var _92 : borrowed (Type.creusat_trail_trail);
  var _93 : ();
  var _94 : ();
  var _95 : ();
  var _96 : ();
  var _97 : Type.core_option_option usize;
  var _98 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _99 : isize;
  var _100 : ();
  var _101 : ();
  var _102 : ();
  var _103 : ();
  var _104 : ();
  var _105 : ();
  var _106 : ();
  var _107 : ();
  var _108 : ();
  var _109 : ();
  var _110 : ();
  var _111 : ();
  var _112 : ();
  var _113 : ();
  var _114 : ();
  var _115 : ();
  var _116 : ();
  var _117 : ();
  var _118 : usize;
  {
    self_1 <- self;
    level_2 <- level;
    f_3 <- f;
    d_4 <- d;
    goto BB0
  }
  BB0 {
    _7 <- self_1;
    _6 <- _7;
    old_t_5 <- Record0.record _6;
    goto BB1
  }
  BB1 {
    _10 <- d_4;
    _9 <- _10;
    old_d_8 <- Record1.record _9;
    goto BB2
  }
  BB2 {
    _13 <- Type.creusat_trail_trail_Trail_trail ( * self_1);
    _12 <- Len0.len _13;
    goto BB3
  }
  BB3 {
    _16 <- Type.creusat_trail_trail_Trail_decisions ( * self_1);
    _17 <- level_2;
    _15 <- Index0.index _16 _17;
    goto BB4
  }
  BB4 {
    _14 <- _15;
    how_many_11 <- _12 - _14;
    _20 <- Type.creusat_trail_trail_Trail_decisions ( * self_1);
    _21 <- level_2;
    _19 <- Index0.index _20 _21;
    goto BB5
  }
  BB5 {
    des_18 <- _19;
    i_22 <- (0 : usize);
    curr_23 <- Type.creusat_decision_decisions_Decisions_search ( * d_4);
    _26 <- curr_23;
    _25 <- _26 <> (18446744073709551615 : usize);
    switch (_25)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB6 {
    _28 <- Type.creusat_decision_decisions_Decisions_linked_list ( * d_4);
    _29 <- curr_23;
    _27 <- Index1.index _28 _29;
    goto BB7
  }
  BB7 {
    timestamp_24 <- Type.creusat_decision_node_Node_ts _27;
    goto BB9
  }
  BB8 {
    timestamp_24 <- (0 : usize);
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    invariant i_less2 { UInt64.to_int i_22 <= Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail ( * Model3.model old_t_5))) };
    invariant i_less { i_22 <= how_many_11 };
    invariant post_unit { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) f_3 (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self_1))) };
    invariant inv { InvariantNoDecision0.invariant_no_decision ( * self_1) f_3 };
    invariant d_inv { Invariant0.invariant' ( * d_4) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_3)) };
    invariant proph {  ^ Model3.model old_t_5 =  ^ self_1 };
    invariant proph_d {  ^ Model4.model old_d_8 =  ^ d_4 };
    invariant curr_less { UInt64.to_int curr_23 < Seq.length (Model5.model (Type.creusat_decision_decisions_Decisions_linked_list ( * d_4))) || UInt64.to_int curr_23 = 18446744073709551615 };
    _33 <- i_22;
    _34 <- how_many_11;
    _32 <- _33 < _34;
    switch (_32)
      | False -> goto BB17
      | _ -> goto BB11
      end
  }
  BB11 {
    _36 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _36) };
    _37 <- f_3;
    idx_35 <- Backstep0.backstep _36 _37;
    goto BB12
  }
  BB12 {
    assert { UInt64.to_int idx_35 < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_3) };
    _38 <- ();
    _41 <- Type.creusat_decision_decisions_Decisions_linked_list ( * d_4);
    _42 <- idx_35;
    _40 <- Index1.index _41 _42;
    goto BB13
  }
  BB13 {
    curr_timestamp_39 <- Type.creusat_decision_node_Node_ts _40;
    _45 <- curr_timestamp_39;
    _46 <- timestamp_24;
    _44 <- _45 > _46;
    switch (_44)
      | False -> goto BB15
      | _ -> goto BB14
      end
  }
  BB14 {
    _47 <- curr_timestamp_39;
    timestamp_24 <- _47;
    _48 <- idx_35;
    curr_23 <- _48;
    _43 <- ();
    goto BB16
  }
  BB15 {
    _43 <- ();
    goto BB16
  }
  BB16 {
    i_22 <- i_22 + (1 : usize);
    _31 <- ();
    goto BB10
  }
  BB17 {
    _30 <- ();
    _52 <- curr_23;
    d_4 <- { d_4 with current = (let Type.CreuSat_Decision_Decisions a b c d =  * d_4 in Type.CreuSat_Decision_Decisions a b c _52) };
    assume { Resolve0.resolve d_4 };
    goto BB18
  }
  BB18 {
    invariant post_unit { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) f_3 (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self_1))) };
    invariant inv { InvariantNoDecision0.invariant_no_decision ( * self_1) f_3 };
    invariant proph {  ^ Model3.model old_t_5 =  ^ self_1 };
    _56 <- Type.creusat_trail_trail_Trail_decisions ( * self_1);
    _55 <- Len1.len _56;
    goto BB19
  }
  BB19 {
    _57 <- level_2;
    _54 <- _55 > _57;
    switch (_54)
      | False -> goto BB26
      | _ -> goto BB20
      end
  }
  BB20 {
    _60 <- self_1;
    _59 <- _60;
    old_t2_58 <- Record0.record _59;
    goto BB21
  }
  BB21 {
    assert { Sorted0.sorted (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self_1))) };
    _61 <- ();
    assert { Seq.length (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self_1))) > 0 };
    _62 <- ();
    assert { let _ = LemmaPopMaintainsSorted0.lemma_pop_maintains_sorted (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self_1))) in true };
    _63 <- ();
    _66 <- borrow_mut (Type.creusat_trail_trail_Trail_decisions ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Trail_Trail a b c d e =  * self_1 in Type.CreuSat_Trail_Trail a b c d ( ^ _66)) };
    _65 <- Pop1.pop _66;
    goto BB22
  }
  BB22 {
    switch (_65)
      | Type.Core_Option_Option_None -> goto BB23
      | Type.Core_Option_Option_Some _ -> goto BB25
      end
  }
  BB23 {
    assume { Resolve1.resolve self_1 };
    absurd
  }
  BB24 {
    assume { Resolve1.resolve self_1 };
    absurd
  }
  BB25 {
    assert { Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self_1)) = Pop0.pop (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * Model3.model old_t2_58))) };
    _68 <- ();
    assert {  ^ Model3.model old_t2_58 =  ^ self_1 };
    _69 <- ();
    _64 <- ();
    assert { Sorted0.sorted (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self_1))) };
    _72 <- ();
    _31 <- ();
    goto BB18
  }
  BB26 {
    _53 <- ();
    goto BB27
  }
  BB27 {
    invariant post_unit { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) f_3 (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self_1))) };
    invariant inv { InvariantNoDecision0.invariant_no_decision ( * self_1) f_3 };
    invariant proph {  ^ Model3.model old_t_5 =  ^ self_1 };
    _80 <- Type.creusat_trail_trail_Trail_decisions ( * self_1);
    _79 <- Len1.len _80;
    goto BB31
  }
  BB28 {
    _77 <- false;
    goto BB30
  }
  BB29 {
    _84 <- Type.creusat_trail_trail_Trail_decisions ( * self_1);
    _87 <- Type.creusat_trail_trail_Trail_decisions ( * self_1);
    _86 <- Len1.len _87;
    goto BB32
  }
  BB30 {
    switch (_77)
      | False -> goto BB41
      | _ -> goto BB35
      end
  }
  BB31 {
    _78 <- _79 > (0 : usize);
    switch (_78)
      | False -> goto BB28
      | _ -> goto BB29
      end
  }
  BB32 {
    _85 <- _86 - (1 : usize);
    _83 <- Index0.index _84 _85;
    goto BB33
  }
  BB33 {
    _82 <- _83;
    _89 <- Type.creusat_trail_trail_Trail_trail ( * self_1);
    _88 <- Len0.len _89;
    goto BB34
  }
  BB34 {
    _81 <- _82 > _88;
    _77 <- _81;
    goto BB30
  }
  BB35 {
    _92 <- self_1;
    _91 <- _92;
    old_t3_90 <- Record0.record _91;
    goto BB36
  }
  BB36 {
    assert { Sorted0.sorted (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self_1))) };
    _93 <- ();
    assert { Seq.length (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self_1))) > 0 };
    _94 <- ();
    assert { let _ = LemmaPopMaintainsSorted0.lemma_pop_maintains_sorted (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self_1))) in true };
    _95 <- ();
    _98 <- borrow_mut (Type.creusat_trail_trail_Trail_decisions ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Trail_Trail a b c d e =  * self_1 in Type.CreuSat_Trail_Trail a b c d ( ^ _98)) };
    _97 <- Pop1.pop _98;
    goto BB37
  }
  BB37 {
    switch (_97)
      | Type.Core_Option_Option_None -> goto BB38
      | Type.Core_Option_Option_Some _ -> goto BB40
      end
  }
  BB38 {
    assume { Resolve1.resolve self_1 };
    absurd
  }
  BB39 {
    assume { Resolve1.resolve self_1 };
    absurd
  }
  BB40 {
    assert { Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self_1)) = Pop0.pop (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * Model3.model old_t3_90))) };
    _100 <- ();
    assert {  ^ Model3.model old_t3_90 =  ^ self_1 };
    _101 <- ();
    _96 <- ();
    assert { let _ = LemmaPopMaintainsSorted0.lemma_pop_maintains_sorted (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * Model3.model old_t3_90))) in true };
    _104 <- ();
    assert { Sorted0.sorted (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self_1))) };
    _105 <- ();
    _31 <- ();
    goto BB27
  }
  BB41 {
    _76 <- ();
    assert { Seq.length (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self_1))) = 0 || UInt64.to_int (Seq.get (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self_1))) (Seq.length (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self_1))) - 1)) <= Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) };
    _109 <- ();
    assert { DecisionsInvariant0.decisions_invariant (Model2.model (Type.creusat_trail_trail_Trail_decisions ( * self_1))) (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) };
    _110 <- ();
    assert { Invariant3.invariant' (Type.creusat_trail_trail_Trail_assignments ( * self_1)) f_3 };
    _111 <- ();
    assert { TrailInvariant0.trail_invariant (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) f_3 };
    _112 <- ();
    assert { LitToLevelInvariant0.lit_to_level_invariant (Model2.model (Type.creusat_trail_trail_Trail_lit_to_level ( * self_1))) f_3 };
    _113 <- ();
    assert { LitNotInLess0.lit_not_in_less ( * self_1) f_3 };
    _114 <- ();
    assert { LitIsUnique0.lit_is_unique ( * self_1) };
    _115 <- ();
    assert { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) f_3 (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self_1))) };
    _116 <- ();
    assert { TrailEntriesAreAssigned0.trail_entries_are_assigned ( * self_1) };
    _117 <- ();
    _118 <- level_2;
    self_1 <- { self_1 with current = (let Type.CreuSat_Trail_Trail a b c d e =  * self_1 in Type.CreuSat_Trail_Trail a b c _118 e) };
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Trail_Impl0_BacktrackSafe_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  val backtrack_safe [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (level : usize) (f : Type.creusat_formula_formula) (d : borrowed (Type.creusat_decision_decisions)) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    requires {Invariant0.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Invariant1.invariant' ( * self) f}
    requires {Invariant2.invariant' f}
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { Invariant0.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    ensures { Invariant1.invariant' ( ^ self) f }
    
end
module CreuSat_Trail_Impl0_BacktrackSafe
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model7 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model5.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant0 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model7.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model7.model
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model7.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model3.model,
  function Model1.model = Model7.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model3.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model6 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model7.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model6.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model3.model,
  function Model1.model = Model7.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model5.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model5.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_decision_decisions
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_trail_trail
  clone CreuSat_Trail_Impl0_DecisionLevel_Interface as DecisionLevel0 with function Model0.model = Model5.model
  clone CreuSat_Trail_Impl0_BacktrackTo_Interface as BacktrackTo0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Invariant2.invariant' = Invariant2.invariant', function Model2.model = Model5.model,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg backtrack_safe [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (level : usize) (f : Type.creusat_formula_formula) (d : borrowed (Type.creusat_decision_decisions)) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    requires {Invariant0.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Invariant1.invariant' ( * self) f}
    requires {Invariant2.invariant' f}
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { Invariant0.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    ensures { Invariant1.invariant' ( ^ self) f }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_trail_trail);
  var level_2 : usize;
  var f_3 : Type.creusat_formula_formula;
  var d_4 : borrowed (Type.creusat_decision_decisions);
  var _5 : bool;
  var _6 : usize;
  var _7 : usize;
  var _8 : Type.creusat_trail_trail;
  var _9 : ();
  var _10 : borrowed (Type.creusat_trail_trail);
  var _11 : usize;
  var _12 : Type.creusat_formula_formula;
  var _13 : borrowed (Type.creusat_decision_decisions);
  {
    self_1 <- self;
    level_2 <- level;
    f_3 <- f;
    d_4 <- d;
    goto BB0
  }
  BB0 {
    _6 <- level_2;
    _8 <-  * self_1;
    _7 <- DecisionLevel0.decision_level _8;
    goto BB1
  }
  BB1 {
    _5 <- _6 < _7;
    switch (_5)
      | False -> goto BB4
      | _ -> goto BB2
      end
  }
  BB2 {
    _10 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _10) };
    _11 <- level_2;
    _12 <- f_3;
    _13 <- borrow_mut ( * d_4);
    d_4 <- { d_4 with current = ( ^ _13) };
    _9 <- BacktrackTo0.backtrack_to _10 _11 _12 _13;
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve d_4 };
    _0 <- ();
    goto BB5
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve d_4 };
    _0 <- ();
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreuSat_Trail_Impl0_EnqAssignment_Interface
  use seq.Seq
  use Type
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone CreuSat_Logic_LogicLit_Impl1_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToLit_Interface as ClausePostWithRegardsToLit0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant3
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model3
  clone CreuSat_Logic_LogicLit_Impl1_LitIn_Interface as LitIn0
  clone CreuSat_Logic_LogicClause_Impl2_Unit_Interface as Unit0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl1_IdxInTrail_Interface as IdxInTrail0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  val enq_assignment [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (step : Type.creusat_trail_step) (_f : Type.creusat_formula_formula) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) _f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    requires {Unset0.unset (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self))) (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step)))}
    requires {not (IdxInTrail0.idx_in_trail (Type.creusat_trail_step_Step_lit step) (Type.creusat_trail_trail_Trail_trail ( * self)))}
    requires {match (Type.creusat_trail_step_Step_reason step) with
      | Type.CreuSat_Trail_Reason_Long cref -> UInt64.to_int cref < Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses _f)) && Unit0.unit (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int cref)) (Type.creusat_trail_trail_Trail_assignments ( * self)) && LitIn0.lit_in (Type.creusat_trail_step_Step_lit step) (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int cref))
      | Type.CreuSat_Trail_Reason_Unit cref -> UInt64.to_int cref < Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses _f)) && Type.creusat_trail_step_Step_lit step = Seq.get (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int cref))) 0
      | _ -> true
      end}
    requires {Invariant0.invariant' step _f}
    requires {Invariant1.invariant' (Type.creusat_trail_step_Step_lit step) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {Invariant2.invariant' _f}
    requires {Invariant3.invariant' ( * self) _f}
    ensures { Type.creusat_trail_trail_Trail_decisions ( ^ self) = Type.creusat_trail_trail_Trail_decisions ( * self) }
    ensures { Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) = 1 + Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) }
    ensures { match (Type.creusat_trail_step_Step_reason step) with
      | Type.CreuSat_Trail_Reason_Long k -> ClausePostWithRegardsToLit0.clause_post_with_regards_to_lit (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int k)) (Type.creusat_trail_trail_Trail_assignments ( ^ self)) (Type.creusat_trail_step_Step_lit step)
      | _ -> true
      end }
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) _f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { Sat0.sat (Type.creusat_trail_step_Step_lit step) (Type.creusat_trail_trail_Trail_assignments ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self))) && j <> IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step) -> Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self))) j = Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) j }
    ensures { Invariant3.invariant' ( ^ self) _f }
    
end
module CreuSat_Trail_Impl0_EnqAssignment
  use seq.Seq
  use Type
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model7.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model3 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicLit_Impl1_LitIn as LitIn0 with function Model0.model = Model3.model
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner as UnsetInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model3.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant5 with function Model0.model = Model3.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model3.model
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone CreuSat_Logic_LogicClause_Impl2_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner1.sat_inner, function Model0.model = Model3.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model6 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model1.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model6.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant4 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant4.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model2.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant6 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit as PostUnit0 with function Model0.model = Model1.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToLit as ClausePostWithRegardsToLit0 with predicate PostUnit0.post_unit = PostUnit0.post_unit,
  function Model0.model = Model3.model,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicClause_Impl2_Unit as Unit0 with function Model0.model = Model1.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant6.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model7.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant3 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model7.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicTrail_LemmaForallToUnsetPush as LemmaForallToUnsetPush0 with function Model0.model = Model0.model,
  function Model1.model = Model2.model, function Model2.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Invariant0.invariant' = Invariant0.invariant',
  function Model3.model = Model1.model, predicate Unset0.unset = Unset0.unset,
  predicate Invariant1.invariant' = Invariant3.invariant',
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner, axiom .
  clone CreuSat_Logic_LogicTrail_LemmaUnsetToForall as LemmaUnsetToForall0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Unset0.unset = Unset0.unset,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant3.invariant',
  function Model1.model = Model0.model, function Model2.model = Model2.model, function Model3.model = Model3.model,
  axiom .
  clone CreuSat_Logic_LogicTrail_LemmaPushMaintainsLitNotInLess as LemmaPushMaintainsLitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner,
  predicate Invariant0.invariant' = Invariant0.invariant', function Model1.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Unset0.unset = Unset0.unset,
  predicate Invariant1.invariant' = Invariant3.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function LemmaUnsetToForall0.lemma_unset_to_forall = LemmaUnsetToForall0.lemma_unset_to_forall,
  function LemmaForallToUnsetPush0.lemma_forall_to_unset_push = LemmaForallToUnsetPush0.lemma_forall_to_unset_push,
  function Model2.model = Model2.model, function Model3.model = Model3.model, axiom .
  clone CreuSat_Logic_LogicLit_Impl1_IdxInTrail as IdxInTrail0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_trail_trail
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy2
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = usize
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = usize
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model7.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone CreuSat_Trail_Impl0_DecisionLevel_Interface as DecisionLevel0 with function Model0.model = Model7.model
  clone CreuSat_Lit_Impl1_Index_Interface as Index0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Logic_Model_Impl1_Model as Model9 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model0.model
  clone CreuSat_Assignments_Impl0_SetAssignment_Interface as SetAssignment0 with function Model0.model = Model8.model,
  function Model1.model = Model9.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Unset0.unset = Unset0.unset,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate Invariant0.invariant' = Invariant2.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Invariant2.invariant' = Invariant6.invariant', predicate Sat0.sat = Sat0.sat,
  function Model2.model = Model1.model, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Type.creusat_trail_step, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  let rec cfg enq_assignment [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (step : Type.creusat_trail_step) (_f : Type.creusat_formula_formula) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) _f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    requires {Unset0.unset (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self))) (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step)))}
    requires {not (IdxInTrail0.idx_in_trail (Type.creusat_trail_step_Step_lit step) (Type.creusat_trail_trail_Trail_trail ( * self)))}
    requires {match (Type.creusat_trail_step_Step_reason step) with
      | Type.CreuSat_Trail_Reason_Long cref -> UInt64.to_int cref < Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses _f)) && Unit0.unit (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int cref)) (Type.creusat_trail_trail_Trail_assignments ( * self)) && LitIn0.lit_in (Type.creusat_trail_step_Step_lit step) (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int cref))
      | Type.CreuSat_Trail_Reason_Unit cref -> UInt64.to_int cref < Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses _f)) && Type.creusat_trail_step_Step_lit step = Seq.get (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int cref))) 0
      | _ -> true
      end}
    requires {Invariant0.invariant' step _f}
    requires {Invariant1.invariant' (Type.creusat_trail_step_Step_lit step) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {Invariant2.invariant' _f}
    requires {Invariant3.invariant' ( * self) _f}
    ensures { Type.creusat_trail_trail_Trail_decisions ( ^ self) = Type.creusat_trail_trail_Trail_decisions ( * self) }
    ensures { Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) = 1 + Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) }
    ensures { match (Type.creusat_trail_step_Step_reason step) with
      | Type.CreuSat_Trail_Reason_Long k -> ClausePostWithRegardsToLit0.clause_post_with_regards_to_lit (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int k)) (Type.creusat_trail_trail_Trail_assignments ( ^ self)) (Type.creusat_trail_step_Step_lit step)
      | _ -> true
      end }
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) _f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { Sat0.sat (Type.creusat_trail_step_Step_lit step) (Type.creusat_trail_trail_Trail_assignments ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self))) && j <> IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step) -> Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self))) j = Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) j }
    ensures { Invariant3.invariant' ( ^ self) _f }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_trail_trail);
  var step_2 : Type.creusat_trail_step;
  var _f_3 : Type.creusat_formula_formula;
  var _4 : usize;
  var _5 : Type.creusat_trail_trail;
  var _6 : borrowed usize;
  var _7 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _8 : usize;
  var _9 : Type.creusat_lit_lit;
  var trail_10 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var _11 : ();
  var _12 : borrowed (Type.creusat_assignments_assignments);
  var _13 : Type.creusat_lit_lit;
  var _14 : Type.creusat_formula_formula;
  var _15 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var _20 : borrowed (Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global));
  var _21 : Type.creusat_trail_step;
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : ();
  {
    self_1 <- self;
    step_2 <- step;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    _5 <-  * self_1;
    _4 <- DecisionLevel0.decision_level _5;
    goto BB1
  }
  BB1 {
    _7 <- borrow_mut (Type.creusat_trail_trail_Trail_lit_to_level ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Trail_Trail a b c d e =  * self_1 in Type.CreuSat_Trail_Trail a ( ^ _7) c d e) };
    _9 <- Type.creusat_trail_step_Step_lit step_2;
    _8 <- Index0.index _9;
    goto BB2
  }
  BB2 {
    _6 <- IndexMut0.index_mut _7 _8;
    goto BB3
  }
  BB3 {
    _6 <- { _6 with current = _4 };
    assume { Resolve0.resolve _6 };
    trail_10 <- Type.creusat_trail_trail_Trail_trail ( * self_1);
    _12 <- borrow_mut (Type.creusat_trail_trail_Trail_assignments ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Trail_Trail a b c d e =  * self_1 in Type.CreuSat_Trail_Trail ( ^ _12) b c d e) };
    _13 <- Type.creusat_trail_step_Step_lit step_2;
    _14 <- _f_3;
    _15 <- trail_10;
    _11 <- SetAssignment0.set_assignment _12 _13 _14 _15;
    goto BB4
  }
  BB4 {
    assert { LitNotInLessInner0.lit_not_in_less_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) _f_3 };
    _16 <- ();
    assert { Invariant0.invariant' step_2 _f_3 };
    _17 <- ();
    assert { let _ = LemmaPushMaintainsLitNotInLess0.lemma_push_maintains_lit_not_in_less ( * self_1) _f_3 step_2 in true };
    _18 <- ();
    _20 <- borrow_mut (Type.creusat_trail_trail_Trail_trail ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Trail_Trail a b c d e =  * self_1 in Type.CreuSat_Trail_Trail a b ( ^ _20) d e) };
    _21 <- step_2;
    _19 <- Push0.push _20 _21;
    goto BB5
  }
  BB5 {
    assume { Resolve1.resolve self_1 };
    assert { match (Type.creusat_trail_step_Step_reason step_2) with
      | Type.CreuSat_Trail_Reason_Long k -> ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses _f_3)) (UInt64.to_int k)) (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self_1))) (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step_2))
      | _ -> true
      end };
    _22 <- ();
    assert { LitIsUnique0.lit_is_unique ( * self_1) };
    _23 <- ();
    assert { LitNotInLess0.lit_not_in_less ( * self_1) _f_3 };
    _24 <- ();
    assert { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) _f_3 (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self_1))) };
    _25 <- ();
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Solver_Impl0_HandleLongClause_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant4 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant3
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val handle_long_clause [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (t : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) (d : borrowed (Type.creusat_decision_decisions)) (clause : Type.creusat_clause_clause) (s_idx : usize) : ()
    requires {EquisatExtensionInner0.equisat_extension_inner clause (Model0.model f)}
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause)}
    requires {VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {UInt64.to_int s_idx < Seq.length (Model1.model clause)}
    requires {Seq.length (Model1.model clause) > 1}
    requires {Invariant0.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant1.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant2.invariant' ( * w) ( * f)}
    requires {Invariant3.invariant' ( * t) ( * f)}
    requires {Invariant4.invariant' ( * f)}
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { Invariant1.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { Invariant2.invariant' ( ^ w) ( ^ f) }
    ensures { Invariant3.invariant' ( ^ t) ( ^ f) }
    ensures { Invariant4.invariant' ( ^ f) }
    
end
module CreuSat_Solver_Impl0_HandleLongClause
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model11 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model10 with function Model0.model = Model11.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant6 with function Model0.model = Model10.model
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model2 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model6.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant1 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model10.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model7.model,
  function Model1.model = Model10.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model7.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant5 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant8 with function Model0.model = Model8.model,
  function Model1.model = Model1.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant7 with predicate Invariant0.invariant' = Invariant5.invariant',
  predicate Invariant1.invariant' = Invariant8.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model1.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model8.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model8.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model7.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model8.model,
  function Model1.model = Model1.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant6.invariant',
  function Model0.model = Model7.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model6.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model10.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant3 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model6.model, function Model1.model = Model7.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model9.model,
  function Model1.model = Model8.model, function Model2.model = Model1.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant2 with function Model0.model = Model5.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model8.model,
  predicate Invariant0.invariant' = Invariant0.invariant', function Model1.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant4 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model2.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.creusat_solver_solver
  clone CreuSat_Solver_Impl0_IncreaseNumConflicts_Interface as IncreaseNumConflicts0
  clone CreuSat_Solver_Impl0_IncreaseNumLemmas_Interface as IncreaseNumLemmas0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.creusat_decision_decisions
  clone CreuSat_Util_UpdateSlow_Interface as UpdateSlow0
  clone CreuSat_Util_UpdateFast_Interface as UpdateFast0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = usize
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy4 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output2 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue2 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds2 with type t = usize
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy3 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve7 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = usize, type t2 = usize,
  predicate Resolve0.resolve = Resolve7.resolve, predicate Resolve1.resolve = Resolve7.resolve
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy2
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model8.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model6.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue2.has_value, type Output0.output = Output2.output
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with type t = usize, type a = Type.alloc_alloc_global,
  function Model0.model = Model6.model
  clone Alloc_Vec_Impl16_Index_Interface as Index3 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model6.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue2.has_value,
  type Output0.output = Output2.output
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner as UnsetInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Unset as Unset1 with function Model0.model = Model10.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreuSat_Logic_LogicLit_Impl1_IdxInTrail as IdxInTrail0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Lit_Impl1_Index_Interface as Index2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIn as LitIn0 with function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model12 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit as PostUnit0 with function Model0.model = Model10.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToLit as ClausePostWithRegardsToLit0 with predicate PostUnit0.post_unit = PostUnit0.post_unit,
  function Model0.model = Model1.model,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicClause_Impl2_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner1.sat_inner, function Model0.model = Model1.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unit as Unit0 with function Model0.model = Model10.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone CreuSat_Clause_Impl1_UnitAndUnset_Interface as UnitAndUnset0 with function Model0.model = Model12.model,
  predicate Invariant0.invariant' = Invariant6.invariant',
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal,
  predicate Unset0.unset = Unset1.unset, predicate Unit0.unit = Unit0.unit
  clone CreuSat_Trail_Impl0_EnqAssignment_Interface as EnqAssignment0 with function Model0.model = Model7.model,
  function Model1.model = Model10.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Unset0.unset = Unset0.unset,
  predicate IdxInTrail0.idx_in_trail = IdxInTrail0.idx_in_trail, function Model2.model = Model8.model,
  predicate Unit0.unit = Unit0.unit, predicate LitIn0.lit_in = LitIn0.lit_in, function Model3.model = Model1.model,
  predicate Invariant0.invariant' = Invariant7.invariant', predicate Invariant1.invariant' = Invariant5.invariant',
  predicate Invariant2.invariant' = Invariant4.invariant', predicate Invariant3.invariant' = Invariant3.invariant',
  predicate ClausePostWithRegardsToLit0.clause_post_with_regards_to_lit = ClausePostWithRegardsToLit0.clause_post_with_regards_to_lit,
  predicate Sat0.sat = Sat0.sat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Trail_Impl0_BacktrackSafe_Interface as BacktrackSafe0 with function Model0.model = Model7.model,
  function Model1.model = Model10.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Invariant0.invariant' = Invariant1.invariant', predicate Invariant1.invariant' = Invariant3.invariant',
  predicate Invariant2.invariant' = Invariant4.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Decision_Impl1_IncrementAndMove_Interface as IncrementAndMove0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Model0.model = Model8.model, predicate Invariant1.invariant' = Invariant6.invariant',
  predicate Invariant2.invariant' = Invariant4.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Formula_Impl0_MakeAssertingClauseAndWatch_Interface as MakeAssertingClauseAndWatch0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant', predicate Invariant2.invariant' = Invariant4.invariant',
  function Model0.model = Model8.model, function Model1.model = Model1.model,
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreusotContracts_Logic_Model_Impl0_Model as Model13 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreuSat_Solver_GetAssertingLevel_Interface as GetAssertingLevel0 with function Model0.model = Model12.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate Invariant0.invariant' = Invariant0.invariant', function Model1.model = Model13.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  predicate Invariant1.invariant' = Invariant3.invariant', predicate Invariant2.invariant' = Invariant4.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Formula_Impl0_AddAndSwapFirst_Interface as AddAndSwapFirst0 with function Model0.model = Model0.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  function Model1.model = Model1.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate Invariant0.invariant' = Invariant2.invariant', predicate Invariant1.invariant' = Invariant3.invariant',
  predicate Invariant2.invariant' = Invariant4.invariant', function Model2.model = Model8.model,
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg handle_long_clause [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (t : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) (d : borrowed (Type.creusat_decision_decisions)) (clause : Type.creusat_clause_clause) (s_idx : usize) : ()
    requires {EquisatExtensionInner0.equisat_extension_inner clause (Model0.model f)}
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause)}
    requires {VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {UInt64.to_int s_idx < Seq.length (Model1.model clause)}
    requires {Seq.length (Model1.model clause) > 1}
    requires {Invariant0.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant1.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant2.invariant' ( * w) ( * f)}
    requires {Invariant3.invariant' ( * t) ( * f)}
    requires {Invariant4.invariant' ( * f)}
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { Invariant1.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { Invariant2.invariant' ( ^ w) ( ^ f) }
    ensures { Invariant3.invariant' ( ^ t) ( ^ f) }
    ensures { Invariant4.invariant' ( ^ f) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_solver_solver);
  var f_2 : borrowed (Type.creusat_formula_formula);
  var t_3 : borrowed (Type.creusat_trail_trail);
  var w_4 : borrowed (Type.creusat_watches_watches);
  var d_5 : borrowed (Type.creusat_decision_decisions);
  var clause_6 : Type.creusat_clause_clause;
  var s_idx_7 : usize;
  var cref_8 : usize;
  var _9 : borrowed (Type.creusat_formula_formula);
  var _10 : Type.creusat_clause_clause;
  var _11 : borrowed (Type.creusat_watches_watches);
  var _12 : Type.creusat_trail_trail;
  var _13 : usize;
  var idx_14 : usize;
  var level_15 : usize;
  var _16 : (usize, usize);
  var _17 : Type.creusat_clause_clause;
  var _18 : Type.creusat_clause_clause;
  var _19 : Type.creusat_clause_clause;
  var _20 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _21 : usize;
  var _22 : Type.creusat_trail_trail;
  var _23 : Type.creusat_formula_formula;
  var i_24 : usize;
  var lbd_25 : usize;
  var _26 : ();
  var _27 : ();
  var _28 : bool;
  var _29 : usize;
  var _30 : usize;
  var _31 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _32 : Type.creusat_clause_clause;
  var _33 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _34 : usize;
  var level_35 : usize;
  var _36 : usize;
  var _37 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _38 : usize;
  var _39 : Type.creusat_lit_lit;
  var _40 : Type.creusat_lit_lit;
  var _41 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _42 : Type.creusat_clause_clause;
  var _43 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _44 : usize;
  var _45 : usize;
  var _46 : ();
  var _47 : bool;
  var _48 : bool;
  var _49 : usize;
  var _50 : usize;
  var _51 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _52 : bool;
  var _53 : usize;
  var _54 : usize;
  var _55 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _56 : usize;
  var _57 : usize;
  var _58 : usize;
  var _59 : borrowed usize;
  var _60 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _61 : usize;
  var _62 : ();
  var _63 : ();
  var _64 : ();
  var _65 : ();
  var _66 : borrowed (Type.creusat_formula_formula);
  var _67 : borrowed (Type.creusat_watches_watches);
  var _68 : Type.creusat_trail_trail;
  var _69 : usize;
  var _70 : usize;
  var _71 : ();
  var _72 : borrowed usize;
  var _73 : borrowed usize;
  var _74 : usize;
  var _75 : ();
  var _76 : borrowed usize;
  var _77 : borrowed usize;
  var _78 : usize;
  var _79 : ();
  var _80 : borrowed (Type.creusat_decision_decisions);
  var _81 : Type.creusat_formula_formula;
  var _82 : usize;
  var _83 : Type.creusat_assignments_assignments;
  var _84 : Type.creusat_assignments_assignments;
  var _85 : ();
  var _86 : borrowed (Type.creusat_trail_trail);
  var _87 : usize;
  var _88 : Type.creusat_formula_formula;
  var _89 : borrowed (Type.creusat_decision_decisions);
  var lit_90 : Type.creusat_lit_lit;
  var _91 : Type.creusat_lit_lit;
  var _92 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _93 : Type.creusat_clause_clause;
  var _94 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _95 : usize;
  var step_96 : Type.creusat_trail_step;
  var _97 : Type.creusat_lit_lit;
  var _98 : usize;
  var _99 : Type.creusat_trail_reason;
  var _100 : usize;
  var _101 : ();
  var _102 : bool;
  var _103 : Type.creusat_clause_clause;
  var _104 : Type.creusat_clause_clause;
  var _105 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _106 : usize;
  var _107 : Type.creusat_assignments_assignments;
  var _108 : Type.creusat_assignments_assignments;
  var _109 : Type.creusat_formula_formula;
  var _110 : ();
  var _111 : borrowed (Type.creusat_trail_trail);
  var _112 : Type.creusat_trail_step;
  var _113 : Type.creusat_formula_formula;
  var _114 : ();
  var _115 : borrowed (Type.creusat_solver_solver);
  var _116 : ();
  var _117 : borrowed (Type.creusat_solver_solver);
  {
    self_1 <- self;
    f_2 <- f;
    t_3 <- t;
    w_4 <- w;
    d_5 <- d;
    clause_6 <- clause;
    s_idx_7 <- s_idx;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    _9 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _9) };
    _10 <- clause_6;
    _11 <- borrow_mut ( * w_4);
    w_4 <- { w_4 with current = ( ^ _11) };
    _12 <-  * t_3;
    _13 <- s_idx_7;
    cref_8 <- AddAndSwapFirst0.add_and_swap_first _9 _10 _11 _12 _13;
    goto BB7
  }
  BB7 {
    _20 <- Type.creusat_formula_formula_Formula_clauses ( * f_2);
    _21 <- cref_8;
    _19 <- Index0.index _20 _21;
    goto BB8
  }
  BB8 {
    _18 <- _19;
    _17 <- _18;
    _22 <-  * t_3;
    _23 <-  * f_2;
    _16 <- GetAssertingLevel0.get_asserting_level _17 _22 _23;
    goto BB9
  }
  BB9 {
    idx_14 <- (let (a, _) = _16 in a);
    level_15 <- (let (_, a) = _16 in a);
    assume { Resolve0.resolve _16 };
    i_24 <- (0 : usize);
    lbd_25 <- (0 : usize);
    goto BB10
  }
  BB10 {
    invariant lbd_bound { UInt64.to_int lbd_25 <= UInt64.to_int i_24 };
    _29 <- i_24;
    _33 <- Type.creusat_formula_formula_Formula_clauses ( * f_2);
    _34 <- cref_8;
    _32 <- Index0.index _33 _34;
    goto BB11
  }
  BB11 {
    _31 <- Type.creusat_clause_clause_Clause_rest _32;
    _30 <- Len0.len _31;
    goto BB12
  }
  BB12 {
    _28 <- _29 < _30;
    switch (_28)
      | False -> goto BB27
      | _ -> goto BB13
      end
  }
  BB13 {
    _37 <- Type.creusat_trail_trail_Trail_lit_to_level ( * t_3);
    _43 <- Type.creusat_formula_formula_Formula_clauses ( * f_2);
    _44 <- cref_8;
    _42 <- Index0.index _43 _44;
    goto BB14
  }
  BB14 {
    _41 <- Type.creusat_clause_clause_Clause_rest _42;
    _45 <- i_24;
    _40 <- Index1.index _41 _45;
    goto BB15
  }
  BB15 {
    _39 <- _40;
    _38 <- Index2.index _39;
    goto BB16
  }
  BB16 {
    _36 <- Index3.index _37 _38;
    goto BB17
  }
  BB17 {
    level_35 <- _36;
    _49 <- level_35;
    _51 <- Type.creusat_solver_solver_Solver_perm_diff ( * self_1);
    _50 <- Len1.len _51;
    goto BB21
  }
  BB18 {
    _47 <- false;
    goto BB20
  }
  BB19 {
    _55 <- Type.creusat_solver_solver_Solver_perm_diff ( * self_1);
    _56 <- level_35;
    _54 <- Index3.index _55 _56;
    goto BB22
  }
  BB20 {
    switch (_47)
      | False -> goto BB25
      | _ -> goto BB23
      end
  }
  BB21 {
    _48 <- _49 < _50;
    switch (_48)
      | False -> goto BB18
      | _ -> goto BB19
      end
  }
  BB22 {
    _53 <- _54;
    _57 <- Type.creusat_solver_solver_Solver_num_conflicts ( * self_1);
    _52 <- _53 <> _57;
    _47 <- _52;
    goto BB20
  }
  BB23 {
    _58 <- Type.creusat_solver_solver_Solver_num_conflicts ( * self_1);
    _60 <- borrow_mut (Type.creusat_solver_solver_Solver_perm_diff ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Solver_Solver a b c d e f g h =  * self_1 in Type.CreuSat_Solver_Solver a b c d e f g ( ^ _60)) };
    _61 <- level_35;
    _59 <- IndexMut0.index_mut _60 _61;
    goto BB24
  }
  BB24 {
    _59 <- { _59 with current = _58 };
    assume { Resolve1.resolve _59 };
    lbd_25 <- lbd_25 + (1 : usize);
    _46 <- ();
    goto BB26
  }
  BB25 {
    _46 <- ();
    goto BB26
  }
  BB26 {
    i_24 <- i_24 + (1 : usize);
    _27 <- ();
    goto BB10
  }
  BB27 {
    _26 <- ();
    _66 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _66) };
    _67 <- borrow_mut ( * w_4);
    w_4 <- { w_4 with current = ( ^ _67) };
    _68 <-  * t_3;
    _69 <- idx_14;
    _70 <- cref_8;
    _65 <- MakeAssertingClauseAndWatch0.make_asserting_clause_and_watch _66 _67 _68 _69 _70;
    goto BB28
  }
  BB28 {
    assume { Resolve2.resolve w_4 };
    _73 <- borrow_mut (Type.creusat_solver_solver_Solver_fast ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Solver_Solver a b c d e f g h =  * self_1 in Type.CreuSat_Solver_Solver a b c d e ( ^ _73) g h) };
    _72 <- borrow_mut ( * _73);
    _73 <- { _73 with current = ( ^ _72) };
    _74 <- lbd_25;
    _71 <- UpdateFast0.update_fast _72 _74;
    goto BB29
  }
  BB29 {
    assume { Resolve1.resolve _73 };
    _77 <- borrow_mut (Type.creusat_solver_solver_Solver_slow ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Solver_Solver a b c d e f g h =  * self_1 in Type.CreuSat_Solver_Solver a b c d e f ( ^ _77) h) };
    _76 <- borrow_mut ( * _77);
    _77 <- { _77 with current = ( ^ _76) };
    _78 <- lbd_25;
    _75 <- UpdateSlow0.update_slow _76 _78;
    goto BB30
  }
  BB30 {
    assume { Resolve1.resolve _77 };
    _80 <- borrow_mut ( * d_5);
    d_5 <- { d_5 with current = ( ^ _80) };
    _81 <-  * f_2;
    _82 <- cref_8;
    _84 <- Type.creusat_trail_trail_Trail_assignments ( * t_3);
    _83 <- _84;
    _79 <- IncrementAndMove0.increment_and_move _80 _81 _82 _83;
    goto BB31
  }
  BB31 {
    _86 <- borrow_mut ( * t_3);
    t_3 <- { t_3 with current = ( ^ _86) };
    _87 <- level_15;
    _88 <-  * f_2;
    _89 <- borrow_mut ( * d_5);
    d_5 <- { d_5 with current = ( ^ _89) };
    _85 <- BacktrackSafe0.backtrack_safe _86 _87 _88 _89;
    goto BB32
  }
  BB32 {
    assume { Resolve3.resolve d_5 };
    _94 <- Type.creusat_formula_formula_Formula_clauses ( * f_2);
    _95 <- cref_8;
    _93 <- Index0.index _94 _95;
    goto BB33
  }
  BB33 {
    _92 <- Type.creusat_clause_clause_Clause_rest _93;
    _91 <- Index1.index _92 (0 : usize);
    goto BB34
  }
  BB34 {
    lit_90 <- _91;
    _97 <- lit_90;
    _98 <- level_15;
    _100 <- cref_8;
    _99 <- Type.CreuSat_Trail_Reason_Long _100;
    step_96 <- Type.CreuSat_Trail_Step _97 _98 _99;
    _105 <- Type.creusat_formula_formula_Formula_clauses ( * f_2);
    _106 <- cref_8;
    _104 <- Index0.index _105 _106;
    goto BB35
  }
  BB35 {
    _103 <- _104;
    _108 <- Type.creusat_trail_trail_Trail_assignments ( * t_3);
    _107 <- _108;
    _109 <-  * f_2;
    _102 <- UnitAndUnset0.unit_and_unset _103 _107 _109;
    goto BB36
  }
  BB36 {
    switch (_102)
      | False -> goto BB39
      | _ -> goto BB37
      end
  }
  BB37 {
    _111 <- borrow_mut ( * t_3);
    t_3 <- { t_3 with current = ( ^ _111) };
    _112 <- step_96;
    _113 <-  * f_2;
    assume { Resolve4.resolve f_2 };
    _110 <- EnqAssignment0.enq_assignment _111 _112 _113;
    goto BB38
  }
  BB38 {
    assume { Resolve5.resolve t_3 };
    _101 <- ();
    goto BB40
  }
  BB39 {
    assume { Resolve4.resolve f_2 };
    assume { Resolve5.resolve t_3 };
    _101 <- ();
    goto BB40
  }
  BB40 {
    _115 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _115) };
    _114 <- IncreaseNumLemmas0.increase_num_lemmas _115;
    goto BB41
  }
  BB41 {
    _117 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _117) };
    _116 <- IncreaseNumConflicts0.increase_num_conflicts _117;
    goto BB42
  }
  BB42 {
    assume { Resolve6.resolve self_1 };
    _0 <- ();
    goto BB43
  }
  BB43 {
    return _0
  }
  
end
module CreuSat_Trail_Impl0_LearnUnit_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  clone CreuSat_Logic_LogicLit_Impl1_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant3
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model3
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  val learn_unit [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (cref : usize) (f : Type.creusat_formula_formula) (d : borrowed (Type.creusat_decision_decisions)) : Type.core_result_result () ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    requires {Invariant0.invariant' (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) = 1}
    requires {UInt64.to_int cref < Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {Invariant1.invariant' f}
    requires {Invariant2.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Invariant3.invariant' ( * self) f}
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { match (result) with
      | Type.Core_Result_Result_Err _ -> true
      | Type.Core_Result_Result_Ok _ -> Sat0.sat (Seq.get (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) 0) (Type.creusat_trail_trail_Trail_assignments ( ^ self))
      end }
    ensures { Invariant2.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    ensures { Invariant3.invariant' ( ^ self) f }
    
end
module CreuSat_Trail_Impl0_LearnUnit
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model8.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant2 with function Model0.model = Model7.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model3 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant5 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant0 with function Model0.model = Model3.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model3.model
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model3.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant5.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model2.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model6 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant0.invariant', function Model1.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model6.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model, predicate Sat0.sat = Sat0.sat
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model8.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant3 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model8.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_Logic_Unset as Unset1
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_trail_trail
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy2
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_decision_decisions
  clone CreuSat_Trail_Impl0_DecisionLevel_Interface as DecisionLevel0 with function Model0.model = Model8.model
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model5.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone CreuSat_Logic_LogicLit_Impl1_LitIn as LitIn0 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner as UnsetInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner1.sat_inner, function Model0.model = Model3.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit as PostUnit0 with function Model0.model = Model1.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unit as Unit0 with function Model0.model = Model1.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone CreuSat_Logic_LogicLit_Impl1_Unset as Unset0 with function Model0.model = Model1.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreusotContracts_Logic_Model_Impl0_Model as Model9 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model1.model
  clone CreuSat_Lit_Impl1_LitSet_Interface as LitSet0 with function Model0.model = Model9.model,
  predicate Invariant0.invariant' = Invariant5.invariant', predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToLit as ClausePostWithRegardsToLit0 with predicate PostUnit0.post_unit = PostUnit0.post_unit,
  function Model0.model = Model3.model,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicLit_Impl1_IdxInTrail as IdxInTrail0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Trail_Impl0_EnqAssignment_Interface as EnqAssignment0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Unset0.unset = Unset1.unset,
  predicate IdxInTrail0.idx_in_trail = IdxInTrail0.idx_in_trail, function Model2.model = Model2.model,
  predicate Unit0.unit = Unit0.unit, predicate LitIn0.lit_in = LitIn0.lit_in, function Model3.model = Model3.model,
  predicate Invariant0.invariant' = Invariant6.invariant', predicate Invariant1.invariant' = Invariant5.invariant',
  predicate Invariant2.invariant' = Invariant1.invariant', predicate Invariant3.invariant' = Invariant3.invariant',
  predicate ClausePostWithRegardsToLit0.clause_post_with_regards_to_lit = ClausePostWithRegardsToLit0.clause_post_with_regards_to_lit,
  predicate Sat0.sat = Sat0.sat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Trail_Impl0_BacktrackTo_Interface as BacktrackTo0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Invariant0.invariant' = Invariant2.invariant', predicate Invariant1.invariant' = Invariant3.invariant',
  predicate Invariant2.invariant' = Invariant1.invariant', function Model2.model = Model8.model,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg learn_unit [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (cref : usize) (f : Type.creusat_formula_formula) (d : borrowed (Type.creusat_decision_decisions)) : Type.core_result_result () ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    requires {Invariant0.invariant' (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) = 1}
    requires {UInt64.to_int cref < Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {Invariant1.invariant' f}
    requires {Invariant2.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Invariant3.invariant' ( * self) f}
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { match (result) with
      | Type.Core_Result_Result_Err _ -> true
      | Type.Core_Result_Result_Ok _ -> Sat0.sat (Seq.get (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) 0) (Type.creusat_trail_trail_Trail_assignments ( ^ self))
      end }
    ensures { Invariant2.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    ensures { Invariant3.invariant' ( ^ self) f }
    
   = 
  var _0 : Type.core_result_result () ();
  var self_1 : borrowed (Type.creusat_trail_trail);
  var cref_2 : usize;
  var f_3 : Type.creusat_formula_formula;
  var d_4 : borrowed (Type.creusat_decision_decisions);
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : Type.creusat_trail_trail;
  var _9 : ();
  var _10 : borrowed (Type.creusat_trail_trail);
  var _11 : Type.creusat_formula_formula;
  var _12 : borrowed (Type.creusat_decision_decisions);
  var _13 : ();
  var _14 : bool;
  var _15 : Type.creusat_lit_lit;
  var _16 : Type.creusat_lit_lit;
  var _17 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _18 : Type.creusat_clause_clause;
  var _19 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _20 : usize;
  var _21 : Type.creusat_assignments_assignments;
  var _22 : Type.creusat_assignments_assignments;
  var _23 : ();
  var _24 : ();
  var _25 : ();
  var _26 : borrowed (Type.creusat_trail_trail);
  var _27 : Type.creusat_trail_step;
  var _28 : Type.creusat_lit_lit;
  var _29 : Type.creusat_lit_lit;
  var _30 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _31 : Type.creusat_clause_clause;
  var _32 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _33 : usize;
  var _34 : Type.creusat_trail_reason;
  var _35 : usize;
  var _36 : Type.creusat_formula_formula;
  var _37 : ();
  {
    self_1 <- self;
    cref_2 <- cref;
    f_3 <- f;
    d_4 <- d;
    goto BB0
  }
  BB0 {
    _8 <-  * self_1;
    _7 <- DecisionLevel0.decision_level _8;
    goto BB1
  }
  BB1 {
    _6 <- _7 > (0 : usize);
    switch (_6)
      | False -> goto BB4
      | _ -> goto BB2
      end
  }
  BB2 {
    _10 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _10) };
    _11 <- f_3;
    _12 <- borrow_mut ( * d_4);
    d_4 <- { d_4 with current = ( ^ _12) };
    _9 <- BacktrackTo0.backtrack_to _10 (0 : usize) _11 _12;
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve d_4 };
    _5 <- ();
    goto BB5
  }
  BB4 {
    assume { Resolve0.resolve d_4 };
    _5 <- ();
    goto BB5
  }
  BB5 {
    _19 <- Type.creusat_formula_formula_Formula_clauses f_3;
    _20 <- cref_2;
    _18 <- Index0.index _19 _20;
    goto BB6
  }
  BB6 {
    _17 <- Type.creusat_clause_clause_Clause_rest _18;
    _16 <- Index1.index _17 (0 : usize);
    goto BB7
  }
  BB7 {
    _15 <- _16;
    _22 <- Type.creusat_trail_trail_Trail_assignments ( * self_1);
    _21 <- _22;
    _14 <- LitSet0.lit_set _15 _21;
    goto BB8
  }
  BB8 {
    switch (_14)
      | False -> goto BB10
      | _ -> goto BB9
      end
  }
  BB9 {
    assume { Resolve1.resolve self_1 };
    _24 <- ();
    _0 <- Type.Core_Result_Result_Err _24;
    goto BB14
  }
  BB10 {
    _13 <- ();
    _26 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _26) };
    _32 <- Type.creusat_formula_formula_Formula_clauses f_3;
    _33 <- cref_2;
    _31 <- Index0.index _32 _33;
    goto BB11
  }
  BB11 {
    _30 <- Type.creusat_clause_clause_Clause_rest _31;
    _29 <- Index1.index _30 (0 : usize);
    goto BB12
  }
  BB12 {
    _28 <- _29;
    _35 <- cref_2;
    _34 <- Type.CreuSat_Trail_Reason_Unit _35;
    _27 <- Type.CreuSat_Trail_Step _28 (0 : usize) _34;
    _36 <- f_3;
    _25 <- EnqAssignment0.enq_assignment _26 _27 _36;
    goto BB13
  }
  BB13 {
    assume { Resolve1.resolve self_1 };
    _37 <- ();
    _0 <- Type.Core_Result_Result_Ok _37;
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module CreuSat_Solver_Impl0_HandleConflict_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant3 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  val handle_conflict [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (t : borrowed (Type.creusat_trail_trail)) (cref : usize) (w : borrowed (Type.creusat_watches_watches)) (d : borrowed (Type.creusat_decision_decisions)) : Type.core_option_option bool
    requires {Unsat0.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref)) (Type.creusat_trail_trail_Trail_assignments ( * t))}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant1.invariant' ( * w) ( * f)}
    requires {Invariant2.invariant' ( * t) ( * f)}
    requires {Invariant3.invariant' ( * f)}
    ensures { match (result) with
      | Type.Core_Option_Option_Some (False) -> NotSatisfiable0.not_satisfiable ( ^ f)
      | Type.Core_Option_Option_Some (True) -> true
      | Type.Core_Option_Option_None -> true
      end }
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { Invariant0.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { Invariant1.invariant' ( ^ w) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ t) ( ^ f) }
    ensures { Invariant3.invariant' ( ^ f) }
    
end
module CreuSat_Solver_Impl0_HandleConflict
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant7 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model7 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model7.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant5 with function Model0.model = Model7.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model7.model
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner0 with function Model0.model = Model7.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl2_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model5.model,
  function Model1.model = Model1.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model5.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model4.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant0 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant8 with function Model0.model = Model0.model,
  function Model1.model = Model7.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant7.invariant',
  predicate Invariant1.invariant' = Invariant8.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model0.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model5.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model0.model,
  function Model1.model = Model7.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model5.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model4.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant2 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model4.model, function Model1.model = Model5.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model6 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model6.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model7.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model1.model = Model7.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant3 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model6.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model9.model,
  function Model1.model = Model0.model, function Model2.model = Model7.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant1 with function Model0.model = Model3.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusat_decision_decisions
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_solver_solver
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicClause_Impl2_Equals as Equals0 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicFormula_Compatible as Compatible0 with predicate Equals0.equals = Equals0.equals
  clone CreuSat_Logic_LogicFormula_Equisat as Equisat1 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicFormula_EquisatCompatibleInner as EquisatCompatibleInner0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Equisat0.equisat = Equisat1.equisat
  clone CreuSat_Logic_LogicFormula_Impl1_EquisatCompatible as EquisatCompatible0 with function Model0.model = Model6.model,
  predicate EquisatCompatibleInner0.equisat_compatible_inner = EquisatCompatibleInner0.equisat_compatible_inner
  clone CreusotContracts_Logic_Model_Impl1_Model as Model12 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model6.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model11 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model6.model
  clone CreuSat_Trail_Impl0_LearnUnit_Interface as LearnUnit0 with function Model0.model = Model5.model,
  function Model1.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  function Model2.model = Model0.model, predicate Invariant0.invariant' = Invariant5.invariant',
  function Model3.model = Model7.model, predicate Invariant1.invariant' = Invariant3.invariant',
  predicate Invariant2.invariant' = Invariant0.invariant', predicate Invariant3.invariant' = Invariant2.invariant',
  predicate Sat0.sat = Sat0.sat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Formula_Impl0_AddUnit_Interface as AddUnit0 with function Model0.model = Model12.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  function Model1.model = Model7.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate Invariant0.invariant' = Invariant5.invariant', predicate Invariant1.invariant' = Invariant2.invariant',
  predicate Invariant2.invariant' = Invariant3.invariant', function Model2.model = Model0.model,
  predicate Equisat0.equisat = Equisat0.equisat,
  predicate EquisatCompatible0.equisat_compatible = EquisatCompatible0.equisat_compatible,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_ConflictAnalysis_AnalyzeConflict_Interface as AnalyzeConflict0 with function Model0.model = Model0.model,
  predicate Unsat0.unsat = Unsat0.unsat, predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant', function Model1.model = Model4.model,
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate Invariant2.invariant' = Invariant5.invariant', function Model2.model = Model7.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  function Model3.model = Model11.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Formula_Impl0_SimplifyFormula_Interface as SimplifyFormula0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant3.invariant',
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Formula_Impl0_ReduceDb_Interface as ReduceDb0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Solver_Impl0_HandleLongClause_Interface as HandleLongClause0 with function Model0.model = Model12.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  function Model1.model = Model7.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate Invariant0.invariant' = Invariant5.invariant', predicate Invariant1.invariant' = Invariant0.invariant',
  predicate Invariant2.invariant' = Invariant1.invariant', predicate Invariant3.invariant' = Invariant2.invariant',
  predicate Invariant4.invariant' = Invariant3.invariant', predicate Equisat0.equisat = Equisat0.equisat,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg handle_conflict [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (t : borrowed (Type.creusat_trail_trail)) (cref : usize) (w : borrowed (Type.creusat_watches_watches)) (d : borrowed (Type.creusat_decision_decisions)) : Type.core_option_option bool
    requires {Unsat0.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref)) (Type.creusat_trail_trail_Trail_assignments ( * t))}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant1.invariant' ( * w) ( * f)}
    requires {Invariant2.invariant' ( * t) ( * f)}
    requires {Invariant3.invariant' ( * f)}
    ensures { match (result) with
      | Type.Core_Option_Option_Some (False) -> NotSatisfiable0.not_satisfiable ( ^ f)
      | Type.Core_Option_Option_Some (True) -> true
      | Type.Core_Option_Option_None -> true
      end }
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { Invariant0.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { Invariant1.invariant' ( ^ w) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ t) ( ^ f) }
    ensures { Invariant3.invariant' ( ^ f) }
    
   = 
  var _0 : Type.core_option_option bool;
  var self_1 : borrowed (Type.creusat_solver_solver);
  var f_2 : borrowed (Type.creusat_formula_formula);
  var t_3 : borrowed (Type.creusat_trail_trail);
  var cref_4 : usize;
  var w_5 : borrowed (Type.creusat_watches_watches);
  var d_6 : borrowed (Type.creusat_decision_decisions);
  var res_7 : Type.creusat_conflictanalysis_conflict;
  var _8 : Type.creusat_formula_formula;
  var _9 : Type.creusat_trail_trail;
  var _10 : usize;
  var _11 : ();
  var _12 : isize;
  var _13 : ();
  var clause_14 : Type.creusat_clause_clause;
  var cref_15 : usize;
  var _16 : borrowed (Type.creusat_formula_formula);
  var _17 : Type.creusat_clause_clause;
  var _18 : Type.creusat_trail_trail;
  var _19 : ();
  var _20 : Type.core_result_result () ();
  var _21 : borrowed (Type.creusat_trail_trail);
  var _22 : usize;
  var _23 : Type.creusat_formula_formula;
  var _24 : borrowed (Type.creusat_decision_decisions);
  var _25 : isize;
  var _26 : ();
  var _27 : ();
  var _28 : borrowed (Type.creusat_formula_formula);
  var _29 : borrowed (Type.creusat_watches_watches);
  var _30 : Type.creusat_trail_trail;
  var _31 : borrowed (Type.creusat_solver_solver);
  var _32 : ();
  var _33 : borrowed (Type.creusat_formula_formula);
  var _34 : borrowed (Type.creusat_watches_watches);
  var _35 : Type.creusat_trail_trail;
  var s_idx_36 : usize;
  var clause_37 : Type.creusat_clause_clause;
  var _38 : ();
  var _39 : borrowed (Type.creusat_solver_solver);
  var _40 : borrowed (Type.creusat_formula_formula);
  var _41 : borrowed (Type.creusat_trail_trail);
  var _42 : borrowed (Type.creusat_watches_watches);
  var _43 : borrowed (Type.creusat_decision_decisions);
  var _44 : Type.creusat_clause_clause;
  var _45 : usize;
  var _46 : ();
  {
    self_1 <- self;
    f_2 <- f;
    t_3 <- t;
    cref_4 <- cref;
    w_5 <- w;
    d_6 <- d;
    goto BB0
  }
  BB0 {
    _8 <-  * f_2;
    _9 <-  * t_3;
    _10 <- cref_4;
    res_7 <- AnalyzeConflict0.analyze_conflict _8 _9 _10;
    goto BB1
  }
  BB1 {
    switch (res_7)
      | Type.CreuSat_ConflictAnalysis_Conflict_Ground -> goto BB4
      | Type.CreuSat_ConflictAnalysis_Conflict_Unit _ -> goto BB5
      | Type.CreuSat_ConflictAnalysis_Conflict_Learned _ _ -> goto BB14
      | Type.CreuSat_ConflictAnalysis_Conflict_Panic -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve t_3 };
    assume { Resolve3.resolve w_5 };
    assume { Resolve4.resolve d_6 };
    _0 <- Type.Core_Option_Option_Some true;
    goto BB20
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve t_3 };
    assume { Resolve3.resolve w_5 };
    assume { Resolve4.resolve d_6 };
    absurd
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve t_3 };
    assume { Resolve3.resolve w_5 };
    assume { Resolve4.resolve d_6 };
    _0 <- Type.Core_Option_Option_Some false;
    goto BB20
  }
  BB5 {
    clause_14 <- Type.creusat_conflictanalysis_conflict_Unit_0 res_7;
    _16 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _16) };
    _17 <- clause_14;
    _18 <-  * t_3;
    cref_15 <- AddUnit0.add_unit _16 _17 _18;
    goto BB6
  }
  BB6 {
    _21 <- borrow_mut ( * t_3);
    t_3 <- { t_3 with current = ( ^ _21) };
    _22 <- cref_15;
    _23 <-  * f_2;
    _24 <- borrow_mut ( * d_6);
    d_6 <- { d_6 with current = ( ^ _24) };
    _20 <- LearnUnit0.learn_unit _21 _22 _23 _24;
    goto BB7
  }
  BB7 {
    assume { Resolve4.resolve d_6 };
    switch (_20)
      | Type.Core_Result_Result_Ok _ -> goto BB8
      | Type.Core_Result_Result_Err _ -> goto BB10
      end
  }
  BB8 {
    _19 <- ();
    _28 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _28) };
    _29 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _29) };
    _30 <-  * t_3;
    _31 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _31) };
    _27 <- ReduceDb0.reduceDB _28 _29 _30 _31;
    goto BB11
  }
  BB9 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve t_3 };
    assume { Resolve3.resolve w_5 };
    absurd
  }
  BB10 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve t_3 };
    assume { Resolve3.resolve w_5 };
    _0 <- Type.Core_Option_Option_Some true;
    goto BB19
  }
  BB11 {
    assume { Resolve0.resolve self_1 };
    _33 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _33) };
    _34 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _34) };
    _35 <-  * t_3;
    assume { Resolve2.resolve t_3 };
    _32 <- SimplifyFormula0.simplify_formula _33 _34 _35;
    goto BB12
  }
  BB12 {
    assume { Resolve1.resolve f_2 };
    assume { Resolve3.resolve w_5 };
    _11 <- ();
    goto BB13
  }
  BB13 {
    goto BB17
  }
  BB14 {
    s_idx_36 <- Type.creusat_conflictanalysis_conflict_Learned_0 res_7;
    clause_37 <- Type.creusat_conflictanalysis_conflict_Learned_1 res_7;
    _39 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _39) };
    _40 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _40) };
    _41 <- borrow_mut ( * t_3);
    t_3 <- { t_3 with current = ( ^ _41) };
    _42 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _42) };
    _43 <- borrow_mut ( * d_6);
    d_6 <- { d_6 with current = ( ^ _43) };
    _44 <- clause_37;
    _45 <- s_idx_36;
    _38 <- HandleLongClause0.handle_long_clause _39 _40 _41 _42 _43 _44 _45;
    goto BB15
  }
  BB15 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve t_3 };
    assume { Resolve3.resolve w_5 };
    assume { Resolve4.resolve d_6 };
    _11 <- ();
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    _0 <- Type.Core_Option_Option_None;
    goto BB18
  }
  BB18 {
    goto BB22
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    return _0
  }
  
end
module CreuSat_UnitProp_Swap_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  val swap [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : Type.creusat_trail_trail) (watches : Type.creusat_watches_watches) (cref : usize) (j : usize) (k : usize) : ()
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) > UInt64.to_int k}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) > UInt64.to_int j}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) >= 2}
    requires {Invariant0.invariant' watches ( * f)}
    requires {Invariant1.invariant' ( * f)}
    requires {Invariant2.invariant' trail ( * f)}
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) = Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int cref))) }
    ensures { Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) = Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { Invariant0.invariant' watches ( ^ f) }
    ensures { Invariant1.invariant' ( ^ f) }
    ensures { Invariant2.invariant' trail ( ^ f) }
    
end
module CreuSat_UnitProp_Swap
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model4 with type t = borrowed (Type.creusat_formula_formula)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model3 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant5 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model2.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model8.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner2 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit as PostUnit0 with function Model0.model = Model3.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model1.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model1.model
  clone CreuSat_Logic_Logic_LemmaSwapClauseNoDups as LemmaSwapClauseNoDups0 with function Model0.model = Model1.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  axiom .
  clone CreuSat_Logic_Logic_LemmaSwapMaintainsPostUnit as LemmaSwapMaintainsPostUnit0 with predicate PostUnit0.post_unit = PostUnit0.post_unit,
  function Model0.model = Model1.model,
  function LemmaSwapClauseNoDups0.lemma_swap_clause_no_dups = LemmaSwapClauseNoDups0.lemma_swap_clause_no_dups,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model0.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model2.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model7 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model7.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model10.model,
  function Model1.model = Model0.model, function Model2.model = Model1.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant0 with function Model0.model = Model6.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model2.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model8.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model3.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant2 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model8.model, function Model1.model = Model2.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = seq (Type.creusat_lit_lit)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_Model as Model11 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl1_Model as Model12 with type t = seq (Type.creusat_lit_lit),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model11.model
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = Type.creusat_lit_lit,
  function Model0.model = Model12.model, function Model1.model = Model11.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model4.model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, function Model0.model = Model11.model, function Model1.model = Model5.model
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  let rec cfg swap [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : Type.creusat_trail_trail) (watches : Type.creusat_watches_watches) (cref : usize) (j : usize) (k : usize) : ()
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f)))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) > UInt64.to_int k}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) > UInt64.to_int j}
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) >= 2}
    requires {Invariant0.invariant' watches ( * f)}
    requires {Invariant1.invariant' ( * f)}
    requires {Invariant2.invariant' trail ( * f)}
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) = Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int cref))) }
    ensures { Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) = Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { Invariant0.invariant' watches ( ^ f) }
    ensures { Invariant1.invariant' ( ^ f) }
    ensures { Invariant2.invariant' trail ( ^ f) }
    
   = 
  var _0 : ();
  var f_1 : borrowed (Type.creusat_formula_formula);
  var trail_2 : Type.creusat_trail_trail;
  var watches_3 : Type.creusat_watches_watches;
  var cref_4 : usize;
  var j_5 : usize;
  var k_6 : usize;
  var old_f_7 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _8 : borrowed (Type.creusat_formula_formula);
  var _9 : borrowed (Type.creusat_formula_formula);
  var _10 : ();
  var _11 : ();
  var _12 : ();
  var _13 : borrowed (seq (Type.creusat_lit_lit));
  var _14 : borrowed (seq (Type.creusat_lit_lit));
  var _15 : borrowed (Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global));
  var _16 : borrowed (Type.creusat_clause_clause);
  var _17 : borrowed (Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global));
  var _18 : usize;
  var _19 : usize;
  var _20 : usize;
  var _21 : ();
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : ();
  {
    f_1 <- f;
    trail_2 <- trail;
    watches_3 <- watches;
    cref_4 <- cref;
    j_5 <- j;
    k_6 <- k;
    goto BB0
  }
  BB0 {
    _9 <- f_1;
    _8 <- _9;
    old_f_7 <- Record0.record _8;
    goto BB1
  }
  BB1 {
    assert { NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4))) };
    _10 <- ();
    assert { LongArePostUnitInner0.long_are_post_unit_inner (Model2.model (Type.creusat_trail_trail_Trail_trail trail_2)) ( * f_1) (Model3.model (Type.creusat_trail_trail_Trail_assignments trail_2)) && true };
    _11 <- ();
    _17 <- borrow_mut (Type.creusat_formula_formula_Formula_clauses ( * f_1));
    f_1 <- { f_1 with current = (let Type.CreuSat_Formula_Formula a b =  * f_1 in Type.CreuSat_Formula_Formula ( ^ _17) b) };
    assume { Resolve0.resolve f_1 };
    _18 <- cref_4;
    _16 <- IndexMut0.index_mut _17 _18;
    goto BB2
  }
  BB2 {
    _15 <- borrow_mut (Type.creusat_clause_clause_Clause_rest ( * _16));
    _16 <- { _16 with current = (let Type.CreuSat_Clause_Clause a b =  * _16 in Type.CreuSat_Clause_Clause a ( ^ _15)) };
    assume { Resolve1.resolve _16 };
    _14 <- DerefMut0.deref_mut _15;
    goto BB3
  }
  BB3 {
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    _19 <- j_5;
    _20 <- k_6;
    _12 <- Swap0.swap _13 _19 _20;
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve _14 };
    assert { let _ = LemmaSwapMaintainsPostUnit0.lemma_swap_maintains_post_unit (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * Model4.model old_f_7))) (UInt64.to_int cref_4)) (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4)) (UInt64.to_int j_5) (UInt64.to_int k_6) (Type.creusat_trail_trail_Trail_assignments trail_2) in true };
    _21 <- ();
    assert { VarsInRangeInner0.vars_in_range_inner (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4))) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f_1))) };
    _22 <- ();
    assert { NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4))) };
    _23 <- ();
    assert { LongArePostUnitInner0.long_are_post_unit_inner (Model2.model (Type.creusat_trail_trail_Trail_trail trail_2)) ( * f_1) (Model3.model (Type.creusat_trail_trail_Trail_assignments trail_2)) };
    _24 <- ();
    assert {  ^ Model4.model old_f_7 =  ^ f_1 };
    _25 <- ();
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Watches_UpdateWatch_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model3
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic_Interface as ToWatchidxLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  val update_watch [@cfg:stackify] (f : Type.creusat_formula_formula) (trail : Type.creusat_trail_trail) (watches : borrowed (Type.creusat_watches_watches)) (cref : usize) (j : usize) (k : usize) (lit : Type.creusat_lit_lit) : ()
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches))) (ToWatchidxLogic0.to_watchidx_logic lit))) > UInt64.to_int j}
    requires {Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) >= 2}
    requires {0 <= UInt64.to_int k && UInt64.to_int k < Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)))}
    requires {UInt64.to_int cref < Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' trail f}
    requires {Invariant1.invariant' f}
    requires {IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    requires {Invariant2.invariant' ( * watches) f}
    ensures { Invariant2.invariant' ( ^ watches) f }
    
end
module CreuSat_Watches_UpdateWatch
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model9 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicUtil_Pop as Pop0 with type t = Type.creusat_watches_watcher, axiom .
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model4 with type t = borrowed (Type.creusat_watches_watches)
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model6.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model3 with function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model8 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicWatches_WatcherCrefsInRange as WatcherCrefsInRange0 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicWatches_LemmaPushMaintainsWatcherInvariant as LemmaPushMaintainsWatcherInvariant0 with function Model0.model = Model2.model,
  predicate WatcherCrefsInRange0.watcher_crefs_in_range = WatcherCrefsInRange0.watcher_crefs_in_range, axiom .
  clone CreuSat_Logic_LogicWatches_LemmaPopWatchMaintainsWatcherInvariant as LemmaPopWatchMaintainsWatcherInvariant0 with predicate WatcherCrefsInRange0.watcher_crefs_in_range = WatcherCrefsInRange0.watcher_crefs_in_range,
  function Pop0.pop = Pop0.pop, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model1.model,
  function Model1.model = Model2.model, function Model2.model = Model3.model
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model3.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model8.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model3.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model9.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model7.model,
  function Model1.model = Model9.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model2.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model7.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model7.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model7.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model6.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model9.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant0 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model6.model, function Model1.model = Model7.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic as ToNegWatchidxLogic0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic as ToWatchidxLogic0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant2 with function Model0.model = Model0.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy4 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy3 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output2 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue2 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds2 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = seq (Type.creusat_watches_watcher)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_watches_watcher
  clone CreusotContracts_Logic_Model_Impl2_Model as Model11 with type t = Type.creusat_watches_watcher
  clone CreusotContracts_Logic_Model_Impl1_Model as Model12 with type t = seq (Type.creusat_watches_watcher),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model11.model
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = Type.creusat_watches_watcher,
  function Model0.model = Model12.model, function Model1.model = Model11.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_watches_watches),
  function Model0.model = Model4.model
  clone Alloc_Vec_Impl16_Index_Interface as Index2 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model5.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue2.has_value,
  type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone CreusotContracts_Logic_Model_Impl1_Model as Model13 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy4.modelTy, function Model0.model = Model1.model
  clone Alloc_Vec_Impl1_Pop_Interface as Pop1 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model, function Model1.model = Model13.model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, function Model0.model = Model11.model, function Model1.model = Model1.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model
  clone CreuSat_Lit_Impl1_ToNegWatchidx_Interface as ToNegWatchidx0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function ToNegWatchidxLogic0.to_neg_watchidx_logic = ToNegWatchidxLogic0.to_neg_watchidx_logic
  clone CreuSat_Lit_Impl1_ToWatchidx_Interface as ToWatchidx0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function ToWatchidxLogic0.to_watchidx_logic = ToWatchidxLogic0.to_watchidx_logic
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg update_watch [@cfg:stackify] (f : Type.creusat_formula_formula) (trail : Type.creusat_trail_trail) (watches : borrowed (Type.creusat_watches_watches)) (cref : usize) (j : usize) (k : usize) (lit : Type.creusat_lit_lit) : ()
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches))) (ToWatchidxLogic0.to_watchidx_logic lit))) > UInt64.to_int j}
    requires {Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) >= 2}
    requires {0 <= UInt64.to_int k && UInt64.to_int k < Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)))}
    requires {UInt64.to_int cref < Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' trail f}
    requires {Invariant1.invariant' f}
    requires {IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    requires {Invariant2.invariant' ( * watches) f}
    ensures { Invariant2.invariant' ( ^ watches) f }
    
   = 
  var _0 : ();
  var f_1 : Type.creusat_formula_formula;
  var trail_2 : Type.creusat_trail_trail;
  var watches_3 : borrowed (Type.creusat_watches_watches);
  var cref_4 : usize;
  var j_5 : usize;
  var k_6 : usize;
  var lit_7 : Type.creusat_lit_lit;
  var watchidx_8 : usize;
  var _9 : Type.creusat_lit_lit;
  var end'_10 : usize;
  var _11 : usize;
  var _12 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _13 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _14 : Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _15 : usize;
  var _16 : ();
  var _17 : borrowed (seq (Type.creusat_watches_watcher));
  var _18 : borrowed (seq (Type.creusat_watches_watcher));
  var _19 : borrowed (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global));
  var _20 : borrowed (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global));
  var _21 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _22 : usize;
  var _23 : usize;
  var _24 : usize;
  var curr_lit_25 : Type.creusat_lit_lit;
  var _26 : Type.creusat_lit_lit;
  var _27 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _28 : Type.creusat_clause_clause;
  var _29 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _30 : usize;
  var _31 : usize;
  var _32 : ();
  var old_w_33 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_watches_watches));
  var _34 : borrowed (Type.creusat_watches_watches);
  var _35 : borrowed (Type.creusat_watches_watches);
  var _36 : ();
  var _37 : ();
  var _38 : Type.core_option_option (Type.creusat_watches_watcher);
  var _39 : borrowed (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global));
  var _40 : borrowed (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global));
  var _41 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _42 : usize;
  var _43 : isize;
  var w_44 : Type.creusat_watches_watcher;
  var _45 : ();
  var _46 : ();
  var _47 : ();
  var _48 : ();
  var _49 : ();
  var _50 : ();
  var _51 : ();
  var _52 : ();
  var _53 : ();
  var _54 : ();
  var _55 : ();
  var _56 : borrowed (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global));
  var _57 : borrowed (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global));
  var _58 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _59 : usize;
  var _60 : Type.creusat_lit_lit;
  var _61 : Type.creusat_watches_watcher;
  var _62 : ();
  var _63 : ();
  var _64 : ();
  var _65 : ();
  {
    f_1 <- f;
    trail_2 <- trail;
    watches_3 <- watches;
    cref_4 <- cref;
    j_5 <- j;
    k_6 <- k;
    lit_7 <- lit;
    goto BB0
  }
  BB0 {
    _9 <- lit_7;
    watchidx_8 <- ToWatchidx0.to_watchidx _9;
    goto BB1
  }
  BB1 {
    _14 <- Type.creusat_watches_watches_Watches_watches ( * watches_3);
    _15 <- watchidx_8;
    _13 <- Index0.index _14 _15;
    goto BB2
  }
  BB2 {
    _12 <- _13;
    _11 <- Len0.len _12;
    goto BB3
  }
  BB3 {
    end'_10 <- _11 - (1 : usize);
    _21 <- borrow_mut (Type.creusat_watches_watches_Watches_watches ( * watches_3));
    watches_3 <- { watches_3 with current = (let Type.CreuSat_Watches_Watches a =  * watches_3 in Type.CreuSat_Watches_Watches ( ^ _21)) };
    _22 <- watchidx_8;
    _20 <- IndexMut0.index_mut _21 _22;
    goto BB4
  }
  BB4 {
    _19 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _19) };
    assume { Resolve0.resolve _20 };
    _18 <- DerefMut0.deref_mut _19;
    goto BB5
  }
  BB5 {
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _23 <- j_5;
    _24 <- end'_10;
    _16 <- Swap0.swap _17 _23 _24;
    goto BB6
  }
  BB6 {
    assume { Resolve1.resolve _18 };
    _29 <- Type.creusat_formula_formula_Formula_clauses f_1;
    _30 <- cref_4;
    _28 <- Index1.index _29 _30;
    goto BB7
  }
  BB7 {
    _27 <- Type.creusat_clause_clause_Clause_rest _28;
    _31 <- k_6;
    _26 <- Index2.index _27 _31;
    goto BB8
  }
  BB8 {
    curr_lit_25 <- _26;
    assert { UInt64.to_int watchidx_8 < Seq.length (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches_3))) };
    _32 <- ();
    _35 <- watches_3;
    _34 <- _35;
    old_w_33 <- Record0.record _34;
    goto BB9
  }
  BB9 {
    assert { Type.creusat_watches_watches_Watches_watches ( * Model4.model old_w_33) = Type.creusat_watches_watches_Watches_watches ( * watches_3) };
    _36 <- ();
    assert { WatcherCrefsInRange0.watcher_crefs_in_range (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches_3))) (UInt64.to_int watchidx_8))) f_1 };
    _37 <- ();
    _41 <- borrow_mut (Type.creusat_watches_watches_Watches_watches ( * watches_3));
    watches_3 <- { watches_3 with current = (let Type.CreuSat_Watches_Watches a =  * watches_3 in Type.CreuSat_Watches_Watches ( ^ _41)) };
    _42 <- watchidx_8;
    _40 <- IndexMut0.index_mut _41 _42;
    goto BB10
  }
  BB10 {
    _39 <- borrow_mut ( * _40);
    _40 <- { _40 with current = ( ^ _39) };
    _38 <- Pop1.pop _39;
    goto BB11
  }
  BB11 {
    assume { Resolve0.resolve _40 };
    switch (_38)
      | Type.Core_Option_Option_None -> goto BB12
      | Type.Core_Option_Option_Some _ -> goto BB14
      end
  }
  BB12 {
    assume { Resolve2.resolve watches_3 };
    absurd
  }
  BB13 {
    assume { Resolve2.resolve watches_3 };
    absurd
  }
  BB14 {
    w_44 <- Type.core_option_option_Some_0 _38;
    assert {  ^ Model4.model old_w_33 =  ^ watches_3 };
    _45 <- ();
    assert { let _ = LemmaPopWatchMaintainsWatcherInvariant0.lemma_pop_watch_maintains_watcher_invariant (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * Model4.model old_w_33))) (UInt64.to_int watchidx_8))) f_1 in true };
    _46 <- ();
    assert { WatcherCrefsInRange0.watcher_crefs_in_range (Pop0.pop (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * Model4.model old_w_33))) (UInt64.to_int watchidx_8)))) f_1 };
    _47 <- ();
    assert { Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches_3))) (UInt64.to_int watchidx_8)) = Pop0.pop (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * Model4.model old_w_33))) (UInt64.to_int watchidx_8))) };
    _48 <- ();
    assert { WatcherCrefsInRange0.watcher_crefs_in_range (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches_3))) (UInt64.to_int watchidx_8))) f_1 };
    _49 <- ();
    assert { Invariant2.invariant' ( * watches_3) f_1 };
    _50 <- ();
    assert { ToNegWatchidxLogic0.to_neg_watchidx_logic curr_lit_25 < Seq.length (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches_3))) };
    _51 <- ();
    assert { WatcherCrefsInRange0.watcher_crefs_in_range (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches_3))) (ToNegWatchidxLogic0.to_neg_watchidx_logic curr_lit_25))) f_1 };
    _52 <- ();
    assert { UInt64.to_int (Type.creusat_watches_watcher_Watcher_cref w_44) < Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses f_1)) };
    _53 <- ();
    assert { let _ = LemmaPushMaintainsWatcherInvariant0.lemma_push_maintains_watcher_invariant (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches_3))) (ToNegWatchidxLogic0.to_neg_watchidx_logic curr_lit_25))) f_1 w_44 in true };
    _54 <- ();
    _58 <- borrow_mut (Type.creusat_watches_watches_Watches_watches ( * watches_3));
    watches_3 <- { watches_3 with current = (let Type.CreuSat_Watches_Watches a =  * watches_3 in Type.CreuSat_Watches_Watches ( ^ _58)) };
    assume { Resolve2.resolve watches_3 };
    _60 <- curr_lit_25;
    _59 <- ToNegWatchidx0.to_neg_watchidx _60;
    goto BB15
  }
  BB15 {
    _57 <- IndexMut0.index_mut _58 _59;
    goto BB16
  }
  BB16 {
    _56 <- borrow_mut ( * _57);
    _57 <- { _57 with current = ( ^ _56) };
    _61 <- w_44;
    _55 <- Push0.push _56 _61;
    goto BB17
  }
  BB17 {
    assume { Resolve0.resolve _57 };
    assert { WatcherCrefsInRange0.watcher_crefs_in_range (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches_3))) (ToNegWatchidxLogic0.to_neg_watchidx_logic curr_lit_25))) f_1 };
    _62 <- ();
    assert { Invariant2.invariant' ( * watches_3) f_1 };
    _63 <- ();
    _0 <- ();
    return _0
  }
  
end
module CreuSat_UnitProp_UnitPropCheckRest_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicLit_Impl1_Unsat_Interface as Unsat0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model3
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic_Interface as ToWatchidxLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  val unit_prop_check_rest [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : Type.creusat_trail_trail) (watches : borrowed (Type.creusat_watches_watches)) (cref : usize) (j : usize) (k : usize) (lit : Type.creusat_lit_lit) : Type.core_result_result () ()
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches))) (ToWatchidxLogic0.to_watchidx_logic lit))) > UInt64.to_int j}
    requires {Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) > 2}
    requires {2 <= UInt64.to_int k && UInt64.to_int k < Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref)))}
    requires {UInt64.to_int cref < Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f)))}
    requires {IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * watches) ( * f)}
    requires {Invariant1.invariant' trail ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int cref))) = Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) }
    ensures { match (result) with
      | Type.Core_Result_Result_Ok _ -> true
      | Type.Core_Result_Result_Err _ -> Unsat0.unsat (Seq.get (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int cref))) (UInt64.to_int k)) (Type.creusat_trail_trail_Trail_assignments trail) &&  ^ f =  * f &&  * watches =  ^ watches
      end }
    ensures { Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) }
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ f) }
    ensures { Invariant1.invariant' trail ( ^ f) }
    ensures { Invariant2.invariant' ( ^ f) }
    
end
module CreuSat_UnitProp_UnitPropCheckRest
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model8 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model5.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model7 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model1.model,
  function Model1.model = Model2.model, function Model2.model = Model3.model
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model3.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model7.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model6.model,
  function Model1.model = Model8.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model2.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model6.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model6.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model3.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model6.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model5.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model8.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model5.model, function Model1.model = Model6.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicLit_Impl1_Unsat as Unsat0 with function Model0.model = Model8.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic as ToWatchidxLogic0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_formula_formula
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy2
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Model_Impl0_Model as Model10 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model8.model
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model4.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner as UnsetInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Unset as Unset1 with function Model0.model = Model8.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreuSat_Lit_Impl1_Index_Interface as Index2 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Lit_Impl1_LitUnset_Interface as LitUnset0 with function Model0.model = Model10.model,
  predicate Invariant0.invariant' = Invariant6.invariant', predicate Unset0.unset = Unset1.unset
  clone CreuSat_Lit_Impl1_LitSat_Interface as LitSat0 with function Model0.model = Model10.model,
  predicate Invariant0.invariant' = Invariant6.invariant', predicate Sat0.sat = Sat0.sat
  clone CreuSat_Watches_UpdateWatch_Interface as UpdateWatch0 with function Model0.model = Model0.model,
  function ToWatchidxLogic0.to_watchidx_logic = ToWatchidxLogic0.to_watchidx_logic,
  function Model1.model = Model1.model, function Model2.model = Model2.model, function Model3.model = Model3.model,
  predicate Invariant0.invariant' = Invariant1.invariant', predicate Invariant1.invariant' = Invariant2.invariant',
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Invariant2.invariant' = Invariant0.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_UnitProp_Swap_Interface as Swap0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg unit_prop_check_rest [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : Type.creusat_trail_trail) (watches : borrowed (Type.creusat_watches_watches)) (cref : usize) (j : usize) (k : usize) (lit : Type.creusat_lit_lit) : Type.core_result_result () ()
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches))) (ToWatchidxLogic0.to_watchidx_logic lit))) > UInt64.to_int j}
    requires {Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) > 2}
    requires {2 <= UInt64.to_int k && UInt64.to_int k < Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref)))}
    requires {UInt64.to_int cref < Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f)))}
    requires {IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * watches) ( * f)}
    requires {Invariant1.invariant' trail ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int cref))) = Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) }
    ensures { match (result) with
      | Type.Core_Result_Result_Ok _ -> true
      | Type.Core_Result_Result_Err _ -> Unsat0.unsat (Seq.get (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int cref))) (UInt64.to_int k)) (Type.creusat_trail_trail_Trail_assignments trail) &&  ^ f =  * f &&  * watches =  ^ watches
      end }
    ensures { Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) }
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ f) }
    ensures { Invariant1.invariant' trail ( ^ f) }
    ensures { Invariant2.invariant' ( ^ f) }
    
   = 
  var _0 : Type.core_result_result () ();
  var f_1 : borrowed (Type.creusat_formula_formula);
  var trail_2 : Type.creusat_trail_trail;
  var watches_3 : borrowed (Type.creusat_watches_watches);
  var cref_4 : usize;
  var j_5 : usize;
  var k_6 : usize;
  var lit_7 : Type.creusat_lit_lit;
  var _8 : ();
  var curr_lit_9 : Type.creusat_lit_lit;
  var _10 : Type.creusat_lit_lit;
  var _11 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _12 : Type.creusat_clause_clause;
  var _13 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _14 : usize;
  var _15 : usize;
  var _16 : ();
  var _17 : bool;
  var _18 : bool;
  var _19 : Type.creusat_lit_lit;
  var _20 : Type.creusat_assignments_assignments;
  var _21 : Type.creusat_assignments_assignments;
  var _22 : bool;
  var _23 : Type.creusat_lit_lit;
  var _24 : Type.creusat_assignments_assignments;
  var _25 : Type.creusat_assignments_assignments;
  var _26 : ();
  var _27 : ();
  var _28 : bool;
  var _29 : usize;
  var _30 : Type.creusat_lit_lit;
  var _31 : Type.creusat_lit_lit;
  var _32 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _33 : Type.creusat_clause_clause;
  var _34 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _35 : usize;
  var _36 : usize;
  var _37 : Type.creusat_lit_lit;
  var _38 : ();
  var _39 : borrowed (Type.creusat_formula_formula);
  var _40 : Type.creusat_trail_trail;
  var _41 : Type.creusat_watches_watches;
  var _42 : usize;
  var _43 : usize;
  var _44 : ();
  var _45 : Type.creusat_formula_formula;
  var _46 : Type.creusat_trail_trail;
  var _47 : borrowed (Type.creusat_watches_watches);
  var _48 : usize;
  var _49 : usize;
  var _50 : Type.creusat_lit_lit;
  var _51 : ();
  var _52 : borrowed (Type.creusat_formula_formula);
  var _53 : Type.creusat_trail_trail;
  var _54 : Type.creusat_watches_watches;
  var _55 : usize;
  var _56 : usize;
  var _57 : ();
  var _58 : Type.creusat_formula_formula;
  var _59 : Type.creusat_trail_trail;
  var _60 : borrowed (Type.creusat_watches_watches);
  var _61 : usize;
  var _62 : usize;
  var _63 : Type.creusat_lit_lit;
  var _64 : ();
  var _65 : ();
  {
    f_1 <- f;
    trail_2 <- trail;
    watches_3 <- watches;
    cref_4 <- cref;
    j_5 <- j;
    k_6 <- k;
    lit_7 <- lit;
    goto BB0
  }
  BB0 {
    _13 <- Type.creusat_formula_formula_Formula_clauses ( * f_1);
    _14 <- cref_4;
    _12 <- Index0.index _13 _14;
    goto BB1
  }
  BB1 {
    _11 <- Type.creusat_clause_clause_Clause_rest _12;
    _15 <- k_6;
    _10 <- Index1.index _11 _15;
    goto BB2
  }
  BB2 {
    curr_lit_9 <- _10;
    _19 <- curr_lit_9;
    _21 <- Type.creusat_trail_trail_Trail_assignments trail_2;
    _20 <- _21;
    _18 <- LitUnset0.lit_unset _19 _20;
    goto BB6
  }
  BB3 {
    _17 <- true;
    goto BB5
  }
  BB4 {
    _23 <- curr_lit_9;
    _25 <- Type.creusat_trail_trail_Trail_assignments trail_2;
    _24 <- _25;
    _22 <- LitSat0.lit_sat _23 _24;
    goto BB7
  }
  BB5 {
    switch (_17)
      | False -> goto BB20
      | _ -> goto BB8
      end
  }
  BB6 {
    switch (_18)
      | False -> goto BB4
      | _ -> goto BB3
      end
  }
  BB7 {
    _17 <- _22;
    goto BB5
  }
  BB8 {
    _34 <- Type.creusat_formula_formula_Formula_clauses ( * f_1);
    _35 <- cref_4;
    _33 <- Index0.index _34 _35;
    goto BB9
  }
  BB9 {
    _32 <- Type.creusat_clause_clause_Clause_rest _33;
    _31 <- Index1.index _32 (0 : usize);
    goto BB10
  }
  BB10 {
    _30 <- _31;
    _29 <- Index2.index _30;
    goto BB11
  }
  BB11 {
    _37 <- lit_7;
    _36 <- Index2.index _37;
    goto BB12
  }
  BB12 {
    _28 <- _29 = _36;
    switch (_28)
      | False -> goto BB16
      | _ -> goto BB13
      end
  }
  BB13 {
    _39 <- borrow_mut ( * f_1);
    f_1 <- { f_1 with current = ( ^ _39) };
    _40 <- trail_2;
    _41 <-  * watches_3;
    _42 <- cref_4;
    _43 <- k_6;
    _38 <- Swap0.swap _39 _40 _41 _42 _43 (0 : usize);
    goto BB14
  }
  BB14 {
    _45 <-  * f_1;
    assume { Resolve0.resolve f_1 };
    _46 <- trail_2;
    _47 <- borrow_mut ( * watches_3);
    watches_3 <- { watches_3 with current = ( ^ _47) };
    _48 <- cref_4;
    _49 <- j_5;
    _50 <- lit_7;
    _44 <- UpdateWatch0.update_watch _45 _46 _47 _48 _49 (0 : usize) _50;
    goto BB15
  }
  BB15 {
    assume { Resolve1.resolve watches_3 };
    _27 <- ();
    goto BB19
  }
  BB16 {
    _52 <- borrow_mut ( * f_1);
    f_1 <- { f_1 with current = ( ^ _52) };
    _53 <- trail_2;
    _54 <-  * watches_3;
    _55 <- cref_4;
    _56 <- k_6;
    _51 <- Swap0.swap _52 _53 _54 _55 _56 (1 : usize);
    goto BB17
  }
  BB17 {
    _58 <-  * f_1;
    assume { Resolve0.resolve f_1 };
    _59 <- trail_2;
    _60 <- borrow_mut ( * watches_3);
    watches_3 <- { watches_3 with current = ( ^ _60) };
    _61 <- cref_4;
    _62 <- j_5;
    _63 <- lit_7;
    _57 <- UpdateWatch0.update_watch _58 _59 _60 _61 _62 (1 : usize) _63;
    goto BB18
  }
  BB18 {
    assume { Resolve1.resolve watches_3 };
    _27 <- ();
    goto BB19
  }
  BB19 {
    _64 <- ();
    _0 <- Type.Core_Result_Result_Ok _64;
    goto BB21
  }
  BB20 {
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve watches_3 };
    _16 <- ();
    _65 <- ();
    _0 <- Type.Core_Result_Result_Err _65;
    goto BB21
  }
  BB21 {
    return _0
  }
  
end
module CreuSat_UnitProp_UnitPropDoOuter_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat1
  clone CreuSat_Logic_LogicFormula_Impl1_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model4 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model3 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic_Interface as ToWatchidxLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  val unit_prop_do_outer [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : borrowed (Type.creusat_trail_trail)) (watches : borrowed (Type.creusat_watches_watches)) (cref : usize) (lit : Type.creusat_lit_lit) (j : usize) : Type.core_result_result bool usize
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) >= 2}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f)))}
    requires {Invariant0.invariant' ( * watches) ( * f)}
    requires {IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_watches_watches_Watches_watches ( * watches))) (ToWatchidxLogic0.to_watchidx_logic lit))) > UInt64.to_int j}
    requires {Invariant0.invariant' ( * watches) ( * f)}
    requires {Invariant1.invariant' ( * trail) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { match (result) with
      | Type.Core_Result_Result_Ok (True) -> true
      | Type.Core_Result_Result_Ok (False) -> Seq.length (Model4.model (Type.creusat_trail_trail_Trail_trail ( ^ trail))) = Seq.length (Model4.model (Type.creusat_trail_trail_Trail_trail ( * trail)))
      | Type.Core_Result_Result_Err n -> UInt64.to_int n < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) && Unsat0.unsat ( ^ f) (Type.creusat_trail_trail_Trail_assignments ( ^ trail)) && Unsat1.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int n)) (Type.creusat_trail_trail_Trail_assignments ( ^ trail))
      end }
    ensures { Type.creusat_trail_trail_Trail_decisions ( ^ trail) = Type.creusat_trail_trail_Trail_decisions ( * trail) }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ f) }
    ensures { Invariant1.invariant' ( ^ trail) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ f) }
    
end
module CreuSat_UnitProp_UnitPropDoOuter
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_Logic_Unset as Unset1
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset1.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model12 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model11 with function Model0.model = Model12.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model11.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model8 with type t = borrowed (Type.creusat_trail_trail)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model6 with type t = borrowed (Type.creusat_formula_formula)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model5 with type t = borrowed (Type.creusat_watches_watches)
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model7.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model4.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model4.model,
  function Model1.model = Model11.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model11.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner as UnsetInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Unset as Unset0 with function Model0.model = Model11.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Unsat as Unsat2 with function Model0.model = Model11.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic as ToWatchidxLogic0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone CreuSat_Logic_LogicClause_Impl2_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner1.sat_inner, function Model0.model = Model1.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unit as Unit0 with function Model0.model = Model11.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model1.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnit as PostUnit0 with function Model0.model = Model11.model,
  predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToLit as ClausePostWithRegardsToLit0 with predicate PostUnit0.post_unit = PostUnit0.post_unit,
  function Model0.model = Model1.model,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unsat as Unsat1 with function Model0.model = Model11.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model0.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model4.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model4.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model7.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model11.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model7.model, function Model1.model = Model4.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Unsat as Unsat0 with function Model0.model = Model11.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model10 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model10.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model3.model,
  function Model1.model = Model0.model, function Model2.model = Model1.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant0 with function Model0.model = Model2.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_formula_formula
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy2
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Logic_Model_Impl0_Model as Model13 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model11.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record1 with type t = borrowed (Type.creusat_trail_trail),
  function Model0.model = Model8.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model6.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record2 with type t = borrowed (Type.creusat_watches_watches),
  function Model0.model = Model5.model
  clone CreuSat_Trail_Impl0_DecisionLevel_Interface as DecisionLevel0 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicLit_Impl1_IdxInTrail as IdxInTrail0 with function Model0.model = Model4.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Lit_Impl1_LitSat_Interface as LitSat0 with function Model0.model = Model13.model,
  predicate Invariant0.invariant' = Invariant6.invariant', predicate Sat0.sat = Sat0.sat
  clone CreuSat_Lit_Impl1_LitUnset_Interface as LitUnset0 with function Model0.model = Model13.model,
  predicate Invariant0.invariant' = Invariant6.invariant', predicate Unset0.unset = Unset0.unset
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model9.model
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model9.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone CreuSat_Logic_LogicLit_Impl1_LitIn as LitIn0 with function Model0.model = Model1.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_Trail_Impl0_EnqAssignment_Interface as EnqAssignment0 with function Model0.model = Model4.model,
  function Model1.model = Model11.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Unset0.unset = Unset1.unset,
  predicate IdxInTrail0.idx_in_trail = IdxInTrail0.idx_in_trail, function Model2.model = Model0.model,
  predicate Unit0.unit = Unit0.unit, predicate LitIn0.lit_in = LitIn0.lit_in, function Model3.model = Model1.model,
  predicate Invariant0.invariant' = Invariant5.invariant', predicate Invariant1.invariant' = Invariant6.invariant',
  predicate Invariant2.invariant' = Invariant2.invariant', predicate Invariant3.invariant' = Invariant1.invariant',
  predicate ClausePostWithRegardsToLit0.clause_post_with_regards_to_lit = ClausePostWithRegardsToLit0.clause_post_with_regards_to_lit,
  predicate Sat0.sat = Sat0.sat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_UnitProp_UnitPropCheckRest_Interface as UnitPropCheckRest0 with function Model0.model = Model2.model,
  function ToWatchidxLogic0.to_watchidx_logic = ToWatchidxLogic0.to_watchidx_logic,
  function Model1.model = Model3.model, function Model2.model = Model0.model, function Model3.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate Unsat0.unsat = Unsat2.unsat, predicate Equisat0.equisat = Equisat0.equisat,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_UnitProp_Swap_Interface as Swap0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg unit_prop_do_outer [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : borrowed (Type.creusat_trail_trail)) (watches : borrowed (Type.creusat_watches_watches)) (cref : usize) (lit : Type.creusat_lit_lit) (j : usize) : Type.core_result_result bool usize
    requires {Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) >= 2}
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f)))}
    requires {Invariant0.invariant' ( * watches) ( * f)}
    requires {IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_watches_watches_Watches_watches ( * watches))) (ToWatchidxLogic0.to_watchidx_logic lit))) > UInt64.to_int j}
    requires {Invariant0.invariant' ( * watches) ( * f)}
    requires {Invariant1.invariant' ( * trail) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { match (result) with
      | Type.Core_Result_Result_Ok (True) -> true
      | Type.Core_Result_Result_Ok (False) -> Seq.length (Model4.model (Type.creusat_trail_trail_Trail_trail ( ^ trail))) = Seq.length (Model4.model (Type.creusat_trail_trail_Trail_trail ( * trail)))
      | Type.Core_Result_Result_Err n -> UInt64.to_int n < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) && Unsat0.unsat ( ^ f) (Type.creusat_trail_trail_Trail_assignments ( ^ trail)) && Unsat1.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int n)) (Type.creusat_trail_trail_Trail_assignments ( ^ trail))
      end }
    ensures { Type.creusat_trail_trail_Trail_decisions ( ^ trail) = Type.creusat_trail_trail_Trail_decisions ( * trail) }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ f) }
    ensures { Invariant1.invariant' ( ^ trail) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ f) }
    
   = 
  var _0 : Type.core_result_result bool usize;
  var f_1 : borrowed (Type.creusat_formula_formula);
  var trail_2 : borrowed (Type.creusat_trail_trail);
  var watches_3 : borrowed (Type.creusat_watches_watches);
  var cref_4 : usize;
  var lit_5 : Type.creusat_lit_lit;
  var j_6 : usize;
  var first_lit_7 : Type.creusat_lit_lit;
  var _8 : Type.creusat_lit_lit;
  var _9 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _10 : Type.creusat_clause_clause;
  var _11 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _12 : usize;
  var _13 : ();
  var _14 : bool;
  var _15 : Type.creusat_lit_lit;
  var _16 : Type.creusat_assignments_assignments;
  var _17 : Type.creusat_assignments_assignments;
  var _18 : ();
  var second_lit_19 : Type.creusat_lit_lit;
  var _20 : Type.creusat_lit_lit;
  var _21 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _22 : Type.creusat_clause_clause;
  var _23 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _24 : usize;
  var old_f_25 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _26 : borrowed (Type.creusat_formula_formula);
  var _27 : borrowed (Type.creusat_formula_formula);
  var _28 : ();
  var _29 : bool;
  var _30 : Type.creusat_lit_lit;
  var _31 : Type.creusat_assignments_assignments;
  var _32 : Type.creusat_assignments_assignments;
  var _33 : ();
  var _34 : ();
  var _35 : borrowed (Type.creusat_formula_formula);
  var _36 : Type.creusat_trail_trail;
  var _37 : Type.creusat_watches_watches;
  var _38 : usize;
  var k_39 : usize;
  var clause_len_40 : usize;
  var _41 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _42 : Type.creusat_clause_clause;
  var _43 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _44 : usize;
  var old_trail_45 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_trail_trail));
  var _46 : borrowed (Type.creusat_trail_trail);
  var _47 : borrowed (Type.creusat_trail_trail);
  var old_w_48 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_watches_watches));
  var _49 : borrowed (Type.creusat_watches_watches);
  var _50 : borrowed (Type.creusat_watches_watches);
  var _51 : ();
  var _52 : ();
  var _53 : bool;
  var _54 : usize;
  var _55 : usize;
  var _56 : ();
  var _57 : ();
  var _58 : Type.core_result_result () ();
  var _59 : borrowed (Type.creusat_formula_formula);
  var _60 : Type.creusat_trail_trail;
  var _61 : borrowed (Type.creusat_watches_watches);
  var _62 : usize;
  var _63 : usize;
  var _64 : usize;
  var _65 : Type.creusat_lit_lit;
  var _66 : isize;
  var _67 : ();
  var _68 : ();
  var _69 : ();
  var _70 : ();
  var _71 : ();
  var _72 : ();
  var _73 : ();
  var _74 : ();
  var _75 : ();
  var _76 : bool;
  var _77 : Type.creusat_lit_lit;
  var _78 : Type.creusat_assignments_assignments;
  var _79 : Type.creusat_assignments_assignments;
  var _80 : ();
  var _81 : ();
  var _82 : bool;
  var _83 : Type.creusat_lit_lit;
  var _84 : Type.creusat_assignments_assignments;
  var _85 : Type.creusat_assignments_assignments;
  var _86 : ();
  var _87 : ();
  var _88 : ();
  var _89 : ();
  var step_90 : Type.creusat_trail_step;
  var _91 : Type.creusat_lit_lit;
  var _92 : usize;
  var _93 : Type.creusat_trail_trail;
  var _94 : Type.creusat_trail_reason;
  var _95 : usize;
  var _96 : ();
  var _97 : borrowed (Type.creusat_trail_trail);
  var _98 : Type.creusat_trail_step;
  var _99 : Type.creusat_formula_formula;
  var _100 : ();
  var _101 : ();
  var _102 : bool;
  var _103 : Type.creusat_lit_lit;
  var _104 : Type.creusat_assignments_assignments;
  var _105 : Type.creusat_assignments_assignments;
  var _106 : ();
  var _107 : ();
  var _108 : ();
  var step_109 : Type.creusat_trail_step;
  var _110 : Type.creusat_lit_lit;
  var _111 : usize;
  var _112 : Type.creusat_trail_trail;
  var _113 : Type.creusat_trail_reason;
  var _114 : usize;
  var _115 : ();
  var _116 : borrowed (Type.creusat_trail_trail);
  var _117 : Type.creusat_trail_step;
  var _118 : Type.creusat_formula_formula;
  var _119 : ();
  var _120 : ();
  var _121 : ();
  var _122 : usize;
  {
    f_1 <- f;
    trail_2 <- trail;
    watches_3 <- watches;
    cref_4 <- cref;
    lit_5 <- lit;
    j_6 <- j;
    goto BB0
  }
  BB0 {
    _11 <- Type.creusat_formula_formula_Formula_clauses ( * f_1);
    _12 <- cref_4;
    _10 <- Index0.index _11 _12;
    goto BB1
  }
  BB1 {
    _9 <- Type.creusat_clause_clause_Clause_rest _10;
    _8 <- Index1.index _9 (0 : usize);
    goto BB2
  }
  BB2 {
    first_lit_7 <- _8;
    _15 <- first_lit_7;
    _17 <- Type.creusat_trail_trail_Trail_assignments ( * trail_2);
    _16 <- _17;
    _14 <- LitSat0.lit_sat _15 _16;
    goto BB3
  }
  BB3 {
    switch (_14)
      | False -> goto BB5
      | _ -> goto BB4
      end
  }
  BB4 {
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve trail_2 };
    assume { Resolve2.resolve watches_3 };
    _0 <- Type.Core_Result_Result_Ok true;
    goto BB41
  }
  BB5 {
    _13 <- ();
    _23 <- Type.creusat_formula_formula_Formula_clauses ( * f_1);
    _24 <- cref_4;
    _22 <- Index0.index _23 _24;
    goto BB6
  }
  BB6 {
    _21 <- Type.creusat_clause_clause_Clause_rest _22;
    _20 <- Index1.index _21 (1 : usize);
    goto BB7
  }
  BB7 {
    second_lit_19 <- _20;
    _27 <- f_1;
    _26 <- _27;
    old_f_25 <- Record0.record _26;
    goto BB8
  }
  BB8 {
    _30 <- second_lit_19;
    _32 <- Type.creusat_trail_trail_Trail_assignments ( * trail_2);
    _31 <- _32;
    _29 <- LitSat0.lit_sat _30 _31;
    goto BB9
  }
  BB9 {
    switch (_29)
      | False -> goto BB12
      | _ -> goto BB10
      end
  }
  BB10 {
    _35 <- borrow_mut ( * f_1);
    f_1 <- { f_1 with current = ( ^ _35) };
    _36 <-  * trail_2;
    assume { Resolve1.resolve trail_2 };
    _37 <-  * watches_3;
    assume { Resolve2.resolve watches_3 };
    _38 <- cref_4;
    _34 <- Swap0.swap _35 _36 _37 _38 (0 : usize) (1 : usize);
    goto BB11
  }
  BB11 {
    assume { Resolve0.resolve f_1 };
    _0 <- Type.Core_Result_Result_Ok true;
    goto BB40
  }
  BB12 {
    _28 <- ();
    k_39 <- (2 : usize);
    _43 <- Type.creusat_formula_formula_Formula_clauses ( * f_1);
    _44 <- cref_4;
    _42 <- Index0.index _43 _44;
    goto BB13
  }
  BB13 {
    _41 <- Type.creusat_clause_clause_Clause_rest _42;
    clause_len_40 <- Len0.len _41;
    goto BB14
  }
  BB14 {
    _47 <- trail_2;
    _46 <- _47;
    old_trail_45 <- Record1.record _46;
    goto BB15
  }
  BB15 {
    _50 <- watches_3;
    _49 <- _50;
    old_w_48 <- Record2.record _49;
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    invariant k_bound { 2 <= UInt64.to_int k_39 && UInt64.to_int k_39 <= UInt64.to_int clause_len_40 };
    invariant watch_len { Seq.length (Model2.model (Type.creusat_watches_watches_Watches_watches ( * watches_3))) = Seq.length (Model2.model (Type.creusat_watches_watches_Watches_watches ( * Model5.model old_w_48))) };
    invariant watch_inv { Invariant0.invariant' ( * watches_3) ( * f_1) };
    invariant trail_inv { Invariant1.invariant' ( * trail_2) ( * f_1) };
    invariant f_equi { Equisat0.equisat ( * Model6.model old_f_25) ( * f_1) };
    invariant f_inv { Invariant2.invariant' ( * f_1) };
    invariant f_len { Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) = Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * Model6.model old_f_25))) };
    invariant len_same { Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4))) = UInt64.to_int clause_len_40 };
    invariant nvars_unch { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f_1)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * Model6.model old_f_25)) };
    invariant f_unch { f_1 = Model6.model old_f_25 };
    invariant w_unch {  * watches_3 =  * Model5.model old_w_48 };
    invariant dec_unch { Model7.model (Type.creusat_trail_trail_Trail_decisions ( * trail_2)) = Model7.model (Type.creusat_trail_trail_Trail_decisions ( * Model8.model old_trail_45)) };
    invariant proph_t {  ^ trail_2 =  ^ Model8.model old_trail_45 };
    invariant proph_f {  ^ f_1 =  ^ Model6.model old_f_25 };
    invariant proph_w {  ^ watches_3 =  ^ Model5.model old_w_48 };
    invariant uns { forall m : (int) . 2 <= m && m < UInt64.to_int k_39 -> Unsat2.unsat (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4))) m) (Type.creusat_trail_trail_Trail_assignments ( * trail_2)) };
    _54 <- k_39;
    _55 <- clause_len_40;
    _53 <- _54 < _55;
    switch (_53)
      | False -> goto BB23
      | _ -> goto BB18
      end
  }
  BB18 {
    assert { Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_watches_watches_Watches_watches ( * watches_3))) (ToWatchidxLogic0.to_watchidx_logic lit_5))) > UInt64.to_int j_6 };
    _56 <- ();
    _59 <- borrow_mut ( * f_1);
    f_1 <- { f_1 with current = ( ^ _59) };
    _60 <-  * trail_2;
    _61 <- borrow_mut ( * watches_3);
    watches_3 <- { watches_3 with current = ( ^ _61) };
    _62 <- cref_4;
    _63 <- j_6;
    _64 <- k_39;
    _65 <- lit_5;
    _58 <- UnitPropCheckRest0.unit_prop_check_rest _59 _60 _61 _62 _63 _64 _65;
    goto BB19
  }
  BB19 {
    switch (_58)
      | Type.Core_Result_Result_Ok _ -> goto BB20
      | Type.Core_Result_Result_Err _ -> goto BB22
      end
  }
  BB20 {
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve trail_2 };
    assume { Resolve2.resolve watches_3 };
    _0 <- Type.Core_Result_Result_Ok false;
    goto BB39
  }
  BB21 {
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve trail_2 };
    assume { Resolve2.resolve watches_3 };
    absurd
  }
  BB22 {
    assert { Type.creusat_trail_trail_Trail_decisions ( * Model8.model old_trail_45) = Type.creusat_trail_trail_Trail_decisions ( * trail_2) };
    _67 <- ();
    assert {  * watches_3 =  * Model5.model old_w_48 };
    _68 <- ();
    assert {  * f_1 =  * Model6.model old_f_25 };
    _69 <- ();
    _57 <- ();
    k_39 <- k_39 + (1 : usize);
    _52 <- ();
    goto BB17
  }
  BB23 {
    assume { Resolve2.resolve watches_3 };
    _51 <- ();
    assert { Type.creusat_trail_trail_Trail_decisions ( * Model8.model old_trail_45) = Type.creusat_trail_trail_Trail_decisions ( * trail_2) };
    _74 <- ();
    assert { Unsat1.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4)) (Type.creusat_trail_trail_Trail_assignments ( * trail_2)) || Unset0.unset (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4))) 0) (Type.creusat_trail_trail_Trail_assignments ( * trail_2)) || Unset0.unset (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4))) 1) (Type.creusat_trail_trail_Trail_assignments ( * trail_2)) };
    _75 <- ();
    _77 <- first_lit_7;
    _79 <- Type.creusat_trail_trail_Trail_assignments ( * trail_2);
    _78 <- _79;
    _76 <- LitUnset0.lit_unset _77 _78;
    goto BB24
  }
  BB24 {
    switch (_76)
      | False -> goto BB31
      | _ -> goto BB25
      end
  }
  BB25 {
    _83 <- second_lit_19;
    _85 <- Type.creusat_trail_trail_Trail_assignments ( * trail_2);
    _84 <- _85;
    _82 <- LitUnset0.lit_unset _83 _84;
    goto BB26
  }
  BB26 {
    switch (_82)
      | False -> goto BB28
      | _ -> goto BB27
      end
  }
  BB27 {
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve trail_2 };
    _0 <- Type.Core_Result_Result_Ok true;
    goto BB38
  }
  BB28 {
    _81 <- ();
    assert { Invariant1.invariant' ( * trail_2) ( * f_1) };
    _87 <- ();
    assert { not (Unsat1.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4)) (Type.creusat_trail_trail_Trail_assignments ( * trail_2))) };
    _88 <- ();
    assert { Unit0.unit (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4)) (Type.creusat_trail_trail_Trail_assignments ( * trail_2)) };
    _89 <- ();
    _91 <- first_lit_7;
    _93 <-  * trail_2;
    _92 <- DecisionLevel0.decision_level _93;
    goto BB29
  }
  BB29 {
    _95 <- cref_4;
    _94 <- Type.CreuSat_Trail_Reason_Long _95;
    step_90 <- Type.CreuSat_Trail_Step _91 _92 _94;
    _97 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _97) };
    _98 <- step_90;
    _99 <-  * f_1;
    assume { Resolve0.resolve f_1 };
    _96 <- EnqAssignment0.enq_assignment _97 _98 _99;
    goto BB30
  }
  BB30 {
    assume { Resolve1.resolve trail_2 };
    assert { PostUnit0.post_unit (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4)) (Type.creusat_trail_trail_Trail_assignments ( * trail_2)) && true };
    _100 <- ();
    assert { ClausePostWithRegardsToLit0.clause_post_with_regards_to_lit (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4)) (Type.creusat_trail_trail_Trail_assignments ( * trail_2)) first_lit_7 };
    _101 <- ();
    _0 <- Type.Core_Result_Result_Ok true;
    goto BB38
  }
  BB31 {
    _103 <- second_lit_19;
    _105 <- Type.creusat_trail_trail_Trail_assignments ( * trail_2);
    _104 <- _105;
    _102 <- LitUnset0.lit_unset _103 _104;
    goto BB32
  }
  BB32 {
    switch (_102)
      | False -> goto BB36
      | _ -> goto BB33
      end
  }
  BB33 {
    assert { not (Unsat1.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4)) (Type.creusat_trail_trail_Trail_assignments ( * trail_2))) && true && true };
    _107 <- ();
    assert { Unit0.unit (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4)) (Type.creusat_trail_trail_Trail_assignments ( * trail_2)) };
    _108 <- ();
    _110 <- second_lit_19;
    _112 <-  * trail_2;
    _111 <- DecisionLevel0.decision_level _112;
    goto BB34
  }
  BB34 {
    _114 <- cref_4;
    _113 <- Type.CreuSat_Trail_Reason_Long _114;
    step_109 <- Type.CreuSat_Trail_Step _110 _111 _113;
    _116 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _116) };
    _117 <- step_109;
    _118 <-  * f_1;
    assume { Resolve0.resolve f_1 };
    _115 <- EnqAssignment0.enq_assignment _116 _117 _118;
    goto BB35
  }
  BB35 {
    assume { Resolve1.resolve trail_2 };
    assert { PostUnit0.post_unit (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4)) (Type.creusat_trail_trail_Trail_assignments ( * trail_2)) };
    _119 <- ();
    assert { ClausePostWithRegardsToLit0.clause_post_with_regards_to_lit (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f_1))) (UInt64.to_int cref_4)) (Type.creusat_trail_trail_Trail_assignments ( * trail_2)) second_lit_19 };
    _120 <- ();
    _0 <- Type.Core_Result_Result_Ok true;
    goto BB37
  }
  BB36 {
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve trail_2 };
    _122 <- cref_4;
    _0 <- Type.Core_Result_Result_Err _122;
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    goto BB39
  }
  BB39 {
    goto BB40
  }
  BB40 {
    goto BB41
  }
  BB41 {
    return _0
  }
  
end
module CreuSat_UnitProp_UnitPropCurrentLevel_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use seq.Seq
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat1
  clone CreuSat_Logic_LogicFormula_Impl1_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  val unit_prop_current_level [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : borrowed (Type.creusat_trail_trail)) (watches : borrowed (Type.creusat_watches_watches)) (lit : Type.creusat_lit_lit) : Type.core_result_result () usize
    requires {IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * watches) ( * f)}
    requires {Invariant1.invariant' ( * trail) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { match (result) with
      | Type.Core_Result_Result_Ok () -> true
      | Type.Core_Result_Result_Err n -> UInt64.to_int n < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) && Unsat0.unsat ( ^ f) (Type.creusat_trail_trail_Trail_assignments ( ^ trail)) && Unsat1.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int n)) (Type.creusat_trail_trail_Trail_assignments ( ^ trail))
      end }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ f) }
    ensures { Invariant1.invariant' ( ^ trail) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ f) }
    
end
module CreuSat_UnitProp_UnitPropCurrentLevel
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use seq.Seq
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model12 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model10 with function Model0.model = Model12.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model11 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model8 with function Model0.model = Model11.model
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model5 with type t = borrowed (Type.creusat_trail_trail)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model3 with type t = borrowed (Type.creusat_formula_formula)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = borrowed (Type.creusat_watches_watches)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model0.model,
  function Model1.model = Model10.model
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model7 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model9.model,
  function Model1.model = Model0.model, function Model2.model = Model10.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model4.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model10.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model10.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model10.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model7.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model10.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model0.model,
  function Model1.model = Model10.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model6.model,
  function Model1.model = Model8.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model10.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model0.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model6.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model6.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model10.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model10.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model6.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model4.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model8.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model4.model, function Model1.model = Model6.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model10.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Unsat as Unsat0 with function Model0.model = Model8.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unsat as Unsat1 with function Model0.model = Model8.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_watches_watcher
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_watches_watcher
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_watches_watcher
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_watches_watcher
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_watches_watcher, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model9.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, function Model0.model = Model9.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_trail_trail),
  function Model0.model = Model5.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record1 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model3.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record2 with type t = borrowed (Type.creusat_watches_watches),
  function Model0.model = Model2.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic as ToWatchidxLogic0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreuSat_Lit_Impl1_ToWatchidx_Interface as ToWatchidx0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function ToWatchidxLogic0.to_watchidx_logic = ToWatchidxLogic0.to_watchidx_logic
  clone CreuSat_UnitProp_UnitPropDoOuter_Interface as UnitPropDoOuter0 with function Model0.model = Model0.model,
  function Model1.model = Model10.model, predicate Invariant0.invariant' = Invariant0.invariant',
  function IndexLogic0.index_logic = IndexLogic0.index_logic, function Model2.model = Model1.model,
  function ToWatchidxLogic0.to_watchidx_logic = ToWatchidxLogic0.to_watchidx_logic,
  function Model3.model = Model9.model, predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Invariant2.invariant' = Invariant2.invariant', predicate Equisat0.equisat = Equisat0.equisat,
  function Model4.model = Model6.model, predicate Unsat0.unsat = Unsat0.unsat, predicate Unsat1.unsat = Unsat1.unsat,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg unit_prop_current_level [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : borrowed (Type.creusat_trail_trail)) (watches : borrowed (Type.creusat_watches_watches)) (lit : Type.creusat_lit_lit) : Type.core_result_result () usize
    requires {IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * watches) ( * f)}
    requires {Invariant1.invariant' ( * trail) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { match (result) with
      | Type.Core_Result_Result_Ok () -> true
      | Type.Core_Result_Result_Err n -> UInt64.to_int n < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) && Unsat0.unsat ( ^ f) (Type.creusat_trail_trail_Trail_assignments ( ^ trail)) && Unsat1.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int n)) (Type.creusat_trail_trail_Trail_assignments ( ^ trail))
      end }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ f) }
    ensures { Invariant1.invariant' ( ^ trail) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ f) }
    
   = 
  var _0 : Type.core_result_result () usize;
  var f_1 : borrowed (Type.creusat_formula_formula);
  var trail_2 : borrowed (Type.creusat_trail_trail);
  var watches_3 : borrowed (Type.creusat_watches_watches);
  var lit_4 : Type.creusat_lit_lit;
  var j_5 : usize;
  var watchidx_6 : usize;
  var _7 : Type.creusat_lit_lit;
  var _8 : ();
  var _9 : ();
  var old_trail_10 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_trail_trail));
  var _11 : borrowed (Type.creusat_trail_trail);
  var _12 : borrowed (Type.creusat_trail_trail);
  var old_f_13 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _14 : borrowed (Type.creusat_formula_formula);
  var _15 : borrowed (Type.creusat_formula_formula);
  var old_w_16 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_watches_watches));
  var _17 : borrowed (Type.creusat_watches_watches);
  var _18 : borrowed (Type.creusat_watches_watches);
  var _19 : ();
  var _20 : ();
  var _21 : bool;
  var _22 : usize;
  var _23 : usize;
  var _24 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _25 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _26 : Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _27 : usize;
  var cref_28 : usize;
  var _29 : Type.creusat_watches_watcher;
  var _30 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _31 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _32 : Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _33 : usize;
  var _34 : usize;
  var _35 : Type.core_result_result bool usize;
  var _36 : borrowed (Type.creusat_formula_formula);
  var _37 : borrowed (Type.creusat_trail_trail);
  var _38 : borrowed (Type.creusat_watches_watches);
  var _39 : usize;
  var _40 : Type.creusat_lit_lit;
  var _41 : usize;
  var _42 : isize;
  var cref_43 : usize;
  var _44 : ();
  var _45 : usize;
  var _46 : ();
  var _47 : ();
  var _48 : ();
  var _49 : ();
  {
    f_1 <- f;
    trail_2 <- trail;
    watches_3 <- watches;
    lit_4 <- lit;
    goto BB0
  }
  BB0 {
    j_5 <- (0 : usize);
    _7 <- lit_4;
    watchidx_6 <- ToWatchidx0.to_watchidx _7;
    goto BB1
  }
  BB1 {
    assert { Seq.length (Model1.model (Type.creusat_watches_watches_Watches_watches ( * watches_3))) = 2 * UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f_1)) };
    _8 <- ();
    assert { Seq.length (Model1.model (Type.creusat_watches_watches_Watches_watches ( * watches_3))) > UInt64.to_int watchidx_6 };
    _9 <- ();
    _12 <- trail_2;
    _11 <- _12;
    old_trail_10 <- Record0.record _11;
    goto BB2
  }
  BB2 {
    _15 <- f_1;
    _14 <- _15;
    old_f_13 <- Record1.record _14;
    goto BB3
  }
  BB3 {
    _18 <- watches_3;
    _17 <- _18;
    old_w_16 <- Record2.record _17;
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant trail_inv { Invariant1.invariant' ( * trail_2) ( * f_1) };
    invariant watch_len { Seq.length (Model1.model (Type.creusat_watches_watches_Watches_watches ( * watches_3))) = Seq.length (Model1.model (Type.creusat_watches_watches_Watches_watches ( * Model2.model old_w_16))) };
    invariant watch_inv { Invariant0.invariant' ( * watches_3) ( * f_1) };
    invariant f_equi { Equisat0.equisat ( * Model3.model old_f_13) ( * f_1) };
    invariant f_inv { Invariant2.invariant' ( * f_1) };
    invariant dec_unch { Model4.model (Type.creusat_trail_trail_Trail_decisions ( * trail_2)) = Model4.model (Type.creusat_trail_trail_Trail_decisions ( * Model5.model old_trail_10)) };
    invariant nvars_unch { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f_1)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * Model3.model old_f_13)) };
    invariant proph_t {  ^ trail_2 =  ^ Model5.model old_trail_10 };
    invariant proph_f {  ^ f_1 =  ^ Model3.model old_f_13 };
    invariant proph_w {  ^ watches_3 =  ^ Model2.model old_w_16 };
    _22 <- j_5;
    _26 <- Type.creusat_watches_watches_Watches_watches ( * watches_3);
    _27 <- watchidx_6;
    _25 <- Index0.index _26 _27;
    goto BB6
  }
  BB6 {
    _24 <- _25;
    _23 <- Len0.len _24;
    goto BB7
  }
  BB7 {
    _21 <- _22 < _23;
    switch (_21)
      | False -> goto BB18
      | _ -> goto BB8
      end
  }
  BB8 {
    _32 <- Type.creusat_watches_watches_Watches_watches ( * watches_3);
    _33 <- watchidx_6;
    _31 <- Index0.index _32 _33;
    goto BB9
  }
  BB9 {
    _30 <- _31;
    _34 <- j_5;
    _29 <- Index1.index _30 _34;
    goto BB10
  }
  BB10 {
    cref_28 <- Type.creusat_watches_watcher_Watcher_cref _29;
    _36 <- borrow_mut ( * f_1);
    f_1 <- { f_1 with current = ( ^ _36) };
    _37 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _37) };
    _38 <- borrow_mut ( * watches_3);
    watches_3 <- { watches_3 with current = ( ^ _38) };
    _39 <- cref_28;
    _40 <- lit_4;
    _41 <- j_5;
    _35 <- UnitPropDoOuter0.unit_prop_do_outer _36 _37 _38 _39 _40 _41;
    goto BB11
  }
  BB11 {
    switch (_35)
      | Type.Core_Result_Result_Ok _ -> goto BB12
      | Type.Core_Result_Result_Err _ -> goto BB13
      end
  }
  BB12 {
    switch (Type.core_result_result_Ok_0 _35)
      | False -> goto BB16
      | _ -> goto BB15
      end
  }
  BB13 {
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve trail_2 };
    assume { Resolve2.resolve watches_3 };
    cref_43 <- Type.core_result_result_Err_0 _35;
    _45 <- cref_43;
    _0 <- Type.Core_Result_Result_Err _45;
    goto BB19
  }
  BB14 {
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve trail_2 };
    assume { Resolve2.resolve watches_3 };
    absurd
  }
  BB15 {
    j_5 <- j_5 + (1 : usize);
    _20 <- ();
    goto BB17
  }
  BB16 {
    _20 <- ();
    goto BB17
  }
  BB17 {
    goto BB5
  }
  BB18 {
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve trail_2 };
    assume { Resolve2.resolve watches_3 };
    _19 <- ();
    _49 <- ();
    _0 <- Type.Core_Result_Result_Ok _49;
    goto BB19
  }
  BB19 {
    return _0
  }
  
end
module CreuSat_UnitProp_UnitPropagate_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use seq.Seq
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat1
  clone CreuSat_Logic_LogicFormula_Impl1_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  val unit_propagate [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : borrowed (Type.creusat_trail_trail)) (watches : borrowed (Type.creusat_watches_watches)) : Type.core_result_result () usize
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * watches) ( * f)}
    requires {Invariant1.invariant' ( * trail) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { match (result) with
      | Type.Core_Result_Result_Ok () -> true
      | Type.Core_Result_Result_Err n -> UInt64.to_int n < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) && Unsat0.unsat ( ^ f) (Type.creusat_trail_trail_Trail_assignments ( ^ trail)) && Unsat1.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int n)) (Type.creusat_trail_trail_Trail_assignments ( ^ trail))
      end }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ f) }
    ensures { Invariant1.invariant' ( ^ trail) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ f) }
    
end
module CreuSat_UnitProp_UnitPropagate
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use seq.Seq
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model12 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model10 with function Model0.model = Model12.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model10.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model10.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model10.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model10.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model10.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model10.model
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model10.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model11 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model8 with function Model0.model = Model11.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant3 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicClause_Impl2_Unsat as Unsat1 with function Model0.model = Model8.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model4 with type t = borrowed (Type.creusat_trail_trail)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model3 with type t = borrowed (Type.creusat_formula_formula)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = borrowed (Type.creusat_watches_watches)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model0.model,
  function Model1.model = Model10.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model0.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model0.model,
  function Model1.model = Model10.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Unsat as Unsat0 with function Model0.model = Model8.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model7 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model10.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant2 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model7.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model9.model,
  function Model1.model = Model0.model, function Model2.model = Model10.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model6.model,
  function Model1.model = Model8.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model6.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model6.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model5.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model6.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model5.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model8.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model5.model, function Model1.model = Model6.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.creusat_trail_step
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_trail_step
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_trail_step
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_trail_step
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_trail_trail),
  function Model0.model = Model4.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record1 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model3.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record2 with type t = borrowed (Type.creusat_watches_watches),
  function Model0.model = Model2.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_trail_step, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model6.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_trail_step, type a = Type.alloc_alloc_global,
  function Model0.model = Model6.model
  clone CreuSat_UnitProp_UnitPropCurrentLevel_Interface as UnitPropCurrentLevel0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Invariant2.invariant' = Invariant2.invariant', predicate Equisat0.equisat = Equisat0.equisat,
  function Model0.model = Model0.model, predicate Unsat0.unsat = Unsat0.unsat, predicate Unsat1.unsat = Unsat1.unsat,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg unit_propagate [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : borrowed (Type.creusat_trail_trail)) (watches : borrowed (Type.creusat_watches_watches)) : Type.core_result_result () usize
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * watches) ( * f)}
    requires {Invariant1.invariant' ( * trail) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { match (result) with
      | Type.Core_Result_Result_Ok () -> true
      | Type.Core_Result_Result_Err n -> UInt64.to_int n < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) && Unsat0.unsat ( ^ f) (Type.creusat_trail_trail_Trail_assignments ( ^ trail)) && Unsat1.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int n)) (Type.creusat_trail_trail_Trail_assignments ( ^ trail))
      end }
    ensures { Invariant0.invariant' ( ^ watches) ( ^ f) }
    ensures { Invariant1.invariant' ( ^ trail) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ f) }
    
   = 
  var _0 : Type.core_result_result () usize;
  var f_1 : borrowed (Type.creusat_formula_formula);
  var trail_2 : borrowed (Type.creusat_trail_trail);
  var watches_3 : borrowed (Type.creusat_watches_watches);
  var i_4 : usize;
  var old_trail_5 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_trail_trail));
  var _6 : borrowed (Type.creusat_trail_trail);
  var _7 : borrowed (Type.creusat_trail_trail);
  var old_f_8 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _9 : borrowed (Type.creusat_formula_formula);
  var _10 : borrowed (Type.creusat_formula_formula);
  var old_w_11 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_watches_watches));
  var _12 : borrowed (Type.creusat_watches_watches);
  var _13 : borrowed (Type.creusat_watches_watches);
  var _14 : ();
  var _15 : ();
  var _16 : bool;
  var _17 : usize;
  var _18 : usize;
  var _19 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var lit_20 : Type.creusat_lit_lit;
  var _21 : Type.creusat_trail_step;
  var _22 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var _23 : usize;
  var _24 : ();
  var _25 : Type.core_result_result () usize;
  var _26 : borrowed (Type.creusat_formula_formula);
  var _27 : borrowed (Type.creusat_trail_trail);
  var _28 : borrowed (Type.creusat_watches_watches);
  var _29 : Type.creusat_lit_lit;
  var _30 : isize;
  var cref_31 : usize;
  var _32 : ();
  var _33 : usize;
  var _34 : ();
  var _35 : ();
  var _36 : ();
  var _37 : usize;
  var _38 : ();
  {
    f_1 <- f;
    trail_2 <- trail;
    watches_3 <- watches;
    goto BB0
  }
  BB0 {
    i_4 <- Type.creusat_trail_trail_Trail_curr_i ( * trail_2);
    _7 <- trail_2;
    _6 <- _7;
    old_trail_5 <- Record0.record _6;
    goto BB1
  }
  BB1 {
    _10 <- f_1;
    _9 <- _10;
    old_f_8 <- Record1.record _9;
    goto BB2
  }
  BB2 {
    _13 <- watches_3;
    _12 <- _13;
    old_w_11 <- Record2.record _12;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant f_inv { Invariant2.invariant' ( * f_1) };
    invariant trail_inv { Invariant1.invariant' ( * trail_2) ( * f_1) };
    invariant watch_len { Seq.length (Model1.model (Type.creusat_watches_watches_Watches_watches ( * watches_3))) = Seq.length (Model1.model (Type.creusat_watches_watches_Watches_watches ( * Model2.model old_w_11))) };
    invariant watch_inv { Invariant0.invariant' ( * watches_3) ( * f_1) };
    invariant f_equi { Equisat0.equisat ( * Model3.model old_f_8) ( * f_1) };
    invariant nvars_unch { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f_1)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * Model3.model old_f_8)) };
    invariant proph_t {  ^ trail_2 =  ^ Model4.model old_trail_5 };
    invariant proph_f {  ^ f_1 =  ^ Model3.model old_f_8 };
    invariant proph_w {  ^ watches_3 =  ^ Model2.model old_w_11 };
    _17 <- i_4;
    _19 <- Type.creusat_trail_trail_Trail_trail ( * trail_2);
    _18 <- Len0.len _19;
    goto BB5
  }
  BB5 {
    _16 <- _17 < _18;
    switch (_16)
      | False -> goto BB12
      | _ -> goto BB6
      end
  }
  BB6 {
    _22 <- Type.creusat_trail_trail_Trail_trail ( * trail_2);
    _23 <- i_4;
    _21 <- Index0.index _22 _23;
    goto BB7
  }
  BB7 {
    lit_20 <- Type.creusat_trail_step_Step_lit _21;
    _26 <- borrow_mut ( * f_1);
    f_1 <- { f_1 with current = ( ^ _26) };
    _27 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _27) };
    _28 <- borrow_mut ( * watches_3);
    watches_3 <- { watches_3 with current = ( ^ _28) };
    _29 <- lit_20;
    _25 <- UnitPropCurrentLevel0.unit_prop_current_level _26 _27 _28 _29;
    goto BB8
  }
  BB8 {
    switch (_25)
      | Type.Core_Result_Result_Ok _ -> goto BB11
      | Type.Core_Result_Result_Err _ -> goto BB9
      end
  }
  BB9 {
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve trail_2 };
    assume { Resolve2.resolve watches_3 };
    cref_31 <- Type.core_result_result_Err_0 _25;
    _33 <- cref_31;
    _0 <- Type.Core_Result_Result_Err _33;
    goto BB13
  }
  BB10 {
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve trail_2 };
    assume { Resolve2.resolve watches_3 };
    absurd
  }
  BB11 {
    _24 <- ();
    i_4 <- i_4 + (1 : usize);
    _15 <- ();
    goto BB4
  }
  BB12 {
    assume { Resolve0.resolve f_1 };
    assume { Resolve2.resolve watches_3 };
    _14 <- ();
    _37 <- i_4;
    trail_2 <- { trail_2 with current = (let Type.CreuSat_Trail_Trail a b c d e =  * trail_2 in Type.CreuSat_Trail_Trail a b c _37 e) };
    assume { Resolve1.resolve trail_2 };
    _38 <- ();
    _0 <- Type.Core_Result_Result_Ok _38;
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module CreuSat_Solver_Impl0_UnitPropStep_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant3 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant0
  val unit_prop_step [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (d : borrowed (Type.creusat_decision_decisions)) (t : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) : Type.creusat_solver_conflictresult
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant1.invariant' ( * t) ( * f)}
    requires {Invariant2.invariant' ( * w) ( * f)}
    requires {Invariant3.invariant' ( * f)}
    ensures { match (result) with
      | Type.CreuSat_Solver_ConflictResult_Ground -> NotSatisfiable0.not_satisfiable ( ^ f)
      | _ -> true
      end }
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { Invariant0.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { Invariant1.invariant' ( ^ t) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ w) ( ^ f) }
    ensures { Invariant3.invariant' ( ^ f) }
    
end
module CreuSat_Solver_Impl0_UnitPropStep
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant7 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model6 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model5 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model5.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant5 with function Model0.model = Model5.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant8 with function Model0.model = Model8.model,
  function Model1.model = Model5.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant7.invariant',
  predicate Invariant1.invariant' = Invariant8.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model8.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model8.model,
  function Model1.model = Model5.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model8.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model4 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model4.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model5.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model8.model,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model1.model = Model5.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant3 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model4.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model7.model,
  function Model1.model = Model8.model, function Model2.model = Model5.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant2 with function Model0.model = Model3.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model2.model,
  function Model1.model = Model6.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model2.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model2.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model1.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model2.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model1.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model6.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model1.model, function Model1.model = Model2.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant0 with function Model0.model = Model0.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_decision_decisions
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_solver_solver
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner2 with function Model0.model = Model5.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unsat as Unsat1 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model8.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Unsat as Unsat0 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_UnitProp_UnitPropagate_Interface as UnitPropagate0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant3.invariant',
  predicate Equisat0.equisat = Equisat0.equisat, function Model0.model = Model8.model,
  predicate Unsat0.unsat = Unsat0.unsat, predicate Unsat1.unsat = Unsat1.unsat,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Solver_Impl0_HandleConflict_Interface as HandleConflict0 with function Model0.model = Model8.model,
  predicate Unsat0.unsat = Unsat1.unsat, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  predicate Invariant3.invariant' = Invariant3.invariant',
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg unit_prop_step [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (d : borrowed (Type.creusat_decision_decisions)) (t : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) : Type.creusat_solver_conflictresult
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant1.invariant' ( * t) ( * f)}
    requires {Invariant2.invariant' ( * w) ( * f)}
    requires {Invariant3.invariant' ( * f)}
    ensures { match (result) with
      | Type.CreuSat_Solver_ConflictResult_Ground -> NotSatisfiable0.not_satisfiable ( ^ f)
      | _ -> true
      end }
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { Invariant0.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { Invariant1.invariant' ( ^ t) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ w) ( ^ f) }
    ensures { Invariant3.invariant' ( ^ f) }
    
   = 
  var _0 : Type.creusat_solver_conflictresult;
  var self_1 : borrowed (Type.creusat_solver_solver);
  var f_2 : borrowed (Type.creusat_formula_formula);
  var d_3 : borrowed (Type.creusat_decision_decisions);
  var t_4 : borrowed (Type.creusat_trail_trail);
  var w_5 : borrowed (Type.creusat_watches_watches);
  var _6 : ();
  var _7 : Type.core_result_result () usize;
  var _8 : borrowed (Type.creusat_formula_formula);
  var _9 : borrowed (Type.creusat_trail_trail);
  var _10 : borrowed (Type.creusat_watches_watches);
  var _11 : isize;
  var cref_12 : usize;
  var _13 : Type.core_option_option bool;
  var _14 : borrowed (Type.creusat_solver_solver);
  var _15 : borrowed (Type.creusat_formula_formula);
  var _16 : borrowed (Type.creusat_trail_trail);
  var _17 : usize;
  var _18 : borrowed (Type.creusat_watches_watches);
  var _19 : borrowed (Type.creusat_decision_decisions);
  var _20 : isize;
  {
    self_1 <- self;
    f_2 <- f;
    d_3 <- d;
    t_4 <- t;
    w_5 <- w;
    goto BB0
  }
  BB0 {
    _8 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _8) };
    _9 <- borrow_mut ( * t_4);
    t_4 <- { t_4 with current = ( ^ _9) };
    _10 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _10) };
    _7 <- UnitPropagate0.unit_propagate _8 _9 _10;
    goto BB1
  }
  BB1 {
    switch (_7)
      | Type.Core_Result_Result_Ok _ -> goto BB4
      | Type.Core_Result_Result_Err _ -> goto BB2
      end
  }
  BB2 {
    cref_12 <- Type.core_result_result_Err_0 _7;
    _14 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _14) };
    _15 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _15) };
    _16 <- borrow_mut ( * t_4);
    t_4 <- { t_4 with current = ( ^ _16) };
    _17 <- cref_12;
    _18 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _18) };
    _19 <- borrow_mut ( * d_3);
    d_3 <- { d_3 with current = ( ^ _19) };
    _13 <- HandleConflict0.handle_conflict _14 _15 _16 _17 _18 _19;
    goto BB5
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    absurd
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    _0 <- Type.CreuSat_Solver_ConflictResult_Ok;
    goto BB12
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    switch (_13)
      | Type.Core_Option_Option_None -> goto BB6
      | Type.Core_Option_Option_Some _ -> goto BB7
      end
  }
  BB6 {
    _0 <- Type.CreuSat_Solver_ConflictResult_Continue;
    goto BB11
  }
  BB7 {
    switch (Type.core_option_option_Some_0 _13)
      | False -> goto BB9
      | _ -> goto BB10
      end
  }
  BB8 {
    absurd
  }
  BB9 {
    _0 <- Type.CreuSat_Solver_ConflictResult_Ground;
    goto BB11
  }
  BB10 {
    _0 <- Type.CreuSat_Solver_ConflictResult_Err;
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module CreuSat_Solver_Impl0_UnitPropLoop_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant3 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant0
  val unit_prop_loop [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (d : borrowed (Type.creusat_decision_decisions)) (t : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) : Type.core_option_option bool
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant1.invariant' ( * w) ( * f)}
    requires {Invariant2.invariant' ( * t) ( * f)}
    requires {Invariant3.invariant' ( * f)}
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { match (result) with
      | Type.Core_Option_Option_Some (False) -> NotSatisfiable0.not_satisfiable ( ^ f)
      | Type.Core_Option_Option_Some (True) -> true
      | Type.Core_Option_Option_None -> true
      end }
    ensures { Invariant0.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { Invariant1.invariant' ( ^ w) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ t) ( ^ f) }
    ensures { Invariant3.invariant' ( ^ f) }
    
end
module CreuSat_Solver_Impl0_UnitPropLoop
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant7 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model14 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model12 with function Model0.model = Model14.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model12.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model12.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model13 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model9 with function Model0.model = Model13.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model9.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model9.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model9.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model9.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant5 with function Model0.model = Model9.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model9.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model11 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant8 with function Model0.model = Model11.model,
  function Model1.model = Model9.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant7.invariant',
  predicate Invariant1.invariant' = Invariant8.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model11.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model11.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model11.model,
  function Model1.model = Model9.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model11.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model8 with function Model0.model = Model11.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model8.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model9.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model11.model,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model1.model = Model9.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant3 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model8.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model10.model,
  function Model1.model = Model11.model, function Model2.model = Model9.model
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model3 with type t = borrowed (Type.creusat_decision_decisions)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = borrowed (Type.creusat_watches_watches)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = borrowed (Type.creusat_trail_trail)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = borrowed (Type.creusat_formula_formula)
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model7.model,
  function Model1.model = Model12.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model7.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model7.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model6.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model7.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model6.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model12.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant2 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model6.model, function Model1.model = Model7.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant1 with function Model0.model = Model5.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant0 with function Model0.model = Model4.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_decision_decisions
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_solver_solver
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record3 with type t = borrowed (Type.creusat_decision_decisions),
  function Model0.model = Model3.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record2 with type t = borrowed (Type.creusat_watches_watches),
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record1 with type t = borrowed (Type.creusat_trail_trail),
  function Model0.model = Model1.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model0.model
  clone CreuSat_Solver_Impl0_UnitPropStep_Interface as UnitPropStep0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  predicate Invariant3.invariant' = Invariant3.invariant',
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg unit_prop_loop [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (d : borrowed (Type.creusat_decision_decisions)) (t : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) : Type.core_option_option bool
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant1.invariant' ( * w) ( * f)}
    requires {Invariant2.invariant' ( * t) ( * f)}
    requires {Invariant3.invariant' ( * f)}
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { match (result) with
      | Type.Core_Option_Option_Some (False) -> NotSatisfiable0.not_satisfiable ( ^ f)
      | Type.Core_Option_Option_Some (True) -> true
      | Type.Core_Option_Option_None -> true
      end }
    ensures { Invariant0.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { Invariant1.invariant' ( ^ w) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ t) ( ^ f) }
    ensures { Invariant3.invariant' ( ^ f) }
    
   = 
  var _0 : Type.core_option_option bool;
  var self_1 : borrowed (Type.creusat_solver_solver);
  var f_2 : borrowed (Type.creusat_formula_formula);
  var d_3 : borrowed (Type.creusat_decision_decisions);
  var t_4 : borrowed (Type.creusat_trail_trail);
  var w_5 : borrowed (Type.creusat_watches_watches);
  var old_f_6 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _7 : borrowed (Type.creusat_formula_formula);
  var _8 : borrowed (Type.creusat_formula_formula);
  var old_t_9 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_trail_trail));
  var _10 : borrowed (Type.creusat_trail_trail);
  var _11 : borrowed (Type.creusat_trail_trail);
  var old_w_12 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_watches_watches));
  var _13 : borrowed (Type.creusat_watches_watches);
  var _14 : borrowed (Type.creusat_watches_watches);
  var old_d_15 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_decision_decisions));
  var _16 : borrowed (Type.creusat_decision_decisions);
  var _17 : borrowed (Type.creusat_decision_decisions);
  var _18 : ();
  var _19 : ();
  var _20 : Type.creusat_solver_conflictresult;
  var _21 : borrowed (Type.creusat_solver_solver);
  var _22 : borrowed (Type.creusat_formula_formula);
  var _23 : borrowed (Type.creusat_decision_decisions);
  var _24 : borrowed (Type.creusat_trail_trail);
  var _25 : borrowed (Type.creusat_watches_watches);
  var _26 : isize;
  var _27 : ();
  var _28 : ();
  var _29 : ();
  {
    self_1 <- self;
    f_2 <- f;
    d_3 <- d;
    t_4 <- t;
    w_5 <- w;
    goto BB0
  }
  BB0 {
    _8 <- f_2;
    _7 <- _8;
    old_f_6 <- Record0.record _7;
    goto BB1
  }
  BB1 {
    _11 <- t_4;
    _10 <- _11;
    old_t_9 <- Record1.record _10;
    goto BB2
  }
  BB2 {
    _14 <- w_5;
    _13 <- _14;
    old_w_12 <- Record2.record _13;
    goto BB3
  }
  BB3 {
    _17 <- d_3;
    _16 <- _17;
    old_d_15 <- Record3.record _16;
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant maintains_f { Invariant3.invariant' ( * f_2) };
    invariant maintains_t { Invariant2.invariant' ( * t_4) ( * f_2) };
    invariant maintains_w { Invariant1.invariant' ( * w_5) ( * f_2) };
    invariant maintains_d { Invariant0.invariant' ( * d_3) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f_2))) };
    invariant equi { Equisat0.equisat ( * Model0.model old_f_6) ( * f_2) };
    invariant num_vars { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f_2)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * Model0.model old_f_6)) };
    invariant prophf {  ^ f_2 =  ^ Model0.model old_f_6 };
    invariant propht {  ^ t_4 =  ^ Model1.model old_t_9 };
    invariant prophw {  ^ w_5 =  ^ Model2.model old_w_12 };
    invariant prophd {  ^ d_3 =  ^ Model3.model old_d_15 };
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _22 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _22) };
    _23 <- borrow_mut ( * d_3);
    d_3 <- { d_3 with current = ( ^ _23) };
    _24 <- borrow_mut ( * t_4);
    t_4 <- { t_4 with current = ( ^ _24) };
    _25 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _25) };
    _20 <- UnitPropStep0.unit_prop_step _21 _22 _23 _24 _25;
    goto BB6
  }
  BB6 {
    switch (_20)
      | Type.CreuSat_Solver_ConflictResult_Ok -> goto BB9
      | Type.CreuSat_Solver_ConflictResult_Err -> goto BB11
      | Type.CreuSat_Solver_ConflictResult_Ground -> goto BB10
      | Type.CreuSat_Solver_ConflictResult_Continue -> goto BB7
      end
  }
  BB7 {
    _19 <- ();
    goto BB5
  }
  BB8 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    absurd
  }
  BB9 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    _0 <- Type.Core_Option_Option_Some true;
    goto BB12
  }
  BB10 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    _0 <- Type.Core_Option_Option_Some false;
    goto BB12
  }
  BB11 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    _0 <- Type.Core_Option_Option_None;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module CreuSat_Trail_Impl0_EnqDecision_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.UInt8
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  val enq_decision [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (idx : usize) (_f : Type.creusat_formula_formula) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) _f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    requires {Unset0.unset (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self))) (UInt64.to_int idx))}
    requires {UInt64.to_int idx < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)}
    requires {Invariant0.invariant' ( * self) _f}
    requires {Invariant1.invariant' _f}
    ensures { Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) = 1 + Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) }
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) _f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { UInt8.to_int (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) (UInt64.to_int idx)) = 1 || UInt8.to_int (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) (UInt64.to_int idx)) = 0 }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self))) && j <> UInt64.to_int idx -> Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self))) j = Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) j }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module CreuSat_Trail_Impl0_EnqDecision
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.UInt8
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model6 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model4.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant5 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant3 with function Model0.model = Model6.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model6.model
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model6.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant6 with function Model0.model = Model3.model,
  function Model1.model = Model6.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant4 with predicate Invariant0.invariant' = Invariant5.invariant',
  predicate Invariant1.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model3.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model5 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant3.invariant', function Model1.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model5.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model3.model,
  function Model1.model = Model6.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant2 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model0.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model0.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Model0.model = Model0.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model4.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model1.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant0 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model4.model, function Model1.model = Model0.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_trail_trail
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy2
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = uint8
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere1 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = uint8
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = usize
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = usize
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model4.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with type t = usize, type a = Type.alloc_alloc_global,
  function Model0.model = Model4.model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = usize, type a = Type.alloc_alloc_global,
  function Model0.model = Model4.model
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere,
  predicate HasValue0.has_value = HasValue1.has_value, type Output0.output = Output1.output
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model1.model
  clone CreuSat_Lit_Impl1_PhaseSaved_Interface as PhaseSaved0 with function Model0.model = Model8.model,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Alloc_Vec_Impl1_Push_Interface as Push1 with type t = Type.creusat_trail_step, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_trail_step, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  let rec cfg enq_decision [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (idx : usize) (_f : Type.creusat_formula_formula) : ()
    requires {LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) _f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    requires {Unset0.unset (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self))) (UInt64.to_int idx))}
    requires {UInt64.to_int idx < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)}
    requires {Invariant0.invariant' ( * self) _f}
    requires {Invariant1.invariant' _f}
    ensures { Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) = 1 + Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) }
    ensures { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) _f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { UInt8.to_int (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) (UInt64.to_int idx)) = 1 || UInt8.to_int (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) (UInt64.to_int idx)) = 0 }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self))) && j <> UInt64.to_int idx -> Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self))) j = Seq.get (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) j }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_trail_trail);
  var idx_2 : usize;
  var _f_3 : Type.creusat_formula_formula;
  var trail_len_4 : usize;
  var _5 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var _6 : ();
  var _7 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _8 : usize;
  var dlevel_9 : usize;
  var _10 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _11 : usize;
  var _12 : borrowed usize;
  var _13 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _14 : usize;
  var _15 : borrowed uint8;
  var _16 : borrowed (Type.alloc_vec_vec uint8 (Type.alloc_alloc_global));
  var _17 : usize;
  var lit_18 : Type.creusat_lit_lit;
  var _19 : usize;
  var _20 : Type.creusat_assignments_assignments;
  var _21 : Type.creusat_assignments_assignments;
  var step_22 : Type.creusat_trail_step;
  var _23 : Type.creusat_lit_lit;
  var _24 : usize;
  var _25 : Type.creusat_trail_reason;
  var _26 : ();
  var _27 : borrowed (Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global));
  var _28 : Type.creusat_trail_step;
  var _29 : ();
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : ();
  {
    self_1 <- self;
    idx_2 <- idx;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    _5 <- Type.creusat_trail_trail_Trail_trail ( * self_1);
    trail_len_4 <- Len0.len _5;
    goto BB1
  }
  BB1 {
    _7 <- borrow_mut (Type.creusat_trail_trail_Trail_decisions ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Trail_Trail a b c d e =  * self_1 in Type.CreuSat_Trail_Trail a b c d ( ^ _7)) };
    _8 <- trail_len_4;
    _6 <- Push0.push _7 _8;
    goto BB2
  }
  BB2 {
    _10 <- Type.creusat_trail_trail_Trail_decisions ( * self_1);
    dlevel_9 <- Len1.len _10;
    goto BB3
  }
  BB3 {
    _11 <- dlevel_9;
    _13 <- borrow_mut (Type.creusat_trail_trail_Trail_lit_to_level ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Trail_Trail a b c d e =  * self_1 in Type.CreuSat_Trail_Trail a ( ^ _13) c d e) };
    _14 <- idx_2;
    _12 <- IndexMut0.index_mut _13 _14;
    goto BB4
  }
  BB4 {
    _12 <- { _12 with current = _11 };
    assume { Resolve0.resolve _12 };
    _16 <- borrow_mut (Type.creusat_assignments_assignments_Assignments_0 (Type.creusat_trail_trail_Trail_assignments ( * self_1)));
    self_1 <- { self_1 with current = (let Type.CreuSat_Trail_Trail a b c d e =  * self_1 in Type.CreuSat_Trail_Trail (let Type.CreuSat_Assignments_Assignments a = Type.creusat_trail_trail_Trail_assignments ( * self_1) in Type.CreuSat_Assignments_Assignments ( ^ _16)) b c d e) };
    _17 <- idx_2;
    _15 <- IndexMut1.index_mut _16 _17;
    goto BB5
  }
  BB5 {
    _15 <- { _15 with current = ( * _15 - (2 : uint8)) };
    assume { Resolve1.resolve _15 };
    _19 <- idx_2;
    _21 <- Type.creusat_trail_trail_Trail_assignments ( * self_1);
    _20 <- _21;
    lit_18 <- PhaseSaved0.phase_saved _19 _20;
    goto BB6
  }
  BB6 {
    _23 <- lit_18;
    _24 <- dlevel_9;
    _25 <- Type.CreuSat_Trail_Reason_Decision;
    step_22 <- Type.CreuSat_Trail_Step _23 _24 _25;
    _27 <- borrow_mut (Type.creusat_trail_trail_Trail_trail ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Trail_Trail a b c d e =  * self_1 in Type.CreuSat_Trail_Trail a b ( ^ _27) d e) };
    _28 <- step_22;
    _26 <- Push1.push _27 _28;
    goto BB7
  }
  BB7 {
    assume { Resolve2.resolve self_1 };
    assert { LitNotInLess0.lit_not_in_less ( * self_1) _f_3 };
    _29 <- ();
    assert { LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) _f_3 (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self_1))) };
    _30 <- ();
    assert { TrailInvariant0.trail_invariant (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self_1))) _f_3 };
    _31 <- ();
    assert { LitIsUnique0.lit_is_unique ( * self_1) };
    _32 <- ();
    assert { TrailEntriesAreAssigned0.trail_entries_are_assigned ( * self_1) };
    _33 <- ();
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Solver_Impl0_OuterLoop_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicAssignments_Impl1_Complete_Interface as Complete0
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicFormula_Impl1_Sat_Interface as Sat0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant3 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant0
  val outer_loop [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (d : borrowed (Type.creusat_decision_decisions)) (trail : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) : Type.creusat_solver_satresult
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant0.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant1.invariant' ( * w) ( * f)}
    requires {Invariant2.invariant' ( * trail) ( * f)}
    requires {Invariant3.invariant' ( * f)}
    ensures { match (result) with
      | Type.CreuSat_Solver_SatResult_Sat _ -> Sat0.sat ( ^ f) (Type.creusat_trail_trail_Trail_assignments ( ^ trail)) && Complete0.complete (Type.creusat_trail_trail_Trail_assignments ( ^ trail))
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable ( ^ f)
      | Type.CreuSat_Solver_SatResult_Unknown -> true
      | Type.CreuSat_Solver_SatResult_Err -> true
      end }
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { Invariant0.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { Invariant1.invariant' ( ^ w) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ trail) ( ^ f) }
    ensures { Invariant3.invariant' ( ^ f) }
    
end
module CreuSat_Solver_Impl0_OuterLoop
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant7 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model6 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model6.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant5 with function Model0.model = Model6.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model5 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat1 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant8 with function Model0.model = Model8.model,
  function Model1.model = Model6.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant7.invariant',
  predicate Invariant1.invariant' = Invariant8.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model8.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model8.model,
  function Model1.model = Model6.model, predicate Sat0.sat = Sat1.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model8.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model4 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicFormula_Impl1_Sat as Sat0 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model1.model = Model4.model,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner, axiom .
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model8.model,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model1.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant3 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model4.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model7.model,
  function Model1.model = Model8.model, function Model2.model = Model6.model
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model4.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model6.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicAssignments_Impl1_Complete as Complete0 with function Model0.model = Model5.model,
  predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model3.model,
  function Model1.model = Model5.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model3.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model3.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model2.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model3.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model2.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model5.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant2 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model2.model, function Model1.model = Model3.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant0 with function Model0.model = Model0.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_decision_decisions
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_solver_solver
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = uint8, function Model0.model = Model9.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model11 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model5.model
  clone CreuSat_Formula_Impl0_IsSat_Interface as IsSat0 with predicate Invariant0.invariant' = Invariant4.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant', predicate Sat0.sat = Sat0.sat,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old, function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Trail_Impl0_DecisionLevel_Interface as DecisionLevel0 with function Model0.model = Model2.model
  clone CreuSat_Trail_Impl0_EnqDecision_Interface as EnqDecision0 with function Model0.model = Model3.model,
  function Model1.model = Model5.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Unset0.unset = Unset0.unset, predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Formula_Impl0_ReduceDb_Interface as ReduceDb0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Decision_Impl1_GetNext_Interface as GetNext0 with predicate Invariant0.invariant' = Invariant4.invariant',
  predicate Invariant1.invariant' = Invariant0.invariant', function Model0.model = Model11.model,
  predicate Unset0.unset = Unset0.unset, predicate Complete0.complete = Complete0.complete
  clone CreuSat_Trail_Impl0_BacktrackTo_Interface as BacktrackTo0 with function Model0.model = Model3.model,
  function Model1.model = Model5.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant2.invariant',
  predicate Invariant2.invariant' = Invariant3.invariant', function Model2.model = Model2.model,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Solver_Impl0_UnitPropLoop_Interface as UnitPropLoop0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate Invariant3.invariant' = Invariant3.invariant', predicate Equisat0.equisat = Equisat0.equisat,
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg outer_loop [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (d : borrowed (Type.creusat_decision_decisions)) (trail : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) : Type.creusat_solver_satresult
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant0.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant1.invariant' ( * w) ( * f)}
    requires {Invariant2.invariant' ( * trail) ( * f)}
    requires {Invariant3.invariant' ( * f)}
    ensures { match (result) with
      | Type.CreuSat_Solver_SatResult_Sat _ -> Sat0.sat ( ^ f) (Type.creusat_trail_trail_Trail_assignments ( ^ trail)) && Complete0.complete (Type.creusat_trail_trail_Trail_assignments ( ^ trail))
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable ( ^ f)
      | Type.CreuSat_Solver_SatResult_Unknown -> true
      | Type.CreuSat_Solver_SatResult_Err -> true
      end }
    ensures { Equisat0.equisat ( * f) ( ^ f) }
    ensures { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { Invariant0.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { Invariant1.invariant' ( ^ w) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ trail) ( ^ f) }
    ensures { Invariant3.invariant' ( ^ f) }
    
   = 
  var _0 : Type.creusat_solver_satresult;
  var self_1 : borrowed (Type.creusat_solver_solver);
  var f_2 : borrowed (Type.creusat_formula_formula);
  var d_3 : borrowed (Type.creusat_decision_decisions);
  var trail_4 : borrowed (Type.creusat_trail_trail);
  var w_5 : borrowed (Type.creusat_watches_watches);
  var _6 : ();
  var _7 : Type.core_option_option bool;
  var _8 : borrowed (Type.creusat_solver_solver);
  var _9 : borrowed (Type.creusat_formula_formula);
  var _10 : borrowed (Type.creusat_decision_decisions);
  var _11 : borrowed (Type.creusat_trail_trail);
  var _12 : borrowed (Type.creusat_watches_watches);
  var _13 : isize;
  var _14 : ();
  var _15 : ();
  var slow_16 : usize;
  var _17 : bool;
  var _18 : usize;
  var _19 : usize;
  var _20 : bool;
  var _21 : usize;
  var _22 : usize;
  var _23 : bool;
  var _24 : ();
  var _25 : bool;
  var _26 : bool;
  var _27 : usize;
  var _28 : Type.creusat_trail_trail;
  var _29 : bool;
  var _30 : usize;
  var _31 : usize;
  var _32 : usize;
  var _33 : ();
  var _34 : bool;
  var _35 : usize;
  var _36 : usize;
  var _37 : ();
  var _38 : borrowed (Type.creusat_formula_formula);
  var _39 : borrowed (Type.creusat_watches_watches);
  var _40 : Type.creusat_trail_trail;
  var _41 : borrowed (Type.creusat_solver_solver);
  var _42 : ();
  var _43 : borrowed (Type.creusat_trail_trail);
  var _44 : Type.creusat_formula_formula;
  var _45 : borrowed (Type.creusat_decision_decisions);
  var _46 : ();
  var _47 : Type.core_option_option usize;
  var _48 : borrowed (Type.creusat_decision_decisions);
  var _49 : Type.creusat_assignments_assignments;
  var _50 : Type.creusat_assignments_assignments;
  var _51 : Type.creusat_formula_formula;
  var _52 : isize;
  var next_53 : usize;
  var _54 : ();
  var _55 : borrowed (Type.creusat_trail_trail);
  var _56 : usize;
  var _57 : Type.creusat_formula_formula;
  var _58 : bool;
  var _59 : Type.creusat_formula_formula;
  var _60 : Type.creusat_assignments_assignments;
  var _61 : Type.creusat_assignments_assignments;
  var _62 : ();
  var _63 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _64 : ();
  {
    self_1 <- self;
    f_2 <- f;
    d_3 <- d;
    trail_4 <- trail;
    w_5 <- w;
    goto BB0
  }
  BB0 {
    _8 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _8) };
    _9 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _9) };
    _10 <- borrow_mut ( * d_3);
    d_3 <- { d_3 with current = ( ^ _10) };
    _11 <- borrow_mut ( * trail_4);
    trail_4 <- { trail_4 with current = ( ^ _11) };
    _12 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _12) };
    _7 <- UnitPropLoop0.unit_prop_loop _8 _9 _10 _11 _12;
    goto BB1
  }
  BB1 {
    switch (_7)
      | Type.Core_Option_Option_None -> goto BB5
      | Type.Core_Option_Option_Some _ -> goto BB2
      end
  }
  BB2 {
    switch (Type.core_option_option_Some_0 _7)
      | False -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    _6 <- ();
    _18 <- Type.creusat_solver_solver_Solver_slow ( * self_1);
    _20 <- (2 : usize) = (0 : usize);
    assert { not _20 };
    goto BB6
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve3.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve4.resolve trail_4 };
    assume { Resolve1.resolve w_5 };
    _0 <- Type.CreuSat_Solver_SatResult_Unsat;
    goto BB34
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve3.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve4.resolve trail_4 };
    assume { Resolve1.resolve w_5 };
    _0 <- Type.CreuSat_Solver_SatResult_Err;
    goto BB34
  }
  BB6 {
    _19 <- (18446744073709551615 : usize) / (2 : usize);
    _17 <- _18 < _19;
    switch (_17)
      | False -> goto BB9
      | _ -> goto BB7
      end
  }
  BB7 {
    _22 <- Type.creusat_solver_solver_Solver_slow ( * self_1);
    _23 <- (100 : usize) = (0 : usize);
    assert { not _23 };
    goto BB8
  }
  BB8 {
    _21 <- _22 / (100 : usize);
    slow_16 <- _21 * (125 : usize);
    goto BB10
  }
  BB9 {
    slow_16 <- Type.creusat_solver_solver_Solver_slow ( * self_1);
    goto BB10
  }
  BB10 {
    _28 <-  * trail_4;
    _27 <- DecisionLevel0.decision_level _28;
    goto BB14
  }
  BB11 {
    _25 <- false;
    goto BB13
  }
  BB12 {
    _30 <- Type.creusat_solver_solver_Solver_fast ( * self_1);
    _31 <- slow_16;
    _29 <- _30 > _31;
    _25 <- _29;
    goto BB13
  }
  BB13 {
    switch (_25)
      | False -> goto BB21
      | _ -> goto BB15
      end
  }
  BB14 {
    _26 <- _27 > (0 : usize);
    switch (_26)
      | False -> goto BB11
      | _ -> goto BB12
      end
  }
  BB15 {
    _32 <- slow_16;
    self_1 <- { self_1 with current = (let Type.CreuSat_Solver_Solver a b c d e f g h =  * self_1 in Type.CreuSat_Solver_Solver a b c d e _32 g h) };
    _35 <- Type.creusat_solver_solver_Solver_num_lemmas ( * self_1);
    _36 <- Type.creusat_solver_solver_Solver_max_lemmas ( * self_1);
    _34 <- _35 > _36;
    switch (_34)
      | False -> goto BB18
      | _ -> goto BB16
      end
  }
  BB16 {
    _38 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _38) };
    _39 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _39) };
    _40 <-  * trail_4;
    _41 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _41) };
    _37 <- ReduceDb0.reduceDB _38 _39 _40 _41;
    goto BB17
  }
  BB17 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve w_5 };
    _33 <- ();
    goto BB19
  }
  BB18 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve w_5 };
    _33 <- ();
    goto BB19
  }
  BB19 {
    _43 <- borrow_mut ( * trail_4);
    trail_4 <- { trail_4 with current = ( ^ _43) };
    _44 <-  * f_2;
    _45 <- borrow_mut ( * d_3);
    d_3 <- { d_3 with current = ( ^ _45) };
    _42 <- BacktrackTo0.backtrack_to _43 (0 : usize) _44 _45;
    goto BB20
  }
  BB20 {
    _24 <- ();
    goto BB22
  }
  BB21 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve w_5 };
    _24 <- ();
    goto BB22
  }
  BB22 {
    _48 <- borrow_mut ( * d_3);
    d_3 <- { d_3 with current = ( ^ _48) };
    _50 <- Type.creusat_trail_trail_Trail_assignments ( * trail_4);
    _49 <- _50;
    _51 <-  * f_2;
    _47 <- GetNext0.get_next _48 _49 _51;
    goto BB23
  }
  BB23 {
    assume { Resolve2.resolve d_3 };
    switch (_47)
      | Type.Core_Option_Option_None -> goto BB24
      | Type.Core_Option_Option_Some _ -> goto BB26
      end
  }
  BB24 {
    _59 <-  * f_2;
    assume { Resolve3.resolve f_2 };
    _61 <- Type.creusat_trail_trail_Trail_assignments ( * trail_4);
    assume { Resolve4.resolve trail_4 };
    _60 <- _61;
    _58 <- IsSat0.is_sat _59 _60;
    goto BB28
  }
  BB25 {
    assume { Resolve3.resolve f_2 };
    assume { Resolve4.resolve trail_4 };
    absurd
  }
  BB26 {
    next_53 <- Type.core_option_option_Some_0 _47;
    _55 <- borrow_mut ( * trail_4);
    trail_4 <- { trail_4 with current = ( ^ _55) };
    _56 <- next_53;
    _57 <-  * f_2;
    assume { Resolve3.resolve f_2 };
    _54 <- EnqDecision0.enq_decision _55 _56 _57;
    goto BB27
  }
  BB27 {
    assume { Resolve4.resolve trail_4 };
    _46 <- ();
    _0 <- Type.CreuSat_Solver_SatResult_Unknown;
    goto BB35
  }
  BB28 {
    switch (_58)
      | False -> goto BB32
      | _ -> goto BB29
      end
  }
  BB29 {
    _63 <- New0.new ();
    goto BB30
  }
  BB30 {
    _0 <- Type.CreuSat_Solver_SatResult_Sat _63;
    goto BB31
  }
  BB31 {
    goto BB33
  }
  BB32 {
    _0 <- Type.CreuSat_Solver_SatResult_Err;
    goto BB33
  }
  BB33 {
    goto BB35
  }
  BB34 {
    goto BB35
  }
  BB35 {
    return _0
  }
  
end
module CreuSat_Solver_Impl0_Inner_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner_Interface as SatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant3 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant0
  val inner [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (formula : borrowed (Type.creusat_formula_formula)) (decisions : Type.creusat_decision_decisions) (trail : Type.creusat_trail_trail) (watches : Type.creusat_watches_watches) : Type.creusat_solver_satresult
    requires {Invariant0.invariant' decisions (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula)))}
    requires {Invariant1.invariant' watches ( * formula)}
    requires {Invariant2.invariant' trail ( * formula)}
    requires {Invariant0.invariant' decisions (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula)))}
    requires {Invariant3.invariant' ( * formula)}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula)) < div 18446744073709551615 2}
    ensures { Equisat0.equisat ( * formula) ( ^ formula) }
    ensures { match (result) with
      | Type.CreuSat_Solver_SatResult_Sat v -> SatInner0.sat_inner ( ^ formula) (Model0.model v) && Equisat0.equisat ( * formula) ( ^ formula) && EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( * formula)
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable ( ^ formula) && Equisat0.equisat ( * formula) ( ^ formula)
      | _ -> true
      end }
    
end
module CreuSat_Solver_Impl0_Inner
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant7 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model11 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model8 with function Model0.model = Model11.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model8.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model8.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant5 with function Model0.model = Model8.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model8.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = borrowed (Type.creusat_formula_formula)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant8 with function Model0.model = Model7.model,
  function Model1.model = Model8.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant7.invariant',
  predicate Invariant1.invariant' = Invariant8.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model7.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model6 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model6.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model8.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model7.model,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model1.model = Model8.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant3 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model6.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model9.model,
  function Model1.model = Model7.model, function Model2.model = Model8.model
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner0 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model10 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model10.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model7.model,
  function Model1.model = Model8.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model5.model,
  function Model1.model = Model10.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model5.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model5.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model4.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model5.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model4.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model10.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant2 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model4.model, function Model1.model = Model5.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant1 with function Model0.model = Model3.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant0 with function Model0.model = Model2.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve6 with type t = uint8
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.creusat_solver_solver
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_decision_decisions
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_formula_formula),
  function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve5 with type t = uint8, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve6.resolve
  clone CreuSat_Logic_LogicAssignments_Impl1_Complete as Complete0 with function Model0.model = Model10.model,
  predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicFormula_Impl1_Sat as Sat1 with function Model0.model = Model10.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model1.model = Model6.model,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner, axiom .
  clone CreuSat_Solver_Impl0_OuterLoop_Interface as OuterLoop0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate Invariant3.invariant' = Invariant3.invariant', predicate Sat0.sat = Sat1.sat,
  predicate Complete0.complete = Complete0.complete,
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate Equisat0.equisat = Equisat0.equisat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model10.model, predicate SatInner0.sat_inner = SatInner0.sat_inner
  let rec cfg inner [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (formula : borrowed (Type.creusat_formula_formula)) (decisions : Type.creusat_decision_decisions) (trail : Type.creusat_trail_trail) (watches : Type.creusat_watches_watches) : Type.creusat_solver_satresult
    requires {Invariant0.invariant' decisions (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula)))}
    requires {Invariant1.invariant' watches ( * formula)}
    requires {Invariant2.invariant' trail ( * formula)}
    requires {Invariant0.invariant' decisions (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula)))}
    requires {Invariant3.invariant' ( * formula)}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula)) < div 18446744073709551615 2}
    ensures { Equisat0.equisat ( * formula) ( ^ formula) }
    ensures { match (result) with
      | Type.CreuSat_Solver_SatResult_Sat v -> SatInner0.sat_inner ( ^ formula) (Model0.model v) && Equisat0.equisat ( * formula) ( ^ formula) && EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( * formula)
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable ( ^ formula) && Equisat0.equisat ( * formula) ( ^ formula)
      | _ -> true
      end }
    
   = 
  var _0 : Type.creusat_solver_satresult;
  var self_1 : borrowed (Type.creusat_solver_solver);
  var formula_2 : borrowed (Type.creusat_formula_formula);
  var decisions_3 : Type.creusat_decision_decisions;
  var trail_4 : Type.creusat_trail_trail;
  var watches_5 : Type.creusat_watches_watches;
  var old_f_6 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_formula_formula));
  var _7 : borrowed (Type.creusat_formula_formula);
  var _8 : borrowed (Type.creusat_formula_formula);
  var _9 : ();
  var _10 : ();
  var _11 : Type.creusat_solver_satresult;
  var _12 : borrowed (Type.creusat_solver_solver);
  var _13 : borrowed (Type.creusat_formula_formula);
  var _14 : borrowed (Type.creusat_decision_decisions);
  var _15 : borrowed (Type.creusat_decision_decisions);
  var _16 : borrowed (Type.creusat_trail_trail);
  var _17 : borrowed (Type.creusat_trail_trail);
  var _18 : borrowed (Type.creusat_watches_watches);
  var _19 : borrowed (Type.creusat_watches_watches);
  var _20 : isize;
  var _21 : ();
  var _22 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var o_23 : Type.creusat_solver_satresult;
  var _24 : ();
  {
    self_1 <- self;
    formula_2 <- formula;
    decisions_3 <- decisions;
    trail_4 <- trail;
    watches_5 <- watches;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    _8 <- formula_2;
    _7 <- _8;
    old_f_6 <- Record0.record _7;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    invariant equi { Equisat0.equisat ( * Model1.model old_f_6) ( * formula_2) };
    invariant num_vars { UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula_2)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * Model1.model old_f_6)) };
    invariant maintains_f { Invariant3.invariant' ( * formula_2) };
    invariant maintains_t { Invariant2.invariant' trail_4 ( * formula_2) };
    invariant maintains_w { Invariant1.invariant' watches_5 ( * formula_2) };
    invariant maintains_d { Invariant0.invariant' decisions_3 (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula_2))) };
    invariant prophf {  ^ formula_2 =  ^ Model1.model old_f_6 };
    _12 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _12) };
    _13 <- borrow_mut ( * formula_2);
    formula_2 <- { formula_2 with current = ( ^ _13) };
    _15 <- borrow_mut decisions_3;
    decisions_3 <-  ^ _15;
    _14 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ _14) };
    _17 <- borrow_mut trail_4;
    trail_4 <-  ^ _17;
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    _19 <- borrow_mut watches_5;
    watches_5 <-  ^ _19;
    _18 <- borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _11 <- OuterLoop0.outer_loop _12 _13 _14 _16 _18;
    goto BB10
  }
  BB10 {
    assume { Resolve0.resolve _15 };
    assume { Resolve1.resolve _17 };
    assume { Resolve2.resolve _19 };
    switch (_11)
      | Type.CreuSat_Solver_SatResult_Sat _ -> goto BB13
      | Type.CreuSat_Solver_SatResult_Unknown -> goto BB12
      | _ -> goto BB11
      end
  }
  BB11 {
    assume { Resolve3.resolve self_1 };
    assume { Resolve4.resolve formula_2 };
    o_23 <- _11;
    _0 <- o_23;
    goto BB16
  }
  BB12 {
    _10 <- ();
    goto BB15
  }
  BB13 {
    assume { Resolve3.resolve self_1 };
    assume { Resolve4.resolve formula_2 };
    assume { Resolve5.resolve _22 };
    _22 <- Type.creusat_assignments_assignments_Assignments_0 (Type.creusat_trail_trail_Trail_assignments trail_4);
    _0 <- Type.CreuSat_Solver_SatResult_Sat _22;
    goto BB14
  }
  BB14 {
    goto BB17
  }
  BB15 {
    goto BB9
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    return _0
  }
  
end
module CreuSat_Trail_Impl0_New_Interface
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) : Type.creusat_trail_trail
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { Invariant2.invariant' result f }
    
end
module CreuSat_Trail_Impl0_New
  use prelude.Prelude
  use Type
  use mach.int.Int
  use prelude.UInt8
  use mach.int.UInt64
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant5 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model6 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model6.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant3 with function Model0.model = Model6.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model6.model
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant6 with function Model0.model = Model5.model,
  function Model1.model = Model6.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant4 with predicate Invariant0.invariant' = Invariant5.invariant',
  predicate Invariant1.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model5.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model1 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model5.model,
  predicate Invariant0.invariant' = Invariant3.invariant', function Model1.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant1 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model1.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model0 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model5.model,
  function Model1.model = Model6.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model3.model,
  function Model1.model = Model0.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model3.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model3.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model2.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model3.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model2.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model0.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant2 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model2.model, function Model1.model = Model3.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = Type.creusat_trail_step,
  function Model0.model = Model3.model
  clone Alloc_Vec_Impl0_New_Interface as New1 with type t = usize, function Model0.model = Model2.model
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = usize, function Model0.model = Model2.model
  let rec cfg new [@cfg:stackify] (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) : Type.creusat_trail_trail
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { Invariant2.invariant' result f }
    
   = 
  var _0 : Type.creusat_trail_trail;
  var f_1 : Type.creusat_formula_formula;
  var a_2 : Type.creusat_assignments_assignments;
  var _3 : Type.creusat_assignments_assignments;
  var _4 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _5 : usize;
  var _6 : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global);
  var _7 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _3 <- a_2;
    _5 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    _4 <- FromElem0.from_elem (18446744073709551615 : usize) _5;
    goto BB2
  }
  BB2 {
    _6 <- New0.new ();
    goto BB3
  }
  BB3 {
    _7 <- New1.new ();
    goto BB4
  }
  BB4 {
    _0 <- Type.CreuSat_Trail_Trail _3 _4 _6 (0 : usize) _7;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module CreuSat_Watches_Impl0_New_Interface
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (f : Type.creusat_formula_formula) : Type.creusat_watches_watches
    ensures { Invariant0.invariant' result f }
    
end
module CreuSat_Watches_Impl0_New
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model1.model,
  function Model1.model = Model2.model, function Model2.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = Type.creusat_watches_watcher
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve1 with type t = Type.creusat_watches_watcher,
  function Model0.model = Model1.model, predicate Resolve0.resolve = Resolve2.resolve
  clone Alloc_Vec_Impl0_New_Interface as New1 with type t = Type.creusat_watches_watcher,
  function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  function Model0.model = Model0.model
  let rec cfg new [@cfg:stackify] (f : Type.creusat_formula_formula) : Type.creusat_watches_watches
    ensures { Invariant0.invariant' result f }
    
   = 
  var _0 : Type.creusat_watches_watches;
  var f_1 : Type.creusat_formula_formula;
  var i_2 : usize;
  var watches_3 : Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : ();
  var _10 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _11 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _12 : ();
  var _13 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _14 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _15 : ();
  var _16 : ();
  var _17 : ();
  var _18 : Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    watches_3 <- New0.new ();
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant i_less { UInt64.to_int i_2 <= UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_1) };
    invariant maintains_inv { WatchesInvariantInternal0.watches_invariant_internal (Model0.model watches_3) (UInt64.to_int i_2) f_1 };
    _7 <- i_2;
    _8 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    _6 <- _7 < _8;
    switch (_6)
      | False -> goto BB9
      | _ -> goto BB4
      end
  }
  BB4 {
    _10 <- borrow_mut watches_3;
    watches_3 <-  ^ _10;
    _11 <- New1.new ();
    goto BB5
  }
  BB5 {
    _9 <- Push0.push _10 _11;
    goto BB6
  }
  BB6 {
    _13 <- borrow_mut watches_3;
    watches_3 <-  ^ _13;
    _14 <- New1.new ();
    goto BB7
  }
  BB7 {
    _12 <- Push0.push _13 _14;
    goto BB8
  }
  BB8 {
    i_2 <- i_2 + (1 : usize);
    _5 <- ();
    goto BB3
  }
  BB9 {
    _4 <- ();
    assume { Resolve0.resolve _18 };
    _18 <- watches_3;
    _0 <- Type.CreuSat_Watches_Watches _18;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module CreuSat_Watches_Impl0_InitWatches_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  val init_watches [@cfg:stackify] (self : borrowed (Type.creusat_watches_watches)) (f : Type.creusat_formula_formula) : ()
    requires {Invariant0.invariant' f}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    requires {Invariant1.invariant' ( * self) f}
    ensures { Invariant1.invariant' ( ^ self) f }
    
end
module CreuSat_Watches_Impl0_InitWatches
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model4 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant2 with function Model0.model = Model4.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model5.model,
  function Model1.model = Model3.model, function Model2.model = Model4.model
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model2 with function Model0.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant2.invariant', function Model1.model = Model4.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model2.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = borrowed (Type.creusat_watches_watches)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant1 with function Model0.model = Model0.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic as ToNegWatchidxLogic0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model6.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model6.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_watches_watches),
  function Model0.model = Model1.model
  clone CreuSat_Watches_Impl0_AddWatcher_Interface as AddWatcher0 with function Model0.model = Model3.model,
  function Model1.model = Model4.model,
  function ToNegWatchidxLogic0.to_neg_watchidx_logic = ToNegWatchidxLogic0.to_neg_watchidx_logic,
  function Model2.model = Model0.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Invariant0.invariant' = Invariant1.invariant'
  let rec cfg init_watches [@cfg:stackify] (self : borrowed (Type.creusat_watches_watches)) (f : Type.creusat_formula_formula) : ()
    requires {Invariant0.invariant' f}
    requires {UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    requires {Invariant1.invariant' ( * self) f}
    ensures { Invariant1.invariant' ( ^ self) f }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_watches_watches);
  var f_2 : Type.creusat_formula_formula;
  var old_w_3 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_watches_watches));
  var _4 : borrowed (Type.creusat_watches_watches);
  var _5 : borrowed (Type.creusat_watches_watches);
  var i_6 : usize;
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var clause_12 : Type.creusat_clause_clause;
  var _13 : Type.creusat_clause_clause;
  var _14 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _15 : usize;
  var _16 : ();
  var _17 : bool;
  var _18 : usize;
  var _19 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _20 : ();
  var _21 : borrowed (Type.creusat_watches_watches);
  var _22 : Type.creusat_lit_lit;
  var _23 : Type.creusat_lit_lit;
  var _24 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _25 : usize;
  var _26 : Type.creusat_formula_formula;
  var _27 : ();
  var _28 : borrowed (Type.creusat_watches_watches);
  var _29 : Type.creusat_lit_lit;
  var _30 : Type.creusat_lit_lit;
  var _31 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _32 : usize;
  var _33 : Type.creusat_formula_formula;
  var _34 : ();
  var _35 : ();
  var _36 : ();
  {
    self_1 <- self;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    _5 <- self_1;
    _4 <- _5;
    old_w_3 <- Record0.record _4;
    goto BB1
  }
  BB1 {
    i_6 <- (0 : usize);
    goto BB2
  }
  BB2 {
    invariant watch_inv { Invariant1.invariant' ( * self_1) f_2 };
    invariant same_len { Seq.length (Model0.model (Type.creusat_watches_watches_Watches_watches ( * self_1))) = 2 * UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_2) };
    invariant proph {  ^ self_1 =  ^ Model1.model old_w_3 };
    _9 <- i_6;
    _11 <- Type.creusat_formula_formula_Formula_clauses f_2;
    _10 <- Len0.len _11;
    goto BB3
  }
  BB3 {
    _8 <- _9 < _10;
    switch (_8)
      | False -> goto BB14
      | _ -> goto BB4
      end
  }
  BB4 {
    _14 <- Type.creusat_formula_formula_Formula_clauses f_2;
    _15 <- i_6;
    _13 <- Index0.index _14 _15;
    goto BB5
  }
  BB5 {
    clause_12 <- _13;
    _19 <- Type.creusat_clause_clause_Clause_rest clause_12;
    _18 <- Len1.len _19;
    goto BB6
  }
  BB6 {
    _17 <- _18 > (1 : usize);
    switch (_17)
      | False -> goto BB12
      | _ -> goto BB7
      end
  }
  BB7 {
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _24 <- Type.creusat_clause_clause_Clause_rest clause_12;
    _23 <- Index1.index _24 (0 : usize);
    goto BB8
  }
  BB8 {
    _22 <- _23;
    _25 <- i_6;
    _26 <- f_2;
    _20 <- AddWatcher0.add_watcher _21 _22 _25 _26;
    goto BB9
  }
  BB9 {
    _28 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _28) };
    _31 <- Type.creusat_clause_clause_Clause_rest clause_12;
    _30 <- Index1.index _31 (1 : usize);
    goto BB10
  }
  BB10 {
    _29 <- _30;
    _32 <- i_6;
    _33 <- f_2;
    _27 <- AddWatcher0.add_watcher _28 _29 _32 _33;
    goto BB11
  }
  BB11 {
    _16 <- ();
    goto BB13
  }
  BB12 {
    _16 <- ();
    goto BB13
  }
  BB13 {
    i_6 <- i_6 + (1 : usize);
    _7 <- ();
    goto BB2
  }
  BB14 {
    assume { Resolve0.resolve self_1 };
    _0 <- ();
    return _0
  }
  
end
module CreuSat_Trail_Impl0_LearnUnits_Interface
  use mach.int.UInt64
  use Type
  use mach.int.Int
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_Unsat_Interface as Unsat1
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld_Interface as InvariantOld0
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant_Interface as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  axiom .
  val learn_units [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (f : Type.creusat_formula_formula) (d : borrowed (Type.creusat_decision_decisions)) : Type.core_option_option usize
    requires {Invariant0.invariant' f}
    requires {Invariant1.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Invariant2.invariant' ( * self) f}
    ensures { match (result) with
      | Type.Core_Option_Option_Some cref -> UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) && Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) = 1 && Unsat0.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)) (Type.creusat_trail_trail_Trail_assignments ( ^ self)) && Unsat1.unsat (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) 0) (Type.creusat_trail_trail_Trail_assignments ( ^ self))
      | _ -> true
      end }
    ensures { Invariant1.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    ensures { Invariant2.invariant' ( ^ self) f }
    
end
module CreuSat_Trail_Impl0_LearnUnits
  use mach.int.UInt64
  use Type
  use mach.int.Int
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int32
  use prelude.UInt8
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model9 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model9.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicLit_Impl1_Unsat as Unsat1 with function Model0.model = Model9.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model3 with type t = borrowed (Type.creusat_decision_decisions)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = borrowed (Type.creusat_trail_trail)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model1.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant3 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Model0.model = Model1.model
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unsat as Unsat0 with function Model0.model = Model9.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant7 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model0.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model4 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant3.invariant', function Model1.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model4.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model7.model,
  function Model1.model = Model9.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model7.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model7.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model6.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model7.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model6.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model9.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant2 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model6.model, function Model1.model = Model7.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant1 with function Model0.model = Model5.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_decision_decisions
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_trail_trail
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy2
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.creusat_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.creusat_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.creusat_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.creusat_clause_clause
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner as UnsetInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Unset as Unset0 with function Model0.model = Model9.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreusotContracts_Logic_Model_Impl0_Model as Model11 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model9.model
  clone CreuSat_Lit_Impl1_LitSet_Interface as LitSet0 with function Model0.model = Model11.model,
  predicate Invariant0.invariant' = Invariant6.invariant', predicate Unset0.unset = Unset0.unset
  clone CreuSat_Lit_Impl1_LitUnsat_Interface as LitUnsat0 with function Model0.model = Model11.model,
  predicate Invariant0.invariant' = Invariant6.invariant', predicate Unsat0.unsat = Unsat1.unsat
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusat_decision_decisions),
  function Model0.model = Model3.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record1 with type t = borrowed (Type.creusat_trail_trail),
  function Model0.model = Model2.model
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.creusat_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model8.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with type t = Type.creusat_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model8.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.creusat_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model
  clone CreuSat_Trail_Impl0_LearnUnit_Interface as LearnUnit0 with function Model0.model = Model7.model,
  function Model1.model = Model9.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  function Model2.model = Model0.model, predicate Invariant0.invariant' = Invariant3.invariant',
  function Model3.model = Model1.model, predicate Invariant1.invariant' = Invariant0.invariant',
  predicate Invariant2.invariant' = Invariant1.invariant', predicate Invariant3.invariant' = Invariant2.invariant',
  predicate Sat0.sat = Sat0.sat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg learn_units [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (f : Type.creusat_formula_formula) (d : borrowed (Type.creusat_decision_decisions)) : Type.core_option_option usize
    requires {Invariant0.invariant' f}
    requires {Invariant1.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {Invariant2.invariant' ( * self) f}
    ensures { match (result) with
      | Type.Core_Option_Option_Some cref -> UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) && Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) = 1 && Unsat0.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)) (Type.creusat_trail_trail_Trail_assignments ( ^ self)) && Unsat1.unsat (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) 0) (Type.creusat_trail_trail_Trail_assignments ( ^ self))
      | _ -> true
      end }
    ensures { Invariant1.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    ensures { Invariant2.invariant' ( ^ self) f }
    
   = 
  var _0 : Type.core_option_option usize;
  var self_1 : borrowed (Type.creusat_trail_trail);
  var f_2 : Type.creusat_formula_formula;
  var d_3 : borrowed (Type.creusat_decision_decisions);
  var _4 : ();
  var i_5 : usize;
  var old_d_6 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_decision_decisions));
  var _7 : borrowed (Type.creusat_decision_decisions);
  var _8 : borrowed (Type.creusat_decision_decisions);
  var old_self_9 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusat_trail_trail));
  var _10 : borrowed (Type.creusat_trail_trail);
  var _11 : borrowed (Type.creusat_trail_trail);
  var _12 : ();
  var _13 : ();
  var _14 : bool;
  var _15 : usize;
  var _16 : usize;
  var _17 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var clause_18 : Type.creusat_clause_clause;
  var _19 : Type.creusat_clause_clause;
  var _20 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _21 : usize;
  var _22 : ();
  var _23 : bool;
  var _24 : usize;
  var _25 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var lit_26 : Type.creusat_lit_lit;
  var _27 : Type.creusat_lit_lit;
  var _28 : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global);
  var _29 : bool;
  var _30 : Type.creusat_lit_lit;
  var _31 : Type.creusat_assignments_assignments;
  var _32 : Type.creusat_assignments_assignments;
  var _33 : bool;
  var _34 : Type.creusat_lit_lit;
  var _35 : Type.creusat_assignments_assignments;
  var _36 : Type.creusat_assignments_assignments;
  var _37 : ();
  var _38 : usize;
  var _39 : Type.core_result_result () ();
  var _40 : borrowed (Type.creusat_trail_trail);
  var _41 : usize;
  var _42 : Type.creusat_formula_formula;
  var _43 : borrowed (Type.creusat_decision_decisions);
  var _44 : ();
  var _45 : ();
  var _46 : ();
  {
    self_1 <- self;
    f_2 <- f;
    d_3 <- d;
    goto BB0
  }
  BB0 {
    i_5 <- (0 : usize);
    _8 <- d_3;
    _7 <- _8;
    old_d_6 <- Record0.record _7;
    goto BB1
  }
  BB1 {
    _11 <- self_1;
    _10 <- _11;
    old_self_9 <- Record1.record _10;
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant self_inv { Invariant2.invariant' ( * self_1) f_2 };
    invariant proph {  ^ Model2.model old_self_9 =  ^ self_1 };
    invariant proph_d {  ^ Model3.model old_d_6 =  ^ d_3 };
    invariant d_inv { Invariant1.invariant' ( * d_3) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f_2)) };
    _15 <- i_5;
    _17 <- Type.creusat_formula_formula_Formula_clauses f_2;
    _16 <- Len0.len _17;
    goto BB4
  }
  BB4 {
    _14 <- _15 < _16;
    switch (_14)
      | False -> goto BB20
      | _ -> goto BB5
      end
  }
  BB5 {
    _20 <- Type.creusat_formula_formula_Formula_clauses f_2;
    _21 <- i_5;
    _19 <- Index0.index _20 _21;
    goto BB6
  }
  BB6 {
    clause_18 <- _19;
    _25 <- Type.creusat_clause_clause_Clause_rest clause_18;
    _24 <- Len1.len _25;
    goto BB7
  }
  BB7 {
    _23 <- _24 = (1 : usize);
    switch (_23)
      | False -> goto BB18
      | _ -> goto BB8
      end
  }
  BB8 {
    _28 <- Type.creusat_clause_clause_Clause_rest clause_18;
    _27 <- Index1.index _28 (0 : usize);
    goto BB9
  }
  BB9 {
    lit_26 <- _27;
    _30 <- lit_26;
    _32 <- Type.creusat_trail_trail_Trail_assignments ( * self_1);
    _31 <- _32;
    _29 <- LitSet0.lit_set _30 _31;
    goto BB10
  }
  BB10 {
    switch (_29)
      | False -> goto BB15
      | _ -> goto BB11
      end
  }
  BB11 {
    _34 <- lit_26;
    _36 <- Type.creusat_trail_trail_Trail_assignments ( * self_1);
    _35 <- _36;
    _33 <- LitUnsat0.lit_unsat _34 _35;
    goto BB12
  }
  BB12 {
    switch (_33)
      | False -> goto BB14
      | _ -> goto BB13
      end
  }
  BB13 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve d_3 };
    _38 <- i_5;
    _0 <- Type.Core_Option_Option_Some _38;
    goto BB21
  }
  BB14 {
    _22 <- ();
    goto BB17
  }
  BB15 {
    _40 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _40) };
    _41 <- i_5;
    _42 <- f_2;
    _43 <- borrow_mut ( * d_3);
    d_3 <- { d_3 with current = ( ^ _43) };
    _39 <- LearnUnit0.learn_unit _40 _41 _42 _43;
    goto BB16
  }
  BB16 {
    _22 <- ();
    goto BB17
  }
  BB17 {
    goto BB19
  }
  BB18 {
    _22 <- ();
    goto BB19
  }
  BB19 {
    i_5 <- i_5 + (1 : usize);
    _13 <- ();
    goto BB3
  }
  BB20 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve d_3 };
    _12 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB21
  }
  BB21 {
    return _0
  }
  
end
module CreuSat_Solver_Solver_Interface
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_FormulaSatInner_Interface as FormulaSatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl0_Model_Interface as Model0
  val solver [@cfg:stackify] (formula : borrowed (Type.creusat_formula_formula)) : Type.creusat_solver_satresult
    ensures { match (result) with
      | Type.CreuSat_Solver_SatResult_Sat assn -> FormulaSatInner0.formula_sat_inner (Model0.model ( ^ formula)) (Model1.model assn) && Equisat0.equisat ( * formula) ( ^ formula)
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable ( ^ formula) && Equisat0.equisat ( * formula) ( ^ formula)
      | _ -> true
      end }
    
end
module CreuSat_Solver_Solver
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = uint8, type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl1_SatInner as SatInner2 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model0.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreuSat_Logic_LogicFormula_Impl1_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model3.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  use mach.int.Int64
  use mach.int.UInt64
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model11 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant3 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicTrail_DecisionsInvariant as DecisionsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = usize, type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model7.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreuSat_Solver_Impl0_New_Interface as New4
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_decision_decisions
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_formula_formula
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant6 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model8.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner as PostUnitInner0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner, predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with predicate PostUnitInner0.post_unit_inner = PostUnitInner0.post_unit_inner,
  function Model0.model = Model3.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner0 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant5 with function Model0.model = Model3.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model3.model
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model6 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model8.model,
  function Model1.model = Model6.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicLit_Impl1_Unsat as Unsat1 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unsat as Unsat0 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant1 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant8 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant7 with predicate Invariant0.invariant' = Invariant6.invariant',
  predicate Invariant1.invariant' = Invariant8.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model2.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model8.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model, predicate Sat0.sat = Sat0.sat
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Model0.model = Model8.model, predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  function Model1.model = Model7.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model6.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant2 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model7.model, function Model1.model = Model8.model,
  predicate DecisionsInvariant0.decisions_invariant = DecisionsInvariant0.decisions_invariant
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model11.model,
  function Model1.model = Model2.model, function Model2.model = Model3.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant4 with function Model0.model = Model10.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Watches_Impl0_New_Interface as New3 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone CreuSat_Logic_LogicFormula_Impl1_InvariantOld as InvariantOld0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model1.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl1_Invariant as Invariant0 with predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old,
  function Model0.model = Model0.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Trail_Impl0_LearnUnits_Interface as LearnUnits0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  function Model0.model = Model2.model, function Model1.model = Model3.model, predicate Unsat0.unsat = Unsat0.unsat,
  predicate Unsat1.unsat = Unsat1.unsat, predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Watches_Impl0_InitWatches_Interface as InitWatches0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant4.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Decision_Impl1_New_Interface as New2 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Trail_Impl0_New_Interface as New1 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant0.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Assignments_Impl0_New_Interface as New0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreuSat_Solver_Impl0_Inner_Interface as Inner0 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant4.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate Invariant3.invariant' = Invariant0.invariant', predicate Equisat0.equisat = Equisat0.equisat,
  function Model0.model = Model1.model, predicate SatInner0.sat_inner = SatInner2.sat_inner,
  predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass,
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_ConflictAnalysis_DeriveEmptyFormula_Interface as DeriveEmptyFormula0 with function Model0.model = Model2.model,
  predicate Unsat0.unsat = Unsat0.unsat, predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Invariant1.invariant' = Invariant0.invariant',
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  clone CreuSat_Formula_Impl0_CheckFormulaInvariant_Interface as CheckFormulaInvariant0 with function Model0.model = Model5.model,
  function Model1.model = Model1.model,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner,
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate InvariantOld0.invariant_old = InvariantOld0.invariant_old
  let rec cfg solver [@cfg:stackify] (formula : borrowed (Type.creusat_formula_formula)) : Type.creusat_solver_satresult
    ensures { match (result) with
      | Type.CreuSat_Solver_SatResult_Sat assn -> FormulaSatInner0.formula_sat_inner (Model0.model ( ^ formula)) (Model1.model assn) && Equisat0.equisat ( * formula) ( ^ formula)
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable ( ^ formula) && Equisat0.equisat ( * formula) ( ^ formula)
      | _ -> true
      end }
    
   = 
  var _0 : Type.creusat_solver_satresult;
  var formula_1 : borrowed (Type.creusat_formula_formula);
  var _2 : ();
  var _3 : Type.creusat_solver_satresult;
  var _4 : Type.creusat_formula_formula;
  var _5 : isize;
  var o_6 : Type.creusat_solver_satresult;
  var _7 : ();
  var trail_8 : Type.creusat_trail_trail;
  var _9 : Type.creusat_formula_formula;
  var _10 : Type.creusat_assignments_assignments;
  var _11 : Type.creusat_formula_formula;
  var decisions_12 : Type.creusat_decision_decisions;
  var _13 : Type.creusat_formula_formula;
  var watches_14 : Type.creusat_watches_watches;
  var _15 : Type.creusat_formula_formula;
  var _16 : ();
  var _17 : borrowed (Type.creusat_watches_watches);
  var _18 : Type.creusat_formula_formula;
  var _19 : ();
  var _20 : Type.core_option_option usize;
  var _21 : borrowed (Type.creusat_trail_trail);
  var _22 : Type.creusat_formula_formula;
  var _23 : borrowed (Type.creusat_decision_decisions);
  var _24 : borrowed (Type.creusat_decision_decisions);
  var _25 : isize;
  var cref_26 : usize;
  var _27 : bool;
  var _28 : Type.creusat_formula_formula;
  var _29 : Type.creusat_trail_trail;
  var _30 : Type.creusat_trail_trail;
  var _31 : usize;
  var _32 : ();
  var _33 : ();
  var solver_34 : Type.creusat_solver_solver;
  var _35 : Type.creusat_formula_formula;
  var _36 : borrowed (Type.creusat_solver_solver);
  var _37 : borrowed (Type.creusat_formula_formula);
  var _38 : Type.creusat_decision_decisions;
  var _39 : Type.creusat_trail_trail;
  var _40 : Type.creusat_watches_watches;
  {
    formula_1 <- formula;
    goto BB0
  }
  BB0 {
    _4 <-  * formula_1;
    _3 <- CheckFormulaInvariant0.check_formula_invariant _4;
    goto BB1
  }
  BB1 {
    switch (_3)
      | Type.CreuSat_Solver_SatResult_Unknown -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve formula_1 };
    o_6 <- _3;
    _0 <- o_6;
    goto BB27
  }
  BB3 {
    _2 <- ();
    goto BB4
  }
  BB4 {
    _9 <-  * formula_1;
    _11 <-  * formula_1;
    _10 <- New0.new _11;
    goto BB5
  }
  BB5 {
    trail_8 <- New1.new _9 _10;
    goto BB6
  }
  BB6 {
    _13 <-  * formula_1;
    decisions_12 <- New2.new _13;
    goto BB7
  }
  BB7 {
    _15 <-  * formula_1;
    watches_14 <- New3.new _15;
    goto BB8
  }
  BB8 {
    _17 <- borrow_mut watches_14;
    watches_14 <-  ^ _17;
    _18 <-  * formula_1;
    _16 <- InitWatches0.init_watches _17 _18;
    goto BB9
  }
  BB9 {
    _21 <- borrow_mut trail_8;
    trail_8 <-  ^ _21;
    _22 <-  * formula_1;
    _24 <- borrow_mut decisions_12;
    decisions_12 <-  ^ _24;
    _23 <- borrow_mut ( * _24);
    _24 <- { _24 with current = ( ^ _23) };
    _20 <- LearnUnits0.learn_units _21 _22 _23;
    goto BB10
  }
  BB10 {
    assume { Resolve1.resolve _24 };
    switch (_20)
      | Type.Core_Option_Option_None -> goto BB11
      | Type.Core_Option_Option_Some _ -> goto BB13
      end
  }
  BB11 {
    _19 <- ();
    _35 <-  * formula_1;
    solver_34 <- New4.new _35;
    goto BB17
  }
  BB12 {
    assume { Resolve0.resolve formula_1 };
    absurd
  }
  BB13 {
    cref_26 <- Type.core_option_option_Some_0 _20;
    _28 <-  * formula_1;
    assume { Resolve0.resolve formula_1 };
    _30 <- trail_8;
    _29 <- _30;
    _31 <- cref_26;
    _27 <- DeriveEmptyFormula0.derive_empty_formula _28 _29 _31;
    goto BB14
  }
  BB14 {
    switch (_27)
      | False -> goto BB16
      | _ -> goto BB15
      end
  }
  BB15 {
    _0 <- Type.CreuSat_Solver_SatResult_Unsat;
    goto BB23
  }
  BB16 {
    _0 <- Type.CreuSat_Solver_SatResult_Err;
    goto BB23
  }
  BB17 {
    _36 <- borrow_mut solver_34;
    solver_34 <-  ^ _36;
    _37 <- borrow_mut ( * formula_1);
    formula_1 <- { formula_1 with current = ( ^ _37) };
    _38 <- decisions_12;
    _39 <- trail_8;
    _40 <- watches_14;
    _0 <- Inner0.inner _36 _37 _38 _39 _40;
    goto BB18
  }
  BB18 {
    assume { Resolve0.resolve formula_1 };
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB29
  }
  BB23 {
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    goto BB29
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
module CreuSat_Watches_Impl0_MoveToEnd_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic_Interface as ToNegWatchidxLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  val move_to_end [@cfg:stackify] (self : borrowed (Type.creusat_watches_watches)) (old_idx : usize) (old_pos : usize) (new_lit : Type.creusat_lit_lit) (_f : Type.creusat_formula_formula) : ()
    requires {UInt64.to_int old_pos < Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * self))) (UInt64.to_int old_idx)))}
    requires {UInt64.to_int old_idx < Seq.length (Model0.model (Type.creusat_watches_watches_Watches_watches ( * self)))}
    requires {ToNegWatchidxLogic0.to_neg_watchidx_logic new_lit < Seq.length (Model0.model (Type.creusat_watches_watches_Watches_watches ( * self)))}
    requires {IndexLogic0.index_logic new_lit < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * self) _f}
    ensures { Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( ^ self))) (UInt64.to_int old_idx))) = Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * self))) (UInt64.to_int old_idx))) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module CreuSat_Watches_Impl0_MoveToEnd
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic as ToNegWatchidxLogic0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model1.model,
  function Model1.model = Model2.model, function Model2.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = seq (Type.creusat_watches_watcher)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.creusat_watches_watcher
  clone CreusotContracts_Logic_Model_Impl2_Model as Model5 with type t = Type.creusat_watches_watcher
  clone CreusotContracts_Logic_Model_Impl1_Model as Model6 with type t = seq (Type.creusat_watches_watcher),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model5.model
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = Type.creusat_watches_watcher,
  function Model0.model = Model6.model, function Model1.model = Model5.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, function Model0.model = Model5.model, function Model1.model = Model1.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg move_to_end [@cfg:stackify] (self : borrowed (Type.creusat_watches_watches)) (old_idx : usize) (old_pos : usize) (new_lit : Type.creusat_lit_lit) (_f : Type.creusat_formula_formula) : ()
    requires {UInt64.to_int old_pos < Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * self))) (UInt64.to_int old_idx)))}
    requires {UInt64.to_int old_idx < Seq.length (Model0.model (Type.creusat_watches_watches_Watches_watches ( * self)))}
    requires {ToNegWatchidxLogic0.to_neg_watchidx_logic new_lit < Seq.length (Model0.model (Type.creusat_watches_watches_Watches_watches ( * self)))}
    requires {IndexLogic0.index_logic new_lit < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * self) _f}
    ensures { Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( ^ self))) (UInt64.to_int old_idx))) = Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * self))) (UInt64.to_int old_idx))) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.creusat_watches_watches);
  var old_idx_2 : usize;
  var old_pos_3 : usize;
  var new_lit_4 : Type.creusat_lit_lit;
  var _f_5 : Type.creusat_formula_formula;
  var end'_6 : usize;
  var _7 : usize;
  var _8 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _9 : Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global);
  var _10 : Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _11 : usize;
  var _12 : ();
  var _13 : borrowed (seq (Type.creusat_watches_watcher));
  var _14 : borrowed (seq (Type.creusat_watches_watcher));
  var _15 : borrowed (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global));
  var _16 : borrowed (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global));
  var _17 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _18 : usize;
  var _19 : usize;
  var _20 : usize;
  {
    self_1 <- self;
    old_idx_2 <- old_idx;
    old_pos_3 <- old_pos;
    new_lit_4 <- new_lit;
    _f_5 <- _f;
    goto BB0
  }
  BB0 {
    _10 <- Type.creusat_watches_watches_Watches_watches ( * self_1);
    _11 <- old_idx_2;
    _9 <- Index0.index _10 _11;
    goto BB1
  }
  BB1 {
    _8 <- _9;
    _7 <- Len0.len _8;
    goto BB2
  }
  BB2 {
    end'_6 <- _7 - (1 : usize);
    _17 <- borrow_mut (Type.creusat_watches_watches_Watches_watches ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Watches_Watches a =  * self_1 in Type.CreuSat_Watches_Watches ( ^ _17)) };
    assume { Resolve0.resolve self_1 };
    _18 <- old_idx_2;
    _16 <- IndexMut0.index_mut _17 _18;
    goto BB3
  }
  BB3 {
    _15 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _15) };
    assume { Resolve1.resolve _16 };
    _14 <- DerefMut0.deref_mut _15;
    goto BB4
  }
  BB4 {
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    _19 <- old_pos_3;
    _20 <- end'_6;
    _12 <- Swap0.swap _13 _19 _20;
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve _14 };
    _0 <- ();
    return _0
  }
  
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module CreuSat_Decision_Impl2
  use Type
  clone CreuSat_Decision_Impl2_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.creusat_decision_node,
  val clone' = Clone0.clone'
end
module CreuSat_Lit_Impl4
  use Type
  clone CreuSat_Lit_Impl4_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.creusat_lit_lit, val clone' = Clone0.clone'
end
module CreuSat_Decision_Impl3
  
end
module CreuSat_Lit_Impl5
  
end
module CreuSat_Lit_Impl0_ModelTy
  use Type
  type modelTy  = 
    Type.creusat_lit_lit
end
module CreuSat_Lit_Impl0
  use Type
  clone CreuSat_Lit_Impl0_Model as Model0
  clone CreuSat_Lit_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusat_lit_lit,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusat_lit_lit,
  type modelTy = ModelTy0.modelTy
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Core_Cmp_PartialEq_Eq
  type self
  type rhs
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Core_Cmp_PartialEq_Ne_Interface
  type self
  type rhs
  use prelude.Prelude
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Ne
  type self
  type rhs
  use prelude.Prelude
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module CreuSat_Lit_Impl2
  use Type
  clone CreuSat_Lit_Impl0_Model as Model1
  clone CreuSat_Lit_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_lit_lit,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreuSat_Lit_Impl2_Eq_Interface as Eq0
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Type.creusat_lit_lit, type rhs = Type.creusat_lit_lit,
  val eq = Eq0.eq, function Model0.model = Model0.model, function Model1.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
end
module Core_Ops_Bit_Not_Output
  type self
  type output
end
module Core_Ops_Bit_Not_Not_Interface
  type self
  clone Core_Ops_Bit_Not_Output as Output0 with type self = self
  val not' [@cfg:stackify] (self : self) : Output0.output
    requires {false}
    
end
module Core_Ops_Bit_Not_Not
  type self
  clone Core_Ops_Bit_Not_Output as Output0 with type self = self
  val not' [@cfg:stackify] (self : self) : Output0.output
    requires {false}
    
end
module CreuSat_Lit_Impl3_Output
  use Type
  type output  = 
    Type.creusat_lit_lit
end
module CreuSat_Lit_Impl3
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Lit_Impl3_Not_Interface as Not0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Lit_Impl3_Output as Output0
  clone Core_Ops_Bit_Not_Not_Interface as Not1 with type self = Type.creusat_lit_lit, val not' = Not0.not',
  type Output0.output = Output0.output
  clone Core_Ops_Bit_Not_Output as Output1 with type self = Type.creusat_lit_lit, type output = Output0.output
end
