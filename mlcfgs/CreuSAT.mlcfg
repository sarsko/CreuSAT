module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use prelude.Prelude
  type creusat_lit_lit  =
    | CreuSat_Lit_Lit usize bool
    
  let function creusat_lit_lit_Lit_idx (self : creusat_lit_lit) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Lit_Lit a _ -> a
      end
  let function creusat_lit_lit_Lit_polarity (self : creusat_lit_lit) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Lit_Lit _ a -> a
      end
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
  type creusat_clause_clause  =
    | CreuSat_Clause_Clause bool uint32 usize (alloc_vec_vec (creusat_lit_lit) (alloc_alloc_global))
    
  let function creusat_clause_clause_Clause_lits (self : creusat_clause_clause) : alloc_vec_vec (creusat_lit_lit) (alloc_alloc_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Clause_Clause _ _ _ a -> a
      end
  let function creusat_clause_clause_Clause_deleted (self : creusat_clause_clause) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Clause_Clause a _ _ _ -> a
      end
  let function creusat_clause_clause_Clause_search (self : creusat_clause_clause) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Clause_Clause _ _ a _ -> a
      end
  type creusat_formula_formula  =
    | CreuSat_Formula_Formula (alloc_vec_vec (creusat_clause_clause) (alloc_alloc_global)) usize
    
  let function creusat_formula_formula_Formula_clauses (self : creusat_formula_formula) : alloc_vec_vec (creusat_clause_clause) (alloc_alloc_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Formula_Formula a _ -> a
      end
  let function creusat_formula_formula_Formula_num_vars (self : creusat_formula_formula) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Formula_Formula _ a -> a
      end
  type creusat_solver_solver  =
    | CreuSat_Solver_Solver usize usize usize usize usize usize usize (alloc_vec_vec usize (alloc_alloc_global))
    
  let function creusat_solver_solver_Solver_num_conflicts (self : creusat_solver_solver) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Solver_Solver _ _ a _ _ _ _ _ -> a
      end
  let function creusat_solver_solver_Solver_num_lemmas (self : creusat_solver_solver) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Solver_Solver a _ _ _ _ _ _ _ -> a
      end
  let function creusat_solver_solver_Solver_perm_diff (self : creusat_solver_solver) : alloc_vec_vec usize (alloc_alloc_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Solver_Solver _ _ _ _ _ _ _ a -> a
      end
  let function creusat_solver_solver_Solver_max_lemmas (self : creusat_solver_solver) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Solver_Solver _ a _ _ _ _ _ _ -> a
      end
  let function creusat_solver_solver_Solver_initial_len (self : creusat_solver_solver) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Solver_Solver _ _ _ a _ _ _ _ -> a
      end
  let function creusat_solver_solver_Solver_fast (self : creusat_solver_solver) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Solver_Solver _ _ _ _ _ a _ _ -> a
      end
  let function creusat_solver_solver_Solver_slow (self : creusat_solver_solver) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Solver_Solver _ _ _ _ _ _ a _ -> a
      end
  type creusat_assignments_assignments  =
    | CreuSat_Assignments_Assignments (alloc_vec_vec uint8 (alloc_alloc_global))
    
  let function creusat_assignments_assignments_Assignments_0 (self : creusat_assignments_assignments) : alloc_vec_vec uint8 (alloc_alloc_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Assignments_Assignments a -> a
      end
  type creusat_trail_reason  =
    | CreuSat_Trail_Reason_Decision
    | CreuSat_Trail_Reason_Unit usize
    | CreuSat_Trail_Reason_Long usize
    
  let function creusat_trail_reason_Long_0 (self : creusat_trail_reason) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Trail_Reason_Decision -> any usize
      | CreuSat_Trail_Reason_Unit _ -> any usize
      | CreuSat_Trail_Reason_Long a -> a
      end
  let function creusat_trail_reason_Unit_0 (self : creusat_trail_reason) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Trail_Reason_Decision -> any usize
      | CreuSat_Trail_Reason_Unit a -> a
      | CreuSat_Trail_Reason_Long _ -> any usize
      end
  type creusat_trail_step  =
    | CreuSat_Trail_Step (creusat_lit_lit) usize (creusat_trail_reason)
    
  let function creusat_trail_step_Step_lit (self : creusat_trail_step) : creusat_lit_lit
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Trail_Step a _ _ -> a
      end
  let function creusat_trail_step_Step_reason (self : creusat_trail_step) : creusat_trail_reason
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Trail_Step _ _ a -> a
      end
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type creusat_trail_trail  =
    | CreuSat_Trail_Trail (creusat_assignments_assignments) (alloc_vec_vec usize (alloc_alloc_global)) (alloc_vec_vec (creusat_trail_step) (alloc_alloc_global)) usize (alloc_vec_vec usize (alloc_alloc_global))
    
  let function creusat_trail_trail_Trail_lit_to_level (self : creusat_trail_trail) : alloc_vec_vec usize (alloc_alloc_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Trail_Trail _ a _ _ _ -> a
      end
  let function creusat_trail_trail_Trail_assignments (self : creusat_trail_trail) : creusat_assignments_assignments
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Trail_Trail a _ _ _ _ -> a
      end
  let function creusat_trail_trail_Trail_trail (self : creusat_trail_trail) : alloc_vec_vec (creusat_trail_step) (alloc_alloc_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Trail_Trail _ _ a _ _ -> a
      end
  let function creusat_trail_trail_Trail_decisions (self : creusat_trail_trail) : alloc_vec_vec usize (alloc_alloc_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Trail_Trail _ _ _ _ a -> a
      end
  let function creusat_trail_trail_Trail_curr_i (self : creusat_trail_trail) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Trail_Trail _ _ _ a _ -> a
      end
  type creusat_decision_node  =
    | CreuSat_Decision_Node usize usize usize
    
  let function creusat_decision_node_Node_next (self : creusat_decision_node) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Decision_Node a _ _ -> a
      end
  let function creusat_decision_node_Node_prev (self : creusat_decision_node) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Decision_Node _ a _ -> a
      end
  let function creusat_decision_node_Node_ts (self : creusat_decision_node) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Decision_Node _ _ a -> a
      end
  type creusat_decision_decisions  =
    | CreuSat_Decision_Decisions (alloc_vec_vec (creusat_decision_node) (alloc_alloc_global)) usize usize usize
    
  let function creusat_decision_decisions_Decisions_linked_list (self : creusat_decision_decisions) : alloc_vec_vec (creusat_decision_node) (alloc_alloc_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Decision_Decisions a _ _ _ -> a
      end
  let function creusat_decision_decisions_Decisions_search (self : creusat_decision_decisions) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Decision_Decisions _ _ _ a -> a
      end
  let function creusat_decision_decisions_Decisions_start (self : creusat_decision_decisions) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Decision_Decisions _ _ a _ -> a
      end
  let function creusat_decision_decisions_Decisions_timestamp (self : creusat_decision_decisions) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Decision_Decisions _ a _ _ -> a
      end
  type creusat_conflictanalysis_conflict  =
    | CreuSat_ConflictAnalysis_Conflict_Ground
    | CreuSat_ConflictAnalysis_Conflict_Unit (creusat_clause_clause)
    | CreuSat_ConflictAnalysis_Conflict_Learned usize (creusat_clause_clause)
    | CreuSat_ConflictAnalysis_Conflict_Restart (creusat_clause_clause)
    
  let function creusat_conflictanalysis_conflict_Restart_0 (self : creusat_conflictanalysis_conflict) : creusat_clause_clause
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_ConflictAnalysis_Conflict_Ground -> any creusat_clause_clause
      | CreuSat_ConflictAnalysis_Conflict_Unit _ -> any creusat_clause_clause
      | CreuSat_ConflictAnalysis_Conflict_Learned _ _ -> any creusat_clause_clause
      | CreuSat_ConflictAnalysis_Conflict_Restart a -> a
      end
  let function creusat_conflictanalysis_conflict_Learned_0 (self : creusat_conflictanalysis_conflict) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_ConflictAnalysis_Conflict_Ground -> any usize
      | CreuSat_ConflictAnalysis_Conflict_Unit _ -> any usize
      | CreuSat_ConflictAnalysis_Conflict_Learned a _ -> a
      | CreuSat_ConflictAnalysis_Conflict_Restart _ -> any usize
      end
  let function creusat_conflictanalysis_conflict_Learned_1 (self : creusat_conflictanalysis_conflict) : creusat_clause_clause
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_ConflictAnalysis_Conflict_Ground -> any creusat_clause_clause
      | CreuSat_ConflictAnalysis_Conflict_Unit _ -> any creusat_clause_clause
      | CreuSat_ConflictAnalysis_Conflict_Learned _ a -> a
      | CreuSat_ConflictAnalysis_Conflict_Restart _ -> any creusat_clause_clause
      end
  let function creusat_conflictanalysis_conflict_Unit_0 (self : creusat_conflictanalysis_conflict) : creusat_clause_clause
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_ConflictAnalysis_Conflict_Ground -> any creusat_clause_clause
      | CreuSat_ConflictAnalysis_Conflict_Unit a -> a
      | CreuSat_ConflictAnalysis_Conflict_Learned _ _ -> any creusat_clause_clause
      | CreuSat_ConflictAnalysis_Conflict_Restart _ -> any creusat_clause_clause
      end
  type creusat_solver_satresult  =
    | CreuSat_Solver_SatResult_Sat (alloc_vec_vec uint8 (alloc_alloc_global))
    | CreuSat_Solver_SatResult_Unsat
    | CreuSat_Solver_SatResult_Unknown
    | CreuSat_Solver_SatResult_Err
    
  type creusat_watches_watcher  =
    | CreuSat_Watches_Watcher usize (creusat_lit_lit)
    
  let function creusat_watches_watcher_Watcher_cref (self : creusat_watches_watcher) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Watches_Watcher a _ -> a
      end
  let function creusat_watches_watcher_Watcher_blocker (self : creusat_watches_watcher) : creusat_lit_lit
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Watches_Watcher _ a -> a
      end
  type creusat_watches_watches  =
    | CreuSat_Watches_Watches (alloc_vec_vec (alloc_vec_vec (creusat_watches_watcher) (alloc_alloc_global)) (alloc_alloc_global))
    
  let function creusat_watches_watches_Watches_watches (self : creusat_watches_watches) : alloc_vec_vec (alloc_vec_vec (creusat_watches_watcher) (alloc_alloc_global)) (alloc_alloc_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Watches_Watches a -> a
      end
  type creusat_logic_logic_inner_m  =
    | CreuSat_Logic_Logic_Inner_M (Map.map int bool)
    
  let function creusat_logic_logic_inner_m_M_0 (self : creusat_logic_logic_inner_m) : Map.map int bool
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreuSat_Logic_Logic_Inner_M a -> a
      end
  type core_result_result 't 'e =
    | Core_Result_Result_Ok 't
    | Core_Result_Result_Err 'e
    
  let function core_result_result_Err_0 (self : core_result_result 't 'e) : 'e = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Core_Result_Result_Ok _ -> any 'e
      | Core_Result_Result_Err a -> a
      end
  let function core_result_result_Ok_0 (self : core_result_result 't 'e) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Core_Result_Result_Ok a -> a
      | Core_Result_Result_Err _ -> any 't
      end
  type creusat_solver_conflictresult  =
    | CreuSat_Solver_ConflictResult_Ok
    | CreuSat_Solver_ConflictResult_Err
    | CreuSat_Solver_ConflictResult_Ground
    | CreuSat_Solver_ConflictResult_Continue
    
end
module CreuSat_Lit_Impl1_New_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  val new [@cfg:stackify] (idx : usize) (polarity : bool) : Type.creusat_lit_lit
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : (int) . 0 <= i /\ i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreuSat_Solver_Impl0_New_Interface
  use prelude.Prelude
  use Type
  val new [@cfg:stackify] (f : Type.creusat_formula_formula) : Type.creusat_solver_solver
end
module CreuSat_Solver_Impl0_New
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = usize, function Model0.model = Model1.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model
  let rec cfg new [@cfg:stackify] [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 76 4 76 37] (f : Type.creusat_formula_formula) : Type.creusat_solver_solver
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.creusat_solver_solver;
  var f_1 : Type.creusat_formula_formula;
  var _2 : usize;
  var _3 : Type.alloc_vec_vec (Type.creusat_clause_clause) (Type.alloc_alloc_global);
  var _4 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _5 : usize;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _3 <- Type.creusat_formula_formula_Formula_clauses f_1;
    _2 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 81 25 81 40] Len0.len _3);
    goto BB1
  }
  BB1 {
    _5 <- Type.creusat_formula_formula_Formula_num_vars f_1;
    _4 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 85 23 85 52] FromElem0.from_elem (0 : usize) _5);
    goto BB2
  }
  BB2 {
    _0 <- Type.CreuSat_Solver_Solver (0 : usize) (2000 : usize) (0 : usize) _2 (300 : usize) (16777216 : usize) (16777216 : usize) _4;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreuSat_Solver_Impl0_IncreaseNumConflicts_Interface
  use prelude.Prelude
  use Type
  val increase_num_conflicts [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) : ()
end
module CreuSat_Solver_Impl0_IncreaseNumConflicts
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_solver_solver
  let rec cfg increase_num_conflicts [@cfg:stackify] [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 91 4 91 40] (self : borrowed (Type.creusat_solver_solver)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.creusat_solver_solver);
  var _2 : bool;
  var _3 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Type.creusat_solver_solver_Solver_num_conflicts ( * self_1);
    _2 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 92 11 92 42] _3 < (18446744073709551615 : usize));
    switch (_2)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    self_1 <- { self_1 with current = (let Type.CreuSat_Solver_Solver a b c d e f g h =  * self_1 in Type.CreuSat_Solver_Solver a b ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 93 12 93 35] Type.creusat_solver_solver_Solver_num_conflicts ( * self_1) + (1 : usize)) d e f g h) };
    assume { Resolve0.resolve self_1 };
    _0 <- ();
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    _0 <- ();
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreuSat_Solver_Impl0_IncreaseNumLemmas_Interface
  use prelude.Prelude
  use Type
  val increase_num_lemmas [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) : ()
end
module CreuSat_Solver_Impl0_IncreaseNumLemmas
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_solver_solver
  let rec cfg increase_num_lemmas [@cfg:stackify] [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 99 4 99 37] (self : borrowed (Type.creusat_solver_solver)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.creusat_solver_solver);
  var _2 : bool;
  var _3 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Type.creusat_solver_solver_Solver_num_lemmas ( * self_1);
    _2 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 100 11 100 39] _3 < (18446744073709551615 : usize));
    switch (_2)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    self_1 <- { self_1 with current = (let Type.CreuSat_Solver_Solver a b c d e f g h =  * self_1 in Type.CreuSat_Solver_Solver ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 101 12 101 32] Type.creusat_solver_solver_Solver_num_lemmas ( * self_1) + (1 : usize)) b c d e f g h) };
    assume { Resolve0.resolve self_1 };
    _0 <- ();
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    _0 <- ();
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module CreuSat_Util_UpdateFast_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  val update_fast [@cfg:stackify] (fast : borrowed usize) (lbd : usize) : ()
end
module CreuSat_Util_UpdateSlow_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  val update_slow [@cfg:stackify] (slow : borrowed usize) (lbd : usize) : ()
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreuSat_Logic_LogicAssignments_Impl0_ModelTy
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  type modelTy  =
    Seq.seq uint8
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module CreuSat_Logic_LogicAssignments_Impl0_Model_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function model (self : Type.creusat_assignments_assignments) : Seq.seq uint8
end
module CreuSat_Logic_LogicAssignments_Impl0_Model
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = uint8, type a = Type.alloc_alloc_global,
  axiom .
  function model [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_assignments.rs" 19 4 19 35] (self : Type.creusat_assignments_assignments) : Seq.seq uint8
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_assignments.rs" 18 4 18 12] Model0.model (Type.creusat_assignments_assignments_Assignments_0 self)
end
module CreuSat_Logic_LogicAssignments_Impl0
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.creusat_assignments_assignments,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusat_assignments_assignments,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module CreuSat_Assignments_Impl0_Index_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusat_assignments_assignments) (ix : usize) : uint8
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 21 4 21 36] UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 22 4 22 39] Seq.get (Model0.model self) (UInt64.to_int ix) = result }
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : (int) . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module CreuSat_Assignments_Impl1_IndexMut_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusat_assignments_assignments)) (ix : usize) : borrowed uint8
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 35 4 35 36] UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 36 4 36 40] Seq.get (Model1.model ( * self)) (UInt64.to_int ix) =  * result }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 37 4 37 40] Seq.get (Model1.model ( ^ self)) (UInt64.to_int ix) =  ^ result }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 38 4 38 101] forall i : (int) . 0 <= i /\ i <> UInt64.to_int ix /\ i < Seq.length (Model0.model self) -> Seq.get (Model0.model self) i = Seq.get (Model1.model ( ^ self)) i }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 39 4 39 48] Seq.length (Model1.model ( ^ self)) = Seq.length (Model1.model ( * self)) }
    
end
module CreuSat_Assignments_Impl2_Len_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusat_assignments_assignments) : usize
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 54 4 54 40] UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface
  use Type
  predicate invariant' (self : Type.creusat_assignments_assignments) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicAssignments_Impl1_Invariant
  use Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.UInt8
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate invariant' [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_assignments.rs" 47 4 47 46] (self : Type.creusat_assignments_assignments) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_assignments.rs" 48 8 51 9] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) = Seq.length (Model0.model self) /\ (forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> UInt8.to_int (Seq.get (Model0.model self) i) <= 3)
end
module CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface
  use Type
  use mach.int.Int
  function index_logic [@inline:trivial] (self : Type.creusat_lit_lit) : int
end
module CreuSat_Logic_LogicLit_Impl0_IndexLogic
  use Type
  use mach.int.Int
  use mach.int.UInt64
  function index_logic [@inline:trivial] [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 21 4 21 35] (self : Type.creusat_lit_lit) : int
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 22 8 22 31] UInt64.to_int (Type.creusat_lit_lit_Lit_idx self)
end
module CreuSat_Logic_LogicLit_Impl1_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.creusat_lit_lit) (n : int)
end
module CreuSat_Logic_LogicLit_Impl1_Invariant
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  predicate invariant' [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 76 4 76 42] (self : Type.creusat_lit_lit) (n : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 77 8 77 44] IndexLogic0.index_logic self < n
end
module CreuSat_Logic_LogicClause_Impl0_Model_Interface
  use Type
  use seq.Seq
  function model (self : Type.creusat_clause_clause) : Seq.seq (Type.creusat_lit_lit)
end
module CreuSat_Logic_LogicClause_Impl0_Model
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, axiom .
  function model [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 15 4 15 35] (self : Type.creusat_clause_clause) : Seq.seq (Type.creusat_lit_lit)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 14 4 14 12] Model0.model (Type.creusat_clause_clause_Clause_lits self)
end
module CreuSat_Logic_LogicClause_VarsInRangeInner_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate vars_in_range_inner (s : Seq.seq (Type.creusat_lit_lit)) (n : int)
end
module CreuSat_Logic_LogicClause_VarsInRangeInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  predicate vars_in_range_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 21 0 21 55] (s : Seq.seq (Type.creusat_lit_lit)) (n : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 22 4 25 5] forall i : (int) . 0 <= i /\ i < Seq.length s -> Invariant0.invariant' (Seq.get s i) n
end
module CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface
  use seq.Seq
  use Type
  predicate no_duplicate_indexes_inner (s : Seq.seq (Type.creusat_lit_lit))
end
module CreuSat_Logic_LogicClause_NoDuplicateIndexesInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  predicate no_duplicate_indexes_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 41 0 41 54] (s : Seq.seq (Type.creusat_lit_lit))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 42 4 45 5] forall k : (int) . forall j : (int) . 0 <= j /\ j < Seq.length s /\ 0 <= k /\ k < j -> not IndexLogic0.index_logic (Seq.get s k) = IndexLogic0.index_logic (Seq.get s j)
end
module CreuSat_Logic_LogicClause_InvariantInternal_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate invariant_internal (s : Seq.seq (Type.creusat_lit_lit)) (n : int)
end
module CreuSat_Logic_LogicClause_InvariantInternal
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  predicate invariant_internal [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 29 0 29 54] (s : Seq.seq (Type.creusat_lit_lit)) (n : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 28 0 28 12] VarsInRangeInner0.vars_in_range_inner s n /\ NoDuplicateIndexesInner0.no_duplicate_indexes_inner s
end
module CreuSat_Logic_LogicClause_Impl2_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.creusat_clause_clause) (n : int)
end
module CreuSat_Logic_LogicClause_Impl2_Invariant
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_InvariantInternal_Interface as InvariantInternal0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate invariant' [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 195 4 195 42] (self : Type.creusat_clause_clause) (n : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 196 8 198 9] InvariantInternal0.invariant_internal (Model0.model self) n
end
module CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface
  use Type
  predicate invariant_mirror (self : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicFormula_Impl2_InvariantMirror
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  predicate invariant_mirror [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 113 4 113 37] (self : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 114 8 121 9] (forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) -> Invariant0.invariant' (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) i) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self))) /\ (forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) -> Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) i)) >= 1)
end
module CreuSat_Logic_LogicFormula_Impl0_Model_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  function model (self : Type.creusat_formula_formula) : (Seq.seq (Type.creusat_clause_clause), int)
end
module CreuSat_Logic_LogicFormula_Impl0_Model
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  function model [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 15 4 15 35] (self : Type.creusat_formula_formula) : (Seq.seq (Type.creusat_clause_clause), int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 14 4 14 12] (Model0.model (Type.creusat_formula_formula_Formula_clauses self), UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self))
end
module CreuSat_Logic_LogicFormula_FormulaInvariant_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate formula_invariant (f : (Seq.seq (Type.creusat_clause_clause), int))
end
module CreuSat_Logic_LogicFormula_FormulaInvariant
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  predicate formula_invariant [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 28 0 28 55] (f : (Seq.seq (Type.creusat_clause_clause), int))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 29 4 35 5] (forall i : (int) . 0 <= i /\ i < Seq.length (let (a, _) = f in a) -> Invariant0.invariant' (Seq.get (let (a, _) = f in a) i) (let (_, a) = f in a)) /\ (forall i : (int) . 0 <= i /\ i < Seq.length (let (a, _) = f in a) -> Seq.length (Model0.model (Seq.get (let (a, _) = f in a) i)) > 0)
end
module CreuSat_Logic_LogicFormula_Impl0_ModelTy
  use seq.Seq
  use Type
  use mach.int.Int
  type modelTy  =
    (Seq.seq (Type.creusat_clause_clause), int)
end
module CreuSat_Logic_LogicFormula_Impl0
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.creusat_formula_formula,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusat_formula_formula,
  type modelTy = ModelTy0.modelTy
end
module CreuSat_Logic_LogicClause_Impl0_ModelTy
  use seq.Seq
  use Type
  type modelTy  =
    Seq.seq (Type.creusat_lit_lit)
end
module CreuSat_Logic_LogicClause_Impl0
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.creusat_clause_clause,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusat_clause_clause,
  type modelTy = ModelTy0.modelTy
end
module CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  predicate invariant' (self : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicFormula_Impl2_Invariant
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  clone CreuSat_Logic_LogicFormula_Impl0_Model_Interface as Model0
  predicate invariant' [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 108 4 108 34] (self : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 109 8 109 46] FormulaInvariant0.formula_invariant (Model0.model self)
  axiom invariant'_spec : forall self : Type.creusat_formula_formula . [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 107 4 107 49] invariant' self = InvariantMirror0.invariant_mirror self
end
module CreuSat_Logic_LogicTrail_Impl0_Invariant_Interface
  use Type
  predicate invariant' (self : Type.creusat_trail_reason) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_Impl0_Invariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  predicate invariant' [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 12 4 12 46] (self : Type.creusat_trail_reason) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 13 8 23 9] match (self) with
      | Type.CreuSat_Trail_Reason_Long cref -> 0 <= UInt64.to_int cref /\ UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) /\ Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) > 1
      | Type.CreuSat_Trail_Reason_Unit cref -> 0 <= UInt64.to_int cref /\ UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) /\ Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) = 1
      | _ -> true
      end
end
module CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface
  use Type
  predicate invariant' (self : Type.creusat_trail_step) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_Impl1_Invariant
  use Type
  use mach.int.UInt64
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  predicate invariant' [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 48 4 48 46] (self : Type.creusat_trail_step) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 49 8 52 9] Invariant0.invariant' (Type.creusat_trail_step_Step_lit self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) /\ Invariant1.invariant' (Type.creusat_trail_step_Step_reason self) f
end
module CreuSat_Logic_LogicTrail_CrefsInRange_Interface
  use seq.Seq
  use Type
  predicate crefs_in_range (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_CrefsInRange
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface as Invariant0
  predicate crefs_in_range [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 171 0 171 59] (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 172 4 175 5] forall i : (int) . 0 <= i /\ i < Seq.length trail -> Invariant0.invariant' (Seq.get trail i) f
end
module CreuSat_Logic_LogicTrail_TrailInvariant_Interface
  use seq.Seq
  use Type
  predicate trail_invariant (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_TrailInvariant
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicTrail_CrefsInRange_Interface as CrefsInRange0
  predicate trail_invariant [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 156 0 156 60] (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 157 4 159 5] CrefsInRange0.crefs_in_range trail f
end
module CreuSat_Logic_Logic_Unset_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unset (v : uint8)
end
module CreuSat_Logic_Logic_Unset
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  predicate unset [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 66 0 66 38] (v : uint8) =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 67 4 73 5] if UInt8.to_int v >= 2 then true else false
end
module CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface
  use Type
  function is_positive_logic [@inline:trivial] (self : Type.creusat_lit_lit) : bool
end
module CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic
  use Type
  function is_positive_logic [@inline:trivial] [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 27 4 27 42] (self : Type.creusat_lit_lit) : bool
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 28 20 28 33] Type.creusat_lit_lit_Lit_polarity self
end
module CreuSat_Logic_LogicLit_Impl1_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.creusat_lit_lit) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicLit_Impl1_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  predicate sat_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 81 4 81 57] (self : Type.creusat_lit_lit) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 82 8 87 9] if IsPositiveLogic0.is_positive_logic self then
      UInt8.to_int (Seq.get a (IndexLogic0.index_logic self)) = 1
    else
      UInt8.to_int (Seq.get a (IndexLogic0.index_logic self)) = 0
    
end
module CreuSat_Logic_LogicLit_Impl1_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.creusat_lit_lit) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicLit_Impl1_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  predicate unsat_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 91 4 91 59] (self : Type.creusat_lit_lit) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 92 8 97 9] if IsPositiveLogic0.is_positive_logic self then
      UInt8.to_int (Seq.get a (IndexLogic0.index_logic self)) = 0
    else
      UInt8.to_int (Seq.get a (IndexLogic0.index_logic self)) = 1
    
end
module CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate clause_post_with_regards_to_inner (c : Type.creusat_clause_clause) (a : Seq.seq uint8) (j : int)
end
module CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate clause_post_with_regards_to_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 194 0 194 90] (c : Type.creusat_clause_clause) (a : Seq.seq uint8) (j : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 195 4 199 5] IndexLogic0.index_logic (Seq.get (Model0.model c) 0) = j /\ SatInner0.sat_inner (Seq.get (Model0.model c) 0) a /\ (forall i : (int) . 1 <= i /\ i < Seq.length (Model0.model c) -> UnsatInner0.unsat_inner (Seq.get (Model0.model c) i) a)
end
module CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate long_are_post_unit_inner (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Seq.seq uint8)
    
end
module CreuSat_Logic_LogicTrail_LongArePostUnitInner
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  use mach.int.UInt64
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner_Interface as ClausePostWithRegardsToInner0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  predicate long_are_post_unit_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 230 0 230 92] (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 231 4 237 5] forall j : (int) . 0 <= j /\ j < Seq.length trail -> match (Type.creusat_trail_step_Step_reason (Seq.get trail j)) with
      | Type.CreuSat_Trail_Reason_Long k -> ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) a (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get trail j)))
      | _ -> true
      end
end
module CreuSat_Logic_LogicLit_Impl1_Sat_Interface
  use Type
  predicate sat (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicLit_Impl1_Sat
  use Type
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate sat [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 106 4 106 44] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 107 8 107 40] SatInner0.sat_inner self (Model0.model a)
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreuSat_Lit_Impl1_IsPositive_Interface
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  val is_positive [@cfg:stackify] (self : Type.creusat_lit_lit) : bool
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 37 4 37 50] result = IsPositiveLogic0.is_positive_logic self }
    
end
module CreuSat_Lit_Impl1_Index_Interface
  use mach.int.UInt64
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  val index [@cfg:stackify] (self : Type.creusat_lit_lit) : usize
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 30 4 30 45] UInt64.to_int result = IndexLogic0.index_logic self }
    
end
module CreuSat_Assignments_Impl2_SetAssignment_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicLit_Impl1_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreuSat_Logic_LogicTrail_TrailInvariant_Interface as TrailInvariant0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant2 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant0
  val set_assignment [@cfg:stackify] (self : borrowed (Type.creusat_assignments_assignments)) (lit : Type.creusat_lit_lit) (_f : Type.creusat_formula_formula) (_t : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global)) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 61 4 61 43] Invariant0.invariant' ( * self) _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 62 4 62 44] Invariant1.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 63 4 63 31] Invariant2.invariant' _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 64 4 64 42] TrailInvariant0.trail_invariant (Model0.model _t) _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 65 4 65 50] Unset0.unset (Seq.get (Model1.model self) (IndexLogic0.index_logic lit))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 66 4 66 58] LongArePostUnitInner0.long_are_post_unit_inner (Model0.model _t) _f (Model1.model self)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 61 4 61 43] Invariant0.invariant' ( ^ self) _f }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 67 4 67 58] LongArePostUnitInner0.long_are_post_unit_inner (Model0.model _t) _f (Model2.model ( ^ self)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 68 4 68 51] not Unset0.unset (Seq.get (Model2.model ( ^ self)) (IndexLogic0.index_logic lit)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 69 4 69 47] Seq.length (Model2.model ( ^ self)) = Seq.length (Model1.model self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 70 4 71 71] forall j : (int) . 0 <= j /\ j < Seq.length (Model1.model self) /\ j <> IndexLogic0.index_logic lit -> Seq.get (Model2.model ( * self)) j = Seq.get (Model2.model ( ^ self)) j }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 72 4 72 30] Sat0.sat lit ( ^ self) }
    
end
module CreuSat_Assignments_Impl2_New_Interface
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val new [@cfg:stackify] (f : Type.creusat_formula_formula) : Type.creusat_assignments_assignments
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 85 4 85 30] Invariant0.invariant' f}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/assignments.rs" 86 4 86 36] Invariant1.invariant' result f }
    
end
module CreuSat_Clause_Impl0_Index_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusat_clause_clause) (ix : usize) : Type.creusat_lit_lit
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 22 4 22 36] UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 23 4 23 39] Seq.get (Model0.model self) (UInt64.to_int ix) = result }
    
end
module CreuSat_Clause_Impl1_IndexMut_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusat_clause_clause)) (ix : usize) : borrowed (Type.creusat_lit_lit)
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 36 4 36 36] UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 37 4 37 40] Seq.get (Model1.model ( * self)) (UInt64.to_int ix) =  * result }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 38 4 38 40] Seq.get (Model1.model ( ^ self)) (UInt64.to_int ix) =  ^ result }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 39 4 39 101] forall i : (int) . 0 <= i /\ i <> UInt64.to_int ix /\ i < Seq.length (Model0.model self) -> Seq.get (Model0.model self) i = Seq.get (Model1.model ( ^ self)) i }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 40 4 40 48] Seq.length (Model1.model ( ^ self)) = Seq.length (Model1.model ( * self)) }
    
end
module CreuSat_Clause_Impl2_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.creusat_clause_clause) : Type.creusat_clause_clause
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 53 4 53 31] result = self }
    
end
module CreuSat_Clause_Impl3_Len_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusat_clause_clause) : usize
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 102 4 102 40] UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreuSat_Lit_Impl1_CheckLitInvariant_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  val check_lit_invariant [@cfg:stackify] (self : Type.creusat_lit_lit) (n : usize) : bool
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 44 4 44 44] result = Invariant0.invariant' self (UInt64.to_int n) }
    
end
module CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes_Interface
  use Type
  predicate no_duplicate_indexes (self : Type.creusat_clause_clause)
end
module CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes
  use Type
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate no_duplicate_indexes [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 183 4 183 45] (self : Type.creusat_clause_clause)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 184 8 184 55] NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model0.model self)
end
module CreuSat_Clause_Impl0_Output
  use Type
  type output  =
    Type.creusat_lit_lit
end
module Core_Ops_Index_Index_Output
  type self
  type idx
  type output
end
module Core_Ops_Index_Index_Index_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreuSat_Clause_Impl0
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreuSat_Clause_Impl0_Output as Output0
  clone CreuSat_Clause_Impl0_Index_Interface as Index0 with function Model0.model = Model0.model
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusat_clause_clause, type idx = usize,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusat_clause_clause, type idx = usize,
  type output = Output0.output
end
module CreuSat_Clause_Impl3_NoDuplicates_Interface
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes_Interface as NoDuplicateIndexes0
  val no_duplicates [@cfg:stackify] (self : Type.creusat_clause_clause) : bool
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 78 4 78 53] result = NoDuplicateIndexes0.no_duplicate_indexes self }
    
end
module CreuSat_Clause_Impl3_CheckClauseInvariant_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  val check_clause_invariant [@cfg:stackify] (self : Type.creusat_clause_clause) (n : usize) : bool
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 61 4 61 44] result = Invariant0.invariant' self (UInt64.to_int n) }
    
end
module CreuSat_Clause_Impl3_ClauseFromVec_Interface
  use prelude.Prelude
  use seq.Seq
  use Type
  val clause_from_vec [@cfg:stackify] (vec : seq (Type.creusat_lit_lit)) : Type.creusat_clause_clause
end
module CreuSat_Logic_LogicLit_Impl1_LitIn_Interface
  use Type
  predicate lit_in (self : Type.creusat_lit_lit) (c : Type.creusat_clause_clause)
end
module CreuSat_Logic_LogicLit_Impl1_LitIn
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate lit_in [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 61 4 61 42] (self : Type.creusat_lit_lit) (c : Type.creusat_clause_clause)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 62 8 64 9] exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model c) /\ Seq.get (Model0.model c) i = self
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Prelude.id self && Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_Impl11_DerefMut_Interface
  type t
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val deref_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) : borrowed (seq t)
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    
end
module Core_Slice_Impl0_Swap_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use prelude.Prelude
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model1 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Alloc_Vec_Impl11
  type t
  type a
end
module CreuSat_Clause_Impl3_MoveToEnd_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicLit_Impl1_LitIn_Interface as LitIn0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  val move_to_end [@cfg:stackify] (self : borrowed (Type.creusat_clause_clause)) (idx : usize) (_f : Type.creusat_formula_formula) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 117 4 117 52] Invariant0.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 118 4 118 34] Seq.length (Model0.model self) > 0}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 119 4 119 37] UInt64.to_int idx < Seq.length (Model0.model self)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 117 4 117 52] Invariant0.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 120 4 121 85] forall i : (int) . 0 <= i /\ i < Seq.length (Model1.model ( ^ self)) -> (exists j : (int) . 0 <= j /\ j < Seq.length (Model0.model self) /\ Seq.get (Model1.model ( ^ self)) i = Seq.get (Model0.model self) j) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 122 4 122 63] Seq.get (Model1.model ( ^ self)) (Seq.length (Model1.model ( ^ self)) - 1) = Seq.get (Model0.model self) (UInt64.to_int idx) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 123 4 123 49] Seq.length (Model1.model ( ^ self)) = Seq.length (Model0.model self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 124 4 125 38] forall j : (int) . 0 <= j /\ j < Seq.length (Model0.model self) -> LitIn0.lit_in (Seq.get (Model0.model self) j) ( ^ self) }
    
end
module Alloc_Vec_Impl1_Pop_Interface
  type t
  type a
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq_ext.SeqExt
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val pop [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) : Type.core_option_option t
    ensures { match (result) with
      | Type.Core_Option_Option_Some t -> Model0.model ( ^ self) = SeqExt.subsequence (Model0.model ( * self)) 0 (Seq.length (Model0.model ( * self)) - 1) /\ Model0.model ( * self) = Seq.snoc (Model0.model ( ^ self)) t
      | Type.Core_Option_Option_None ->  * self =  ^ self /\ Seq.length (Model0.model ( * self)) = 0
      end }
    
end
module CreuSat_Clause_Impl3_RemoveFromClause_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicLit_Impl1_LitIn_Interface as LitIn0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  val remove_from_clause [@cfg:stackify] (self : borrowed (Type.creusat_clause_clause)) (idx : usize) (_f : Type.creusat_formula_formula) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 134 4 134 52] Invariant0.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 135 4 135 34] Seq.length (Model0.model self) > 0}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 136 4 136 37] UInt64.to_int idx < Seq.length (Model0.model self)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 134 4 134 52] Invariant0.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 137 4 138 83] forall i : (int) . 0 <= i /\ i < Seq.length (Model1.model ( ^ self)) -> (exists j : (int) . 0 <= j /\ j < Seq.length (Model0.model self) /\ Seq.get (Model1.model ( ^ self)) i = Seq.get (Model0.model self) j) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 139 4 139 53] Seq.length (Model1.model ( ^ self)) + 1 = Seq.length (Model0.model self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 140 4 140 44] not LitIn0.lit_in (Seq.get (Model0.model self) (UInt64.to_int idx)) ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 141 4 142 51] forall j : (int) . 0 <= j /\ j < Seq.length (Model0.model self) /\ j <> UInt64.to_int idx -> LitIn0.lit_in (Seq.get (Model0.model self) j) ( ^ self) }
    
end
module CreuSat_Logic_LogicClause_Impl2_VarsInRange_Interface
  use Type
  use mach.int.Int
  predicate vars_in_range (self : Type.creusat_clause_clause) (n : int)
end
module CreuSat_Logic_LogicClause_Impl2_VarsInRange
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate vars_in_range [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 178 4 178 46] (self : Type.creusat_clause_clause) (n : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 179 8 179 51] VarsInRangeInner0.vars_in_range_inner (Model0.model self) n
end
module CreuSat_Logic_LogicClause_Impl2_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicClause_Impl2_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate sat_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 158 4 158 57] (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 159 8 162 9] exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) /\ SatInner0.sat_inner (Seq.get (Model0.model self) i) a
end
module CreuSat_Logic_LogicLit_Impl1_UnsetInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unset_inner (self : Type.creusat_lit_lit) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicLit_Impl1_UnsetInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  predicate unset_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 101 4 101 59] (self : Type.creusat_lit_lit) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 102 8 102 51] UInt8.to_int (Seq.get a (IndexLogic0.index_logic self)) >= 2
end
module CreuSat_Logic_LogicClause_Impl2_UnitInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unit_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicClause_Impl2_UnitInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner_Interface as UnsetInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl2_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange_Interface as VarsInRange0
  predicate unit_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 129 4 129 54] (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 130 8 137 9] VarsInRange0.vars_in_range self (Seq.length a) /\ not SatInner0.sat_inner self a /\ (exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) /\ UnsetInner0.unset_inner (Seq.get (Model0.model self) i) a /\ (forall j : (int) . 0 <= j /\ j < Seq.length (Model0.model self) /\ j <> i -> not UnsetInner0.unset_inner (Seq.get (Model0.model self) j) a))
end
module CreuSat_Logic_LogicClause_Impl2_Unit_Interface
  use Type
  predicate unit (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicClause_Impl2_Unit
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_UnitInner_Interface as UnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate unit [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 140 4 140 45] (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 141 8 141 41] UnitInner0.unit_inner self (Model0.model a)
end
module CreuSat_Logic_LogicLit_Impl1_Unset_Interface
  use Type
  predicate unset (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicLit_Impl1_Unset
  use Type
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner_Interface as UnsetInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate unset [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 111 4 111 46] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 112 8 112 42] UnsetInner0.unset_inner self (Model0.model a)
end
module CreuSat_Logic_LogicLit_Impl1_Unsat_Interface
  use Type
  predicate unsat (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicLit_Impl1_Unsat
  use Type
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate unsat [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 116 4 116 46] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 117 8 117 42] UnsatInner0.unsat_inner self (Model0.model a)
end
module CreuSat_Assignments_Impl0_Output
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  type output  =
    uint8
end
module CreuSat_Assignments_Impl0
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreuSat_Assignments_Impl0_Output as Output0
  clone CreuSat_Assignments_Impl0_Index_Interface as Index0 with function Model0.model = Model0.model
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusat_assignments_assignments,
  type idx = usize, val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusat_assignments_assignments, type idx = usize,
  type output = Output0.output
end
module CreuSat_Lit_Impl1_LitUnsat_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicLit_Impl1_Unsat_Interface as Unsat0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_unsat [@cfg:stackify] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) : bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 62 4 62 43] Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 63 4 63 40] result = Unsat0.unsat self a }
    
end
module CreuSat_Lit_Impl1_LitUnset_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicLit_Impl1_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_unset [@cfg:stackify] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) : bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 73 4 73 43] Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 74 4 74 40] result = Unset0.unset self a }
    
end
module CreuSat_Clause_Impl3_UnitAndUnset_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicLit_Impl1_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicClause_Impl2_Unit_Interface as Unit0
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant0
  clone CreuSat_Logic_LogicClause_InvariantInternal_Interface as InvariantInternal0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val unit_and_unset [@cfg:stackify] (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) (_f : Type.creusat_formula_formula) : bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 150 4 150 56] InvariantInternal0.invariant_internal (Model0.model self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 151 4 151 33] Invariant0.invariant' a _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 152 4 152 34] Seq.length (Model0.model self) > 1}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 153 4 153 40] result -> Unit0.unit self a }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 154 4 154 47] result -> Unset0.unset (Seq.get (Model0.model self) 0) a }
    
end
module CreuSat_Logic_LogicAssignments_CompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate complete_inner (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicAssignments_CompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  predicate complete_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_assignments.rs" 33 0 33 52] (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_assignments.rs" 34 4 36 5] forall i : (int) . 0 <= i /\ i < Seq.length a -> not Unset0.unset (Seq.get a i)
end
module CreuSat_Logic_LogicFormula_FormulaSatInner_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate formula_sat_inner (f : (Seq.seq (Type.creusat_clause_clause), int)) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicFormula_FormulaSatInner
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl2_SatInner_Interface as SatInner0
  predicate formula_sat_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 39 0 39 78] (f : (Seq.seq (Type.creusat_clause_clause), int)) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 40 4 43 5] forall i : (int) . 0 <= i /\ i < Seq.length (let (a, _) = f in a) -> SatInner0.sat_inner (Seq.get (let (a, _) = f in a) i) a
end
module CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate eventually_sat_complete_no_ass (f : (Seq.seq (Type.creusat_clause_clause), int))
end
module CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicFormula_FormulaSatInner_Interface as FormulaSatInner0
  clone CreuSat_Logic_LogicAssignments_CompleteInner_Interface as CompleteInner0
  predicate eventually_sat_complete_no_ass [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 47 0 47 68] (f : (Seq.seq (Type.creusat_clause_clause), int))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 48 4 50 5] exists a2 : (Seq.seq uint8) . Seq.length a2 = (let (_, a) = f in a) /\ CompleteInner0.complete_inner a2 /\ FormulaSatInner0.formula_sat_inner f a2
end
module CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  predicate equisat_extension_inner (c : Type.creusat_clause_clause) (f : (Seq.seq (Type.creusat_clause_clause), int))
end
module CreuSat_Logic_LogicClause_EquisatExtensionInner
  use Type
  use seq.Seq
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  predicate equisat_extension_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 34 0 34 72] (c : Type.creusat_clause_clause) (f : (Seq.seq (Type.creusat_clause_clause), int))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 35 4 37 5] EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f -> EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass (Seq.snoc (let (a, _) = f in a) c, let (_, a) = f in a)
end
module CreuSat_Logic_LogicClause_Impl2_EquisatExtension_Interface
  use Type
  predicate equisat_extension (self : Type.creusat_clause_clause) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicClause_Impl2_EquisatExtension
  use Type
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicFormula_Impl0_Model_Interface as Model0
  predicate equisat_extension [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 87 4 87 54] (self : Type.creusat_clause_clause) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 88 8 88 55] EquisatExtensionInner0.equisat_extension_inner self (Model0.model f)
end
module CreuSat_Logic_LogicClause_Impl2_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicClause_Impl2_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate unsat_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 145 4 145 59] (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 146 8 149 9] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> UnsatInner0.unsat_inner (Seq.get (Model0.model self) i) a
end
module CreuSat_Logic_LogicClause_Impl2_Equisat_Interface
  use Type
  predicate equisat (self : Type.creusat_clause_clause) (o : Type.creusat_clause_clause)
end
module CreuSat_Logic_LogicClause_Impl2_Equisat
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicClause_Impl2_SatInner_Interface as SatInner0
  predicate equisat [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 220 4 220 43] (self : Type.creusat_clause_clause) (o : Type.creusat_clause_clause)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 221 8 224 9] (forall a : (Seq.seq uint8) . SatInner0.sat_inner self a = SatInner0.sat_inner o a) /\ (forall a : (Seq.seq uint8) . UnsatInner0.unsat_inner self a = UnsatInner0.unsat_inner o a)
end
module CreuSat_Logic_LogicClause_Impl2_Equisat2_Interface
  use Type
  predicate equisat2 (self : Type.creusat_clause_clause) (o : Type.creusat_clause_clause) (f : Type.creusat_formula_formula)
    
end
module CreuSat_Logic_LogicClause_Impl2_Equisat2
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicClause_Impl2_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_CompleteInner_Interface as CompleteInner0
  predicate equisat2 [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 229 4 229 56] (self : Type.creusat_clause_clause) (o : Type.creusat_clause_clause) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 230 8 233 9] (forall a : (Seq.seq uint8) . Seq.length a = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) /\ CompleteInner0.complete_inner a -> SatInner0.sat_inner self a = SatInner0.sat_inner o a) /\ (forall a : (Seq.seq uint8) . Seq.length a = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) /\ CompleteInner0.complete_inner a -> UnsatInner0.unsat_inner self a = UnsatInner0.unsat_inner o a)
end
module CreuSat_Clause_Impl3_SwapLitsInClause_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension_Interface as EquisatExtension0
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap_lits_in_clause [@cfg:stackify] (self : borrowed (Type.creusat_clause_clause)) (_f : Type.creusat_formula_formula) (j : usize) (k : usize) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 169 4 169 35] Seq.length (Model0.model self) > UInt64.to_int j}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 170 4 170 35] Seq.length (Model0.model self) > UInt64.to_int k}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 171 4 171 52] Invariant0.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 172 4 172 51] EquisatExtension0.equisat_extension ( * self) _f}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 171 4 171 52] Invariant0.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 172 4 172 51] EquisatExtension0.equisat_extension ( ^ self) _f }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 173 4 173 49] Seq.length (Model0.model self) = Seq.length (Model1.model ( ^ self)) }
    
end
module CreuSat_Clause_Impl3_CalcLbd_Interface
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  val calc_lbd [@cfg:stackify] (self : Type.creusat_clause_clause) (_f : Type.creusat_formula_formula) (s : borrowed (Type.creusat_solver_solver)) (t : Type.creusat_trail_trail) : usize
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 192 4 192 58] Seq.length (Model0.model (Type.creusat_trail_trail_Trail_lit_to_level t)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/clause.rs" 193 4 193 45] Invariant0.invariant' self (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    
end
module CreuSat_Logic_LogicLit_IdxInLogic_Interface
  use mach.int.Int
  use seq.Seq
  use Type
  predicate idx_in_logic [@inline:trivial] (idx : int) (c : Seq.seq (Type.creusat_lit_lit))
end
module CreuSat_Logic_LogicLit_IdxInLogic
  use mach.int.Int
  use seq.Seq
  use Type
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  predicate idx_in_logic [@inline:trivial] [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 10 0 10 50] (idx : int) (c : Seq.seq (Type.creusat_lit_lit))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 11 4 14 5] exists i : (int) . 0 <= i /\ i < Seq.length c /\ IndexLogic0.index_logic (Seq.get c i) = idx
end
module CreuSat_ConflictAnalysis_IdxIn_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = bool, type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicLit_IdxInLogic_Interface as IdxInLogic0
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.alloc_vec_vec bool (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val idx_in [@cfg:stackify] (c : Type.alloc_vec_vec (Type.creusat_lit_lit) (Type.alloc_alloc_global)) (idx : usize) (seen : Type.alloc_vec_vec bool (Type.alloc_alloc_global)) : bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 23 0 23 51] VarsInRangeInner0.vars_in_range_inner (Model0.model c) (Seq.length (Model1.model seen))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 24 0 24 33] UInt64.to_int idx < Seq.length (Model1.model seen)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 25 0 25 52] Seq.get (Model1.model seen) (UInt64.to_int idx) = IdxInLogic0.idx_in_logic (UInt64.to_int idx) (Model0.model c)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 26 0 26 96] result = (exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model c) /\ IndexLogic0.index_logic (Seq.get (Model0.model c) i) = UInt64.to_int idx) }
    
end
module CreuSat_Logic_LogicLit_Impl1_LitIdxIn_Interface
  use Type
  predicate lit_idx_in (self : Type.creusat_lit_lit) (c : Type.creusat_clause_clause)
end
module CreuSat_Logic_LogicLit_Impl1_LitIdxIn
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate lit_idx_in [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 68 4 68 46] (self : Type.creusat_lit_lit) (c : Type.creusat_clause_clause)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 69 8 72 9] exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model c) /\ IndexLogic0.index_logic (Seq.get (Model0.model c) i) = IndexLogic0.index_logic self
end
module CreuSat_Logic_LogicTrail_LitIsUniqueInner_Interface
  use seq.Seq
  use Type
  predicate lit_is_unique_inner (trail : Seq.seq (Type.creusat_trail_step))
end
module CreuSat_Logic_LogicTrail_LitIsUniqueInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  predicate lit_is_unique_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 210 0 210 48] (trail : Seq.seq (Type.creusat_trail_step))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 211 4 215 5] forall i : (int) . 0 <= i /\ i < Seq.length trail -> (forall j : (int) . 0 <= j /\ j < i -> IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get trail j)) <> IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get trail i)))
end
module CreuSat_Logic_LogicUtil_SortedRange_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range (s : Seq.seq usize) (l : int) (u : int)
end
module CreuSat_Logic_LogicUtil_SortedRange
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 20 0 20 58] (s : Seq.seq usize) (l : int) (u : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 21 4 23 5] forall j : (int) . forall i : (int) . l <= i /\ i < j /\ j < u -> Seq.get s i <= Seq.get s j
end
module CreuSat_Logic_LogicUtil_Sorted_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted (s : Seq.seq usize)
end
module CreuSat_Logic_LogicUtil_Sorted
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  clone CreuSat_Logic_LogicUtil_SortedRange_Interface as SortedRange0
  predicate sorted [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 27 0 27 36] (s : Seq.seq usize) =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 28 4 30 5] SortedRange0.sorted_range s 0 (Seq.length s)
end
module CreuSat_Logic_LogicTrail_UnitAreSat_Interface
  use seq.Seq
  use Type
  predicate unit_are_sat (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
    
end
module CreuSat_Logic_LogicTrail_UnitAreSat
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone CreuSat_Logic_LogicLit_Impl1_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  predicate unit_are_sat [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 241 0 241 69] (trail : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 242 4 250 5] forall j : (int) . 0 <= j /\ j < Seq.length trail -> match (Type.creusat_trail_step_Step_reason (Seq.get trail j)) with
      | Type.CreuSat_Trail_Reason_Unit k -> Type.creusat_trail_step_Step_lit (Seq.get trail j) = Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k))) 0 /\ Sat0.sat (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k))) 0) a
      | _ -> true
      end
end
module CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecisionMirror_Interface
  use Type
  predicate invariant_no_decision_mirror (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecisionMirror
  use Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.UInt8
  use prelude.Prelude
  clone CreuSat_Logic_LogicTrail_UnitAreSat_Interface as UnitAreSat0
  clone CreuSat_Logic_LogicUtil_Sorted_Interface as Sorted0
  clone CreuSat_Logic_LogicLit_Impl1_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner_Interface as LitIsUniqueInner0
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn_Interface as LitIdxIn0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model3 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate invariant_no_decision_mirror [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 67 4 67 61] (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 68 8 83 9] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) = Seq.length (Model0.model (Type.creusat_trail_trail_Trail_assignments self)) /\ (forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_assignments self)) -> UInt8.to_int (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_assignments self)) i) <= 3) /\ (forall i : (int) . 0 <= i /\ i < Seq.length (Model1.model (Type.creusat_trail_trail_Trail_trail self)) -> Invariant0.invariant' (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_trail self)) i) f) /\ Seq.length (Model2.model (Type.creusat_trail_trail_Trail_lit_to_level self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) /\ (forall i : (int) . 0 <= i /\ i < Seq.length (Model1.model (Type.creusat_trail_trail_Trail_trail self)) -> (forall j : (int) . 0 <= j /\ j < i -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_trail self)) j)) with
      | Type.CreuSat_Trail_Reason_Long cref -> not LitIdxIn0.lit_idx_in (Type.creusat_trail_step_Step_lit (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_trail self)) i)) (Seq.get (Model3.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))
      | _ -> true
      end)) /\ LitIsUniqueInner0.lit_is_unique_inner (Model1.model (Type.creusat_trail_trail_Trail_trail self)) /\ LongArePostUnitInner0.long_are_post_unit_inner (Model1.model (Type.creusat_trail_trail_Trail_trail self)) f (Model0.model (Type.creusat_trail_trail_Trail_assignments self)) /\ (forall j : (int) . 0 <= j /\ j < Seq.length (Model1.model (Type.creusat_trail_trail_Trail_trail self)) -> Sat0.sat (Type.creusat_trail_step_Step_lit (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_trail self)) j)) (Type.creusat_trail_trail_Trail_assignments self)) /\ Sorted0.sorted (Model2.model (Type.creusat_trail_trail_Trail_decisions self)) /\ UnitAreSat0.unit_are_sat (Model1.model (Type.creusat_trail_trail_Trail_trail self)) f (Type.creusat_trail_trail_Trail_assignments self)
end
module CreuSat_Logic_LogicTrail_LitToLevelInvariant_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  predicate lit_to_level_invariant (lit_to_level : Seq.seq usize) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_LitToLevelInvariant
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  predicate lit_to_level_invariant [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 163 0 163 71] (lit_to_level : Seq.seq usize) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 164 4 166 5] Seq.length lit_to_level = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)
end
module CreuSat_Logic_LogicTrail_LitNotInLessInner_Interface
  use seq.Seq
  use Type
  predicate lit_not_in_less_inner (t : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_LitNotInLessInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn_Interface as LitIdxIn0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  predicate lit_not_in_less_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 144 0 144 62] (t : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 145 4 152 5] forall i : (int) . 0 <= i /\ i < Seq.length t -> (forall j : (int) . 0 <= j /\ j < i -> match (Type.creusat_trail_step_Step_reason (Seq.get t j)) with
      | Type.CreuSat_Trail_Reason_Long cref -> not LitIdxIn0.lit_idx_in (Type.creusat_trail_step_Step_lit (Seq.get t i)) (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))
      | _ -> true
      end)
end
module CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface
  use Type
  predicate lit_not_in_less (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_Impl2_LitNotInLess
  use Type
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner_Interface as LitNotInLessInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  predicate lit_not_in_less [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 127 4 127 52] (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 128 8 131 9] LitNotInLessInner0.lit_not_in_less_inner (Model0.model (Type.creusat_trail_trail_Trail_trail self)) f
end
module CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface
  use Type
  predicate lit_is_unique (self : Type.creusat_trail_trail)
end
module CreuSat_Logic_LogicTrail_Impl2_LitIsUnique
  use Type
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner_Interface as LitIsUniqueInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  predicate lit_is_unique [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 136 4 136 38] (self : Type.creusat_trail_trail)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 137 8 139 9] LitIsUniqueInner0.lit_is_unique_inner (Model0.model (Type.creusat_trail_trail_Trail_trail self))
end
module CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate trail_entries_are_assigned_inner (t : Seq.seq (Type.creusat_trail_step)) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  predicate trail_entries_are_assigned_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 179 0 179 80] (t : Seq.seq (Type.creusat_trail_step)) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 180 4 183 5] forall j : (int) . 0 <= j /\ j < Seq.length t -> SatInner0.sat_inner (Type.creusat_trail_step_Step_lit (Seq.get t j)) a
end
module CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned_Interface
  use Type
  predicate trail_entries_are_assigned (self : Type.creusat_trail_trail)
end
module CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned
  use Type
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner_Interface as TrailEntriesAreAssignedInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  predicate trail_entries_are_assigned [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 113 4 113 51] (self : Type.creusat_trail_trail)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 114 8 116 9] TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner (Model0.model (Type.creusat_trail_trail_Trail_trail self)) (Model1.model (Type.creusat_trail_trail_Trail_assignments self))
end
module CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted_Interface
  use Type
  predicate decisions_are_sorted (self : Type.creusat_trail_trail)
end
module CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreuSat_Logic_LogicUtil_Sorted_Interface as Sorted0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  predicate decisions_are_sorted [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 120 4 120 45] (self : Type.creusat_trail_trail)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 121 8 123 9] Sorted0.sorted (Model0.model (Type.creusat_trail_trail_Trail_decisions self))
end
module CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision_Interface
  use Type
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecisionMirror_Interface as InvariantNoDecisionMirror0
  predicate invariant_no_decision (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision
  use Type
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecisionMirror_Interface as InvariantNoDecisionMirror0
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreuSat_Logic_LogicTrail_UnitAreSat_Interface as UnitAreSat0
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted_Interface as DecisionsAreSorted0
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned_Interface as TrailEntriesAreAssigned0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique_Interface as LitIsUnique0
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess_Interface as LitNotInLess0
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant_Interface as LitToLevelInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  clone CreuSat_Logic_LogicTrail_TrailInvariant_Interface as TrailInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant0
  predicate invariant_no_decision [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 88 4 88 58] (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 89 8 101 9] Invariant0.invariant' (Type.creusat_trail_trail_Trail_assignments self) f /\ TrailInvariant0.trail_invariant (Model0.model (Type.creusat_trail_trail_Trail_trail self)) f /\ LitToLevelInvariant0.lit_to_level_invariant (Model1.model (Type.creusat_trail_trail_Trail_lit_to_level self)) f /\ LitNotInLess0.lit_not_in_less self f /\ LitIsUnique0.lit_is_unique self /\ LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail self)) f (Model2.model (Type.creusat_trail_trail_Trail_assignments self)) /\ TrailEntriesAreAssigned0.trail_entries_are_assigned self /\ DecisionsAreSorted0.decisions_are_sorted self /\ UnitAreSat0.unit_are_sat (Model0.model (Type.creusat_trail_trail_Trail_trail self)) f (Type.creusat_trail_trail_Trail_assignments self)
  axiom invariant_no_decision_spec : forall self : Type.creusat_trail_trail, f : Type.creusat_formula_formula . [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 87 4 87 62] invariant_no_decision self f = InvariantNoDecisionMirror0.invariant_no_decision_mirror self f
end
module CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface
  use Type
  predicate invariant' (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_Impl2_Invariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecisionMirror_Interface as InvariantNoDecisionMirror0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision_Interface as InvariantNoDecision0 with predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror,
  axiom .
  predicate invariant' [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 59 4 59 46] (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 60 8 63 9] InvariantNoDecision0.invariant_no_decision self f /\ (forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_decisions self)) -> UInt64.to_int (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_decisions self)) i) <= Seq.length (Model1.model (Type.creusat_trail_trail_Trail_trail self)))
end
module CreuSat_Logic_LogicClause_Impl2_InFormula_Interface
  use Type
  predicate in_formula (self : Type.creusat_clause_clause) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicClause_Impl2_InFormula
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  predicate in_formula [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 114 4 114 47] (self : Type.creusat_clause_clause) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 115 8 118 9] exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) /\ Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) i = self
end
module CreuSat_Logic_LogicLit_Impl1_IsOpp_Interface
  use Type
  predicate is_opp (self : Type.creusat_lit_lit) (o : Type.creusat_lit_lit)
end
module CreuSat_Logic_LogicLit_Impl1_IsOpp
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  predicate is_opp [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 47 4 47 39] (self : Type.creusat_lit_lit) (o : Type.creusat_lit_lit)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 48 8 50 9] IndexLogic0.index_logic self = IndexLogic0.index_logic o /\ IsPositiveLogic0.is_positive_logic self <> IsPositiveLogic0.is_positive_logic o
end
module CreuSat_Logic_LogicClause_Impl2_SameIdxSamePolarityExcept_Interface
  use Type
  use mach.int.Int
  predicate same_idx_same_polarity_except (self : Type.creusat_clause_clause) (other : Type.creusat_clause_clause) (exception' : int)
    
end
module CreuSat_Logic_LogicClause_Impl2_SameIdxSamePolarityExcept
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate same_idx_same_polarity_except [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 92 4 92 85] (self : Type.creusat_clause_clause) (other : Type.creusat_clause_clause) (exception' : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 93 8 98 9] forall j : (int) . forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) /\ 0 <= j /\ j < Seq.length (Model0.model other) -> IndexLogic0.index_logic (Seq.get (Model0.model self) i) <> exception' /\ IndexLogic0.index_logic (Seq.get (Model0.model self) i) = IndexLogic0.index_logic (Seq.get (Model0.model other) j) -> IsPositiveLogic0.is_positive_logic (Seq.get (Model0.model self) i) = IsPositiveLogic0.is_positive_logic (Seq.get (Model0.model other) j)
end
module CreuSat_Logic_LogicUtil_ElemsLessThan_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate elems_less_than (v : Seq.seq usize) (n : int)
end
module CreuSat_Logic_LogicUtil_ElemsLessThan
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  predicate elems_less_than [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 58 0 58 53] (v : Seq.seq usize) (n : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 59 4 59 68] forall i : (int) . 0 <= i /\ i < Seq.length v -> UInt64.to_int (Seq.get v i) < n
end
module CreuSat_Logic_LogicClause_Impl2_ClauseIsSeen_Interface
  use Type
  predicate clause_is_seen (self : Type.creusat_clause_clause) (seen : Type.alloc_vec_vec bool (Type.alloc_alloc_global))
    
end
module CreuSat_Logic_LogicClause_Impl2_ClauseIsSeen
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicLit_IdxInLogic_Interface as IdxInLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool, type a = Type.alloc_alloc_global,
  axiom .
  predicate clause_is_seen [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 237 4 237 56] (self : Type.creusat_clause_clause) (seen : Type.alloc_vec_vec bool (Type.alloc_alloc_global))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 238 8 241 9] forall idx : (int) . 0 <= idx /\ idx < Seq.length (Model0.model seen) -> Seq.get (Model0.model seen) idx = IdxInLogic0.idx_in_logic idx (Model1.model self)
end
module CreuSat_Logic_LogicClause_Impl2_Unsat_Interface
  use Type
  predicate unsat (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicClause_Impl2_Unsat
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate unsat [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 153 4 153 46] (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 154 8 154 42] UnsatInner0.unsat_inner self (Model0.model a)
end
module CreusotContracts_Logic_Int_Impl18_ModelTy
  use mach.int.Int
  type modelTy  =
    int
end
module CreuSat_Logic_LogicClause_Impl2_ResolventOf_Interface
  use Type
  use mach.int.Int
  predicate resolvent_of (self : Type.creusat_clause_clause) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (k : int) (m : int)
    
end
module CreuSat_Logic_LogicClause_Impl2_ResolventOf
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp_Interface as IsOpp0
  clone CreuSat_Logic_LogicLit_Impl1_LitIn_Interface as LitIn0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate resolvent_of [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 102 4 102 76] (self : Type.creusat_clause_clause) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (k : int) (m : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 103 8 110 9] (forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model c) /\ i <> m -> LitIn0.lit_in (Seq.get (Model0.model c) i) self) /\ (forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model c2) /\ i <> k -> LitIn0.lit_in (Seq.get (Model0.model c2) i) self) /\ (forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> LitIn0.lit_in (Seq.get (Model0.model self) i) c \/ LitIn0.lit_in (Seq.get (Model0.model self) i) c2) /\ not LitIn0.lit_in (Seq.get (Model0.model c) m) self /\ not LitIn0.lit_in (Seq.get (Model0.model c2) k) self /\ IsOpp0.is_opp (Seq.get (Model0.model c2) k) (Seq.get (Model0.model c) m)
end
module CreuSat_Logic_LogicClause_Impl2_InFormulaInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  predicate in_formula_inner (self : Type.creusat_clause_clause) (f : (Seq.seq (Type.creusat_clause_clause), int))
end
module CreuSat_Logic_LogicClause_Impl2_InFormulaInner
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate in_formula_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 122 4 122 64] (self : Type.creusat_clause_clause) (f : (Seq.seq (Type.creusat_clause_clause), int))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 123 8 125 9] exists i : (int) . 0 <= i /\ i < Seq.length (let (a, _) = f in a) /\ Seq.get (let (a, _) = f in a) i = self
end
module CreuSat_Logic_LogicClause_Impl2_Equals_Interface
  use Type
  predicate equals (self : Type.creusat_clause_clause) (o : Type.creusat_clause_clause)
end
module CreuSat_Logic_LogicClause_Impl2_Equals
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate equals [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 210 4 210 42] (self : Type.creusat_clause_clause) (o : Type.creusat_clause_clause)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 211 8 215 9] Seq.length (Model0.model self) = Seq.length (Model0.model o) /\ (forall j : (int) . 0 <= j /\ j < Seq.length (Model0.model self) -> Seq.get (Model0.model self) j = Seq.get (Model0.model o) j)
end
module CreuSat_Logic_LogicConflictAnalysis_LemmaEqFormulas_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl2_Equals_Interface as Equals0
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  function lemma_eq_formulas (f : (Seq.seq (Type.creusat_clause_clause), int)) (f2 : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) : ()
    
end
module CreuSat_Logic_LogicConflictAnalysis_LemmaEqFormulas
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl2_Equals_Interface as Equals0
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  function lemma_eq_formulas [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_conflict_analysis.rs" 17 0 17 78] (f : (Seq.seq (Type.creusat_clause_clause), int)) (f2 : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) : ()
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_conflict_analysis.rs" 9 0 9 8] ()
  axiom lemma_eq_formulas_spec : forall f : (Seq.seq (Type.creusat_clause_clause), int), f2 : (Seq.seq (Type.creusat_clause_clause), int), c : Type.creusat_clause_clause . ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_conflict_analysis.rs" 10 0 10 32] (let (a, _) = f2 in a) = Seq.snoc (let (a, _) = f in a) c) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_conflict_analysis.rs" 11 0 11 33] FormulaInvariant0.formula_invariant f) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_conflict_analysis.rs" 14 0 14 41] Model0.model (Seq.get (let (a, _) = f2 in a) (Seq.length (let (a, _) = f2 in a) - 1)) = Model0.model c) && ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_conflict_analysis.rs" 13 0 13 85] forall i : (int) . 0 <= i /\ i < Seq.length (let (a, _) = f in a) -> Equals0.equals (Seq.get (let (a, _) = f in a) i) (Seq.get (let (a, _) = f2 in a) i)) && ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_conflict_analysis.rs" 12 0 12 43] Seq.length (let (a, _) = f in a) + 1 = Seq.length (let (a, _) = f2 in a))
end
module CreuSat_Logic_LogicConflictAnalysis_LemmaResolventOfEquisatExtensionIsEquisat_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf_Interface as ResolventOf0
  clone CreuSat_Logic_LogicClause_Impl2_InFormulaInner_Interface as InFormulaInner0
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  function lemma_resolvent_of_equisat_extension_is_equisat (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) (k : int) (m : int) : ()
    
end
module CreuSat_Logic_LogicConflictAnalysis_LemmaResolventOfEquisatExtensionIsEquisat
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_Impl2_ResolventOf_Interface as ResolventOf0
  clone CreuSat_Logic_LogicClause_Impl2_InFormulaInner_Interface as InFormulaInner0
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreuSat_Logic_LogicFormula_FormulaInvariant_Interface as FormulaInvariant0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicClause_Impl2_Equals_Interface as Equals0
  clone CreuSat_Logic_LogicConflictAnalysis_LemmaEqFormulas_Interface as LemmaEqFormulas0 with predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant,
  predicate Equals0.equals = Equals0.equals, function Model0.model = Model0.model, axiom .
  function lemma_resolvent_of_equisat_extension_is_equisat [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_conflict_analysis.rs" 26 0 28 1] (f : (Seq.seq (Type.creusat_clause_clause), int)) (c : Type.creusat_clause_clause) (c2 : Type.creusat_clause_clause) (c3 : Type.creusat_clause_clause) (k : int) (m : int) : ()
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_conflict_analysis.rs" 20 0 20 8] let _ = LemmaEqFormulas0.lemma_eq_formulas f (Seq.snoc (let (a, _) = f in a) c3, let (_, a) = f in a) c3 in ()
  axiom lemma_resolvent_of_equisat_extension_is_equisat_spec : forall f : (Seq.seq (Type.creusat_clause_clause), int), c : Type.creusat_clause_clause, c2 : Type.creusat_clause_clause, c3 : Type.creusat_clause_clause, k : int, m : int . ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_conflict_analysis.rs" 21 0 21 33] FormulaInvariant0.formula_invariant f) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_conflict_analysis.rs" 22 0 22 42] EquisatExtensionInner0.equisat_extension_inner c f) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_conflict_analysis.rs" 23 0 23 35] InFormulaInner0.in_formula_inner c2 f) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_conflict_analysis.rs" 24 0 24 41] ResolventOf0.resolvent_of c3 c c2 k m) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_conflict_analysis.rs" 25 0 25 42] EquisatExtensionInner0.equisat_extension_inner c3 f)
end
module CreusotContracts_Logic_Int_Impl18
  
end
module CreusotContracts_Logic_Int_Impl18_Model_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl18_Model
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : usize) : int =
    UInt64.to_int self
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module CreuSat_Trail_Impl0_DecisionLevel_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  val decision_level [@cfg:stackify] (self : Type.creusat_trail_trail) : usize
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 36 4 36 50] UInt64.to_int result = Seq.length (Model0.model (Type.creusat_trail_trail_Trail_decisions self)) }
    
end
module CreuSat_ConflictAnalysis_Resolve_Interface
  use mach.int.UInt64
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy4
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy3 with type t = usize, type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = bool, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Int_Impl18_ModelTy as ModelTy1
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model9 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model8 with type t = bool, type a = Type.alloc_alloc_global,
  axiom .
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model7
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat0
  clone CreuSat_Logic_LogicClause_Impl2_ClauseIsSeen_Interface as ClauseIsSeen0
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model6 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy4.modelTy
  clone CreuSat_Logic_LogicUtil_ElemsLessThan_Interface as ElemsLessThan0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model5 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy3.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model4 with type t = Type.alloc_vec_vec bool (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model3 with type t = usize,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreuSat_Logic_LogicClause_Impl2_SameIdxSamePolarityExcept_Interface as SameIdxSamePolarityExcept0
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp_Interface as IsOpp0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicClause_Impl2_InFormula_Interface as InFormula0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val resolve [@cfg:stackify] (_f : Type.creusat_formula_formula) (c : borrowed (Type.creusat_clause_clause)) (o : Type.creusat_clause_clause) (idx : usize) (c_idx : usize) (trail : Type.creusat_trail_trail) (seen : borrowed (Type.alloc_vec_vec bool (Type.alloc_alloc_global))) (path_c : borrowed usize) (to_bump : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global))) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 32 0 32 27] Invariant0.invariant' _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 33 0 33 33] Invariant1.invariant' trail _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 34 0 34 32] UInt64.to_int idx < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 35 0 35 30] InFormula0.in_formula o _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 36 0 39 2] UInt64.to_int c_idx < Seq.length (Model0.model c) /\ IndexLogic0.index_logic (Seq.get (Model0.model c) (UInt64.to_int c_idx)) = UInt64.to_int idx /\ IsOpp0.is_opp (Seq.get (Model1.model o) 0) (Seq.get (Model0.model c) (UInt64.to_int c_idx))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 40 0 40 54] SameIdxSamePolarityExcept0.same_idx_same_polarity_except ( * c) o (UInt64.to_int idx)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 42 0 42 96] forall j : (int) . 1 <= j /\ j < Seq.length (Model1.model o) -> UnsatInner0.unsat_inner (Seq.get (Model1.model o) j) (Model2.model (Type.creusat_trail_trail_Trail_assignments trail))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 43 0 43 50] SatInner0.sat_inner (Seq.get (Model1.model o) 0) (Model2.model (Type.creusat_trail_trail_Trail_assignments trail))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 44 0 44 49] Model3.model path_c > 0 /\ Model3.model path_c <= Seq.length (Model0.model c)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 47 0 47 42] Seq.length (Model4.model seen) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 49 0 49 52] ElemsLessThan0.elems_less_than (Model5.model to_bump) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 51 0 51 49] EquisatExtensionInner0.equisat_extension_inner ( * c) (Model6.model _f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 52 0 52 46] ClauseIsSeen0.clause_is_seen ( * c) ( * seen)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 53 0 53 46] Unsat0.unsat ( * c) (Type.creusat_trail_trail_Trail_assignments trail)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 54 0 54 45] Invariant2.invariant' ( * c) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 45 0 45 35] UInt64.to_int ( ^ path_c) <= Seq.length (Model7.model ( ^ c)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 48 0 48 42] Seq.length (Model8.model ( ^ seen)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 50 0 50 52] ElemsLessThan0.elems_less_than (Model9.model ( ^ to_bump)) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 51 0 51 49] EquisatExtensionInner0.equisat_extension_inner ( ^ c) (Model6.model _f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 52 0 52 46] ClauseIsSeen0.clause_is_seen ( ^ c) ( ^ seen) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 53 0 53 46] Unsat0.unsat ( ^ c) (Type.creusat_trail_trail_Trail_assignments trail) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 54 0 54 45] Invariant2.invariant' ( ^ c) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    
end
module CreuSat_ConflictAnalysis_ChooseLiteral_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy2
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = bool, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Int_Impl18_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_IsOpp_Interface as IsOpp0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model3 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = Type.alloc_vec_vec bool (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = usize,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  val choose_literal [@cfg:stackify] (c : Type.creusat_clause_clause) (trail : Type.creusat_trail_trail) (i : borrowed usize) (_f : Type.creusat_formula_formula) (seen : Type.alloc_vec_vec bool (Type.alloc_alloc_global)) : Type.core_option_option usize
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 125 0 125 33] Invariant0.invariant' trail _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 126 0 126 39] Unsat0.unsat c (Type.creusat_trail_trail_Trail_assignments trail)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 127 0 127 39] Model0.model i <= Seq.length (Model1.model (Type.creusat_trail_trail_Trail_trail trail))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 128 0 128 42] Seq.length (Model2.model seen) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 129 0 137 3] match (result) with
      | Type.Core_Option_Option_Some r -> UInt64.to_int r < Seq.length (Model3.model c) /\ IsOpp0.is_opp (Seq.get (Model3.model c) (UInt64.to_int r)) (Type.creusat_trail_step_Step_lit (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_trail trail)) (UInt64.to_int ( ^ i)))) /\ IndexLogic0.index_logic (Seq.get (Model3.model c) (UInt64.to_int r)) = IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get (Model1.model (Type.creusat_trail_trail_Trail_trail trail)) (UInt64.to_int ( ^ i)))) /\ UInt64.to_int ( ^ i) < Seq.length (Model1.model (Type.creusat_trail_trail_Trail_trail trail))
      | Type.Core_Option_Option_None -> UInt64.to_int ( ^ i) = 0
      end }
    
end
module CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.creusat_decision_decisions) (n : int)
end
module CreuSat_Logic_LogicDecision_Impl0_Invariant
  use Type
  use mach.int.Int
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int32
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global, axiom .
  predicate invariant' [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_decision.rs" 9 4 9 42] (self : Type.creusat_decision_decisions) (n : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_decision.rs" 10 8 17 9] Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) = n /\ (UInt64.to_int (Type.creusat_decision_decisions_Decisions_search self) < Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) \/ UInt64.to_int (Type.creusat_decision_decisions_Decisions_search self) = 18446744073709551615) /\ UInt64.to_int (Type.creusat_decision_decisions_Decisions_start self) < Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) /\ (forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) -> (UInt64.to_int (Type.creusat_decision_node_Node_next (Seq.get (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) i)) = 18446744073709551615 \/ UInt64.to_int (Type.creusat_decision_node_Node_next (Seq.get (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) i)) < n) /\ (UInt64.to_int (Type.creusat_decision_node_Node_prev (Seq.get (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) i)) = 18446744073709551615 \/ UInt64.to_int (Type.creusat_decision_node_Node_prev (Seq.get (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list self)) i)) < n))
end
module CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable_Interface
  use Type
  predicate not_satisfiable (self : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension_Interface as EquisatExtension0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate not_satisfiable [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 175 4 175 40] (self : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 176 8 178 9] exists c : (Type.creusat_clause_clause) . Seq.length (Model0.model c) = 0 /\ EquisatExtension0.equisat_extension c self
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreuSat_Formula_Impl0_Index_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusat_formula_formula) (ix : usize) : Type.creusat_clause_clause
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 29 4 29 38] UInt64.to_int ix < Seq.length (let (a, _) = Model0.model self in a)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 30 4 30 41] Seq.get (let (a, _) = Model0.model self in a) (UInt64.to_int ix) = result }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl1_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl1_Resolve
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) =
    forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreuSat_Logic_LogicUtil_SortedRangeTupleZeroth_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range_tuple_zeroth (s : Seq.seq (usize, usize)) (l : int) (u : int)
end
module CreuSat_Logic_LogicUtil_SortedRangeTupleZeroth
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range_tuple_zeroth [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 34 0 34 80] (s : Seq.seq (usize, usize)) (l : int) (u : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 35 4 37 5] forall j : (int) . forall i : (int) . l <= i /\ i < j /\ j < u -> (let (a, _) = Seq.get s i in a) <= (let (a, _) = Seq.get s j in a)
end
module CreuSat_Logic_LogicUtil_SortedTupleZeroth_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_tuple_zeroth (s : Seq.seq (usize, usize))
end
module CreuSat_Logic_LogicUtil_SortedTupleZeroth
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  clone CreuSat_Logic_LogicUtil_SortedRangeTupleZeroth_Interface as SortedRangeTupleZeroth0
  predicate sorted_tuple_zeroth [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 41 0 41 58] (s : Seq.seq (usize, usize))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 42 4 44 5] SortedRangeTupleZeroth0.sorted_range_tuple_zeroth s 0 (Seq.length s)
end
module CreusotContracts_Logic_Seq_Impl2_PermutationOf_Interface
  type t
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl2_PermutationOf
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) =
    Permut.permut self o 0 (Seq.length self)
end
module CreuSat_Logic_LogicUtil_Partition_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate partition (v : Seq.seq (usize, usize)) (i : int)
end
module CreuSat_Logic_LogicUtil_Partition
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  predicate partition [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 48 0 48 56] (v : Seq.seq (usize, usize)) (i : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 49 4 49 109] forall k2 : (int) . forall k1 : (int) . 0 <= k1 /\ k1 < i /\ i <= k2 /\ k2 < Seq.length v -> (let (a, _) = Seq.get v k1 in a) <= (let (a, _) = Seq.get v k2 in a)
end
module CreuSat_Util_Sort_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = (usize, usize),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf_Interface as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicUtil_SortedTupleZeroth_Interface as SortedTupleZeroth0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = (usize, usize),
  type a = Type.alloc_alloc_global, axiom .
  val sort [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global))) : ()
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/util.rs" 60 0 60 36] SortedTupleZeroth0.sorted_tuple_zeroth (Model0.model ( ^ v)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/util.rs" 61 0 61 36] PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    
end
module CreuSat_Decision_Impl1_Rescore_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant0
  val rescore [@cfg:stackify] (self : borrowed (Type.creusat_decision_decisions)) (_f : Type.creusat_formula_formula) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 130 4 130 52] Invariant0.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 131 4 131 56] Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self))) < 18446744073709551615}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 130 4 130 52] Invariant0.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 132 4 132 67] UInt64.to_int (Type.creusat_decision_decisions_Decisions_timestamp ( ^ self)) = Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self))) + 1 }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 133 4 133 73] Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( ^ self))) = Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self))) }
    
end
module CreuSat_Decision_Impl1_MoveToFront_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global, axiom .
  val move_to_front [@cfg:stackify] (self : borrowed (Type.creusat_decision_decisions)) (tomove : usize) (_f : Type.creusat_formula_formula) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 160 4 160 43] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f) < 18446744073709551615}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 161 4 161 52] UInt64.to_int tomove < Seq.length (Model0.model (Type.creusat_decision_decisions_Decisions_linked_list ( * self)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 162 4 162 52] Invariant0.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 162 4 162 52] Invariant0.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    
end
module CreusotContracts_Std1_Vec_Impl1
  type t
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module CreuSat_Decision_Impl1_IncrementAndMove_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  clone CreuSat_Logic_LogicUtil_ElemsLessThan_Interface as ElemsLessThan0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  val increment_and_move [@cfg:stackify] (self : borrowed (Type.creusat_decision_decisions)) (f : Type.creusat_formula_formula) (v : Type.alloc_vec_vec usize (Type.alloc_alloc_global)) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 199 4 199 49] ElemsLessThan0.elems_less_than (Model0.model v) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 200 4 200 42] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < 18446744073709551615}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 201 4 201 30] Invariant0.invariant' f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 202 4 202 51] Invariant1.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 202 4 202 51] Invariant1.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    
end
module CreuSat_Formula_Impl0_Output
  use Type
  type output  =
    Type.creusat_clause_clause
end
module CreuSat_Formula_Impl0
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreuSat_Formula_Impl0_Output as Output0
  clone CreuSat_Formula_Impl0_Index_Interface as Index0 with function Model0.model = Model0.model
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusat_formula_formula, type idx = usize,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusat_formula_formula, type idx = usize,
  type output = Output0.output
end
module CreusotContracts_Std1_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module CreuSat_Clause_Impl2
  use Type
  clone CreuSat_Clause_Impl2_Clone_Interface as Clone0
  clone CreusotContracts_Std1_Clone_Clone_Clone_Interface as Clone1 with type self = Type.creusat_clause_clause,
  val clone' = Clone0.clone'
end
module CreuSat_ConflictAnalysis_AnalyzeConflict_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use seq.Seq
  use Type
  use mach.int.Int32
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant3
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val analyze_conflict [@cfg:stackify] (f : Type.creusat_formula_formula) (trail : Type.creusat_trail_trail) (cref : usize) (d : borrowed (Type.creusat_decision_decisions)) : Type.creusat_conflictanalysis_conflict
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 161 0 161 26] Invariant0.invariant' f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 162 0 162 38] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < 18446744073709551615}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 163 0 163 32] Invariant1.invariant' trail f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 164 0 164 39] UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 165 0 165 57] Unsat0.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)) (Type.creusat_trail_trail_Trail_assignments trail)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 191 0 191 44] Invariant2.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 166 0 190 3] match (result) with
      | Type.CreuSat_ConflictAnalysis_Conflict_Ground -> NotSatisfiable0.not_satisfiable f
      | Type.CreuSat_ConflictAnalysis_Conflict_Unit clause -> Invariant3.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) /\ Seq.length (Model1.model clause) = 1 /\ VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) /\ NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause) /\ EquisatExtensionInner0.equisat_extension_inner clause (Model2.model f)
      | Type.CreuSat_ConflictAnalysis_Conflict_Learned s_idx clause -> Invariant3.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) /\ Seq.length (Model1.model clause) > 1 /\ VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) /\ NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause) /\ EquisatExtensionInner0.equisat_extension_inner clause (Model2.model f) /\ UInt64.to_int s_idx < Seq.length (Model1.model clause)
      | Type.CreuSat_ConflictAnalysis_Conflict_Restart clause -> Invariant3.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) /\ Seq.length (Model1.model clause) > 1 /\ VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) /\ NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause) /\ EquisatExtensionInner0.equisat_extension_inner clause (Model2.model f)
      end }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 191 0 191 44] Invariant2.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    
end
module CreuSat_ConflictAnalysis_ResolveEmptyClause_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val resolve_empty_clause [@cfg:stackify] (f : Type.creusat_formula_formula) (trail : Type.creusat_trail_trail) (cref : usize) : bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 266 0 266 26] Invariant0.invariant' f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 267 0 267 32] Invariant1.invariant' trail f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 268 0 268 39] UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 269 0 269 57] Unsat0.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)) (Type.creusat_trail_trail_Trail_assignments trail)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/conflict_analysis.rs" 270 0 270 42] result -> NotSatisfiable0.not_satisfiable f }
    
end
module CreuSat_Decision_Impl2_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.creusat_decision_node) : Type.creusat_decision_node
end
module CreuSat_Decision_Impl0_Default_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  val default [@cfg:stackify] (_ : ()) : Type.creusat_decision_node
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 21 4 21 43] UInt64.to_int (Type.creusat_decision_node_Node_next result) = 18446744073709551615 }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 22 4 22 43] UInt64.to_int (Type.creusat_decision_node_Node_prev result) = 18446744073709551615 }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 23 4 23 33] UInt64.to_int (Type.creusat_decision_node_Node_ts result) = 0 }
    
end
module Core_Default_Default_Default_Interface
  type self
  val default [@cfg:stackify] (_ : ()) : self
    requires {false}
    
end
module CreuSat_Decision_Impl0
  use Type
  clone CreuSat_Decision_Impl0_Default_Interface as Default0
  clone Core_Default_Default_Default_Interface as Default1 with type self = Type.creusat_decision_node,
  val default = Default0.default
end
module CreuSat_Decision_Impl1_MakeLinkedList_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val make_linked_list [@cfg:stackify] (f : Type.creusat_formula_formula) (lit_order : Type.alloc_vec_vec usize (Type.alloc_alloc_global)) : Type.creusat_decision_decisions
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 39 4 39 30] Invariant0.invariant' f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 40 4 40 63] 0 < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) /\ UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 41 4 43 48] Seq.length (Model0.model lit_order) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) /\ (forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model lit_order) -> UInt64.to_int (Seq.get (Model0.model lit_order) i) < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 44 4 44 45] Invariant1.invariant' result (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    
end
module CreuSat_Logic_LogicUtil_SortedRangeRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range_rev (s : Seq.seq (usize, usize)) (l : int) (u : int)
end
module CreuSat_Logic_LogicUtil_SortedRangeRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range_rev [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 6 0 6 71] (s : Seq.seq (usize, usize)) (l : int) (u : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 7 4 9 5] forall j : (int) . forall i : (int) . l <= i /\ i < j /\ j < u -> (let (a, _) = Seq.get s i in a) >= (let (a, _) = Seq.get s j in a)
end
module CreuSat_Logic_LogicUtil_SortedRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_rev (s : Seq.seq (usize, usize))
end
module CreuSat_Logic_LogicUtil_SortedRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  clone CreuSat_Logic_LogicUtil_SortedRangeRev_Interface as SortedRangeRev0
  predicate sorted_rev [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 13 0 13 49] (s : Seq.seq (usize, usize))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 14 4 16 5] SortedRangeRev0.sorted_range_rev s 0 (Seq.length s)
end
module CreuSat_Logic_LogicUtil_PartitionRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate partition_rev (v : Seq.seq (usize, usize)) (i : int)
end
module CreuSat_Logic_LogicUtil_PartitionRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  predicate partition_rev [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 53 0 53 60] (v : Seq.seq (usize, usize)) (i : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 54 4 54 110] forall k2 : (int) . forall k1 : (int) . 0 <= k1 /\ k1 < i /\ i <= k2 /\ k2 < Seq.length v -> (let (a, _) = Seq.get v k1 in a) >= (let (a, _) = Seq.get v k2 in a)
end
module CreuSat_Util_SortReverse_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = (usize, usize),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf_Interface as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicUtil_SortedRev_Interface as SortedRev0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = (usize, usize),
  type a = Type.alloc_alloc_global, axiom .
  val sort_reverse [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global))) : ()
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/util.rs" 11 0 11 27] SortedRev0.sorted_rev (Model0.model ( ^ v)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/util.rs" 12 0 12 36] PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    
end
module CreuSat_Decision_Impl1_New_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val new [@cfg:stackify] (f : Type.creusat_formula_formula) : Type.creusat_decision_decisions
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 79 4 79 30] Invariant0.invariant' f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 80 4 80 63] 0 < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) /\ UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 81 4 81 45] Invariant1.invariant' result (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    
end
module CreuSat_Logic_LogicAssignments_Impl1_Complete_Interface
  use Type
  predicate complete (self : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicAssignments_Impl1_Complete
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate complete [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_assignments.rs" 55 4 55 33] (self : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_assignments.rs" 56 8 58 9] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> not Unset0.unset (Seq.get (Model0.model self) i)
end
module CreuSat_Decision_Impl1_GetNext_Interface
  use mach.int.UInt64
  use Type
  use mach.int.Int
  use prelude.Prelude
  use seq.Seq
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicAssignments_Impl1_Complete_Interface as Complete0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant0
  val get_next [@cfg:stackify] (self : borrowed (Type.creusat_decision_decisions)) (a : Type.creusat_assignments_assignments) (_f : Type.creusat_formula_formula) : Type.core_option_option usize
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 232 4 232 52] Invariant0.invariant' ( * self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 233 4 233 33] Invariant1.invariant' a _f}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 232 4 232 52] Invariant0.invariant' ( ^ self) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/decision.rs" 234 4 237 7] match (result) with
      | Type.Core_Option_Option_Some k -> UInt64.to_int k < Seq.length (Model0.model a) /\ Unset0.unset (Seq.get (Model0.model a) (UInt64.to_int k))
      | Type.Core_Option_Option_None -> Complete0.complete a
      end }
    
end
module CreuSat_Formula_Impl1_IndexMut_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicFormula_Impl0_Model_Interface as Model1
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (ix : usize) : borrowed (Type.creusat_clause_clause)
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 43 4 43 38] UInt64.to_int ix < Seq.length (let (a, _) = Model0.model self in a)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 44 4 44 42] Seq.get (let (a, _) = Model1.model ( * self) in a) (UInt64.to_int ix) =  * result }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 45 4 45 42] Seq.get (let (a, _) = Model1.model ( ^ self) in a) (UInt64.to_int ix) =  ^ result }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 46 4 46 107] forall i : (int) . 0 <= i /\ i <> UInt64.to_int ix /\ i < Seq.length (let (a, _) = Model0.model self in a) -> Seq.get (let (a, _) = Model0.model self in a) i = Seq.get (let (a, _) = Model1.model ( ^ self) in a) i }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 47 4 47 52] Seq.length (let (a, _) = Model1.model ( ^ self) in a) = Seq.length (let (a, _) = Model1.model ( * self) in a) }
    
end
module CreuSat_Formula_Impl2_CheckFormulaInvariant_Interface
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicFormula_FormulaSatInner_Interface as FormulaSatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = uint8, type a = Type.alloc_alloc_global,
  axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val check_formula_invariant [@cfg:stackify] (self : Type.creusat_formula_formula) : Type.creusat_solver_satresult
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 60 4 65 7] match (result) with
      | Type.CreuSat_Solver_SatResult_Sat assn -> FormulaSatInner0.formula_sat_inner (Model0.model self) (Model1.model assn)
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable self
      | Type.CreuSat_Solver_SatResult_Unknown -> Invariant0.invariant' self /\ 0 < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self) /\ UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self) < div 18446744073709551615 2
      | Type.CreuSat_Solver_SatResult_Err -> true
      end }
    
end
module CreuSat_Logic_LogicClause_Impl2_Sat_Interface
  use Type
  predicate sat (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicClause_Impl2_Sat
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate sat [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 166 4 166 44] (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 167 8 169 9] SatInner0.sat_inner self (Model0.model a)
end
module CreuSat_Lit_Impl1_LitSat_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicLit_Impl1_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_sat [@cfg:stackify] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) : bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 51 4 51 43] Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 52 4 52 38] result = Sat0.sat self a }
    
end
module CreuSat_Formula_Impl2_IsClauseSat_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicClause_Impl2_Sat_Interface as Sat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val is_clause_sat [@cfg:stackify] (self : Type.creusat_formula_formula) (idx : usize) (a : Type.creusat_assignments_assignments) : bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 92 4 92 33] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 93 4 93 35] Invariant1.invariant' a self}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 94 4 94 45] UInt64.to_int idx < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 95 4 95 55] result = Sat0.sat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) (UInt64.to_int idx)) a }
    
end
module CreuSat_Logic_LogicWatches_WatchesInvariantInternal_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate watches_invariant_internal (w : Seq.seq (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global))) (n : int) (f : Type.creusat_formula_formula)
    
end
module CreuSat_Logic_LogicWatches_WatchesInvariantInternal
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, axiom .
  predicate watches_invariant_internal [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 11 0 11 83] (w : Seq.seq (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global))) (n : int) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 12 4 20 5] 2 * n = Seq.length w /\ (forall i : (int) . 0 <= i /\ i < Seq.length w -> (forall j : (int) . 0 <= j /\ j < Seq.length (Model0.model (Seq.get w i)) -> UInt64.to_int (Type.creusat_watches_watcher_Watcher_cref (Seq.get (Model0.model (Seq.get w i)) j)) < Seq.length (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) /\ Seq.length (Model2.model (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int (Type.creusat_watches_watcher_Watcher_cref (Seq.get (Model0.model (Seq.get w i)) j))))) > 1 /\ IndexLogic0.index_logic (Type.creusat_watches_watcher_Watcher_blocker (Seq.get (Model0.model (Seq.get w i)) j)) < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)))
end
module CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface
  use Type
  predicate invariant' (self : Type.creusat_watches_watches) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicWatches_Impl0_Invariant
  use Type
  use mach.int.UInt64
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal_Interface as WatchesInvariantInternal0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  predicate invariant' [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 67 4 67 46] (self : Type.creusat_watches_watches) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 68 8 83 9] WatchesInvariantInternal0.watches_invariant_internal (Model0.model (Type.creusat_watches_watches_Watches_watches self)) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) f
end
module CreuSat_Logic_LogicFormula_Impl2_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.creusat_formula_formula) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicFormula_Impl2_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl2_SatInner_Interface as SatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  predicate sat_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 149 4 149 57] (self : Type.creusat_formula_formula) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 150 8 153 9] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) -> SatInner0.sat_inner (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) i) a
end
module CreuSat_Logic_LogicFormula_Impl2_EventuallySatCompleteNoAss_Interface
  use Type
  predicate eventually_sat_complete_no_ass (self : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicFormula_Impl2_EventuallySatCompleteNoAss
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone CreuSat_Logic_LogicFormula_Impl2_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_CompleteInner_Interface as CompleteInner0
  predicate eventually_sat_complete_no_ass [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 80 4 80 55] (self : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 81 8 83 9] exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self) /\ CompleteInner0.complete_inner a2 /\ SatInner0.sat_inner self a2
end
module CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface
  use Type
  predicate equisat (self : Type.creusat_formula_formula) (o : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicFormula_Impl2_Equisat
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  predicate equisat [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 86 4 86 44] (self : Type.creusat_formula_formula) (o : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 85 4 85 16] EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass self = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass o
end
module CreuSat_Logic_LogicFormula_Compatible_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate compatible (f : (Seq.seq (Type.creusat_clause_clause), int)) (o : (Seq.seq (Type.creusat_clause_clause), int))
    
end
module CreuSat_Logic_LogicFormula_Compatible
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl2_Equals_Interface as Equals0
  predicate compatible [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 61 0 61 67] (f : (Seq.seq (Type.creusat_clause_clause), int)) (o : (Seq.seq (Type.creusat_clause_clause), int))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 62 4 67 5] (let (_, a) = f in a) = (let (_, a) = o in a) /\ Seq.length (let (a, _) = o in a) >= Seq.length (let (a, _) = f in a) /\ (forall i : (int) . 0 <= i /\ i < Seq.length (let (a, _) = f in a) -> Equals0.equals (Seq.get (let (a, _) = f in a) i) (Seq.get (let (a, _) = o in a) i))
end
module CreuSat_Logic_LogicFormula_Equisat_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate equisat (f : (Seq.seq (Type.creusat_clause_clause), int)) (o : (Seq.seq (Type.creusat_clause_clause), int))
end
module CreuSat_Logic_LogicFormula_Equisat
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  predicate equisat [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 54 0 54 64] (f : (Seq.seq (Type.creusat_clause_clause), int)) (o : (Seq.seq (Type.creusat_clause_clause), int))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 55 4 57 5] EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass o
end
module CreuSat_Logic_LogicFormula_EquisatCompatibleInner_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate equisat_compatible_inner (f : (Seq.seq (Type.creusat_clause_clause), int)) (o : (Seq.seq (Type.creusat_clause_clause), int))
    
end
module CreuSat_Logic_LogicFormula_EquisatCompatibleInner
  use seq.Seq
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Compatible_Interface as Compatible0
  predicate equisat_compatible_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 71 0 71 81] (f : (Seq.seq (Type.creusat_clause_clause), int)) (o : (Seq.seq (Type.creusat_clause_clause), int))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 72 4 74 5] Compatible0.compatible f o /\ Equisat0.equisat f o
end
module CreuSat_Logic_LogicFormula_Impl2_EquisatCompatible_Interface
  use Type
  predicate equisat_compatible (self : Type.creusat_formula_formula) (o : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicFormula_Impl2_EquisatCompatible
  use Type
  clone CreuSat_Logic_LogicFormula_EquisatCompatibleInner_Interface as EquisatCompatibleInner0
  clone CreuSat_Logic_LogicFormula_Impl0_Model_Interface as Model0
  predicate equisat_compatible [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 101 4 101 55] (self : Type.creusat_formula_formula) (o : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 102 8 102 57] EquisatCompatibleInner0.equisat_compatible_inner (Model0.model self) (Model0.model o)
end
module CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic_Interface
  use Type
  use mach.int.Int
  function to_neg_watchidx_logic [@inline:trivial] (self : Type.creusat_lit_lit) : int
end
module CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  function to_neg_watchidx_logic [@inline:trivial] [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 39 4 39 45] (self : Type.creusat_lit_lit) : int
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 40 8 40 91] IndexLogic0.index_logic self * 2 + (if IsPositiveLogic0.is_positive_logic self then
      1
    else
      0
    )
end
module CreuSat_Lit_Impl1_ToNegWatchidx_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic_Interface as ToNegWatchidxLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  val to_neg_watchidx [@cfg:stackify] (self : Type.creusat_lit_lit) : usize
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 97 4 97 51] IndexLogic0.index_logic self < div 18446744073709551615 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 98 4 98 55] UInt64.to_int result = ToNegWatchidxLogic0.to_neg_watchidx_logic self }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 99 4 99 96] UInt64.to_int result = IndexLogic0.index_logic self * 2 + (if IsPositiveLogic0.is_positive_logic self then
      1
    else
      0
    ) }
    
end
module CreuSat_Watches_Impl0_AddWatcher_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic_Interface as ToNegWatchidxLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  val add_watcher [@cfg:stackify] (self : borrowed (Type.creusat_watches_watches)) (lit : Type.creusat_lit_lit) (cref : usize) (_f : Type.creusat_formula_formula) (blocker : Type.creusat_lit_lit) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 105 4 105 43] Invariant0.invariant' ( * self) _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 106 4 106 44] UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses _f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 107 4 107 50] IndexLogic0.index_logic lit < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 108 4 108 53] IndexLogic0.index_logic blocker < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 109 4 109 68] ToNegWatchidxLogic0.to_neg_watchidx_logic lit < Seq.length (Model1.model (Type.creusat_watches_watches_Watches_watches ( * self)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 110 4 110 50] Seq.length (Model2.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int cref))) > 1}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 105 4 105 43] Invariant0.invariant' ( ^ self) _f }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 111 4 111 65] Seq.length (Model1.model (Type.creusat_watches_watches_Watches_watches ( * self))) = Seq.length (Model1.model (Type.creusat_watches_watches_Watches_watches ( ^ self))) }
    
end
module CreuSat_Formula_Impl2_AddClause_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant3
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val add_clause [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (clause : Type.creusat_clause_clause) (watches : borrowed (Type.creusat_watches_watches)) (_t : Type.creusat_trail_trail) : usize
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 110 4 110 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 111 4 111 40] Invariant1.invariant' _t ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 112 4 112 51] Invariant2.invariant' ( * watches) ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 113 4 113 37] Seq.length (Model0.model clause) >= 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 114 4 114 47] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 117 4 117 49] Invariant3.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 118 4 118 55] EquisatExtensionInner0.equisat_extension_inner clause (Model1.model self)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 110 4 110 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 111 4 111 40] Invariant1.invariant' _t ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 112 4 112 51] Invariant2.invariant' ( ^ watches) ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 119 4 119 51] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 120 4 120 35] Equisat0.equisat ( * self) ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 121 4 121 48] UInt64.to_int result = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 122 4 122 53] Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int result) = clause }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 123 4 123 69] Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) + 1 = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    
end
module CreuSat_Formula_Impl2_AddUnwatchedClause_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant3
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val add_unwatched_clause [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (clause : Type.creusat_clause_clause) (watches : borrowed (Type.creusat_watches_watches)) (_t : Type.creusat_trail_trail) : usize
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 144 4 144 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 145 4 145 40] Invariant1.invariant' _t ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 146 4 146 51] Invariant2.invariant' ( * watches) ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 147 4 147 37] Seq.length (Model0.model clause) >= 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 148 4 148 47] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 151 4 151 49] Invariant3.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 152 4 152 55] EquisatExtensionInner0.equisat_extension_inner clause (Model1.model self)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 144 4 144 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 145 4 145 40] Invariant1.invariant' _t ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 146 4 146 51] Invariant2.invariant' ( ^ watches) ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 153 4 153 51] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 154 4 154 35] Equisat0.equisat ( * self) ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 155 4 155 48] UInt64.to_int result = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 156 4 156 53] Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int result) = clause }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 157 4 157 69] Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) + 1 = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    
end
module CreuSat_Formula_Impl2_AddUnit_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Impl2_EquisatCompatible_Interface as EquisatCompatible0
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val add_unit [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (clause : Type.creusat_clause_clause) (_t : Type.creusat_trail_trail) : usize
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 168 4 168 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 169 4 169 40] Invariant1.invariant' _t ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 170 4 170 37] Seq.length (Model0.model clause) = 1}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 171 4 171 49] Invariant2.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 172 4 172 47] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 173 4 173 61] VarsInRangeInner0.vars_in_range_inner (Model0.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 174 4 174 52] NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model0.model clause)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 175 4 175 55] EquisatExtensionInner0.equisat_extension_inner clause (Model1.model self)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 168 4 168 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 169 4 169 40] Invariant1.invariant' _t ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 176 4 176 51] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ self)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 177 4 177 46] EquisatCompatible0.equisat_compatible ( * self) ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 178 4 178 35] Equisat0.equisat ( * self) ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 179 4 179 48] UInt64.to_int result = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 180 4 180 57] Seq.length (Model0.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) (UInt64.to_int result))) = 1 }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 181 4 181 69] Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * self))) + 1 = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ self))) }
    
end
module CreuSat_Logic_LogicFormula_Impl2_Sat_Interface
  use Type
  predicate sat (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicFormula_Impl2_Sat
  use Type
  clone CreuSat_Logic_LogicFormula_FormulaSatInner_Interface as FormulaSatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicFormula_Impl0_Model_Interface as Model0
  predicate sat [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 157 4 157 44] (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 158 8 158 50] FormulaSatInner0.formula_sat_inner (Model0.model self) (Model1.model a)
end
module CreuSat_Formula_Impl2_IsSat_Interface
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val is_sat [@cfg:stackify] (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) : bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 192 4 192 33] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 193 4 193 35] Invariant1.invariant' a self}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 194 4 194 38] result = Sat0.sat self a }
    
end
module CreuSat_Logic_LogicWatches_WatcherCrefsInRange_Interface
  use seq.Seq
  use Type
  predicate watcher_crefs_in_range (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicWatches_WatcherCrefsInRange
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  predicate watcher_crefs_in_range [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 35 0 35 66] (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 36 4 39 5] forall j : (int) . 0 <= j /\ j < Seq.length w -> UInt64.to_int (Type.creusat_watches_watcher_Watcher_cref (Seq.get w j)) < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))
end
module CreuSat_Logic_LogicUtil_Pop_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq_ext.SeqExt
  function pop (s : Seq.seq t) : Seq.seq t
end
module CreuSat_Logic_LogicUtil_Pop
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq_ext.SeqExt
  function pop [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 68 0 68 34] (s : Seq.seq t) : Seq.seq t =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 69 4 71 5] SeqExt.subsequence s 0 (Seq.length s - 1)
  axiom pop_spec : forall s : Seq.seq t . ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 64 0 64 24] Seq.length s > 0) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 67 0 67 75] forall i : (int) . 0 <= i /\ i < Seq.length (pop s) -> Seq.get (pop s) i = Seq.get s i) && ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 66 0 66 39] Seq.length (pop s) = Seq.length s - 1) && ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 65 0 65 51] pop s = SeqExt.subsequence s 0 (Seq.length s - 1))
end
module CreuSat_Logic_LogicWatches_LemmaPopWatchMaintainsWatcherInvariant_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = Type.creusat_watches_watcher, axiom .
  clone CreuSat_Logic_LogicWatches_WatcherCrefsInRange_Interface as WatcherCrefsInRange0
  function lemma_pop_watch_maintains_watcher_invariant (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula) : ()
    
end
module CreuSat_Logic_LogicWatches_LemmaPopWatchMaintainsWatcherInvariant
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = Type.creusat_watches_watcher, axiom .
  clone CreuSat_Logic_LogicWatches_WatcherCrefsInRange_Interface as WatcherCrefsInRange0
  function lemma_pop_watch_maintains_watcher_invariant [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 55 0 55 79] (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula) : ()
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 50 0 50 8] ()
  axiom lemma_pop_watch_maintains_watcher_invariant_spec : forall w : Seq.seq (Type.creusat_watches_watcher), f : Type.creusat_formula_formula . ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 52 0 52 24] Seq.length w > 0) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 53 0 53 41] WatcherCrefsInRange0.watcher_crefs_in_range w f) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 54 0 54 45] WatcherCrefsInRange0.watcher_crefs_in_range (Pop0.pop w) f)
end
module CreuSat_Watches_Impl0_Unwatch_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant1 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  val unwatch [@cfg:stackify] (self : borrowed (Type.creusat_watches_watches)) (f : Type.creusat_formula_formula) (trail : Type.creusat_trail_trail) (cref : usize) (lit : Type.creusat_lit_lit) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 155 4 155 42] Invariant0.invariant' ( * self) f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 156 4 156 44] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 157 4 157 48] IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 158 4 158 30] Invariant1.invariant' f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 159 4 159 36] Invariant2.invariant' trail f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 160 4 160 43] UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 161 4 161 50] Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) >= 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 155 4 155 42] Invariant0.invariant' ( ^ self) f }
    
end
module CreuSat_Formula_Impl2_DeleteClause_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant1 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  val delete_clause [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (cref : usize) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 208 4 208 51] Invariant0.invariant' ( * watches) ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 209 4 209 40] Invariant1.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 210 4 210 42] Invariant2.invariant' t ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 211 4 211 47] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 212 4 212 52] Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self))) (UInt64.to_int cref))) > 1}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 213 4 213 46] UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * self)))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 208 4 208 51] Invariant0.invariant' ( ^ watches) ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 209 4 209 40] Invariant1.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 210 4 210 42] Invariant2.invariant' t ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 214 4 214 35] Equisat0.equisat ( * self) ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 215 4 215 49] Type.creusat_formula_formula_Formula_num_vars ( * self) = Type.creusat_formula_formula_Formula_num_vars ( ^ self) }
    
end
module CreuSat_Formula_Impl2_DeleteClauses_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val delete_clauses [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 229 4 229 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 230 4 230 51] Invariant1.invariant' ( * watches) ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 231 4 231 42] Invariant2.invariant' t ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 232 4 232 35] Invariant2.invariant' t ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 233 4 233 47] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 229 4 229 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 230 4 230 51] Invariant1.invariant' ( ^ watches) ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 231 4 231 42] Invariant2.invariant' t ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 234 4 234 49] Type.creusat_formula_formula_Formula_num_vars ( * self) = Type.creusat_formula_formula_Formula_num_vars ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 235 4 235 35] Equisat0.equisat ( * self) ( ^ self) }
    
end
module CreuSat_Formula_Impl2_SimplifyFormula_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val simplify_formula [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 262 4 262 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 263 4 263 51] Invariant1.invariant' ( * watches) ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 264 4 264 42] Invariant2.invariant' t ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 265 4 265 47] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 262 4 262 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 263 4 263 51] Invariant1.invariant' ( ^ watches) ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 264 4 264 42] Invariant2.invariant' t ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 266 4 266 49] Type.creusat_formula_formula_Formula_num_vars ( * self) = Type.creusat_formula_formula_Formula_num_vars ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 267 4 267 35] Equisat0.equisat ( * self) ( ^ self) }
    
end
module CreuSat_Formula_Impl2_ReduceDb_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val reduceDB [@cfg:stackify] (self : borrowed (Type.creusat_formula_formula)) (watches : borrowed (Type.creusat_watches_watches)) (t : Type.creusat_trail_trail) (s : borrowed (Type.creusat_solver_solver)) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 275 4 275 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 276 4 276 51] Invariant1.invariant' ( * watches) ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 277 4 277 42] Invariant2.invariant' t ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 278 4 278 33] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 279 4 279 35] Invariant2.invariant' t ( * self)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 280 4 280 47] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * self)) < div 18446744073709551615 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 275 4 275 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 276 4 276 51] Invariant1.invariant' ( ^ watches) ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 277 4 277 42] Invariant2.invariant' t ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 281 4 281 49] Type.creusat_formula_formula_Formula_num_vars ( * self) = Type.creusat_formula_formula_Formula_num_vars ( ^ self) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/formula.rs" 282 4 282 35] Equisat0.equisat ( * self) ( ^ self) }
    
end
module CreuSat_Lit_Impl4_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.creusat_lit_lit) : Type.creusat_lit_lit
end
module CreuSat_Lit_Impl0_Model_Interface
  use Type
  function model (self : Type.creusat_lit_lit) : Type.creusat_lit_lit
end
module CreuSat_Lit_Impl0_Model
  use Type
  function model [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 22 4 22 26] (self : Type.creusat_lit_lit) : Type.creusat_lit_lit
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 23 8 23 12] self
end
module CreuSat_Lit_Impl1_LitSet_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicLit_Impl1_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_set [@cfg:stackify] (self : Type.creusat_lit_lit) (a : Type.creusat_assignments_assignments) : bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 81 4 81 43] Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 82 4 82 41] result = (not Unset0.unset self a) }
    
end
module CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic_Interface
  use Type
  use mach.int.Int
  function to_watchidx_logic [@inline:trivial] (self : Type.creusat_lit_lit) : int
end
module CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  function to_watchidx_logic [@inline:trivial] [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 33 4 33 41] (self : Type.creusat_lit_lit) : int
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 34 8 34 91] IndexLogic0.index_logic self * 2 + (if IsPositiveLogic0.is_positive_logic self then
      0
    else
      1
    )
end
module CreuSat_Lit_Impl1_ToWatchidx_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic_Interface as ToWatchidxLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  val to_watchidx [@cfg:stackify] (self : Type.creusat_lit_lit) : usize
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 89 4 89 51] IndexLogic0.index_logic self < div 18446744073709551615 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 90 4 90 51] UInt64.to_int result = ToWatchidxLogic0.to_watchidx_logic self }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 91 4 91 96] UInt64.to_int result = IndexLogic0.index_logic self * 2 + (if IsPositiveLogic0.is_positive_logic self then
      0
    else
      1
    ) }
    
end
module CreuSat_Lit_Impl1_PhaseSaved_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val phase_saved [@cfg:stackify] (idx : usize) (assignments : Type.creusat_assignments_assignments) : Type.creusat_lit_lit
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 105 4 105 44] UInt64.to_int idx < Seq.length (Model0.model assignments)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 106 4 106 44] IndexLogic0.index_logic result = UInt64.to_int idx }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 107 4 107 74] IsPositiveLogic0.is_positive_logic result = (UInt8.to_int (Seq.get (Model0.model assignments) (UInt64.to_int idx)) = 1) }
    
end
module CreuSat_Lit_Impl2_Eq_Interface
  use prelude.Prelude
  use Type
  val eq [@cfg:stackify] (self : Type.creusat_lit_lit) (other : Type.creusat_lit_lit) : bool
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 120 4 120 41] result = (self = other) }
    
end
module CreuSat_Lit_Impl3_Not_Interface
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic_Interface as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  val not' [@cfg:stackify] (self : Type.creusat_lit_lit) : Type.creusat_lit_lit
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 132 4 132 58] IndexLogic0.index_logic result = IndexLogic0.index_logic self }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/lit.rs" 133 4 133 71] IsPositiveLogic0.is_positive_logic result = (not IsPositiveLogic0.is_positive_logic self) }
    
end
module CreuSat_Logic_Logic_Inner_Impl0_SatisfiesClause_Interface
  use Type
  use seq.Seq
  predicate satisfies_clause (self : Type.creusat_logic_logic_inner_m) (cl : Seq.seq (Type.creusat_lit_lit))
end
module CreuSat_Logic_Logic_Inner_Impl0_SatisfiesClause
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use map.Map
  predicate satisfies_clause [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 17 8 17 55] (self : Type.creusat_logic_logic_inner_m) (cl : Seq.seq (Type.creusat_lit_lit))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 18 12 20 13] exists i : (int) . 0 <= i /\ i < Seq.length cl /\ Map.get (Type.creusat_logic_logic_inner_m_M_0 self) (UInt64.to_int (Type.creusat_lit_lit_Lit_idx (Seq.get cl i))) = Type.creusat_lit_lit_Lit_polarity (Seq.get cl i)
end
module CreuSat_Logic_Logic_Inner_Impl0_Satisfies_Interface
  use Type
  use seq.Seq
  predicate satisfies (self : Type.creusat_logic_logic_inner_m) (fml : Seq.seq (Seq.seq (Type.creusat_lit_lit)))
end
module CreuSat_Logic_Logic_Inner_Impl0_Satisfies
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_Logic_Inner_Impl0_SatisfiesClause_Interface as SatisfiesClause0
  predicate satisfies [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 24 8 24 54] (self : Type.creusat_logic_logic_inner_m) (fml : Seq.seq (Seq.seq (Type.creusat_lit_lit)))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 25 12 27 13] forall c : (int) . 0 <= c /\ c < Seq.length fml -> SatisfiesClause0.satisfies_clause self (Seq.get fml c)
end
module CreuSat_Logic_LogicFormula_Impl1_RealModel_Interface
  use Type
  use seq.Seq
  function real_model (self : Type.creusat_formula_formula) : Seq.seq (Seq.seq (Type.creusat_lit_lit))
end
module CreuSat_Logic_LogicFormula_Impl1_RealModel
  use Type
  use seq.Seq
  function real_model [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 22 4 22 44] (self : Type.creusat_formula_formula) : Seq.seq (Seq.seq (Type.creusat_lit_lit))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 23 8 23 18] Seq.empty 
end
module CreuSat_Logic_Logic_Inner_Impl1_Unsat2_Interface
  use Type
  predicate unsat2 (self : Type.creusat_formula_formula)
end
module CreuSat_Logic_Logic_Inner_Impl1_Unsat2
  use Type
  clone CreuSat_Logic_Logic_Inner_Impl0_Satisfies_Interface as Satisfies0
  clone CreuSat_Logic_LogicFormula_Impl1_RealModel_Interface as RealModel0
  predicate unsat2 [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 34 8 34 31] (self : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 35 12 35 80] forall m : (Type.creusat_logic_logic_inner_m) . Satisfies0.satisfies m (RealModel0.real_model self) -> false
end
module CreuSat_Logic_Logic_Inner_Impl1_Sat2_Interface
  use Type
  predicate sat2 (self : Type.creusat_formula_formula)
end
module CreuSat_Logic_Logic_Inner_Impl1_Sat2
  use Type
  clone CreuSat_Logic_Logic_Inner_Impl0_Satisfies_Interface as Satisfies0
  clone CreuSat_Logic_LogicFormula_Impl1_RealModel_Interface as RealModel0
  predicate sat2 [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 39 8 39 29] (self : Type.creusat_formula_formula)
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 40 12 40 70] exists m : (Type.creusat_logic_logic_inner_m) . Satisfies0.satisfies m (RealModel0.real_model self)
end
module CreuSat_Logic_Logic_Inner_Impl1_Equisat2_Interface
  use Type
  predicate equisat2 (self : Type.creusat_formula_formula) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_Logic_Inner_Impl1_Equisat2
  use Type
  clone CreuSat_Logic_Logic_Inner_Impl0_Satisfies_Interface as Satisfies0
  clone CreuSat_Logic_LogicFormula_Impl1_RealModel_Interface as RealModel0
  predicate equisat2 [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 44 8 44 42] (self : Type.creusat_formula_formula) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 45 12 47 13] forall m : (Type.creusat_logic_logic_inner_m) . Satisfies0.satisfies m (RealModel0.real_model self) -> Satisfies0.satisfies m (RealModel0.real_model f) /\ Satisfies0.satisfies m (RealModel0.real_model f) -> Satisfies0.satisfies m (RealModel0.real_model self)
end
module CreuSat_Logic_Logic_Pos_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function pos (_ : ()) : uint8
end
module CreuSat_Logic_Logic_Pos
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function pos [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 56 0 56 25] (_ : ()) : uint8 =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 57 4 57 7] (1 : uint8)
end
module CreuSat_Logic_Logic_Neg_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function neg (_ : ()) : uint8
end
module CreuSat_Logic_Logic_Neg
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function neg [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 61 0 61 25] (_ : ()) : uint8 =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 62 4 62 7] (0 : uint8)
end
module CreuSat_Logic_Logic_BoolToAssignedstate_Interface
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function bool_to_assignedstate (b : bool) : uint8
end
module CreuSat_Logic_Logic_BoolToAssignedstate
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function bool_to_assignedstate [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 80 0 80 54] (b : bool) : uint8 =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 77 0 77 8] if b then (1 : uint8) else (0 : uint8)
  axiom bool_to_assignedstate_spec : forall b : bool . ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 79 0 79 31] not b -> UInt8.to_int (bool_to_assignedstate b) = 0) && ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 78 0 78 30] b -> UInt8.to_int (bool_to_assignedstate b) = 1)
end
module CreuSat_Logic_Logic_FlipV_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function flip_v (v : uint8) : uint8
end
module CreuSat_Logic_Logic_FlipV
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  function flip_v [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 89 0 89 44] (v : uint8) : uint8 =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic.rs" 90 4 98 5] if UInt8.to_int v = 0 then
      (1 : uint8)
    else
      if UInt8.to_int v = 1 then (0 : uint8) else v
    
end
module CreuSat_Logic_LogicAssignments_CompatibleInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate compatible_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module CreuSat_Logic_LogicAssignments_CompatibleInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  predicate compatible_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_assignments.rs" 25 0 25 78] (a : Seq.seq uint8) (a2 : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_assignments.rs" 26 4 29 5] Seq.length a = Seq.length a2 /\ (forall i : (int) . 0 <= i /\ i < Seq.length a -> Unset0.unset (Seq.get a i) \/ Seq.get a i = Seq.get a2 i)
end
module CreuSat_Logic_LogicAssignments_CompatibleCompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate compatible_complete_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module CreuSat_Logic_LogicAssignments_CompatibleCompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreuSat_Logic_LogicAssignments_CompleteInner_Interface as CompleteInner0
  clone CreuSat_Logic_LogicAssignments_CompatibleInner_Interface as CompatibleInner0
  predicate compatible_complete_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_assignments.rs" 40 0 40 87] (a : Seq.seq uint8) (a2 : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_assignments.rs" 39 0 39 12] CompatibleInner0.compatible_inner a a2 /\ CompleteInner0.complete_inner a2
end
module CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate post_unit_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicClause_Impl1_PostUnitInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate post_unit_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 56 4 56 63] (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 57 8 61 9] exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) /\ SatInner0.sat_inner (Seq.get (Model0.model self) i) a /\ (forall j : (int) . 0 <= j /\ j < Seq.length (Model0.model self) /\ j <> i -> UnsatInner0.unsat_inner (Seq.get (Model0.model self) j) a)
end
module CreuSat_Logic_LogicClause_Impl1_NoUnsetInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate no_unset_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicClause_Impl1_NoUnsetInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner_Interface as UnsetInner0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate no_unset_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 65 4 65 62] (self : Type.creusat_clause_clause) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 66 8 68 9] forall j : (int) . 0 <= j /\ j < Seq.length (Model0.model self) -> not UnsetInner0.unset_inner (Seq.get (Model0.model self) j) a
end
module CreuSat_Logic_LogicClause_Impl1_PostUnit_Interface
  use Type
  predicate post_unit (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicClause_Impl1_PostUnit
  use Type
  clone CreuSat_Logic_LogicClause_Impl1_PostUnitInner_Interface as PostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate post_unit [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 72 4 72 50] (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 73 8 73 46] PostUnitInner0.post_unit_inner self (Model0.model a)
end
module CreuSat_Logic_LogicClause_Impl1_EqAssnInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate eq_assn_inner (self : Type.creusat_clause_clause) (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module CreuSat_Logic_LogicClause_Impl1_EqAssnInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate eq_assn_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 77 4 77 85] (self : Type.creusat_clause_clause) (a : Seq.seq uint8) (a2 : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 78 8 81 9] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> Seq.get a (IndexLogic0.index_logic (Seq.get (Model0.model self) i)) = Seq.get a2 (IndexLogic0.index_logic (Seq.get (Model0.model self) i))
end
module CreuSat_Logic_LogicClause_Impl2_Unknown_Interface
  use Type
  predicate unknown (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicClause_Impl2_Unknown
  use Type
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat0
  clone CreuSat_Logic_LogicClause_Impl2_Sat_Interface as Sat0
  predicate unknown [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 173 4 173 48] (self : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 172 4 172 16] not Sat0.sat self a /\ not Unsat0.unsat self a
end
module CreuSat_Logic_LogicClause_Impl2_SearchIdxInRange_Interface
  use Type
  predicate search_idx_in_range (self : Type.creusat_clause_clause)
end
module CreuSat_Logic_LogicClause_Impl2_SearchIdxInRange
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model0
  predicate search_idx_in_range [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 188 4 188 44] (self : Type.creusat_clause_clause)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 189 8 191 9] 2 <= UInt64.to_int (Type.creusat_clause_clause_Clause_search self) /\ UInt64.to_int (Type.creusat_clause_clause_Clause_search self) <= Seq.length (Model0.model self)
end
module CreuSat_Logic_LogicClause_Impl2_InvariantUnaryOk_Interface
  use Type
  use mach.int.Int
  predicate invariant_unary_ok (self : Type.creusat_clause_clause) (n : int)
end
module CreuSat_Logic_LogicClause_Impl2_InvariantUnaryOk
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicClause_Impl2_SearchIdxInRange_Interface as SearchIdxInRange0
  clone CreuSat_Logic_LogicClause_Impl2_NoDuplicateIndexes_Interface as NoDuplicateIndexes0
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange_Interface as VarsInRange0
  predicate invariant_unary_ok [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 203 4 203 51] (self : Type.creusat_clause_clause) (n : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_clause.rs" 205 8 205 104] VarsInRange0.vars_in_range self n /\ NoDuplicateIndexes0.no_duplicate_indexes self /\ SearchIdxInRange0.search_idx_in_range self
end
module CreuSat_Logic_LogicFormula_Impl2_Compatible_Interface
  use Type
  predicate compatible (self : Type.creusat_formula_formula) (o : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicFormula_Impl2_Compatible
  use Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl2_Equals_Interface as Equals0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  predicate compatible [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 91 4 91 47] (self : Type.creusat_formula_formula) (o : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 92 8 97 9] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars o) /\ Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses o)) >= Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) /\ (forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) -> Equals0.equals (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) i) (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses o)) i))
end
module CreuSat_Logic_LogicFormula_Impl2_EventuallySatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate eventually_sat_inner (self : Type.creusat_formula_formula) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicFormula_Impl2_EventuallySatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone CreuSat_Logic_LogicFormula_Impl2_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_CompatibleInner_Interface as CompatibleInner0
  predicate eventually_sat_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 125 4 125 64] (self : Type.creusat_formula_formula) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 126 8 128 9] exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self) /\ CompatibleInner0.compatible_inner a a2 /\ SatInner0.sat_inner self a2
end
module CreuSat_Logic_LogicFormula_Impl2_EventuallySatCompleteInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate eventually_sat_complete_inner (self : Type.creusat_formula_formula) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicFormula_Impl2_EventuallySatCompleteInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone CreuSat_Logic_LogicFormula_Impl2_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_CompatibleCompleteInner_Interface as CompatibleCompleteInner0
  predicate eventually_sat_complete_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 132 4 132 73] (self : Type.creusat_formula_formula) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 133 8 135 9] exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars self) /\ CompatibleCompleteInner0.compatible_complete_inner a a2 /\ SatInner0.sat_inner self a2
end
module CreuSat_Logic_LogicFormula_Impl2_EventuallySatComplete_Interface
  use Type
  predicate eventually_sat_complete (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicFormula_Impl2_EventuallySatComplete
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate eventually_sat_complete [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 139 4 139 60] (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 140 8 140 59] EventuallySatCompleteInner0.eventually_sat_complete_inner self (Model0.model a)
end
module CreuSat_Logic_LogicFormula_Impl2_EventuallySat_Interface
  use Type
  predicate eventually_sat (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicFormula_Impl2_EventuallySat
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_EventuallySatInner_Interface as EventuallySatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate eventually_sat [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 144 4 144 51] (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 145 8 145 50] EventuallySatInner0.eventually_sat_inner self (Model0.model a)
end
module CreuSat_Logic_LogicFormula_Impl2_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.creusat_formula_formula) (a : Seq.seq uint8)
end
module CreuSat_Logic_LogicFormula_Impl2_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner_Interface as UnsatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  predicate unsat_inner [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 162 4 162 55] (self : Type.creusat_formula_formula) (a : Seq.seq uint8)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 163 8 166 9] exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) /\ UnsatInner0.unsat_inner (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses self)) i) a
end
module CreuSat_Logic_LogicFormula_Impl2_Unsat_Interface
  use Type
  predicate unsat (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
end
module CreuSat_Logic_LogicFormula_Impl2_Unsat
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate unsat [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 170 4 170 46] (self : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_formula.rs" 171 8 171 42] UnsatInner0.unsat_inner self (Model0.model a)
end
module CreuSat_Logic_LogicLit_Impl1_LitInInternal_Interface
  use Type
  use seq.Seq
  predicate lit_in_internal (self : Type.creusat_lit_lit) (c : Seq.seq (Type.creusat_lit_lit))
end
module CreuSat_Logic_LogicLit_Impl1_LitInInternal
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate lit_in_internal [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 54 4 54 53] (self : Type.creusat_lit_lit) (c : Seq.seq (Type.creusat_lit_lit))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 55 8 57 9] exists i : (int) . 0 <= i /\ i < Seq.length c /\ Seq.get c i = self
end
module CreuSat_Logic_LogicLit_Impl1_IdxInTrail_Interface
  use Type
  predicate idx_in_trail (self : Type.creusat_lit_lit) (t : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global))
    
end
module CreuSat_Logic_LogicLit_Impl1_IdxInTrail
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  predicate idx_in_trail [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 121 4 121 51] (self : Type.creusat_lit_lit) (t : Type.alloc_vec_vec (Type.creusat_trail_step) (Type.alloc_alloc_global))
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_lit.rs" 122 8 125 9] exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model t) /\ IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get (Model0.model t) i)) = IndexLogic0.index_logic self
end
module CreuSat_Logic_LogicTrail_Impl0_InvariantReasonNew_Interface
  use Type
  predicate invariant_reason_new (self : Type.creusat_trail_reason) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
    
end
module CreuSat_Logic_LogicTrail_Impl0_InvariantReasonNew
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  predicate invariant_reason_new [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 27 4 27 73] (self : Type.creusat_trail_reason) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 28 8 42 9] match (self) with
      | Type.CreuSat_Trail_Reason_Long cref -> 0 <= UInt64.to_int cref /\ UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) /\ Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) > 1 /\ (forall i : (int) . 1 <= i /\ i < Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) -> UnsatInner0.unsat_inner (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) i) (Model2.model a)) /\ SatInner0.sat_inner (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) 0) (Model2.model a)
      | Type.CreuSat_Trail_Reason_Unit cref -> 0 <= UInt64.to_int cref /\ UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) /\ Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) = 1 /\ SatInner0.sat_inner (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) 0) (Model2.model a)
      | _ -> true
      end
end
module CreuSat_Logic_LogicTrail_Impl2_NewPostUnit_Interface
  use Type
  predicate new_post_unit (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_Impl2_NewPostUnit
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreuSat_Logic_LogicTrail_Impl0_InvariantReasonNew_Interface as InvariantReasonNew0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  predicate new_post_unit [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 105 4 105 50] (self : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 106 8 109 9] forall j : (int) . 0 <= j /\ j < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail self)) -> InvariantReasonNew0.invariant_reason_new (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail self)) j)) f (Type.creusat_trail_trail_Trail_assignments self)
end
module CreuSat_Logic_LogicTrail_ClausePostWithRegardsTo_Interface
  use Type
  use mach.int.Int
  predicate clause_post_with_regards_to (c : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) (j : int)
    
end
module CreuSat_Logic_LogicTrail_ClausePostWithRegardsTo
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner_Interface as ClausePostWithRegardsToInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate clause_post_with_regards_to [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 187 0 187 77] (c : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) (j : int)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 188 4 190 5] ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner c (Model0.model a) j
end
module CreuSat_Logic_LogicTrail_ClausePostWithRegardsToLit_Interface
  use Type
  predicate clause_post_with_regards_to_lit (c : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit)
    
end
module CreuSat_Logic_LogicTrail_ClausePostWithRegardsToLit
  use Type
  use mach.int.UInt64
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner_Interface as ClausePostWithRegardsToInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  predicate clause_post_with_regards_to_lit [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 203 0 203 83] (c : Type.creusat_clause_clause) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 204 4 206 5] ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner c (Model0.model a) (UInt64.to_int (Type.creusat_lit_lit_Lit_idx lit))
end
module CreuSat_Logic_LogicTrail_LongArePostUnit_Interface
  use Type
  predicate long_are_post_unit (trail : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicTrail_LongArePostUnit
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsTo_Interface as ClausePostWithRegardsTo0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  predicate long_are_post_unit [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 219 0 219 59] (trail : Type.creusat_trail_trail) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 220 4 226 5] forall j : (int) . 0 <= j /\ j < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_trail trail)) -> match (Type.creusat_trail_step_Step_reason (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail trail)) j)) with
      | Type.CreuSat_Trail_Reason_Long k -> ClausePostWithRegardsTo0.clause_post_with_regards_to (Seq.get (Model1.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int k)) (Type.creusat_trail_trail_Trail_assignments trail) (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_trail trail)) j)))
      | _ -> true
      end
end
module CreuSat_Logic_LogicTrail_LemmaAssignMaintainsLongArePostUnit_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_CrefsInRange_Interface as CrefsInRange0
  clone CreuSat_Logic_LogicTrail_TrailInvariant_Interface as TrailInvariant0
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant1 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant0
  function lemma_assign_maintains_long_are_post_unit (v : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaAssignMaintainsLongArePostUnit
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_CrefsInRange_Interface as CrefsInRange0
  clone CreuSat_Logic_LogicTrail_TrailInvariant_Interface as TrailInvariant0
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant1 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant0
  function lemma_assign_maintains_long_are_post_unit [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 264 0 264 100] (v : Seq.seq (Type.creusat_trail_step)) (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) (lit : Type.creusat_lit_lit) : ()
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 254 0 254 8] ()
  axiom lemma_assign_maintains_long_are_post_unit_spec : forall v : Seq.seq (Type.creusat_trail_step), f : Type.creusat_formula_formula, a : Type.creusat_assignments_assignments, lit : Type.creusat_lit_lit . ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 255 0 255 27] Invariant0.invariant' a f) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 256 0 256 26] Invariant1.invariant' f) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 257 0 257 34] TrailInvariant0.trail_invariant v f) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 258 0 258 33] CrefsInRange0.crefs_in_range v f) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 259 0 259 39] Invariant2.invariant' lit (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 260 0 260 43] Unset0.unset (Seq.get (Model0.model a) (IndexLogic0.index_logic lit))) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 261 0 261 47] LongArePostUnitInner0.long_are_post_unit_inner v f (Model0.model a)) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 263 0 263 76] LongArePostUnitInner0.long_are_post_unit_inner v f (Seq.set (Model0.model a) (IndexLogic0.index_logic lit) (0 : uint8))) && ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 262 0 262 76] LongArePostUnitInner0.long_are_post_unit_inner v f (Seq.set (Model0.model a) (IndexLogic0.index_logic lit) (1 : uint8)))
end
module CreuSat_Logic_LogicTrail_LemmaPushMaintainsLitNotInLess_Interface
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner_Interface as LitNotInLessInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface as Invariant2
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  function lemma_push_maintains_lit_not_in_less (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (step : Type.creusat_trail_step) : ()
    
end
module CreuSat_Logic_LogicTrail_LemmaPushMaintainsLitNotInLess
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner_Interface as LitNotInLessInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface as Invariant2
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  function lemma_push_maintains_lit_not_in_less [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 274 0 274 77] (t : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) (step : Type.creusat_trail_step) : ()
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 267 0 267 8] ()
  axiom lemma_push_maintains_lit_not_in_less_spec : forall t : Type.creusat_trail_trail, f : Type.creusat_formula_formula, step : Type.creusat_trail_step . ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 268 0 268 26] Invariant0.invariant' f) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 269 0 269 27] Invariant1.invariant' t f) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 270 0 270 60] Unset0.unset (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_assignments t)) (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step)))) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 271 0 271 30] Invariant2.invariant' step f) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 272 0 272 47] LitNotInLessInner0.lit_not_in_less_inner (Model1.model (Type.creusat_trail_trail_Trail_trail t)) f) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_trail.rs" 273 0 273 59] LitNotInLessInner0.lit_not_in_less_inner (Seq.snoc (Model1.model (Type.creusat_trail_trail_Trail_trail t)) step) f)
end
module CreuSat_Logic_LogicUtil_LastIdx_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  function last_idx (s : Seq.seq t) : int
end
module CreuSat_Logic_LogicUtil_LastIdx
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  function last_idx [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 77 0 77 36] (s : Seq.seq t) : int =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 78 4 78 27] Seq.length s - 1
  axiom last_idx_spec : forall s : Seq.seq t . ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 76 0 76 24] Seq.length s > 0) -> true
end
module CreuSat_Logic_LogicUtil_LastElem_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  function last_elem (s : Seq.seq t) : t
end
module CreuSat_Logic_LogicUtil_LastElem
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  function last_elem [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 84 0 84 35] (s : Seq.seq t) : t =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 85 4 85 30] Seq.get s (Seq.length s - 1)
  axiom last_elem_spec : forall s : Seq.seq t . ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 83 0 83 24] Seq.length s > 0) -> true
end
module CreuSat_Logic_LogicUtil_LemmaPopMaintainsSorted_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = usize, axiom .
  clone CreuSat_Logic_LogicUtil_Sorted_Interface as Sorted0
  function lemma_pop_maintains_sorted (s : Seq.seq usize) : ()
end
module CreuSat_Logic_LogicUtil_LemmaPopMaintainsSorted
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  clone CreuSat_Logic_LogicUtil_Pop_Interface as Pop0 with type t = usize, axiom .
  clone CreuSat_Logic_LogicUtil_Sorted_Interface as Sorted0
  function lemma_pop_maintains_sorted [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 93 0 93 48] (s : Seq.seq usize) : ()
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 88 0 88 8] ()
  axiom lemma_pop_maintains_sorted_spec : forall s : Seq.seq usize . ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 90 0 90 24] Seq.length s > 0) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 91 0 91 22] Sorted0.sorted s) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_util.rs" 92 0 92 26] Sorted0.sorted (Pop0.pop s))
end
module CreuSat_Logic_LogicWatches_WatchValid_Interface
  use seq.Seq
  use Type
  predicate watch_valid (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula)
end
module CreuSat_Logic_LogicWatches_WatchValid
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  predicate watch_valid [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 25 0 25 55] (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 26 4 31 5] forall j : (int) . 0 <= j /\ j < Seq.length w -> UInt64.to_int (Type.creusat_watches_watcher_Watcher_cref (Seq.get w j)) < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) /\ Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int (Type.creusat_watches_watcher_Watcher_cref (Seq.get w j))))) > 1 /\ IndexLogic0.index_logic (Type.creusat_watches_watcher_Watcher_blocker (Seq.get w j)) < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)
end
module CreuSat_Logic_LogicWatches_WatchesCrefsInRange_Interface
  use seq.Seq
  use Type
  predicate watches_crefs_in_range (w : Seq.seq (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global))) (f : Type.creusat_formula_formula)
    
end
module CreuSat_Logic_LogicWatches_WatchesCrefsInRange
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone CreuSat_Logic_LogicWatches_WatcherCrefsInRange_Interface as WatcherCrefsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, axiom .
  predicate watches_crefs_in_range [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 43 0 43 71] (w : Seq.seq (Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global))) (f : Type.creusat_formula_formula)
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 44 4 47 5] forall i : (int) . 0 <= i /\ i < Seq.length w -> WatcherCrefsInRange0.watcher_crefs_in_range (Model0.model (Seq.get w i)) f
end
module CreuSat_Logic_LogicWatches_LemmaPushMaintainsWatcherInvariant_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicWatches_WatcherCrefsInRange_Interface as WatcherCrefsInRange0
  function lemma_push_maintains_watcher_invariant (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula) (o : Type.creusat_watches_watcher) : ()
    
end
module CreuSat_Logic_LogicWatches_LemmaPushMaintainsWatcherInvariant
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicWatches_WatcherCrefsInRange_Interface as WatcherCrefsInRange0
  function lemma_push_maintains_watcher_invariant [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 62 0 62 86] (w : Seq.seq (Type.creusat_watches_watcher)) (f : Type.creusat_formula_formula) (o : Type.creusat_watches_watcher) : ()
    
   =
    [#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 57 0 57 8] ()
  axiom lemma_push_maintains_watcher_invariant_spec : forall w : Seq.seq (Type.creusat_watches_watcher), f : Type.creusat_formula_formula, o : Type.creusat_watches_watcher . ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 59 0 59 41] WatcherCrefsInRange0.watcher_crefs_in_range w f) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 60 0 60 41] UInt64.to_int (Type.creusat_watches_watcher_Watcher_cref o) < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))) -> ([#"/Users/xavier/Code/sat/CreuSAT/src/logic/logic_watches.rs" 61 0 61 48] WatcherCrefsInRange0.watcher_crefs_in_range (Seq.snoc w o) f)
end
module CreuSat_Solver_GetAssertingLevel_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy1
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreuSat_Logic_LogicClause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val get_asserting_level [@cfg:stackify] (clause : Type.creusat_clause_clause) (trail : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) : (usize, usize)
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 32 0 32 26] Invariant0.invariant' f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 33 0 33 32] Invariant1.invariant' trail f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 34 0 34 49] EquisatExtensionInner0.equisat_extension_inner clause (Model0.model f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 35 0 35 42] Invariant2.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 36 0 36 32] Seq.length (Model1.model clause) > 1}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 37 0 37 54] VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 38 0 38 48] NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 39 0 39 39] UInt64.to_int (let (a, _) = result in a) < Seq.length (Model1.model clause) }
    
end
module CreuSat_Solver_GetAssertingLevel
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model5 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant6 with function Model0.model = Model6.model,
  function Model1.model = Model5.model
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with function Model0.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate SatInner0.sat_inner = SatInner0.sat_inner,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = uint8, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model6.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant3 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant5 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model7 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model6.model,
  function Model1.model = Model5.model, predicate Sat0.sat = Sat0.sat
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model3.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model4.model,
  function Model1.model = Model7.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model4.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model4.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant4 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy1
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecisionMirror as InvariantNoDecisionMirror0 with function Model0.model = Model7.model,
  function Model1.model = Model4.model, predicate Invariant0.invariant' = Invariant5.invariant',
  function Model2.model = Model3.model, function Model3.model = Model6.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Sat0.sat = Sat0.sat, predicate Sorted0.sorted = Sorted0.sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model0.model = Model4.model,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant, function Model1.model = Model3.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model7.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat, axiom .
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant2 with function Model0.model = Model5.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Model0.model = Model5.model
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model2 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror as InvariantMirror0 with function Model0.model = Model6.model,
  predicate Invariant0.invariant' = Invariant2.invariant', function Model1.model = Model5.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model5.model
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model3.model, function Model1.model = Model4.model,
  predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  function Model0.model = Model2.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy2 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = usize
  clone CreuSat_Clause_Impl3_Len_Interface as Len0 with function Model0.model = Model1.model
  clone Alloc_Vec_Impl16_Index_Interface as Index2 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreuSat_Lit_Impl1_Index_Interface as Index1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Clause_Impl0_Index_Interface as Index0 with function Model0.model = Model1.model
  let rec cfg get_asserting_level [@cfg:stackify] [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 40 0 40 89] (clause : Type.creusat_clause_clause) (trail : Type.creusat_trail_trail) (f : Type.creusat_formula_formula) : (usize, usize)
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 32 0 32 26] Invariant0.invariant' f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 33 0 33 32] Invariant1.invariant' trail f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 34 0 34 49] EquisatExtensionInner0.equisat_extension_inner clause (Model0.model f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 35 0 35 42] Invariant2.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 36 0 36 32] Seq.length (Model1.model clause) > 1}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 37 0 37 54] VarsInRangeInner0.vars_in_range_inner (Model1.model clause) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 38 0 38 48] NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model1.model clause)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 39 0 39 39] UInt64.to_int (let (a, _) = result in a) < Seq.length (Model1.model clause) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (usize, usize);
  var clause_1 : Type.creusat_clause_clause;
  var trail_2 : Type.creusat_trail_trail;
  var f_3 : Type.creusat_formula_formula;
  var max_i_4 : usize;
  var max_level_5 : usize;
  var _6 : usize;
  var _7 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _8 : usize;
  var _9 : Type.creusat_lit_lit;
  var _10 : Type.creusat_lit_lit;
  var _11 : Type.creusat_clause_clause;
  var i_12 : usize;
  var _13 : ();
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Type.creusat_clause_clause;
  var level_19 : usize;
  var _20 : usize;
  var _21 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _22 : usize;
  var _23 : Type.creusat_lit_lit;
  var _24 : Type.creusat_lit_lit;
  var _25 : Type.creusat_clause_clause;
  var _26 : usize;
  var _27 : ();
  var _28 : bool;
  var _29 : usize;
  var _30 : usize;
  var _31 : usize;
  var _32 : usize;
  var _33 : ();
  var _34 : ();
  var _35 : ();
  var _36 : usize;
  var _37 : usize;
  {
    clause_1 <- clause;
    trail_2 <- trail;
    f_3 <- f;
    goto BB0
  }
  BB0 {
    max_i_4 <- (1 : usize);
    _7 <- Type.creusat_trail_trail_Trail_lit_to_level trail_2;
    _11 <- clause_1;
    _10 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 42 43 42 52] Index0.index _11 (1 : usize));
    goto BB1
  }
  BB1 {
    _9 <- _10;
    _8 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 42 43 42 60] Index1.index _9);
    goto BB2
  }
  BB2 {
    _6 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 42 24 42 61] Index2.index _7 _8);
    goto BB3
  }
  BB3 {
    max_level_5 <- _6;
    i_12 <- (2 : usize);
    goto BB4
  }
  BB4 {
    invariant max_i_less { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 44 4 44 54] UInt64.to_int max_i_4 < Seq.length (Model1.model clause_1) };
    _16 <- i_12;
    _18 <- clause_1;
    _17 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 45 14 45 26] Len0.len _18);
    goto BB5
  }
  BB5 {
    _15 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 45 10 45 26] _16 < _17);
    switch (_15)
      | False -> goto BB13
      | _ -> goto BB6
      end
  }
  BB6 {
    _21 <- Type.creusat_trail_trail_Trail_lit_to_level trail_2;
    _25 <- clause_1;
    _26 <- i_12;
    _24 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 46 39 46 48] Index0.index _25 _26);
    goto BB7
  }
  BB7 {
    _23 <- _24;
    _22 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 46 39 46 56] Index1.index _23);
    goto BB8
  }
  BB8 {
    _20 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 46 20 46 57] Index2.index _21 _22);
    goto BB9
  }
  BB9 {
    level_19 <- _20;
    _29 <- level_19;
    _30 <- max_level_5;
    _28 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 47 11 47 28] _29 > _30);
    switch (_28)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    _31 <- level_19;
    max_level_5 <- _31;
    _32 <- i_12;
    max_i_4 <- _32;
    _27 <- ();
    goto BB12
  }
  BB11 {
    _27 <- ();
    goto BB12
  }
  BB12 {
    i_12 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 51 8 51 14] i_12 + (1 : usize));
    _14 <- ();
    goto BB4
  }
  BB13 {
    _13 <- ();
    _36 <- max_i_4;
    _37 <- max_level_5;
    _0 <- (_36, _37);
    return _0
  }
  
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreuSat_Assignments_Impl1
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Assignments_Impl0_Output as Output0
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreuSat_Assignments_Impl1_IndexMut_Interface as IndexMut0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusat_assignments_assignments,
  type idx = usize, val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
end
module CreuSat_Trail_Impl0_Backstep_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecisionMirror_Interface as InvariantNoDecisionMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision_Interface as InvariantNoDecision0 with predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror,
  axiom .
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val backstep [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (f : Type.creusat_formula_formula) : usize
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 58 4 58 30] Invariant0.invariant' f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 59 4 59 32] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) > 0}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 60 4 60 54] InvariantNoDecision0.invariant_no_decision ( * self) f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 61 4 61 77] LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 60 4 60 54] InvariantNoDecision0.invariant_no_decision ( ^ self) f }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 62 4 62 86] LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 63 4 63 37] UInt64.to_int result < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) }
    
end
module CreuSat_Trail_Impl0_BacktrackTo_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  val backtrack_to [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (level : usize) (f : Type.creusat_formula_formula) (d : borrowed (Type.creusat_decision_decisions)) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 113 4 113 49] Seq.length (Model0.model (Type.creusat_trail_trail_Trail_decisions ( * self))) > UInt64.to_int level}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 114 4 114 30] Invariant0.invariant' f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 115 4 115 42] Invariant1.invariant' ( * self) f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 116 4 116 48] Invariant2.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 118 4 118 77] LongArePostUnitInner0.long_are_post_unit_inner (Model1.model (Type.creusat_trail_trail_Trail_trail ( * self))) f (Model2.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 115 4 115 42] Invariant1.invariant' ( ^ self) f }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 116 4 116 48] Invariant2.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 119 4 119 86] LongArePostUnitInner0.long_are_post_unit_inner (Model1.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) f (Model2.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    
end
module CreuSat_Trail_Impl0_BacktrackSafe_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val backtrack_safe [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (level : usize) (f : Type.creusat_formula_formula) (d : borrowed (Type.creusat_decision_decisions)) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 101 4 101 30] Invariant0.invariant' f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 102 4 102 42] Invariant1.invariant' ( * self) f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 103 4 103 48] Invariant2.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 104 4 104 77] LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( * self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 102 4 102 42] Invariant1.invariant' ( ^ self) f }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 103 4 103 48] Invariant2.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 105 4 105 86] LongArePostUnitInner0.long_are_post_unit_inner (Model0.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) f (Model1.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    
end
module CreuSat_Trail_Impl0_EnqAssignment_Interface
  use mach.int.UInt64
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToLit_Interface as ClausePostWithRegardsToLit0
  clone CreuSat_Logic_LogicLit_Impl1_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model3 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_Logic_Unset_Interface as Unset1
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreuSat_Logic_LogicLit_Impl1_IdxInTrail_Interface as IdxInTrail0
  clone CreuSat_Logic_LogicLit_Impl1_Unsat_Interface as Unsat0
  clone CreuSat_Logic_LogicLit_Impl1_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant_Interface as Invariant3
  clone CreuSat_Logic_LogicLit_Impl1_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant1 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  val enq_assignment [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (step : Type.creusat_trail_step) (_f : Type.creusat_formula_formula) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 211 4 211 43] Invariant0.invariant' ( * self) _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 212 4 212 31] Invariant1.invariant' _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 213 4 213 49] Invariant2.invariant' (Type.creusat_trail_step_Step_lit step) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 214 4 214 36] Invariant3.invariant' step _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 215 4 228 7] match (Type.creusat_trail_step_Step_reason step) with
      | Type.CreuSat_Trail_Reason_Long cref -> UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses _f)) /\ Unset0.unset (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int cref))) 0) (Type.creusat_trail_trail_Trail_assignments ( * self)) /\ (forall i : (int) . 1 <= i /\ i < Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int cref))) -> Unsat0.unsat (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int cref))) i) (Type.creusat_trail_trail_Trail_assignments ( * self))) /\ Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int cref))) 0 = Type.creusat_trail_step_Step_lit step
      | Type.CreuSat_Trail_Reason_Unit cref -> UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses _f)) /\ Type.creusat_trail_step_Step_lit step = Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int cref))) 0
      | _ -> true
      end}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 229 4 229 51] not IdxInTrail0.idx_in_trail (Type.creusat_trail_step_Step_lit step) (Type.creusat_trail_trail_Trail_trail ( * self))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 230 4 230 67] Unset1.unset (Seq.get (Model2.model (Type.creusat_trail_trail_Trail_assignments ( * self))) (IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 231 4 231 78] LongArePostUnitInner0.long_are_post_unit_inner (Model3.model (Type.creusat_trail_trail_Trail_trail ( * self))) _f (Model2.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 211 4 211 43] Invariant0.invariant' ( ^ self) _f }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 232 4 233 94] forall j : (int) . 0 <= j /\ j < Seq.length (Model2.model (Type.creusat_trail_trail_Trail_assignments ( * self))) /\ j <> IndexLogic0.index_logic (Type.creusat_trail_step_Step_lit step) -> Seq.get (Model2.model (Type.creusat_trail_trail_Trail_assignments ( * self))) j = Seq.get (Model2.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) j }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 234 4 234 49] Sat0.sat (Type.creusat_trail_step_Step_lit step) (Type.creusat_trail_trail_Trail_assignments ( ^ self)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 235 4 235 87] LongArePostUnitInner0.long_are_post_unit_inner (Model3.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) _f (Model2.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 236 4 239 7] match (Type.creusat_trail_step_Step_reason step) with
      | Type.CreuSat_Trail_Reason_Long k -> ClausePostWithRegardsToLit0.clause_post_with_regards_to_lit (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses _f)) (UInt64.to_int k)) (Type.creusat_trail_trail_Trail_assignments ( ^ self)) (Type.creusat_trail_step_Step_lit step)
      | _ -> true
      end }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 240 4 240 65] Seq.length (Model3.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) = 1 + Seq.length (Model3.model (Type.creusat_trail_trail_Trail_trail ( * self))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 241 4 241 51] Type.creusat_trail_trail_Trail_decisions ( ^ self) = Type.creusat_trail_trail_Trail_decisions ( * self) }
    
end
module CreuSat_Solver_Impl0_HandleLongClause_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner_Interface as EquisatExtensionInner0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant4
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant3
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val handle_long_clause [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (t : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) (d : borrowed (Type.creusat_decision_decisions)) (clause : Type.creusat_clause_clause) (s_idx : usize) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 106 4 106 37] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 107 4 107 42] Invariant1.invariant' ( * t) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 108 4 108 42] Invariant2.invariant' ( * w) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 109 4 109 48] Invariant3.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 110 4 110 44] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 111 4 111 46] Invariant4.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 112 4 112 52] EquisatExtensionInner0.equisat_extension_inner clause (Model0.model f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 113 4 113 36] Seq.length (Model1.model clause) > 1}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 114 4 114 41] UInt64.to_int s_idx < Seq.length (Model1.model clause)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 106 4 106 37] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 107 4 107 42] Invariant1.invariant' ( ^ t) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 108 4 108 42] Invariant2.invariant' ( ^ w) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 109 4 109 48] Invariant3.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 115 4 115 45] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 116 4 116 29] Equisat0.equisat ( * f) ( ^ f) }
    
end
module CreuSat_Solver_Impl0_HandleLongClause
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner2 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant8 with function Model0.model = Model8.model,
  function Model1.model = Model1.model
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant7 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate SatInner0.sat_inner = SatInner1.sat_inner,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model11 with type t = uint8, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model8.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant7.invariant',
  predicate Invariant1.invariant' = Invariant8.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicFormula_Impl2_SatInner as SatInner0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant7.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model9 with function Model0.model = Model11.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model9.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model8.model,
  function Model1.model = Model1.model, predicate Sat0.sat = Sat0.sat
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model3.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model4.model,
  function Model1.model = Model9.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model8.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model4.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model4.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant5 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicFormula_Impl2_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model10.model,
  function Model1.model = Model8.model, function Model2.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecisionMirror as InvariantNoDecisionMirror0 with function Model0.model = Model9.model,
  function Model1.model = Model4.model, predicate Invariant0.invariant' = Invariant6.invariant',
  function Model2.model = Model3.model, function Model3.model = Model8.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Sat0.sat = Sat0.sat, predicate Sorted0.sorted = Sorted0.sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model0.model = Model4.model,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant, function Model1.model = Model3.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model9.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat, axiom .
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model1.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model2 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror as InvariantMirror0 with function Model0.model = Model8.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model1.model
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant3 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant2 with function Model0.model = Model5.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model3.model, function Model1.model = Model4.model,
  predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  function Model0.model = Model2.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreuSat_Logic_LogicClause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsetInner as UnsetInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_Impl2_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, function Model0.model = Model1.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToLit as ClausePostWithRegardsToLit0 with function Model0.model = Model9.model,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicLit_Impl1_IdxInTrail as IdxInTrail0 with function Model0.model = Model4.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Unsat as Unsat0 with function Model0.model = Model9.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicLit_Impl1_Unset as Unset1 with function Model0.model = Model9.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unit as Unit0 with function Model0.model = Model9.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve7 with type t = usize
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model14 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model13 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model2.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreusotContracts_Logic_Model_Impl1_Model as Model12 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.creusat_solver_solver
  clone CreuSat_Solver_Impl0_IncreaseNumConflicts_Interface as IncreaseNumConflicts0
  clone CreuSat_Solver_Impl0_IncreaseNumLemmas_Interface as IncreaseNumLemmas0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.creusat_trail_trail
  clone CreuSat_Trail_Impl0_EnqAssignment_Interface as EnqAssignment0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant0.invariant', predicate Invariant2.invariant' = Invariant7.invariant',
  predicate Invariant3.invariant' = Invariant6.invariant', function Model0.model = Model8.model,
  function Model1.model = Model1.model, predicate Unset0.unset = Unset1.unset, predicate Unsat0.unsat = Unsat0.unsat,
  predicate IdxInTrail0.idx_in_trail = IdxInTrail0.idx_in_trail, function Model2.model = Model9.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Unset1.unset = Unset0.unset,
  function Model3.model = Model4.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Sat0.sat = Sat0.sat,
  predicate ClausePostWithRegardsToLit0.clause_post_with_regards_to_lit = ClausePostWithRegardsToLit0.clause_post_with_regards_to_lit,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusat_formula_formula
  clone CreuSat_Clause_Impl3_UnitAndUnset_Interface as UnitAndUnset0 with function Model0.model = Model14.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal,
  predicate Invariant0.invariant' = Invariant5.invariant', predicate Unit0.unit = Unit0.unit,
  predicate Unset0.unset = Unset1.unset
  clone CreuSat_Clause_Impl0_Index_Interface as Index1 with function Model0.model = Model14.model
  clone CreuSat_Formula_Impl0_Index_Interface as Index0 with function Model0.model = Model13.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.creusat_decision_decisions
  clone CreuSat_Trail_Impl0_BacktrackSafe_Interface as BacktrackSafe0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant3.invariant',
  function Model0.model = Model4.model, function Model1.model = Model9.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Util_UpdateSlow_Interface as UpdateSlow0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = usize
  clone CreuSat_Util_UpdateFast_Interface as UpdateFast0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_watches_watches
  clone CreuSat_Formula_Impl2_AddClause_Interface as AddClause0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  function Model0.model = Model1.model, predicate Invariant3.invariant' = Invariant4.invariant',
  function Model1.model = Model0.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  predicate Equisat0.equisat = Equisat0.equisat, function Model2.model = Model8.model,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Clause_Impl3_CalcLbd_Interface as CalcLbd0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant4.invariant'
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = usize, type t2 = usize,
  predicate Resolve0.resolve = Resolve7.resolve, predicate Resolve1.resolve = Resolve7.resolve
  clone CreuSat_Solver_GetAssertingLevel_Interface as GetAssertingLevel0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', function Model0.model = Model13.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  predicate Invariant2.invariant' = Invariant4.invariant', function Model1.model = Model14.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Clause_Impl3_SwapLitsInClause_Interface as SwapLitsInClause0 with function Model0.model = Model12.model,
  predicate Invariant0.invariant' = Invariant4.invariant',
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension,
  function Model1.model = Model1.model
  let rec cfg handle_long_clause [@cfg:stackify] [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 117 4 119 5] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (t : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) (d : borrowed (Type.creusat_decision_decisions)) (clause : Type.creusat_clause_clause) (s_idx : usize) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 106 4 106 37] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 107 4 107 42] Invariant1.invariant' ( * t) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 108 4 108 42] Invariant2.invariant' ( * w) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 109 4 109 48] Invariant3.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 110 4 110 44] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 111 4 111 46] Invariant4.invariant' clause (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 112 4 112 52] EquisatExtensionInner0.equisat_extension_inner clause (Model0.model f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 113 4 113 36] Seq.length (Model1.model clause) > 1}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 114 4 114 41] UInt64.to_int s_idx < Seq.length (Model1.model clause)}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 106 4 106 37] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 107 4 107 42] Invariant1.invariant' ( ^ t) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 108 4 108 42] Invariant2.invariant' ( ^ w) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 109 4 109 48] Invariant3.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 115 4 115 45] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 116 4 116 29] Equisat0.equisat ( * f) ( ^ f) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.creusat_solver_solver);
  var f_2 : borrowed (Type.creusat_formula_formula);
  var t_3 : borrowed (Type.creusat_trail_trail);
  var w_4 : borrowed (Type.creusat_watches_watches);
  var d_5 : borrowed (Type.creusat_decision_decisions);
  var clause_6 : Type.creusat_clause_clause;
  var s_idx_7 : usize;
  var _8 : ();
  var _9 : borrowed (Type.creusat_clause_clause);
  var _10 : Type.creusat_formula_formula;
  var _11 : usize;
  var idx_12 : usize;
  var level_13 : usize;
  var _14 : (usize, usize);
  var _15 : Type.creusat_clause_clause;
  var _16 : Type.creusat_clause_clause;
  var _17 : Type.creusat_trail_trail;
  var _18 : Type.creusat_formula_formula;
  var _19 : ();
  var _20 : borrowed (Type.creusat_clause_clause);
  var _21 : Type.creusat_formula_formula;
  var _22 : usize;
  var lbd_23 : usize;
  var _24 : Type.creusat_clause_clause;
  var _25 : Type.creusat_formula_formula;
  var _26 : borrowed (Type.creusat_solver_solver);
  var _27 : Type.creusat_trail_trail;
  var cref_28 : usize;
  var _29 : borrowed (Type.creusat_formula_formula);
  var _30 : Type.creusat_clause_clause;
  var _31 : borrowed (Type.creusat_watches_watches);
  var _32 : Type.creusat_trail_trail;
  var _33 : ();
  var _34 : borrowed usize;
  var _35 : borrowed usize;
  var _36 : usize;
  var _37 : ();
  var _38 : borrowed usize;
  var _39 : borrowed usize;
  var _40 : usize;
  var _41 : ();
  var _42 : borrowed (Type.creusat_trail_trail);
  var _43 : usize;
  var _44 : Type.creusat_formula_formula;
  var _45 : borrowed (Type.creusat_decision_decisions);
  var lit_46 : Type.creusat_lit_lit;
  var _47 : Type.creusat_lit_lit;
  var _48 : Type.creusat_clause_clause;
  var _49 : Type.creusat_clause_clause;
  var _50 : Type.creusat_formula_formula;
  var _51 : usize;
  var step_52 : Type.creusat_trail_step;
  var _53 : Type.creusat_lit_lit;
  var _54 : usize;
  var _55 : Type.creusat_trail_reason;
  var _56 : usize;
  var _57 : ();
  var _58 : bool;
  var _59 : Type.creusat_clause_clause;
  var _60 : Type.creusat_clause_clause;
  var _61 : Type.creusat_formula_formula;
  var _62 : usize;
  var _63 : Type.creusat_assignments_assignments;
  var _64 : Type.creusat_assignments_assignments;
  var _65 : Type.creusat_formula_formula;
  var _66 : ();
  var _67 : borrowed (Type.creusat_trail_trail);
  var _68 : Type.creusat_trail_step;
  var _69 : Type.creusat_formula_formula;
  var _70 : ();
  var _71 : borrowed (Type.creusat_solver_solver);
  var _72 : ();
  var _73 : borrowed (Type.creusat_solver_solver);
  {
    self_1 <- self;
    f_2 <- f;
    t_3 <- t;
    w_4 <- w;
    d_5 <- d;
    clause_6 <- clause;
    s_idx_7 <- s_idx;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    _9 <- borrow_mut clause_6;
    clause_6 <-  ^ _9;
    _10 <-  * f_2;
    _11 <- s_idx_7;
    _8 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 120 8 120 47] SwapLitsInClause0.swap_lits_in_clause _9 _10 _11 (0 : usize));
    goto BB5
  }
  BB5 {
    _16 <- clause_6;
    _15 <- _16;
    _17 <-  * t_3;
    _18 <-  * f_2;
    _14 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 121 27 121 61] GetAssertingLevel0.get_asserting_level _15 _17 _18);
    goto BB6
  }
  BB6 {
    idx_12 <- (let (a, _) = _14 in a);
    level_13 <- (let (_, a) = _14 in a);
    assume { Resolve0.resolve _14 };
    _20 <- borrow_mut clause_6;
    clause_6 <-  ^ _20;
    _21 <-  * f_2;
    _22 <- idx_12;
    _19 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 122 8 122 45] SwapLitsInClause0.swap_lits_in_clause _20 _21 _22 (1 : usize));
    goto BB7
  }
  BB7 {
    _24 <- clause_6;
    _25 <-  * f_2;
    _26 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _26) };
    _27 <-  * t_3;
    lbd_23 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 125 18 125 45] CalcLbd0.calc_lbd _24 _25 _26 _27);
    goto BB8
  }
  BB8 {
    _29 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _29) };
    _30 <- clause_6;
    _31 <- borrow_mut ( * w_4);
    w_4 <- { w_4 with current = ( ^ _31) };
    _32 <-  * t_3;
    cref_28 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 126 19 126 45] AddClause0.add_clause _29 _30 _31 _32);
    goto BB9
  }
  BB9 {
    assume { Resolve1.resolve w_4 };
    _35 <- borrow_mut (Type.creusat_solver_solver_Solver_fast ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Solver_Solver a b c d e f g h =  * self_1 in Type.CreuSat_Solver_Solver a b c d e ( ^ _35) g h) };
    _34 <- borrow_mut ( * _35);
    _35 <- { _35 with current = ( ^ _34) };
    _36 <- lbd_23;
    _33 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 127 8 127 40] UpdateFast0.update_fast _34 _36);
    goto BB10
  }
  BB10 {
    assume { Resolve2.resolve _35 };
    _39 <- borrow_mut (Type.creusat_solver_solver_Solver_slow ( * self_1));
    self_1 <- { self_1 with current = (let Type.CreuSat_Solver_Solver a b c d e f g h =  * self_1 in Type.CreuSat_Solver_Solver a b c d e f ( ^ _39) h) };
    _38 <- borrow_mut ( * _39);
    _39 <- { _39 with current = ( ^ _38) };
    _40 <- lbd_23;
    _37 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 128 8 128 40] UpdateSlow0.update_slow _38 _40);
    goto BB11
  }
  BB11 {
    assume { Resolve2.resolve _39 };
    _42 <- borrow_mut ( * t_3);
    t_3 <- { t_3 with current = ( ^ _42) };
    _43 <- level_13;
    _44 <-  * f_2;
    _45 <- borrow_mut ( * d_5);
    d_5 <- { d_5 with current = ( ^ _45) };
    _41 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 131 8 131 37] BacktrackSafe0.backtrack_safe _42 _43 _44 _45);
    goto BB12
  }
  BB12 {
    assume { Resolve3.resolve d_5 };
    _50 <-  * f_2;
    _51 <- cref_28;
    _49 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 133 18 133 25] Index0.index _50 _51);
    goto BB13
  }
  BB13 {
    _48 <- _49;
    _47 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 133 18 133 28] Index1.index _48 (0 : usize));
    goto BB14
  }
  BB14 {
    lit_46 <- _47;
    _53 <- lit_46;
    _54 <- level_13;
    _56 <- cref_28;
    _55 <- Type.CreuSat_Trail_Reason_Long _56;
    step_52 <- Type.CreuSat_Trail_Step _53 _54 _55;
    _61 <-  * f_2;
    _62 <- cref_28;
    _60 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 140 11 140 18] Index0.index _61 _62);
    goto BB15
  }
  BB15 {
    _59 <- _60;
    _64 <- Type.creusat_trail_trail_Trail_assignments ( * t_3);
    _63 <- _64;
    _65 <-  * f_2;
    _58 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 140 11 140 52] UnitAndUnset0.unit_and_unset _59 _63 _65);
    goto BB16
  }
  BB16 {
    switch (_58)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB17 {
    _67 <- borrow_mut ( * t_3);
    t_3 <- { t_3 with current = ( ^ _67) };
    _68 <- step_52;
    _69 <-  * f_2;
    assume { Resolve4.resolve f_2 };
    _66 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 141 12 141 37] EnqAssignment0.enq_assignment _67 _68 _69);
    goto BB18
  }
  BB18 {
    assume { Resolve5.resolve t_3 };
    _57 <- ();
    goto BB20
  }
  BB19 {
    assume { Resolve4.resolve f_2 };
    assume { Resolve5.resolve t_3 };
    _57 <- ();
    goto BB20
  }
  BB20 {
    _71 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _71) };
    _70 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 144 8 144 34] IncreaseNumLemmas0.increase_num_lemmas _71);
    goto BB21
  }
  BB21 {
    _73 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _73) };
    _72 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 145 8 145 37] IncreaseNumConflicts0.increase_num_conflicts _73);
    goto BB22
  }
  BB22 {
    assume { Resolve6.resolve self_1 };
    _0 <- ();
    goto BB23
  }
  BB23 {
    return _0
  }
  
end
module CreuSat_Trail_Impl0_LearnUnit_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicLit_Impl1_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model3
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicClause_Impl2_Invariant_Interface as Invariant3
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant2 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  val learn_unit [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (cref : usize) (f : Type.creusat_formula_formula) (d : borrowed (Type.creusat_decision_decisions)) : Type.core_result_result () ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 302 4 302 42] Invariant0.invariant' ( * self) f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 303 4 303 48] Invariant1.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 304 4 304 30] Invariant2.invariant' f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 305 4 305 43] UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 306 4 306 50] Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) = 1}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 307 4 307 59] Invariant3.invariant' (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 313 4 313 77] LongArePostUnitInner0.long_are_post_unit_inner (Model2.model (Type.creusat_trail_trail_Trail_trail ( * self))) f (Model3.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 302 4 302 42] Invariant0.invariant' ( ^ self) f }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 303 4 303 48] Invariant1.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 310 4 312 70] match (result) with
      | Type.Core_Result_Result_Err _ -> true
      | Type.Core_Result_Result_Ok _ -> Sat0.sat (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) 0) (Type.creusat_trail_trail_Trail_assignments ( ^ self))
      end }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 314 4 314 86] LongArePostUnitInner0.long_are_post_unit_inner (Model2.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) f (Model3.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    
end
module CreuSat_Solver_Impl0_HandleConflict_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant3
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val handle_conflict [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (t : borrowed (Type.creusat_trail_trail)) (cref : usize) (w : borrowed (Type.creusat_watches_watches)) (d : borrowed (Type.creusat_decision_decisions)) : Type.core_option_option bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 149 4 149 37] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 150 4 150 42] Invariant1.invariant' ( * t) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 151 4 151 42] Invariant2.invariant' ( * w) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 152 4 152 48] Invariant3.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 153 4 153 44] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 154 4 154 43] UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 155 4 155 57] Unsat0.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref)) (Type.creusat_trail_trail_Trail_assignments ( * t))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 149 4 149 37] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 150 4 150 42] Invariant1.invariant' ( ^ t) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 151 4 151 42] Invariant2.invariant' ( ^ w) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 152 4 152 48] Invariant3.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 156 4 156 45] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 157 4 157 29] Equisat0.equisat ( * f) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 158 4 162 7] match (result) with
      | Type.Core_Option_Option_Some (False) -> NotSatisfiable0.not_satisfiable ( ^ f)
      | Type.Core_Option_Option_Some (True) -> true
      | Type.Core_Option_Option_None -> true
      end }
    
end
module CreuSat_Solver_Impl0_HandleConflict
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model7 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner2 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant7 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant8 with function Model0.model = Model0.model,
  function Model1.model = Model7.model
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate SatInner0.sat_inner = SatInner1.sat_inner,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model0.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant7.invariant',
  predicate Invariant1.invariant' = Invariant8.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicFormula_Impl2_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = uint8, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model6 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model0.model,
  function Model1.model = Model7.model, predicate Sat0.sat = Sat0.sat
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model2.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model3.model,
  function Model1.model = Model6.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model0.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model3.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model3.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant5 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model7.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model1 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model1.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreuSat_Logic_LogicFormula_Impl2_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner0 with function Model0.model = Model7.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model8.model,
  function Model1.model = Model0.model, function Model2.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecisionMirror as InvariantNoDecisionMirror0 with function Model0.model = Model6.model,
  function Model1.model = Model3.model, predicate Invariant0.invariant' = Invariant6.invariant',
  function Model2.model = Model2.model, function Model3.model = Model0.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Sat0.sat = Sat0.sat, predicate Sorted0.sorted = Sorted0.sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model0.model = Model3.model,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant, function Model1.model = Model2.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model6.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat, axiom .
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model7.model
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror as InvariantMirror0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model7.model
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model7.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicClause_Impl2_Unsat as Unsat0 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant3 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant2 with function Model0.model = Model4.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model2.model, function Model1.model = Model3.model,
  predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  function Model0.model = Model1.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  use mach.int.Int64
  clone CreuSat_Logic_LogicClause_Impl2_Equals as Equals0 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicFormula_Equisat as Equisat1 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicFormula_Compatible as Compatible0 with predicate Equals0.equals = Equals0.equals
  clone CreuSat_Logic_LogicFormula_EquisatCompatibleInner as EquisatCompatibleInner0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Equisat0.equisat = Equisat1.equisat
  clone CreuSat_Logic_LogicFormula_Impl2_EquisatCompatible as EquisatCompatible0 with function Model0.model = Model1.model,
  predicate EquisatCompatibleInner0.equisat_compatible_inner = EquisatCompatibleInner0.equisat_compatible_inner
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model12 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model11 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreuSat_Formula_Impl2_SimplifyFormula_Interface as SimplifyFormula0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  predicate Equisat0.equisat = Equisat0.equisat,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Formula_Impl2_ReduceDb_Interface as ReduceDb0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  predicate Equisat0.equisat = Equisat0.equisat,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Trail_Impl0_LearnUnit_Interface as LearnUnit0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant', predicate Invariant2.invariant' = Invariant0.invariant',
  function Model0.model = Model0.model, function Model1.model = Model7.model,
  predicate Invariant3.invariant' = Invariant4.invariant', function Model2.model = Model3.model,
  function Model3.model = Model6.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Sat0.sat = Sat0.sat, predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Formula_Impl2_AddUnit_Interface as AddUnit0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', function Model0.model = Model7.model,
  predicate Invariant2.invariant' = Invariant4.invariant',
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  function Model1.model = Model12.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  predicate EquisatCompatible0.equisat_compatible = EquisatCompatible0.equisat_compatible,
  predicate Equisat0.equisat = Equisat0.equisat, function Model2.model = Model0.model,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Solver_Impl0_HandleLongClause_Interface as HandleLongClause0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate Invariant3.invariant' = Invariant3.invariant', predicate Invariant4.invariant' = Invariant4.invariant',
  function Model0.model = Model12.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  function Model1.model = Model7.model, predicate Equisat0.equisat = Equisat0.equisat,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Trail_Impl0_BacktrackSafe_Interface as BacktrackSafe0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant3.invariant',
  function Model0.model = Model3.model, function Model1.model = Model6.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Formula_Impl2_AddClause_Interface as AddClause0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  function Model0.model = Model7.model, predicate Invariant3.invariant' = Invariant4.invariant',
  function Model1.model = Model12.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  predicate Equisat0.equisat = Equisat0.equisat, function Model2.model = Model0.model,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusat_decision_decisions
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_solver_solver
  clone CreuSat_ConflictAnalysis_AnalyzeConflict_Interface as AnalyzeConflict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', function Model0.model = Model0.model,
  predicate Unsat0.unsat = Unsat0.unsat, predicate Invariant2.invariant' = Invariant3.invariant',
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate Invariant3.invariant' = Invariant4.invariant', function Model1.model = Model7.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  function Model2.model = Model11.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  let rec cfg handle_conflict [@cfg:stackify] [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 163 4 165 21] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (t : borrowed (Type.creusat_trail_trail)) (cref : usize) (w : borrowed (Type.creusat_watches_watches)) (d : borrowed (Type.creusat_decision_decisions)) : Type.core_option_option bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 149 4 149 37] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 150 4 150 42] Invariant1.invariant' ( * t) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 151 4 151 42] Invariant2.invariant' ( * w) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 152 4 152 48] Invariant3.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 153 4 153 44] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 154 4 154 43] UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 155 4 155 57] Unsat0.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref)) (Type.creusat_trail_trail_Trail_assignments ( * t))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 149 4 149 37] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 150 4 150 42] Invariant1.invariant' ( ^ t) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 151 4 151 42] Invariant2.invariant' ( ^ w) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 152 4 152 48] Invariant3.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 156 4 156 45] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 157 4 157 29] Equisat0.equisat ( * f) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 158 4 162 7] match (result) with
      | Type.Core_Option_Option_Some (False) -> NotSatisfiable0.not_satisfiable ( ^ f)
      | Type.Core_Option_Option_Some (True) -> true
      | Type.Core_Option_Option_None -> true
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.core_option_option bool;
  var self_1 : borrowed (Type.creusat_solver_solver);
  var f_2 : borrowed (Type.creusat_formula_formula);
  var t_3 : borrowed (Type.creusat_trail_trail);
  var cref_4 : usize;
  var w_5 : borrowed (Type.creusat_watches_watches);
  var d_6 : borrowed (Type.creusat_decision_decisions);
  var res_7 : Type.creusat_conflictanalysis_conflict;
  var _8 : Type.creusat_formula_formula;
  var _9 : Type.creusat_trail_trail;
  var _10 : usize;
  var _11 : borrowed (Type.creusat_decision_decisions);
  var _12 : ();
  var _13 : isize;
  var _14 : ();
  var clause_15 : Type.creusat_clause_clause;
  var cref_16 : usize;
  var _17 : borrowed (Type.creusat_formula_formula);
  var _18 : Type.creusat_clause_clause;
  var _19 : Type.creusat_trail_trail;
  var _20 : ();
  var _21 : Type.core_result_result () ();
  var _22 : borrowed (Type.creusat_trail_trail);
  var _23 : usize;
  var _24 : Type.creusat_formula_formula;
  var _25 : borrowed (Type.creusat_decision_decisions);
  var _26 : isize;
  var _27 : ();
  var _28 : ();
  var _29 : borrowed (Type.creusat_formula_formula);
  var _30 : borrowed (Type.creusat_watches_watches);
  var _31 : Type.creusat_trail_trail;
  var _32 : borrowed (Type.creusat_solver_solver);
  var _33 : ();
  var _34 : borrowed (Type.creusat_formula_formula);
  var _35 : borrowed (Type.creusat_watches_watches);
  var _36 : Type.creusat_trail_trail;
  var s_idx_37 : usize;
  var clause_38 : Type.creusat_clause_clause;
  var _39 : ();
  var _40 : borrowed (Type.creusat_solver_solver);
  var _41 : borrowed (Type.creusat_formula_formula);
  var _42 : borrowed (Type.creusat_trail_trail);
  var _43 : borrowed (Type.creusat_watches_watches);
  var _44 : borrowed (Type.creusat_decision_decisions);
  var _45 : Type.creusat_clause_clause;
  var _46 : usize;
  var clause_47 : Type.creusat_clause_clause;
  var _48 : usize;
  var _49 : borrowed (Type.creusat_formula_formula);
  var _50 : Type.creusat_clause_clause;
  var _51 : borrowed (Type.creusat_watches_watches);
  var _52 : Type.creusat_trail_trail;
  var _53 : ();
  var _54 : borrowed (Type.creusat_trail_trail);
  var _55 : Type.creusat_formula_formula;
  var _56 : borrowed (Type.creusat_decision_decisions);
  {
    self_1 <- self;
    f_2 <- f;
    t_3 <- t;
    cref_4 <- cref;
    w_5 <- w;
    d_6 <- d;
    goto BB0
  }
  BB0 {
    _8 <-  * f_2;
    _9 <-  * t_3;
    _10 <- cref_4;
    _11 <- borrow_mut ( * d_6);
    d_6 <- { d_6 with current = ( ^ _11) };
    res_7 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 166 18 166 49] AnalyzeConflict0.analyze_conflict _8 _9 _10 _11);
    goto BB1
  }
  BB1 {
    switch (res_7)
      | Type.CreuSat_ConflictAnalysis_Conflict_Ground -> goto BB4
      | Type.CreuSat_ConflictAnalysis_Conflict_Unit _ -> goto BB5
      | Type.CreuSat_ConflictAnalysis_Conflict_Learned _ _ -> goto BB14
      | Type.CreuSat_ConflictAnalysis_Conflict_Restart _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    clause_47 <- Type.creusat_conflictanalysis_conflict_Restart_0 res_7;
    _49 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _49) };
    _50 <- clause_47;
    _51 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _51) };
    _52 <-  * t_3;
    _48 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 187 16 187 42] AddClause0.add_clause _49 _50 _51 _52);
    goto BB17
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve t_3 };
    assume { Resolve3.resolve w_5 };
    assume { Resolve4.resolve d_6 };
    absurd
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve t_3 };
    assume { Resolve3.resolve w_5 };
    assume { Resolve4.resolve d_6 };
    _0 <- Type.Core_Option_Option_Some false;
    goto BB23
  }
  BB5 {
    clause_15 <- Type.creusat_conflictanalysis_conflict_Unit_0 res_7;
    _17 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _17) };
    _18 <- clause_15;
    _19 <-  * t_3;
    cref_16 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 175 27 175 48] AddUnit0.add_unit _17 _18 _19);
    goto BB6
  }
  BB6 {
    _22 <- borrow_mut ( * t_3);
    t_3 <- { t_3 with current = ( ^ _22) };
    _23 <- cref_16;
    _24 <-  * f_2;
    _25 <- borrow_mut ( * d_6);
    d_6 <- { d_6 with current = ( ^ _25) };
    _21 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 176 22 176 46] LearnUnit0.learn_unit _22 _23 _24 _25);
    goto BB7
  }
  BB7 {
    assume { Resolve4.resolve d_6 };
    switch (_21)
      | Type.Core_Result_Result_Ok _ -> goto BB8
      | Type.Core_Result_Result_Err _ -> goto BB10
      end
  }
  BB8 {
    _20 <- ();
    _29 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _29) };
    _30 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _30) };
    _31 <-  * t_3;
    _32 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _32) };
    _28 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 180 16 180 38] ReduceDb0.reduceDB _29 _30 _31 _32);
    goto BB11
  }
  BB9 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve t_3 };
    assume { Resolve3.resolve w_5 };
    absurd
  }
  BB10 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve t_3 };
    assume { Resolve3.resolve w_5 };
    _0 <- Type.Core_Option_Option_Some true;
    goto BB22
  }
  BB11 {
    assume { Resolve0.resolve self_1 };
    _34 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _34) };
    _35 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _35) };
    _36 <-  * t_3;
    assume { Resolve2.resolve t_3 };
    _33 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 181 16 181 40] SimplifyFormula0.simplify_formula _34 _35 _36);
    goto BB12
  }
  BB12 {
    assume { Resolve1.resolve f_2 };
    assume { Resolve3.resolve w_5 };
    _12 <- ();
    goto BB13
  }
  BB13 {
    goto BB20
  }
  BB14 {
    s_idx_37 <- Type.creusat_conflictanalysis_conflict_Learned_0 res_7;
    clause_38 <- Type.creusat_conflictanalysis_conflict_Learned_1 res_7;
    _40 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _40) };
    _41 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _41) };
    _42 <- borrow_mut ( * t_3);
    t_3 <- { t_3 with current = ( ^ _42) };
    _43 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _43) };
    _44 <- borrow_mut ( * d_6);
    d_6 <- { d_6 with current = ( ^ _44) };
    _45 <- clause_38;
    _46 <- s_idx_37;
    _39 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 184 16 184 66] HandleLongClause0.handle_long_clause _40 _41 _42 _43 _44 _45 _46);
    goto BB15
  }
  BB15 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve t_3 };
    assume { Resolve3.resolve w_5 };
    assume { Resolve4.resolve d_6 };
    _12 <- ();
    goto BB16
  }
  BB16 {
    goto BB20
  }
  BB17 {
    assume { Resolve3.resolve w_5 };
    _54 <- borrow_mut ( * t_3);
    t_3 <- { t_3 with current = ( ^ _54) };
    _55 <-  * f_2;
    assume { Resolve1.resolve f_2 };
    _56 <- borrow_mut ( * d_6);
    d_6 <- { d_6 with current = ( ^ _56) };
    _53 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 188 16 188 41] BacktrackSafe0.backtrack_safe _54 (0 : usize) _55 _56);
    goto BB18
  }
  BB18 {
    assume { Resolve2.resolve t_3 };
    assume { Resolve4.resolve d_6 };
    _12 <- ();
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    _0 <- Type.Core_Option_Option_None;
    goto BB21
  }
  BB21 {
    goto BB25
  }
  BB22 {
    goto BB23
  }
  BB23 {
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
module CreuSat_Util_MinLog_Interface
  use mach.int.Int
  function min_log (a : int) (b : int) : int
end
module CreuSat_Util_MinLog
  use mach.int.Int
  function min_log [#"/Users/xavier/Code/sat/CreuSAT/src/util.rs" 88 0 88 33] (a : int) (b : int) : int =
    [#"/Users/xavier/Code/sat/CreuSAT/src/util.rs" 87 0 87 8] if a <= b then a else b
end
module CreuSat_Util_Min_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  clone CreuSat_Util_MinLog_Interface as MinLog0
  val min [@cfg:stackify] (a : usize) (b : usize) : usize
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/util.rs" 96 0 96 38] UInt64.to_int result = MinLog0.min_log (UInt64.to_int a) (UInt64.to_int b) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/util.rs" 97 0 97 38] UInt64.to_int a <= UInt64.to_int b -> UInt64.to_int result = UInt64.to_int a }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/util.rs" 98 0 98 37] UInt64.to_int b < UInt64.to_int a -> UInt64.to_int result = UInt64.to_int b }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/util.rs" 99 0 99 42] UInt64.to_int result <= UInt64.to_int b /\ UInt64.to_int result <= UInt64.to_int a }
    
end
module CreuSat_Util_MaxLog_Interface
  use mach.int.Int
  function max_log (a : int) (b : int) : int
end
module CreuSat_Util_MaxLog
  use mach.int.Int
  function max_log [#"/Users/xavier/Code/sat/CreuSAT/src/util.rs" 109 0 109 33] (a : int) (b : int) : int =
    [#"/Users/xavier/Code/sat/CreuSAT/src/util.rs" 108 0 108 8] if a >= b then a else b
end
module CreuSat_Util_Max_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  clone CreuSat_Util_MaxLog_Interface as MaxLog0
  val max [@cfg:stackify] (a : usize) (b : usize) : usize
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/util.rs" 117 0 117 38] UInt64.to_int result = MaxLog0.max_log (UInt64.to_int a) (UInt64.to_int b) }
    
end
module CreuSat_UnitProp_Swap_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val swap [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : Type.creusat_trail_trail) (watches : Type.creusat_watches_watches) (cref : usize) (j : usize) (k : usize) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 52 0 52 33] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 53 0 53 39] Invariant1.invariant' trail ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 54 0 54 41] Invariant2.invariant' watches ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 55 0 55 46] Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) >= 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 56 0 56 39] UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 57 0 57 46] Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) > UInt64.to_int j}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 58 0 58 46] Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) > UInt64.to_int k}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 59 0 59 69] not SatInner0.sat_inner (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) 0) (Model2.model (Type.creusat_trail_trail_Trail_assignments trail))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 52 0 52 33] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 53 0 53 39] Invariant1.invariant' trail ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 54 0 54 41] Invariant2.invariant' watches ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 61 0 61 78] Permut.exchange (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int cref))) (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) (UInt64.to_int j) (UInt64.to_int k) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 62 0 62 41] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 63 0 63 55] Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) = Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 65 0 65 25] Equisat0.equisat ( * f) ( ^ f) }
    
end
module CreuSat_Watches_UpdateWatch_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model3 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic_Interface as ToWatchidxLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant1 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  val update_watch [@cfg:stackify] (f : Type.creusat_formula_formula) (trail : Type.creusat_trail_trail) (watches : borrowed (Type.creusat_watches_watches)) (cref : usize) (j : usize) (k : usize) (lit : Type.creusat_lit_lit) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 30 0 30 41] Invariant0.invariant' ( * watches) f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 31 0 31 40] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 32 0 32 44] IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 33 0 33 26] Invariant1.invariant' f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 34 0 34 32] Invariant2.invariant' trail f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 35 0 35 39] UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 36 0 36 57] 0 <= UInt64.to_int k /\ UInt64.to_int k < Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 37 0 37 46] Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses f)) (UInt64.to_int cref))) >= 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 38 0 38 70] Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_watches_watches_Watches_watches ( * watches))) (ToWatchidxLogic0.to_watchidx_logic lit))) > UInt64.to_int j}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 30 0 30 41] Invariant0.invariant' ( ^ watches) f }
    
end
module CreuSat_UnitProp_CheckAndMoveWatch_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicLit_Impl1_Unsat_Interface as Unsat0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model4 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic_Interface as ToWatchidxLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model3 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model2
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val check_and_move_watch [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : Type.creusat_trail_trail) (watches : borrowed (Type.creusat_watches_watches)) (cref : usize) (j : usize) (k : usize) (lit : Type.creusat_lit_lit) : bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 16 0 16 33] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 17 0 17 36] Invariant1.invariant' trail ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 18 0 18 44] Invariant2.invariant' ( * watches) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 19 0 19 40] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 20 0 20 44] IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 21 0 21 69] not SatInner0.sat_inner (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) 0) (Model2.model (Type.creusat_trail_trail_Trail_assignments trail))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 22 0 22 39] UInt64.to_int cref < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 23 0 23 57] 2 <= UInt64.to_int k /\ UInt64.to_int k < Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 24 0 24 70] Seq.length (Model4.model (Seq.get (Model3.model (Type.creusat_watches_watches_Watches_watches ( * watches))) (ToWatchidxLogic0.to_watchidx_logic lit))) > UInt64.to_int j}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 16 0 16 33] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 17 0 17 36] Invariant1.invariant' trail ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 18 0 18 44] Invariant2.invariant' ( ^ watches) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 25 0 25 41] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 26 0 26 25] Equisat0.equisat ( * f) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 27 0 27 55] Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) = Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 28 0 28 114] not result -> Unsat0.unsat (Seq.get (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int cref))) (UInt64.to_int k)) (Type.creusat_trail_trail_Trail_assignments trail) /\  ^ f =  * f /\  * watches =  ^ watches }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 29 0 29 75] Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int cref))) = Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) }
    
end
module CreuSat_UnitProp_ExistsNewWatchableLit_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicLit_Impl1_Unsat_Interface as Unsat0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner_Interface as SatInner0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model4
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model3
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic_Interface as ToWatchidxLogic0
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val exists_new_watchable_lit [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : Type.creusat_trail_trail) (watches : borrowed (Type.creusat_watches_watches)) (cref : usize) (j : usize) (lit : Type.creusat_lit_lit) : bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 86 0 86 33] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 87 0 87 38] Invariant1.invariant' trail ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 88 0 88 44] Invariant2.invariant' ( * watches) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 89 0 89 40] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 90 0 90 63] ToWatchidxLogic0.to_watchidx_logic lit < Seq.length (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 91 0 91 70] Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches))) (ToWatchidxLogic0.to_watchidx_logic lit))) > UInt64.to_int j}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 92 0 92 44] IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 93 0 93 39] UInt64.to_int cref < Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 94 0 94 46] Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) >= 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 95 0 95 69] not SatInner0.sat_inner (Seq.get (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) 0) (Model4.model (Type.creusat_trail_trail_Trail_assignments trail))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 86 0 86 33] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 87 0 87 38] Invariant1.invariant' trail ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 88 0 88 44] Invariant2.invariant' ( ^ watches) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 96 0 96 136] not result -> (forall m : (int) . 2 <= m /\ m < Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) -> Unsat0.unsat (Seq.get (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) m) (Type.creusat_trail_trail_Trail_assignments trail)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 97 0 97 75] not result -> Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref)) = Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int cref)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 98 0 98 41] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 99 0 99 55] Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) = Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 100 0 100 25] Equisat0.equisat ( * f) ( ^ f) }
    
end
module CreuSat_UnitProp_PropagateLitWithRegardToClause_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat1
  clone CreuSat_Logic_LogicFormula_Impl2_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model4 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicClause_Impl0_Model_Interface as Model3
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl0_ToWatchidxLogic_Interface as ToWatchidxLogic0
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val propagate_lit_with_regard_to_clause [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : borrowed (Type.creusat_trail_trail)) (watches : borrowed (Type.creusat_watches_watches)) (cref : usize) (lit : Type.creusat_lit_lit) (j : usize) : Type.core_result_result bool usize
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 149 0 149 33] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 150 0 150 42] Invariant1.invariant' ( * trail) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 151 0 151 44] Invariant2.invariant' ( * watches) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 152 0 152 63] ToWatchidxLogic0.to_watchidx_logic lit < Seq.length (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 153 0 153 70] Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * watches))) (ToWatchidxLogic0.to_watchidx_logic lit))) > UInt64.to_int j}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 154 0 154 40] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 155 0 155 44] IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 156 0 156 39] UInt64.to_int cref < Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 157 0 157 46] Seq.length (Model3.model (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( * f))) (UInt64.to_int cref))) >= 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 149 0 149 33] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 150 0 150 42] Invariant1.invariant' ( ^ trail) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 151 0 151 44] Invariant2.invariant' ( ^ watches) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 158 0 158 49] Type.creusat_trail_trail_Trail_decisions ( ^ trail) = Type.creusat_trail_trail_Trail_decisions ( * trail) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 159 0 163 3] match (result) with
      | Type.Core_Result_Result_Ok (True) -> true
      | Type.Core_Result_Result_Ok (False) -> Seq.length (Model4.model (Type.creusat_trail_trail_Trail_trail ( ^ trail))) = Seq.length (Model4.model (Type.creusat_trail_trail_Trail_trail ( * trail)))
      | Type.Core_Result_Result_Err n -> UInt64.to_int n < Seq.length (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) /\ Unsat0.unsat ( ^ f) (Type.creusat_trail_trail_Trail_assignments ( ^ trail)) /\ Unsat1.unsat (Seq.get (Model2.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int n)) (Type.creusat_trail_trail_Trail_assignments ( ^ trail))
      end }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 164 0 164 41] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 165 0 165 25] Equisat0.equisat ( * f) ( ^ f) }
    
end
module CreuSat_UnitProp_PropagateLiteral_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use seq.Seq
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat1
  clone CreuSat_Logic_LogicFormula_Impl2_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val propagate_literal [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : borrowed (Type.creusat_trail_trail)) (watches : borrowed (Type.creusat_watches_watches)) (lit : Type.creusat_lit_lit) : Type.core_result_result () usize
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 230 0 230 33] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 231 0 231 42] Invariant1.invariant' ( * trail) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 232 0 232 44] Invariant2.invariant' ( * watches) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 233 0 233 40] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 234 0 234 44] IndexLogic0.index_logic lit < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 230 0 230 33] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 231 0 231 42] Invariant1.invariant' ( ^ trail) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 232 0 232 44] Invariant2.invariant' ( ^ watches) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 235 0 238 3] match (result) with
      | Type.Core_Result_Result_Ok () -> true
      | Type.Core_Result_Result_Err n -> UInt64.to_int n < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) /\ Unsat0.unsat ( ^ f) (Type.creusat_trail_trail_Trail_assignments ( ^ trail)) /\ Unsat1.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int n)) (Type.creusat_trail_trail_Trail_assignments ( ^ trail))
      end }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 239 0 239 41] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 240 0 240 25] Equisat0.equisat ( * f) ( ^ f) }
    
end
module CreuSat_UnitProp_UnitPropagate_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use seq.Seq
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicClause_Impl2_Unsat_Interface as Unsat1
  clone CreuSat_Logic_LogicFormula_Impl2_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val unit_propagate [@cfg:stackify] (f : borrowed (Type.creusat_formula_formula)) (trail : borrowed (Type.creusat_trail_trail)) (watches : borrowed (Type.creusat_watches_watches)) : Type.core_result_result () usize
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 280 0 280 33] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 281 0 281 42] Invariant1.invariant' ( * trail) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 282 0 282 44] Invariant2.invariant' ( * watches) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 283 0 283 40] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 280 0 280 33] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 281 0 281 42] Invariant1.invariant' ( ^ trail) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 282 0 282 44] Invariant2.invariant' ( ^ watches) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 284 0 287 3] match (result) with
      | Type.Core_Result_Result_Ok () -> true
      | Type.Core_Result_Result_Err n -> UInt64.to_int n < Seq.length (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) /\ Unsat0.unsat ( ^ f) (Type.creusat_trail_trail_Trail_assignments ( ^ trail)) /\ Unsat1.unsat (Seq.get (Model0.model (Type.creusat_formula_formula_Formula_clauses ( ^ f))) (UInt64.to_int n)) (Type.creusat_trail_trail_Trail_assignments ( ^ trail))
      end }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 288 0 288 41] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/unit_prop.rs" 289 0 289 25] Equisat0.equisat ( * f) ( ^ f) }
    
end
module CreuSat_Solver_Impl0_UnitPropStep_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant3
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val unit_prop_step [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (d : borrowed (Type.creusat_decision_decisions)) (t : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) : Type.creusat_solver_conflictresult
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 195 4 195 37] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 196 4 196 42] Invariant1.invariant' ( * w) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 197 4 197 42] Invariant2.invariant' ( * t) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 198 4 198 48] Invariant3.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 199 4 199 44] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 195 4 195 37] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 196 4 196 42] Invariant1.invariant' ( ^ w) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 197 4 197 42] Invariant2.invariant' ( ^ t) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 198 4 198 48] Invariant3.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 200 4 200 45] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 201 4 201 29] Equisat0.equisat ( * f) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 202 4 205 7] match (result) with
      | Type.CreuSat_Solver_ConflictResult_Ground -> NotSatisfiable0.not_satisfiable ( ^ f)
      | _ -> true
      end }
    
end
module CreuSat_Solver_Impl0_UnitPropStep
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model5 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner2 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant7 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant8 with function Model0.model = Model6.model,
  function Model1.model = Model5.model
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with function Model0.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate SatInner0.sat_inner = SatInner1.sat_inner,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = uint8, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model6.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant7.invariant',
  predicate Invariant1.invariant' = Invariant8.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicFormula_Impl2_SatInner as SatInner0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model8 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model6.model,
  function Model1.model = Model5.model, predicate Sat0.sat = Sat0.sat
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model2.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model3.model,
  function Model1.model = Model8.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model3.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model3.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant5 with function Model0.model = Model8.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model5.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model0 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model0.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreuSat_Logic_LogicFormula_Impl2_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecisionMirror as InvariantNoDecisionMirror0 with function Model0.model = Model8.model,
  function Model1.model = Model3.model, predicate Invariant0.invariant' = Invariant6.invariant',
  function Model2.model = Model2.model, function Model3.model = Model6.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Sat0.sat = Sat0.sat, predicate Sorted0.sorted = Sorted0.sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model0.model = Model3.model,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant, function Model1.model = Model2.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model8.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat, axiom .
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model7.model,
  function Model1.model = Model6.model, function Model2.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model5.model
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror as InvariantMirror0 with function Model0.model = Model6.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model5.model
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model5.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant3 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant2 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model2.model, function Model1.model = Model3.model,
  predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  function Model0.model = Model0.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  use mach.int.Int64
  clone CreuSat_Logic_LogicClause_Impl2_UnsatInner as UnsatInner2 with function Model0.model = Model5.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicFormula_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreuSat_Logic_LogicClause_Impl2_Unsat as Unsat1 with function Model0.model = Model8.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreuSat_Logic_LogicFormula_Impl2_Unsat as Unsat0 with function Model0.model = Model8.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreuSat_Solver_Impl0_HandleConflict_Interface as HandleConflict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  predicate Invariant3.invariant' = Invariant3.invariant', function Model0.model = Model6.model,
  predicate Unsat0.unsat = Unsat1.unsat, predicate Equisat0.equisat = Equisat0.equisat,
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_decision_decisions
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_solver_solver
  clone CreuSat_UnitProp_UnitPropagate_Interface as UnitPropagate0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  function Model0.model = Model6.model, predicate Unsat0.unsat = Unsat0.unsat, predicate Unsat1.unsat = Unsat1.unsat,
  predicate Equisat0.equisat = Equisat0.equisat,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  let rec cfg unit_prop_step [@cfg:stackify] [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 206 4 206 118] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (d : borrowed (Type.creusat_decision_decisions)) (t : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) : Type.creusat_solver_conflictresult
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 195 4 195 37] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 196 4 196 42] Invariant1.invariant' ( * w) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 197 4 197 42] Invariant2.invariant' ( * t) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 198 4 198 48] Invariant3.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 199 4 199 44] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 195 4 195 37] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 196 4 196 42] Invariant1.invariant' ( ^ w) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 197 4 197 42] Invariant2.invariant' ( ^ t) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 198 4 198 48] Invariant3.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 200 4 200 45] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 201 4 201 29] Equisat0.equisat ( * f) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 202 4 205 7] match (result) with
      | Type.CreuSat_Solver_ConflictResult_Ground -> NotSatisfiable0.not_satisfiable ( ^ f)
      | _ -> true
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.creusat_solver_conflictresult;
  var self_1 : borrowed (Type.creusat_solver_solver);
  var f_2 : borrowed (Type.creusat_formula_formula);
  var d_3 : borrowed (Type.creusat_decision_decisions);
  var t_4 : borrowed (Type.creusat_trail_trail);
  var w_5 : borrowed (Type.creusat_watches_watches);
  var _6 : Type.core_result_result () usize;
  var _7 : borrowed (Type.creusat_formula_formula);
  var _8 : borrowed (Type.creusat_trail_trail);
  var _9 : borrowed (Type.creusat_watches_watches);
  var _10 : isize;
  var cref_11 : usize;
  var _12 : Type.core_option_option bool;
  var _13 : borrowed (Type.creusat_solver_solver);
  var _14 : borrowed (Type.creusat_formula_formula);
  var _15 : borrowed (Type.creusat_trail_trail);
  var _16 : usize;
  var _17 : borrowed (Type.creusat_watches_watches);
  var _18 : borrowed (Type.creusat_decision_decisions);
  var _19 : isize;
  {
    self_1 <- self;
    f_2 <- f;
    d_3 <- d;
    t_4 <- t;
    w_5 <- w;
    goto BB0
  }
  BB0 {
    _7 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _7) };
    _8 <- borrow_mut ( * t_4);
    t_4 <- { t_4 with current = ( ^ _8) };
    _9 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _9) };
    _6 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 207 14 207 37] UnitPropagate0.unit_propagate _7 _8 _9);
    goto BB1
  }
  BB1 {
    switch (_6)
      | Type.Core_Result_Result_Ok _ -> goto BB4
      | Type.Core_Result_Result_Err _ -> goto BB2
      end
  }
  BB2 {
    cref_11 <- Type.core_result_result_Err_0 _6;
    _13 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _13) };
    _14 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _14) };
    _15 <- borrow_mut ( * t_4);
    t_4 <- { t_4 with current = ( ^ _15) };
    _16 <- cref_11;
    _17 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _17) };
    _18 <- borrow_mut ( * d_3);
    d_3 <- { d_3 with current = ( ^ _18) };
    _12 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 209 31 209 69] HandleConflict0.handle_conflict _13 _14 _15 _16 _17 _18);
    goto BB5
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    absurd
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    _0 <- Type.CreuSat_Solver_ConflictResult_Ok;
    goto BB12
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    switch (_12)
      | Type.Core_Option_Option_None -> goto BB6
      | Type.Core_Option_Option_Some _ -> goto BB7
      end
  }
  BB6 {
    _0 <- Type.CreuSat_Solver_ConflictResult_Continue;
    goto BB11
  }
  BB7 {
    switch (Type.core_option_option_Some_0 _12)
      | False -> goto BB9
      | _ -> goto BB10
      end
  }
  BB8 {
    absurd
  }
  BB9 {
    _0 <- Type.CreuSat_Solver_ConflictResult_Ground;
    goto BB11
  }
  BB10 {
    _0 <- Type.CreuSat_Solver_ConflictResult_Err;
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module CreuSat_Solver_Impl0_UnitPropLoop_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant3
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val unit_prop_loop [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (d : borrowed (Type.creusat_decision_decisions)) (t : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) : Type.core_option_option bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 218 4 218 37] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 219 4 219 42] Invariant1.invariant' ( * t) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 220 4 220 42] Invariant2.invariant' ( * w) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 221 4 221 48] Invariant3.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 222 4 222 44] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 218 4 218 37] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 219 4 219 42] Invariant1.invariant' ( ^ t) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 220 4 220 42] Invariant2.invariant' ( ^ w) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 221 4 221 48] Invariant3.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 223 4 227 7] match (result) with
      | Type.Core_Option_Option_Some (False) -> NotSatisfiable0.not_satisfiable ( ^ f)
      | Type.Core_Option_Option_Some (True) -> true
      | Type.Core_Option_Option_None -> true
      end }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 228 4 228 45] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 229 4 229 29] Equisat0.equisat ( * f) ( ^ f) }
    
end
module CreuSat_Solver_Impl0_UnitPropLoop
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model5 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner2 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant7 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant8 with function Model0.model = Model6.model,
  function Model1.model = Model5.model
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with function Model0.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate SatInner0.sat_inner = SatInner1.sat_inner,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = uint8, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model6.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant7.invariant',
  predicate Invariant1.invariant' = Invariant8.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicFormula_Impl2_SatInner as SatInner0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model7 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model6.model,
  function Model1.model = Model5.model, predicate Sat0.sat = Sat0.sat
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model1.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model2.model,
  function Model1.model = Model7.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model2.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model2.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant5 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model5.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_Impl2_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model0 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model0.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model8.model,
  function Model1.model = Model6.model, function Model2.model = Model5.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecisionMirror as InvariantNoDecisionMirror0 with function Model0.model = Model7.model,
  function Model1.model = Model2.model, predicate Invariant0.invariant' = Invariant6.invariant',
  function Model2.model = Model1.model, function Model3.model = Model6.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Sat0.sat = Sat0.sat, predicate Sorted0.sorted = Sorted0.sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model0.model = Model2.model,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant, function Model1.model = Model1.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model7.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat, axiom .
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model5.model
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror as InvariantMirror0 with function Model0.model = Model6.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model5.model
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model5.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant3 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant2 with function Model0.model = Model3.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model1.model, function Model1.model = Model2.model,
  predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  function Model0.model = Model0.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_decision_decisions
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_solver_solver
  clone CreuSat_Solver_Impl0_UnitPropStep_Interface as UnitPropStep0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  predicate Invariant3.invariant' = Invariant3.invariant', predicate Equisat0.equisat = Equisat0.equisat,
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  let rec cfg unit_prop_loop [@cfg:stackify] [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 230 4 230 116] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (d : borrowed (Type.creusat_decision_decisions)) (t : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) : Type.core_option_option bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 218 4 218 37] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 219 4 219 42] Invariant1.invariant' ( * t) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 220 4 220 42] Invariant2.invariant' ( * w) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 221 4 221 48] Invariant3.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 222 4 222 44] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 218 4 218 37] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 219 4 219 42] Invariant1.invariant' ( ^ t) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 220 4 220 42] Invariant2.invariant' ( ^ w) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 221 4 221 48] Invariant3.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 223 4 227 7] match (result) with
      | Type.Core_Option_Option_Some (False) -> NotSatisfiable0.not_satisfiable ( ^ f)
      | Type.Core_Option_Option_Some (True) -> true
      | Type.Core_Option_Option_None -> true
      end }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 228 4 228 45] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 229 4 229 29] Equisat0.equisat ( * f) ( ^ f) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.core_option_option bool;
  var self_1 : borrowed (Type.creusat_solver_solver);
  var f_2 : borrowed (Type.creusat_formula_formula);
  var d_3 : borrowed (Type.creusat_decision_decisions);
  var t_4 : borrowed (Type.creusat_trail_trail);
  var w_5 : borrowed (Type.creusat_watches_watches);
  ghost var old_f_6 : borrowed (Type.creusat_formula_formula);
  var _7 : ();
  ghost var old_t_8 : borrowed (Type.creusat_trail_trail);
  var _9 : ();
  ghost var old_w_10 : borrowed (Type.creusat_watches_watches);
  var _11 : ();
  ghost var old_d_12 : borrowed (Type.creusat_decision_decisions);
  var _13 : ();
  var _14 : ();
  var _15 : ();
  var _16 : Type.creusat_solver_conflictresult;
  var _17 : borrowed (Type.creusat_solver_solver);
  var _18 : borrowed (Type.creusat_formula_formula);
  var _19 : borrowed (Type.creusat_decision_decisions);
  var _20 : borrowed (Type.creusat_trail_trail);
  var _21 : borrowed (Type.creusat_watches_watches);
  var _22 : isize;
  var _23 : ();
  var _24 : ();
  var _25 : ();
  {
    self_1 <- self;
    f_2 <- f;
    d_3 <- d;
    t_4 <- t;
    w_5 <- w;
    goto BB0
  }
  BB0 {
    _7 <- ();
    old_f_6 <- ghost ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 231 20 231 32] f_2);
    goto BB1
  }
  BB1 {
    _9 <- ();
    old_t_8 <- ghost ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 232 20 232 32] t_4);
    goto BB2
  }
  BB2 {
    _11 <- ();
    old_w_10 <- ghost ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 233 20 233 32] w_5);
    goto BB3
  }
  BB3 {
    _13 <- ();
    old_d_12 <- ghost ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 234 20 234 32] d_3);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant maintains_f { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 235 8 235 48] Invariant0.invariant' ( * f_2) };
    invariant maintains_t { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 236 8 236 50] Invariant1.invariant' ( * t_4) ( * f_2) };
    invariant maintains_w { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 237 8 237 50] Invariant2.invariant' ( * w_5) ( * f_2) };
    invariant maintains_d { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 238 8 238 59] Invariant3.invariant' ( * d_3) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f_2))) };
    invariant equi { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 239 8 239 53] Equisat0.equisat ( * old_f_6) ( * f_2) };
    invariant num_vars { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 240 8 240 62] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f_2)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * old_f_6)) };
    invariant prophf { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 241 8 241 50]  ^ f_2 =  ^ old_f_6 };
    invariant propht { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 242 8 242 50]  ^ t_4 =  ^ old_t_8 };
    invariant prophw { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 243 8 243 50]  ^ w_5 =  ^ old_w_10 };
    invariant prophd { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 244 8 244 50]  ^ d_3 =  ^ old_d_12 };
    _17 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _17) };
    _18 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _18) };
    _19 <- borrow_mut ( * d_3);
    d_3 <- { d_3 with current = ( ^ _19) };
    _20 <- borrow_mut ( * t_4);
    t_4 <- { t_4 with current = ( ^ _20) };
    _21 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _21) };
    _16 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 246 18 246 49] UnitPropStep0.unit_prop_step _17 _18 _19 _20 _21);
    goto BB6
  }
  BB6 {
    switch (_16)
      | Type.CreuSat_Solver_ConflictResult_Ok -> goto BB9
      | Type.CreuSat_Solver_ConflictResult_Err -> goto BB11
      | Type.CreuSat_Solver_ConflictResult_Ground -> goto BB10
      | Type.CreuSat_Solver_ConflictResult_Continue -> goto BB7
      end
  }
  BB7 {
    _15 <- ();
    goto BB5
  }
  BB8 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    absurd
  }
  BB9 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    _0 <- Type.Core_Option_Option_Some true;
    goto BB12
  }
  BB10 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    _0 <- Type.Core_Option_Option_Some false;
    goto BB12
  }
  BB11 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    _0 <- Type.Core_Option_Option_None;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module CreuSat_Trail_Impl0_EnqDecision_Interface
  use mach.int.UInt64
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  use prelude.UInt8
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner_Interface as LongArePostUnitInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_Logic_Unset_Interface as Unset0
  clone CreuSat_Logic_LogicAssignments_Impl0_Model_Interface as Model0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val enq_decision [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (idx : usize) (_f : Type.creusat_formula_formula) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 268 4 268 31] Invariant0.invariant' _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 269 4 269 43] Invariant1.invariant' ( * self) _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 270 4 270 36] UInt64.to_int idx < UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars _f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 271 4 271 49] Unset0.unset (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_assignments ( * self))) (UInt64.to_int idx))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 275 4 275 78] LongArePostUnitInner0.long_are_post_unit_inner (Model1.model (Type.creusat_trail_trail_Trail_trail ( * self))) _f (Model0.model (Type.creusat_trail_trail_Trail_assignments ( * self)))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 269 4 269 43] Invariant1.invariant' ( ^ self) _f }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 272 4 273 76] forall j : (int) . 0 <= j /\ j < Seq.length (Model0.model (Type.creusat_trail_trail_Trail_assignments ( * self))) /\ j <> UInt64.to_int idx -> Seq.get (Model0.model (Type.creusat_trail_trail_Trail_assignments ( * self))) j = Seq.get (Model0.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) j }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 274 4 274 88] UInt8.to_int (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) (UInt64.to_int idx)) = 1 \/ UInt8.to_int (Seq.get (Model0.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) (UInt64.to_int idx)) = 0 }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 276 4 276 87] LongArePostUnitInner0.long_are_post_unit_inner (Model1.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) _f (Model0.model (Type.creusat_trail_trail_Trail_assignments ( ^ self))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 277 4 277 65] Seq.length (Model1.model (Type.creusat_trail_trail_Trail_trail ( ^ self))) = 1 + Seq.length (Model1.model (Type.creusat_trail_trail_Trail_trail ( * self))) }
    
end
module CreuSat_Solver_Impl0_OuterLoop_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicAssignments_Impl1_Complete_Interface as Complete0
  clone CreuSat_Logic_LogicFormula_Impl2_Sat_Interface as Sat0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant3
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val outer_loop [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (d : borrowed (Type.creusat_decision_decisions)) (trail : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) : Type.creusat_solver_satresult
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 262 4 262 37] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 263 4 263 46] Invariant1.invariant' ( * trail) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 264 4 264 42] Invariant2.invariant' ( * w) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 265 4 265 48] Invariant3.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 266 4 266 41] Invariant3.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 267 4 267 44] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 262 4 262 37] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 263 4 263 46] Invariant1.invariant' ( ^ trail) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 264 4 264 42] Invariant2.invariant' ( ^ w) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 265 4 265 48] Invariant3.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 268 4 268 45] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 269 4 269 29] Equisat0.equisat ( * f) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 270 4 276 7] match (result) with
      | Type.CreuSat_Solver_SatResult_Sat _ -> Sat0.sat ( ^ f) (Type.creusat_trail_trail_Trail_assignments ( ^ trail)) /\ Complete0.complete (Type.creusat_trail_trail_Trail_assignments ( ^ trail))
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable ( ^ f)
      | Type.CreuSat_Solver_SatResult_Unknown -> true
      | Type.CreuSat_Solver_SatResult_Err -> true
      end }
    
end
module CreuSat_Solver_Impl0_OuterLoop
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant7 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model6 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant8 with function Model0.model = Model7.model,
  function Model1.model = Model6.model
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate SatInner0.sat_inner = SatInner2.sat_inner,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model7.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant7.invariant',
  predicate Invariant1.invariant' = Invariant8.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = uint8, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicFormula_Impl2_SatInner as SatInner0 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model5 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat1 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model7.model,
  function Model1.model = Model6.model, predicate Sat0.sat = Sat1.sat
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model1.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model2.model,
  function Model1.model = Model5.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model2.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model2.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant5 with function Model0.model = Model5.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model6.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model0 with function Model0.model = Model7.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model0.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreuSat_Logic_LogicFormula_Impl2_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model8.model,
  function Model1.model = Model7.model, function Model2.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecisionMirror as InvariantNoDecisionMirror0 with function Model0.model = Model5.model,
  function Model1.model = Model2.model, predicate Invariant0.invariant' = Invariant6.invariant',
  function Model2.model = Model1.model, function Model3.model = Model7.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Sat0.sat = Sat1.sat, predicate Sorted0.sorted = Sorted0.sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model0.model = Model2.model,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant, function Model1.model = Model1.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model5.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat, axiom .
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror as InvariantMirror0 with function Model0.model = Model7.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model6.model
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model6.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  clone CreuSat_Logic_LogicAssignments_Impl1_Complete as Complete0 with function Model0.model = Model5.model,
  predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicFormula_Impl2_Sat as Sat0 with function Model0.model = Model0.model,
  function Model1.model = Model5.model,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant3 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant2 with function Model0.model = Model3.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant1 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model1.model, function Model1.model = Model2.model,
  predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  function Model0.model = Model0.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  use mach.int.Int64
  clone CreuSat_Logic_LogicAssignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model11 with type t = Type.creusat_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model5.model
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = uint8, function Model0.model = Model9.model
  clone CreuSat_Formula_Impl2_IsSat_Interface as IsSat0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant5.invariant', predicate Sat0.sat = Sat0.sat,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Trail_Impl0_EnqDecision_Interface as EnqDecision0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', function Model0.model = Model5.model,
  predicate Unset0.unset = Unset0.unset, function Model1.model = Model2.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_decision_decisions
  clone CreuSat_Decision_Impl1_GetNext_Interface as GetNext0 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate Invariant1.invariant' = Invariant5.invariant', function Model0.model = Model11.model,
  predicate Unset0.unset = Unset0.unset, predicate Complete0.complete = Complete0.complete
  clone CreuSat_Trail_Impl0_BacktrackTo_Interface as BacktrackTo0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Invariant2.invariant' = Invariant3.invariant', function Model1.model = Model2.model,
  function Model2.model = Model5.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_solver_solver
  clone CreuSat_Formula_Impl2_ReduceDb_Interface as ReduceDb0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant1.invariant',
  predicate Equisat0.equisat = Equisat0.equisat,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Trail_Impl0_DecisionLevel_Interface as DecisionLevel0 with function Model0.model = Model1.model
  clone CreuSat_Solver_Impl0_UnitPropLoop_Interface as UnitPropLoop0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate Invariant3.invariant' = Invariant3.invariant',
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate Equisat0.equisat = Equisat0.equisat,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  let rec cfg outer_loop [@cfg:stackify] [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 277 4 277 113] (self : borrowed (Type.creusat_solver_solver)) (f : borrowed (Type.creusat_formula_formula)) (d : borrowed (Type.creusat_decision_decisions)) (trail : borrowed (Type.creusat_trail_trail)) (w : borrowed (Type.creusat_watches_watches)) : Type.creusat_solver_satresult
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 262 4 262 37] Invariant0.invariant' ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 263 4 263 46] Invariant1.invariant' ( * trail) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 264 4 264 42] Invariant2.invariant' ( * w) ( * f)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 265 4 265 48] Invariant3.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 266 4 266 41] Invariant3.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 267 4 267 44] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) < div 18446744073709551615 2}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 262 4 262 37] Invariant0.invariant' ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 263 4 263 46] Invariant1.invariant' ( ^ trail) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 264 4 264 42] Invariant2.invariant' ( ^ w) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 265 4 265 48] Invariant3.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f))) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 268 4 268 45] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 269 4 269 29] Equisat0.equisat ( * f) ( ^ f) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 270 4 276 7] match (result) with
      | Type.CreuSat_Solver_SatResult_Sat _ -> Sat0.sat ( ^ f) (Type.creusat_trail_trail_Trail_assignments ( ^ trail)) /\ Complete0.complete (Type.creusat_trail_trail_Trail_assignments ( ^ trail))
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable ( ^ f)
      | Type.CreuSat_Solver_SatResult_Unknown -> true
      | Type.CreuSat_Solver_SatResult_Err -> true
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.creusat_solver_satresult;
  var self_1 : borrowed (Type.creusat_solver_solver);
  var f_2 : borrowed (Type.creusat_formula_formula);
  var d_3 : borrowed (Type.creusat_decision_decisions);
  var trail_4 : borrowed (Type.creusat_trail_trail);
  var w_5 : borrowed (Type.creusat_watches_watches);
  var _6 : ();
  var _7 : Type.core_option_option bool;
  var _8 : borrowed (Type.creusat_solver_solver);
  var _9 : borrowed (Type.creusat_formula_formula);
  var _10 : borrowed (Type.creusat_decision_decisions);
  var _11 : borrowed (Type.creusat_trail_trail);
  var _12 : borrowed (Type.creusat_watches_watches);
  var _13 : isize;
  var _14 : ();
  var _15 : ();
  var slow_16 : usize;
  var _17 : bool;
  var _18 : usize;
  var _19 : usize;
  var _20 : bool;
  var _21 : usize;
  var _22 : usize;
  var _23 : bool;
  var _24 : ();
  var _25 : bool;
  var _26 : bool;
  var _27 : usize;
  var _28 : Type.creusat_trail_trail;
  var _29 : bool;
  var _30 : usize;
  var _31 : usize;
  var _32 : usize;
  var _33 : ();
  var _34 : bool;
  var _35 : usize;
  var _36 : usize;
  var _37 : ();
  var _38 : borrowed (Type.creusat_formula_formula);
  var _39 : borrowed (Type.creusat_watches_watches);
  var _40 : Type.creusat_trail_trail;
  var _41 : borrowed (Type.creusat_solver_solver);
  var _42 : ();
  var _43 : borrowed (Type.creusat_trail_trail);
  var _44 : Type.creusat_formula_formula;
  var _45 : borrowed (Type.creusat_decision_decisions);
  var _46 : ();
  var _47 : Type.core_option_option usize;
  var _48 : borrowed (Type.creusat_decision_decisions);
  var _49 : Type.creusat_assignments_assignments;
  var _50 : Type.creusat_assignments_assignments;
  var _51 : Type.creusat_formula_formula;
  var _52 : isize;
  var next_53 : usize;
  var _54 : ();
  var _55 : borrowed (Type.creusat_trail_trail);
  var _56 : usize;
  var _57 : Type.creusat_formula_formula;
  var _58 : bool;
  var _59 : Type.creusat_formula_formula;
  var _60 : Type.creusat_assignments_assignments;
  var _61 : Type.creusat_assignments_assignments;
  var _62 : ();
  var _63 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _64 : ();
  {
    self_1 <- self;
    f_2 <- f;
    d_3 <- d;
    trail_4 <- trail;
    w_5 <- w;
    goto BB0
  }
  BB0 {
    _8 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _8) };
    _9 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _9) };
    _10 <- borrow_mut ( * d_3);
    d_3 <- { d_3 with current = ( ^ _10) };
    _11 <- borrow_mut ( * trail_4);
    trail_4 <- { trail_4 with current = ( ^ _11) };
    _12 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _12) };
    _7 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 278 14 278 49] UnitPropLoop0.unit_prop_loop _8 _9 _10 _11 _12);
    goto BB1
  }
  BB1 {
    switch (_7)
      | Type.Core_Option_Option_None -> goto BB5
      | Type.Core_Option_Option_Some _ -> goto BB2
      end
  }
  BB2 {
    switch (Type.core_option_option_Some_0 _7)
      | False -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    _6 <- ();
    _18 <- Type.creusat_solver_solver_Solver_slow ( * self_1);
    _20 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 283 34 283 48] (2 : usize) = (0 : usize));
    assert { not _20 };
    goto BB6
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve3.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve4.resolve trail_4 };
    assume { Resolve1.resolve w_5 };
    _0 <- Type.CreuSat_Solver_SatResult_Unsat;
    goto BB34
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve3.resolve f_2 };
    assume { Resolve2.resolve d_3 };
    assume { Resolve4.resolve trail_4 };
    assume { Resolve1.resolve w_5 };
    _0 <- Type.CreuSat_Solver_SatResult_Err;
    goto BB34
  }
  BB6 {
    _19 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 283 34 283 48] (18446744073709551615 : usize) / (2 : usize));
    _17 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 283 22 283 48] _18 < _19);
    switch (_17)
      | False -> goto BB9
      | _ -> goto BB7
      end
  }
  BB7 {
    _22 <- Type.creusat_solver_solver_Solver_slow ( * self_1);
    _23 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 283 51 283 68] (100 : usize) = (0 : usize));
    assert { not _23 };
    goto BB8
  }
  BB8 {
    _21 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 283 51 283 68] _22 / (100 : usize));
    slow_16 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 283 51 283 74] _21 * (125 : usize));
    goto BB10
  }
  BB9 {
    slow_16 <- Type.creusat_solver_solver_Solver_slow ( * self_1);
    goto BB10
  }
  BB10 {
    _28 <-  * trail_4;
    _27 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 284 11 284 33] DecisionLevel0.decision_level _28);
    goto BB14
  }
  BB11 {
    _25 <- false;
    goto BB13
  }
  BB12 {
    _30 <- Type.creusat_solver_solver_Solver_fast ( * self_1);
    _31 <- slow_16;
    _29 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 284 41 284 57] _30 > _31);
    _25 <- _29;
    goto BB13
  }
  BB13 {
    switch (_25)
      | False -> goto BB21
      | _ -> goto BB15
      end
  }
  BB14 {
    _26 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 284 11 284 37] _27 > (0 : usize));
    switch (_26)
      | False -> goto BB11
      | _ -> goto BB12
      end
  }
  BB15 {
    _32 <- slow_16;
    self_1 <- { self_1 with current = (let Type.CreuSat_Solver_Solver a b c d e f g h =  * self_1 in Type.CreuSat_Solver_Solver a b c d e _32 g h) };
    _35 <- Type.creusat_solver_solver_Solver_num_lemmas ( * self_1);
    _36 <- Type.creusat_solver_solver_Solver_max_lemmas ( * self_1);
    _34 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 286 15 286 48] _35 > _36);
    switch (_34)
      | False -> goto BB18
      | _ -> goto BB16
      end
  }
  BB16 {
    _38 <- borrow_mut ( * f_2);
    f_2 <- { f_2 with current = ( ^ _38) };
    _39 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _39) };
    _40 <-  * trail_4;
    _41 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _41) };
    _37 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 287 16 287 42] ReduceDb0.reduceDB _38 _39 _40 _41);
    goto BB17
  }
  BB17 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve w_5 };
    _33 <- ();
    goto BB19
  }
  BB18 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve w_5 };
    _33 <- ();
    goto BB19
  }
  BB19 {
    _43 <- borrow_mut ( * trail_4);
    trail_4 <- { trail_4 with current = ( ^ _43) };
    _44 <-  * f_2;
    _45 <- borrow_mut ( * d_3);
    d_3 <- { d_3 with current = ( ^ _45) };
    _42 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 289 12 289 39] BacktrackTo0.backtrack_to _43 (0 : usize) _44 _45);
    goto BB20
  }
  BB20 {
    _24 <- ();
    goto BB22
  }
  BB21 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve w_5 };
    _24 <- ();
    goto BB22
  }
  BB22 {
    _48 <- borrow_mut ( * d_3);
    d_3 <- { d_3 with current = ( ^ _48) };
    _50 <- Type.creusat_trail_trail_Trail_assignments ( * trail_4);
    _49 <- _50;
    _51 <-  * f_2;
    _47 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 292 14 292 47] GetNext0.get_next _48 _49 _51);
    goto BB23
  }
  BB23 {
    assume { Resolve2.resolve d_3 };
    switch (_47)
      | Type.Core_Option_Option_None -> goto BB24
      | Type.Core_Option_Option_Some _ -> goto BB26
      end
  }
  BB24 {
    _59 <-  * f_2;
    assume { Resolve3.resolve f_2 };
    _61 <- Type.creusat_trail_trail_Trail_assignments ( * trail_4);
    assume { Resolve4.resolve trail_4 };
    _60 <- _61;
    _58 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 301 19 301 47] IsSat0.is_sat _59 _60);
    goto BB28
  }
  BB25 {
    assume { Resolve3.resolve f_2 };
    assume { Resolve4.resolve trail_4 };
    absurd
  }
  BB26 {
    next_53 <- Type.core_option_option_Some_0 _47;
    _55 <- borrow_mut ( * trail_4);
    trail_4 <- { trail_4 with current = ( ^ _55) };
    _56 <- next_53;
    _57 <-  * f_2;
    assume { Resolve3.resolve f_2 };
    _54 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 294 16 294 43] EnqDecision0.enq_decision _55 _56 _57);
    goto BB27
  }
  BB27 {
    assume { Resolve4.resolve trail_4 };
    _46 <- ();
    _0 <- Type.CreuSat_Solver_SatResult_Unknown;
    goto BB35
  }
  BB28 {
    switch (_58)
      | False -> goto BB32
      | _ -> goto BB29
      end
  }
  BB29 {
    _63 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 302 42 302 52] New0.new ());
    goto BB30
  }
  BB30 {
    _0 <- Type.CreuSat_Solver_SatResult_Sat _63;
    goto BB31
  }
  BB31 {
    goto BB33
  }
  BB32 {
    _0 <- Type.CreuSat_Solver_SatResult_Err;
    goto BB33
  }
  BB33 {
    goto BB35
  }
  BB34 {
    goto BB35
  }
  BB35 {
    return _0
  }
  
end
module CreuSat_Solver_Impl0_Inner_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicFormula_Impl2_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_Impl2_SatInner_Interface as SatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = uint8, type a = Type.alloc_alloc_global,
  axiom .
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant3
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val inner [@cfg:stackify] (self : borrowed (Type.creusat_solver_solver)) (formula : borrowed (Type.creusat_formula_formula)) (decisions : Type.creusat_decision_decisions) (trail : Type.creusat_trail_trail) (watches : Type.creusat_watches_watches) : Type.creusat_solver_satresult
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 313 4 313 50] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula)) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 314 4 314 36] Invariant0.invariant' ( * formula)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 315 4 315 55] Invariant1.invariant' decisions (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 316 4 316 42] Invariant2.invariant' trail ( * formula)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 317 4 317 44] Invariant3.invariant' watches ( * formula)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 318 4 318 55] Invariant1.invariant' decisions (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula)))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 319 4 323 7] match (result) with
      | Type.CreuSat_Solver_SatResult_Sat v -> SatInner0.sat_inner ( ^ formula) (Model0.model v) /\ Equisat0.equisat ( * formula) ( ^ formula) /\ EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( * formula)
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable ( ^ formula) /\ Equisat0.equisat ( * formula) ( ^ formula)
      | _ -> true
      end }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 324 4 324 41] Equisat0.equisat ( * formula) ( ^ formula) }
    
end
module CreuSat_Solver_Impl0_Inner
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner2 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model7 with function Model0.model = Model10.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner1 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant7 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant7.invariant'
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant8 with function Model0.model = Model6.model,
  function Model1.model = Model7.model
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate SatInner0.sat_inner = SatInner2.sat_inner,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model6.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant7.invariant',
  predicate Invariant1.invariant' = Invariant8.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = uint8, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model8 with function Model0.model = Model0.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model6.model,
  function Model1.model = Model7.model, predicate Sat0.sat = Sat0.sat
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model3.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model4.model,
  function Model1.model = Model8.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model6.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model4.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model4.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant5 with function Model0.model = Model8.model
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant4 with function Model0.model = Model7.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model1 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model1.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model9.model,
  function Model1.model = Model6.model, function Model2.model = Model7.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecisionMirror as InvariantNoDecisionMirror0 with function Model0.model = Model8.model,
  function Model1.model = Model4.model, predicate Invariant0.invariant' = Invariant6.invariant',
  function Model2.model = Model3.model, function Model3.model = Model6.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Sat0.sat = Sat0.sat, predicate Sorted0.sorted = Sorted0.sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model0.model = Model4.model,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant, function Model1.model = Model3.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model8.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant4.invariant',
  function Model0.model = Model7.model
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror as InvariantMirror0 with function Model0.model = Model6.model,
  predicate Invariant0.invariant' = Invariant4.invariant', function Model1.model = Model7.model
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model7.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  clone CreuSat_Logic_LogicFormula_Impl2_SatInner as SatInner0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl2_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant3 with function Model0.model = Model5.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant2 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model3.model, function Model1.model = Model4.model,
  predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant1 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  function Model0.model = Model1.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve6 with type t = uint8
  clone CreuSat_Logic_LogicAssignments_Impl1_Complete as Complete0 with function Model0.model = Model8.model,
  predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicFormula_Impl2_Sat as Sat1 with function Model0.model = Model1.model,
  function Model1.model = Model8.model,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve5 with type t = uint8, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve6.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusat_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.creusat_solver_solver
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.creusat_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_decision_decisions
  clone CreuSat_Solver_Impl0_OuterLoop_Interface as OuterLoop0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant3.invariant',
  predicate Invariant3.invariant' = Invariant1.invariant', predicate Equisat0.equisat = Equisat0.equisat,
  predicate Sat0.sat = Sat1.sat, predicate Complete0.complete = Complete0.complete,
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  let rec cfg inner [@cfg:stackify] [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 325 4 327 18] (self : borrowed (Type.creusat_solver_solver)) (formula : borrowed (Type.creusat_formula_formula)) (decisions : Type.creusat_decision_decisions) (trail : Type.creusat_trail_trail) (watches : Type.creusat_watches_watches) : Type.creusat_solver_satresult
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 313 4 313 50] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula)) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 314 4 314 36] Invariant0.invariant' ( * formula)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 315 4 315 55] Invariant1.invariant' decisions (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 316 4 316 42] Invariant2.invariant' trail ( * formula)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 317 4 317 44] Invariant3.invariant' watches ( * formula)}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 318 4 318 55] Invariant1.invariant' decisions (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula)))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 319 4 323 7] match (result) with
      | Type.CreuSat_Solver_SatResult_Sat v -> SatInner0.sat_inner ( ^ formula) (Model0.model v) /\ Equisat0.equisat ( * formula) ( ^ formula) /\ EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( * formula)
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable ( ^ formula) /\ Equisat0.equisat ( * formula) ( ^ formula)
      | _ -> true
      end }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 324 4 324 41] Equisat0.equisat ( * formula) ( ^ formula) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.creusat_solver_satresult;
  var self_1 : borrowed (Type.creusat_solver_solver);
  var formula_2 : borrowed (Type.creusat_formula_formula);
  var decisions_3 : Type.creusat_decision_decisions;
  var trail_4 : Type.creusat_trail_trail;
  var watches_5 : Type.creusat_watches_watches;
  ghost var old_f_6 : borrowed (Type.creusat_formula_formula);
  var _7 : ();
  var _8 : ();
  var _9 : ();
  var _10 : Type.creusat_solver_satresult;
  var _11 : borrowed (Type.creusat_solver_solver);
  var _12 : borrowed (Type.creusat_formula_formula);
  var _13 : borrowed (Type.creusat_decision_decisions);
  var _14 : borrowed (Type.creusat_decision_decisions);
  var _15 : borrowed (Type.creusat_trail_trail);
  var _16 : borrowed (Type.creusat_trail_trail);
  var _17 : borrowed (Type.creusat_watches_watches);
  var _18 : borrowed (Type.creusat_watches_watches);
  var _19 : isize;
  var _20 : ();
  var _21 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var o_22 : Type.creusat_solver_satresult;
  var _23 : ();
  {
    self_1 <- self;
    formula_2 <- formula;
    decisions_3 <- decisions;
    trail_4 <- trail;
    watches_5 <- watches;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    _7 <- ();
    old_f_6 <- ghost ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 328 20 328 38] formula_2);
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    invariant equi { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 329 8 329 59] Equisat0.equisat ( * old_f_6) ( * formula_2) };
    invariant num_vars { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 330 8 330 68] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula_2)) = UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * old_f_6)) };
    invariant maintains_f { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 331 8 331 54] Invariant0.invariant' ( * formula_2) };
    invariant maintains_t { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 332 8 332 60] Invariant2.invariant' trail_4 ( * formula_2) };
    invariant maintains_w { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 333 8 333 62] Invariant3.invariant' watches_5 ( * formula_2) };
    invariant maintains_d { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 334 8 334 73] Invariant1.invariant' decisions_3 (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars ( * formula_2))) };
    invariant proph_f { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 335 8 335 57]  ^ formula_2 =  ^ old_f_6 };
    _11 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _11) };
    _12 <- borrow_mut ( * formula_2);
    formula_2 <- { formula_2 with current = ( ^ _12) };
    _14 <- borrow_mut decisions_3;
    decisions_3 <-  ^ _14;
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    _16 <- borrow_mut trail_4;
    trail_4 <-  ^ _16;
    _15 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _15) };
    _18 <- borrow_mut watches_5;
    watches_5 <-  ^ _18;
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _10 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 337 18 337 84] OuterLoop0.outer_loop _11 _12 _13 _15 _17);
    goto BB10
  }
  BB10 {
    assume { Resolve0.resolve _14 };
    assume { Resolve1.resolve _16 };
    assume { Resolve2.resolve _18 };
    switch (_10)
      | Type.CreuSat_Solver_SatResult_Sat _ -> goto BB13
      | Type.CreuSat_Solver_SatResult_Unknown -> goto BB12
      | _ -> goto BB11
      end
  }
  BB11 {
    assume { Resolve3.resolve self_1 };
    assume { Resolve4.resolve formula_2 };
    o_22 <- _10;
    _0 <- o_22;
    goto BB16
  }
  BB12 {
    _9 <- ();
    goto BB15
  }
  BB13 {
    assume { Resolve3.resolve self_1 };
    assume { Resolve4.resolve formula_2 };
    assume { Resolve5.resolve _21 };
    _21 <- Type.creusat_assignments_assignments_Assignments_0 (Type.creusat_trail_trail_Trail_assignments trail_4);
    _0 <- Type.CreuSat_Solver_SatResult_Sat _21;
    goto BB14
  }
  BB14 {
    goto BB17
  }
  BB15 {
    goto BB9
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    return _0
  }
  
end
module CreuSat_Trail_Impl0_New_Interface
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant2
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  val new [@cfg:stackify] (f : Type.creusat_formula_formula) (a : Type.creusat_assignments_assignments) : Type.creusat_trail_trail
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 42 4 42 30] Invariant0.invariant' f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 43 4 43 32] Invariant1.invariant' a f}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 44 4 44 36] Invariant2.invariant' result f }
    
end
module CreuSat_Watches_Impl0_New_Interface
  use prelude.Prelude
  use Type
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (f : Type.creusat_formula_formula) : Type.creusat_watches_watches
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 74 4 74 36] Invariant0.invariant' result f }
    
end
module CreuSat_Watches_Impl0_InitWatches_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant1 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  val init_watches [@cfg:stackify] (self : borrowed (Type.creusat_watches_watches)) (f : Type.creusat_formula_formula) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 132 4 132 42] Invariant0.invariant' ( * self) f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 133 4 133 44] UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 134 4 134 30] Invariant1.invariant' f}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 132 4 132 42] Invariant0.invariant' ( ^ self) f }
    
end
module CreuSat_Trail_Impl0_LearnUnits_Interface
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror_Interface as InvariantMirror0
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant_Interface as Invariant2 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  axiom .
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant_Interface as Invariant1
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant_Interface as Invariant0
  val learn_units [@cfg:stackify] (self : borrowed (Type.creusat_trail_trail)) (f : Type.creusat_formula_formula) (d : borrowed (Type.creusat_decision_decisions)) : Type.core_option_option bool
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 329 4 329 42] Invariant0.invariant' ( * self) f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 330 4 330 48] Invariant1.invariant' ( * d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 331 4 331 30] Invariant2.invariant' f}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 329 4 329 42] Invariant0.invariant' ( ^ self) f }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 330 4 330 48] Invariant1.invariant' ( ^ d) (UInt64.to_int (Type.creusat_formula_formula_Formula_num_vars f)) }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/trail.rs" 332 4 335 7] match (result) with
      | Type.Core_Option_Option_Some (True) -> NotSatisfiable0.not_satisfiable f
      | _ -> true
      end }
    
end
module CreuSat_Solver_Solver_Interface
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable_Interface as NotSatisfiable0
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat_Interface as Equisat0
  clone CreuSat_Logic_LogicFormula_FormulaSatInner_Interface as FormulaSatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = uint8, type a = Type.alloc_alloc_global,
  axiom .
  clone CreuSat_Logic_LogicFormula_Impl0_Model_Interface as Model0
  val solver [@cfg:stackify] (formula : borrowed (Type.creusat_formula_formula)) : Type.creusat_solver_satresult
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 351 0 355 3] match (result) with
      | Type.CreuSat_Solver_SatResult_Sat assn -> FormulaSatInner0.formula_sat_inner (Model0.model ( ^ formula)) (Model1.model assn) /\ Equisat0.equisat ( * formula) ( ^ formula)
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable ( ^ formula) /\ Equisat0.equisat ( * formula) ( ^ formula)
      | _ -> true
      end }
    
end
module CreuSat_Solver_Solver
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl1_SatInner as SatInner1 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone CreuSat_Logic_LogicClause_Impl2_SatInner as SatInner0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicFormula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_Logic_Unset as Unset0
  clone CreuSat_Logic_LogicAssignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreuSat_Logic_LogicFormula_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss1 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner
  clone CreuSat_Logic_LogicClause_EquisatExtensionInner as EquisatExtensionInner0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss1.eventually_sat_complete_no_ass
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicFormula_Impl2_SatInner as SatInner2 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreuSat_Logic_LogicClause_Impl2_EquisatExtension as EquisatExtension0 with function Model0.model = Model0.model,
  predicate EquisatExtensionInner0.equisat_extension_inner = EquisatExtensionInner0.equisat_extension_inner
  clone CreuSat_Logic_LogicFormula_Impl2_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreuSat_Logic_LogicFormula_Impl2_NotSatisfiable as NotSatisfiable0 with function Model0.model = Model3.model,
  predicate EquisatExtension0.equisat_extension = EquisatExtension0.equisat_extension
  clone CreuSat_Logic_LogicFormula_Impl2_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = uint8, type a = Type.alloc_alloc_global, axiom .
  use mach.int.Int64
  use mach.int.UInt64
  clone CreuSat_Logic_LogicLit_Impl1_UnsatInner as UnsatInner0 with function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicUtil_SortedRange as SortedRange0
  clone CreuSat_Logic_LogicTrail_Impl0_Invariant as Invariant8 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone CreuSat_Logic_LogicLit_Impl1_Invariant as Invariant7 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_TrailEntriesAreAssignedInner as TrailEntriesAreAssignedInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_ClausePostWithRegardsToInner as ClausePostWithRegardsToInner0 with function Model0.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate SatInner0.sat_inner = SatInner1.sat_inner,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreuSat_Logic_LogicLit_Impl1_LitIdxIn as LitIdxIn0 with function Model0.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_LitNotInLessInner as LitNotInLessInner0 with function Model0.model = Model2.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in
  clone CreuSat_Logic_LogicTrail_Impl1_Invariant as Invariant6 with predicate Invariant0.invariant' = Invariant7.invariant',
  predicate Invariant1.invariant' = Invariant8.invariant'
  clone CreuSat_Logic_LogicTrail_CrefsInRange as CrefsInRange0 with predicate Invariant0.invariant' = Invariant6.invariant'
  clone CreuSat_Logic_LogicClause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicClause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant7.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model11 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicUtil_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreuSat_Logic_LogicAssignments_Impl0_Model as Model6 with function Model0.model = Model1.model
  clone CreuSat_Logic_LogicLit_Impl1_Sat as Sat0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreuSat_Logic_LogicTrail_LitIsUniqueInner as LitIsUniqueInner0 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreuSat_Logic_LogicTrail_UnitAreSat as UnitAreSat0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model, predicate Sat0.sat = Sat0.sat
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_DecisionsAreSorted as DecisionsAreSorted0 with function Model0.model = Model7.model,
  predicate Sorted0.sorted = Sorted0.sorted
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = Type.creusat_trail_step,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_TrailEntriesAreAssigned as TrailEntriesAreAssigned0 with function Model0.model = Model8.model,
  function Model1.model = Model6.model,
  predicate TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner = TrailEntriesAreAssignedInner0.trail_entries_are_assigned_inner
  clone CreuSat_Logic_LogicTrail_LongArePostUnitInner as LongArePostUnitInner0 with function Model0.model = Model2.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner = ClausePostWithRegardsToInner0.clause_post_with_regards_to_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitIsUnique as LitIsUnique0 with function Model0.model = Model8.model,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner
  clone CreuSat_Logic_LogicTrail_Impl2_LitNotInLess as LitNotInLess0 with function Model0.model = Model8.model,
  predicate LitNotInLessInner0.lit_not_in_less_inner = LitNotInLessInner0.lit_not_in_less_inner
  clone CreuSat_Logic_LogicTrail_LitToLevelInvariant as LitToLevelInvariant0
  clone CreuSat_Logic_LogicTrail_TrailInvariant as TrailInvariant0 with predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreuSat_Logic_LogicClause_InvariantInternal as InvariantInternal0 with predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone CreuSat_Logic_LogicWatches_WatchesInvariantInternal as WatchesInvariantInternal0 with function Model0.model = Model11.model,
  function Model1.model = Model2.model, function Model2.model = Model3.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model10 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.creusat_decision_node,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecisionMirror as InvariantNoDecisionMirror0 with function Model0.model = Model6.model,
  function Model1.model = Model8.model, predicate Invariant0.invariant' = Invariant6.invariant',
  function Model2.model = Model7.model, function Model3.model = Model2.model,
  predicate LitIdxIn0.lit_idx_in = LitIdxIn0.lit_idx_in,
  predicate LitIsUniqueInner0.lit_is_unique_inner = LitIsUniqueInner0.lit_is_unique_inner,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate Sat0.sat = Sat0.sat, predicate Sorted0.sorted = Sorted0.sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat
  clone CreuSat_Logic_LogicAssignments_Impl1_Invariant as Invariant1 with function Model0.model = Model6.model
  clone CreuSat_Logic_LogicTrail_Impl2_InvariantNoDecision as InvariantNoDecision0 with predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror,
  predicate Invariant0.invariant' = Invariant1.invariant', function Model0.model = Model8.model,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant, function Model1.model = Model7.model,
  predicate LitToLevelInvariant0.lit_to_level_invariant = LitToLevelInvariant0.lit_to_level_invariant,
  predicate LitNotInLess0.lit_not_in_less = LitNotInLess0.lit_not_in_less,
  predicate LitIsUnique0.lit_is_unique = LitIsUnique0.lit_is_unique, function Model2.model = Model6.model,
  predicate LongArePostUnitInner0.long_are_post_unit_inner = LongArePostUnitInner0.long_are_post_unit_inner,
  predicate TrailEntriesAreAssigned0.trail_entries_are_assigned = TrailEntriesAreAssigned0.trail_entries_are_assigned,
  predicate DecisionsAreSorted0.decisions_are_sorted = DecisionsAreSorted0.decisions_are_sorted,
  predicate UnitAreSat0.unit_are_sat = UnitAreSat0.unit_are_sat, axiom .
  clone CreuSat_Logic_LogicClause_Impl2_Invariant as Invariant5 with function Model0.model = Model3.model,
  predicate InvariantInternal0.invariant_internal = InvariantInternal0.invariant_internal
  clone CreuSat_Logic_LogicFormula_FormulaInvariant as FormulaInvariant0 with predicate Invariant0.invariant' = Invariant5.invariant',
  function Model0.model = Model3.model
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant as Invariant4 with function Model0.model = Model10.model,
  predicate WatchesInvariantInternal0.watches_invariant_internal = WatchesInvariantInternal0.watches_invariant_internal
  clone CreuSat_Logic_LogicDecision_Impl0_Invariant as Invariant3 with function Model0.model = Model9.model
  clone CreuSat_Logic_LogicTrail_Impl2_Invariant as Invariant2 with predicate InvariantNoDecision0.invariant_no_decision = InvariantNoDecision0.invariant_no_decision,
  function Model0.model = Model7.model, function Model1.model = Model8.model,
  predicate InvariantNoDecisionMirror0.invariant_no_decision_mirror = InvariantNoDecisionMirror0.invariant_no_decision_mirror
  clone CreuSat_Logic_LogicFormula_Impl2_InvariantMirror as InvariantMirror0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant5.invariant', function Model1.model = Model3.model
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicFormula_Impl2_Invariant as Invariant0 with predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror,
  function Model0.model = Model0.model,
  predicate FormulaInvariant0.formula_invariant = FormulaInvariant0.formula_invariant, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreuSat_Solver_Impl0_Inner_Interface as Inner0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate Invariant3.invariant' = Invariant4.invariant', function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate Equisat0.equisat = Equisat0.equisat,
  predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass,
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Solver_Impl0_New_Interface as New4
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusat_decision_decisions
  clone CreuSat_Trail_Impl0_LearnUnits_Interface as LearnUnits0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant', predicate Invariant2.invariant' = Invariant0.invariant',
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Watches_Impl0_InitWatches_Interface as InitWatches0 with predicate Invariant0.invariant' = Invariant4.invariant',
  predicate Invariant1.invariant' = Invariant0.invariant',
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Watches_Impl0_New_Interface as New3 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone CreuSat_Decision_Impl1_New_Interface as New2 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant',
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Trail_Impl0_New_Interface as New1 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreuSat_Assignments_Impl2_New_Interface as New0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant',
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.creusat_formula_formula
  clone CreuSat_Formula_Impl2_CheckFormulaInvariant_Interface as CheckFormulaInvariant0 with function Model0.model = Model5.model,
  function Model1.model = Model1.model,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner,
  predicate NotSatisfiable0.not_satisfiable = NotSatisfiable0.not_satisfiable,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate InvariantMirror0.invariant_mirror = InvariantMirror0.invariant_mirror
  let rec cfg solver [@cfg:stackify] [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 356 0 356 49] (formula : borrowed (Type.creusat_formula_formula)) : Type.creusat_solver_satresult
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 351 0 355 3] match (result) with
      | Type.CreuSat_Solver_SatResult_Sat assn -> FormulaSatInner0.formula_sat_inner (Model0.model ( ^ formula)) (Model1.model assn) /\ Equisat0.equisat ( * formula) ( ^ formula)
      | Type.CreuSat_Solver_SatResult_Unsat -> NotSatisfiable0.not_satisfiable ( ^ formula) /\ Equisat0.equisat ( * formula) ( ^ formula)
      | _ -> true
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.creusat_solver_satresult;
  var formula_1 : borrowed (Type.creusat_formula_formula);
  var _2 : ();
  var _3 : Type.creusat_solver_satresult;
  var _4 : Type.creusat_formula_formula;
  var _5 : isize;
  var o_6 : Type.creusat_solver_satresult;
  var _7 : ();
  var trail_8 : Type.creusat_trail_trail;
  var _9 : Type.creusat_formula_formula;
  var _10 : Type.creusat_assignments_assignments;
  var _11 : Type.creusat_formula_formula;
  var decisions_12 : Type.creusat_decision_decisions;
  var _13 : Type.creusat_formula_formula;
  var watches_14 : Type.creusat_watches_watches;
  var _15 : Type.creusat_formula_formula;
  var _16 : ();
  var _17 : borrowed (Type.creusat_watches_watches);
  var _18 : Type.creusat_formula_formula;
  var _19 : ();
  var _20 : Type.core_option_option bool;
  var _21 : borrowed (Type.creusat_trail_trail);
  var _22 : Type.creusat_formula_formula;
  var _23 : borrowed (Type.creusat_decision_decisions);
  var _24 : borrowed (Type.creusat_decision_decisions);
  var _25 : isize;
  var _26 : ();
  var _27 : ();
  var solver_28 : Type.creusat_solver_solver;
  var _29 : Type.creusat_formula_formula;
  var _30 : borrowed (Type.creusat_solver_solver);
  var _31 : borrowed (Type.creusat_formula_formula);
  var _32 : Type.creusat_decision_decisions;
  var _33 : Type.creusat_trail_trail;
  var _34 : Type.creusat_watches_watches;
  {
    formula_1 <- formula;
    goto BB0
  }
  BB0 {
    _4 <-  * formula_1;
    _3 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 357 10 357 43] CheckFormulaInvariant0.check_formula_invariant _4);
    goto BB1
  }
  BB1 {
    switch (_3)
      | Type.CreuSat_Solver_SatResult_Unknown -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve formula_1 };
    o_6 <- _3;
    _0 <- o_6;
    goto BB26
  }
  BB3 {
    _2 <- ();
    goto BB4
  }
  BB4 {
    _9 <-  * formula_1;
    _11 <-  * formula_1;
    _10 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 361 40 361 65] New0.new _11);
    goto BB5
  }
  BB5 {
    trail_8 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 361 20 361 66] New1.new _9 _10);
    goto BB6
  }
  BB6 {
    _13 <-  * formula_1;
    decisions_12 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 362 24 362 47] New2.new _13);
    goto BB7
  }
  BB7 {
    _15 <-  * formula_1;
    watches_14 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 363 22 363 43] New3.new _15);
    goto BB8
  }
  BB8 {
    _17 <- borrow_mut watches_14;
    watches_14 <-  ^ _17;
    _18 <-  * formula_1;
    _16 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 364 4 364 33] InitWatches0.init_watches _17 _18);
    goto BB9
  }
  BB9 {
    _21 <- borrow_mut trail_8;
    trail_8 <-  ^ _21;
    _22 <-  * formula_1;
    _24 <- borrow_mut decisions_12;
    decisions_12 <-  ^ _24;
    _23 <- borrow_mut ( * _24);
    _24 <- { _24 with current = ( ^ _23) };
    _20 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 365 10 365 52] LearnUnits0.learn_units _21 _22 _23);
    goto BB10
  }
  BB10 {
    assume { Resolve1.resolve _24 };
    switch (_20)
      | Type.Core_Option_Option_None -> goto BB14
      | Type.Core_Option_Option_Some _ -> goto BB11
      end
  }
  BB11 {
    assume { Resolve0.resolve formula_1 };
    switch (Type.core_option_option_Some_0 _20)
      | False -> goto BB12
      | _ -> goto BB15
      end
  }
  BB12 {
    _0 <- Type.CreuSat_Solver_SatResult_Err;
    goto BB22
  }
  BB13 {
    assume { Resolve0.resolve formula_1 };
    absurd
  }
  BB14 {
    _19 <- ();
    _29 <-  * formula_1;
    solver_28 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 370 21 370 41] New4.new _29);
    goto BB16
  }
  BB15 {
    _0 <- Type.CreuSat_Solver_SatResult_Unsat;
    goto BB22
  }
  BB16 {
    _30 <- borrow_mut solver_28;
    solver_28 <-  ^ _30;
    _31 <- borrow_mut ( * formula_1);
    formula_1 <- { formula_1 with current = ( ^ _31) };
    _32 <- decisions_12;
    _33 <- trail_8;
    _34 <- watches_14;
    _0 <- ([#"/Users/xavier/Code/sat/CreuSAT/src/solver.rs" 371 4 371 52] Inner0.inner _30 _31 _32 _33 _34);
    goto BB17
  }
  BB17 {
    assume { Resolve0.resolve formula_1 };
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    goto BB28
  }
  BB22 {
    goto BB23
  }
  BB23 {
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB28
  }
  BB26 {
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    return _0
  }
  
end
module CreuSat_Watches_Impl0_MoveToEnd_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusat_watches_watcher,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.creusat_watches_watcher) (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Logic_LogicLit_Impl0_ToNegWatchidxLogic_Interface as ToNegWatchidxLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreuSat_Logic_LogicWatches_Impl0_Invariant_Interface as Invariant0
  val move_to_end [@cfg:stackify] (self : borrowed (Type.creusat_watches_watches)) (old_idx : usize) (old_pos : usize) (new_lit : Type.creusat_lit_lit) (_f : Type.creusat_formula_formula) : ()
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 118 4 118 43] Invariant0.invariant' ( * self) _f}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 119 4 119 54] IndexLogic0.index_logic new_lit < div 18446744073709551615 2}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 120 4 120 72] ToNegWatchidxLogic0.to_neg_watchidx_logic new_lit < Seq.length (Model0.model (Type.creusat_watches_watches_Watches_watches ( * self)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 121 4 121 49] UInt64.to_int old_idx < Seq.length (Model0.model (Type.creusat_watches_watches_Watches_watches ( * self)))}
    requires {[#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 122 4 122 62] UInt64.to_int old_pos < Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * self))) (UInt64.to_int old_idx)))}
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 118 4 118 43] Invariant0.invariant' ( ^ self) _f }
    ensures { [#"/Users/xavier/Code/sat/CreuSAT/src/watches.rs" 123 4 123 93] Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( ^ self))) (UInt64.to_int old_idx))) = Seq.length (Model1.model (Seq.get (Model0.model (Type.creusat_watches_watches_Watches_watches ( * self))) (UInt64.to_int old_idx))) }
    
end
module CreuSat_Clause_Impl1
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_lit_lit,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Clause_Impl0_Output as Output0
  clone CreuSat_Logic_LogicClause_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicClause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusat_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreuSat_Clause_Impl1_IndexMut_Interface as IndexMut0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusat_clause_clause,
  type idx = usize, val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
end
module CreuSat_Formula_Impl1
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusat_clause_clause,
  type a = Type.alloc_alloc_global, axiom .
  clone CreuSat_Formula_Impl0_Output as Output0
  clone CreuSat_Logic_LogicFormula_Impl0_ModelTy as ModelTy0
  clone CreuSat_Logic_LogicFormula_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusat_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreuSat_Formula_Impl1_IndexMut_Interface as IndexMut0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusat_formula_formula,
  type idx = usize, val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module CreuSat_Decision_Impl2
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.creusat_decision_node
  clone CreuSat_Decision_Impl2_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.creusat_decision_node,
  val clone' = Clone0.clone'
end
module CreuSat_Lit_Impl4
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.creusat_lit_lit
  clone CreuSat_Lit_Impl4_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.creusat_lit_lit, val clone' = Clone0.clone'
end
module CreuSat_Decision_Impl3
  
end
module CreuSat_Lit_Impl5
  
end
module CreuSat_Lit_Impl0_ModelTy
  use Type
  type modelTy  =
    Type.creusat_lit_lit
end
module CreuSat_Lit_Impl0
  use Type
  clone CreuSat_Lit_Impl0_ModelTy as ModelTy0
  clone CreuSat_Lit_Impl0_Model as Model0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.creusat_lit_lit,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusat_lit_lit,
  type modelTy = ModelTy0.modelTy
end
module Core_Cmp_PartialEq_Ne_Interface
  type self
  type rhs
  use prelude.Prelude
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module CreuSat_Lit_Impl2
  use Type
  clone CreuSat_Lit_Impl0_Model as Model1
  clone CreuSat_Lit_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusat_lit_lit,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Type.creusat_lit_lit, type rhs = Type.creusat_lit_lit
  clone CreuSat_Lit_Impl2_Eq_Interface as Eq0
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Type.creusat_lit_lit, type rhs = Type.creusat_lit_lit,
  val eq = Eq0.eq, function Model0.model = Model0.model, function Model1.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
end
module CreuSat_Lit_Impl3_Output
  use Type
  type output  =
    Type.creusat_lit_lit
end
module Core_Ops_Bit_Not_Output
  type self
  type output
end
module Core_Ops_Bit_Not_Not_Interface
  type self
  clone Core_Ops_Bit_Not_Output as Output0 with type self = self
  val not' [@cfg:stackify] (self : self) : Output0.output
    requires {false}
    
end
module CreuSat_Lit_Impl3
  use Type
  clone CreuSat_Logic_LogicLit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone CreuSat_Logic_LogicLit_Impl0_IndexLogic as IndexLogic0
  clone CreuSat_Lit_Impl3_Output as Output0
  clone CreuSat_Lit_Impl3_Not_Interface as Not0 with function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic
  clone Core_Ops_Bit_Not_Not_Interface as Not1 with type self = Type.creusat_lit_lit, val not' = Not0.not',
  type Output0.output = Output0.output
  clone Core_Ops_Bit_Not_Output as Output1 with type self = Type.creusat_lit_lit, type output = Output0.output
end
