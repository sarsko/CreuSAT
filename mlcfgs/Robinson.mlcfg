
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Robinson_Assignments_Assignments_Type
  use mach.int.Int
  use prelude.UInt8
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_assignments  =
    | C_Assignments (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)) usize
    
  let function assignments_0 (self : t_assignments) : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignments a _ -> a
      end
  let function assignments_1 (self : t_assignments) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignments _ a -> a
      end
end
module Core_Num_Impl12_Max_Stub
  use mach.int.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use mach.int.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module Robinson_Assignments_Impl0_ShallowModel_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  function shallow_model [#"../Robinson/src/assignments.rs" 19 4 19 50] (self : Robinson_Assignments_Assignments_Type.t_assignments) : Seq.seq uint8
    
end
module Robinson_Assignments_Impl0_ShallowModel_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  function shallow_model [#"../Robinson/src/assignments.rs" 19 4 19 50] (self : Robinson_Assignments_Assignments_Type.t_assignments) : Seq.seq uint8
    
end
module Robinson_Assignments_Impl0_ShallowModel
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function shallow_model [#"../Robinson/src/assignments.rs" 19 4 19 50] (self : Robinson_Assignments_Assignments_Type.t_assignments) : Seq.seq uint8
    
   =
    [#"../Robinson/src/assignments.rs" 18 4 18 12] ShallowModel0.shallow_model (Robinson_Assignments_Assignments_Type.assignments_0 self)
  val shallow_model [#"../Robinson/src/assignments.rs" 19 4 19 50] (self : Robinson_Assignments_Assignments_Type.t_assignments) : Seq.seq uint8
    ensures { result = shallow_model self }
    
end
module Robinson_Logic_Unset_Stub
  use mach.int.Int
  use prelude.UInt8
  predicate unset [#"../Robinson/src/logic.rs" 41 0 41 38] (v : uint8)
end
module Robinson_Logic_Unset_Interface
  use mach.int.Int
  use prelude.UInt8
  predicate unset [#"../Robinson/src/logic.rs" 41 0 41 38] (v : uint8)
end
module Robinson_Logic_Unset
  use mach.int.Int
  use prelude.UInt8
  predicate unset [#"../Robinson/src/logic.rs" 41 0 41 38] (v : uint8) =
    [#"../Robinson/src/logic.rs" 42 4 48 5] if UInt8.to_int v >= 2 then true else false
  val unset [#"../Robinson/src/logic.rs" 41 0 41 38] (v : uint8) : bool
    ensures { result = unset v }
    
end
module Robinson_Assignments_CompatibleInner_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  predicate compatible_inner [#"../Robinson/src/assignments.rs" 25 0 25 78] (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module Robinson_Assignments_CompatibleInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  predicate compatible_inner [#"../Robinson/src/assignments.rs" 25 0 25 78] (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module Robinson_Assignments_CompatibleInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  clone Robinson_Logic_Unset_Stub as Unset0
  predicate compatible_inner [#"../Robinson/src/assignments.rs" 25 0 25 78] (a : Seq.seq uint8) (a2 : Seq.seq uint8) =
    [#"../Robinson/src/assignments.rs" 27 8 28 43] Seq.length a = Seq.length a2 /\ (forall i : int . 0 <= i /\ i < Seq.length a -> Unset0.unset (Seq.get a i) \/ Seq.get a i = Seq.get a2 i)
  val compatible_inner [#"../Robinson/src/assignments.rs" 25 0 25 78] (a : Seq.seq uint8) (a2 : Seq.seq uint8) : bool
    ensures { result = compatible_inner a a2 }
    
end
module Robinson_Assignments_CompleteInner_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  predicate complete_inner [#"../Robinson/src/assignments.rs" 33 0 33 52] (a : Seq.seq uint8)
end
module Robinson_Assignments_CompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  predicate complete_inner [#"../Robinson/src/assignments.rs" 33 0 33 52] (a : Seq.seq uint8)
end
module Robinson_Assignments_CompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  clone Robinson_Logic_Unset_Stub as Unset0
  predicate complete_inner [#"../Robinson/src/assignments.rs" 33 0 33 52] (a : Seq.seq uint8) =
    [#"../Robinson/src/assignments.rs" 34 4 36 5] forall i : int . 0 <= i /\ i < Seq.length a -> not Unset0.unset (Seq.get a i)
  val complete_inner [#"../Robinson/src/assignments.rs" 33 0 33 52] (a : Seq.seq uint8) : bool
    ensures { result = complete_inner a }
    
end
module Robinson_Assignments_CompatibleCompleteInner_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  predicate compatible_complete_inner [#"../Robinson/src/assignments.rs" 40 0 40 87] (a : Seq.seq uint8) (a2 : Seq.seq uint8)
    
end
module Robinson_Assignments_CompatibleCompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  predicate compatible_complete_inner [#"../Robinson/src/assignments.rs" 40 0 40 87] (a : Seq.seq uint8) (a2 : Seq.seq uint8)
    
end
module Robinson_Assignments_CompatibleCompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  clone Robinson_Assignments_CompleteInner_Stub as CompleteInner0
  clone Robinson_Assignments_CompatibleInner_Stub as CompatibleInner0
  predicate compatible_complete_inner [#"../Robinson/src/assignments.rs" 40 0 40 87] (a : Seq.seq uint8) (a2 : Seq.seq uint8)
    
   =
    [#"../Robinson/src/assignments.rs" 41 4 41 49] CompatibleInner0.compatible_inner a a2 /\ CompleteInner0.complete_inner a2
  val compatible_complete_inner [#"../Robinson/src/assignments.rs" 40 0 40 87] (a : Seq.seq uint8) (a2 : Seq.seq uint8) : bool
    ensures { result = compatible_complete_inner a a2 }
    
end
module Robinson_Lit_Lit_Type
  use mach.int.Int
  use prelude.UIntSize
  type t_lit  =
    | C_Lit usize bool
    
  let function lit_idx (self : t_lit) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Lit a _ -> a
      end
  let function lit_polarity (self : t_lit) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Lit _ a -> a
      end
end
module Robinson_Clause_Clause_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_clause  =
    | C_Clause (Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global))
    
  let function clause_rest (self : t_clause) : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Clause a -> a
      end
end
module Robinson_Formula_Formula_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_formula  =
    | C_Formula (Alloc_Vec_Vec_Type.t_vec (Robinson_Clause_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global)) usize
    
  let function formula_num_vars (self : t_formula) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Formula _ a -> a
      end
  let function formula_clauses (self : t_formula) : Alloc_Vec_Vec_Type.t_vec (Robinson_Clause_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Formula a _ -> a
      end
end
module Robinson_Assignments_AssignmentsInvariant_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate assignments_invariant [#"../Robinson/src/assignments.rs" 45 0 45 71] (a : Seq.seq uint8) (f : Robinson_Formula_Formula_Type.t_formula)
    
end
module Robinson_Assignments_AssignmentsInvariant_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate assignments_invariant [#"../Robinson/src/assignments.rs" 45 0 45 71] (a : Seq.seq uint8) (f : Robinson_Formula_Formula_Type.t_formula)
    
end
module Robinson_Assignments_AssignmentsInvariant
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use mach.int.UInt64
  predicate assignments_invariant [#"../Robinson/src/assignments.rs" 45 0 45 71] (a : Seq.seq uint8) (f : Robinson_Formula_Formula_Type.t_formula)
    
   =
    [#"../Robinson/src/assignments.rs" 46 16 46 38] UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f) = Seq.length a
  val assignments_invariant [#"../Robinson/src/assignments.rs" 45 0 45 71] (a : Seq.seq uint8) (f : Robinson_Formula_Formula_Type.t_formula) : bool
    ensures { result = assignments_invariant a f }
    
end
module Robinson_Assignments_Impl1_Invariant_Stub
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  predicate invariant' [#"../Robinson/src/assignments.rs" 52 4 52 46] (self : Robinson_Assignments_Assignments_Type.t_assignments) (f : Robinson_Formula_Formula_Type.t_formula)
    
end
module Robinson_Assignments_Impl1_Invariant_Interface
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  predicate invariant' [#"../Robinson/src/assignments.rs" 52 4 52 46] (self : Robinson_Assignments_Assignments_Type.t_assignments) (f : Robinson_Formula_Formula_Type.t_formula)
    
end
module Robinson_Assignments_Impl1_Invariant
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate invariant' [#"../Robinson/src/assignments.rs" 52 4 52 46] (self : Robinson_Assignments_Assignments_Type.t_assignments) (f : Robinson_Formula_Formula_Type.t_formula)
    
   =
    [#"../Robinson/src/assignments.rs" 54 12 54 66] UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f) = Seq.length (ShallowModel0.shallow_model self) /\ UInt64.to_int (Robinson_Assignments_Assignments_Type.assignments_1 self) <= UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f)
  val invariant' [#"../Robinson/src/assignments.rs" 52 4 52 46] (self : Robinson_Assignments_Assignments_Type.t_assignments) (f : Robinson_Formula_Formula_Type.t_formula) : bool
    ensures { result = invariant' self f }
    
end
module Robinson_Assignments_Impl1_Compatible_Stub
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  predicate compatible [#"../Robinson/src/assignments.rs" 59 4 59 52] (self : Robinson_Assignments_Assignments_Type.t_assignments) (a2 : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Assignments_Impl1_Compatible_Interface
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  predicate compatible [#"../Robinson/src/assignments.rs" 59 4 59 52] (self : Robinson_Assignments_Assignments_Type.t_assignments) (a2 : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Assignments_Impl1_Compatible
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_CompatibleInner_Stub as CompatibleInner0
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate compatible [#"../Robinson/src/assignments.rs" 59 4 59 52] (self : Robinson_Assignments_Assignments_Type.t_assignments) (a2 : Robinson_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../Robinson/src/assignments.rs" 60 20 60 48] CompatibleInner0.compatible_inner (ShallowModel0.shallow_model self) (ShallowModel0.shallow_model a2)
  val compatible [#"../Robinson/src/assignments.rs" 59 4 59 52] (self : Robinson_Assignments_Assignments_Type.t_assignments) (a2 : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = compatible self a2 }
    
end
module Robinson_Assignments_Impl1_Complete_Stub
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  predicate complete [#"../Robinson/src/assignments.rs" 64 4 64 33] (self : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Assignments_Impl1_Complete_Interface
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  predicate complete [#"../Robinson/src/assignments.rs" 64 4 64 33] (self : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Assignments_Impl1_Complete
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use mach.int.Int
  use seq.Seq
  clone Robinson_Logic_Unset_Stub as Unset0
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate complete [#"../Robinson/src/assignments.rs" 64 4 64 33] (self : Robinson_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../Robinson/src/assignments.rs" 65 8 67 9] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> not Unset0.unset (Seq.get (ShallowModel0.shallow_model self) i)
  val complete [#"../Robinson/src/assignments.rs" 64 4 64 33] (self : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = complete self }
    
end
module Robinson_Assignments_Impl1_CompatibleComplete_Stub
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  predicate compatible_complete [#"../Robinson/src/assignments.rs" 71 4 71 61] (self : Robinson_Assignments_Assignments_Type.t_assignments) (a2 : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Assignments_Impl1_CompatibleComplete_Interface
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  predicate compatible_complete [#"../Robinson/src/assignments.rs" 71 4 71 61] (self : Robinson_Assignments_Assignments_Type.t_assignments) (a2 : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Assignments_Impl1_CompatibleComplete
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl1_Complete_Stub as Complete0
  clone Robinson_Assignments_Impl1_Compatible_Stub as Compatible0
  predicate compatible_complete [#"../Robinson/src/assignments.rs" 71 4 71 61] (self : Robinson_Assignments_Assignments_Type.t_assignments) (a2 : Robinson_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../Robinson/src/assignments.rs" 72 8 72 44] Compatible0.compatible self a2 /\ Complete0.complete a2
  val compatible_complete [#"../Robinson/src/assignments.rs" 71 4 71 61] (self : Robinson_Assignments_Assignments_Type.t_assignments) (a2 : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = compatible_complete self a2 }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Robinson_Assignments_Impl0_ShallowModelTy_Type
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  type shallowModelTy  =
    Seq.seq uint8
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val new [@cfg:stackify] (_1' : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val new [@cfg:stackify] (_1' : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type
  type t
  type a
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type
  type t
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Interface as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl9_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl9_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl9_Resolve
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use mach.int.Int
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel0.shallow_model self) i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module Robinson_Assignments_Impl2_Clone_Interface
  use mach.int.Int
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel1
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val clone' [@cfg:stackify] [#"../Robinson/src/assignments.rs" 81 4 81 31] (self : Robinson_Assignments_Assignments_Type.t_assignments) : Robinson_Assignments_Assignments_Type.t_assignments
    ensures { [#"../Robinson/src/assignments.rs" 78 4 78 89] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (ShallowModel0.shallow_model self) i = Seq.get (ShallowModel1.shallow_model result) i }
    ensures { [#"../Robinson/src/assignments.rs" 79 14 79 46] Seq.length (ShallowModel0.shallow_model self) = Seq.length (ShallowModel1.shallow_model result) }
    ensures { [#"../Robinson/src/assignments.rs" 80 14 80 34] UInt64.to_int (Robinson_Assignments_Assignments_Type.assignments_1 result) = UInt64.to_int (Robinson_Assignments_Assignments_Type.assignments_1 self) }
    
end
module Robinson_Assignments_Impl2_Clone
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = uint8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = uint8
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = uint8
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone CreusotContracts_Std1_Vec_Impl9_Resolve as Resolve0 with
    type t = uint8,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Resolve0.resolve = Resolve1.resolve,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = uint8,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Alloc_Vec_Impl0_New_Interface as New0 with
    type t = uint8,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg clone' [@cfg:stackify] [#"../Robinson/src/assignments.rs" 81 4 81 31] (self : Robinson_Assignments_Assignments_Type.t_assignments) : Robinson_Assignments_Assignments_Type.t_assignments
    ensures { [#"../Robinson/src/assignments.rs" 78 4 78 89] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (ShallowModel0.shallow_model self) i = Seq.get (ShallowModel1.shallow_model result) i }
    ensures { [#"../Robinson/src/assignments.rs" 79 14 79 46] Seq.length (ShallowModel0.shallow_model self) = Seq.length (ShallowModel1.shallow_model result) }
    ensures { [#"../Robinson/src/assignments.rs" 80 14 80 34] UInt64.to_int (Robinson_Assignments_Assignments_Type.assignments_1 result) = UInt64.to_int (Robinson_Assignments_Assignments_Type.assignments_1 self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Assignments_Assignments_Type.t_assignments;
  var self_1 : Robinson_Assignments_Assignments_Type.t_assignments;
  var out_5 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var i_6 : usize;
  var _7 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _16 : ();
  var _17 : borrowed (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global));
  var _18 : uint8;
  var _19 : uint8;
  var _20 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _21 : usize;
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _26 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    out_5 <- ([#"../Robinson/src/assignments.rs" 82 22 82 32] New0.new ());
    goto BB1
  }
  BB1 {
    i_6 <- ([#"../Robinson/src/assignments.rs" 83 27 83 28] (0 : usize));
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant loop_invariant { [#"../Robinson/src/assignments.rs" 84 36 84 55] UInt64.to_int i_6 <= Seq.length (ShallowModel0.shallow_model self_1) };
    invariant equality { [#"../Robinson/src/assignments.rs" 84 8 84 57] forall j : int . 0 <= j /\ j < UInt64.to_int i_6 -> Seq.get (ShallowModel2.shallow_model out_5) j = Seq.get (ShallowModel0.shallow_model self_1) j };
    invariant len { [#"../Robinson/src/assignments.rs" 86 25 86 43] Seq.length (ShallowModel2.shallow_model out_5) = UInt64.to_int i_6 };
    _13 <- i_6;
    _15 <- Robinson_Assignments_Assignments_Type.assignments_0 self_1;
    _14 <- ([#"../Robinson/src/assignments.rs" 87 18 87 30] Len0.len _15);
    goto BB5
  }
  BB5 {
    _12 <- ([#"../Robinson/src/assignments.rs" 87 14 87 30] _13 < _14);
    switch (_12)
      | False -> goto BB9
      | True -> goto BB6
      end
  }
  BB6 {
    _17 <- borrow_mut out_5;
    out_5 <-  ^ _17;
    _20 <- Robinson_Assignments_Assignments_Type.assignments_0 self_1;
    _21 <- i_6;
    _19 <- ([#"../Robinson/src/assignments.rs" 88 21 88 30] Index0.index _20 _21);
    goto BB7
  }
  BB7 {
    _18 <- _19;
    _16 <- ([#"../Robinson/src/assignments.rs" 88 12 88 31] Push0.push _17 _18);
    goto BB8
  }
  BB8 {
    i_6 <- ([#"../Robinson/src/assignments.rs" 89 12 89 18] i_6 + ([#"../Robinson/src/assignments.rs" 89 17 89 18] (1 : usize)));
    _11 <- ();
    goto BB4
  }
  BB9 {
    _7 <- ();
    assume { Resolve0.resolve _25 };
    _25 <- out_5;
    out_5 <- any Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
    _26 <- Robinson_Assignments_Assignments_Type.assignments_1 self_1;
    _0 <- Robinson_Assignments_Assignments_Type.C_Assignments _25 _26;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Robinson_Clause_Impl0_ShallowModel_Stub
  use seq.Seq
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  function shallow_model [#"../Robinson/src/clause.rs" 19 4 19 50] (self : Robinson_Clause_Clause_Type.t_clause) : Seq.seq (Robinson_Lit_Lit_Type.t_lit)
    
end
module Robinson_Clause_Impl0_ShallowModel_Interface
  use seq.Seq
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  function shallow_model [#"../Robinson/src/clause.rs" 19 4 19 50] (self : Robinson_Clause_Clause_Type.t_clause) : Seq.seq (Robinson_Lit_Lit_Type.t_lit)
    
end
module Robinson_Clause_Impl0_ShallowModel
  use seq.Seq
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function shallow_model [#"../Robinson/src/clause.rs" 19 4 19 50] (self : Robinson_Clause_Clause_Type.t_clause) : Seq.seq (Robinson_Lit_Lit_Type.t_lit)
    
   =
    [#"../Robinson/src/clause.rs" 18 4 18 12] ShallowModel0.shallow_model (Robinson_Clause_Clause_Type.clause_rest self)
  val shallow_model [#"../Robinson/src/clause.rs" 19 4 19 50] (self : Robinson_Clause_Clause_Type.t_clause) : Seq.seq (Robinson_Lit_Lit_Type.t_lit)
    ensures { result = shallow_model self }
    
end
module Robinson_Lit_Impl1_Invariant_Stub
  use mach.int.Int
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate invariant' [#"../Robinson/src/lit.rs" 35 4 35 42] (self : Robinson_Lit_Lit_Type.t_lit) (n : int)
end
module Robinson_Lit_Impl1_Invariant_Interface
  use mach.int.Int
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate invariant' [#"../Robinson/src/lit.rs" 35 4 35 42] (self : Robinson_Lit_Lit_Type.t_lit) (n : int)
end
module Robinson_Lit_Impl1_Invariant
  use mach.int.Int
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use mach.int.UInt64
  predicate invariant' [#"../Robinson/src/lit.rs" 35 4 35 42] (self : Robinson_Lit_Lit_Type.t_lit) (n : int) =
    [#"../Robinson/src/lit.rs" 36 20 36 33] UInt64.to_int (Robinson_Lit_Lit_Type.lit_idx self) < n
  val invariant' [#"../Robinson/src/lit.rs" 35 4 35 42] (self : Robinson_Lit_Lit_Type.t_lit) (n : int) : bool
    ensures { result = invariant' self n }
    
end
module Robinson_Clause_Impl1_VarsInRange_Stub
  use mach.int.Int
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate vars_in_range [#"../Robinson/src/clause.rs" 79 4 79 46] (self : Robinson_Clause_Clause_Type.t_clause) (n : int)
    
end
module Robinson_Clause_Impl1_VarsInRange_Interface
  use mach.int.Int
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate vars_in_range [#"../Robinson/src/clause.rs" 79 4 79 46] (self : Robinson_Clause_Clause_Type.t_clause) (n : int)
    
end
module Robinson_Clause_Impl1_VarsInRange
  use mach.int.Int
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use seq.Seq
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Invariant_Stub as Invariant0
  clone Robinson_Clause_Impl0_ShallowModel_Stub as ShallowModel0
  predicate vars_in_range [#"../Robinson/src/clause.rs" 79 4 79 46] (self : Robinson_Clause_Clause_Type.t_clause) (n : int)
    
   =
    [#"../Robinson/src/clause.rs" 80 8 83 9] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Invariant0.invariant' (Seq.get (ShallowModel0.shallow_model self) i) n
  val vars_in_range [#"../Robinson/src/clause.rs" 79 4 79 46] (self : Robinson_Clause_Clause_Type.t_clause) (n : int) : bool
    ensures { result = vars_in_range self n }
    
end
module Robinson_Clause_Impl1_Invariant_Stub
  use mach.int.Int
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate invariant' [#"../Robinson/src/clause.rs" 95 4 95 42] (self : Robinson_Clause_Clause_Type.t_clause) (n : int)
end
module Robinson_Clause_Impl1_Invariant_Interface
  use mach.int.Int
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate invariant' [#"../Robinson/src/clause.rs" 95 4 95 42] (self : Robinson_Clause_Clause_Type.t_clause) (n : int)
end
module Robinson_Clause_Impl1_Invariant
  use mach.int.Int
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_VarsInRange_Stub as VarsInRange0
  predicate invariant' [#"../Robinson/src/clause.rs" 95 4 95 42] (self : Robinson_Clause_Clause_Type.t_clause) (n : int)
   =
    [#"../Robinson/src/clause.rs" 96 8 96 29] VarsInRange0.vars_in_range self n
  val invariant' [#"../Robinson/src/clause.rs" 95 4 95 42] (self : Robinson_Clause_Clause_Type.t_clause) (n : int) : bool
    ensures { result = invariant' self n }
    
end
module Robinson_Formula_Impl1_Invariant_Stub
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate invariant' [#"../Robinson/src/formula.rs" 36 4 36 34] (self : Robinson_Formula_Formula_Type.t_formula)
end
module Robinson_Formula_Impl1_Invariant_Interface
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate invariant' [#"../Robinson/src/formula.rs" 36 4 36 34] (self : Robinson_Formula_Formula_Type.t_formula)
end
module Robinson_Formula_Impl1_Invariant
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use mach.int.Int
  use seq.Seq
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone Robinson_Clause_Impl1_Invariant_Stub as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate invariant' [#"../Robinson/src/formula.rs" 36 4 36 34] (self : Robinson_Formula_Formula_Type.t_formula) =
    [#"../Robinson/src/formula.rs" 37 8 40 9] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses self)) -> Invariant0.invariant' (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses self)) i) (UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars self))
  val invariant' [#"../Robinson/src/formula.rs" 36 4 36 34] (self : Robinson_Formula_Formula_Type.t_formula) : bool
    ensures { result = invariant' self }
    
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = UInt64.to_int n }
    ensures { forall i : int . 0 <= i /\ i < UInt64.to_int n -> Seq.get (ShallowModel0.shallow_model result) i = elem }
    
end
module Alloc_Vec_FromElem
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = UInt64.to_int n }
    ensures { forall i : int . 0 <= i /\ i < UInt64.to_int n -> Seq.get (ShallowModel0.shallow_model result) i = elem }
    
end
module Robinson_Assignments_Impl2_New_Interface
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Logic_Unset_Stub as Unset0
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  clone Robinson_Assignments_Impl1_Invariant_Stub as Invariant1
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant0
  val new [@cfg:stackify] [#"../Robinson/src/assignments.rs" 98 4 98 35] (f : Robinson_Formula_Formula_Type.t_formula) : Robinson_Assignments_Assignments_Type.t_assignments
    requires {[#"../Robinson/src/assignments.rs" 95 15 95 28] Invariant0.invariant' f}
    ensures { [#"../Robinson/src/assignments.rs" 96 14 96 34] Invariant1.invariant' result f }
    ensures { [#"../Robinson/src/assignments.rs" 97 4 97 84] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model result) -> Unset0.unset (Seq.get (ShallowModel0.shallow_model result) i) }
    
end
module Robinson_Assignments_Impl2_New
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use prelude.UIntSize
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel4 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Lit_Impl1_Invariant as Invariant3
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel3 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Alloc_Vec_FromElem_Interface as FromElem0 with
    type t = uint8,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Logic_Unset as Unset0
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ShallowModel as ShallowModel0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Invariant0.invariant' = Invariant2.invariant',
    val Max0.mAX' = Max0.mAX'
  let rec cfg new [@cfg:stackify] [#"../Robinson/src/assignments.rs" 98 4 98 35] (f : Robinson_Formula_Formula_Type.t_formula) : Robinson_Assignments_Assignments_Type.t_assignments
    requires {[#"../Robinson/src/assignments.rs" 95 15 95 28] Invariant0.invariant' f}
    ensures { [#"../Robinson/src/assignments.rs" 96 14 96 34] Invariant1.invariant' result f }
    ensures { [#"../Robinson/src/assignments.rs" 97 4 97 84] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model result) -> Unset0.unset (Seq.get (ShallowModel0.shallow_model result) i) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Assignments_Assignments_Type.t_assignments;
  var f_1 : Robinson_Formula_Formula_Type.t_formula;
  var _5 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _6 : usize;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _6 <- Robinson_Formula_Formula_Type.formula_num_vars f_1;
    _5 <- ([#"../Robinson/src/assignments.rs" 99 20 99 51] FromElem0.from_elem ([#"../Robinson/src/assignments.rs" 99 35 99 38] (2 : uint8)) _6);
    goto BB1
  }
  BB1 {
    _0 <- Robinson_Assignments_Assignments_Type.C_Assignments _5 ([#"../Robinson/src/assignments.rs" 99 53 99 54] (0 : usize));
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module Robinson_Decision_Decisions_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_decisions  =
    | C_Decisions (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  let function decisions_lit_order (self : t_decisions) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Decisions a -> a
      end
end
module Robinson_Decision_Impl0_Invariant_Stub
  use mach.int.Int
  use Robinson_Decision_Decisions_Type as Robinson_Decision_Decisions_Type
  predicate invariant' [#"../Robinson/src/decision.rs" 13 4 13 42] (self : Robinson_Decision_Decisions_Type.t_decisions) (n : int)
    
end
module Robinson_Decision_Impl0_Invariant_Interface
  use mach.int.Int
  use Robinson_Decision_Decisions_Type as Robinson_Decision_Decisions_Type
  predicate invariant' [#"../Robinson/src/decision.rs" 13 4 13 42] (self : Robinson_Decision_Decisions_Type.t_decisions) (n : int)
    
end
module Robinson_Decision_Impl0_Invariant
  use mach.int.Int
  use Robinson_Decision_Decisions_Type as Robinson_Decision_Decisions_Type
  use seq.Seq
  use mach.int.UInt64
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate invariant' [#"../Robinson/src/decision.rs" 13 4 13 42] (self : Robinson_Decision_Decisions_Type.t_decisions) (n : int)
    
   =
    [#"../Robinson/src/decision.rs" 14 8 18 9] Seq.length (ShallowModel0.shallow_model (Robinson_Decision_Decisions_Type.decisions_lit_order self)) = n /\ (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Robinson_Decision_Decisions_Type.decisions_lit_order self)) -> UInt64.to_int (Seq.get (ShallowModel0.shallow_model (Robinson_Decision_Decisions_Type.decisions_lit_order self)) i) < n)
  val invariant' [#"../Robinson/src/decision.rs" 13 4 13 42] (self : Robinson_Decision_Decisions_Type.t_decisions) (n : int) : bool
    ensures { result = invariant' self n }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Robinson_Assignments_Impl2_FindUnassigned_Interface
  use prelude.Borrow
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use Robinson_Decision_Decisions_Type as Robinson_Decision_Decisions_Type
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel1
  clone Robinson_Logic_Unset_Stub as Unset0
  clone Robinson_Decision_Impl0_Invariant_Stub as Invariant1
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone Robinson_Assignments_Impl1_Complete_Stub as Complete0
  clone Robinson_Assignments_Impl1_Invariant_Stub as Invariant0
  val find_unassigned [@cfg:stackify] [#"../Robinson/src/assignments.rs" 108 4 108 75] (self : borrowed (Robinson_Assignments_Assignments_Type.t_assignments)) (d : Robinson_Decision_Decisions_Type.t_decisions) (_f : Robinson_Formula_Formula_Type.t_formula) : usize
    requires {[#"../Robinson/src/assignments.rs" 103 4 103 43] Invariant0.invariant' ( * self) _f}
    requires {[#"../Robinson/src/assignments.rs" 104 15 104 31] not Complete0.complete ( * self)}
    requires {[#"../Robinson/src/assignments.rs" 105 15 105 41] Invariant1.invariant' d (Seq.length (ShallowModel0.shallow_model self))}
    ensures { [#"../Robinson/src/assignments.rs" 103 4 103 43] Invariant0.invariant' ( ^ self) _f }
    ensures { [#"../Robinson/src/assignments.rs" 106 14 106 64] UInt64.to_int result < Seq.length (ShallowModel0.shallow_model self) /\ Unset0.unset (Seq.get (ShallowModel0.shallow_model self) (UInt64.to_int result)) }
    ensures { [#"../Robinson/src/assignments.rs" 107 14 107 29] ShallowModel0.shallow_model self = ShallowModel1.shallow_model ( ^ self) }
    
end
module Robinson_Assignments_Impl2_FindUnassigned
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.UInt8
  use seq.Seq
  use mach.int.UInt64
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy4 with
    type t = uint8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy3 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output1 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue1 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds1 with
    type t = uint8
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy3.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = usize
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = usize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with
    type t = uint8,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate HasValue0.has_value = HasValue1.has_value,
    type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = usize,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Robinson_Assignments_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Logic_Unset as Unset0
  use Robinson_Decision_Decisions_Type as Robinson_Decision_Decisions_Type
  clone Robinson_Decision_Impl0_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Robinson_Assignments_Impl1_Complete as Complete0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Unset0.unset = Unset0.unset
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Assignments_Impl1_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg find_unassigned [@cfg:stackify] [#"../Robinson/src/assignments.rs" 108 4 108 75] (self : borrowed (Robinson_Assignments_Assignments_Type.t_assignments)) (d : Robinson_Decision_Decisions_Type.t_decisions) (_f : Robinson_Formula_Formula_Type.t_formula) : usize
    requires {[#"../Robinson/src/assignments.rs" 103 4 103 43] Invariant0.invariant' ( * self) _f}
    requires {[#"../Robinson/src/assignments.rs" 104 15 104 31] not Complete0.complete ( * self)}
    requires {[#"../Robinson/src/assignments.rs" 105 15 105 41] Invariant1.invariant' d (Seq.length (ShallowModel0.shallow_model self))}
    ensures { [#"../Robinson/src/assignments.rs" 103 4 103 43] Invariant0.invariant' ( ^ self) _f }
    ensures { [#"../Robinson/src/assignments.rs" 106 14 106 64] UInt64.to_int result < Seq.length (ShallowModel0.shallow_model self) /\ Unset0.unset (Seq.get (ShallowModel0.shallow_model self) (UInt64.to_int result)) }
    ensures { [#"../Robinson/src/assignments.rs" 107 14 107 29] ShallowModel0.shallow_model self = ShallowModel1.shallow_model ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : borrowed (Robinson_Assignments_Assignments_Type.t_assignments);
  var d_2 : Robinson_Decision_Decisions_Type.t_decisions;
  var _f_3 : Robinson_Formula_Formula_Type.t_formula;
  var _4 : ();
  var i_11 : usize;
  var _12 : ();
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var curr_19 : uint8;
  var _20 : uint8;
  var _21 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _22 : usize;
  var _23 : usize;
  var _24 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _25 : usize;
  var _26 : ();
  var _27 : bool;
  var _28 : uint8;
  var _29 : ();
  var _30 : usize;
  var _31 : usize;
  var _32 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _33 : usize;
  var _34 : ();
  var _35 : ();
  var _36 : ();
  var _37 : ();
  var _39 : bool;
  var _40 : usize;
  var _41 : usize;
  var _42 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _43 : ();
  var _44 : bool;
  var _45 : uint8;
  var _46 : uint8;
  var _47 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _48 : usize;
  var _49 : ();
  var _50 : ();
  var _51 : ();
  var _52 : ();
  var _53 : ();
  {
    self_1 <- self;
    d_2 <- d;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    i_11 <- Robinson_Assignments_Assignments_Type.assignments_1 ( * self_1);
    goto BB1
  }
  BB1 {
    invariant i_bound { [#"../Robinson/src/assignments.rs" 110 29 110 55] UInt64.to_int i_11 <= Seq.length (ShallowModel2.shallow_model (Robinson_Decision_Decisions_Type.decisions_lit_order d_2)) };
    _16 <- i_11;
    _18 <- Robinson_Decision_Decisions_Type.decisions_lit_order d_2;
    _17 <- ([#"../Robinson/src/assignments.rs" 111 18 111 35] Len0.len _18);
    goto BB2
  }
  BB2 {
    _15 <- ([#"../Robinson/src/assignments.rs" 111 14 111 35] _16 < _17);
    switch (_15)
      | False -> goto BB9
      | True -> goto BB3
      end
  }
  BB3 {
    _21 <- Robinson_Assignments_Assignments_Type.assignments_0 ( * self_1);
    _24 <- Robinson_Decision_Decisions_Type.decisions_lit_order d_2;
    _25 <- i_11;
    _23 <- ([#"../Robinson/src/assignments.rs" 112 30 112 44] Index0.index _24 _25);
    goto BB4
  }
  BB4 {
    _22 <- _23;
    _20 <- ([#"../Robinson/src/assignments.rs" 112 23 112 45] Index1.index _21 _22);
    goto BB5
  }
  BB5 {
    curr_19 <- _20;
    _28 <- curr_19;
    _27 <- ([#"../Robinson/src/assignments.rs" 113 15 113 24] _28 >= ([#"../Robinson/src/assignments.rs" 113 23 113 24] (2 : uint8)));
    switch (_27)
      | False -> goto BB8
      | True -> goto BB6
      end
  }
  BB6 {
    _30 <- i_11;
    self_1 <- { self_1 with current = (let Robinson_Assignments_Assignments_Type.C_Assignments a b =  * self_1 in Robinson_Assignments_Assignments_Type.C_Assignments a ([#"../Robinson/src/assignments.rs" 114 16 114 30] _30 + ([#"../Robinson/src/assignments.rs" 114 29 114 30] (1 : usize)))) };
    assume { Resolve0.resolve self_1 };
    _32 <- Robinson_Decision_Decisions_Type.decisions_lit_order d_2;
    _33 <- i_11;
    _31 <- ([#"../Robinson/src/assignments.rs" 115 23 115 37] Index0.index _32 _33);
    goto BB7
  }
  BB7 {
    _0 <- _31;
    goto BB17
  }
  BB8 {
    _26 <- ();
    i_11 <- ([#"../Robinson/src/assignments.rs" 117 12 117 18] i_11 + ([#"../Robinson/src/assignments.rs" 117 17 117 18] (1 : usize)));
    _14 <- ();
    goto BB1
  }
  BB9 {
    _12 <- ();
    i_11 <- ([#"../Robinson/src/assignments.rs" 121 12 121 13] (0 : usize));
    goto BB10
  }
  BB10 {
    invariant prev { [#"../Robinson/src/assignments.rs" 122 8 122 82] forall j : int . 0 <= j /\ j < UInt64.to_int i_11 -> not Unset0.unset (Seq.get (ShallowModel0.shallow_model self_1) j) };
    _40 <- i_11;
    _42 <- Robinson_Assignments_Assignments_Type.assignments_0 ( * self_1);
    _41 <- ([#"../Robinson/src/assignments.rs" 123 18 123 30] Len1.len _42);
    goto BB11
  }
  BB11 {
    _39 <- ([#"../Robinson/src/assignments.rs" 123 14 123 30] _40 < _41);
    switch (_39)
      | False -> goto BB16
      | True -> goto BB12
      end
  }
  BB12 {
    _47 <- Robinson_Assignments_Assignments_Type.assignments_0 ( * self_1);
    _48 <- i_11;
    _46 <- ([#"../Robinson/src/assignments.rs" 124 15 124 24] Index1.index _47 _48);
    goto BB13
  }
  BB13 {
    _45 <- _46;
    _44 <- ([#"../Robinson/src/assignments.rs" 124 15 124 29] _45 >= ([#"../Robinson/src/assignments.rs" 124 28 124 29] (2 : uint8)));
    switch (_44)
      | False -> goto BB15
      | True -> goto BB14
      end
  }
  BB14 {
    assume { Resolve0.resolve self_1 };
    _0 <- i_11;
    goto BB17
  }
  BB15 {
    _43 <- ();
    i_11 <- ([#"../Robinson/src/assignments.rs" 127 12 127 18] i_11 + ([#"../Robinson/src/assignments.rs" 127 17 127 18] (1 : usize)));
    _14 <- ();
    goto BB10
  }
  BB16 {
    assume { Resolve0.resolve self_1 };
    _37 <- ();
    absurd
  }
  BB17 {
    return _0
  }
  
end
module Robinson_Lit_Impl1_SatInner_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate sat_inner [#"../Robinson/src/lit.rs" 40 4 40 57] (self : Robinson_Lit_Lit_Type.t_lit) (a : Seq.seq uint8)
end
module Robinson_Lit_Impl1_SatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate sat_inner [#"../Robinson/src/lit.rs" 40 4 40 57] (self : Robinson_Lit_Lit_Type.t_lit) (a : Seq.seq uint8)
end
module Robinson_Lit_Impl1_SatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use mach.int.UInt64
  predicate sat_inner [#"../Robinson/src/lit.rs" 40 4 40 57] (self : Robinson_Lit_Lit_Type.t_lit) (a : Seq.seq uint8) =
    [#"../Robinson/src/lit.rs" 42 12 45 13] if Robinson_Lit_Lit_Type.lit_polarity self then
      UInt8.to_int (Seq.get a (UInt64.to_int (Robinson_Lit_Lit_Type.lit_idx self))) = 1
    else
      UInt8.to_int (Seq.get a (UInt64.to_int (Robinson_Lit_Lit_Type.lit_idx self))) = 0
    
  val sat_inner [#"../Robinson/src/lit.rs" 40 4 40 57] (self : Robinson_Lit_Lit_Type.t_lit) (a : Seq.seq uint8) : bool
    ensures { result = sat_inner self a }
    
end
module Robinson_Clause_Impl1_SatInner_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate sat_inner [#"../Robinson/src/clause.rs" 61 4 61 57] (self : Robinson_Clause_Clause_Type.t_clause) (a : Seq.seq uint8)
    
end
module Robinson_Clause_Impl1_SatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate sat_inner [#"../Robinson/src/clause.rs" 61 4 61 57] (self : Robinson_Clause_Clause_Type.t_clause) (a : Seq.seq uint8)
    
end
module Robinson_Clause_Impl1_SatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner_Stub as SatInner0
  clone Robinson_Clause_Impl0_ShallowModel_Stub as ShallowModel0
  predicate sat_inner [#"../Robinson/src/clause.rs" 61 4 61 57] (self : Robinson_Clause_Clause_Type.t_clause) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/clause.rs" 62 8 65 9] exists i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) /\ SatInner0.sat_inner (Seq.get (ShallowModel0.shallow_model self) i) a
  val sat_inner [#"../Robinson/src/clause.rs" 61 4 61 57] (self : Robinson_Clause_Clause_Type.t_clause) (a : Seq.seq uint8) : bool
    ensures { result = sat_inner self a }
    
end
module Robinson_Formula_Impl1_SatInner_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate sat_inner [#"../Robinson/src/formula.rs" 80 4 80 57] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8)
    
end
module Robinson_Formula_Impl1_SatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate sat_inner [#"../Robinson/src/formula.rs" 80 4 80 57] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8)
    
end
module Robinson_Formula_Impl1_SatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone Robinson_Clause_Impl1_SatInner_Stub as SatInner0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate sat_inner [#"../Robinson/src/formula.rs" 80 4 80 57] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/formula.rs" 81 8 84 9] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses self)) -> SatInner0.sat_inner (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses self)) i) a
  val sat_inner [#"../Robinson/src/formula.rs" 80 4 80 57] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) : bool
    ensures { result = sat_inner self a }
    
end
module Robinson_Formula_Impl1_EventuallySatCompleteInner_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate eventually_sat_complete_inner [#"../Robinson/src/formula.rs" 63 4 63 77] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8)
    
end
module Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate eventually_sat_complete_inner [#"../Robinson/src/formula.rs" 63 4 63 77] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8)
    
end
module Robinson_Formula_Impl1_EventuallySatCompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use mach.int.UInt64
  clone Robinson_Formula_Impl1_SatInner_Stub as SatInner0
  clone Robinson_Assignments_CompatibleCompleteInner_Stub as CompatibleCompleteInner0
  predicate eventually_sat_complete_inner [#"../Robinson/src/formula.rs" 63 4 63 77] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/formula.rs" 64 8 66 9] exists a2 : Seq.seq uint8 . Seq.length a2 = UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars self) /\ CompatibleCompleteInner0.compatible_complete_inner a a2 /\ SatInner0.sat_inner self a2
  val eventually_sat_complete_inner [#"../Robinson/src/formula.rs" 63 4 63 77] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) : bool
    ensures { result = eventually_sat_complete_inner self a }
    
end
module Robinson_Formula_Impl1_EventuallySatComplete_Stub
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate eventually_sat_complete [#"../Robinson/src/formula.rs" 70 4 70 64] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Formula_Impl1_EventuallySatComplete_Interface
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate eventually_sat_complete [#"../Robinson/src/formula.rs" 70 4 70 64] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Formula_Impl1_EventuallySatComplete
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Stub as EventuallySatCompleteInner0
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate eventually_sat_complete [#"../Robinson/src/formula.rs" 70 4 70 64] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../Robinson/src/formula.rs" 71 20 71 58] EventuallySatCompleteInner0.eventually_sat_complete_inner self (ShallowModel0.shallow_model a)
  val eventually_sat_complete [#"../Robinson/src/formula.rs" 70 4 70 64] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = eventually_sat_complete self a }
    
end
module Robinson_Clause_ClauseState_Type
  type t_clausestate  =
    | C_Sat
    | C_Unsat
    | C_Unit
    | C_Unknown
    
end
module Robinson_Lit_Impl1_UnsetInner_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate unset_inner [#"../Robinson/src/lit.rs" 60 4 60 59] (self : Robinson_Lit_Lit_Type.t_lit) (a : Seq.seq uint8)
end
module Robinson_Lit_Impl1_UnsetInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate unset_inner [#"../Robinson/src/lit.rs" 60 4 60 59] (self : Robinson_Lit_Lit_Type.t_lit) (a : Seq.seq uint8)
end
module Robinson_Lit_Impl1_UnsetInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use mach.int.UInt64
  predicate unset_inner [#"../Robinson/src/lit.rs" 60 4 60 59] (self : Robinson_Lit_Lit_Type.t_lit) (a : Seq.seq uint8)
   =
    [#"../Robinson/src/lit.rs" 62 12 62 32] UInt8.to_int (Seq.get a (UInt64.to_int (Robinson_Lit_Lit_Type.lit_idx self))) >= 2
  val unset_inner [#"../Robinson/src/lit.rs" 60 4 60 59] (self : Robinson_Lit_Lit_Type.t_lit) (a : Seq.seq uint8) : bool
    ensures { result = unset_inner self a }
    
end
module Robinson_Clause_Impl1_UnitInner_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate unit_inner [#"../Robinson/src/clause.rs" 34 4 34 58] (self : Robinson_Clause_Clause_Type.t_clause) (a : Seq.seq uint8)
    
end
module Robinson_Clause_Impl1_UnitInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate unit_inner [#"../Robinson/src/clause.rs" 34 4 34 58] (self : Robinson_Clause_Clause_Type.t_clause) (a : Seq.seq uint8)
    
end
module Robinson_Clause_Impl1_UnitInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsetInner_Stub as UnsetInner0
  clone Robinson_Clause_Impl0_ShallowModel_Stub as ShallowModel0
  clone Robinson_Clause_Impl1_SatInner_Stub as SatInner0
  clone Robinson_Clause_Impl1_VarsInRange_Stub as VarsInRange0
  predicate unit_inner [#"../Robinson/src/clause.rs" 34 4 34 58] (self : Robinson_Clause_Clause_Type.t_clause) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/clause.rs" 35 8 40 9] VarsInRange0.vars_in_range self (Seq.length a) /\ not SatInner0.sat_inner self a /\ (exists i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) /\ UnsetInner0.unset_inner (Seq.get (ShallowModel0.shallow_model self) i) a /\ (forall j : int . 0 <= j /\ j < Seq.length (ShallowModel0.shallow_model self) /\ j <> i -> not UnsetInner0.unset_inner (Seq.get (ShallowModel0.shallow_model self) j) a))
  val unit_inner [#"../Robinson/src/clause.rs" 34 4 34 58] (self : Robinson_Clause_Clause_Type.t_clause) (a : Seq.seq uint8) : bool
    ensures { result = unit_inner self a }
    
end
module Robinson_Clause_Impl1_Unit_Stub
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate unit [#"../Robinson/src/clause.rs" 43 4 43 45] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Clause_Impl1_Unit_Interface
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate unit [#"../Robinson/src/clause.rs" 43 4 43 45] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Clause_Impl1_Unit
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_UnitInner_Stub as UnitInner0
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate unit [#"../Robinson/src/clause.rs" 43 4 43 45] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../Robinson/src/clause.rs" 44 20 44 39] UnitInner0.unit_inner self (ShallowModel0.shallow_model a)
  val unit [#"../Robinson/src/clause.rs" 43 4 43 45] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = unit self a }
    
end
module Robinson_Clause_Impl1_Sat_Stub
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate sat [#"../Robinson/src/clause.rs" 69 4 69 44] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Clause_Impl1_Sat_Interface
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate sat [#"../Robinson/src/clause.rs" 69 4 69 44] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Clause_Impl1_Sat
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_SatInner_Stub as SatInner0
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate sat [#"../Robinson/src/clause.rs" 69 4 69 44] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../Robinson/src/clause.rs" 70 20 70 38] SatInner0.sat_inner self (ShallowModel0.shallow_model a)
  val sat [#"../Robinson/src/clause.rs" 69 4 69 44] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = sat self a }
    
end
module Robinson_Lit_Impl1_UnsatInner_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate unsat_inner [#"../Robinson/src/lit.rs" 50 4 50 59] (self : Robinson_Lit_Lit_Type.t_lit) (a : Seq.seq uint8)
end
module Robinson_Lit_Impl1_UnsatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate unsat_inner [#"../Robinson/src/lit.rs" 50 4 50 59] (self : Robinson_Lit_Lit_Type.t_lit) (a : Seq.seq uint8)
end
module Robinson_Lit_Impl1_UnsatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use mach.int.UInt64
  predicate unsat_inner [#"../Robinson/src/lit.rs" 50 4 50 59] (self : Robinson_Lit_Lit_Type.t_lit) (a : Seq.seq uint8)
   =
    [#"../Robinson/src/lit.rs" 52 12 55 13] if Robinson_Lit_Lit_Type.lit_polarity self then
      UInt8.to_int (Seq.get a (UInt64.to_int (Robinson_Lit_Lit_Type.lit_idx self))) = 0
    else
      UInt8.to_int (Seq.get a (UInt64.to_int (Robinson_Lit_Lit_Type.lit_idx self))) = 1
    
  val unsat_inner [#"../Robinson/src/lit.rs" 50 4 50 59] (self : Robinson_Lit_Lit_Type.t_lit) (a : Seq.seq uint8) : bool
    ensures { result = unsat_inner self a }
    
end
module Robinson_Clause_Impl1_UnsatInner_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate unsat_inner [#"../Robinson/src/clause.rs" 48 4 48 59] (self : Robinson_Clause_Clause_Type.t_clause) (a : Seq.seq uint8)
    
end
module Robinson_Clause_Impl1_UnsatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate unsat_inner [#"../Robinson/src/clause.rs" 48 4 48 59] (self : Robinson_Clause_Clause_Type.t_clause) (a : Seq.seq uint8)
    
end
module Robinson_Clause_Impl1_UnsatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsatInner_Stub as UnsatInner0
  clone Robinson_Clause_Impl0_ShallowModel_Stub as ShallowModel0
  predicate unsat_inner [#"../Robinson/src/clause.rs" 48 4 48 59] (self : Robinson_Clause_Clause_Type.t_clause) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/clause.rs" 49 8 52 9] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> UnsatInner0.unsat_inner (Seq.get (ShallowModel0.shallow_model self) i) a
  val unsat_inner [#"../Robinson/src/clause.rs" 48 4 48 59] (self : Robinson_Clause_Clause_Type.t_clause) (a : Seq.seq uint8) : bool
    ensures { result = unsat_inner self a }
    
end
module Robinson_Clause_Impl1_Unsat_Stub
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate unsat [#"../Robinson/src/clause.rs" 56 4 56 46] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Clause_Impl1_Unsat_Interface
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate unsat [#"../Robinson/src/clause.rs" 56 4 56 46] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Clause_Impl1_Unsat
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_UnsatInner_Stub as UnsatInner0
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate unsat [#"../Robinson/src/clause.rs" 56 4 56 46] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../Robinson/src/clause.rs" 57 20 57 40] UnsatInner0.unsat_inner self (ShallowModel0.shallow_model a)
  val unsat [#"../Robinson/src/clause.rs" 56 4 56 46] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = unsat self a }
    
end
module Robinson_Lit_Impl1_Sat_Stub
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate sat [#"../Robinson/src/lit.rs" 67 4 67 44] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Lit_Impl1_Sat_Interface
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate sat [#"../Robinson/src/lit.rs" 67 4 67 44] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Lit_Impl1_Sat
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner_Stub as SatInner0
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate sat [#"../Robinson/src/lit.rs" 67 4 67 44] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../Robinson/src/lit.rs" 69 12 69 30] SatInner0.sat_inner self (ShallowModel0.shallow_model a)
  val sat [#"../Robinson/src/lit.rs" 67 4 67 44] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = sat self a }
    
end
module Robinson_Lit_Impl2_LitSat_Interface
  use seq.Seq
  use prelude.Borrow
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Sat_Stub as Sat0
  clone Robinson_Lit_Impl1_Invariant_Stub as Invariant0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val lit_sat [@cfg:stackify] [#"../Robinson/src/lit.rs" 95 4 95 49] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    requires {[#"../Robinson/src/lit.rs" 93 15 93 41] Invariant0.invariant' self (Seq.length (ShallowModel0.shallow_model a))}
    ensures { [#"../Robinson/src/lit.rs" 94 14 94 36] result = Sat0.sat self a }
    
end
module Robinson_Lit_Impl2_LitSat
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use prelude.UIntSize
  use seq.Seq
  clone Core_Num_Impl12_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = uint8
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner as SatInner0
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = uint8,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Robinson_Lit_Impl1_Sat as Sat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Lit_Impl1_Invariant as Invariant0
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg lit_sat [@cfg:stackify] [#"../Robinson/src/lit.rs" 95 4 95 49] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    requires {[#"../Robinson/src/lit.rs" 93 15 93 41] Invariant0.invariant' self (Seq.length (ShallowModel0.shallow_model a))}
    ensures { [#"../Robinson/src/lit.rs" 94 14 94 36] result = Sat0.sat self a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Robinson_Lit_Lit_Type.t_lit;
  var a_2 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _5 : uint8;
  var _6 : uint8;
  var _7 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _8 : usize;
  var _9 : uint8;
  var _10 : uint8;
  var _11 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _12 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    switch (Robinson_Lit_Lit_Type.lit_polarity self_1)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB1 {
    _11 <- Robinson_Assignments_Assignments_Type.assignments_0 a_2;
    _12 <- Robinson_Lit_Lit_Type.lit_idx self_1;
    _10 <- ([#"../Robinson/src/lit.rs" 98 22 98 35] Index0.index _11 _12);
    goto BB4
  }
  BB2 {
    _7 <- Robinson_Assignments_Assignments_Type.assignments_0 a_2;
    _8 <- Robinson_Lit_Lit_Type.lit_idx self_1;
    _6 <- ([#"../Robinson/src/lit.rs" 97 21 97 34] Index0.index _7 _8);
    goto BB3
  }
  BB3 {
    _5 <- _6;
    _0 <- ([#"../Robinson/src/lit.rs" 97 20 97 40] _5 = ([#"../Robinson/src/lit.rs" 97 38 97 39] (1 : uint8)));
    goto BB5
  }
  BB4 {
    _9 <- _10;
    _0 <- ([#"../Robinson/src/lit.rs" 98 21 98 41] _9 = ([#"../Robinson/src/lit.rs" 98 39 98 40] (0 : uint8)));
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Robinson_Lit_Impl1_Unset_Stub
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate unset [#"../Robinson/src/lit.rs" 74 4 74 46] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Lit_Impl1_Unset_Interface
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate unset [#"../Robinson/src/lit.rs" 74 4 74 46] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Lit_Impl1_Unset
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsetInner_Stub as UnsetInner0
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate unset [#"../Robinson/src/lit.rs" 74 4 74 46] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../Robinson/src/lit.rs" 75 20 75 40] UnsetInner0.unset_inner self (ShallowModel0.shallow_model a)
  val unset [#"../Robinson/src/lit.rs" 74 4 74 46] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = unset self a }
    
end
module Robinson_Lit_Impl2_LitUnset_Interface
  use seq.Seq
  use prelude.Borrow
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Unset_Stub as Unset0
  clone Robinson_Lit_Impl1_Invariant_Stub as Invariant0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val lit_unset [@cfg:stackify] [#"../Robinson/src/lit.rs" 116 4 116 51] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    requires {[#"../Robinson/src/lit.rs" 114 15 114 41] Invariant0.invariant' self (Seq.length (ShallowModel0.shallow_model a))}
    ensures { [#"../Robinson/src/lit.rs" 115 14 115 38] result = Unset0.unset self a }
    
end
module Robinson_Lit_Impl2_LitUnset
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use prelude.UIntSize
  use seq.Seq
  clone Core_Num_Impl12_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = uint8
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsetInner as UnsetInner0
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = uint8,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Robinson_Lit_Impl1_Unset as Unset0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Lit_Impl1_Invariant as Invariant0
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg lit_unset [@cfg:stackify] [#"../Robinson/src/lit.rs" 116 4 116 51] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    requires {[#"../Robinson/src/lit.rs" 114 15 114 41] Invariant0.invariant' self (Seq.length (ShallowModel0.shallow_model a))}
    ensures { [#"../Robinson/src/lit.rs" 115 14 115 38] result = Unset0.unset self a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Robinson_Lit_Lit_Type.t_lit;
  var a_2 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _5 : uint8;
  var _6 : uint8;
  var _7 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _8 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _7 <- Robinson_Assignments_Assignments_Type.assignments_0 a_2;
    _8 <- Robinson_Lit_Lit_Type.lit_idx self_1;
    _6 <- ([#"../Robinson/src/lit.rs" 117 8 117 21] Index0.index _7 _8);
    goto BB1
  }
  BB1 {
    _5 <- _6;
    _0 <- ([#"../Robinson/src/lit.rs" 117 8 117 26] _5 >= ([#"../Robinson/src/lit.rs" 117 25 117 26] (2 : uint8)));
    return _0
  }
  
end
module Robinson_Lit_Impl1_Unsat_Stub
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate unsat [#"../Robinson/src/lit.rs" 79 4 79 46] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Lit_Impl1_Unsat_Interface
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate unsat [#"../Robinson/src/lit.rs" 79 4 79 46] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Lit_Impl1_Unsat
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsatInner_Stub as UnsatInner0
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate unsat [#"../Robinson/src/lit.rs" 79 4 79 46] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../Robinson/src/lit.rs" 80 20 80 40] UnsatInner0.unsat_inner self (ShallowModel0.shallow_model a)
  val unsat [#"../Robinson/src/lit.rs" 79 4 79 46] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = unsat self a }
    
end
module Robinson_Clause_Impl0_ShallowModelTy_Type
  use seq.Seq
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  type shallowModelTy  =
    Seq.seq (Robinson_Lit_Lit_Type.t_lit)
end
module Robinson_Clause_Impl2_CheckIfUnit_Interface
  use seq.Seq
  use prelude.Borrow
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Assignments_Impl1_Complete_Stub as Complete0
  clone Robinson_Clause_Impl1_Unit_Stub as Unit0
  clone Robinson_Clause_Impl1_Unsat_Stub as Unsat0
  clone Robinson_Clause_Impl1_Sat_Stub as Sat0
  use Robinson_Clause_ClauseState_Type as Robinson_Clause_ClauseState_Type
  clone Robinson_Assignments_Impl1_Invariant_Stub as Invariant2
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant1
  clone Robinson_Clause_Impl1_Invariant_Stub as Invariant0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val check_if_unit [@cfg:stackify] [#"../Robinson/src/clause.rs" 121 4 121 77] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments) (_f : Robinson_Formula_Formula_Type.t_formula) : Robinson_Clause_ClauseState_Type.t_clausestate
    requires {[#"../Robinson/src/clause.rs" 114 15 114 41] Invariant0.invariant' self (Seq.length (ShallowModel0.shallow_model a))}
    requires {[#"../Robinson/src/clause.rs" 115 15 115 29] Invariant1.invariant' _f}
    requires {[#"../Robinson/src/clause.rs" 116 15 116 31] Invariant2.invariant' a _f}
    ensures { [#"../Robinson/src/clause.rs" 117 4 117 65] result = Robinson_Clause_ClauseState_Type.C_Sat -> Sat0.sat self a }
    ensures { [#"../Robinson/src/clause.rs" 118 4 118 67] result = Robinson_Clause_ClauseState_Type.C_Unsat -> Unsat0.unsat self a }
    ensures { [#"../Robinson/src/clause.rs" 119 4 119 83] result = Robinson_Clause_ClauseState_Type.C_Unit -> Unit0.unit self a /\ not Complete0.complete a }
    ensures { [#"../Robinson/src/clause.rs" 120 4 120 66] result = Robinson_Clause_ClauseState_Type.C_Unknown -> not Complete0.complete a }
    
end
module Robinson_Clause_Impl2_CheckIfUnit
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  use prelude.UInt8
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner as SatInner1
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel7 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ShallowModel as ShallowModel3 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Lit_Impl1_Sat as Sat1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Lit_Impl1_Invariant as Invariant3
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy3 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel6 with
    type t = Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy2.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Robinson_Lit_Impl1_UnsatInner as UnsatInner1
  clone Robinson_Lit_Impl1_UnsetInner as UnsetInner0
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel5 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl0_ShallowModelTy_Type as ShallowModelTy1
  clone Robinson_Logic_Unset as Unset1
  clone Robinson_Clause_Impl1_SatInner as SatInner0 with
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    predicate SatInner0.sat_inner = SatInner0.sat_inner,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner0 with
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel4 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone Robinson_Lit_Impl1_Unset as Unset0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Robinson_Lit_Impl2_LitUnset_Interface as LitUnset0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Lit_Impl2_LitSat_Interface as LitSat0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Sat0.sat = Sat1.sat
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone Robinson_Lit_Impl1_Unsat as Unsat1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone Robinson_Assignments_Impl1_Complete as Complete0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Unset0.unset = Unset1.unset
  clone Robinson_Clause_Impl1_Unit as Unit0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone Robinson_Clause_Impl1_Unsat as Unsat0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Clause_Impl1_Sat as Sat0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Assignments_Impl1_Invariant as Invariant2 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Robinson_Clause_Impl1_Invariant as Invariant0 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Robinson_Formula_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate Invariant0.invariant' = Invariant0.invariant',
    val Max0.mAX' = Max0.mAX'
  use Robinson_Clause_ClauseState_Type as Robinson_Clause_ClauseState_Type
  let rec cfg check_if_unit [@cfg:stackify] [#"../Robinson/src/clause.rs" 121 4 121 77] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments) (_f : Robinson_Formula_Formula_Type.t_formula) : Robinson_Clause_ClauseState_Type.t_clausestate
    requires {[#"../Robinson/src/clause.rs" 114 15 114 41] Invariant0.invariant' self (Seq.length (ShallowModel0.shallow_model a))}
    requires {[#"../Robinson/src/clause.rs" 115 15 115 29] Invariant1.invariant' _f}
    requires {[#"../Robinson/src/clause.rs" 116 15 116 31] Invariant2.invariant' a _f}
    ensures { [#"../Robinson/src/clause.rs" 117 4 117 65] result = Robinson_Clause_ClauseState_Type.C_Sat -> Sat0.sat self a }
    ensures { [#"../Robinson/src/clause.rs" 118 4 118 67] result = Robinson_Clause_ClauseState_Type.C_Unsat -> Unsat0.unsat self a }
    ensures { [#"../Robinson/src/clause.rs" 119 4 119 83] result = Robinson_Clause_ClauseState_Type.C_Unit -> Unit0.unit self a /\ not Complete0.complete a }
    ensures { [#"../Robinson/src/clause.rs" 120 4 120 66] result = Robinson_Clause_ClauseState_Type.C_Unknown -> not Complete0.complete a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Clause_ClauseState_Type.t_clausestate;
  var self_1 : Robinson_Clause_Clause_Type.t_clause;
  var a_2 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _f_3 : Robinson_Formula_Formula_Type.t_formula;
  var i_11 : usize;
  var _k_12 : usize;
  var unassigned_13 : usize;
  var _14 : ();
  var _23 : ();
  var _24 : bool;
  var _25 : usize;
  var _26 : usize;
  var _27 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var lit_28 : Robinson_Lit_Lit_Type.t_lit;
  var _29 : Robinson_Lit_Lit_Type.t_lit;
  var _30 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _31 : usize;
  var _32 : ();
  var _33 : bool;
  var _34 : Robinson_Lit_Lit_Type.t_lit;
  var _35 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _36 : ();
  var _37 : bool;
  var _38 : Robinson_Lit_Lit_Type.t_lit;
  var _39 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _40 : ();
  var _41 : bool;
  var _42 : usize;
  var _43 : ();
  var _44 : usize;
  var _45 : ();
  var _46 : ();
  var _47 : ();
  var _48 : bool;
  var _49 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    i_11 <- ([#"../Robinson/src/clause.rs" 122 27 122 28] (0 : usize));
    _k_12 <- ([#"../Robinson/src/clause.rs" 123 28 123 29] (0 : usize));
    unassigned_13 <- ([#"../Robinson/src/clause.rs" 124 36 124 37] (0 : usize));
    goto BB1
  }
  BB1 {
    invariant loop_invariant { [#"../Robinson/src/clause.rs" 125 36 125 71] 0 <= UInt64.to_int i_11 /\ UInt64.to_int i_11 <= Seq.length (ShallowModel1.shallow_model (Robinson_Clause_Clause_Type.clause_rest self_1)) };
    invariant unass { [#"../Robinson/src/clause.rs" 126 27 126 43] UInt64.to_int unassigned_13 <= 1 };
    invariant k_is_unass { [#"../Robinson/src/clause.rs" 127 32 127 76] UInt64.to_int unassigned_13 = 0 \/ Unset0.unset (Seq.get (ShallowModel2.shallow_model self_1) (UInt64.to_int _k_12)) a_2 };
    invariant kk { [#"../Robinson/src/clause.rs" 125 8 125 73] UInt64.to_int unassigned_13 > 0 -> Unset0.unset (Seq.get (ShallowModel2.shallow_model self_1) (UInt64.to_int _k_12)) a_2 };
    invariant not_sat { [#"../Robinson/src/clause.rs" 125 8 125 73] forall j : int . 0 <= j /\ j < UInt64.to_int i_11 -> Unsat1.unsat (Seq.get (ShallowModel2.shallow_model self_1) j) a_2 \/ Unset0.unset (Seq.get (ShallowModel2.shallow_model self_1) j) a_2 /\ UInt64.to_int unassigned_13 >= 1 };
    invariant k_in_bounds { [#"../Robinson/src/clause.rs" 131 33 131 84] UInt64.to_int unassigned_13 = 0 \/ 0 <= UInt64.to_int _k_12 /\ UInt64.to_int _k_12 < Seq.length (ShallowModel2.shallow_model self_1) };
    invariant k_only { [#"../Robinson/src/clause.rs" 125 8 125 73] UInt64.to_int unassigned_13 = 1 -> (forall j : int . 0 <= j /\ j < UInt64.to_int i_11 /\ j <> UInt64.to_int _k_12 -> not Unset0.unset (Seq.get (ShallowModel2.shallow_model self_1) j) a_2) };
    invariant k_unset { [#"../Robinson/src/clause.rs" 125 8 125 73] UInt64.to_int unassigned_13 = 0 -> UInt64.to_int _k_12 = 0 };
    _25 <- i_11;
    _27 <- Robinson_Clause_Clause_Type.clause_rest self_1;
    _26 <- ([#"../Robinson/src/clause.rs" 135 18 135 33] Len0.len _27);
    goto BB2
  }
  BB2 {
    _24 <- ([#"../Robinson/src/clause.rs" 135 14 135 33] _25 < _26);
    switch (_24)
      | False -> goto BB14
      | True -> goto BB3
      end
  }
  BB3 {
    _30 <- Robinson_Clause_Clause_Type.clause_rest self_1;
    _31 <- i_11;
    _29 <- ([#"../Robinson/src/clause.rs" 136 22 136 34] Index0.index _30 _31);
    goto BB4
  }
  BB4 {
    lit_28 <- _29;
    _34 <- lit_28;
    _35 <- a_2;
    _33 <- ([#"../Robinson/src/clause.rs" 137 15 137 29] LitSat0.lit_sat _34 _35);
    goto BB5
  }
  BB5 {
    switch (_33)
      | False -> goto BB7
      | True -> goto BB6
      end
  }
  BB6 {
    _0 <- Robinson_Clause_ClauseState_Type.C_Sat;
    goto BB18
  }
  BB7 {
    _38 <- lit_28;
    _39 <- a_2;
    _37 <- ([#"../Robinson/src/clause.rs" 139 22 139 38] LitUnset0.lit_unset _38 _39);
    goto BB8
  }
  BB8 {
    switch (_37)
      | False -> goto BB12
      | True -> goto BB9
      end
  }
  BB9 {
    _42 <- unassigned_13;
    _41 <- ([#"../Robinson/src/clause.rs" 141 19 141 33] _42 > ([#"../Robinson/src/clause.rs" 141 32 141 33] (0 : usize)));
    switch (_41)
      | False -> goto BB11
      | True -> goto BB10
      end
  }
  BB10 {
    _0 <- Robinson_Clause_ClauseState_Type.C_Unknown;
    goto BB18
  }
  BB11 {
    _40 <- ();
    _44 <- i_11;
    _k_12 <- _44;
    _44 <- any usize;
    unassigned_13 <- ([#"../Robinson/src/clause.rs" 145 16 145 31] unassigned_13 + ([#"../Robinson/src/clause.rs" 145 30 145 31] (1 : usize)));
    _32 <- ();
    goto BB13
  }
  BB12 {
    _32 <- ();
    goto BB13
  }
  BB13 {
    i_11 <- ([#"../Robinson/src/clause.rs" 147 12 147 18] i_11 + ([#"../Robinson/src/clause.rs" 147 17 147 18] (1 : usize)));
    _23 <- ();
    goto BB1
  }
  BB14 {
    _14 <- ();
    _49 <- unassigned_13;
    _48 <- ([#"../Robinson/src/clause.rs" 149 11 149 26] _49 = ([#"../Robinson/src/clause.rs" 149 25 149 26] (1 : usize)));
    switch (_48)
      | False -> goto BB16
      | True -> goto BB15
      end
  }
  BB15 {
    _0 <- Robinson_Clause_ClauseState_Type.C_Unit;
    goto BB17
  }
  BB16 {
    _0 <- Robinson_Clause_ClauseState_Type.C_Unsat;
    goto BB17
  }
  BB17 {
    goto BB19
  }
  BB18 {
    goto BB19
  }
  BB19 {
    return _0
  }
  
end
module Robinson_Lit_Impl0_IndexLogic_Stub
  use mach.int.Int
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  function index_logic [@inline:trivial] [#"../Robinson/src/lit.rs" 20 4 20 35] (self : Robinson_Lit_Lit_Type.t_lit) : int
    
end
module Robinson_Lit_Impl0_IndexLogic_Interface
  use mach.int.Int
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  function index_logic [@inline:trivial] [#"../Robinson/src/lit.rs" 20 4 20 35] (self : Robinson_Lit_Lit_Type.t_lit) : int
    
end
module Robinson_Lit_Impl0_IndexLogic
  use mach.int.Int
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use mach.int.UInt64
  function index_logic [@inline:trivial] [#"../Robinson/src/lit.rs" 20 4 20 35] (self : Robinson_Lit_Lit_Type.t_lit) : int
    
   =
    [#"../Robinson/src/lit.rs" 21 8 21 31] UInt64.to_int (Robinson_Lit_Lit_Type.lit_idx self)
  val index_logic [@inline:trivial] [#"../Robinson/src/lit.rs" 20 4 20 35] (self : Robinson_Lit_Lit_Type.t_lit) : int
    ensures { result = index_logic self }
    
end
module Robinson_Clause_Impl2_GetUnit_Interface
  use mach.int.Int
  use seq.Seq
  use prelude.Borrow
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy1
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Clause_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Logic_Unset_Stub as Unset0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone Robinson_Lit_Impl0_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone Robinson_Assignments_Impl1_Invariant_Stub as Invariant1
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant0
  clone Robinson_Clause_Impl1_Unit_Stub as Unit0
  val get_unit [@cfg:stackify] [#"../Robinson/src/clause.rs" 163 4 163 64] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments) (_f : Robinson_Formula_Formula_Type.t_formula) : Robinson_Lit_Lit_Type.t_lit
    requires {[#"../Robinson/src/clause.rs" 157 15 157 28] Unit0.unit self a}
    requires {[#"../Robinson/src/clause.rs" 158 15 158 29] Invariant0.invariant' _f}
    requires {[#"../Robinson/src/clause.rs" 159 15 159 31] Invariant1.invariant' a _f}
    ensures { [#"../Robinson/src/clause.rs" 160 4 160 82] exists j : int . 0 <= j /\ j < Seq.length (ShallowModel0.shallow_model self) /\ Seq.get (ShallowModel0.shallow_model self) j = result }
    ensures { [#"../Robinson/src/clause.rs" 161 14 161 47] IndexLogic0.index_logic result < Seq.length (ShallowModel1.shallow_model a) }
    ensures { [#"../Robinson/src/clause.rs" 162 14 162 47] Unset0.unset (Seq.get (ShallowModel1.shallow_model a) (IndexLogic0.index_logic result)) }
    
end
module Robinson_Clause_Impl2_GetUnit
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  use prelude.UInt8
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner as SatInner1
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel7 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel4 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl1_SatInner as SatInner0 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Lit_Impl1_Invariant as Invariant3
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel6 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy3 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy2.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone Robinson_Lit_Impl1_UnsetInner as UnsetInner0
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy1
  clone Robinson_Clause_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    predicate SatInner0.sat_inner = SatInner0.sat_inner,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Lit_Impl1_Unset as Unset1 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Robinson_Lit_Impl2_LitUnset_Interface as LitUnset0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Unset0.unset = Unset1.unset
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Lit_Impl0_IndexLogic as IndexLogic0
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Invariant0.invariant' = Invariant2.invariant',
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl1_Unit as Unit0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  let rec cfg get_unit [@cfg:stackify] [#"../Robinson/src/clause.rs" 163 4 163 64] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments) (_f : Robinson_Formula_Formula_Type.t_formula) : Robinson_Lit_Lit_Type.t_lit
    requires {[#"../Robinson/src/clause.rs" 157 15 157 28] Unit0.unit self a}
    requires {[#"../Robinson/src/clause.rs" 158 15 158 29] Invariant0.invariant' _f}
    requires {[#"../Robinson/src/clause.rs" 159 15 159 31] Invariant1.invariant' a _f}
    ensures { [#"../Robinson/src/clause.rs" 160 4 160 82] exists j : int . 0 <= j /\ j < Seq.length (ShallowModel0.shallow_model self) /\ Seq.get (ShallowModel0.shallow_model self) j = result }
    ensures { [#"../Robinson/src/clause.rs" 161 14 161 47] IndexLogic0.index_logic result < Seq.length (ShallowModel1.shallow_model a) }
    ensures { [#"../Robinson/src/clause.rs" 162 14 162 47] Unset0.unset (Seq.get (ShallowModel1.shallow_model a) (IndexLogic0.index_logic result)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Lit_Lit_Type.t_lit;
  var self_1 : Robinson_Clause_Clause_Type.t_clause;
  var a_2 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _f_3 : Robinson_Formula_Formula_Type.t_formula;
  var _4 : ();
  var i_11 : usize;
  var _12 : ();
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var lit_19 : Robinson_Lit_Lit_Type.t_lit;
  var _20 : Robinson_Lit_Lit_Type.t_lit;
  var _21 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _22 : usize;
  var _23 : ();
  var _24 : bool;
  var _25 : Robinson_Lit_Lit_Type.t_lit;
  var _26 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _27 : ();
  var _28 : ();
  var _29 : ();
  var _30 : ();
  var _31 : ();
  {
    self_1 <- self;
    a_2 <- a;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    i_11 <- ([#"../Robinson/src/clause.rs" 164 27 164 28] (0 : usize));
    goto BB1
  }
  BB1 {
    invariant not_unset { [#"../Robinson/src/clause.rs" 165 8 165 90] forall j : int . 0 <= j /\ j < UInt64.to_int i_11 -> not Unset1.unset (Seq.get (ShallowModel0.shallow_model self_1) j) a_2 };
    _16 <- i_11;
    _18 <- Robinson_Clause_Clause_Type.clause_rest self_1;
    _17 <- ([#"../Robinson/src/clause.rs" 166 18 166 33] Len0.len _18);
    goto BB2
  }
  BB2 {
    _15 <- ([#"../Robinson/src/clause.rs" 166 14 166 33] _16 < _17);
    switch (_15)
      | False -> goto BB8
      | True -> goto BB3
      end
  }
  BB3 {
    _21 <- Robinson_Clause_Clause_Type.clause_rest self_1;
    _22 <- i_11;
    _20 <- ([#"../Robinson/src/clause.rs" 167 22 167 34] Index0.index _21 _22);
    goto BB4
  }
  BB4 {
    lit_19 <- _20;
    _25 <- lit_19;
    _26 <- a_2;
    _24 <- ([#"../Robinson/src/clause.rs" 168 15 168 31] LitUnset0.lit_unset _25 _26);
    goto BB5
  }
  BB5 {
    switch (_24)
      | False -> goto BB7
      | True -> goto BB6
      end
  }
  BB6 {
    _0 <- lit_19;
    return _0
  }
  BB7 {
    _23 <- ();
    i_11 <- ([#"../Robinson/src/clause.rs" 171 12 171 18] i_11 + ([#"../Robinson/src/clause.rs" 171 17 171 18] (1 : usize)));
    _14 <- ();
    goto BB1
  }
  BB8 {
    _12 <- ();
    absurd
  }
  
end
module Robinson_Lit_Impl2_Index_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl0_IndexLogic_Stub as IndexLogic0
  val index [@cfg:stackify] [#"../Robinson/src/lit.rs" 88 4 88 31] (self : Robinson_Lit_Lit_Type.t_lit) : usize
    ensures { [#"../Robinson/src/lit.rs" 87 14 87 43] UInt64.to_int result = IndexLogic0.index_logic self }
    
end
module Robinson_Lit_Impl2_Index
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl0_IndexLogic as IndexLogic0
  let rec cfg index [@cfg:stackify] [#"../Robinson/src/lit.rs" 88 4 88 31] (self : Robinson_Lit_Lit_Type.t_lit) : usize
    ensures { [#"../Robinson/src/lit.rs" 87 14 87 43] UInt64.to_int result = IndexLogic0.index_logic self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : Robinson_Lit_Lit_Type.t_lit;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- Robinson_Lit_Lit_Type.lit_idx self_1;
    return _0
  }
  
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface as ResolveElswhere0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Robinson_Logic_BoolToAssignedstate_Stub
  use prelude.UInt8
  use mach.int.Int
  function bool_to_assignedstate [#"../Robinson/src/logic.rs" 9 0 9 54] (b : bool) : uint8
end
module Robinson_Logic_BoolToAssignedstate_Interface
  use prelude.UInt8
  use mach.int.Int
  function bool_to_assignedstate [#"../Robinson/src/logic.rs" 9 0 9 54] (b : bool) : uint8
  axiom bool_to_assignedstate_spec : forall b : bool . ([#"../Robinson/src/logic.rs" 8 0 8 31] not b -> UInt8.to_int (bool_to_assignedstate b) = 0) && ([#"../Robinson/src/logic.rs" 7 0 7 30] b -> UInt8.to_int (bool_to_assignedstate b) = 1)
end
module Robinson_Logic_BoolToAssignedstate
  use prelude.UInt8
  use mach.int.Int
  function bool_to_assignedstate [#"../Robinson/src/logic.rs" 9 0 9 54] (b : bool) : uint8 =
    [#"../Robinson/src/logic.rs" 6 0 6 8] if b then (1 : uint8) else (0 : uint8)
  val bool_to_assignedstate [#"../Robinson/src/logic.rs" 9 0 9 54] (b : bool) : uint8
    ensures { result = bool_to_assignedstate b }
    
  axiom bool_to_assignedstate_spec : forall b : bool . ([#"../Robinson/src/logic.rs" 8 0 8 31] not b -> UInt8.to_int (bool_to_assignedstate b) = 0) && ([#"../Robinson/src/logic.rs" 7 0 7 30] b -> UInt8.to_int (bool_to_assignedstate b) = 1)
end
module Robinson_Logic_BoolToAssignedstate_Impl
  use prelude.UInt8
  use mach.int.Int
  let rec ghost function bool_to_assignedstate [#"../Robinson/src/logic.rs" 9 0 9 54] (b : bool) : uint8
    ensures { [#"../Robinson/src/logic.rs" 7 0 7 30] b -> UInt8.to_int result = 1 }
    ensures { [#"../Robinson/src/logic.rs" 8 0 8 31] not b -> UInt8.to_int result = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Robinson/src/logic.rs" 6 0 6 8] if b then (1 : uint8) else (0 : uint8)
end
module Robinson_Clause_Impl1_InFormula_Stub
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate in_formula [#"../Robinson/src/clause.rs" 26 4 26 47] (self : Robinson_Clause_Clause_Type.t_clause) (f : Robinson_Formula_Formula_Type.t_formula)
    
end
module Robinson_Clause_Impl1_InFormula_Interface
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate in_formula [#"../Robinson/src/clause.rs" 26 4 26 47] (self : Robinson_Clause_Clause_Type.t_clause) (f : Robinson_Formula_Formula_Type.t_formula)
    
end
module Robinson_Clause_Impl1_InFormula
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use mach.int.Int
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate in_formula [#"../Robinson/src/clause.rs" 26 4 26 47] (self : Robinson_Clause_Clause_Type.t_clause) (f : Robinson_Formula_Formula_Type.t_formula)
    
   =
    [#"../Robinson/src/clause.rs" 27 8 30 9] exists i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f)) /\ Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f)) i = self
  val in_formula [#"../Robinson/src/clause.rs" 26 4 26 47] (self : Robinson_Clause_Clause_Type.t_clause) (f : Robinson_Formula_Formula_Type.t_formula) : bool
    ensures { result = in_formula self f }
    
end
module Robinson_Logic_FlipV_Stub
  use mach.int.Int
  use prelude.UInt8
  function flip_v [#"../Robinson/src/logic.rs" 18 0 18 44] (v : uint8) : uint8
end
module Robinson_Logic_FlipV_Interface
  use mach.int.Int
  use prelude.UInt8
  function flip_v [#"../Robinson/src/logic.rs" 18 0 18 44] (v : uint8) : uint8
end
module Robinson_Logic_FlipV
  use mach.int.Int
  use prelude.UInt8
  function flip_v [#"../Robinson/src/logic.rs" 18 0 18 44] (v : uint8) : uint8 =
    [#"../Robinson/src/logic.rs" 19 4 27 5] if UInt8.to_int v = 0 then
      (1 : uint8)
    else
      if UInt8.to_int v = 1 then (0 : uint8) else v
    
  val flip_v [#"../Robinson/src/logic.rs" 18 0 18 44] (v : uint8) : uint8
    ensures { result = flip_v v }
    
end
module Robinson_Formula_Impl1_UnsatInner_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate unsat_inner [#"../Robinson/src/formula.rs" 93 4 93 59] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8)
    
end
module Robinson_Formula_Impl1_UnsatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate unsat_inner [#"../Robinson/src/formula.rs" 93 4 93 59] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8)
    
end
module Robinson_Formula_Impl1_UnsatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone Robinson_Clause_Impl1_UnsatInner_Stub as UnsatInner0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate unsat_inner [#"../Robinson/src/formula.rs" 93 4 93 59] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/formula.rs" 94 8 97 9] exists i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses self)) /\ UnsatInner0.unsat_inner (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses self)) i) a
  val unsat_inner [#"../Robinson/src/formula.rs" 93 4 93 59] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) : bool
    ensures { result = unsat_inner self a }
    
end
module Robinson_Logic_LemmaUnitWrongPolarityUnsatFormula_Stub
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_UnsatInner_Stub as UnsatInner1
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Stub as EventuallySatCompleteInner0
  clone Robinson_Logic_FlipV_Stub as FlipV0
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsatInner_Stub as UnsatInner0
  clone Robinson_Logic_BoolToAssignedstate_Stub as BoolToAssignedstate0 with
    axiom .
  clone Robinson_Lit_Impl0_IndexLogic_Stub as IndexLogic0
  clone Robinson_Clause_Impl0_ShallowModel_Stub as ShallowModel0
  clone Robinson_Clause_Impl1_Invariant_Stub as Invariant1
  clone Robinson_Clause_Impl1_InFormula_Stub as InFormula0
  clone Robinson_Clause_Impl1_UnitInner_Stub as UnitInner0
  clone Robinson_Logic_Unset_Stub as Unset0
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant0
  function lemma_unit_wrong_polarity_unsat_formula [#"../Robinson/src/logic.rs" 73 0 75 1] (c : Robinson_Clause_Clause_Type.t_clause) (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Robinson_Logic_LemmaUnitWrongPolarityUnsatFormula_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_UnsatInner_Stub as UnsatInner1
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Stub as EventuallySatCompleteInner0
  clone Robinson_Logic_FlipV_Stub as FlipV0
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsatInner_Stub as UnsatInner0
  clone Robinson_Logic_BoolToAssignedstate_Stub as BoolToAssignedstate0 with
    axiom .
  clone Robinson_Lit_Impl0_IndexLogic_Stub as IndexLogic0
  clone Robinson_Clause_Impl0_ShallowModel_Stub as ShallowModel0
  clone Robinson_Clause_Impl1_Invariant_Stub as Invariant1
  clone Robinson_Clause_Impl1_InFormula_Stub as InFormula0
  clone Robinson_Clause_Impl1_UnitInner_Stub as UnitInner0
  clone Robinson_Logic_Unset_Stub as Unset0
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant0
  function lemma_unit_wrong_polarity_unsat_formula [#"../Robinson/src/logic.rs" 73 0 75 1] (c : Robinson_Clause_Clause_Type.t_clause) (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
  axiom lemma_unit_wrong_polarity_unsat_formula_spec : forall c : Robinson_Clause_Clause_Type.t_clause, f : Robinson_Formula_Formula_Type.t_formula, a : Seq.seq uint8, ix : int, v : uint8 . ([#"../Robinson/src/logic.rs" 62 11 62 24] Invariant0.invariant' f) -> ([#"../Robinson/src/logic.rs" 63 11 63 33] UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f) = Seq.length a) -> ([#"../Robinson/src/logic.rs" 64 11 64 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)) -> ([#"../Robinson/src/logic.rs" 65 11 65 20] not Unset0.unset v) -> ([#"../Robinson/src/logic.rs" 66 11 66 26] UnitInner0.unit_inner c a) -> ([#"../Robinson/src/logic.rs" 67 11 67 26] InFormula0.in_formula c f) -> ([#"../Robinson/src/logic.rs" 68 11 68 31] Invariant1.invariant' c (Seq.length a)) -> ([#"../Robinson/src/logic.rs" 69 0 69 133] exists j : int . 0 <= j /\ j < Seq.length (ShallowModel0.shallow_model c) /\ IndexLogic0.index_logic (Seq.get (ShallowModel0.shallow_model c) j) = ix /\ BoolToAssignedstate0.bool_to_assignedstate (Robinson_Lit_Lit_Type.lit_polarity (Seq.get (ShallowModel0.shallow_model c) j)) = v) -> ([#"../Robinson/src/logic.rs" 70 0 70 113] forall j : int . 0 <= j /\ j < Seq.length (ShallowModel0.shallow_model c) /\ not IndexLogic0.index_logic (Seq.get (ShallowModel0.shallow_model c) j) = ix -> UnsatInner0.unsat_inner (Seq.get (ShallowModel0.shallow_model c) j) a) -> ([#"../Robinson/src/logic.rs" 72 10 72 45] UnsatInner1.unsat_inner f (Seq.set a ix (FlipV0.flip_v v))) && ([#"../Robinson/src/logic.rs" 71 10 71 64] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v)))
end
module Robinson_Logic_LemmaUnitWrongPolarityUnsatFormula
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_UnsatInner_Stub as UnsatInner1
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Stub as EventuallySatCompleteInner0
  clone Robinson_Logic_FlipV_Stub as FlipV0
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsatInner_Stub as UnsatInner0
  clone Robinson_Logic_BoolToAssignedstate_Stub as BoolToAssignedstate0 with
    axiom .
  clone Robinson_Lit_Impl0_IndexLogic_Stub as IndexLogic0
  clone Robinson_Clause_Impl0_ShallowModel_Stub as ShallowModel0
  clone Robinson_Clause_Impl1_Invariant_Stub as Invariant1
  clone Robinson_Clause_Impl1_InFormula_Stub as InFormula0
  clone Robinson_Clause_Impl1_UnitInner_Stub as UnitInner0
  clone Robinson_Logic_Unset_Stub as Unset0
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant0
  function lemma_unit_wrong_polarity_unsat_formula [#"../Robinson/src/logic.rs" 73 0 75 1] (c : Robinson_Clause_Clause_Type.t_clause) (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
   =
    [#"../Robinson/src/logic.rs" 61 0 61 8] ()
  val lemma_unit_wrong_polarity_unsat_formula [#"../Robinson/src/logic.rs" 73 0 75 1] (c : Robinson_Clause_Clause_Type.t_clause) (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {[#"../Robinson/src/logic.rs" 62 11 62 24] Invariant0.invariant' f}
    requires {[#"../Robinson/src/logic.rs" 63 11 63 33] UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f) = Seq.length a}
    requires {[#"../Robinson/src/logic.rs" 64 11 64 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)}
    requires {[#"../Robinson/src/logic.rs" 65 11 65 20] not Unset0.unset v}
    requires {[#"../Robinson/src/logic.rs" 66 11 66 26] UnitInner0.unit_inner c a}
    requires {[#"../Robinson/src/logic.rs" 67 11 67 26] InFormula0.in_formula c f}
    requires {[#"../Robinson/src/logic.rs" 68 11 68 31] Invariant1.invariant' c (Seq.length a)}
    requires {[#"../Robinson/src/logic.rs" 69 0 69 133] exists j : int . 0 <= j /\ j < Seq.length (ShallowModel0.shallow_model c) /\ IndexLogic0.index_logic (Seq.get (ShallowModel0.shallow_model c) j) = ix /\ BoolToAssignedstate0.bool_to_assignedstate (Robinson_Lit_Lit_Type.lit_polarity (Seq.get (ShallowModel0.shallow_model c) j)) = v}
    requires {[#"../Robinson/src/logic.rs" 70 0 70 113] forall j : int . 0 <= j /\ j < Seq.length (ShallowModel0.shallow_model c) /\ not IndexLogic0.index_logic (Seq.get (ShallowModel0.shallow_model c) j) = ix -> UnsatInner0.unsat_inner (Seq.get (ShallowModel0.shallow_model c) j) a}
    ensures { result = lemma_unit_wrong_polarity_unsat_formula c f a ix v }
    
  axiom lemma_unit_wrong_polarity_unsat_formula_spec : forall c : Robinson_Clause_Clause_Type.t_clause, f : Robinson_Formula_Formula_Type.t_formula, a : Seq.seq uint8, ix : int, v : uint8 . ([#"../Robinson/src/logic.rs" 62 11 62 24] Invariant0.invariant' f) -> ([#"../Robinson/src/logic.rs" 63 11 63 33] UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f) = Seq.length a) -> ([#"../Robinson/src/logic.rs" 64 11 64 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)) -> ([#"../Robinson/src/logic.rs" 65 11 65 20] not Unset0.unset v) -> ([#"../Robinson/src/logic.rs" 66 11 66 26] UnitInner0.unit_inner c a) -> ([#"../Robinson/src/logic.rs" 67 11 67 26] InFormula0.in_formula c f) -> ([#"../Robinson/src/logic.rs" 68 11 68 31] Invariant1.invariant' c (Seq.length a)) -> ([#"../Robinson/src/logic.rs" 69 0 69 133] exists j : int . 0 <= j /\ j < Seq.length (ShallowModel0.shallow_model c) /\ IndexLogic0.index_logic (Seq.get (ShallowModel0.shallow_model c) j) = ix /\ BoolToAssignedstate0.bool_to_assignedstate (Robinson_Lit_Lit_Type.lit_polarity (Seq.get (ShallowModel0.shallow_model c) j)) = v) -> ([#"../Robinson/src/logic.rs" 70 0 70 113] forall j : int . 0 <= j /\ j < Seq.length (ShallowModel0.shallow_model c) /\ not IndexLogic0.index_logic (Seq.get (ShallowModel0.shallow_model c) j) = ix -> UnsatInner0.unsat_inner (Seq.get (ShallowModel0.shallow_model c) j) a) -> ([#"../Robinson/src/logic.rs" 72 10 72 45] UnsatInner1.unsat_inner f (Seq.set a ix (FlipV0.flip_v v))) && ([#"../Robinson/src/logic.rs" 71 10 71 64] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v)))
end
module Robinson_Logic_LemmaUnitWrongPolarityUnsatFormula_Impl
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with
    predicate Unset0.unset = Unset0.unset
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  clone Robinson_Lit_Impl1_Invariant as Invariant2
  clone Robinson_Lit_Impl1_UnsatInner as UnsatInner0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner2 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Clause_Impl1_SatInner as SatInner0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate SatInner0.sat_inner = SatInner0.sat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
    predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Lit_Impl1_UnsetInner as UnsetInner0
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with
    predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
    predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Logic_FlipV as FlipV0
  clone Robinson_Logic_BoolToAssignedstate as BoolToAssignedstate0 with
    axiom .
  clone Robinson_Lit_Impl0_IndexLogic as IndexLogic0
  clone Robinson_Clause_Impl1_Invariant as Invariant1 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Robinson_Clause_Impl1_InFormula as InFormula0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    predicate SatInner0.sat_inner = SatInner0.sat_inner,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Invariant0.invariant' = Invariant1.invariant',
    val Max0.mAX' = Max0.mAX'
  let rec ghost function lemma_unit_wrong_polarity_unsat_formula [#"../Robinson/src/logic.rs" 73 0 75 1] (c : Robinson_Clause_Clause_Type.t_clause) (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {[#"../Robinson/src/logic.rs" 62 11 62 24] Invariant0.invariant' f}
    requires {[#"../Robinson/src/logic.rs" 63 11 63 33] UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f) = Seq.length a}
    requires {[#"../Robinson/src/logic.rs" 64 11 64 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)}
    requires {[#"../Robinson/src/logic.rs" 65 11 65 20] not Unset0.unset v}
    requires {[#"../Robinson/src/logic.rs" 66 11 66 26] UnitInner0.unit_inner c a}
    requires {[#"../Robinson/src/logic.rs" 67 11 67 26] InFormula0.in_formula c f}
    requires {[#"../Robinson/src/logic.rs" 68 11 68 31] Invariant1.invariant' c (Seq.length a)}
    requires {[#"../Robinson/src/logic.rs" 69 0 69 133] exists j : int . 0 <= j /\ j < Seq.length (ShallowModel0.shallow_model c) /\ IndexLogic0.index_logic (Seq.get (ShallowModel0.shallow_model c) j) = ix /\ BoolToAssignedstate0.bool_to_assignedstate (Robinson_Lit_Lit_Type.lit_polarity (Seq.get (ShallowModel0.shallow_model c) j)) = v}
    requires {[#"../Robinson/src/logic.rs" 70 0 70 113] forall j : int . 0 <= j /\ j < Seq.length (ShallowModel0.shallow_model c) /\ not IndexLogic0.index_logic (Seq.get (ShallowModel0.shallow_model c) j) = ix -> UnsatInner0.unsat_inner (Seq.get (ShallowModel0.shallow_model c) j) a}
    ensures { [#"../Robinson/src/logic.rs" 71 10 71 64] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v)) }
    ensures { [#"../Robinson/src/logic.rs" 72 10 72 45] UnsatInner1.unsat_inner f (Seq.set a ix (FlipV0.flip_v v)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Robinson/src/logic.rs" 61 0 61 8] ()
end
module Robinson_Logic_LemmaUnitForces_Stub
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  clone Robinson_Logic_FlipV_Stub as FlipV0
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Stub as EventuallySatCompleteInner0
  clone Robinson_Logic_Unset_Stub as Unset0
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant0
  function lemma_unit_forces [#"../Robinson/src/logic.rs" 59 0 59 86] (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Robinson_Logic_LemmaUnitForces_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  clone Robinson_Logic_FlipV_Stub as FlipV0
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Stub as EventuallySatCompleteInner0
  clone Robinson_Logic_Unset_Stub as Unset0
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant0
  function lemma_unit_forces [#"../Robinson/src/logic.rs" 59 0 59 86] (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
  axiom lemma_unit_forces_spec : forall f : Robinson_Formula_Formula_Type.t_formula, a : Seq.seq uint8, ix : int, v : uint8 . ([#"../Robinson/src/logic.rs" 52 11 52 24] Invariant0.invariant' f) -> ([#"../Robinson/src/logic.rs" 53 11 53 33] UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f) = Seq.length a) -> ([#"../Robinson/src/logic.rs" 54 11 54 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)) -> ([#"../Robinson/src/logic.rs" 55 11 55 20] not Unset0.unset v) -> ([#"../Robinson/src/logic.rs" 56 11 56 45] EventuallySatCompleteInner0.eventually_sat_complete_inner f a) -> ([#"../Robinson/src/logic.rs" 57 11 57 65] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v))) -> ([#"../Robinson/src/logic.rs" 58 10 58 55] EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v))
end
module Robinson_Logic_LemmaUnitForces
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  clone Robinson_Logic_FlipV_Stub as FlipV0
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Stub as EventuallySatCompleteInner0
  clone Robinson_Logic_Unset_Stub as Unset0
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant0
  function lemma_unit_forces [#"../Robinson/src/logic.rs" 59 0 59 86] (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
   =
    [#"../Robinson/src/logic.rs" 51 0 51 8] ()
  val lemma_unit_forces [#"../Robinson/src/logic.rs" 59 0 59 86] (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {[#"../Robinson/src/logic.rs" 52 11 52 24] Invariant0.invariant' f}
    requires {[#"../Robinson/src/logic.rs" 53 11 53 33] UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f) = Seq.length a}
    requires {[#"../Robinson/src/logic.rs" 54 11 54 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)}
    requires {[#"../Robinson/src/logic.rs" 55 11 55 20] not Unset0.unset v}
    requires {[#"../Robinson/src/logic.rs" 56 11 56 45] EventuallySatCompleteInner0.eventually_sat_complete_inner f a}
    requires {[#"../Robinson/src/logic.rs" 57 11 57 65] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v))}
    ensures { result = lemma_unit_forces f a ix v }
    
  axiom lemma_unit_forces_spec : forall f : Robinson_Formula_Formula_Type.t_formula, a : Seq.seq uint8, ix : int, v : uint8 . ([#"../Robinson/src/logic.rs" 52 11 52 24] Invariant0.invariant' f) -> ([#"../Robinson/src/logic.rs" 53 11 53 33] UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f) = Seq.length a) -> ([#"../Robinson/src/logic.rs" 54 11 54 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)) -> ([#"../Robinson/src/logic.rs" 55 11 55 20] not Unset0.unset v) -> ([#"../Robinson/src/logic.rs" 56 11 56 45] EventuallySatCompleteInner0.eventually_sat_complete_inner f a) -> ([#"../Robinson/src/logic.rs" 57 11 57 65] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v))) -> ([#"../Robinson/src/logic.rs" 58 10 58 55] EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v))
end
module Robinson_Logic_LemmaUnitForces_Impl
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  clone Robinson_Lit_Impl1_Invariant as Invariant2
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate SatInner0.sat_inner = SatInner1.sat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
    predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Clause_Impl1_Invariant as Invariant1 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Robinson_Logic_FlipV as FlipV0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with
    predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant1.invariant',
    val Max0.mAX' = Max0.mAX'
  let rec ghost function lemma_unit_forces [#"../Robinson/src/logic.rs" 59 0 59 86] (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {[#"../Robinson/src/logic.rs" 52 11 52 24] Invariant0.invariant' f}
    requires {[#"../Robinson/src/logic.rs" 53 11 53 33] UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f) = Seq.length a}
    requires {[#"../Robinson/src/logic.rs" 54 11 54 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)}
    requires {[#"../Robinson/src/logic.rs" 55 11 55 20] not Unset0.unset v}
    requires {[#"../Robinson/src/logic.rs" 56 11 56 45] EventuallySatCompleteInner0.eventually_sat_complete_inner f a}
    requires {[#"../Robinson/src/logic.rs" 57 11 57 65] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v))}
    ensures { [#"../Robinson/src/logic.rs" 58 10 58 55] EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Robinson/src/logic.rs" 51 0 51 8] ()
end
module Robinson_Logic_LemmaExtensionSatBaseSat_Stub
  use mach.int.Int
  use seq.Seq
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Stub as EventuallySatCompleteInner0
  clone Robinson_Logic_Unset_Stub as Unset0
  function lemma_extension_sat_base_sat [#"../Robinson/src/logic.rs" 82 0 82 97] (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Robinson_Logic_LemmaExtensionSatBaseSat_Interface
  use mach.int.Int
  use seq.Seq
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Stub as EventuallySatCompleteInner0
  clone Robinson_Logic_Unset_Stub as Unset0
  function lemma_extension_sat_base_sat [#"../Robinson/src/logic.rs" 82 0 82 97] (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
  axiom lemma_extension_sat_base_sat_spec : forall f : Robinson_Formula_Formula_Type.t_formula, a : Seq.seq uint8, ix : int, v : uint8 . ([#"../Robinson/src/logic.rs" 79 11 79 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)) -> ([#"../Robinson/src/logic.rs" 80 11 80 56] EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v)) -> ([#"../Robinson/src/logic.rs" 81 10 81 44] EventuallySatCompleteInner0.eventually_sat_complete_inner f a)
end
module Robinson_Logic_LemmaExtensionSatBaseSat
  use mach.int.Int
  use seq.Seq
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Stub as EventuallySatCompleteInner0
  clone Robinson_Logic_Unset_Stub as Unset0
  function lemma_extension_sat_base_sat [#"../Robinson/src/logic.rs" 82 0 82 97] (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
   =
    [#"../Robinson/src/logic.rs" 78 0 78 8] ()
  val lemma_extension_sat_base_sat [#"../Robinson/src/logic.rs" 82 0 82 97] (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {[#"../Robinson/src/logic.rs" 79 11 79 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)}
    requires {[#"../Robinson/src/logic.rs" 80 11 80 56] EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v)}
    ensures { result = lemma_extension_sat_base_sat f a ix v }
    
  axiom lemma_extension_sat_base_sat_spec : forall f : Robinson_Formula_Formula_Type.t_formula, a : Seq.seq uint8, ix : int, v : uint8 . ([#"../Robinson/src/logic.rs" 79 11 79 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)) -> ([#"../Robinson/src/logic.rs" 80 11 80 56] EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v)) -> ([#"../Robinson/src/logic.rs" 81 10 81 44] EventuallySatCompleteInner0.eventually_sat_complete_inner f a)
end
module Robinson_Logic_LemmaExtensionSatBaseSat_Impl
  use mach.int.Int
  use seq.Seq
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with
    predicate Unset0.unset = Unset0.unset
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate SatInner0.sat_inner = SatInner1.sat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
    predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with
    predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  let rec ghost function lemma_extension_sat_base_sat [#"../Robinson/src/logic.rs" 82 0 82 97] (f : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {[#"../Robinson/src/logic.rs" 79 11 79 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)}
    requires {[#"../Robinson/src/logic.rs" 80 11 80 56] EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v)}
    ensures { [#"../Robinson/src/logic.rs" 81 10 81 44] EventuallySatCompleteInner0.eventually_sat_complete_inner f a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Robinson/src/logic.rs" 78 0 78 8] ()
end
module Robinson_Logic_Neg_Stub
  use mach.int.Int
  use prelude.UInt8
  function neg [#"../Robinson/src/logic.rs" 36 0 36 25] (_1' : ()) : uint8
end
module Robinson_Logic_Neg_Interface
  use mach.int.Int
  use prelude.UInt8
  function neg [#"../Robinson/src/logic.rs" 36 0 36 25] (_1' : ()) : uint8
end
module Robinson_Logic_Neg
  use mach.int.Int
  use prelude.UInt8
  function neg [#"../Robinson/src/logic.rs" 36 0 36 25] (_1' : ()) : uint8 =
    [#"../Robinson/src/logic.rs" 37 4 37 7] (0 : uint8)
  val neg [#"../Robinson/src/logic.rs" 36 0 36 25] (_1' : ()) : uint8
    ensures { result = neg _1' }
    
end
module Robinson_Logic_Pos_Stub
  use mach.int.Int
  use prelude.UInt8
  function pos [#"../Robinson/src/logic.rs" 31 0 31 25] (_1' : ()) : uint8
end
module Robinson_Logic_Pos_Interface
  use mach.int.Int
  use prelude.UInt8
  function pos [#"../Robinson/src/logic.rs" 31 0 31 25] (_1' : ()) : uint8
end
module Robinson_Logic_Pos
  use mach.int.Int
  use prelude.UInt8
  function pos [#"../Robinson/src/logic.rs" 31 0 31 25] (_1' : ()) : uint8 =
    [#"../Robinson/src/logic.rs" 32 4 32 7] (1 : uint8)
  val pos [#"../Robinson/src/logic.rs" 31 0 31 25] (_1' : ()) : uint8
    ensures { result = pos _1' }
    
end
module Robinson_Logic_LemmaExtensionsUnsatBaseUnsat_Stub
  use mach.int.Int
  use seq.Seq
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Logic_Pos_Stub as Pos0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Stub as EventuallySatCompleteInner0
  clone Robinson_Logic_Neg_Stub as Neg0
  clone Robinson_Logic_Unset_Stub as Unset0
  function lemma_extensions_unsat_base_unsat [#"../Robinson/src/logic.rs" 89 0 89 84] (a : Seq.seq uint8) (ix : int) (f : Robinson_Formula_Formula_Type.t_formula) : ()
    
end
module Robinson_Logic_LemmaExtensionsUnsatBaseUnsat_Interface
  use mach.int.Int
  use seq.Seq
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Logic_Pos_Stub as Pos0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Stub as EventuallySatCompleteInner0
  clone Robinson_Logic_Neg_Stub as Neg0
  clone Robinson_Logic_Unset_Stub as Unset0
  function lemma_extensions_unsat_base_unsat [#"../Robinson/src/logic.rs" 89 0 89 84] (a : Seq.seq uint8) (ix : int) (f : Robinson_Formula_Formula_Type.t_formula) : ()
    
  axiom lemma_extensions_unsat_base_unsat_spec : forall a : Seq.seq uint8, ix : int, f : Robinson_Formula_Formula_Type.t_formula . ([#"../Robinson/src/logic.rs" 85 11 85 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)) -> ([#"../Robinson/src/logic.rs" 86 11 86 61] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Neg0.neg ()))) -> ([#"../Robinson/src/logic.rs" 87 11 87 61] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Pos0.pos ()))) -> ([#"../Robinson/src/logic.rs" 88 10 88 45] not EventuallySatCompleteInner0.eventually_sat_complete_inner f a)
end
module Robinson_Logic_LemmaExtensionsUnsatBaseUnsat
  use mach.int.Int
  use seq.Seq
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Logic_Pos_Stub as Pos0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Stub as EventuallySatCompleteInner0
  clone Robinson_Logic_Neg_Stub as Neg0
  clone Robinson_Logic_Unset_Stub as Unset0
  function lemma_extensions_unsat_base_unsat [#"../Robinson/src/logic.rs" 89 0 89 84] (a : Seq.seq uint8) (ix : int) (f : Robinson_Formula_Formula_Type.t_formula) : ()
    
   =
    [#"../Robinson/src/logic.rs" 84 0 84 8] ()
  val lemma_extensions_unsat_base_unsat [#"../Robinson/src/logic.rs" 89 0 89 84] (a : Seq.seq uint8) (ix : int) (f : Robinson_Formula_Formula_Type.t_formula) : ()
    requires {[#"../Robinson/src/logic.rs" 85 11 85 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)}
    requires {[#"../Robinson/src/logic.rs" 86 11 86 61] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Neg0.neg ()))}
    requires {[#"../Robinson/src/logic.rs" 87 11 87 61] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Pos0.pos ()))}
    ensures { result = lemma_extensions_unsat_base_unsat a ix f }
    
  axiom lemma_extensions_unsat_base_unsat_spec : forall a : Seq.seq uint8, ix : int, f : Robinson_Formula_Formula_Type.t_formula . ([#"../Robinson/src/logic.rs" 85 11 85 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)) -> ([#"../Robinson/src/logic.rs" 86 11 86 61] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Neg0.neg ()))) -> ([#"../Robinson/src/logic.rs" 87 11 87 61] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Pos0.pos ()))) -> ([#"../Robinson/src/logic.rs" 88 10 88 45] not EventuallySatCompleteInner0.eventually_sat_complete_inner f a)
end
module Robinson_Logic_LemmaExtensionsUnsatBaseUnsat_Impl
  use mach.int.Int
  use seq.Seq
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with
    predicate Unset0.unset = Unset0.unset
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate SatInner0.sat_inner = SatInner1.sat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
    predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Logic_Pos as Pos0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with
    predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Logic_Neg as Neg0
  let rec ghost function lemma_extensions_unsat_base_unsat [#"../Robinson/src/logic.rs" 89 0 89 84] (a : Seq.seq uint8) (ix : int) (f : Robinson_Formula_Formula_Type.t_formula) : ()
    requires {[#"../Robinson/src/logic.rs" 85 11 85 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)}
    requires {[#"../Robinson/src/logic.rs" 86 11 86 61] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Neg0.neg ()))}
    requires {[#"../Robinson/src/logic.rs" 87 11 87 61] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Pos0.pos ()))}
    ensures { [#"../Robinson/src/logic.rs" 88 10 88 45] not EventuallySatCompleteInner0.eventually_sat_complete_inner f a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Robinson/src/logic.rs" 84 0 84 8] ()
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : int . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Robinson_Assignments_Impl2_UnitPropOnce_Interface
  use prelude.Borrow
  use mach.int.UInt64
  use mach.int.Int
  use seq.Seq
  use prelude.UIntSize
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Clause_Impl1_Unsat_Stub as Unsat0
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel2
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone Robinson_Clause_Impl1_Sat_Stub as Sat0
  clone Robinson_Assignments_Impl1_Complete_Stub as Complete0
  clone Robinson_Clause_Impl1_Unit_Stub as Unit0
  use Robinson_Clause_ClauseState_Type as Robinson_Clause_ClauseState_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatComplete_Stub as EventuallySatComplete0
  clone Robinson_Assignments_Impl1_Compatible_Stub as Compatible0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant1
  clone Robinson_Assignments_Impl1_Invariant_Stub as Invariant0
  val unit_prop_once [@cfg:stackify] [#"../Robinson/src/assignments.rs" 151 4 151 74] (self : borrowed (Robinson_Assignments_Assignments_Type.t_assignments)) (i : usize) (f : Robinson_Formula_Formula_Type.t_formula) : Robinson_Clause_ClauseState_Type.t_clausestate
    requires {[#"../Robinson/src/assignments.rs" 133 4 133 42] Invariant0.invariant' ( * self) f}
    requires {[#"../Robinson/src/assignments.rs" 134 15 134 28] Invariant1.invariant' f}
    requires {[#"../Robinson/src/assignments.rs" 135 15 135 49] 0 <= UInt64.to_int i /\ UInt64.to_int i < Seq.length (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f))}
    ensures { [#"../Robinson/src/assignments.rs" 133 4 133 42] Invariant0.invariant' ( ^ self) f }
    ensures { [#"../Robinson/src/assignments.rs" 136 14 136 39] Compatible0.compatible ( * self) ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 137 14 137 82] EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 144 14 149 5] match (result) with
      | Robinson_Clause_ClauseState_Type.C_Unit -> Unit0.unit (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f)) (UInt64.to_int i)) ( * self) /\ not Complete0.complete ( * self)
      | Robinson_Clause_ClauseState_Type.C_Sat -> Sat0.sat (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f)) (UInt64.to_int i)) ( ^ self) /\ ShallowModel1.shallow_model self = ShallowModel2.shallow_model ( ^ self)
      | Robinson_Clause_ClauseState_Type.C_Unsat -> Unsat0.unsat (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f)) (UInt64.to_int i)) ( ^ self) /\ ShallowModel1.shallow_model self = ShallowModel2.shallow_model ( ^ self)
      | Robinson_Clause_ClauseState_Type.C_Unknown -> ShallowModel1.shallow_model self = ShallowModel2.shallow_model ( ^ self) /\ not Complete0.complete ( ^ self)
      end }
    ensures { [#"../Robinson/src/assignments.rs" 150 4 150 120] Complete0.complete ( * self) ->  * self =  ^ self /\ (result = Robinson_Clause_ClauseState_Type.C_Unsat \/ result = Robinson_Clause_ClauseState_Type.C_Sat) }
    
end
module Robinson_Assignments_Impl2_UnitPropOnce
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Ghost
  use prelude.IntSize
  use prelude.UInt8
  use mach.int.UInt64
  use seq.Seq
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with
    predicate Unset0.unset = Unset0.unset
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Invariant as Invariant3
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel9 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  clone Robinson_Lit_Impl1_UnsetInner as UnsetInner0
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel7 with
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl1_SatInner as SatInner0 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate SatInner0.sat_inner = SatInner0.sat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
    predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Logic_Pos as Pos0
  clone Robinson_Logic_Neg as Neg0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy5 with
    type t = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy4 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output1 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue1 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds1 with
    type t = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel8 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy4.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Robinson_Lit_Impl1_UnsatInner as UnsatInner1
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner0 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner2 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Logic_FlipV as FlipV0
  clone Robinson_Clause_Impl1_InFormula as InFormula0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl0_ShallowModelTy_Type as ShallowModelTy3
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel6 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy3.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel5 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = Robinson_Clause_Clause_Type.t_clause
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = Robinson_Clause_Clause_Type.t_clause
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Robinson_Clause_Clause_Type.t_clause
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Robinson_Clause_Clause_Type.t_clause
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Robinson_Clause_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    predicate SatInner0.sat_inner = SatInner0.sat_inner,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with
    predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
    predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Robinson_Logic_LemmaExtensionsUnsatBaseUnsat as LemmaExtensionsUnsatBaseUnsat0 with
    predicate Unset0.unset = Unset0.unset,
    function Neg0.neg = Neg0.neg,
    predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
    function Pos0.pos = Pos0.pos,
    axiom .
  clone Robinson_Logic_LemmaExtensionSatBaseSat as LemmaExtensionSatBaseSat0 with
    predicate Unset0.unset = Unset0.unset,
    predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = uint8
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with
    type t = uint8,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate HasValue0.has_value = HasValue1.has_value,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    type Output0.output = Output1.output,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Lit_Impl0_IndexLogic as IndexLogic0
  clone Robinson_Lit_Impl2_Index_Interface as Index1 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Robinson_Formula_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant2.invariant',
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Logic_LemmaUnitForces as LemmaUnitForces0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Unset0.unset = Unset0.unset,
    predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
    function FlipV0.flip_v = FlipV0.flip_v,
    axiom .
  clone Robinson_Logic_BoolToAssignedstate as BoolToAssignedstate0 with
    axiom .
  clone Robinson_Logic_LemmaUnitWrongPolarityUnsatFormula as LemmaUnitWrongPolarityUnsatFormula0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Unset0.unset = Unset0.unset,
    predicate UnitInner0.unit_inner = UnitInner0.unit_inner,
    predicate InFormula0.in_formula = InFormula0.in_formula,
    predicate Invariant1.invariant' = Invariant2.invariant',
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
    predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner,
    function FlipV0.flip_v = FlipV0.flip_v,
    predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
    predicate UnsatInner1.unsat_inner = UnsatInner2.unsat_inner,
    axiom .
  clone Robinson_Assignments_Impl1_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Robinson_Clause_Impl1_Unit as Unit0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone Robinson_Clause_Impl2_GetUnit_Interface as GetUnit0 with
    predicate Unit0.unit = Unit0.unit,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant0.invariant',
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model,
    predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments
  clone Robinson_Assignments_Impl1_Complete as Complete0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Clause_Impl1_Unsat as Unsat0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Clause_Impl1_Sat as Sat0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  use Robinson_Clause_ClauseState_Type as Robinson_Clause_ClauseState_Type
  clone Robinson_Clause_Impl2_CheckIfUnit_Interface as CheckIfUnit0 with
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Invariant2.invariant' = Invariant0.invariant',
    predicate Sat0.sat = Sat0.sat,
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Unit0.unit = Unit0.unit,
    predicate Complete0.complete = Complete0.complete
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Assignments_Impl1_Compatible as Compatible0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  let rec cfg unit_prop_once [@cfg:stackify] [#"../Robinson/src/assignments.rs" 151 4 151 74] (self : borrowed (Robinson_Assignments_Assignments_Type.t_assignments)) (i : usize) (f : Robinson_Formula_Formula_Type.t_formula) : Robinson_Clause_ClauseState_Type.t_clausestate
    requires {[#"../Robinson/src/assignments.rs" 133 4 133 42] Invariant0.invariant' ( * self) f}
    requires {[#"../Robinson/src/assignments.rs" 134 15 134 28] Invariant1.invariant' f}
    requires {[#"../Robinson/src/assignments.rs" 135 15 135 49] 0 <= UInt64.to_int i /\ UInt64.to_int i < Seq.length (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f))}
    ensures { [#"../Robinson/src/assignments.rs" 133 4 133 42] Invariant0.invariant' ( ^ self) f }
    ensures { [#"../Robinson/src/assignments.rs" 136 14 136 39] Compatible0.compatible ( * self) ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 137 14 137 82] EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 144 14 149 5] match (result) with
      | Robinson_Clause_ClauseState_Type.C_Unit -> Unit0.unit (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f)) (UInt64.to_int i)) ( * self) /\ not Complete0.complete ( * self)
      | Robinson_Clause_ClauseState_Type.C_Sat -> Sat0.sat (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f)) (UInt64.to_int i)) ( ^ self) /\ ShallowModel1.shallow_model self = ShallowModel2.shallow_model ( ^ self)
      | Robinson_Clause_ClauseState_Type.C_Unsat -> Unsat0.unsat (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f)) (UInt64.to_int i)) ( ^ self) /\ ShallowModel1.shallow_model self = ShallowModel2.shallow_model ( ^ self)
      | Robinson_Clause_ClauseState_Type.C_Unknown -> ShallowModel1.shallow_model self = ShallowModel2.shallow_model ( ^ self) /\ not Complete0.complete ( ^ self)
      end }
    ensures { [#"../Robinson/src/assignments.rs" 150 4 150 120] Complete0.complete ( * self) ->  * self =  ^ self /\ (result = Robinson_Clause_ClauseState_Type.C_Unsat \/ result = Robinson_Clause_ClauseState_Type.C_Sat) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Clause_ClauseState_Type.t_clausestate;
  var self_1 : borrowed (Robinson_Assignments_Assignments_Type.t_assignments);
  var i_2 : usize;
  var f_3 : Robinson_Formula_Formula_Type.t_formula;
  var clause_12 : Robinson_Clause_Clause_Type.t_clause;
  var _13 : Robinson_Clause_Clause_Type.t_clause;
  var _14 : Alloc_Vec_Vec_Type.t_vec (Robinson_Clause_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global);
  var _15 : usize;
  var _old_a_16 : Ghost.ghost_ty (borrowed (Robinson_Assignments_Assignments_Type.t_assignments));
  var _18 : ();
  var _19 : Robinson_Clause_ClauseState_Type.t_clausestate;
  var _20 : Robinson_Clause_Clause_Type.t_clause;
  var _21 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _22 : Robinson_Formula_Formula_Type.t_formula;
  var _23 : isize;
  var _24 : ();
  var lit_25 : Robinson_Lit_Lit_Type.t_lit;
  var _26 : Robinson_Clause_Clause_Type.t_clause;
  var _27 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _28 : Robinson_Formula_Formula_Type.t_formula;
  var _29 : ();
  var _31 : ();
  var _33 : ();
  var _34 : bool;
  var _35 : borrowed uint8;
  var _36 : borrowed (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global));
  var _37 : usize;
  var _38 : Robinson_Lit_Lit_Type.t_lit;
  var _39 : borrowed uint8;
  var _40 : borrowed (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global));
  var _41 : usize;
  var _42 : Robinson_Lit_Lit_Type.t_lit;
  var _43 : ();
  var _45 : ();
  var _47 : ();
  var o_49 : Robinson_Clause_ClauseState_Type.t_clausestate;
  var _50 : ();
  {
    self_1 <- self;
    i_2 <- i;
    f_3 <- f;
    goto BB0
  }
  BB0 {
    _14 <- Robinson_Formula_Formula_Type.formula_clauses f_3;
    _15 <- i_2;
    _13 <- ([#"../Robinson/src/assignments.rs" 152 22 152 34] Index0.index _14 _15);
    goto BB1
  }
  BB1 {
    clause_12 <- _13;
    _18 <- ();
    _old_a_16 <- ([#"../Robinson/src/assignments.rs" 153 46 153 58] Ghost.new self_1);
    goto BB2
  }
  BB2 {
    _20 <- clause_12;
    _21 <-  * self_1;
    _22 <- f_3;
    _19 <- ([#"../Robinson/src/assignments.rs" 154 14 154 43] CheckIfUnit0.check_if_unit _20 _21 _22);
    goto BB3
  }
  BB3 {
    switch (_19)
      | Robinson_Clause_ClauseState_Type.C_Unit -> goto BB5
      | _ -> goto BB4
      end
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    o_49 <- _19;
    _19 <- any Robinson_Clause_ClauseState_Type.t_clausestate;
    _0 <- o_49;
    o_49 <- any Robinson_Clause_ClauseState_Type.t_clausestate;
    goto BB14
  }
  BB5 {
    _26 <- clause_12;
    _27 <-  * self_1;
    _28 <- f_3;
    lit_25 <- ([#"../Robinson/src/assignments.rs" 160 26 160 50] GetUnit0.get_unit _26 _27 _28);
    goto BB6
  }
  BB6 {
    assert { [#"../Robinson/src/assignments.rs" 161 30 161 145] let _ = LemmaUnitWrongPolarityUnsatFormula0.lemma_unit_wrong_polarity_unsat_formula clause_12 f_3 (ShallowModel1.shallow_model self_1) (IndexLogic0.index_logic lit_25) (BoolToAssignedstate0.bool_to_assignedstate (Robinson_Lit_Lit_Type.lit_polarity lit_25)) in true };
    _29 <- ();
    assert { [#"../Robinson/src/assignments.rs" 162 30 162 114] let _ = LemmaUnitForces0.lemma_unit_forces f_3 (ShallowModel1.shallow_model self_1) (IndexLogic0.index_logic lit_25) (BoolToAssignedstate0.bool_to_assignedstate (Robinson_Lit_Lit_Type.lit_polarity lit_25)) in true };
    _31 <- ();
    _34 <- Robinson_Lit_Lit_Type.lit_polarity lit_25;
    switch (_34)
      | False -> goto BB10
      | True -> goto BB7
      end
  }
  BB7 {
    _36 <- borrow_mut (Robinson_Assignments_Assignments_Type.assignments_0 ( * self_1));
    self_1 <- { self_1 with current = (let Robinson_Assignments_Assignments_Type.C_Assignments a b =  * self_1 in Robinson_Assignments_Assignments_Type.C_Assignments ( ^ _36) b) };
    assume { Resolve0.resolve self_1 };
    _38 <- lit_25;
    _37 <- ([#"../Robinson/src/assignments.rs" 164 27 164 38] Index1.index _38);
    goto BB8
  }
  BB8 {
    _35 <- ([#"../Robinson/src/assignments.rs" 164 20 164 39] IndexMut0.index_mut _36 _37);
    goto BB9
  }
  BB9 {
    _35 <- { _35 with current = ([#"../Robinson/src/assignments.rs" 164 42 164 43] (1 : uint8)) };
    assume { Resolve1.resolve _35 };
    _33 <- ();
    goto BB13
  }
  BB10 {
    _40 <- borrow_mut (Robinson_Assignments_Assignments_Type.assignments_0 ( * self_1));
    self_1 <- { self_1 with current = (let Robinson_Assignments_Assignments_Type.C_Assignments a b =  * self_1 in Robinson_Assignments_Assignments_Type.C_Assignments ( ^ _40) b) };
    assume { Resolve0.resolve self_1 };
    _42 <- lit_25;
    _41 <- ([#"../Robinson/src/assignments.rs" 166 27 166 38] Index1.index _42);
    goto BB11
  }
  BB11 {
    _39 <- ([#"../Robinson/src/assignments.rs" 166 20 166 39] IndexMut0.index_mut _40 _41);
    goto BB12
  }
  BB12 {
    _39 <- { _39 with current = ([#"../Robinson/src/assignments.rs" 166 42 166 43] (0 : uint8)) };
    assume { Resolve1.resolve _39 };
    _33 <- ();
    goto BB13
  }
  BB13 {
    assert { [#"../Robinson/src/assignments.rs" 168 30 168 135] let _ = LemmaExtensionSatBaseSat0.lemma_extension_sat_base_sat f_3 (ShallowModel1.shallow_model (Ghost.inner _old_a_16)) (IndexLogic0.index_logic lit_25) (BoolToAssignedstate0.bool_to_assignedstate (Robinson_Lit_Lit_Type.lit_polarity lit_25)) in true };
    _43 <- ();
    assert { [#"../Robinson/src/assignments.rs" 169 30 169 103] let _ = LemmaExtensionsUnsatBaseUnsat0.lemma_extensions_unsat_base_unsat (ShallowModel1.shallow_model (Ghost.inner _old_a_16)) (IndexLogic0.index_logic lit_25) f_3 in true };
    _45 <- ();
    assert { [#"../Robinson/src/assignments.rs" 170 30 170 54]  ^ self_1 =  ^ Ghost.inner _old_a_16 };
    _47 <- ();
    _0 <- Robinson_Clause_ClauseState_Type.C_Unit;
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module Robinson_Formula_Impl1_Sat_Stub
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate sat [#"../Robinson/src/formula.rs" 88 4 88 44] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Formula_Impl1_Sat_Interface
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate sat [#"../Robinson/src/formula.rs" 88 4 88 44] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Formula_Impl1_Sat
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner_Stub as SatInner0
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate sat [#"../Robinson/src/formula.rs" 88 4 88 44] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../Robinson/src/formula.rs" 89 20 89 38] SatInner0.sat_inner self (ShallowModel0.shallow_model a)
  val sat [#"../Robinson/src/formula.rs" 88 4 88 44] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = sat self a }
    
end
module Robinson_Formula_Impl1_Unsat_Stub
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate unsat [#"../Robinson/src/formula.rs" 101 4 101 46] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Formula_Impl1_Unsat_Interface
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate unsat [#"../Robinson/src/formula.rs" 101 4 101 46] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Formula_Impl1_Unsat
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_UnsatInner_Stub as UnsatInner0
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate unsat [#"../Robinson/src/formula.rs" 101 4 101 46] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../Robinson/src/formula.rs" 102 20 102 40] UnsatInner0.unsat_inner self (ShallowModel0.shallow_model a)
  val unsat [#"../Robinson/src/formula.rs" 101 4 101 46] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = unsat self a }
    
end
module Robinson_Clause_Impl1_Unknown_Stub
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate unknown [#"../Robinson/src/clause.rs" 74 4 74 48] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Clause_Impl1_Unknown_Interface
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate unknown [#"../Robinson/src/clause.rs" 74 4 74 48] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Clause_Impl1_Unknown
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_Unsat_Stub as Unsat0
  clone Robinson_Clause_Impl1_Sat_Stub as Sat0
  predicate unknown [#"../Robinson/src/clause.rs" 74 4 74 48] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../Robinson/src/clause.rs" 75 8 75 38] not Sat0.sat self a /\ not Unsat0.unsat self a
  val unknown [#"../Robinson/src/clause.rs" 74 4 74 48] (self : Robinson_Clause_Clause_Type.t_clause) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = unknown self a }
    
end
module Robinson_Assignments_Impl2_UnitPropagate_Interface
  use prelude.Borrow
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl1_Complete_Stub as Complete0
  clone Robinson_Formula_Impl1_Unsat_Stub as Unsat0
  clone Robinson_Formula_Impl1_Sat_Stub as Sat0
  use Robinson_Clause_ClauseState_Type as Robinson_Clause_ClauseState_Type
  clone Robinson_Assignments_Impl1_Compatible_Stub as Compatible0
  clone Robinson_Formula_Impl1_EventuallySatComplete_Stub as EventuallySatComplete0
  clone Robinson_Assignments_Impl1_Invariant_Stub as Invariant1
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant0
  val unit_propagate [@cfg:stackify] [#"../Robinson/src/assignments.rs" 190 4 190 64] (self : borrowed (Robinson_Assignments_Assignments_Type.t_assignments)) (f : Robinson_Formula_Formula_Type.t_formula) : Robinson_Clause_ClauseState_Type.t_clausestate
    requires {[#"../Robinson/src/assignments.rs" 178 15 178 28] Invariant0.invariant' f}
    requires {[#"../Robinson/src/assignments.rs" 179 15 179 33] Invariant1.invariant' ( * self) f}
    ensures { [#"../Robinson/src/assignments.rs" 180 14 180 35] Invariant1.invariant' ( ^ self) f }
    ensures { [#"../Robinson/src/assignments.rs" 181 14 181 82] EventuallySatComplete0.eventually_sat_complete f ( ^ self) = EventuallySatComplete0.eventually_sat_complete f ( * self) }
    ensures { [#"../Robinson/src/assignments.rs" 182 14 182 39] Compatible0.compatible ( * self) ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 183 14 188 5] match (result) with
      | Robinson_Clause_ClauseState_Type.C_Sat -> Sat0.sat f ( ^ self)
      | Robinson_Clause_ClauseState_Type.C_Unsat -> Unsat0.unsat f ( ^ self)
      | Robinson_Clause_ClauseState_Type.C_Unknown -> not Complete0.complete ( ^ self)
      | Robinson_Clause_ClauseState_Type.C_Unit -> not Complete0.complete ( * self)
      end }
    ensures { [#"../Robinson/src/assignments.rs" 189 4 189 106] Complete0.complete ( * self) ->  * self =  ^ self /\ (result = Robinson_Clause_ClauseState_Type.C_Unsat \/ Sat0.sat f ( * self)) }
    
end
module Robinson_Assignments_Impl2_UnitPropagate
  use prelude.Borrow
  use prelude.Ghost
  use mach.int.Int
  use prelude.UIntSize
  use prelude.IntSize
  use mach.int.UInt64
  use seq.Seq
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel6 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Lit_Impl1_Invariant as Invariant3
  clone Robinson_Lit_Impl1_UnsatInner as UnsatInner2
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  clone Robinson_Lit_Impl1_UnsetInner as UnsetInner0
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel5 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
    predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel4 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy1
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel3 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Robinson_Clause_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner1 with
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    predicate SatInner0.sat_inner = SatInner1.sat_inner,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate SatInner0.sat_inner = SatInner1.sat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with
    predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments
  clone Robinson_Clause_Impl1_Unsat as Unsat1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Clause_Impl1_Sat as Sat1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Assignments_Impl1_Complete as Complete0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Clause_Impl1_Unit as Unit0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  use Robinson_Clause_ClauseState_Type as Robinson_Clause_ClauseState_Type
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Assignments_Impl1_Compatible as Compatible0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant2.invariant',
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Robinson_Assignments_Impl2_UnitPropOnce_Interface as UnitPropOnce0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant0.invariant',
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Compatible0.compatible = Compatible0.compatible,
    predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
    predicate Unit0.unit = Unit0.unit,
    predicate Complete0.complete = Complete0.complete,
    predicate Sat0.sat = Sat1.sat,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel1.shallow_model,
    predicate Unsat0.unsat = Unsat1.unsat,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Robinson_Clause_Impl1_Unknown as Unknown0 with
    predicate Sat0.sat = Sat1.sat,
    predicate Unsat0.unsat = Unsat1.unsat
  clone Robinson_Formula_Impl1_Unsat as Unsat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Formula_Impl1_Sat as Sat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  let rec cfg unit_propagate [@cfg:stackify] [#"../Robinson/src/assignments.rs" 190 4 190 64] (self : borrowed (Robinson_Assignments_Assignments_Type.t_assignments)) (f : Robinson_Formula_Formula_Type.t_formula) : Robinson_Clause_ClauseState_Type.t_clausestate
    requires {[#"../Robinson/src/assignments.rs" 178 15 178 28] Invariant0.invariant' f}
    requires {[#"../Robinson/src/assignments.rs" 179 15 179 33] Invariant1.invariant' ( * self) f}
    ensures { [#"../Robinson/src/assignments.rs" 180 14 180 35] Invariant1.invariant' ( ^ self) f }
    ensures { [#"../Robinson/src/assignments.rs" 181 14 181 82] EventuallySatComplete0.eventually_sat_complete f ( ^ self) = EventuallySatComplete0.eventually_sat_complete f ( * self) }
    ensures { [#"../Robinson/src/assignments.rs" 182 14 182 39] Compatible0.compatible ( * self) ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 183 14 188 5] match (result) with
      | Robinson_Clause_ClauseState_Type.C_Sat -> Sat0.sat f ( ^ self)
      | Robinson_Clause_ClauseState_Type.C_Unsat -> Unsat0.unsat f ( ^ self)
      | Robinson_Clause_ClauseState_Type.C_Unknown -> not Complete0.complete ( ^ self)
      | Robinson_Clause_ClauseState_Type.C_Unit -> not Complete0.complete ( * self)
      end }
    ensures { [#"../Robinson/src/assignments.rs" 189 4 189 106] Complete0.complete ( * self) ->  * self =  ^ self /\ (result = Robinson_Clause_ClauseState_Type.C_Unsat \/ Sat0.sat f ( * self)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Clause_ClauseState_Type.t_clausestate;
  var self_1 : borrowed (Robinson_Assignments_Assignments_Type.t_assignments);
  var f_2 : Robinson_Formula_Formula_Type.t_formula;
  var _3 : ();
  var _old_a_11 : Ghost.ghost_ty (borrowed (Robinson_Assignments_Assignments_Type.t_assignments));
  var _13 : ();
  var i_14 : usize;
  var out_15 : Robinson_Clause_ClauseState_Type.t_clausestate;
  var _16 : ();
  var _26 : ();
  var _27 : bool;
  var _28 : usize;
  var _29 : usize;
  var _30 : Alloc_Vec_Vec_Type.t_vec (Robinson_Clause_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global);
  var _31 : ();
  var _32 : Robinson_Clause_ClauseState_Type.t_clausestate;
  var _33 : borrowed (Robinson_Assignments_Assignments_Type.t_assignments);
  var _34 : usize;
  var _35 : Robinson_Formula_Formula_Type.t_formula;
  var _36 : isize;
  var _37 : ();
  var _38 : Robinson_Clause_ClauseState_Type.t_clausestate;
  var _39 : isize;
  var _40 : Robinson_Clause_ClauseState_Type.t_clausestate;
  var _41 : ();
  var _42 : ();
  var _43 : ();
  {
    self_1 <- self;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    _13 <- ();
    _old_a_11 <- ([#"../Robinson/src/assignments.rs" 191 46 191 58] Ghost.new self_1);
    goto BB1
  }
  BB1 {
    i_14 <- ([#"../Robinson/src/assignments.rs" 192 27 192 28] (0 : usize));
    out_15 <- Robinson_Clause_ClauseState_Type.C_Sat;
    goto BB2
  }
  BB2 {
    invariant assignment_invariant { [#"../Robinson/src/assignments.rs" 194 42 194 60] Invariant1.invariant' ( * self_1) f_2 };
    invariant proph { [#"../Robinson/src/assignments.rs" 195 27 195 51]  ^ self_1 =  ^ Ghost.inner _old_a_11 };
    invariant maintains_compat { [#"../Robinson/src/assignments.rs" 196 38 196 62] Compatible0.compatible ( * Ghost.inner _old_a_11) ( * self_1) };
    invariant maintains_sat { [#"../Robinson/src/assignments.rs" 197 35 197 113] EventuallySatComplete0.eventually_sat_complete f_2 ( * Ghost.inner _old_a_11) = EventuallySatComplete0.eventually_sat_complete f_2 ( * self_1) };
    invariant out_not_unsat { [#"../Robinson/src/assignments.rs" 198 35 198 63] not out_15 = Robinson_Clause_ClauseState_Type.C_Unsat };
    invariant inv { [#"../Robinson/src/assignments.rs" 194 8 194 62] Complete0.complete ( * Ghost.inner _old_a_11) ->  * Ghost.inner _old_a_11 =  * self_1 /\ (forall j : int . 0 <= j /\ j < UInt64.to_int i_14 -> not Unknown0.unknown (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f_2)) j) ( * self_1) /\ not Unit0.unit (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f_2)) j) ( * self_1) /\ Sat1.sat (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f_2)) j) ( * self_1)) };
    invariant inv2 { [#"../Robinson/src/assignments.rs" 194 8 194 62] out_15 = Robinson_Clause_ClauseState_Type.C_Sat -> (forall j : int . 0 <= j /\ j < UInt64.to_int i_14 -> not Unsat1.unsat (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f_2)) j) ( * self_1) /\ not Unknown0.unknown (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f_2)) j) ( * self_1) /\ not Unit0.unit (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f_2)) j) ( * self_1) /\ Sat1.sat (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses f_2)) j) ( * self_1)) };
    invariant inv3 { [#"../Robinson/src/assignments.rs" 194 8 194 62] out_15 = Robinson_Clause_ClauseState_Type.C_Unit -> not Complete0.complete ( * Ghost.inner _old_a_11) };
    invariant inv4 { [#"../Robinson/src/assignments.rs" 194 8 194 62] out_15 = Robinson_Clause_ClauseState_Type.C_Unknown -> not Complete0.complete ( * self_1) };
    _28 <- i_14;
    _30 <- Robinson_Formula_Formula_Type.formula_clauses f_2;
    _29 <- ([#"../Robinson/src/assignments.rs" 209 18 209 33] Len0.len _30);
    goto BB3
  }
  BB3 {
    _27 <- ([#"../Robinson/src/assignments.rs" 209 14 209 33] _28 < _29);
    switch (_27)
      | False -> goto BB14
      | True -> goto BB4
      end
  }
  BB4 {
    _33 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _33) };
    _34 <- i_14;
    _35 <- f_2;
    _32 <- ([#"../Robinson/src/assignments.rs" 210 18 210 43] UnitPropOnce0.unit_prop_once _33 _34 _35);
    goto BB5
  }
  BB5 {
    switch (_32)
      | Robinson_Clause_ClauseState_Type.C_Sat -> goto BB8
      | Robinson_Clause_ClauseState_Type.C_Unsat -> goto BB9
      | Robinson_Clause_ClauseState_Type.C_Unit -> goto BB10
      | Robinson_Clause_ClauseState_Type.C_Unknown -> goto BB6
      end
  }
  BB6 {
    switch (out_15)
      | Robinson_Clause_ClauseState_Type.C_Sat -> goto BB12
      | _ -> goto BB11
      end
  }
  BB7 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB8 {
    _31 <- ();
    goto BB13
  }
  BB9 {
    assume { Resolve0.resolve self_1 };
    _0 <- Robinson_Clause_ClauseState_Type.C_Unsat;
    goto BB15
  }
  BB10 {
    _38 <- Robinson_Clause_ClauseState_Type.C_Unit;
    out_15 <- _38;
    _38 <- any Robinson_Clause_ClauseState_Type.t_clausestate;
    _31 <- ();
    goto BB13
  }
  BB11 {
    _31 <- ();
    goto BB13
  }
  BB12 {
    _40 <- Robinson_Clause_ClauseState_Type.C_Unknown;
    out_15 <- _40;
    _40 <- any Robinson_Clause_ClauseState_Type.t_clausestate;
    _31 <- ();
    goto BB13
  }
  BB13 {
    i_14 <- ([#"../Robinson/src/assignments.rs" 225 12 225 18] i_14 + ([#"../Robinson/src/assignments.rs" 225 17 225 18] (1 : usize)));
    _26 <- ();
    goto BB2
  }
  BB14 {
    assume { Resolve0.resolve self_1 };
    _16 <- ();
    _0 <- out_15;
    out_15 <- any Robinson_Clause_ClauseState_Type.t_clausestate;
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Robinson_Assignments_Impl2_DoUnitPropagation_Interface
  use prelude.Borrow
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl1_Complete_Stub as Complete0
  clone Robinson_Formula_Impl1_Sat_Stub as Sat0
  clone Robinson_Formula_Impl1_Unsat_Stub as Unsat0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Robinson_Assignments_Impl1_Compatible_Stub as Compatible0
  clone Robinson_Formula_Impl1_EventuallySatComplete_Stub as EventuallySatComplete0
  clone Robinson_Assignments_Impl1_Invariant_Stub as Invariant1
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant0
  val do_unit_propagation [@cfg:stackify] [#"../Robinson/src/assignments.rs" 238 4 238 70] (self : borrowed (Robinson_Assignments_Assignments_Type.t_assignments)) (f : Robinson_Formula_Formula_Type.t_formula) : Core_Option_Option_Type.t_option bool
    requires {[#"../Robinson/src/assignments.rs" 231 15 231 28] Invariant0.invariant' f}
    requires {[#"../Robinson/src/assignments.rs" 232 4 232 42] Invariant1.invariant' ( * self) f}
    ensures { [#"../Robinson/src/assignments.rs" 232 4 232 42] Invariant1.invariant' ( ^ self) f }
    ensures { [#"../Robinson/src/assignments.rs" 233 14 233 82] EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 234 14 234 39] Compatible0.compatible ( * self) ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 235 4 235 56] result = Core_Option_Option_Type.C_Some false -> Unsat0.unsat f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 236 4 236 53] result = Core_Option_Option_Type.C_Some true -> Sat0.sat f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 237 4 237 54] result = Core_Option_Option_Type.C_None -> not Complete0.complete ( ^ self) }
    
end
module Robinson_Assignments_Impl2_DoUnitPropagation
  use prelude.Borrow
  use prelude.Ghost
  use mach.int.Int
  use prelude.IntSize
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel4 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  clone Robinson_Lit_Impl1_UnsatInner as UnsatInner2
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Lit_Impl1_Invariant as Invariant3
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel3 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
    predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate SatInner0.sat_inner = SatInner1.sat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with
    predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments
  clone Robinson_Assignments_Impl1_Complete as Complete0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Formula_Impl1_Unsat as Unsat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Formula_Impl1_Sat as Sat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  use Robinson_Clause_ClauseState_Type as Robinson_Clause_ClauseState_Type
  clone Robinson_Assignments_Impl1_Compatible as Compatible0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant2.invariant',
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_Impl2_UnitPropagate_Interface as UnitPropagate0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
    predicate Compatible0.compatible = Compatible0.compatible,
    predicate Sat0.sat = Sat0.sat,
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Complete0.complete = Complete0.complete
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec cfg do_unit_propagation [@cfg:stackify] [#"../Robinson/src/assignments.rs" 238 4 238 70] (self : borrowed (Robinson_Assignments_Assignments_Type.t_assignments)) (f : Robinson_Formula_Formula_Type.t_formula) : Core_Option_Option_Type.t_option bool
    requires {[#"../Robinson/src/assignments.rs" 231 15 231 28] Invariant0.invariant' f}
    requires {[#"../Robinson/src/assignments.rs" 232 4 232 42] Invariant1.invariant' ( * self) f}
    ensures { [#"../Robinson/src/assignments.rs" 232 4 232 42] Invariant1.invariant' ( ^ self) f }
    ensures { [#"../Robinson/src/assignments.rs" 233 14 233 82] EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 234 14 234 39] Compatible0.compatible ( * self) ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 235 4 235 56] result = Core_Option_Option_Type.C_Some false -> Unsat0.unsat f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 236 4 236 53] result = Core_Option_Option_Type.C_Some true -> Sat0.sat f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 237 4 237 54] result = Core_Option_Option_Type.C_None -> not Complete0.complete ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option bool;
  var self_1 : borrowed (Robinson_Assignments_Assignments_Type.t_assignments);
  var f_2 : Robinson_Formula_Formula_Type.t_formula;
  var _old_a_11 : Ghost.ghost_ty (borrowed (Robinson_Assignments_Assignments_Type.t_assignments));
  var _13 : ();
  var _18 : ();
  var _19 : ();
  var _20 : Robinson_Clause_ClauseState_Type.t_clausestate;
  var _21 : borrowed (Robinson_Assignments_Assignments_Type.t_assignments);
  var _22 : Robinson_Formula_Formula_Type.t_formula;
  var _23 : isize;
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    self_1 <- self;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    _13 <- ();
    _old_a_11 <- ([#"../Robinson/src/assignments.rs" 239 46 239 58] Ghost.new self_1);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant assignments_invariant { [#"../Robinson/src/assignments.rs" 240 43 240 61] Invariant1.invariant' ( * self_1) f_2 };
    invariant proph { [#"../Robinson/src/assignments.rs" 241 27 241 51]  ^ self_1 =  ^ Ghost.inner _old_a_11 };
    invariant maintains_compat { [#"../Robinson/src/assignments.rs" 242 38 242 62] Compatible0.compatible ( * Ghost.inner _old_a_11) ( * self_1) };
    invariant maintains_sat { [#"../Robinson/src/assignments.rs" 240 8 240 63] EventuallySatComplete0.eventually_sat_complete f_2 ( * Ghost.inner _old_a_11) -> EventuallySatComplete0.eventually_sat_complete f_2 ( * self_1) };
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _22 <- f_2;
    _20 <- ([#"../Robinson/src/assignments.rs" 245 18 245 40] UnitPropagate0.unit_propagate _21 _22);
    goto BB3
  }
  BB3 {
    switch (_20)
      | Robinson_Clause_ClauseState_Type.C_Sat -> goto BB6
      | Robinson_Clause_ClauseState_Type.C_Unsat -> goto BB7
      | Robinson_Clause_ClauseState_Type.C_Unit -> goto BB4
      | Robinson_Clause_ClauseState_Type.C_Unknown -> goto BB8
      end
  }
  BB4 {
    _19 <- ();
    goto BB2
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB6 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_Some ([#"../Robinson/src/assignments.rs" 247 32 247 36] true);
    goto BB9
  }
  BB7 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_Some ([#"../Robinson/src/assignments.rs" 250 32 250 37] false);
    goto BB9
  }
  BB8 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Robinson_Clause_Impl1_NoDuplicateIndexes_Stub
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate no_duplicate_indexes [#"../Robinson/src/clause.rs" 87 4 87 45] (self : Robinson_Clause_Clause_Type.t_clause)
end
module Robinson_Clause_Impl1_NoDuplicateIndexes_Interface
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate no_duplicate_indexes [#"../Robinson/src/clause.rs" 87 4 87 45] (self : Robinson_Clause_Clause_Type.t_clause)
end
module Robinson_Clause_Impl1_NoDuplicateIndexes
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use mach.int.Int
  use seq.Seq
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl0_IndexLogic_Stub as IndexLogic0
  clone Robinson_Clause_Impl0_ShallowModel_Stub as ShallowModel0
  predicate no_duplicate_indexes [#"../Robinson/src/clause.rs" 87 4 87 45] (self : Robinson_Clause_Clause_Type.t_clause)
   =
    [#"../Robinson/src/clause.rs" 88 8 91 9] forall k : int . forall j : int . 0 <= j /\ j < Seq.length (ShallowModel0.shallow_model self) /\ 0 <= k /\ k < j -> not IndexLogic0.index_logic (Seq.get (ShallowModel0.shallow_model self) k) = IndexLogic0.index_logic (Seq.get (ShallowModel0.shallow_model self) j)
  val no_duplicate_indexes [#"../Robinson/src/clause.rs" 87 4 87 45] (self : Robinson_Clause_Clause_Type.t_clause) : bool
    ensures { result = no_duplicate_indexes self }
    
end
module Robinson_Clause_Impl2_ClauseFromVec_Interface
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val clause_from_vec [@cfg:stackify] [#"../Robinson/src/clause.rs" 109 4 109 51] (vec : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global)) : Robinson_Clause_Clause_Type.t_clause
    
end
module Robinson_Clause_Impl2_ClauseFromVec
  clone Core_Num_Impl12_Max as Max0
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = Robinson_Lit_Lit_Type.t_lit
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl9_Resolve as Resolve0 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Resolve0.resolve = Resolve1.resolve,
    val Max0.mAX' = Max0.mAX'
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  let rec cfg clause_from_vec [@cfg:stackify] [#"../Robinson/src/clause.rs" 109 4 109 51] (vec : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global)) : Robinson_Clause_Clause_Type.t_clause
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Clause_Clause_Type.t_clause;
  var vec_1 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _2 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  {
    vec_1 <- vec;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _2 };
    _2 <- vec_1;
    vec_1 <- any Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
    _0 <- Robinson_Clause_Clause_Type.C_Clause _2;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module Core_Usize_Max_Stub
  use mach.int.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Usize_Max
  use mach.int.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module Robinson_Clause_Impl2_Len_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Clause_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] [#"../Robinson/src/clause.rs" 224 4 224 30] (self : Robinson_Clause_Clause_Type.t_clause) : usize
    ensures { [#"../Robinson/src/clause.rs" 223 14 223 38] UInt64.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Robinson_Clause_Impl2_Len
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  use mach.int.UInt64
  use seq.Seq
  clone Core_Num_Impl12_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg len [@cfg:stackify] [#"../Robinson/src/clause.rs" 224 4 224 30] (self : Robinson_Clause_Clause_Type.t_clause) : usize
    ensures { [#"../Robinson/src/clause.rs" 223 14 223 38] UInt64.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : Robinson_Clause_Clause_Type.t_clause;
  var _3 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Robinson_Clause_Clause_Type.clause_rest self_1;
    _0 <- ([#"../Robinson/src/clause.rs" 225 8 225 23] Len0.len _3);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Robinson_Lit_Impl2_CheckLitInvariant_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Invariant_Stub as Invariant0
  val check_lit_invariant [@cfg:stackify] [#"../Robinson/src/lit.rs" 124 4 124 55] (self : Robinson_Lit_Lit_Type.t_lit) (n : usize) : bool
    ensures { [#"../Robinson/src/lit.rs" 122 14 122 42] result = Invariant0.invariant' self (UInt64.to_int n) }
    ensures { [#"../Robinson/src/lit.rs" 123 14 123 40] result = (UInt64.to_int (Robinson_Lit_Lit_Type.lit_idx self) < UInt64.to_int n) }
    
end
module Robinson_Lit_Impl2_CheckLitInvariant
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Invariant as Invariant0
  let rec cfg check_lit_invariant [@cfg:stackify] [#"../Robinson/src/lit.rs" 124 4 124 55] (self : Robinson_Lit_Lit_Type.t_lit) (n : usize) : bool
    ensures { [#"../Robinson/src/lit.rs" 122 14 122 42] result = Invariant0.invariant' self (UInt64.to_int n) }
    ensures { [#"../Robinson/src/lit.rs" 123 14 123 40] result = (UInt64.to_int (Robinson_Lit_Lit_Type.lit_idx self) < UInt64.to_int n) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Robinson_Lit_Lit_Type.t_lit;
  var n_2 : usize;
  var _5 : usize;
  var _6 : usize;
  {
    self_1 <- self;
    n_2 <- n;
    goto BB0
  }
  BB0 {
    _5 <- Robinson_Lit_Lit_Type.lit_idx self_1;
    _6 <- n_2;
    _0 <- ([#"../Robinson/src/lit.rs" 125 8 125 20] _5 < _6);
    return _0
  }
  
end
module Robinson_Clause_Impl2_CheckClauseInvariant_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_Invariant_Stub as Invariant0
  clone Robinson_Clause_Impl1_VarsInRange_Stub as VarsInRange0
  clone Core_Usize_Max_Stub as Max0
  val check_clause_invariant [@cfg:stackify] [#"../Robinson/src/clause.rs" 179 4 179 59] (self : Robinson_Clause_Clause_Type.t_clause) (n : usize) : usize
    requires {[#"../Robinson/src/clause.rs" 177 15 177 46] VarsInRange0.vars_in_range self (UInt64.to_int Max0.mAX')}
    ensures { [#"../Robinson/src/clause.rs" 178 14 178 37] Invariant0.invariant' self (UInt64.to_int result) }
    
end
module Robinson_Clause_Impl2_CheckClauseInvariant
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  use mach.int.UInt64
  use seq.Seq
  clone Core_Num_Impl12_Max as Max1
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Robinson_Clause_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone Robinson_Lit_Impl1_Invariant as Invariant1
  clone Robinson_Lit_Impl2_CheckLitInvariant_Interface as CheckLitInvariant0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Robinson_Clause_Impl2_Len_Interface as Len0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant0 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Core_Usize_Max as Max0
  let rec cfg check_clause_invariant [@cfg:stackify] [#"../Robinson/src/clause.rs" 179 4 179 59] (self : Robinson_Clause_Clause_Type.t_clause) (n : usize) : usize
    requires {[#"../Robinson/src/clause.rs" 177 15 177 46] VarsInRange0.vars_in_range self (UInt64.to_int Max0.mAX')}
    ensures { [#"../Robinson/src/clause.rs" 178 14 178 37] Invariant0.invariant' self (UInt64.to_int result) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : Robinson_Clause_Clause_Type.t_clause;
  var n_2 : usize;
  var i_5 : usize;
  var new_n_6 : usize;
  var _7 : ();
  var _10 : ();
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : Robinson_Clause_Clause_Type.t_clause;
  var _15 : ();
  var _16 : bool;
  var _17 : bool;
  var _18 : Robinson_Lit_Lit_Type.t_lit;
  var _19 : Robinson_Lit_Lit_Type.t_lit;
  var _20 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _21 : usize;
  var _22 : usize;
  var _23 : usize;
  var _24 : Robinson_Lit_Lit_Type.t_lit;
  var _25 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _26 : usize;
  var _27 : ();
  var _28 : ();
  var _29 : ();
  {
    self_1 <- self;
    n_2 <- n;
    goto BB0
  }
  BB0 {
    i_5 <- ([#"../Robinson/src/clause.rs" 180 27 180 28] (0 : usize));
    new_n_6 <- n_2;
    goto BB1
  }
  BB1 {
    invariant inv { [#"../Robinson/src/clause.rs" 182 8 182 91] forall j : int . 0 <= j /\ j < UInt64.to_int i_5 -> Invariant1.invariant' (Seq.get (ShallowModel0.shallow_model self_1) j) (UInt64.to_int new_n_6) };
    invariant new_n_inv { [#"../Robinson/src/clause.rs" 183 31 183 43] UInt64.to_int new_n_6 >= UInt64.to_int n_2 };
    _12 <- i_5;
    _14 <- self_1;
    _13 <- ([#"../Robinson/src/clause.rs" 184 18 184 28] Len0.len _14);
    goto BB2
  }
  BB2 {
    _11 <- ([#"../Robinson/src/clause.rs" 184 14 184 28] _12 < _13);
    switch (_11)
      | False -> goto BB10
      | True -> goto BB3
      end
  }
  BB3 {
    _20 <- Robinson_Clause_Clause_Type.clause_rest self_1;
    _21 <- i_5;
    _19 <- ([#"../Robinson/src/clause.rs" 185 16 185 28] Index0.index _20 _21);
    goto BB4
  }
  BB4 {
    _18 <- _19;
    _22 <- new_n_6;
    _17 <- ([#"../Robinson/src/clause.rs" 185 16 185 55] CheckLitInvariant0.check_lit_invariant _18 _22);
    goto BB5
  }
  BB5 {
    _16 <- not _17;
    switch (_16)
      | False -> goto BB8
      | True -> goto BB6
      end
  }
  BB6 {
    _25 <- Robinson_Clause_Clause_Type.clause_rest self_1;
    _26 <- i_5;
    _24 <- ([#"../Robinson/src/clause.rs" 186 24 186 36] Index0.index _25 _26);
    goto BB7
  }
  BB7 {
    _23 <- Robinson_Lit_Lit_Type.lit_idx _24;
    new_n_6 <- ([#"../Robinson/src/clause.rs" 186 16 186 44] _23 + ([#"../Robinson/src/clause.rs" 186 43 186 44] (1 : usize)));
    _15 <- ();
    goto BB9
  }
  BB8 {
    _15 <- ();
    goto BB9
  }
  BB9 {
    i_5 <- ([#"../Robinson/src/clause.rs" 188 12 188 18] i_5 + ([#"../Robinson/src/clause.rs" 188 17 188 18] (1 : usize)));
    _10 <- ();
    goto BB1
  }
  BB10 {
    _7 <- ();
    _0 <- new_n_6;
    return _0
  }
  
end
module Robinson_Clause_Impl2_NoDuplicates_Interface
  use prelude.Borrow
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_NoDuplicateIndexes_Stub as NoDuplicateIndexes0
  val no_duplicates [@cfg:stackify] [#"../Robinson/src/clause.rs" 200 4 200 39] (self : Robinson_Clause_Clause_Type.t_clause) : bool
    ensures { [#"../Robinson/src/clause.rs" 199 14 199 51] result = NoDuplicateIndexes0.no_duplicate_indexes self }
    
end
module Robinson_Clause_Impl2_NoDuplicates
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use seq.Seq
  clone Core_Num_Impl12_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Robinson_Clause_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone Robinson_Lit_Impl0_IndexLogic as IndexLogic0
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  let rec cfg no_duplicates [@cfg:stackify] [#"../Robinson/src/clause.rs" 200 4 200 39] (self : Robinson_Clause_Clause_Type.t_clause) : bool
    ensures { [#"../Robinson/src/clause.rs" 199 14 199 51] result = NoDuplicateIndexes0.no_duplicate_indexes self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Robinson_Clause_Clause_Type.t_clause;
  var _2 : ();
  var i_4 : usize;
  var _5 : ();
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var lit1_12 : Robinson_Lit_Lit_Type.t_lit;
  var _13 : Robinson_Lit_Lit_Type.t_lit;
  var _14 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _15 : usize;
  var j_16 : usize;
  var _17 : ();
  var _19 : bool;
  var _20 : usize;
  var _21 : usize;
  var lit2_22 : Robinson_Lit_Lit_Type.t_lit;
  var _23 : Robinson_Lit_Lit_Type.t_lit;
  var _24 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _25 : usize;
  var _26 : ();
  var _27 : bool;
  var _28 : usize;
  var _29 : usize;
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : ();
  var _35 : ();
  var _36 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    i_4 <- ([#"../Robinson/src/clause.rs" 201 27 201 28] (0 : usize));
    goto BB1
  }
  BB1 {
    invariant no_dups { [#"../Robinson/src/clause.rs" 202 8 204 67] forall k : int . forall j : int . 0 <= j /\ j < UInt64.to_int i_4 /\ 0 <= k /\ k < j -> Robinson_Lit_Lit_Type.lit_idx (Seq.get (ShallowModel0.shallow_model self_1) j) <> Robinson_Lit_Lit_Type.lit_idx (Seq.get (ShallowModel0.shallow_model self_1) k) };
    _9 <- i_4;
    _11 <- Robinson_Clause_Clause_Type.clause_rest self_1;
    _10 <- ([#"../Robinson/src/clause.rs" 205 18 205 33] Len0.len _11);
    goto BB2
  }
  BB2 {
    _8 <- ([#"../Robinson/src/clause.rs" 205 14 205 33] _9 < _10);
    switch (_8)
      | False -> goto BB11
      | True -> goto BB3
      end
  }
  BB3 {
    _14 <- Robinson_Clause_Clause_Type.clause_rest self_1;
    _15 <- i_4;
    _13 <- ([#"../Robinson/src/clause.rs" 206 23 206 35] Index0.index _14 _15);
    goto BB4
  }
  BB4 {
    lit1_12 <- _13;
    j_16 <- ([#"../Robinson/src/clause.rs" 207 31 207 32] (0 : usize));
    goto BB5
  }
  BB5 {
    invariant inv { [#"../Robinson/src/clause.rs" 208 12 208 93] forall k : int . 0 <= k /\ k < UInt64.to_int j_16 -> Robinson_Lit_Lit_Type.lit_idx lit1_12 <> Robinson_Lit_Lit_Type.lit_idx (Seq.get (ShallowModel0.shallow_model self_1) k) };
    _20 <- j_16;
    _21 <- i_4;
    _19 <- ([#"../Robinson/src/clause.rs" 209 18 209 23] _20 < _21);
    switch (_19)
      | False -> goto BB10
      | True -> goto BB6
      end
  }
  BB6 {
    _24 <- Robinson_Clause_Clause_Type.clause_rest self_1;
    _25 <- j_16;
    _23 <- ([#"../Robinson/src/clause.rs" 210 27 210 39] Index0.index _24 _25);
    goto BB7
  }
  BB7 {
    lit2_22 <- _23;
    _28 <- Robinson_Lit_Lit_Type.lit_idx lit1_12;
    _29 <- Robinson_Lit_Lit_Type.lit_idx lit2_22;
    _27 <- ([#"../Robinson/src/clause.rs" 211 19 211 39] _28 = _29);
    switch (_27)
      | False -> goto BB9
      | True -> goto BB8
      end
  }
  BB8 {
    _0 <- ([#"../Robinson/src/clause.rs" 212 27 212 32] false);
    goto BB12
  }
  BB9 {
    _26 <- ();
    j_16 <- ([#"../Robinson/src/clause.rs" 214 16 214 22] j_16 + ([#"../Robinson/src/clause.rs" 214 21 214 22] (1 : usize)));
    _7 <- ();
    goto BB5
  }
  BB10 {
    _17 <- ();
    i_4 <- ([#"../Robinson/src/clause.rs" 216 12 216 18] i_4 + ([#"../Robinson/src/clause.rs" 216 17 216 18] (1 : usize)));
    _7 <- ();
    goto BB1
  }
  BB11 {
    _5 <- ();
    _0 <- ([#"../Robinson/src/clause.rs" 218 15 218 19] true);
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Robinson_Util_SortedRangeRev_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  predicate sorted_range_rev [#"../Robinson/src/util.rs" 5 0 5 67] (s : Seq.seq (usize, usize)) (l : int) (u : int)
end
module Robinson_Util_SortedRangeRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  predicate sorted_range_rev [#"../Robinson/src/util.rs" 5 0 5 67] (s : Seq.seq (usize, usize)) (l : int) (u : int)
end
module Robinson_Util_SortedRangeRev
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  predicate sorted_range_rev [#"../Robinson/src/util.rs" 5 0 5 67] (s : Seq.seq (usize, usize)) (l : int) (u : int) =
    [#"../Robinson/src/util.rs" 6 4 8 5] forall j : int . forall i : int . l <= i /\ i < j /\ j < u -> (let (a, _) = Seq.get s i in a) >= (let (a, _) = Seq.get s j in a)
  val sorted_range_rev [#"../Robinson/src/util.rs" 5 0 5 67] (s : Seq.seq (usize, usize)) (l : int) (u : int) : bool
    ensures { result = sorted_range_rev s l u }
    
end
module Robinson_Util_SortedRev_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  predicate sorted_rev [#"../Robinson/src/util.rs" 12 0 12 49] (s : Seq.seq (usize, usize))
end
module Robinson_Util_SortedRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  predicate sorted_rev [#"../Robinson/src/util.rs" 12 0 12 49] (s : Seq.seq (usize, usize))
end
module Robinson_Util_SortedRev
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  clone Robinson_Util_SortedRangeRev_Stub as SortedRangeRev0
  predicate sorted_rev [#"../Robinson/src/util.rs" 12 0 12 49] (s : Seq.seq (usize, usize)) =
    [#"../Robinson/src/util.rs" 13 4 13 35] SortedRangeRev0.sorted_range_rev s 0 (Seq.length s)
  val sorted_rev [#"../Robinson/src/util.rs" 12 0 12 49] (s : Seq.seq (usize, usize)) : bool
    ensures { result = sorted_rev s }
    
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf_Stub
  type t
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface
  type t
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf
  type t
  use seq.Seq
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) =
    [#"../Robinson/src/formula.rs" 105 2 106 14] Permut.permut self o 0 (Seq.length self)
  val permutation_of (self : Seq.seq t) (o : Seq.seq t) : bool
    ensures { result = permutation_of self o }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  val shallow_model (self : seq t) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module Alloc_Vec_Impl11_DerefMut_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel3 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val deref_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : borrowed (seq t)
    ensures { ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    ensures { ShallowModel2.shallow_model ( ^ result) = ShallowModel3.shallow_model ( ^ self) }
    
end
module Alloc_Vec_Impl11_DerefMut
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Interface as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Interface as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val deref_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : borrowed (seq t)
    ensures { ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    ensures { ShallowModel2.shallow_model ( ^ result) = ShallowModel3.shallow_model ( ^ self) }
    
end
module Core_Slice_Impl0_Swap_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use seq.Permut
  use prelude.Slice
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int a < Seq.length (ShallowModel0.shallow_model self)}
    requires {UInt64.to_int b < Seq.length (ShallowModel0.shallow_model self)}
    ensures { Permut.exchange (ShallowModel1.shallow_model ( ^ self)) (ShallowModel0.shallow_model self) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Core_Slice_Impl0_Swap
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use seq.Permut
  use prelude.Slice
  use prelude.UIntSize
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Interface as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int a < Seq.length (ShallowModel0.shallow_model self)}
    requires {UInt64.to_int b < Seq.length (ShallowModel0.shallow_model self)}
    ensures { Permut.exchange (ShallowModel1.shallow_model ( ^ self)) (ShallowModel0.shallow_model self) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Robinson_Util_PartitionRev_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  predicate partition_rev [#"../Robinson/src/util.rs" 17 0 17 56] (v : Seq.seq (usize, usize)) (i : int)
end
module Robinson_Util_PartitionRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  predicate partition_rev [#"../Robinson/src/util.rs" 17 0 17 56] (v : Seq.seq (usize, usize)) (i : int)
end
module Robinson_Util_PartitionRev
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  predicate partition_rev [#"../Robinson/src/util.rs" 17 0 17 56] (v : Seq.seq (usize, usize)) (i : int) =
    [#"../Robinson/src/util.rs" 18 4 18 110] forall k2 : int . forall k1 : int . 0 <= k1 /\ k1 < i /\ i <= k2 /\ k2 < Seq.length v -> (let (a, _) = Seq.get v k1 in a) >= (let (a, _) = Seq.get v k2 in a)
  val partition_rev [#"../Robinson/src/util.rs" 17 0 17 56] (v : Seq.seq (usize, usize)) (i : int) : bool
    ensures { result = partition_rev v i }
    
end
module Robinson_Util_SortReverse_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = (usize, usize),
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf_Stub as PermutationOf0 with
    type t = (usize, usize)
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone Robinson_Util_SortedRev_Stub as SortedRev0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = (usize, usize),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val sort_reverse [@cfg:stackify] [#"../Robinson/src/util.rs" 25 0 25 48] (v : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../Robinson/src/util.rs" 23 10 23 25] SortedRev0.sorted_rev (ShallowModel0.shallow_model ( ^ v)) }
    ensures { [#"../Robinson/src/util.rs" 24 10 24 34] PermutationOf0.permutation_of (ShallowModel0.shallow_model ( ^ v)) (ShallowModel1.shallow_model v) }
    
end
module Robinson_Util_SortReverse
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Ghost
  use prelude.Slice
  use seq.Seq
  use mach.int.UInt64
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel4 with
    type t = (usize, usize),
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = (usize, usize)
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel3 with
    type t = seq (usize, usize),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = (usize, usize)
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = (usize, usize)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = (usize, usize)
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = (usize, usize),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = (usize, usize),
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = seq (usize, usize)
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with
    type t = (usize, usize),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with
    type t = (usize, usize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = (usize, usize),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = (usize, usize),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Robinson_Util_PartitionRev as PartitionRev0
  clone Robinson_Util_SortedRangeRev as SortedRangeRev0
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf as PermutationOf0 with
    type t = (usize, usize)
  clone Robinson_Util_SortedRev as SortedRev0 with
    predicate SortedRangeRev0.sorted_range_rev = SortedRangeRev0.sorted_range_rev
  let rec cfg sort_reverse [@cfg:stackify] [#"../Robinson/src/util.rs" 25 0 25 48] (v : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../Robinson/src/util.rs" 23 10 23 25] SortedRev0.sorted_rev (ShallowModel0.shallow_model ( ^ v)) }
    ensures { [#"../Robinson/src/util.rs" 24 10 24 34] PermutationOf0.permutation_of (ShallowModel0.shallow_model ( ^ v)) (ShallowModel1.shallow_model v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global));
  var i_4 : usize;
  var _old_v_5 : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global)));
  var _7 : ();
  var _12 : ();
  var _13 : bool;
  var _14 : usize;
  var _15 : usize;
  var _16 : Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global);
  var max_17 : usize;
  var j_18 : usize;
  var _19 : usize;
  var _20 : ();
  var _24 : bool;
  var _25 : usize;
  var _26 : usize;
  var _27 : Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global);
  var _28 : ();
  var _29 : bool;
  var _30 : usize;
  var _31 : (usize, usize);
  var _32 : Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global);
  var _33 : usize;
  var _34 : usize;
  var _35 : (usize, usize);
  var _36 : Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global);
  var _37 : usize;
  var _38 : usize;
  var _39 : ();
  var _40 : ();
  var _41 : ();
  var _42 : ();
  var _43 : borrowed (seq (usize, usize));
  var _44 : borrowed (seq (usize, usize));
  var _45 : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global));
  var _46 : usize;
  var _47 : usize;
  var _48 : ();
  var _49 : ();
  var _50 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    i_4 <- ([#"../Robinson/src/util.rs" 26 23 26 24] (0 : usize));
    _7 <- ();
    _old_v_5 <- ([#"../Robinson/src/util.rs" 27 50 27 59] Ghost.new v_1);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant proph_const { [#"../Robinson/src/util.rs" 28 29 28 50]  ^ v_1 =  ^ Ghost.inner _old_v_5 };
    invariant permutation { [#"../Robinson/src/util.rs" 29 29 29 65] PermutationOf0.permutation_of (ShallowModel1.shallow_model v_1) (ShallowModel1.shallow_model (Ghost.inner _old_v_5)) };
    invariant sorted { [#"../Robinson/src/util.rs" 30 24 30 51] SortedRangeRev0.sorted_range_rev (ShallowModel1.shallow_model v_1) 0 (UInt64.to_int i_4) };
    invariant partition { [#"../Robinson/src/util.rs" 31 27 31 48] PartitionRev0.partition_rev (ShallowModel1.shallow_model v_1) (UInt64.to_int i_4) };
    _14 <- i_4;
    _16 <-  * v_1;
    _15 <- ([#"../Robinson/src/util.rs" 32 14 32 21] Len0.len _16);
    goto BB3
  }
  BB3 {
    _13 <- ([#"../Robinson/src/util.rs" 32 10 32 21] _14 < _15);
    switch (_13)
      | False -> goto BB16
      | True -> goto BB4
      end
  }
  BB4 {
    max_17 <- i_4;
    _19 <- i_4;
    j_18 <- ([#"../Robinson/src/util.rs" 34 20 34 25] _19 + ([#"../Robinson/src/util.rs" 34 24 34 25] (1 : usize)));
    goto BB5
  }
  BB5 {
    invariant max_is_max { [#"../Robinson/src/util.rs" 35 8 35 96] forall k : int . UInt64.to_int i_4 <= k /\ k < UInt64.to_int j_18 -> (let (a, _) = Seq.get (ShallowModel1.shallow_model v_1) (UInt64.to_int max_17) in a) >= (let (a, _) = Seq.get (ShallowModel1.shallow_model v_1) k in a) };
    invariant j_bound { [#"../Robinson/src/util.rs" 36 29 36 57] UInt64.to_int i_4 <= UInt64.to_int j_18 /\ UInt64.to_int j_18 <= Seq.length (ShallowModel1.shallow_model v_1) };
    invariant max_bound { [#"../Robinson/src/util.rs" 37 31 37 54] UInt64.to_int i_4 <= UInt64.to_int max_17 /\ UInt64.to_int max_17 < UInt64.to_int j_18 };
    _25 <- j_18;
    _27 <-  * v_1;
    _26 <- ([#"../Robinson/src/util.rs" 38 18 38 25] Len0.len _27);
    goto BB6
  }
  BB6 {
    _24 <- ([#"../Robinson/src/util.rs" 38 14 38 25] _25 < _26);
    switch (_24)
      | False -> goto BB13
      | True -> goto BB7
      end
  }
  BB7 {
    _32 <-  * v_1;
    _33 <- j_18;
    _31 <- ([#"../Robinson/src/util.rs" 39 15 39 19] Index0.index _32 _33);
    goto BB8
  }
  BB8 {
    _30 <- (let (a, _) = _31 in a);
    _36 <-  * v_1;
    _37 <- max_17;
    _35 <- ([#"../Robinson/src/util.rs" 39 24 39 30] Index0.index _36 _37);
    goto BB9
  }
  BB9 {
    _34 <- (let (a, _) = _35 in a);
    _29 <- ([#"../Robinson/src/util.rs" 39 15 39 32] _30 > _34);
    switch (_29)
      | False -> goto BB11
      | True -> goto BB10
      end
  }
  BB10 {
    _38 <- j_18;
    max_17 <- _38;
    _38 <- any usize;
    _28 <- ();
    goto BB12
  }
  BB11 {
    _28 <- ();
    goto BB12
  }
  BB12 {
    j_18 <- ([#"../Robinson/src/util.rs" 42 12 42 18] j_18 + ([#"../Robinson/src/util.rs" 42 17 42 18] (1 : usize)));
    _12 <- ();
    goto BB5
  }
  BB13 {
    _20 <- ();
    _45 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _45) };
    _44 <- ([#"../Robinson/src/util.rs" 44 8 44 22] DerefMut0.deref_mut _45);
    goto BB14
  }
  BB14 {
    _43 <- borrow_mut ( * _44);
    _44 <- { _44 with current = ( ^ _43) };
    _46 <- i_4;
    _47 <- max_17;
    _42 <- ([#"../Robinson/src/util.rs" 44 8 44 22] Swap0.swap _43 _46 _47);
    goto BB15
  }
  BB15 {
    assume { Resolve0.resolve _44 };
    i_4 <- ([#"../Robinson/src/util.rs" 45 8 45 14] i_4 + ([#"../Robinson/src/util.rs" 45 13 45 14] (1 : usize)));
    _12 <- ();
    goto BB2
  }
  BB16 {
    assume { Resolve1.resolve v_1 };
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module Robinson_Decision_Impl1_New_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use Robinson_Decision_Decisions_Type as Robinson_Decision_Decisions_Type
  clone Robinson_Decision_Impl0_Invariant_Stub as Invariant1
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant0
  val new [@cfg:stackify] [#"../Robinson/src/decision.rs" 26 4 26 40] (f : Robinson_Formula_Formula_Type.t_formula) : Robinson_Decision_Decisions_Type.t_decisions
    requires {[#"../Robinson/src/decision.rs" 24 15 24 28] Invariant0.invariant' f}
    ensures { [#"../Robinson/src/decision.rs" 25 14 25 43] Invariant1.invariant' result (UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f)) }
    
end
module Robinson_Decision_Impl1_New
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use seq.Seq
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Invariant as Invariant3
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel9 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel10 with
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Util_SortedRangeRev as SortedRangeRev0
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel10.shallow_model,
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve5 with
    type t = usize
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve6 with
    type t1 = usize,
    type t2 = usize,
    predicate Resolve0.resolve = Resolve5.resolve,
    predicate Resolve1.resolve = Resolve5.resolve
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = (usize, usize),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy6 with
    type t = (usize, usize),
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel8 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy6.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf as PermutationOf0 with
    type t = (usize, usize)
  clone Robinson_Util_SortedRev as SortedRev0 with
    predicate SortedRangeRev0.sorted_range_rev = SortedRangeRev0.sorted_range_rev
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy7 with
    type t = (usize, usize)
  clone Core_Slice_Index_Impl2_Output_Type as Output3 with
    type t = (usize, usize)
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere1 with
    type t = (usize, usize)
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue3 with
    type t = (usize, usize)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds3 with
    type t = (usize, usize)
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel7 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy6.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = usize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy4 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel6 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy4.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy5 with
    type t = usize
  clone Core_Slice_Index_Impl2_Output_Type as Output2 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue2 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds2 with
    type t = usize
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy4.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy3 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone Core_Slice_Index_Impl2_Output_Type as Output1 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue1 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds1 with
    type t = Robinson_Lit_Lit_Type.t_lit
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy2.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = Robinson_Clause_Clause_Type.t_clause
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = Robinson_Clause_Clause_Type.t_clause
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Robinson_Clause_Clause_Type.t_clause
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Robinson_Clause_Clause_Type.t_clause
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Robinson_Clause_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl9_Resolve as Resolve4 with
    type t = (usize, usize),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Resolve0.resolve = Resolve6.resolve,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl9_Resolve as Resolve3 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Resolve0.resolve = Resolve5.resolve,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl16_Index_Interface as Index3 with
    type t = (usize, usize),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    predicate InBounds0.in_bounds = InBounds3.in_bounds,
    predicate HasValue0.has_value = HasValue3.has_value,
    type Output0.output = Output3.output
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global)
  clone Robinson_Util_SortReverse_Interface as SortReverse0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate SortedRev0.sorted_rev = SortedRev0.sorted_rev,
    function ShallowModel1.shallow_model = ShallowModel7.shallow_model,
    predicate PermutationOf0.permutation_of = PermutationOf0.permutation_of,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = (usize, usize)
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with
    type t = (usize, usize),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate InBounds0.in_bounds = InBounds3.in_bounds,
    predicate HasValue0.has_value = HasValue3.has_value,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere,
    type Output0.output = Output3.output,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = usize
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with
    type t = usize,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    predicate InBounds0.in_bounds = InBounds2.in_bounds,
    predicate HasValue0.has_value = HasValue2.has_value,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    type Output0.output = Output2.output,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl16_Index_Interface as Index2 with
    type t = usize,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate InBounds0.in_bounds = InBounds2.in_bounds,
    predicate HasValue0.has_value = HasValue2.has_value,
    type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate HasValue0.has_value = HasValue1.has_value,
    type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone Alloc_Vec_FromElem_Interface as FromElem1 with
    type t = (usize, usize),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_FromElem_Interface as FromElem0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use Robinson_Decision_Decisions_Type as Robinson_Decision_Decisions_Type
  clone Robinson_Decision_Impl0_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Invariant0.invariant' = Invariant2.invariant',
    val Max0.mAX' = Max0.mAX'
  let rec cfg new [@cfg:stackify] [#"../Robinson/src/decision.rs" 26 4 26 40] (f : Robinson_Formula_Formula_Type.t_formula) : Robinson_Decision_Decisions_Type.t_decisions
    requires {[#"../Robinson/src/decision.rs" 24 15 24 28] Invariant0.invariant' f}
    ensures { [#"../Robinson/src/decision.rs" 25 14 25 43] Invariant1.invariant' result (UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Decision_Decisions_Type.t_decisions;
  var f_1 : Robinson_Formula_Formula_Type.t_formula;
  var lit_order_4 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _5 : usize;
  var counts_6 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _7 : usize;
  var counts_with_index_8 : Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global);
  var _9 : (usize, usize);
  var _10 : usize;
  var i_11 : usize;
  var _12 : ();
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Alloc_Vec_Vec_Type.t_vec (Robinson_Clause_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global);
  var curr_clause_19 : Robinson_Clause_Clause_Type.t_clause;
  var _20 : Robinson_Clause_Clause_Type.t_clause;
  var _21 : Alloc_Vec_Vec_Type.t_vec (Robinson_Clause_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global);
  var _22 : usize;
  var j_23 : usize;
  var _24 : ();
  var _26 : bool;
  var _27 : usize;
  var _28 : usize;
  var _29 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _30 : ();
  var _31 : bool;
  var _32 : usize;
  var _33 : usize;
  var _34 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _35 : usize;
  var _36 : Robinson_Lit_Lit_Type.t_lit;
  var _37 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _38 : usize;
  var _39 : borrowed usize;
  var _40 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _41 : usize;
  var _42 : Robinson_Lit_Lit_Type.t_lit;
  var _43 : Alloc_Vec_Vec_Type.t_vec (Robinson_Lit_Lit_Type.t_lit) (Alloc_Alloc_Global_Type.t_global);
  var _44 : usize;
  var _45 : ();
  var _46 : ();
  var _47 : ();
  var _48 : ();
  var _49 : ();
  var _50 : ();
  var _51 : ();
  var _54 : bool;
  var _55 : usize;
  var _56 : usize;
  var _57 : usize;
  var _58 : usize;
  var _59 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _60 : usize;
  var _61 : usize;
  var _62 : borrowed (usize, usize);
  var _63 : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global));
  var _64 : usize;
  var _65 : ();
  var _66 : ();
  var _67 : ();
  var _68 : ();
  var _69 : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global));
  var _70 : borrowed (Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global));
  var _71 : ();
  var _74 : bool;
  var _75 : usize;
  var _76 : usize;
  var _77 : usize;
  var _78 : (usize, usize);
  var _79 : Alloc_Vec_Vec_Type.t_vec (usize, usize) (Alloc_Alloc_Global_Type.t_global);
  var _80 : usize;
  var _81 : borrowed usize;
  var _82 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _83 : usize;
  var _84 : ();
  var _85 : ();
  var _86 : ();
  var _87 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _5 <- Robinson_Formula_Formula_Type.formula_num_vars f_1;
    lit_order_4 <- ([#"../Robinson/src/decision.rs" 27 40 27 69] FromElem0.from_elem ([#"../Robinson/src/decision.rs" 27 55 27 56] (0 : usize)) _5);
    goto BB1
  }
  BB1 {
    _7 <- Robinson_Formula_Formula_Type.formula_num_vars f_1;
    counts_6 <- ([#"../Robinson/src/decision.rs" 28 37 28 66] FromElem0.from_elem ([#"../Robinson/src/decision.rs" 28 52 28 53] (0 : usize)) _7);
    goto BB2
  }
  BB2 {
    _9 <- ([#"../Robinson/src/decision.rs" 29 73 29 74] (0 : usize), [#"../Robinson/src/decision.rs" 29 76 29 77] (0 : usize));
    _10 <- Robinson_Formula_Formula_Type.formula_num_vars f_1;
    counts_with_index_8 <- ([#"../Robinson/src/decision.rs" 29 57 29 91] FromElem1.from_elem _9 _10);
    goto BB3
  }
  BB3 {
    i_11 <- ([#"../Robinson/src/decision.rs" 30 27 30 28] (0 : usize));
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant counts_len1 { [#"../Robinson/src/decision.rs" 31 33 31 63] Seq.length (ShallowModel0.shallow_model counts_6) = UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f_1) };
    _16 <- i_11;
    _18 <- Robinson_Formula_Formula_Type.formula_clauses f_1;
    _17 <- ([#"../Robinson/src/decision.rs" 32 18 32 33] Len0.len _18);
    goto BB6
  }
  BB6 {
    _15 <- ([#"../Robinson/src/decision.rs" 32 14 32 33] _16 < _17);
    switch (_15)
      | False -> goto BB21
      | True -> goto BB7
      end
  }
  BB7 {
    _21 <- Robinson_Formula_Formula_Type.formula_clauses f_1;
    _22 <- i_11;
    _20 <- ([#"../Robinson/src/decision.rs" 33 31 33 43] Index0.index _21 _22);
    goto BB8
  }
  BB8 {
    curr_clause_19 <- _20;
    j_23 <- ([#"../Robinson/src/decision.rs" 34 31 34 32] (0 : usize));
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    invariant counts_len { [#"../Robinson/src/decision.rs" 35 36 35 66] Seq.length (ShallowModel0.shallow_model counts_6) = UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f_1) };
    _27 <- j_23;
    _29 <- Robinson_Clause_Clause_Type.clause_rest curr_clause_19;
    _28 <- ([#"../Robinson/src/decision.rs" 36 22 36 44] Len1.len _29);
    goto BB11
  }
  BB11 {
    _26 <- ([#"../Robinson/src/decision.rs" 36 18 36 44] _27 < _28);
    switch (_26)
      | False -> goto BB20
      | True -> goto BB12
      end
  }
  BB12 {
    _34 <- counts_6;
    _37 <- Robinson_Clause_Clause_Type.clause_rest curr_clause_19;
    _38 <- j_23;
    _36 <- ([#"../Robinson/src/decision.rs" 41 26 41 45] Index1.index _37 _38);
    goto BB13
  }
  BB13 {
    _35 <- Robinson_Lit_Lit_Type.lit_idx _36;
    _33 <- ([#"../Robinson/src/decision.rs" 41 19 41 50] Index2.index _34 _35);
    goto BB14
  }
  BB14 {
    _32 <- _33;
    _31 <- ([#"../Robinson/src/decision.rs" 41 19 41 63] _32 < ([#"../Robinson/src/decision.rs" 41 53 41 63] (18446744073709551615 : usize)));
    switch (_31)
      | False -> goto BB18
      | True -> goto BB15
      end
  }
  BB15 {
    _40 <- borrow_mut counts_6;
    counts_6 <-  ^ _40;
    _43 <- Robinson_Clause_Clause_Type.clause_rest curr_clause_19;
    _44 <- j_23;
    _42 <- ([#"../Robinson/src/decision.rs" 42 27 42 46] Index1.index _43 _44);
    goto BB16
  }
  BB16 {
    _41 <- Robinson_Lit_Lit_Type.lit_idx _42;
    _39 <- ([#"../Robinson/src/decision.rs" 42 20 42 51] IndexMut0.index_mut _40 _41);
    goto BB17
  }
  BB17 {
    _39 <- { _39 with current = ([#"../Robinson/src/decision.rs" 42 20 42 56]  * _39 + ([#"../Robinson/src/decision.rs" 42 55 42 56] (1 : usize))) };
    assume { Resolve0.resolve _39 };
    _30 <- ();
    goto BB19
  }
  BB18 {
    _30 <- ();
    goto BB19
  }
  BB19 {
    j_23 <- ([#"../Robinson/src/decision.rs" 44 16 44 22] j_23 + ([#"../Robinson/src/decision.rs" 44 21 44 22] (1 : usize)));
    _14 <- ();
    goto BB10
  }
  BB20 {
    _24 <- ();
    i_11 <- ([#"../Robinson/src/decision.rs" 46 12 46 18] i_11 + ([#"../Robinson/src/decision.rs" 46 17 46 18] (1 : usize)));
    _14 <- ();
    goto BB5
  }
  BB21 {
    _12 <- ();
    i_11 <- ([#"../Robinson/src/decision.rs" 48 12 48 13] (0 : usize));
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    goto BB24
  }
  BB24 {
    invariant counts_with_idx_len { [#"../Robinson/src/decision.rs" 49 41 49 82] Seq.length (ShallowModel1.shallow_model counts_with_index_8) = UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f_1) };
    invariant second_ok { [#"../Robinson/src/decision.rs" 49 8 49 84] forall j : int . 0 <= j /\ j < UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f_1) -> UInt64.to_int (let (_, a) = Seq.get (ShallowModel1.shallow_model counts_with_index_8) j in a) < UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f_1) };
    _55 <- i_11;
    _56 <- Robinson_Formula_Formula_Type.formula_num_vars f_1;
    _54 <- ([#"../Robinson/src/decision.rs" 52 14 52 28] _55 < _56);
    switch (_54)
      | False -> goto BB28
      | True -> goto BB25
      end
  }
  BB25 {
    _59 <- counts_6;
    _60 <- i_11;
    _58 <- ([#"../Robinson/src/decision.rs" 53 36 53 45] Index2.index _59 _60);
    goto BB26
  }
  BB26 {
    _57 <- _58;
    _61 <- i_11;
    _63 <- borrow_mut counts_with_index_8;
    counts_with_index_8 <-  ^ _63;
    _64 <- i_11;
    _62 <- ([#"../Robinson/src/decision.rs" 53 12 53 32] IndexMut1.index_mut _63 _64);
    goto BB27
  }
  BB27 {
    _62 <- { _62 with current = (_57, _61) };
    assume { Resolve1.resolve _62 };
    i_11 <- ([#"../Robinson/src/decision.rs" 54 12 54 18] i_11 + ([#"../Robinson/src/decision.rs" 54 17 54 18] (1 : usize)));
    _14 <- ();
    goto BB24
  }
  BB28 {
    _51 <- ();
    _70 <- borrow_mut counts_with_index_8;
    counts_with_index_8 <-  ^ _70;
    _69 <- borrow_mut ( * _70);
    _70 <- { _70 with current = ( ^ _69) };
    _68 <- ([#"../Robinson/src/decision.rs" 56 8 56 44] SortReverse0.sort_reverse _69);
    goto BB29
  }
  BB29 {
    assume { Resolve2.resolve _70 };
    i_11 <- ([#"../Robinson/src/decision.rs" 57 12 57 13] (0 : usize));
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    goto BB32
  }
  BB32 {
    invariant lit_order_len { [#"../Robinson/src/decision.rs" 58 35 58 68] Seq.length (ShallowModel0.shallow_model lit_order_4) = UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f_1) };
    invariant second_ok { [#"../Robinson/src/decision.rs" 58 8 58 70] forall j : int . 0 <= j /\ j < UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f_1) -> UInt64.to_int (Seq.get (ShallowModel0.shallow_model lit_order_4) j) < UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f_1) };
    _75 <- i_11;
    _76 <- Robinson_Formula_Formula_Type.formula_num_vars f_1;
    _74 <- ([#"../Robinson/src/decision.rs" 60 14 60 28] _75 < _76);
    switch (_74)
      | False -> goto BB36
      | True -> goto BB33
      end
  }
  BB33 {
    _79 <- counts_with_index_8;
    _80 <- i_11;
    _78 <- ([#"../Robinson/src/decision.rs" 61 27 61 47] Index3.index _79 _80);
    goto BB34
  }
  BB34 {
    _77 <- (let (_, a) = _78 in a);
    _82 <- borrow_mut lit_order_4;
    lit_order_4 <-  ^ _82;
    _83 <- i_11;
    _81 <- ([#"../Robinson/src/decision.rs" 61 12 61 24] IndexMut0.index_mut _82 _83);
    goto BB35
  }
  BB35 {
    _81 <- { _81 with current = _77 };
    _77 <- any usize;
    assume { Resolve0.resolve _81 };
    i_11 <- ([#"../Robinson/src/decision.rs" 62 12 62 18] i_11 + ([#"../Robinson/src/decision.rs" 62 17 62 18] (1 : usize)));
    _14 <- ();
    goto BB32
  }
  BB36 {
    _71 <- ();
    assume { Resolve3.resolve _87 };
    _87 <- lit_order_4;
    lit_order_4 <- any Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
    _0 <- Robinson_Decision_Decisions_Type.C_Decisions _87;
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    assume { Resolve4.resolve counts_with_index_8 };
    goto BB39
  }
  BB39 {
    assume { Resolve3.resolve counts_6 };
    goto BB40
  }
  BB40 {
    return _0
  }
  
end
module Robinson_Formula_Impl0_ShallowModel_Stub
  use seq.Seq
  use mach.int.Int
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  function shallow_model [#"../Robinson/src/formula.rs" 20 4 20 50] (self : Robinson_Formula_Formula_Type.t_formula) : (Seq.seq (Robinson_Clause_Clause_Type.t_clause), int)
    
end
module Robinson_Formula_Impl0_ShallowModel_Interface
  use seq.Seq
  use mach.int.Int
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  function shallow_model [#"../Robinson/src/formula.rs" 20 4 20 50] (self : Robinson_Formula_Formula_Type.t_formula) : (Seq.seq (Robinson_Clause_Clause_Type.t_clause), int)
    
end
module Robinson_Formula_Impl0_ShallowModel
  use seq.Seq
  use mach.int.Int
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function shallow_model [#"../Robinson/src/formula.rs" 20 4 20 50] (self : Robinson_Formula_Formula_Type.t_formula) : (Seq.seq (Robinson_Clause_Clause_Type.t_clause), int)
    
   =
    [#"../Robinson/src/formula.rs" 21 8 21 69] (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses self), UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars self))
  val shallow_model [#"../Robinson/src/formula.rs" 20 4 20 50] (self : Robinson_Formula_Formula_Type.t_formula) : (Seq.seq (Robinson_Clause_Clause_Type.t_clause), int)
    ensures { result = shallow_model self }
    
end
module Robinson_Formula_FormulaSatInner_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate formula_sat_inner [#"../Robinson/src/formula.rs" 26 0 26 78] (f : (Seq.seq (Robinson_Clause_Clause_Type.t_clause), int)) (a : Seq.seq uint8)
    
end
module Robinson_Formula_FormulaSatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  predicate formula_sat_inner [#"../Robinson/src/formula.rs" 26 0 26 78] (f : (Seq.seq (Robinson_Clause_Clause_Type.t_clause), int)) (a : Seq.seq uint8)
    
end
module Robinson_Formula_FormulaSatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_SatInner_Stub as SatInner0
  predicate formula_sat_inner [#"../Robinson/src/formula.rs" 26 0 26 78] (f : (Seq.seq (Robinson_Clause_Clause_Type.t_clause), int)) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/formula.rs" 27 4 30 5] forall i : int . 0 <= i /\ i < Seq.length (let (a, _) = f in a) -> SatInner0.sat_inner (Seq.get (let (a, _) = f in a) i) a
  val formula_sat_inner [#"../Robinson/src/formula.rs" 26 0 26 78] (f : (Seq.seq (Robinson_Clause_Clause_Type.t_clause), int)) (a : Seq.seq uint8) : bool
    ensures { result = formula_sat_inner f a }
    
end
module Robinson_Formula_Impl1_EventuallySatInner_Stub
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate eventually_sat_inner [#"../Robinson/src/formula.rs" 44 4 44 68] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8)
    
end
module Robinson_Formula_Impl1_EventuallySatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate eventually_sat_inner [#"../Robinson/src/formula.rs" 44 4 44 68] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8)
    
end
module Robinson_Formula_Impl1_EventuallySatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use mach.int.UInt64
  clone Robinson_Formula_Impl1_SatInner_Stub as SatInner0
  clone Robinson_Assignments_CompatibleInner_Stub as CompatibleInner0
  predicate eventually_sat_inner [#"../Robinson/src/formula.rs" 44 4 44 68] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/formula.rs" 45 8 47 9] exists a2 : Seq.seq uint8 . Seq.length a2 = UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars self) /\ CompatibleInner0.compatible_inner a a2 /\ SatInner0.sat_inner self a2
  val eventually_sat_inner [#"../Robinson/src/formula.rs" 44 4 44 68] (self : Robinson_Formula_Formula_Type.t_formula) (a : Seq.seq uint8) : bool
    ensures { result = eventually_sat_inner self a }
    
end
module Robinson_Formula_Impl1_EventuallySatNoAss_Stub
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate eventually_sat_no_ass [#"../Robinson/src/formula.rs" 51 4 51 46] (self : Robinson_Formula_Formula_Type.t_formula)
    
end
module Robinson_Formula_Impl1_EventuallySatNoAss_Interface
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate eventually_sat_no_ass [#"../Robinson/src/formula.rs" 51 4 51 46] (self : Robinson_Formula_Formula_Type.t_formula)
    
end
module Robinson_Formula_Impl1_EventuallySatNoAss
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  clone Robinson_Formula_Impl1_SatInner_Stub as SatInner0
  predicate eventually_sat_no_ass [#"../Robinson/src/formula.rs" 51 4 51 46] (self : Robinson_Formula_Formula_Type.t_formula)
    
   =
    [#"../Robinson/src/formula.rs" 52 8 52 72] exists a2 : Seq.seq uint8 . SatInner0.sat_inner self a2
  val eventually_sat_no_ass [#"../Robinson/src/formula.rs" 51 4 51 46] (self : Robinson_Formula_Formula_Type.t_formula) : bool
    ensures { result = eventually_sat_no_ass self }
    
end
module Robinson_Formula_Impl1_EventuallySatCompleteNoAss_Stub
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate eventually_sat_complete_no_ass [#"../Robinson/src/formula.rs" 56 4 56 55] (self : Robinson_Formula_Formula_Type.t_formula)
    
end
module Robinson_Formula_Impl1_EventuallySatCompleteNoAss_Interface
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate eventually_sat_complete_no_ass [#"../Robinson/src/formula.rs" 56 4 56 55] (self : Robinson_Formula_Formula_Type.t_formula)
    
end
module Robinson_Formula_Impl1_EventuallySatCompleteNoAss
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use mach.int.UInt64
  clone Robinson_Formula_Impl1_SatInner_Stub as SatInner0
  clone Robinson_Assignments_CompleteInner_Stub as CompleteInner0
  predicate eventually_sat_complete_no_ass [#"../Robinson/src/formula.rs" 56 4 56 55] (self : Robinson_Formula_Formula_Type.t_formula)
    
   =
    [#"../Robinson/src/formula.rs" 57 8 59 9] exists a2 : Seq.seq uint8 . Seq.length a2 = UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars self) /\ CompleteInner0.complete_inner a2 /\ SatInner0.sat_inner self a2
  val eventually_sat_complete_no_ass [#"../Robinson/src/formula.rs" 56 4 56 55] (self : Robinson_Formula_Formula_Type.t_formula) : bool
    ensures { result = eventually_sat_complete_no_ass self }
    
end
module Robinson_Formula_Impl1_EventuallySat_Stub
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate eventually_sat [#"../Robinson/src/formula.rs" 75 4 75 55] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Formula_Impl1_EventuallySat_Interface
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate eventually_sat [#"../Robinson/src/formula.rs" 75 4 75 55] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
end
module Robinson_Formula_Impl1_EventuallySat
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatInner_Stub as EventuallySatInner0
  clone Robinson_Assignments_Impl0_ShallowModel_Stub as ShallowModel0
  predicate eventually_sat [#"../Robinson/src/formula.rs" 75 4 75 55] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments)
    
   =
    [#"../Robinson/src/formula.rs" 76 20 76 49] EventuallySatInner0.eventually_sat_inner self (ShallowModel0.shallow_model a)
  val eventually_sat [#"../Robinson/src/formula.rs" 75 4 75 55] (self : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    ensures { result = eventually_sat self a }
    
end
module Robinson_Formula_Impl1_ContainsEmptyClause_Stub
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate contains_empty_clause [#"../Robinson/src/formula.rs" 106 4 106 46] (self : Robinson_Formula_Formula_Type.t_formula)
    
end
module Robinson_Formula_Impl1_ContainsEmptyClause_Interface
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  predicate contains_empty_clause [#"../Robinson/src/formula.rs" 106 4 106 46] (self : Robinson_Formula_Formula_Type.t_formula)
    
end
module Robinson_Formula_Impl1_ContainsEmptyClause
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  use mach.int.Int
  use seq.Seq
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone Robinson_Clause_Impl0_ShallowModel_Stub as ShallowModel1
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate contains_empty_clause [#"../Robinson/src/formula.rs" 106 4 106 46] (self : Robinson_Formula_Formula_Type.t_formula)
    
   =
    [#"../Robinson/src/formula.rs" 107 8 110 9] exists i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses self)) /\ Seq.length (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses self)) i)) = 0
  val contains_empty_clause [#"../Robinson/src/formula.rs" 106 4 106 46] (self : Robinson_Formula_Formula_Type.t_formula) : bool
    ensures { result = contains_empty_clause self }
    
end
module Robinson_Solver_SatResult_Type
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_satresult  =
    | C_Sat (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global))
    | C_Unsat
    | C_Unknown
    
end
module Robinson_Formula_Impl0_ShallowModelTy_Type
  use seq.Seq
  use mach.int.Int
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  type shallowModelTy  =
    (Seq.seq (Robinson_Clause_Clause_Type.t_clause), int)
end
module Robinson_Formula_Impl2_CheckAndEstablishFormulaInvariant_Interface
  use mach.int.Int
  use prelude.Borrow
  use seq.Seq
  use mach.int.UInt64
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Formula_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant0
  clone Robinson_Formula_Impl1_EventuallySatCompleteNoAss_Stub as EventuallySatCompleteNoAss0
  clone Robinson_Formula_Impl1_ContainsEmptyClause_Stub as ContainsEmptyClause0
  clone Robinson_Formula_FormulaSatInner_Stub as FormulaSatInner0
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Robinson_Formula_Formula_Type.t_formula,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone Robinson_Formula_Impl1_EventuallySatNoAss_Stub as EventuallySatNoAss0
  use Robinson_Solver_SatResult_Type as Robinson_Solver_SatResult_Type
  clone Robinson_Clause_Impl1_VarsInRange_Stub as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val check_and_establish_formula_invariant [@cfg:stackify] [#"../Robinson/src/formula.rs" 124 4 124 72] (self : borrowed (Robinson_Formula_Formula_Type.t_formula)) : Robinson_Solver_SatResult_Type.t_satresult
    requires {[#"../Robinson/src/formula.rs" 116 4 117 59] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses ( * self))) -> VarsInRange0.vars_in_range (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses ( * self))) i) (UInt64.to_int Max0.mAX')}
    ensures { [#"../Robinson/src/formula.rs" 118 14 122 5] match (result) with
      | Robinson_Solver_SatResult_Type.C_Sat assn -> EventuallySatNoAss0.eventually_sat_no_ass ( ^ self) /\ FormulaSatInner0.formula_sat_inner (ShallowModel1.shallow_model self) (ShallowModel2.shallow_model assn)
      | Robinson_Solver_SatResult_Type.C_Unsat -> ContainsEmptyClause0.contains_empty_clause ( ^ self) /\ not EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( * self)
      | Robinson_Solver_SatResult_Type.C_Unknown -> Invariant0.invariant' ( ^ self)
      end }
    ensures { [#"../Robinson/src/formula.rs" 123 14 123 45] Robinson_Formula_Formula_Type.formula_clauses ( * self) = Robinson_Formula_Formula_Type.formula_clauses ( ^ self) }
    
end
module Robinson_Formula_Impl2_CheckAndEstablishFormulaInvariant
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use prelude.UInt8
  use prelude.Ghost
  use seq.Seq
  use mach.int.UInt64
  clone Robinson_Logic_Unset as Unset0
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  clone Core_Usize_Max as Max1
  clone Robinson_Clause_Impl0_ShallowModelTy_Type as ShallowModelTy3
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel6 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel3 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel7 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy3.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = Robinson_Clause_Clause_Type.t_clause
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = Robinson_Clause_Clause_Type.t_clause
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Robinson_Clause_Clause_Type.t_clause
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Robinson_Clause_Clause_Type.t_clause
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve2 with
    type t = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec (Robinson_Clause_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate SatInner0.sat_inner = SatInner2.sat_inner
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl0_ShallowModel as ShallowModel4 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Formula_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone Robinson_Lit_Impl1_Invariant as Invariant2
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant1 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Robinson_Clause_Impl2_CheckClauseInvariant_Interface as CheckClauseInvariant0 with
    val Max0.mAX' = Max1.mAX',
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Robinson_Clause_Impl2_Len_Interface as Len1 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl9_Resolve as Resolve1 with
    type t = uint8,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Resolve0.resolve = Resolve2.resolve,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate SatInner0.sat_inner = SatInner1.sat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl0_New_Interface as New0 with
    type t = uint8,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Robinson_Formula_Formula_Type.t_formula
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant1.invariant',
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Formula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with
    predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_ContainsEmptyClause as ContainsEmptyClause0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Formula_FormulaSatInner as FormulaSatInner0 with
    predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = Robinson_Formula_Formula_Type.t_formula,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Robinson_Formula_Impl1_EventuallySatNoAss as EventuallySatNoAss0 with
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  use Robinson_Solver_SatResult_Type as Robinson_Solver_SatResult_Type
  let rec cfg check_and_establish_formula_invariant [@cfg:stackify] [#"../Robinson/src/formula.rs" 124 4 124 72] (self : borrowed (Robinson_Formula_Formula_Type.t_formula)) : Robinson_Solver_SatResult_Type.t_satresult
    requires {[#"../Robinson/src/formula.rs" 116 4 117 59] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses ( * self))) -> VarsInRange0.vars_in_range (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses ( * self))) i) (UInt64.to_int Max0.mAX')}
    ensures { [#"../Robinson/src/formula.rs" 118 14 122 5] match (result) with
      | Robinson_Solver_SatResult_Type.C_Sat assn -> EventuallySatNoAss0.eventually_sat_no_ass ( ^ self) /\ FormulaSatInner0.formula_sat_inner (ShallowModel1.shallow_model self) (ShallowModel2.shallow_model assn)
      | Robinson_Solver_SatResult_Type.C_Unsat -> ContainsEmptyClause0.contains_empty_clause ( ^ self) /\ not EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( * self)
      | Robinson_Solver_SatResult_Type.C_Unknown -> Invariant0.invariant' ( ^ self)
      end }
    ensures { [#"../Robinson/src/formula.rs" 123 14 123 45] Robinson_Formula_Formula_Type.formula_clauses ( * self) = Robinson_Formula_Formula_Type.formula_clauses ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Solver_SatResult_Type.t_satresult;
  var self_1 : borrowed (Robinson_Formula_Formula_Type.t_formula);
  var _2 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : Alloc_Vec_Vec_Type.t_vec (Robinson_Clause_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global);
  var _10 : ();
  var a_11 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _12 : ();
  var _14 : ();
  var _16 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var old_self_17 : Ghost.ghost_ty (borrowed (Robinson_Formula_Formula_Type.t_formula));
  var _19 : ();
  var i_20 : usize;
  var _21 : ();
  var _27 : ();
  var _28 : bool;
  var _29 : usize;
  var _30 : usize;
  var _31 : Alloc_Vec_Vec_Type.t_vec (Robinson_Clause_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global);
  var _32 : ();
  var _33 : bool;
  var _34 : usize;
  var _35 : Robinson_Clause_Clause_Type.t_clause;
  var _36 : Robinson_Clause_Clause_Type.t_clause;
  var _37 : Alloc_Vec_Vec_Type.t_vec (Robinson_Clause_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global);
  var _38 : usize;
  var _39 : ();
  var new_n_40 : usize;
  var _41 : Robinson_Clause_Clause_Type.t_clause;
  var _42 : Robinson_Clause_Clause_Type.t_clause;
  var _43 : Alloc_Vec_Vec_Type.t_vec (Robinson_Clause_Clause_Type.t_clause) (Alloc_Alloc_Global_Type.t_global);
  var _44 : usize;
  var _45 : usize;
  var _46 : ();
  var _47 : bool;
  var _48 : usize;
  var _49 : usize;
  var _50 : usize;
  var _51 : ();
  var _52 : ();
  var _53 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _9 <- Robinson_Formula_Formula_Type.formula_clauses ( * self_1);
    _8 <- ([#"../Robinson/src/formula.rs" 125 11 125 29] Len0.len _9);
    goto BB1
  }
  BB1 {
    _7 <- ([#"../Robinson/src/formula.rs" 125 11 125 34] _8 = ([#"../Robinson/src/formula.rs" 125 33 125 34] (0 : usize)));
    switch (_7)
      | False -> goto BB6
      | True -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    a_11 <- ([#"../Robinson/src/formula.rs" 126 20 126 30] New0.new ());
    goto BB3
  }
  BB3 {
    assert { [#"../Robinson/src/formula.rs" 128 26 128 44] SatInner0.sat_inner ( * self_1) (ShallowModel2.shallow_model a_11) };
    goto BB4
  }
  BB4 {
    _12 <- ();
    assert { [#"../Robinson/src/formula.rs" 129 26 129 54] EventuallySatNoAss0.eventually_sat_no_ass ( * self_1) };
    _14 <- ();
    assume { Resolve1.resolve _16 };
    _16 <- a_11;
    a_11 <- any Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
    _0 <- Robinson_Solver_SatResult_Type.C_Sat _16;
    goto BB5
  }
  BB5 {
    goto BB22
  }
  BB6 {
    _6 <- ();
    _19 <- ();
    old_self_17 <- ([#"../Robinson/src/formula.rs" 132 44 132 56] Ghost.new self_1);
    goto BB7
  }
  BB7 {
    i_20 <- ([#"../Robinson/src/formula.rs" 133 27 133 28] (0 : usize));
    goto BB8
  }
  BB8 {
    invariant inv { [#"../Robinson/src/formula.rs" 134 8 134 107] forall j : int . 0 <= j /\ j < UInt64.to_int i_20 -> Invariant1.invariant' (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses ( * self_1))) j) (UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars ( * self_1))) };
    invariant inv { [#"../Robinson/src/formula.rs" 134 8 134 107] forall j : int . 0 <= j /\ j < UInt64.to_int i_20 -> Seq.length (ShallowModel3.shallow_model (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses ( * self_1))) j)) > 0 };
    invariant unch { [#"../Robinson/src/formula.rs" 136 26 136 60] (let (a, _) = ShallowModel1.shallow_model self_1 in a) = (let (a, _) = ShallowModel1.shallow_model (Ghost.inner old_self_17) in a) };
    invariant unch { [#"../Robinson/src/formula.rs" 137 26 137 58] Robinson_Formula_Formula_Type.formula_clauses ( * self_1) = Robinson_Formula_Formula_Type.formula_clauses ( * Ghost.inner old_self_17) };
    invariant proph { [#"../Robinson/src/formula.rs" 138 27 138 53]  ^ self_1 =  ^ Ghost.inner old_self_17 };
    _29 <- i_20;
    _31 <- Robinson_Formula_Formula_Type.formula_clauses ( * self_1);
    _30 <- ([#"../Robinson/src/formula.rs" 139 18 139 36] Len0.len _31);
    goto BB9
  }
  BB9 {
    _28 <- ([#"../Robinson/src/formula.rs" 139 14 139 36] _29 < _30);
    switch (_28)
      | False -> goto BB20
      | True -> goto BB10
      end
  }
  BB10 {
    _37 <- Robinson_Formula_Formula_Type.formula_clauses ( * self_1);
    _38 <- i_20;
    _36 <- ([#"../Robinson/src/formula.rs" 140 15 140 30] Index0.index _37 _38);
    goto BB11
  }
  BB11 {
    _35 <- _36;
    _34 <- ([#"../Robinson/src/formula.rs" 140 15 140 36] Len1.len _35);
    goto BB12
  }
  BB12 {
    _33 <- ([#"../Robinson/src/formula.rs" 140 15 140 41] _34 = ([#"../Robinson/src/formula.rs" 140 40 140 41] (0 : usize)));
    switch (_33)
      | False -> goto BB14
      | True -> goto BB13
      end
  }
  BB13 {
    assume { Resolve0.resolve self_1 };
    _0 <- Robinson_Solver_SatResult_Type.C_Unsat;
    goto BB21
  }
  BB14 {
    _32 <- ();
    _43 <- Robinson_Formula_Formula_Type.formula_clauses ( * self_1);
    _44 <- i_20;
    _42 <- ([#"../Robinson/src/formula.rs" 143 24 143 39] Index0.index _43 _44);
    goto BB15
  }
  BB15 {
    _41 <- _42;
    _45 <- Robinson_Formula_Formula_Type.formula_num_vars ( * self_1);
    new_n_40 <- ([#"../Robinson/src/formula.rs" 143 24 143 77] CheckClauseInvariant0.check_clause_invariant _41 _45);
    goto BB16
  }
  BB16 {
    _48 <- new_n_40;
    _49 <- Robinson_Formula_Formula_Type.formula_num_vars ( * self_1);
    _47 <- ([#"../Robinson/src/formula.rs" 144 15 144 36] _48 > _49);
    switch (_47)
      | False -> goto BB18
      | True -> goto BB17
      end
  }
  BB17 {
    _50 <- new_n_40;
    self_1 <- { self_1 with current = (let Robinson_Formula_Formula_Type.C_Formula a b =  * self_1 in Robinson_Formula_Formula_Type.C_Formula a _50) };
    _50 <- any usize;
    _46 <- ();
    goto BB19
  }
  BB18 {
    _46 <- ();
    goto BB19
  }
  BB19 {
    i_20 <- ([#"../Robinson/src/formula.rs" 147 12 147 18] i_20 + ([#"../Robinson/src/formula.rs" 147 17 147 18] (1 : usize)));
    _27 <- ();
    goto BB8
  }
  BB20 {
    assume { Resolve0.resolve self_1 };
    _21 <- ();
    _0 <- Robinson_Solver_SatResult_Type.C_Unknown;
    goto BB21
  }
  BB21 {
    goto BB23
  }
  BB22 {
    goto BB23
  }
  BB23 {
    return _0
  }
  
end
module Core_Clone_Impls_Impl5_Clone_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  val clone' [@cfg:stackify] (self : usize) : usize
    ensures { [#"../Robinson/src/lit.rs" 86 13 100 0] result = self }
    
end
module Core_Clone_Impls_Impl5_Clone
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  val clone' [@cfg:stackify] (self : usize) : usize
    ensures { [#"../Robinson/src/lit.rs" 86 13 100 0] result = self }
    
end
module Core_Clone_Impls_Impl19_Clone_Interface
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : bool) : bool
    ensures { [#"../Robinson/src/lit.rs" 86 13 100 0] result = self }
    
end
module Core_Clone_Impls_Impl19_Clone
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : bool) : bool
    ensures { [#"../Robinson/src/lit.rs" 86 13 100 0] result = self }
    
end
module Robinson_Lit_Impl3_Clone_Interface
  use prelude.Borrow
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  val clone' [@cfg:stackify] [#"../Robinson/src/lit.rs" 10 9 10 14] (self : Robinson_Lit_Lit_Type.t_lit) : Robinson_Lit_Lit_Type.t_lit
    ensures { [#"../Robinson/src/lit.rs" 10 9 10 14] result = self }
    
end
module Robinson_Lit_Impl3_Clone
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Clone_Impls_Impl19_Clone_Interface as Clone1
  clone Core_Clone_Impls_Impl5_Clone_Interface as Clone0
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  let rec cfg clone' [@cfg:stackify] [#"../Robinson/src/lit.rs" 10 9 10 14] (self : Robinson_Lit_Lit_Type.t_lit) : Robinson_Lit_Lit_Type.t_lit
    ensures { [#"../Robinson/src/lit.rs" 10 9 10 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Lit_Lit_Type.t_lit;
  var self_1 : Robinson_Lit_Lit_Type.t_lit;
  var _3 : usize;
  var _4 : usize;
  var _5 : bool;
  var _6 : bool;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- Robinson_Lit_Lit_Type.lit_idx self_1;
    _3 <- ([#"../Robinson/src/lit.rs" 12 4 12 18] Clone0.clone' _4);
    goto BB1
  }
  BB1 {
    _6 <- Robinson_Lit_Lit_Type.lit_polarity self_1;
    _5 <- ([#"../Robinson/src/lit.rs" 13 4 13 22] Clone1.clone' _6);
    goto BB2
  }
  BB2 {
    _0 <- Robinson_Lit_Lit_Type.C_Lit _3 _5;
    return _0
  }
  
end
module Robinson_Lit_Impl1_LitIn_Stub
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate lit_in [#"../Robinson/src/lit.rs" 28 4 28 42] (self : Robinson_Lit_Lit_Type.t_lit) (c : Robinson_Clause_Clause_Type.t_clause)
    
end
module Robinson_Lit_Impl1_LitIn_Interface
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  predicate lit_in [#"../Robinson/src/lit.rs" 28 4 28 42] (self : Robinson_Lit_Lit_Type.t_lit) (c : Robinson_Clause_Clause_Type.t_clause)
    
end
module Robinson_Lit_Impl1_LitIn
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  use mach.int.Int
  use seq.Seq
  clone Robinson_Clause_Impl0_ShallowModel_Stub as ShallowModel0
  predicate lit_in [#"../Robinson/src/lit.rs" 28 4 28 42] (self : Robinson_Lit_Lit_Type.t_lit) (c : Robinson_Clause_Clause_Type.t_clause)
    
   =
    [#"../Robinson/src/lit.rs" 29 8 31 9] exists i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model c) /\ Seq.get (ShallowModel0.shallow_model c) i = self
  val lit_in [#"../Robinson/src/lit.rs" 28 4 28 42] (self : Robinson_Lit_Lit_Type.t_lit) (c : Robinson_Clause_Clause_Type.t_clause) : bool
    ensures { result = lit_in self c }
    
end
module Robinson_Lit_Impl2_LitUnsat_Interface
  use seq.Seq
  use prelude.Borrow
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Unsat_Stub as Unsat0
  clone Robinson_Lit_Impl1_Invariant_Stub as Invariant0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val lit_unsat [@cfg:stackify] [#"../Robinson/src/lit.rs" 106 4 106 51] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    requires {[#"../Robinson/src/lit.rs" 104 15 104 41] Invariant0.invariant' self (Seq.length (ShallowModel0.shallow_model a))}
    ensures { [#"../Robinson/src/lit.rs" 105 14 105 38] result = Unsat0.unsat self a }
    
end
module Robinson_Lit_Impl2_LitUnsat
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use prelude.UIntSize
  use seq.Seq
  clone Core_Num_Impl12_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = uint8
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsatInner as UnsatInner0
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with
    type t = uint8,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Robinson_Lit_Impl1_Unsat as Unsat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Lit_Impl1_Invariant as Invariant0
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg lit_unsat [@cfg:stackify] [#"../Robinson/src/lit.rs" 106 4 106 51] (self : Robinson_Lit_Lit_Type.t_lit) (a : Robinson_Assignments_Assignments_Type.t_assignments) : bool
    requires {[#"../Robinson/src/lit.rs" 104 15 104 41] Invariant0.invariant' self (Seq.length (ShallowModel0.shallow_model a))}
    ensures { [#"../Robinson/src/lit.rs" 105 14 105 38] result = Unsat0.unsat self a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Robinson_Lit_Lit_Type.t_lit;
  var a_2 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _5 : uint8;
  var _6 : uint8;
  var _7 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _8 : usize;
  var _9 : uint8;
  var _10 : uint8;
  var _11 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  var _12 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    switch (Robinson_Lit_Lit_Type.lit_polarity self_1)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB1 {
    _11 <- Robinson_Assignments_Assignments_Type.assignments_0 a_2;
    _12 <- Robinson_Lit_Lit_Type.lit_idx self_1;
    _10 <- ([#"../Robinson/src/lit.rs" 109 22 109 35] Index0.index _11 _12);
    goto BB4
  }
  BB2 {
    _7 <- Robinson_Assignments_Assignments_Type.assignments_0 a_2;
    _8 <- Robinson_Lit_Lit_Type.lit_idx self_1;
    _6 <- ([#"../Robinson/src/lit.rs" 108 21 108 34] Index0.index _7 _8);
    goto BB3
  }
  BB3 {
    _5 <- _6;
    _0 <- ([#"../Robinson/src/lit.rs" 108 20 108 40] _5 = ([#"../Robinson/src/lit.rs" 108 38 108 39] (0 : uint8)));
    goto BB5
  }
  BB4 {
    _9 <- _10;
    _0 <- ([#"../Robinson/src/lit.rs" 109 21 109 41] _9 = ([#"../Robinson/src/lit.rs" 109 39 109 40] (1 : uint8)));
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Robinson_Solver_Inner_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use Robinson_Decision_Decisions_Type as Robinson_Decision_Decisions_Type
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatComplete_Stub as EventuallySatComplete0
  clone Robinson_Formula_Impl1_EventuallySat_Stub as EventuallySat0
  clone Robinson_Decision_Impl0_Invariant_Stub as Invariant2
  clone Robinson_Assignments_Impl1_Invariant_Stub as Invariant1
  clone Robinson_Formula_Impl1_Invariant_Stub as Invariant0
  val inner [@cfg:stackify] [#"../Robinson/src/solver.rs" 17 0 17 64] (f : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments) (d : Robinson_Decision_Decisions_Type.t_decisions) : bool
    requires {[#"../Robinson/src/solver.rs" 12 11 12 24] Invariant0.invariant' f}
    requires {[#"../Robinson/src/solver.rs" 13 11 13 26] Invariant1.invariant' a f}
    requires {[#"../Robinson/src/solver.rs" 14 11 14 35] Invariant2.invariant' d (UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f))}
    ensures { [#"../Robinson/src/solver.rs" 15 0 15 50] result = true -> EventuallySat0.eventually_sat f a }
    ensures { [#"../Robinson/src/solver.rs" 16 0 16 61] result = false -> not EventuallySatComplete0.eventually_sat_complete f a }
    
end
module Robinson_Solver_Inner
  use prelude.Borrow
  use mach.int.Int
  use prelude.IntSize
  use prelude.UIntSize
  use prelude.UInt8
  use mach.int.UInt64
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsatInner as UnsatInner2
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel8 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel7 with
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner1 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Lit_Impl1_Invariant as Invariant4
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
    predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate SatInner0.sat_inner = SatInner1.sat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate Invariant0.invariant' = Invariant4.invariant'
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel6 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = uint8
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = uint8
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel4 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel3 with
    type t = Robinson_Assignments_Assignments_Type.t_assignments,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Robinson_Assignments_Impl1_Complete as Complete0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Formula_Impl1_Sat as Sat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_Unsat as Unsat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Assignments_Impl1_Compatible as Compatible0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with
    predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatInner as EventuallySatInner0 with
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Clause_Impl1_Invariant as Invariant3 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint8
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with
    type t = uint8,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel6.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    type Output0.output = Output0.output,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_Impl2_Clone_Interface as Clone0 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  use Robinson_Decision_Decisions_Type as Robinson_Decision_Decisions_Type
  clone Robinson_Decision_Impl0_Invariant as Invariant2 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Robinson_Assignments_Impl2_FindUnassigned_Interface as FindUnassigned0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Complete0.complete = Complete0.complete,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Invariant1.invariant' = Invariant2.invariant',
    predicate Unset0.unset = Unset0.unset,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant3.invariant',
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_Impl2_DoUnitPropagation_Interface as DoUnitPropagation0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
    predicate Compatible0.compatible = Compatible0.compatible,
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Sat0.sat = Sat0.sat,
    predicate Complete0.complete = Complete0.complete
  clone Robinson_Formula_Impl1_EventuallySat as EventuallySat0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate EventuallySatInner0.eventually_sat_inner = EventuallySatInner0.eventually_sat_inner
  let rec cfg inner [@cfg:stackify] [#"../Robinson/src/solver.rs" 17 0 17 64] (f : Robinson_Formula_Formula_Type.t_formula) (a : Robinson_Assignments_Assignments_Type.t_assignments) (d : Robinson_Decision_Decisions_Type.t_decisions) : bool
    requires {[#"../Robinson/src/solver.rs" 12 11 12 24] Invariant0.invariant' f}
    requires {[#"../Robinson/src/solver.rs" 13 11 13 26] Invariant1.invariant' a f}
    requires {[#"../Robinson/src/solver.rs" 14 11 14 35] Invariant2.invariant' d (UInt64.to_int (Robinson_Formula_Formula_Type.formula_num_vars f))}
    ensures { [#"../Robinson/src/solver.rs" 15 0 15 50] result = true -> EventuallySat0.eventually_sat f a }
    ensures { [#"../Robinson/src/solver.rs" 16 0 16 61] result = false -> not EventuallySatComplete0.eventually_sat_complete f a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var f_1 : Robinson_Formula_Formula_Type.t_formula;
  var a_2 : Robinson_Assignments_Assignments_Type.t_assignments;
  var d_3 : Robinson_Decision_Decisions_Type.t_decisions;
  var _4 : ();
  var _10 : ();
  var _11 : Core_Option_Option_Type.t_option bool;
  var _12 : borrowed (Robinson_Assignments_Assignments_Type.t_assignments);
  var _13 : Robinson_Formula_Formula_Type.t_formula;
  var _14 : isize;
  var n_15 : bool;
  var _16 : ();
  var next_17 : usize;
  var _18 : borrowed (Robinson_Assignments_Assignments_Type.t_assignments);
  var _19 : Robinson_Decision_Decisions_Type.t_decisions;
  var _20 : Robinson_Formula_Formula_Type.t_formula;
  var a_cloned_21 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _22 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _23 : borrowed uint8;
  var _24 : borrowed (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global));
  var _25 : usize;
  var old_a1_26 : usize;
  var _27 : ();
  var _28 : bool;
  var _29 : Robinson_Formula_Formula_Type.t_formula;
  var _30 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _31 : Robinson_Decision_Decisions_Type.t_decisions;
  var _32 : ();
  var _33 : borrowed uint8;
  var _34 : borrowed (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global));
  var _35 : usize;
  var _36 : usize;
  var _37 : Robinson_Formula_Formula_Type.t_formula;
  var _38 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _39 : Robinson_Decision_Decisions_Type.t_decisions;
  {
    f_1 <- f;
    a_2 <- a;
    d_3 <- d;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _12 <- borrow_mut a_2;
    a_2 <-  ^ _12;
    _13 <- f_1;
    _11 <- ([#"../Robinson/src/solver.rs" 18 10 18 34] DoUnitPropagation0.do_unit_propagation _12 _13);
    goto BB4
  }
  BB4 {
    switch (_11)
      | Core_Option_Option_Type.C_Some _ -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    _10 <- ();
    _18 <- borrow_mut a_2;
    a_2 <-  ^ _18;
    _19 <- d_3;
    _20 <- f_1;
    next_17 <- ([#"../Robinson/src/solver.rs" 24 15 24 38] FindUnassigned0.find_unassigned _18 _19 _20);
    goto BB7
  }
  BB6 {
    n_15 <- Core_Option_Option_Type.some_0 _11;
    _0 <- n_15;
    goto BB17
  }
  BB7 {
    _22 <- a_2;
    a_cloned_21 <- ([#"../Robinson/src/solver.rs" 25 23 25 32] Clone0.clone' _22);
    goto BB8
  }
  BB8 {
    _24 <- borrow_mut (Robinson_Assignments_Assignments_Type.assignments_0 a_2);
    a_2 <- (let Robinson_Assignments_Assignments_Type.C_Assignments a b = a_2 in Robinson_Assignments_Assignments_Type.C_Assignments ( ^ _24) b);
    _25 <- next_17;
    _23 <- ([#"../Robinson/src/solver.rs" 26 4 26 13] IndexMut0.index_mut _24 _25);
    goto BB9
  }
  BB9 {
    _23 <- { _23 with current = ([#"../Robinson/src/solver.rs" 26 16 26 17] (1 : uint8)) };
    assume { Resolve0.resolve _23 };
    old_a1_26 <- Robinson_Assignments_Assignments_Type.assignments_1 a_2;
    _29 <- f_1;
    _30 <- a_2;
    a_2 <- any Robinson_Assignments_Assignments_Type.t_assignments;
    _31 <- d_3;
    _28 <- ([#"../Robinson/src/solver.rs" 28 7 28 21] inner _29 _30 _31);
    goto BB10
  }
  BB10 {
    switch (_28)
      | False -> goto BB12
      | True -> goto BB11
      end
  }
  BB11 {
    _0 <- ([#"../Robinson/src/solver.rs" 29 15 29 19] true);
    goto BB15
  }
  BB12 {
    _27 <- ();
    _34 <- borrow_mut (Robinson_Assignments_Assignments_Type.assignments_0 a_cloned_21);
    a_cloned_21 <- (let Robinson_Assignments_Assignments_Type.C_Assignments a b = a_cloned_21 in Robinson_Assignments_Assignments_Type.C_Assignments ( ^ _34) b);
    _35 <- next_17;
    _33 <- ([#"../Robinson/src/solver.rs" 31 4 31 20] IndexMut0.index_mut _34 _35);
    goto BB13
  }
  BB13 {
    _33 <- { _33 with current = ([#"../Robinson/src/solver.rs" 31 23 31 24] (0 : uint8)) };
    assume { Resolve0.resolve _33 };
    _36 <- old_a1_26;
    a_cloned_21 <- (let Robinson_Assignments_Assignments_Type.C_Assignments a b = a_cloned_21 in Robinson_Assignments_Assignments_Type.C_Assignments a _36);
    _36 <- any usize;
    _37 <- f_1;
    _38 <- a_cloned_21;
    a_cloned_21 <- any Robinson_Assignments_Assignments_Type.t_assignments;
    _39 <- d_3;
    _0 <- ([#"../Robinson/src/solver.rs" 33 11 33 32] inner _37 _38 _39);
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Robinson_Solver_Solver_Interface
  use mach.int.Int
  use prelude.Borrow
  use seq.Seq
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatCompleteNoAss_Stub as EventuallySatCompleteNoAss0
  clone Robinson_Formula_Impl1_EventuallySatNoAss_Stub as EventuallySatNoAss0
  use Robinson_Solver_SatResult_Type as Robinson_Solver_SatResult_Type
  clone Robinson_Clause_Impl1_VarsInRange_Stub as VarsInRange0
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val solver [@cfg:stackify] [#"../Robinson/src/solver.rs" 47 0 47 49] (formula : borrowed (Robinson_Formula_Formula_Type.t_formula)) : Robinson_Solver_SatResult_Type.t_satresult
    requires {[#"../Robinson/src/solver.rs" 37 0 38 58] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses ( * formula))) -> VarsInRange0.vars_in_range (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses ( * formula))) i) (UInt64.to_int Max0.mAX')}
    ensures { [#"../Robinson/src/solver.rs" 39 10 45 1] match (result) with
      | Robinson_Solver_SatResult_Type.C_Sat _assn -> EventuallySatNoAss0.eventually_sat_no_ass ( ^ formula)
      | Robinson_Solver_SatResult_Type.C_Unsat -> not EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( ^ formula)
      | _ -> false
      end }
    ensures { [#"../Robinson/src/solver.rs" 46 10 46 47] Robinson_Formula_Formula_Type.formula_clauses ( ^ formula) = Robinson_Formula_Formula_Type.formula_clauses ( * formula) }
    
end
module Robinson_Solver_Solver
  use prelude.Borrow
  use prelude.Ghost
  use mach.int.Int
  use prelude.IntSize
  use prelude.UInt8
  use seq.Seq
  use mach.int.UInt64
  use prelude.UIntSize
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with
    predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
    predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type as Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel5 with
    type t = Robinson_Lit_Lit_Type.t_lit,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Clause_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Robinson_Clause_Clause_Type.t_clause,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Robinson_Formula_Formula_Type as Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate SatInner0.sat_inner = SatInner1.sat_inner,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with
    predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatInner as EventuallySatInner0 with
    predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel7 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Robinson_Lit_Impl1_Invariant as Invariant0
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant4 with
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Robinson_Formula_Impl0_ShallowModel as ShallowModel6 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = uint8,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Robinson_Assignments_Assignments_Type as Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ShallowModel as ShallowModel4 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Formula_Impl1_EventuallySat as EventuallySat0 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate EventuallySatInner0.eventually_sat_inner = EventuallySatInner0.eventually_sat_inner
  use Robinson_Decision_Decisions_Type as Robinson_Decision_Decisions_Type
  clone Robinson_Decision_Impl0_Invariant as Invariant3 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Assignments_Impl1_Invariant as Invariant2 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Robinson_Formula_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone Robinson_Formula_Impl1_Invariant as Invariant1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant4.invariant',
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Formula_Impl1_ContainsEmptyClause as ContainsEmptyClause0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Formula_FormulaSatInner as FormulaSatInner0 with
    predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel2 with
    type t = Robinson_Formula_Formula_Type.t_formula,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone Alloc_Vec_Impl0_New_Interface as New2 with
    type t = uint8,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Robinson_Solver_Inner_Interface as Inner0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant2.invariant',
    predicate Invariant2.invariant' = Invariant3.invariant',
    predicate EventuallySat0.eventually_sat = EventuallySat0.eventually_sat,
    predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete
  clone Robinson_Decision_Impl1_New_Interface as New1 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant3.invariant'
  clone Robinson_Assignments_Impl2_New_Interface as New0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant2.invariant',
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Robinson_Formula_Formula_Type.t_formula
  clone Robinson_Formula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with
    predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatNoAss as EventuallySatNoAss0 with
    predicate SatInner0.sat_inner = SatInner0.sat_inner
  use Robinson_Solver_SatResult_Type as Robinson_Solver_SatResult_Type
  clone Robinson_Formula_Impl2_CheckAndEstablishFormulaInvariant_Interface as CheckAndEstablishFormulaInvariant0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX',
    predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
    predicate EventuallySatNoAss0.eventually_sat_no_ass = EventuallySatNoAss0.eventually_sat_no_ass,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel3.shallow_model,
    predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner,
    predicate ContainsEmptyClause0.contains_empty_clause = ContainsEmptyClause0.contains_empty_clause,
    predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass,
    predicate Invariant0.invariant' = Invariant1.invariant'
  let rec cfg solver [@cfg:stackify] [#"../Robinson/src/solver.rs" 47 0 47 49] (formula : borrowed (Robinson_Formula_Formula_Type.t_formula)) : Robinson_Solver_SatResult_Type.t_satresult
    requires {[#"../Robinson/src/solver.rs" 37 0 38 58] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses ( * formula))) -> VarsInRange0.vars_in_range (Seq.get (ShallowModel0.shallow_model (Robinson_Formula_Formula_Type.formula_clauses ( * formula))) i) (UInt64.to_int Max0.mAX')}
    ensures { [#"../Robinson/src/solver.rs" 39 10 45 1] match (result) with
      | Robinson_Solver_SatResult_Type.C_Sat _assn -> EventuallySatNoAss0.eventually_sat_no_ass ( ^ formula)
      | Robinson_Solver_SatResult_Type.C_Unsat -> not EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( ^ formula)
      | _ -> false
      end }
    ensures { [#"../Robinson/src/solver.rs" 46 10 46 47] Robinson_Formula_Formula_Type.formula_clauses ( ^ formula) = Robinson_Formula_Formula_Type.formula_clauses ( * formula) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Solver_SatResult_Type.t_satresult;
  var formula_1 : borrowed (Robinson_Formula_Formula_Type.t_formula);
  var _2 : ();
  var old_f_6 : Ghost.ghost_ty (borrowed (Robinson_Formula_Formula_Type.t_formula));
  var _8 : ();
  var _9 : ();
  var _10 : Robinson_Solver_SatResult_Type.t_satresult;
  var _11 : borrowed (Robinson_Formula_Formula_Type.t_formula);
  var _12 : isize;
  var o_13 : Robinson_Solver_SatResult_Type.t_satresult;
  var _14 : ();
  var _15 : ();
  var assignments_17 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _18 : Robinson_Formula_Formula_Type.t_formula;
  var decisions_19 : Robinson_Decision_Decisions_Type.t_decisions;
  var _20 : Robinson_Formula_Formula_Type.t_formula;
  var _21 : ();
  var _22 : bool;
  var _23 : Robinson_Formula_Formula_Type.t_formula;
  var _24 : Robinson_Assignments_Assignments_Type.t_assignments;
  var _25 : Robinson_Decision_Decisions_Type.t_decisions;
  var _26 : Robinson_Decision_Decisions_Type.t_decisions;
  var _27 : ();
  var _28 : Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global);
  {
    formula_1 <- formula;
    goto BB0
  }
  BB0 {
    _8 <- ();
    old_f_6 <- ([#"../Robinson/src/solver.rs" 48 37 48 52] Ghost.new formula_1);
    goto BB1
  }
  BB1 {
    _11 <- borrow_mut ( * formula_1);
    formula_1 <- { formula_1 with current = ( ^ _11) };
    _10 <- ([#"../Robinson/src/solver.rs" 49 10 49 57] CheckAndEstablishFormulaInvariant0.check_and_establish_formula_invariant _11);
    goto BB2
  }
  BB2 {
    switch (_10)
      | Robinson_Solver_SatResult_Type.C_Unknown -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve0.resolve formula_1 };
    o_13 <- _10;
    _10 <- any Robinson_Solver_SatResult_Type.t_satresult;
    _0 <- o_13;
    o_13 <- any Robinson_Solver_SatResult_Type.t_satresult;
    goto BB16
  }
  BB4 {
    _9 <- ();
    goto BB5
  }
  BB5 {
    assert { [#"../Robinson/src/solver.rs" 53 18 53 50] Robinson_Formula_Formula_Type.formula_clauses ( * formula_1) = Robinson_Formula_Formula_Type.formula_clauses ( * Ghost.inner old_f_6) };
    _15 <- ();
    _18 <-  * formula_1;
    assignments_17 <- ([#"../Robinson/src/solver.rs" 54 22 54 47] New0.new _18);
    goto BB6
  }
  BB6 {
    _20 <-  * formula_1;
    decisions_19 <- ([#"../Robinson/src/solver.rs" 55 20 55 43] New1.new _20);
    goto BB7
  }
  BB7 {
    _23 <-  * formula_1;
    assume { Resolve0.resolve formula_1 };
    _24 <- assignments_17;
    assignments_17 <- any Robinson_Assignments_Assignments_Type.t_assignments;
    _26 <- decisions_19;
    _25 <- _26;
    _22 <- ([#"../Robinson/src/solver.rs" 56 7 56 46] Inner0.inner _23 _24 _25);
    goto BB8
  }
  BB8 {
    switch (_22)
      | False -> goto BB12
      | True -> goto BB9
      end
  }
  BB9 {
    _28 <- ([#"../Robinson/src/solver.rs" 57 30 57 40] New2.new ());
    goto BB10
  }
  BB10 {
    _0 <- Robinson_Solver_SatResult_Type.C_Sat _28;
    goto BB11
  }
  BB11 {
    goto BB13
  }
  BB12 {
    _21 <- ();
    _0 <- Robinson_Solver_SatResult_Type.C_Unsat;
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB18
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Robinson_Assignments_Impl0
  
end
module Robinson_Clause_Impl0
  
end
module Robinson_Formula_Impl0
  
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { [#"../Robinson/src/lit.rs" 86 13 100 0] result = self }
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { [#"../Robinson/src/lit.rs" 86 13 100 0] result = self }
    
end
module Robinson_Lit_Impl3
  use Robinson_Lit_Lit_Type as Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl3_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with
    type self = Robinson_Lit_Lit_Type.t_lit,
    val clone' = Clone0.clone'
end
module Robinson_Lit_Impl4
  
end
