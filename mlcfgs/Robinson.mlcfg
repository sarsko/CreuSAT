module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_marker_phantomdata 't = 
    ()
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type robinson_lit_lit  = 
    | Robinson_Lit_Lit usize bool
    
  let function robinson_lit_lit_Lit_idx (self : robinson_lit_lit) : usize = 
    match (self) with
      | Robinson_Lit_Lit a _ -> a
      end
  let function robinson_lit_lit_Lit_polarity (self : robinson_lit_lit) : bool = 
    match (self) with
      | Robinson_Lit_Lit _ a -> a
      end
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type robinson_clause_clause  = 
    | Robinson_Clause_Clause (alloc_vec_vec (robinson_lit_lit) (alloc_alloc_global))
    
  let function robinson_clause_clause_Clause_rest (self : robinson_clause_clause) : alloc_vec_vec (robinson_lit_lit) (alloc_alloc_global)
    
   = 
    match (self) with
      | Robinson_Clause_Clause a -> a
      end
  type robinson_assignments_assignments  = 
    | Robinson_Assignments_Assignments (alloc_vec_vec uint8 (alloc_alloc_global)) usize
    
  let function robinson_assignments_assignments_Assignments_0 (self : robinson_assignments_assignments) : alloc_vec_vec uint8 (alloc_alloc_global)
    
   = 
    match (self) with
      | Robinson_Assignments_Assignments a _ -> a
      end
  let function robinson_assignments_assignments_Assignments_1 (self : robinson_assignments_assignments) : usize = 
    match (self) with
      | Robinson_Assignments_Assignments _ a -> a
      end
  type robinson_formula_formula  = 
    | Robinson_Formula_Formula (alloc_vec_vec (robinson_clause_clause) (alloc_alloc_global)) usize
    
  let function robinson_formula_formula_Formula_num_vars (self : robinson_formula_formula) : usize = 
    match (self) with
      | Robinson_Formula_Formula _ a -> a
      end
  let function robinson_formula_formula_Formula_clauses (self : robinson_formula_formula) : alloc_vec_vec (robinson_clause_clause) (alloc_alloc_global)
    
   = 
    match (self) with
      | Robinson_Formula_Formula a _ -> a
      end
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't = 
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type robinson_decision_decisions  = 
    | Robinson_Decision_Decisions (alloc_vec_vec usize (alloc_alloc_global))
    
  let function robinson_decision_decisions_Decisions_lit_order (self : robinson_decision_decisions) : alloc_vec_vec usize (alloc_alloc_global)
    
   = 
    match (self) with
      | Robinson_Decision_Decisions a -> a
      end
  type robinson_clause_clausestate  = 
    | Robinson_Clause_ClauseState_Sat
    | Robinson_Clause_ClauseState_Unsat
    | Robinson_Clause_ClauseState_Unit
    | Robinson_Clause_ClauseState_Unknown
    
  type creusotcontracts_logic_ghost_ghost 't = 
    | CreusotContracts_Logic_Ghost_Ghost opaque_ptr
    
  type robinson_solver_satresult  = 
    | Robinson_Solver_SatResult_Sat (alloc_vec_vec uint8 (alloc_alloc_global))
    | Robinson_Solver_SatResult_Unsat
    | Robinson_Solver_SatResult_Unknown
    | Robinson_Solver_SatResult_Err
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use Type
  use seq.Seq
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use Type
  use seq.Seq
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl2_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl2_Resolve
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_Impl2
  type t
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve0 with type t = t, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.alloc_vec_vec t a,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.alloc_vec_vec t a,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) = 
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module Robinson_Clause_Impl2_ClauseFromVec_Interface
  use Type
  val clause_from_vec [@cfg:stackify] (vec : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global)) : Type.robinson_clause_clause
    
end
module Robinson_Clause_Impl2_ClauseFromVec
  use Type
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = Type.robinson_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve0 with type t = Type.robinson_lit_lit,
  function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve1.resolve
  let rec cfg clause_from_vec [@cfg:stackify] (vec : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global)) : Type.robinson_clause_clause
    
   = 
  var _0 : Type.robinson_clause_clause;
  var vec_1 : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global);
  var _2 : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global);
  {
    vec_1 <- vec;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _2 };
    _2 <- vec_1;
    _0 <- Type.Robinson_Clause_Clause _2;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module Robinson_Assignments_Impl0_Model_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function model (self : Type.robinson_assignments_assignments) : Seq.seq uint8
end
module Robinson_Assignments_Impl0_Model
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = uint8, type a = Type.alloc_alloc_global
  function model (self : Type.robinson_assignments_assignments) : Seq.seq uint8 = 
    Model0.model (Type.robinson_assignments_assignments_Assignments_0 self)
end
module Robinson_Assignments_AssignmentsEquality_Interface
  use Type
  predicate assignments_equality (a : Type.robinson_assignments_assignments) (a2 : Type.robinson_assignments_assignments)
    
end
module Robinson_Assignments_AssignmentsEquality
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate assignments_equality (a : Type.robinson_assignments_assignments) (a2 : Type.robinson_assignments_assignments)
    
   = 
    Seq.length (Model0.model a) = Seq.length (Model0.model a2) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model a) -> Seq.get (Model0.model a) i = Seq.get (Model0.model a2) i)
end
module Robinson_Logic_Unset_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unset (v : uint8)
end
module Robinson_Logic_Unset
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  predicate unset (v : uint8) = 
    if UInt8.to_int v >= 2 then true else false
end
module Robinson_Assignments_CompatibleInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate compatible_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module Robinson_Assignments_CompatibleInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Robinson_Logic_Unset_Interface as Unset0
  predicate compatible_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8) = 
    Seq.length a = Seq.length a2 && (forall i : (int) . 0 <= i && i < Seq.length a -> Unset0.unset (Seq.get a i) || Seq.get a i = Seq.get a2 i)
end
module Robinson_Assignments_CompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate complete_inner (a : Seq.seq uint8)
end
module Robinson_Assignments_CompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Robinson_Logic_Unset_Interface as Unset0
  predicate complete_inner (a : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length a -> not (Unset0.unset (Seq.get a i))
end
module Robinson_Assignments_CompatibleCompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate compatible_complete_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module Robinson_Assignments_CompatibleCompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Assignments_CompleteInner_Interface as CompleteInner0
  clone Robinson_Assignments_CompatibleInner_Interface as CompatibleInner0
  predicate compatible_complete_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8) = 
    CompatibleInner0.compatible_inner a a2 && CompleteInner0.complete_inner a2
end
module Robinson_Assignments_AssignmentsInvariant_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  predicate assignments_invariant (a : Seq.seq uint8) (f : Type.robinson_formula_formula)
end
module Robinson_Assignments_AssignmentsInvariant
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  use mach.int.UInt64
  predicate assignments_invariant (a : Seq.seq uint8) (f : Type.robinson_formula_formula) = 
    UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f) = Seq.length a
end
module Robinson_Assignments_Impl1_Invariant_Interface
  use Type
  predicate invariant' (self : Type.robinson_assignments_assignments) (f : Type.robinson_formula_formula)
end
module Robinson_Assignments_Impl1_Invariant
  use Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate invariant' (self : Type.robinson_assignments_assignments) (f : Type.robinson_formula_formula) = 
    UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f) = Seq.length (Model0.model self) && UInt64.to_int (Type.robinson_assignments_assignments_Assignments_1 self) <= UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f)
end
module Robinson_Assignments_Impl1_Compatible_Interface
  use Type
  predicate compatible (self : Type.robinson_assignments_assignments) (a2 : Type.robinson_assignments_assignments)
end
module Robinson_Assignments_Impl1_Compatible
  use Type
  clone Robinson_Assignments_CompatibleInner_Interface as CompatibleInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate compatible (self : Type.robinson_assignments_assignments) (a2 : Type.robinson_assignments_assignments) = 
    CompatibleInner0.compatible_inner (Model0.model self) (Model0.model a2)
end
module Robinson_Assignments_Impl1_Complete_Interface
  use Type
  predicate complete (self : Type.robinson_assignments_assignments)
end
module Robinson_Assignments_Impl1_Complete
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate complete (self : Type.robinson_assignments_assignments) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> not (Unset0.unset (Seq.get (Model0.model self) i))
end
module Robinson_Assignments_Impl1_CompatibleComplete_Interface
  use Type
  predicate compatible_complete (self : Type.robinson_assignments_assignments) (a2 : Type.robinson_assignments_assignments)
    
end
module Robinson_Assignments_Impl1_CompatibleComplete
  use Type
  clone Robinson_Assignments_Impl1_Complete_Interface as Complete0
  clone Robinson_Assignments_Impl1_Compatible_Interface as Compatible0
  predicate compatible_complete (self : Type.robinson_assignments_assignments) (a2 : Type.robinson_assignments_assignments)
    
   = 
    Compatible0.compatible self a2 && Complete0.complete a2
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module Robinson_Assignments_Impl0_ModelTy
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  type modelTy  = 
    Seq.seq uint8
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module Robinson_Assignments_Impl0
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.robinson_assignments_assignments,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.robinson_assignments_assignments,
  type modelTy = ModelTy0.modelTy
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self
  type idx
  type output
end
module Core_Ops_Index_Index_Index_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Logic_Model_Impl2_ModelTy
  type t
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl16_Output
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  type output  = 
    Output0.output
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a
  clone Core_Slice_Index_SliceIndex_Output as Output2 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Output as Output0 with type t = t, type i = i, type a = a, type Output0.output = Output2.output
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.alloc_vec_vec t a, type idx = i,
  type output = Output0.output
end
module CreusotContracts_Std1_Vec_Impl1_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Vec_Impl1_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) = 
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Vec_Impl1_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Vec_Impl1_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) = 
    Seq.get seq (UInt64.to_int self) = out
end
module CreusotContracts_Std1_Vec_Impl1_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Vec_Impl1_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) = 
    forall i : (int) . 0 <= i && not (i = UInt64.to_int self) && i <= Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl1
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere as ResolveElswhere1 with type self = usize,
  type t = seq t, predicate resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue as HasValue1 with type self = usize, type t = seq t,
  predicate has_value = HasValue0.has_value, type ModelTy0.modelTy = ModelTy0.modelTy,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds as InBounds1 with type self = usize, type t = seq t,
  predicate in_bounds = InBounds0.in_bounds, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Core_Slice_Index_SliceIndex_Get_Interface
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Get
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut_Interface
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut
  type self
  type t
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked_Interface
  type self
  type t
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked
  type self
  type t
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface
  type self
  type t
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut
  type self
  type t
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index_Interface
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut_Interface
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut
  type self
  type t
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone Core_Slice_Index_Impl2_IndexMut_Interface as IndexMut0 with type t = t
  clone Core_Slice_Index_Impl2_Index_Interface as Index0 with type t = t
  clone Core_Slice_Index_Impl2_GetUncheckedMut_Interface as GetUncheckedMut0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface as GetUncheckedMut1 with type self = usize,
  type t = seq t, val get_unchecked_mut = GetUncheckedMut0.get_unchecked_mut
  clone Core_Slice_Index_Impl2_GetUnchecked_Interface as GetUnchecked0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUnchecked_Interface as GetUnchecked1 with type self = usize, type t = seq t,
  val get_unchecked = GetUnchecked0.get_unchecked
  clone Core_Slice_Index_Impl2_GetMut_Interface as GetMut0 with type t = t
  clone Core_Slice_Index_Impl2_Get_Interface as Get0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone Core_Slice_Index_SliceIndex_IndexMut_Interface as IndexMut1 with type self = usize, type t = seq t,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Index_Interface as Index1 with type self = usize, type t = seq t,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_GetMut_Interface as GetMut1 with type self = usize, type t = seq t,
  val get_mut = GetMut0.get_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Get_Interface as Get1 with type self = usize, type t = seq t, val get = Get0.get,
  type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Output as Output1 with type self = usize, type t = seq t,
  type output = Output0.output
end
module CreusotContracts_Logic_Model_Impl2_Model_Interface
  type t
  use prelude.Prelude
  use seq.Seq
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Logic_Model_Impl2_Model
  type t
  use prelude.Prelude
  use seq.Seq
  function model (self : seq t) : Seq.seq t = 
    Prelude.id self
end
module CreusotContracts_Logic_Model_Impl2
  type t
  use prelude.Prelude
  use seq.Seq
  clone CreusotContracts_Logic_Model_Impl2_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = seq t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = seq t, type modelTy = ModelTy0.modelTy
end
module Robinson_Assignments_Impl2_Clone_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Robinson_Assignments_Impl0_Model_Interface as Model1
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val clone' [@cfg:stackify] (self : Type.robinson_assignments_assignments) : Type.robinson_assignments_assignments
    ensures { UInt64.to_int (Type.robinson_assignments_assignments_Assignments_1 result) = UInt64.to_int (Type.robinson_assignments_assignments_Assignments_1 self) }
    ensures { Seq.length (Model0.model self) = Seq.length (Model1.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Seq.get (Model0.model self) i = Seq.get (Model1.model result) i }
    
end
module Robinson_Assignments_Impl2_Clone
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = uint8
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve0 with type t = uint8, function Model0.model = Model2.model,
  predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = uint8, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = uint8, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = uint8, function Model0.model = Model2.model
  let rec cfg clone' [@cfg:stackify] (self : Type.robinson_assignments_assignments) : Type.robinson_assignments_assignments
    ensures { UInt64.to_int (Type.robinson_assignments_assignments_Assignments_1 result) = UInt64.to_int (Type.robinson_assignments_assignments_Assignments_1 self) }
    ensures { Seq.length (Model0.model self) = Seq.length (Model1.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Seq.get (Model0.model self) i = Seq.get (Model1.model result) i }
    
   = 
  var _0 : Type.robinson_assignments_assignments;
  var self_1 : Type.robinson_assignments_assignments;
  var out_2 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var curr_10 : uint8;
  var _11 : uint8;
  var _12 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _13 : usize;
  var _14 : ();
  var _15 : borrowed (Type.alloc_vec_vec uint8 (Type.alloc_alloc_global));
  var _16 : uint8;
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var _20 : ();
  var _21 : ();
  var _22 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _23 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    out_2 <- New0.new ();
    goto BB1
  }
  BB1 {
    i_3 <- (0 : usize);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant loop_invariant { 0 <= UInt64.to_int i_3 && UInt64.to_int i_3 <= Seq.length (Model0.model self_1) };
    invariant equality { forall j : (int) . 0 <= j && j < UInt64.to_int i_3 -> Seq.get (Model2.model out_2) j = Seq.get (Model0.model self_1) j };
    invariant len { Seq.length (Model2.model out_2) = UInt64.to_int i_3 };
    _7 <- i_3;
    _9 <- Type.robinson_assignments_assignments_Assignments_0 self_1;
    _8 <- Len0.len _9;
    goto BB5
  }
  BB5 {
    _6 <- _7 < _8;
    switch (_6)
      | False -> goto BB9
      | _ -> goto BB6
      end
  }
  BB6 {
    _12 <- Type.robinson_assignments_assignments_Assignments_0 self_1;
    _13 <- i_3;
    _11 <- Index0.index _12 _13;
    goto BB7
  }
  BB7 {
    curr_10 <- _11;
    _15 <- borrow_mut out_2;
    out_2 <-  ^ _15;
    _16 <- curr_10;
    _14 <- Push0.push _15 _16;
    goto BB8
  }
  BB8 {
    i_3 <- i_3 + (1 : usize);
    _5 <- ();
    goto BB4
  }
  BB9 {
    _4 <- ();
    assert { Seq.length (Model2.model out_2) = Seq.length (Model0.model self_1) };
    goto BB10
  }
  BB10 {
    _20 <- ();
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model0.model self_1) -> Seq.get (Model2.model out_2) j = Seq.get (Model0.model self_1) j };
    goto BB11
  }
  BB11 {
    _21 <- ();
    assume { Resolve0.resolve _22 };
    _22 <- out_2;
    _23 <- Type.robinson_assignments_assignments_Assignments_1 self_1;
    _0 <- Type.Robinson_Assignments_Assignments _22 _23;
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module Robinson_Clause_Impl0_Model_Interface
  use Type
  use seq.Seq
  function model (self : Type.robinson_clause_clause) : Seq.seq (Type.robinson_lit_lit)
end
module Robinson_Clause_Impl0_Model
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  function model (self : Type.robinson_clause_clause) : Seq.seq (Type.robinson_lit_lit) = 
    Model0.model (Type.robinson_clause_clause_Clause_rest self)
end
module Robinson_Lit_Impl0_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.robinson_lit_lit) (n : int)
end
module Robinson_Lit_Impl0_Invariant
  use Type
  use mach.int.Int
  use mach.int.UInt64
  predicate invariant' (self : Type.robinson_lit_lit) (n : int) = 
    UInt64.to_int (Type.robinson_lit_lit_Lit_idx self) < n
end
module Robinson_Clause_Impl1_VarsInRange_Interface
  use Type
  use mach.int.Int
  predicate vars_in_range (self : Type.robinson_clause_clause) (n : int)
end
module Robinson_Clause_Impl1_VarsInRange
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Robinson_Lit_Impl0_Invariant_Interface as Invariant0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  predicate vars_in_range (self : Type.robinson_clause_clause) (n : int) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Invariant0.invariant' (Seq.get (Model0.model self) i) n
end
module Robinson_Clause_Impl1_NoDuplicateIndexes_Interface
  use Type
  predicate no_duplicate_indexes (self : Type.robinson_clause_clause)
end
module Robinson_Clause_Impl1_NoDuplicateIndexes
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  predicate no_duplicate_indexes (self : Type.robinson_clause_clause) = 
    forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && 0 <= k && k < j -> not (UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model self) k)) = UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model self) j)))
end
module Robinson_Clause_Impl1_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.robinson_clause_clause) (n : int)
end
module Robinson_Clause_Impl1_Invariant
  use Type
  use mach.int.Int
  clone Robinson_Clause_Impl1_NoDuplicateIndexes_Interface as NoDuplicateIndexes0
  clone Robinson_Clause_Impl1_VarsInRange_Interface as VarsInRange0
  predicate invariant' (self : Type.robinson_clause_clause) (n : int) = 
    VarsInRange0.vars_in_range self n && NoDuplicateIndexes0.no_duplicate_indexes self
end
module Robinson_Formula_Impl1_Invariant_Interface
  use Type
  predicate invariant' (self : Type.robinson_formula_formula)
end
module Robinson_Formula_Impl1_Invariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Robinson_Clause_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  predicate invariant' (self : Type.robinson_formula_formula) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.robinson_formula_formula_Formula_clauses self)) -> Invariant0.invariant' (Seq.get (Model0.model (Type.robinson_formula_formula_Formula_clauses self)) i) (UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars self))
end
module Robinson_Clause_Impl0_ModelTy
  use seq.Seq
  use Type
  type modelTy  = 
    Seq.seq (Type.robinson_lit_lit)
end
module Robinson_Clause_Impl0
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.robinson_clause_clause,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.robinson_clause_clause,
  type modelTy = ModelTy0.modelTy
end
module Alloc_Vec_FromElem_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Alloc_Vec_FromElem
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Robinson_Assignments_Impl2_New_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (f : Type.robinson_formula_formula) : Type.robinson_assignments_assignments
    requires {Invariant0.invariant' f}
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model result) -> Unset0.unset (Seq.get (Model0.model result) i) }
    ensures { Invariant1.invariant' result f }
    
end
module Robinson_Assignments_Impl2_New
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model
  clone Robinson_Lit_Impl0_Invariant as Invariant3
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Robinson_Logic_Unset as Unset0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  use mach.int.UInt64
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = uint8, function Model0.model = Model2.model
  let rec cfg new [@cfg:stackify] (f : Type.robinson_formula_formula) : Type.robinson_assignments_assignments
    requires {Invariant0.invariant' f}
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model result) -> Unset0.unset (Seq.get (Model0.model result) i) }
    ensures { Invariant1.invariant' result f }
    
   = 
  var _0 : Type.robinson_assignments_assignments;
  var f_1 : Type.robinson_formula_formula;
  var _2 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _3 : usize;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _3 <- Type.robinson_formula_formula_Formula_num_vars f_1;
    _2 <- FromElem0.from_elem (2 : uint8) _3;
    goto BB1
  }
  BB1 {
    _0 <- Type.Robinson_Assignments_Assignments _2 (0 : usize);
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module Robinson_Decision_Impl0_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.robinson_decision_decisions) (n : int)
end
module Robinson_Decision_Impl0_Invariant
  use Type
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize, type a = Type.alloc_alloc_global
  predicate invariant' (self : Type.robinson_decision_decisions) (n : int) = 
    Seq.length (Model0.model (Type.robinson_decision_decisions_Decisions_lit_order self)) = n && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.robinson_decision_decisions_Decisions_lit_order self)) -> UInt64.to_int (Seq.get (Model0.model (Type.robinson_decision_decisions_Decisions_lit_order self)) i) < n)
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module Robinson_Assignments_Impl2_FindUnassigned_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Assignments_Impl0_Model_Interface as Model1
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Assignments_Impl1_Complete_Interface as Complete0
  clone Robinson_Decision_Impl0_Invariant_Interface as Invariant0
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val find_unassigned [@cfg:stackify] (self : borrowed (Type.robinson_assignments_assignments)) (d : Type.robinson_decision_decisions) (_f : Type.robinson_formula_formula) : usize
    requires {Invariant0.invariant' d (Seq.length (Model0.model self))}
    requires {not (Complete0.complete ( * self))}
    requires {Invariant1.invariant' ( * self) _f}
    ensures { Model0.model self = Model1.model ( ^ self) }
    ensures { UInt64.to_int result < Seq.length (Model0.model self) && Unset0.unset (Seq.get (Model0.model self) (UInt64.to_int result)) }
    ensures { Invariant1.invariant' ( ^ self) _f }
    
end
module Robinson_Assignments_Impl2_FindUnassigned
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use Type
  use mach.int.Int32
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize, type a = Type.alloc_alloc_global
  clone Robinson_Decision_Impl0_Invariant as Invariant0 with function Model0.model = Model2.model
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.robinson_assignments_assignments
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = uint8
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = usize
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with type t = uint8, type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = usize, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model
  let rec cfg find_unassigned [@cfg:stackify] (self : borrowed (Type.robinson_assignments_assignments)) (d : Type.robinson_decision_decisions) (_f : Type.robinson_formula_formula) : usize
    requires {Invariant0.invariant' d (Seq.length (Model0.model self))}
    requires {not (Complete0.complete ( * self))}
    requires {Invariant1.invariant' ( * self) _f}
    ensures { Model0.model self = Model1.model ( ^ self) }
    ensures { UInt64.to_int result < Seq.length (Model0.model self) && Unset0.unset (Seq.get (Model0.model self) (UInt64.to_int result)) }
    ensures { Invariant1.invariant' ( ^ self) _f }
    
   = 
  var _0 : usize;
  var self_1 : borrowed (Type.robinson_assignments_assignments);
  var d_2 : Type.robinson_decision_decisions;
  var _f_3 : Type.robinson_formula_formula;
  var _4 : ();
  var i_5 : usize;
  var _6 : ();
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var curr_12 : uint8;
  var _13 : uint8;
  var _14 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _15 : usize;
  var _16 : usize;
  var _17 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _18 : usize;
  var _19 : ();
  var _20 : bool;
  var _21 : uint8;
  var _22 : ();
  var _23 : usize;
  var _24 : usize;
  var _25 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _26 : usize;
  var _27 : ();
  var _28 : ();
  var _29 : ();
  var _30 : ();
  var _31 : bool;
  var _32 : usize;
  var _33 : usize;
  var _34 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _35 : ();
  var _36 : bool;
  var _37 : uint8;
  var _38 : uint8;
  var _39 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _40 : usize;
  var _41 : ();
  var _42 : ();
  var _43 : ();
  var _44 : ();
  var _45 : ();
  {
    self_1 <- self;
    d_2 <- d;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    i_5 <- Type.robinson_assignments_assignments_Assignments_1 ( * self_1);
    goto BB1
  }
  BB1 {
    invariant i_bound { UInt64.to_int i_5 <= Seq.length (Model2.model (Type.robinson_decision_decisions_Decisions_lit_order d_2)) };
    _9 <- i_5;
    _11 <- Type.robinson_decision_decisions_Decisions_lit_order d_2;
    _10 <- Len0.len _11;
    goto BB2
  }
  BB2 {
    _8 <- _9 < _10;
    switch (_8)
      | False -> goto BB9
      | _ -> goto BB3
      end
  }
  BB3 {
    _14 <- Type.robinson_assignments_assignments_Assignments_0 ( * self_1);
    _17 <- Type.robinson_decision_decisions_Decisions_lit_order d_2;
    _18 <- i_5;
    _16 <- Index0.index _17 _18;
    goto BB4
  }
  BB4 {
    _15 <- _16;
    _13 <- Index1.index _14 _15;
    goto BB5
  }
  BB5 {
    curr_12 <- _13;
    _21 <- curr_12;
    _20 <- _21 >= (2 : uint8);
    switch (_20)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB6 {
    _23 <- i_5;
    self_1 <- { self_1 with current = (let Type.Robinson_Assignments_Assignments a b =  * self_1 in Type.Robinson_Assignments_Assignments a (_23 + (1 : usize))) };
    assume { Resolve0.resolve self_1 };
    _25 <- Type.robinson_decision_decisions_Decisions_lit_order d_2;
    _26 <- i_5;
    _24 <- Index0.index _25 _26;
    goto BB7
  }
  BB7 {
    _0 <- _24;
    goto BB17
  }
  BB8 {
    _19 <- ();
    i_5 <- i_5 + (1 : usize);
    _7 <- ();
    goto BB1
  }
  BB9 {
    _6 <- ();
    i_5 <- (0 : usize);
    goto BB10
  }
  BB10 {
    invariant prev { forall j : (int) . 0 <= j && j < UInt64.to_int i_5 -> not (Unset0.unset (Seq.get (Model0.model self_1) j)) };
    _32 <- i_5;
    _34 <- Type.robinson_assignments_assignments_Assignments_0 ( * self_1);
    _33 <- Len1.len _34;
    goto BB11
  }
  BB11 {
    _31 <- _32 < _33;
    switch (_31)
      | False -> goto BB16
      | _ -> goto BB12
      end
  }
  BB12 {
    _39 <- Type.robinson_assignments_assignments_Assignments_0 ( * self_1);
    _40 <- i_5;
    _38 <- Index1.index _39 _40;
    goto BB13
  }
  BB13 {
    _37 <- _38;
    _36 <- _37 >= (2 : uint8);
    switch (_36)
      | False -> goto BB15
      | _ -> goto BB14
      end
  }
  BB14 {
    assume { Resolve0.resolve self_1 };
    _0 <- i_5;
    goto BB17
  }
  BB15 {
    _35 <- ();
    i_5 <- i_5 + (1 : usize);
    _7 <- ();
    goto BB10
  }
  BB16 {
    assume { Resolve0.resolve self_1 };
    _30 <- ();
    absurd
  }
  BB17 {
    return _0
  }
  
end
module Robinson_Lit_Impl0_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.robinson_lit_lit) (a : Seq.seq uint8)
end
module Robinson_Lit_Impl0_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  use mach.int.Int32
  predicate unsat_inner (self : Type.robinson_lit_lit) (a : Seq.seq uint8) = 
    if Type.robinson_lit_lit_Lit_polarity self then
      UInt8.to_int (Seq.get a (UInt64.to_int (Type.robinson_lit_lit_Lit_idx self))) = 0
    else
      UInt8.to_int (Seq.get a (UInt64.to_int (Type.robinson_lit_lit_Lit_idx self))) = 1
    
end
module Robinson_Clause_Impl1_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.robinson_clause_clause) (a : Seq.seq uint8)
end
module Robinson_Clause_Impl1_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Robinson_Lit_Impl0_UnsatInner_Interface as UnsatInner0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  predicate unsat_inner (self : Type.robinson_clause_clause) (a : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> UnsatInner0.unsat_inner (Seq.get (Model0.model self) i) a
end
module Robinson_Clause_Impl1_Unsat_Interface
  use Type
  predicate unsat (self : Type.robinson_clause_clause) (a : Type.robinson_assignments_assignments)
end
module Robinson_Clause_Impl1_Unsat
  use Type
  clone Robinson_Clause_Impl1_UnsatInner_Interface as UnsatInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate unsat (self : Type.robinson_clause_clause) (a : Type.robinson_assignments_assignments) = 
    UnsatInner0.unsat_inner self (Model0.model a)
end
module Robinson_Lit_Impl0_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.robinson_lit_lit) (a : Seq.seq uint8)
end
module Robinson_Lit_Impl0_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  use mach.int.Int32
  predicate sat_inner (self : Type.robinson_lit_lit) (a : Seq.seq uint8) = 
    if Type.robinson_lit_lit_Lit_polarity self then
      UInt8.to_int (Seq.get a (UInt64.to_int (Type.robinson_lit_lit_Lit_idx self))) = 1
    else
      UInt8.to_int (Seq.get a (UInt64.to_int (Type.robinson_lit_lit_Lit_idx self))) = 0
    
end
module Robinson_Clause_Impl1_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.robinson_clause_clause) (a : Seq.seq uint8)
end
module Robinson_Clause_Impl1_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Robinson_Lit_Impl0_SatInner_Interface as SatInner0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  predicate sat_inner (self : Type.robinson_clause_clause) (a : Seq.seq uint8) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model self) && SatInner0.sat_inner (Seq.get (Model0.model self) i) a
end
module Robinson_Clause_Impl1_Sat_Interface
  use Type
  predicate sat (self : Type.robinson_clause_clause) (a : Type.robinson_assignments_assignments)
end
module Robinson_Clause_Impl1_Sat
  use Type
  clone Robinson_Clause_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate sat (self : Type.robinson_clause_clause) (a : Type.robinson_assignments_assignments) = 
    SatInner0.sat_inner self (Model0.model a)
end
module Robinson_Lit_Impl0_UnsetInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unset_inner (self : Type.robinson_lit_lit) (a : Seq.seq uint8)
end
module Robinson_Lit_Impl0_UnsetInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  use mach.int.Int32
  predicate unset_inner (self : Type.robinson_lit_lit) (a : Seq.seq uint8) = 
    UInt8.to_int (Seq.get a (UInt64.to_int (Type.robinson_lit_lit_Lit_idx self))) >= 2
end
module Robinson_Clause_Impl1_UnitInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unit_inner (self : Type.robinson_clause_clause) (a : Seq.seq uint8)
end
module Robinson_Clause_Impl1_UnitInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Robinson_Lit_Impl0_UnsetInner_Interface as UnsetInner0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  clone Robinson_Clause_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Clause_Impl1_VarsInRange_Interface as VarsInRange0
  predicate unit_inner (self : Type.robinson_clause_clause) (a : Seq.seq uint8) = 
    VarsInRange0.vars_in_range self (Seq.length a) && not (SatInner0.sat_inner self a) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model self) && UnsetInner0.unset_inner (Seq.get (Model0.model self) i) a && (forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && j <> i -> not (UnsetInner0.unset_inner (Seq.get (Model0.model self) j) a)))
end
module Robinson_Clause_Impl1_Unit_Interface
  use Type
  predicate unit (self : Type.robinson_clause_clause) (a : Type.robinson_assignments_assignments)
end
module Robinson_Clause_Impl1_Unit
  use Type
  clone Robinson_Clause_Impl1_UnitInner_Interface as UnitInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate unit (self : Type.robinson_clause_clause) (a : Type.robinson_assignments_assignments) = 
    UnitInner0.unit_inner self (Model0.model a)
end
module Robinson_Formula_Impl1_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.robinson_formula_formula) (a : Seq.seq uint8)
end
module Robinson_Formula_Impl1_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Robinson_Clause_Impl1_SatInner_Interface as SatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  predicate sat_inner (self : Type.robinson_formula_formula) (a : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.robinson_formula_formula_Formula_clauses self)) -> SatInner0.sat_inner (Seq.get (Model0.model (Type.robinson_formula_formula_Formula_clauses self)) i) a
end
module Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate eventually_sat_complete_inner (self : Type.robinson_formula_formula) (a : Seq.seq uint8)
end
module Robinson_Formula_Impl1_EventuallySatCompleteInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone Robinson_Formula_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Assignments_CompatibleCompleteInner_Interface as CompatibleCompleteInner0
  predicate eventually_sat_complete_inner (self : Type.robinson_formula_formula) (a : Seq.seq uint8) = 
    exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars self) && CompatibleCompleteInner0.compatible_complete_inner a a2 && SatInner0.sat_inner self a2
end
module Robinson_Formula_Impl1_EventuallySatComplete_Interface
  use Type
  predicate eventually_sat_complete (self : Type.robinson_formula_formula) (a : Type.robinson_assignments_assignments)
end
module Robinson_Formula_Impl1_EventuallySatComplete
  use Type
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate eventually_sat_complete (self : Type.robinson_formula_formula) (a : Type.robinson_assignments_assignments)
   = 
    EventuallySatCompleteInner0.eventually_sat_complete_inner self (Model0.model a)
end
module CreusotContracts_Logic_Ghost_Impl0_Model_Interface
  type t
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Model
  type t
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module Robinson_Logic_BoolToAssignedstate_Interface
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function bool_to_assignedstate (b : bool) : uint8
end
module Robinson_Logic_BoolToAssignedstate
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function bool_to_assignedstate (b : bool) : uint8 = 
    if b then (1 : uint8) else (0 : uint8)
  axiom bool_to_assignedstate_spec : forall b : bool . (b -> UInt8.to_int (bool_to_assignedstate b) = 1) && (not b -> UInt8.to_int (bool_to_assignedstate b) = 0)
end
module Robinson_Logic_BoolToAssignedstate_Impl
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  let rec ghost function bool_to_assignedstate (b : bool) : uint8
    ensures { not b -> UInt8.to_int result = 0 }
    ensures { b -> UInt8.to_int result = 1 }
    
   = 
    if b then (1 : uint8) else (0 : uint8)
end
module Robinson_Clause_Impl1_InFormula_Interface
  use Type
  predicate in_formula (self : Type.robinson_clause_clause) (f : Type.robinson_formula_formula)
end
module Robinson_Clause_Impl1_InFormula
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  predicate in_formula (self : Type.robinson_clause_clause) (f : Type.robinson_formula_formula) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.robinson_formula_formula_Formula_clauses f)) && Seq.get (Model0.model (Type.robinson_formula_formula_Formula_clauses f)) i = self
end
module Robinson_Logic_FlipV_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function flip_v (v : uint8) : uint8
end
module Robinson_Logic_FlipV
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  function flip_v (v : uint8) : uint8 = 
    if UInt8.to_int v = 0 then (1 : uint8) else if UInt8.to_int v = 1 then (0 : uint8) else v
end
module Robinson_Formula_Impl1_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.robinson_formula_formula) (a : Seq.seq uint8)
end
module Robinson_Formula_Impl1_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Robinson_Clause_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  predicate unsat_inner (self : Type.robinson_formula_formula) (a : Seq.seq uint8) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.robinson_formula_formula_Formula_clauses self)) && UnsatInner0.unsat_inner (Seq.get (Model0.model (Type.robinson_formula_formula_Formula_clauses self)) i) a
end
module Robinson_Logic_LemmaNotSatFormulaImpliesUnsatFormula_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  clone Robinson_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Robinson_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  function lemma_not_sat_formula_implies_unsat_formula (f : Type.robinson_formula_formula) (a : Seq.seq uint8) : ()
end
module Robinson_Logic_LemmaNotSatFormulaImpliesUnsatFormula
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  clone Robinson_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Robinson_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  function lemma_not_sat_formula_implies_unsat_formula (f : Type.robinson_formula_formula) (a : Seq.seq uint8) : () = 
    ()
  axiom lemma_not_sat_formula_implies_unsat_formula_spec : forall f : Type.robinson_formula_formula, a : Seq.seq uint8 . UnsatInner0.unsat_inner f a -> AssignmentsInvariant0.assignments_invariant a f -> Invariant0.invariant' f -> not (EventuallySatCompleteInner0.eventually_sat_complete_inner f a)
end
module Robinson_Logic_LemmaNotSatFormulaImpliesUnsatFormula_Impl
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Lit_Impl0_SatInner as SatInner2
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Lit_Impl0_Invariant as Invariant2
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant1 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Robinson_Lit_Impl0_UnsatInner as UnsatInner2
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Robinson_Assignments_AssignmentsInvariant as AssignmentsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  let rec ghost function lemma_not_sat_formula_implies_unsat_formula (f : Type.robinson_formula_formula) (a : Seq.seq uint8) : ()
    requires {UnsatInner0.unsat_inner f a}
    requires {AssignmentsInvariant0.assignments_invariant a f}
    requires {Invariant0.invariant' f}
    ensures { not (EventuallySatCompleteInner0.eventually_sat_complete_inner f a) }
    
   = 
    ()
end
module Robinson_Logic_LemmaCorrectPolarityMakesClauseSat_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Clause_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  function lemma_correct_polarity_makes_clause_sat (c : Type.robinson_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Robinson_Logic_LemmaCorrectPolarityMakesClauseSat
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Clause_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  function lemma_correct_polarity_makes_clause_sat (c : Type.robinson_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
   = 
    ()
  axiom lemma_correct_polarity_makes_clause_sat_spec : forall c : Type.robinson_clause_clause, a : Seq.seq uint8, ix : int, v : uint8 . (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.robinson_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v) -> 0 <= ix && ix < Seq.length a -> SatInner0.sat_inner c (Seq.set a ix v)
end
module Robinson_Logic_LemmaCorrectPolarityMakesClauseSat_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Lit_Impl0_SatInner as SatInner1
  clone Robinson_Logic_BoolToAssignedstate as BoolToAssignedstate0 with axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone Robinson_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  let rec ghost function lemma_correct_polarity_makes_clause_sat (c : Type.robinson_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.robinson_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v}
    requires {0 <= ix && ix < Seq.length a}
    ensures { SatInner0.sat_inner c (Seq.set a ix v) }
    
   = 
    ()
end
module Robinson_Logic_LemmaIncorrectPolarityMakesClauseUnsat_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Clause_Impl1_UnsatInner_Interface as UnsatInner1
  clone Robinson_Logic_FlipV_Interface as FlipV0
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Clause_Impl1_UnitInner_Interface as UnitInner0
  clone Robinson_Clause_Impl1_SatInner_Interface as SatInner1
  clone Robinson_Lit_Impl0_SatInner_Interface as SatInner0
  clone Robinson_Clause_Impl1_Invariant_Interface as Invariant0
  clone Robinson_Lit_Impl0_UnsatInner_Interface as UnsatInner0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  function lemma_incorrect_polarity_makes_clause_unsat (c : Type.robinson_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Robinson_Logic_LemmaIncorrectPolarityMakesClauseUnsat
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Clause_Impl1_UnsatInner_Interface as UnsatInner1
  clone Robinson_Logic_FlipV_Interface as FlipV0
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Clause_Impl1_UnitInner_Interface as UnitInner0
  clone Robinson_Clause_Impl1_SatInner_Interface as SatInner1
  clone Robinson_Lit_Impl0_SatInner_Interface as SatInner0
  clone Robinson_Clause_Impl1_Invariant_Interface as Invariant0
  clone Robinson_Lit_Impl0_UnsatInner_Interface as UnsatInner0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  function lemma_incorrect_polarity_makes_clause_unsat (c : Type.robinson_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
   = 
    ()
  axiom lemma_incorrect_polarity_makes_clause_unsat_spec : forall c : Type.robinson_clause_clause, a : Seq.seq uint8, ix : int, v : uint8 . (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> UnsatInner0.unsat_inner (Seq.get (Model0.model c) j) a) -> Invariant0.invariant' c (Seq.length a) -> (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && SatInner0.sat_inner (Seq.get (Model0.model c) j) a) -> not (SatInner1.sat_inner c a) -> UnitInner0.unit_inner c a -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> not (Unset0.unset v) -> (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) -> not (Unset0.unset (Seq.get (Seq.set a ix v) (UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model c) j)))))) && not (Unset0.unset (Seq.get (Seq.set a ix (FlipV0.flip_v v)) ix)) && UnsatInner1.unsat_inner c (Seq.set a ix (FlipV0.flip_v v)) && not (SatInner1.sat_inner c (Seq.set a ix (FlipV0.flip_v v)))
end
module Robinson_Logic_LemmaIncorrectPolarityMakesClauseUnsat_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Lit_Impl0_Invariant as Invariant1
  clone Robinson_Logic_FlipV as FlipV0
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Lit_Impl0_UnsetInner as UnsetInner0
  clone Robinson_Lit_Impl0_SatInner as SatInner0
  clone Robinson_Lit_Impl0_UnsatInner as UnsatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model0.model
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner1.sat_inner, function Model0.model = Model0.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  let rec ghost function lemma_incorrect_polarity_makes_clause_unsat (c : Type.robinson_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> UnsatInner0.unsat_inner (Seq.get (Model0.model c) j) a}
    requires {Invariant0.invariant' c (Seq.length a)}
    requires {exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && SatInner0.sat_inner (Seq.get (Model0.model c) j) a}
    requires {not (SatInner1.sat_inner c a)}
    requires {UnitInner0.unit_inner c a}
    requires {0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix)}
    requires {not (Unset0.unset v)}
    ensures { not (SatInner1.sat_inner c (Seq.set a ix (FlipV0.flip_v v))) }
    ensures { UnsatInner1.unsat_inner c (Seq.set a ix (FlipV0.flip_v v)) }
    ensures { not (Unset0.unset (Seq.get (Seq.set a ix (FlipV0.flip_v v)) ix)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) -> not (Unset0.unset (Seq.get (Seq.set a ix v) (UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model c) j))))) }
    
   = 
    ()
end
module Robinson_Logic_LemmaNotSatClauseImpliesUnsatFormula_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Formula_Impl1_UnsatInner_Interface as UnsatInner1
  clone Robinson_Clause_Impl1_UnsatInner_Interface as UnsatInner0
  clone Robinson_Clause_Impl1_InFormula_Interface as InFormula0
  function lemma_not_sat_clause_implies_unsat_formula (f : Type.robinson_formula_formula) (c : Type.robinson_clause_clause) (a : Seq.seq uint8) : ()
    
end
module Robinson_Logic_LemmaNotSatClauseImpliesUnsatFormula
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Formula_Impl1_UnsatInner_Interface as UnsatInner1
  clone Robinson_Clause_Impl1_UnsatInner_Interface as UnsatInner0
  clone Robinson_Clause_Impl1_InFormula_Interface as InFormula0
  function lemma_not_sat_clause_implies_unsat_formula (f : Type.robinson_formula_formula) (c : Type.robinson_clause_clause) (a : Seq.seq uint8) : ()
    
   = 
    ()
  axiom lemma_not_sat_clause_implies_unsat_formula_spec : forall f : Type.robinson_formula_formula, c : Type.robinson_clause_clause, a : Seq.seq uint8 . InFormula0.in_formula c f -> UnsatInner0.unsat_inner c a -> UnsatInner1.unsat_inner f a
end
module Robinson_Logic_LemmaNotSatClauseImpliesUnsatFormula_Impl
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Lit_Impl0_UnsatInner as UnsatInner2
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Clause_Impl1_InFormula as InFormula0 with function Model0.model = Model0.model
  let rec ghost function lemma_not_sat_clause_implies_unsat_formula (f : Type.robinson_formula_formula) (c : Type.robinson_clause_clause) (a : Seq.seq uint8) : ()
    requires {InFormula0.in_formula c f}
    requires {UnsatInner0.unsat_inner c a}
    ensures { UnsatInner1.unsat_inner f a }
    
   = 
    ()
end
module Robinson_Logic_LemmaUnitWrongPolarityUnsatFormula_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Formula_Impl1_UnsatInner_Interface as UnsatInner1
  clone Robinson_Logic_FlipV_Interface as FlipV0
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Clause_Impl1_UnitInner_Interface as UnitInner0
  clone Robinson_Clause_Impl1_InFormula_Interface as InFormula0
  clone Robinson_Clause_Impl1_Invariant_Interface as Invariant0
  clone Robinson_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Robinson_Lit_Impl0_UnsatInner_Interface as UnsatInner0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  function lemma_unit_wrong_polarity_unsat_formula (c : Type.robinson_clause_clause) (f : Type.robinson_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Robinson_Logic_LemmaUnitWrongPolarityUnsatFormula
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Formula_Impl1_UnsatInner_Interface as UnsatInner1
  clone Robinson_Logic_FlipV_Interface as FlipV0
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Clause_Impl1_UnitInner_Interface as UnitInner0
  clone Robinson_Clause_Impl1_InFormula_Interface as InFormula0
  clone Robinson_Clause_Impl1_Invariant_Interface as Invariant0
  clone Robinson_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Robinson_Lit_Impl0_UnsatInner_Interface as UnsatInner0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  clone Robinson_Clause_Impl1_UnsatInner_Interface as UnsatInner2
  clone Robinson_Lit_Impl0_SatInner_Interface as SatInner1
  clone Robinson_Clause_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Robinson_Logic_LemmaNotSatFormulaImpliesUnsatFormula_Interface as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant1.invariant',
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  axiom .
  clone Robinson_Logic_LemmaNotSatClauseImpliesUnsatFormula_Interface as LemmaNotSatClauseImpliesUnsatFormula0 with predicate InFormula0.in_formula = InFormula0.in_formula,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner,
  predicate UnsatInner1.unsat_inner = UnsatInner1.unsat_inner, axiom .
  clone Robinson_Logic_LemmaIncorrectPolarityMakesClauseUnsat_Interface as LemmaIncorrectPolarityMakesClauseUnsat0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate SatInner0.sat_inner = SatInner1.sat_inner, predicate SatInner1.sat_inner = SatInner0.sat_inner,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner, predicate Unset0.unset = Unset0.unset,
  function FlipV0.flip_v = FlipV0.flip_v, predicate UnsatInner1.unsat_inner = UnsatInner2.unsat_inner, axiom .
  clone Robinson_Logic_LemmaCorrectPolarityMakesClauseSat_Interface as LemmaCorrectPolarityMakesClauseSat0 with function Model0.model = Model0.model,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, axiom .
  function lemma_unit_wrong_polarity_unsat_formula (c : Type.robinson_clause_clause) (f : Type.robinson_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
   = 
    let _ = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula f a in let _ = LemmaCorrectPolarityMakesClauseSat0.lemma_correct_polarity_makes_clause_sat c a ix v in let _ = LemmaIncorrectPolarityMakesClauseUnsat0.lemma_incorrect_polarity_makes_clause_unsat c a ix v in let _ = LemmaNotSatClauseImpliesUnsatFormula0.lemma_not_sat_clause_implies_unsat_formula f c (Seq.set a ix (FlipV0.flip_v v)) in ()
  axiom lemma_unit_wrong_polarity_unsat_formula_spec : forall c : Type.robinson_clause_clause, f : Type.robinson_formula_formula, a : Seq.seq uint8, ix : int, v : uint8 . (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> UnsatInner0.unsat_inner (Seq.get (Model0.model c) j) a) -> (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.robinson_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v) -> Invariant0.invariant' c (Seq.length a) -> InFormula0.in_formula c f -> UnitInner0.unit_inner c a -> not (Unset0.unset v) -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f) = Seq.length a -> Invariant1.invariant' f -> not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v))) && UnsatInner1.unsat_inner f (Seq.set a ix (FlipV0.flip_v v))
end
module Robinson_Logic_LemmaUnitWrongPolarityUnsatFormula_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Lit_Impl0_Invariant as Invariant2
  clone Robinson_Lit_Impl0_SatInner as SatInner2
  clone Robinson_Assignments_AssignmentsInvariant as AssignmentsInvariant0
  clone Robinson_Logic_FlipV as FlipV0
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Lit_Impl0_UnsetInner as UnsetInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl1_InFormula as InFormula0 with function Model0.model = Model2.model
  clone Robinson_Logic_BoolToAssignedstate as BoolToAssignedstate0 with axiom .
  clone Robinson_Lit_Impl0_UnsatInner as UnsatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner2 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Robinson_Logic_LemmaNotSatClauseImpliesUnsatFormula as LemmaNotSatClauseImpliesUnsatFormula0 with predicate InFormula0.in_formula = InFormula0.in_formula,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner,
  predicate UnsatInner1.unsat_inner = UnsatInner1.unsat_inner, axiom .
  clone Robinson_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Formula_Impl1_SatInner as SatInner1 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Logic_LemmaCorrectPolarityMakesClauseSat as LemmaCorrectPolarityMakesClauseSat0 with function Model0.model = Model0.model,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, axiom .
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model0.model
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model0.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Clause_Impl1_Invariant as Invariant0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Robinson_Logic_LemmaIncorrectPolarityMakesClauseUnsat as LemmaIncorrectPolarityMakesClauseUnsat0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate SatInner1.sat_inner = SatInner0.sat_inner,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner, predicate Unset0.unset = Unset0.unset,
  function FlipV0.flip_v = FlipV0.flip_v, predicate UnsatInner1.unsat_inner = UnsatInner2.unsat_inner, axiom .
  clone Robinson_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant0.invariant'
  clone Robinson_Logic_LemmaNotSatFormulaImpliesUnsatFormula as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant1.invariant',
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  axiom .
  let rec ghost function lemma_unit_wrong_polarity_unsat_formula (c : Type.robinson_clause_clause) (f : Type.robinson_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> UnsatInner0.unsat_inner (Seq.get (Model0.model c) j) a}
    requires {exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.robinson_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v}
    requires {Invariant0.invariant' c (Seq.length a)}
    requires {InFormula0.in_formula c f}
    requires {UnitInner0.unit_inner c a}
    requires {not (Unset0.unset v)}
    requires {0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix)}
    requires {UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f) = Seq.length a}
    requires {Invariant1.invariant' f}
    ensures { UnsatInner1.unsat_inner f (Seq.set a ix (FlipV0.flip_v v)) }
    ensures { not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v))) }
    
   = 
    let _ = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula f a in let _ = LemmaCorrectPolarityMakesClauseSat0.lemma_correct_polarity_makes_clause_sat c a ix v in let _ = LemmaIncorrectPolarityMakesClauseUnsat0.lemma_incorrect_polarity_makes_clause_unsat c a ix v in let _ = let c' = let c' = FlipV0.flip_v v in Seq.set a ix c' in LemmaNotSatClauseImpliesUnsatFormula0.lemma_not_sat_clause_implies_unsat_formula f c c' in ()
end
module Robinson_Lit_Impl0_Unset_Interface
  use Type
  predicate unset (self : Type.robinson_lit_lit) (a : Type.robinson_assignments_assignments)
end
module Robinson_Lit_Impl0_Unset
  use Type
  clone Robinson_Lit_Impl0_UnsetInner_Interface as UnsetInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate unset (self : Type.robinson_lit_lit) (a : Type.robinson_assignments_assignments) = 
    UnsetInner0.unset_inner self (Model0.model a)
end
module Robinson_Logic_LemmaUnitForces_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Logic_FlipV_Interface as FlipV0
  function lemma_unit_forces (f : Type.robinson_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
end
module Robinson_Logic_LemmaUnitForces
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Logic_FlipV_Interface as FlipV0
  clone Robinson_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Robinson_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  clone Robinson_Logic_LemmaNotSatFormulaImpliesUnsatFormula_Interface as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  axiom .
  function lemma_unit_forces (f : Type.robinson_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : () = 
    let _ = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula f a in ()
  axiom lemma_unit_forces_spec : forall f : Type.robinson_formula_formula, a : Seq.seq uint8, ix : int, v : uint8 . not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v))) -> EventuallySatCompleteInner0.eventually_sat_complete_inner f a -> not (Unset0.unset v) -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f) = Seq.length a -> Invariant0.invariant' f -> EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v)
end
module Robinson_Logic_LemmaUnitForces_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model
  clone Robinson_Lit_Impl0_UnsatInner as UnsatInner2
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Robinson_Lit_Impl0_Invariant as Invariant2
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant1 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Robinson_Lit_Impl0_SatInner as SatInner2
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Assignments_AssignmentsInvariant as AssignmentsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Logic_LemmaNotSatFormulaImpliesUnsatFormula as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  axiom .
  clone Robinson_Logic_FlipV as FlipV0
  let rec ghost function lemma_unit_forces (f : Type.robinson_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v)))}
    requires {EventuallySatCompleteInner0.eventually_sat_complete_inner f a}
    requires {not (Unset0.unset v)}
    requires {0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix)}
    requires {UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f) = Seq.length a}
    requires {Invariant0.invariant' f}
    ensures { EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v) }
    
   = 
    let _ = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula f a in ()
end
module Robinson_Logic_LemmaExtensionSatBaseSat_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  function lemma_extension_sat_base_sat (f : Type.robinson_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Robinson_Logic_LemmaExtensionSatBaseSat
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  function lemma_extension_sat_base_sat (f : Type.robinson_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
   = 
    ()
  axiom lemma_extension_sat_base_sat_spec : forall f : Type.robinson_formula_formula, a : Seq.seq uint8, ix : int, v : uint8 . EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v) -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> EventuallySatCompleteInner0.eventually_sat_complete_inner f a
end
module Robinson_Logic_LemmaExtensionSatBaseSat_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Lit_Impl0_SatInner as SatInner2
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  let rec ghost function lemma_extension_sat_base_sat (f : Type.robinson_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v)}
    requires {0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix)}
    ensures { EventuallySatCompleteInner0.eventually_sat_complete_inner f a }
    
   = 
    ()
end
module Robinson_Logic_Pos_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function pos (_ : ()) : uint8
end
module Robinson_Logic_Pos
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function pos (_ : ()) : uint8 = 
    (1 : uint8)
end
module Robinson_Logic_Neg_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function neg (_ : ()) : uint8
end
module Robinson_Logic_Neg
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function neg (_ : ()) : uint8 = 
    (0 : uint8)
end
module Robinson_Logic_LemmaExtensionsUnsatBaseUnsat_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Logic_Neg_Interface as Neg0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Logic_Pos_Interface as Pos0
  function lemma_extensions_unsat_base_unsat (a : Seq.seq uint8) (ix : int) (f : Type.robinson_formula_formula) : ()
end
module Robinson_Logic_LemmaExtensionsUnsatBaseUnsat
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Logic_Neg_Interface as Neg0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Logic_Pos_Interface as Pos0
  clone Robinson_Assignments_CompatibleInner_Interface as CompatibleInner0
  function lemma_extensions_unsat_base_unsat (a : Seq.seq uint8) (ix : int) (f : Type.robinson_formula_formula) : () = 
    let _ = CompatibleInner0.compatible_inner a (Seq.set a ix (Pos0.pos ())) in let _ = CompatibleInner0.compatible_inner a (Seq.set a ix (Neg0.neg ())) in ()
  axiom lemma_extensions_unsat_base_unsat_spec : forall a : Seq.seq uint8, ix : int, f : Type.robinson_formula_formula . not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Pos0.pos ()))) -> not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Neg0.neg ()))) -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> not (EventuallySatCompleteInner0.eventually_sat_complete_inner f a)
end
module Robinson_Logic_LemmaExtensionsUnsatBaseUnsat_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Lit_Impl0_SatInner as SatInner2
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Logic_Neg as Neg0
  clone Robinson_Logic_Pos as Pos0
  let rec ghost function lemma_extensions_unsat_base_unsat (a : Seq.seq uint8) (ix : int) (f : Type.robinson_formula_formula) : ()
    requires {not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Pos0.pos ())))}
    requires {not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Neg0.neg ())))}
    requires {0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix)}
    ensures { not (EventuallySatCompleteInner0.eventually_sat_complete_inner f a) }
    
   = 
    let _ = let b' = let c' = Pos0.pos () in Seq.set a ix c' in CompatibleInner0.compatible_inner a b' in let _ = let b' = let c' = Neg0.neg () in Seq.set a ix c' in CompatibleInner0.compatible_inner a b' in ()
end
module CreusotContracts_Logic_Ghost_Impl0_ModelTy
  type t
  type modelTy  = 
    t
end
module CreusotContracts_Logic_Ghost_Impl0
  type t
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Ghost_Impl1_Record_Interface
  type t
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Ghost_Impl1_Record
  type t
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module Robinson_Lit_Impl0_Unsat_Interface
  use Type
  predicate unsat (self : Type.robinson_lit_lit) (a : Type.robinson_assignments_assignments)
end
module Robinson_Lit_Impl0_Unsat
  use Type
  clone Robinson_Lit_Impl0_UnsatInner_Interface as UnsatInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate unsat (self : Type.robinson_lit_lit) (a : Type.robinson_assignments_assignments) = 
    UnsatInner0.unsat_inner self (Model0.model a)
end
module Robinson_Lit_Impl0_Sat_Interface
  use Type
  predicate sat (self : Type.robinson_lit_lit) (a : Type.robinson_assignments_assignments)
end
module Robinson_Lit_Impl0_Sat
  use Type
  clone Robinson_Lit_Impl0_SatInner_Interface as SatInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate sat (self : Type.robinson_lit_lit) (a : Type.robinson_assignments_assignments) = 
    SatInner0.sat_inner self (Model0.model a)
end
module Robinson_Lit_Impl1_LitSat_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone Robinson_Lit_Impl0_Sat_Interface as Sat0
  clone Robinson_Lit_Impl0_Invariant_Interface as Invariant0
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_sat [@cfg:stackify] (self : Type.robinson_lit_lit) (a : Type.robinson_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Sat0.sat self a }
    
end
module Robinson_Lit_Impl1_LitSat
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Lit_Impl0_SatInner as SatInner0
  clone Robinson_Lit_Impl0_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Lit_Impl0_Invariant as Invariant0
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = uint8
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg lit_sat [@cfg:stackify] (self : Type.robinson_lit_lit) (a : Type.robinson_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Sat0.sat self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.robinson_lit_lit;
  var a_2 : Type.robinson_assignments_assignments;
  var _3 : uint8;
  var _4 : uint8;
  var _5 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _6 : usize;
  var _7 : uint8;
  var _8 : uint8;
  var _9 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _10 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    switch (Type.robinson_lit_lit_Lit_polarity self_1)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB1 {
    _9 <- Type.robinson_assignments_assignments_Assignments_0 a_2;
    _10 <- Type.robinson_lit_lit_Lit_idx self_1;
    _8 <- Index0.index _9 _10;
    goto BB4
  }
  BB2 {
    _5 <- Type.robinson_assignments_assignments_Assignments_0 a_2;
    _6 <- Type.robinson_lit_lit_Lit_idx self_1;
    _4 <- Index0.index _5 _6;
    goto BB3
  }
  BB3 {
    _3 <- _4;
    _0 <- _3 = (1 : uint8);
    goto BB5
  }
  BB4 {
    _7 <- _8;
    _0 <- _7 = (0 : uint8);
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Robinson_Lit_Impl1_LitUnset_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone Robinson_Lit_Impl0_Unset_Interface as Unset0
  clone Robinson_Lit_Impl0_Invariant_Interface as Invariant0
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_unset [@cfg:stackify] (self : Type.robinson_lit_lit) (a : Type.robinson_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unset0.unset self a }
    
end
module Robinson_Lit_Impl1_LitUnset
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Lit_Impl0_UnsetInner as UnsetInner0
  clone Robinson_Lit_Impl0_Unset as Unset0 with function Model0.model = Model1.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Lit_Impl0_Invariant as Invariant0
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = uint8
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg lit_unset [@cfg:stackify] (self : Type.robinson_lit_lit) (a : Type.robinson_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unset0.unset self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.robinson_lit_lit;
  var a_2 : Type.robinson_assignments_assignments;
  var _3 : uint8;
  var _4 : uint8;
  var _5 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _6 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _5 <- Type.robinson_assignments_assignments_Assignments_0 a_2;
    _6 <- Type.robinson_lit_lit_Lit_idx self_1;
    _4 <- Index0.index _5 _6;
    goto BB1
  }
  BB1 {
    _3 <- _4;
    _0 <- _3 >= (2 : uint8);
    return _0
  }
  
end
module Robinson_Clause_Impl2_CheckIfUnit_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone Robinson_Clause_Impl1_Sat_Interface as Sat0
  clone Robinson_Clause_Impl1_Unsat_Interface as Unsat0
  clone Robinson_Clause_Impl1_Unit_Interface as Unit0
  clone Robinson_Assignments_Impl1_Complete_Interface as Complete0
  clone Robinson_Clause_Impl1_Invariant_Interface as Invariant2
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant0
  val check_if_unit [@cfg:stackify] (self : Type.robinson_clause_clause) (a : Type.robinson_assignments_assignments) (_f : Type.robinson_formula_formula) : Type.robinson_clause_clausestate
    requires {Invariant0.invariant' a _f}
    requires {Invariant1.invariant' _f}
    requires {Invariant2.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Type.Robinson_Clause_ClauseState_Unknown -> not (Complete0.complete a) }
    ensures { result = Type.Robinson_Clause_ClauseState_Unit -> Unit0.unit self a && not (Complete0.complete a) }
    ensures { result = Type.Robinson_Clause_ClauseState_Unsat -> Unsat0.unsat self a }
    ensures { result = Type.Robinson_Clause_ClauseState_Sat -> Sat0.sat self a }
    
end
module Robinson_Clause_Impl2_CheckIfUnit
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.UInt8
  clone Robinson_Lit_Impl0_SatInner as SatInner1
  clone Robinson_Lit_Impl0_Invariant as Invariant3
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Assignments_Impl0_Model as Model3 with function Model0.model = Model6.model
  clone Robinson_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model3.model
  clone Robinson_Lit_Impl0_UnsatInner as UnsatInner1
  clone Robinson_Lit_Impl0_Unsat as Unsat1 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Lit_Impl0_UnsetInner as UnsetInner0
  clone Robinson_Lit_Impl0_Unset as Unset0 with function Model0.model = Model3.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Clause_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model5 with function Model0.model = Model1.model
  clone Robinson_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Clause_Impl1_Sat as Sat0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model5.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Clause_Impl1_Unsat as Unsat0 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model5.model
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model5.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model5.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Clause_Impl1_Unit as Unit0 with function Model0.model = Model3.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.robinson_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model5.model
  clone Robinson_Logic_Unset as Unset1
  clone Robinson_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model3.model,
  predicate Unset0.unset = Unset1.unset
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = Type.robinson_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.robinson_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.robinson_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.robinson_lit_lit
  clone Robinson_Lit_Impl0_Sat as Sat1 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.robinson_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.robinson_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model1.model
  clone Robinson_Lit_Impl1_LitUnset_Interface as LitUnset0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Unset0.unset = Unset0.unset
  clone Robinson_Lit_Impl1_LitSat_Interface as LitSat0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Sat0.sat = Sat1.sat
  let rec cfg check_if_unit [@cfg:stackify] (self : Type.robinson_clause_clause) (a : Type.robinson_assignments_assignments) (_f : Type.robinson_formula_formula) : Type.robinson_clause_clausestate
    requires {Invariant0.invariant' a _f}
    requires {Invariant1.invariant' _f}
    requires {Invariant2.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Type.Robinson_Clause_ClauseState_Unknown -> not (Complete0.complete a) }
    ensures { result = Type.Robinson_Clause_ClauseState_Unit -> Unit0.unit self a && not (Complete0.complete a) }
    ensures { result = Type.Robinson_Clause_ClauseState_Unsat -> Unsat0.unsat self a }
    ensures { result = Type.Robinson_Clause_ClauseState_Sat -> Sat0.sat self a }
    
   = 
  var _0 : Type.robinson_clause_clausestate;
  var self_1 : Type.robinson_clause_clause;
  var a_2 : Type.robinson_assignments_assignments;
  var _f_3 : Type.robinson_formula_formula;
  var i_4 : usize;
  var _k_5 : usize;
  var unassigned_6 : usize;
  var _7 : ();
  var _8 : ();
  var _9 : bool;
  var _10 : usize;
  var _11 : usize;
  var _12 : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global);
  var lit_13 : Type.robinson_lit_lit;
  var _14 : Type.robinson_lit_lit;
  var _15 : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global);
  var _16 : usize;
  var _17 : ();
  var _18 : bool;
  var _19 : Type.robinson_lit_lit;
  var _20 : Type.robinson_assignments_assignments;
  var _21 : ();
  var _22 : bool;
  var _23 : Type.robinson_lit_lit;
  var _24 : Type.robinson_assignments_assignments;
  var _25 : ();
  var _26 : bool;
  var _27 : usize;
  var _28 : ();
  var _29 : usize;
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : bool;
  var _34 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : usize);
    _k_5 <- (0 : usize);
    unassigned_6 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant loop_invariant { 0 <= UInt64.to_int i_4 && UInt64.to_int i_4 <= Seq.length (Model1.model (Type.robinson_clause_clause_Clause_rest self_1)) };
    invariant unass { UInt64.to_int unassigned_6 <= 1 };
    invariant k_is_unass { UInt64.to_int unassigned_6 = 0 || Unset0.unset (Seq.get (Model2.model self_1) (UInt64.to_int _k_5)) a_2 };
    invariant kk { UInt64.to_int unassigned_6 > 0 -> Unset0.unset (Seq.get (Model2.model self_1) (UInt64.to_int _k_5)) a_2 };
    invariant not_sat { forall j : (int) . 0 <= j && j < UInt64.to_int i_4 -> Unsat1.unsat (Seq.get (Model2.model self_1) j) a_2 || Unset0.unset (Seq.get (Model2.model self_1) j) a_2 && UInt64.to_int unassigned_6 >= 1 };
    invariant k_in_bounds { UInt64.to_int unassigned_6 = 0 || 0 <= UInt64.to_int _k_5 && UInt64.to_int _k_5 < Seq.length (Model2.model self_1) };
    invariant k_only { UInt64.to_int unassigned_6 = 1 -> (forall j : (int) . 0 <= j && j < UInt64.to_int i_4 && j <> UInt64.to_int _k_5 -> not (Unset0.unset (Seq.get (Model2.model self_1) j) a_2)) };
    invariant k_unset { UInt64.to_int unassigned_6 = 0 -> UInt64.to_int _k_5 = 0 };
    _10 <- i_4;
    _12 <- Type.robinson_clause_clause_Clause_rest self_1;
    _11 <- Len0.len _12;
    goto BB2
  }
  BB2 {
    _9 <- _10 < _11;
    switch (_9)
      | False -> goto BB14
      | _ -> goto BB3
      end
  }
  BB3 {
    _15 <- Type.robinson_clause_clause_Clause_rest self_1;
    _16 <- i_4;
    _14 <- Index0.index _15 _16;
    goto BB4
  }
  BB4 {
    lit_13 <- _14;
    _19 <- lit_13;
    _20 <- a_2;
    _18 <- LitSat0.lit_sat _19 _20;
    goto BB5
  }
  BB5 {
    switch (_18)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    _0 <- Type.Robinson_Clause_ClauseState_Sat;
    goto BB18
  }
  BB7 {
    _23 <- lit_13;
    _24 <- a_2;
    _22 <- LitUnset0.lit_unset _23 _24;
    goto BB8
  }
  BB8 {
    switch (_22)
      | False -> goto BB12
      | _ -> goto BB9
      end
  }
  BB9 {
    _27 <- unassigned_6;
    _26 <- _27 > (0 : usize);
    switch (_26)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    _0 <- Type.Robinson_Clause_ClauseState_Unknown;
    goto BB18
  }
  BB11 {
    _25 <- ();
    _29 <- i_4;
    _k_5 <- _29;
    unassigned_6 <- unassigned_6 + (1 : usize);
    _17 <- ();
    goto BB13
  }
  BB12 {
    _17 <- ();
    goto BB13
  }
  BB13 {
    i_4 <- i_4 + (1 : usize);
    _8 <- ();
    goto BB1
  }
  BB14 {
    _7 <- ();
    _34 <- unassigned_6;
    _33 <- _34 = (1 : usize);
    switch (_33)
      | False -> goto BB16
      | _ -> goto BB15
      end
  }
  BB15 {
    _0 <- Type.Robinson_Clause_ClauseState_Unit;
    goto BB17
  }
  BB16 {
    _0 <- Type.Robinson_Clause_ClauseState_Unsat;
    goto BB17
  }
  BB17 {
    goto BB19
  }
  BB18 {
    goto BB19
  }
  BB19 {
    return _0
  }
  
end
module Robinson_Clause_Impl2_GetUnit_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Robinson_Clause_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.robinson_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Robinson_Clause_Impl1_Unit_Interface as Unit0
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant0
  val get_unit [@cfg:stackify] (self : Type.robinson_clause_clause) (a : Type.robinson_assignments_assignments) (_f : Type.robinson_formula_formula) : Type.robinson_lit_lit
    requires {Invariant0.invariant' a _f}
    requires {Invariant1.invariant' _f}
    requires {Unit0.unit self a}
    ensures { Unset0.unset (Seq.get (Model0.model a) (UInt64.to_int (Type.robinson_lit_lit_Lit_idx result))) }
    ensures { UInt64.to_int (Type.robinson_lit_lit_Lit_idx result) < Seq.length (Model0.model a) }
    ensures { exists j : (int) . 0 <= j && j < Seq.length (Model1.model self) && Seq.get (Model1.model self) j = result }
    
end
module Robinson_Clause_Impl2_GetUnit
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Robinson_Lit_Impl0_SatInner as SatInner1
  clone Robinson_Lit_Impl0_Invariant as Invariant3
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model4 with function Model0.model = Model6.model
  clone Robinson_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model4.model
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Assignments_Impl0_Model as Model2 with function Model0.model = Model5.model
  clone Robinson_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model2.model
  clone Robinson_Lit_Impl0_UnsetInner as UnsetInner0
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model4.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Clause_Impl1_Unit as Unit0 with function Model0.model = Model2.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone Robinson_Lit_Impl0_Unset as Unset1 with function Model0.model = Model2.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Clause_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.robinson_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model4.model
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = Type.robinson_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.robinson_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.robinson_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.robinson_lit_lit
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.robinson_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model6.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.robinson_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model6.model
  clone Robinson_Lit_Impl1_LitUnset_Interface as LitUnset0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Unset0.unset = Unset1.unset
  let rec cfg get_unit [@cfg:stackify] (self : Type.robinson_clause_clause) (a : Type.robinson_assignments_assignments) (_f : Type.robinson_formula_formula) : Type.robinson_lit_lit
    requires {Invariant0.invariant' a _f}
    requires {Invariant1.invariant' _f}
    requires {Unit0.unit self a}
    ensures { Unset0.unset (Seq.get (Model0.model a) (UInt64.to_int (Type.robinson_lit_lit_Lit_idx result))) }
    ensures { UInt64.to_int (Type.robinson_lit_lit_Lit_idx result) < Seq.length (Model0.model a) }
    ensures { exists j : (int) . 0 <= j && j < Seq.length (Model1.model self) && Seq.get (Model1.model self) j = result }
    
   = 
  var _0 : Type.robinson_lit_lit;
  var self_1 : Type.robinson_clause_clause;
  var a_2 : Type.robinson_assignments_assignments;
  var _f_3 : Type.robinson_formula_formula;
  var _4 : ();
  var i_5 : usize;
  var _6 : ();
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global);
  var lit_12 : Type.robinson_lit_lit;
  var _13 : Type.robinson_lit_lit;
  var _14 : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global);
  var _15 : usize;
  var _16 : ();
  var _17 : bool;
  var _18 : Type.robinson_lit_lit;
  var _19 : Type.robinson_assignments_assignments;
  var _20 : ();
  var _21 : ();
  var _22 : ();
  var _23 : ();
  var _24 : ();
  {
    self_1 <- self;
    a_2 <- a;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    i_5 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant not_unset { forall j : (int) . 0 <= j && j < UInt64.to_int i_5 -> not (Unset1.unset (Seq.get (Model1.model self_1) j) a_2) };
    _9 <- i_5;
    _11 <- Type.robinson_clause_clause_Clause_rest self_1;
    _10 <- Len0.len _11;
    goto BB2
  }
  BB2 {
    _8 <- _9 < _10;
    switch (_8)
      | False -> goto BB8
      | _ -> goto BB3
      end
  }
  BB3 {
    _14 <- Type.robinson_clause_clause_Clause_rest self_1;
    _15 <- i_5;
    _13 <- Index0.index _14 _15;
    goto BB4
  }
  BB4 {
    lit_12 <- _13;
    _18 <- lit_12;
    _19 <- a_2;
    _17 <- LitUnset0.lit_unset _18 _19;
    goto BB5
  }
  BB5 {
    switch (_17)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    _0 <- lit_12;
    return _0
  }
  BB7 {
    _16 <- ();
    i_5 <- i_5 + (1 : usize);
    _7 <- ();
    goto BB1
  }
  BB8 {
    _6 <- ();
    absurd
  }
  
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_ResolveElswhere as ResolveElswhere0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_InBounds as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone Alloc_Vec_Impl16_Output as Output1 with type t = t, type i = i, type a = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SliceIndexSpec_HasValue as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output1.output
end
module Robinson_Assignments_Impl2_UnitPropOnce_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use Type
  use prelude.Prelude
  clone Robinson_Assignments_Impl1_Compatible_Interface as Compatible0
  clone Robinson_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Robinson_Clause_Impl1_Unit_Interface as Unit0
  clone Robinson_Clause_Impl1_Sat_Interface as Sat0
  clone Robinson_Clause_Impl1_Unsat_Interface as Unsat0
  clone Robinson_Assignments_Impl0_Model_Interface as Model2
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Robinson_Assignments_Impl1_Complete_Interface as Complete0
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  val unit_prop_once [@cfg:stackify] (self : borrowed (Type.robinson_assignments_assignments)) (i : usize) (f : Type.robinson_formula_formula) : Type.robinson_clause_clausestate
    requires {0 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model0.model (Type.robinson_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' f}
    requires {Invariant1.invariant' ( * self) f}
    ensures { Complete0.complete ( * self) ->  * self =  ^ self && (result = Type.Robinson_Clause_ClauseState_Unsat || result = Type.Robinson_Clause_ClauseState_Sat) }
    ensures { result = Type.Robinson_Clause_ClauseState_Unknown -> Model1.model self = Model2.model ( ^ self) && not (Complete0.complete ( ^ self)) }
    ensures { result = Type.Robinson_Clause_ClauseState_Unsat -> Unsat0.unsat (Seq.get (Model0.model (Type.robinson_formula_formula_Formula_clauses f)) (UInt64.to_int i)) ( ^ self) && Model1.model self = Model2.model ( ^ self) }
    ensures { result = Type.Robinson_Clause_ClauseState_Sat -> Sat0.sat (Seq.get (Model0.model (Type.robinson_formula_formula_Formula_clauses f)) (UInt64.to_int i)) ( ^ self) && Model1.model self = Model2.model ( ^ self) }
    ensures { result = Type.Robinson_Clause_ClauseState_Unit -> Unit0.unit (Seq.get (Model0.model (Type.robinson_formula_formula_Formula_clauses f)) (UInt64.to_int i)) ( * self) && not (Complete0.complete ( * self)) }
    ensures { EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { Invariant1.invariant' ( ^ self) f }
    
end
module Robinson_Assignments_Impl2_UnitPropOnce
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model6 with function Model0.model = Model7.model
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model6.model
  clone Robinson_Lit_Impl0_Invariant as Invariant3
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model6.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Robinson_Logic_Neg as Neg0
  clone Robinson_Logic_Pos as Pos0
  clone Robinson_Lit_Impl0_UnsetInner as UnsetInner0
  clone Robinson_Clause_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = Type.robinson_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model6.model
  clone Robinson_Lit_Impl0_SatInner as SatInner1
  clone Robinson_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model6.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Assignments_AssignmentsInvariant as AssignmentsInvariant0
  clone Robinson_Logic_FlipV as FlipV0
  clone Robinson_Lit_Impl0_UnsatInner as UnsatInner1
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Logic_BoolToAssignedstate as BoolToAssignedstate0 with axiom .
  clone Robinson_Logic_LemmaCorrectPolarityMakesClauseSat as LemmaCorrectPolarityMakesClauseSat0 with function Model0.model = Model6.model,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, axiom .
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model3 with type t = borrowed (Type.robinson_assignments_assignments)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Assignments_Impl0_Model as Model2 with function Model0.model = Model5.model
  clone Robinson_Lit_Impl0_Unset as Unset0 with function Model0.model = Model2.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Clause_Impl1_Unit as Unit0 with function Model0.model = Model2.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone Robinson_Clause_Impl1_Sat as Sat0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Clause_Impl1_Unsat as Unsat0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone Robinson_Logic_Unset as Unset1
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset1.unset
  clone Robinson_Logic_LemmaIncorrectPolarityMakesClauseUnsat as LemmaIncorrectPolarityMakesClauseUnsat0 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner, predicate Invariant0.invariant' = Invariant2.invariant',
  predicate SatInner0.sat_inner = SatInner1.sat_inner, predicate SatInner1.sat_inner = SatInner0.sat_inner,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner, predicate Unset0.unset = Unset1.unset,
  function FlipV0.flip_v = FlipV0.flip_v, predicate UnsatInner1.unsat_inner = UnsatInner0.unsat_inner, axiom .
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset1.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model2.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Robinson_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model2.model,
  predicate Unset0.unset = Unset1.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl1_SatInner as SatInner2 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Logic_LemmaExtensionsUnsatBaseUnsat as LemmaExtensionsUnsatBaseUnsat0 with function Pos0.pos = Pos0.pos,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  function Neg0.neg = Neg0.neg, predicate Unset0.unset = Unset1.unset,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner, axiom .
  clone Robinson_Logic_LemmaExtensionSatBaseSat as LemmaExtensionSatBaseSat0 with predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  predicate Unset0.unset = Unset1.unset, axiom .
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model2.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner2 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Clause_Impl1_InFormula as InFormula0 with function Model0.model = Model0.model
  clone Robinson_Logic_LemmaNotSatClauseImpliesUnsatFormula as LemmaNotSatClauseImpliesUnsatFormula0 with predicate InFormula0.in_formula = InFormula0.in_formula,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner,
  predicate UnsatInner1.unsat_inner = UnsatInner2.unsat_inner, axiom .
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Robinson_Logic_LemmaNotSatFormulaImpliesUnsatFormula as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  axiom .
  clone Robinson_Logic_LemmaUnitForces as LemmaUnitForces0 with function FlipV0.flip_v = FlipV0.flip_v,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  predicate Unset0.unset = Unset1.unset, predicate Invariant0.invariant' = Invariant0.invariant',
  function LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant, axiom .
  clone Robinson_Logic_LemmaUnitWrongPolarityUnsatFormula as LemmaUnitWrongPolarityUnsatFormula0 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate Invariant0.invariant' = Invariant2.invariant', predicate InFormula0.in_formula = InFormula0.in_formula,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner, predicate Unset0.unset = Unset1.unset,
  predicate Invariant1.invariant' = Invariant0.invariant', function FlipV0.flip_v = FlipV0.flip_v,
  predicate UnsatInner1.unsat_inner = UnsatInner2.unsat_inner,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  function LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula,
  function LemmaCorrectPolarityMakesClauseSat0.lemma_correct_polarity_makes_clause_sat = LemmaCorrectPolarityMakesClauseSat0.lemma_correct_polarity_makes_clause_sat,
  function LemmaIncorrectPolarityMakesClauseUnsat0.lemma_incorrect_polarity_makes_clause_unsat = LemmaIncorrectPolarityMakesClauseUnsat0.lemma_incorrect_polarity_makes_clause_unsat,
  function LemmaNotSatClauseImpliesUnsatFormula0.lemma_not_sat_clause_implies_unsat_formula = LemmaNotSatClauseImpliesUnsatFormula0.lemma_not_sat_clause_implies_unsat_formula,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate SatInner1.sat_inner = SatInner1.sat_inner,
  predicate UnsatInner2.unsat_inner = UnsatInner0.unsat_inner, axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = uint8
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy3 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = uint8
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.robinson_assignments_assignments
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = Type.robinson_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.robinson_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.robinson_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.robinson_clause_clause
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.robinson_assignments_assignments),
  function Model0.model = Model3.model
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model5.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue1.has_value, type Output0.output = Output1.output
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.robinson_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Robinson_Clause_Impl2_GetUnit_Interface as GetUnit0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant0.invariant', predicate Unit0.unit = Unit0.unit,
  function Model0.model = Model8.model, predicate Unset0.unset = Unset1.unset, function Model1.model = Model4.model
  clone Robinson_Clause_Impl2_CheckIfUnit_Interface as CheckIfUnit0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant0.invariant', function Model0.model = Model8.model,
  predicate Invariant2.invariant' = Invariant2.invariant', predicate Complete0.complete = Complete0.complete,
  predicate Unit0.unit = Unit0.unit, predicate Unsat0.unsat = Unsat0.unsat, predicate Sat0.sat = Sat0.sat
  let rec cfg unit_prop_once [@cfg:stackify] (self : borrowed (Type.robinson_assignments_assignments)) (i : usize) (f : Type.robinson_formula_formula) : Type.robinson_clause_clausestate
    requires {0 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model0.model (Type.robinson_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' f}
    requires {Invariant1.invariant' ( * self) f}
    ensures { Complete0.complete ( * self) ->  * self =  ^ self && (result = Type.Robinson_Clause_ClauseState_Unsat || result = Type.Robinson_Clause_ClauseState_Sat) }
    ensures { result = Type.Robinson_Clause_ClauseState_Unknown -> Model1.model self = Model2.model ( ^ self) && not (Complete0.complete ( ^ self)) }
    ensures { result = Type.Robinson_Clause_ClauseState_Unsat -> Unsat0.unsat (Seq.get (Model0.model (Type.robinson_formula_formula_Formula_clauses f)) (UInt64.to_int i)) ( ^ self) && Model1.model self = Model2.model ( ^ self) }
    ensures { result = Type.Robinson_Clause_ClauseState_Sat -> Sat0.sat (Seq.get (Model0.model (Type.robinson_formula_formula_Formula_clauses f)) (UInt64.to_int i)) ( ^ self) && Model1.model self = Model2.model ( ^ self) }
    ensures { result = Type.Robinson_Clause_ClauseState_Unit -> Unit0.unit (Seq.get (Model0.model (Type.robinson_formula_formula_Formula_clauses f)) (UInt64.to_int i)) ( * self) && not (Complete0.complete ( * self)) }
    ensures { EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { Invariant1.invariant' ( ^ self) f }
    
   = 
  var _0 : Type.robinson_clause_clausestate;
  var self_1 : borrowed (Type.robinson_assignments_assignments);
  var i_2 : usize;
  var f_3 : Type.robinson_formula_formula;
  var clause_4 : Type.robinson_clause_clause;
  var _5 : Type.robinson_clause_clause;
  var _6 : Type.alloc_vec_vec (Type.robinson_clause_clause) (Type.alloc_alloc_global);
  var _7 : usize;
  var _old_a_8 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.robinson_assignments_assignments));
  var _9 : borrowed (Type.robinson_assignments_assignments);
  var _10 : borrowed (Type.robinson_assignments_assignments);
  var _11 : ();
  var _12 : Type.robinson_clause_clausestate;
  var _13 : Type.robinson_clause_clause;
  var _14 : Type.robinson_assignments_assignments;
  var _15 : Type.robinson_formula_formula;
  var _16 : isize;
  var _17 : ();
  var lit_18 : Type.robinson_lit_lit;
  var _19 : Type.robinson_clause_clause;
  var _20 : Type.robinson_assignments_assignments;
  var _21 : Type.robinson_formula_formula;
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : ();
  var _26 : ();
  var _27 : bool;
  var _28 : borrowed uint8;
  var _29 : borrowed (Type.alloc_vec_vec uint8 (Type.alloc_alloc_global));
  var _30 : usize;
  var _31 : borrowed uint8;
  var _32 : borrowed (Type.alloc_vec_vec uint8 (Type.alloc_alloc_global));
  var _33 : usize;
  var _34 : ();
  var _35 : ();
  var _36 : ();
  var o_37 : Type.robinson_clause_clausestate;
  var _38 : ();
  {
    self_1 <- self;
    i_2 <- i;
    f_3 <- f;
    goto BB0
  }
  BB0 {
    _6 <- Type.robinson_formula_formula_Formula_clauses f_3;
    _7 <- i_2;
    _5 <- Index0.index _6 _7;
    goto BB1
  }
  BB1 {
    clause_4 <- _5;
    _10 <- self_1;
    _9 <- _10;
    _old_a_8 <- Record0.record _9;
    goto BB2
  }
  BB2 {
    assert {  ^ self_1 =  ^ Model3.model _old_a_8 };
    _11 <- ();
    _13 <- clause_4;
    _14 <-  * self_1;
    _15 <- f_3;
    _12 <- CheckIfUnit0.check_if_unit _13 _14 _15;
    goto BB3
  }
  BB3 {
    switch (_12)
      | Type.Robinson_Clause_ClauseState_Unit -> goto BB5
      | _ -> goto BB4
      end
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    o_37 <- _12;
    _0 <- o_37;
    goto BB12
  }
  BB5 {
    _19 <- clause_4;
    _20 <-  * self_1;
    _21 <- f_3;
    lit_18 <- GetUnit0.get_unit _19 _20 _21;
    goto BB6
  }
  BB6 {
    assert { Invariant2.invariant' clause_4 (Seq.length (Model1.model self_1)) };
    _22 <- ();
    assert { let _ = LemmaUnitWrongPolarityUnsatFormula0.lemma_unit_wrong_polarity_unsat_formula clause_4 f_3 (Model1.model self_1) (UInt64.to_int (Type.robinson_lit_lit_Lit_idx lit_18)) (BoolToAssignedstate0.bool_to_assignedstate (Type.robinson_lit_lit_Lit_polarity lit_18)) in true };
    _23 <- ();
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model4.model clause_4) && not (UInt64.to_int (Type.robinson_lit_lit_Lit_idx (Seq.get (Model4.model clause_4) j)) = UInt64.to_int (Type.robinson_lit_lit_Lit_idx lit_18)) -> not (Unset0.unset (Seq.get (Model4.model clause_4) j) ( * self_1)) };
    _24 <- ();
    assert { let _ = LemmaUnitForces0.lemma_unit_forces f_3 (Model1.model self_1) (UInt64.to_int (Type.robinson_lit_lit_Lit_idx lit_18)) (BoolToAssignedstate0.bool_to_assignedstate (Type.robinson_lit_lit_Lit_polarity lit_18)) in true };
    _25 <- ();
    _27 <- Type.robinson_lit_lit_Lit_polarity lit_18;
    switch (_27)
      | False -> goto BB9
      | _ -> goto BB7
      end
  }
  BB7 {
    _29 <- borrow_mut (Type.robinson_assignments_assignments_Assignments_0 ( * self_1));
    self_1 <- { self_1 with current = (let Type.Robinson_Assignments_Assignments a b =  * self_1 in Type.Robinson_Assignments_Assignments ( ^ _29) b) };
    assume { Resolve0.resolve self_1 };
    _30 <- Type.robinson_lit_lit_Lit_idx lit_18;
    _28 <- IndexMut0.index_mut _29 _30;
    goto BB8
  }
  BB8 {
    _28 <- { _28 with current = (1 : uint8) };
    assume { Resolve1.resolve _28 };
    _26 <- ();
    goto BB11
  }
  BB9 {
    _32 <- borrow_mut (Type.robinson_assignments_assignments_Assignments_0 ( * self_1));
    self_1 <- { self_1 with current = (let Type.Robinson_Assignments_Assignments a b =  * self_1 in Type.Robinson_Assignments_Assignments ( ^ _32) b) };
    assume { Resolve0.resolve self_1 };
    _33 <- Type.robinson_lit_lit_Lit_idx lit_18;
    _31 <- IndexMut0.index_mut _32 _33;
    goto BB10
  }
  BB10 {
    _31 <- { _31 with current = (0 : uint8) };
    assume { Resolve1.resolve _31 };
    _26 <- ();
    goto BB11
  }
  BB11 {
    assert { let _ = LemmaExtensionSatBaseSat0.lemma_extension_sat_base_sat f_3 (Model1.model (Model3.model _old_a_8)) (UInt64.to_int (Type.robinson_lit_lit_Lit_idx lit_18)) (BoolToAssignedstate0.bool_to_assignedstate (Type.robinson_lit_lit_Lit_polarity lit_18)) in true };
    _34 <- ();
    assert { let _ = LemmaExtensionsUnsatBaseUnsat0.lemma_extensions_unsat_base_unsat (Model1.model (Model3.model _old_a_8)) (UInt64.to_int (Type.robinson_lit_lit_Lit_idx lit_18)) f_3 in true };
    _35 <- ();
    assert {  ^ self_1 =  ^ Model3.model _old_a_8 };
    _36 <- ();
    _0 <- Type.Robinson_Clause_ClauseState_Unit;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Robinson_Formula_Impl1_Sat_Interface
  use Type
  predicate sat (self : Type.robinson_formula_formula) (a : Type.robinson_assignments_assignments)
end
module Robinson_Formula_Impl1_Sat
  use Type
  clone Robinson_Formula_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate sat (self : Type.robinson_formula_formula) (a : Type.robinson_assignments_assignments) = 
    SatInner0.sat_inner self (Model0.model a)
end
module Robinson_Formula_Impl1_Unsat_Interface
  use Type
  predicate unsat (self : Type.robinson_formula_formula) (a : Type.robinson_assignments_assignments)
end
module Robinson_Formula_Impl1_Unsat
  use Type
  clone Robinson_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate unsat (self : Type.robinson_formula_formula) (a : Type.robinson_assignments_assignments) = 
    UnsatInner0.unsat_inner self (Model0.model a)
end
module Robinson_Clause_Impl1_Unknown_Interface
  use Type
  predicate unknown (self : Type.robinson_clause_clause) (a : Type.robinson_assignments_assignments)
end
module Robinson_Clause_Impl1_Unknown
  use Type
  clone Robinson_Clause_Impl1_Unsat_Interface as Unsat0
  clone Robinson_Clause_Impl1_Sat_Interface as Sat0
  predicate unknown (self : Type.robinson_clause_clause) (a : Type.robinson_assignments_assignments) = 
    not (Sat0.sat self a) && not (Unsat0.unsat self a)
end
module Robinson_Assignments_Impl2_UnitPropagate_Interface
  use Type
  use prelude.Prelude
  clone Robinson_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Robinson_Assignments_Impl1_Compatible_Interface as Compatible0
  clone Robinson_Formula_Impl1_Unsat_Interface as Unsat0
  clone Robinson_Formula_Impl1_Sat_Interface as Sat0
  clone Robinson_Assignments_Impl1_Complete_Interface as Complete0
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant0
  val unit_propagate [@cfg:stackify] (self : borrowed (Type.robinson_assignments_assignments)) (f : Type.robinson_formula_formula) : Type.robinson_clause_clausestate
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { Complete0.complete ( * self) ->  * self =  ^ self && (result = Type.Robinson_Clause_ClauseState_Unsat || Sat0.sat f ( * self)) }
    ensures { match (result) with
      | Type.Robinson_Clause_ClauseState_Sat -> Sat0.sat f ( ^ self)
      | Type.Robinson_Clause_ClauseState_Unsat -> Unsat0.unsat f ( ^ self)
      | Type.Robinson_Clause_ClauseState_Unknown -> not (Complete0.complete ( ^ self))
      | Type.Robinson_Clause_ClauseState_Unit -> not (Complete0.complete ( * self))
      end }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete f ( ^ self) = EventuallySatComplete0.eventually_sat_complete f ( * self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
end
module Robinson_Assignments_Impl2_UnitPropagate
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model4.model
  clone Robinson_Lit_Impl0_Invariant as Invariant3
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Robinson_Lit_Impl0_UnsatInner as UnsatInner2
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model4.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Robinson_Lit_Impl0_SatInner as SatInner2
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Lit_Impl0_UnsetInner as UnsetInner0
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner1.sat_inner, function Model0.model = Model4.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Assignments_Impl0_Model as Model2 with function Model0.model = Model3.model
  clone Robinson_Clause_Impl1_Unsat as Unsat1 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Clause_Impl1_Sat as Sat1 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Clause_Impl1_Unknown as Unknown0 with predicate Sat0.sat = Sat1.sat,
  predicate Unsat0.unsat = Unsat1.unsat
  clone Robinson_Clause_Impl1_Unit as Unit0 with function Model0.model = Model2.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone Robinson_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = borrowed (Type.robinson_assignments_assignments)
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model2.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Robinson_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model2.model,
  predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model2.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Formula_Impl1_Sat as Sat0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.robinson_assignments_assignments
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model6 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.robinson_assignments_assignments),
  function Model0.model = Model0.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model
  clone Robinson_Assignments_Impl2_UnitPropOnce_Interface as UnitPropOnce0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant1.invariant', predicate Invariant1.invariant' = Invariant0.invariant',
  predicate Complete0.complete = Complete0.complete, function Model1.model = Model6.model,
  function Model2.model = Model2.model, predicate Unsat0.unsat = Unsat1.unsat, predicate Sat0.sat = Sat1.sat,
  predicate Unit0.unit = Unit0.unit,
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
  predicate Compatible0.compatible = Compatible0.compatible
  let rec cfg unit_propagate [@cfg:stackify] (self : borrowed (Type.robinson_assignments_assignments)) (f : Type.robinson_formula_formula) : Type.robinson_clause_clausestate
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { Complete0.complete ( * self) ->  * self =  ^ self && (result = Type.Robinson_Clause_ClauseState_Unsat || Sat0.sat f ( * self)) }
    ensures { match (result) with
      | Type.Robinson_Clause_ClauseState_Sat -> Sat0.sat f ( ^ self)
      | Type.Robinson_Clause_ClauseState_Unsat -> Unsat0.unsat f ( ^ self)
      | Type.Robinson_Clause_ClauseState_Unknown -> not (Complete0.complete ( ^ self))
      | Type.Robinson_Clause_ClauseState_Unit -> not (Complete0.complete ( * self))
      end }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete f ( ^ self) = EventuallySatComplete0.eventually_sat_complete f ( * self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
   = 
  var _0 : Type.robinson_clause_clausestate;
  var self_1 : borrowed (Type.robinson_assignments_assignments);
  var f_2 : Type.robinson_formula_formula;
  var _3 : ();
  var _old_a_4 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.robinson_assignments_assignments));
  var _5 : borrowed (Type.robinson_assignments_assignments);
  var _6 : borrowed (Type.robinson_assignments_assignments);
  var i_7 : usize;
  var out_8 : Type.robinson_clause_clausestate;
  var _9 : ();
  var _10 : ();
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : Type.alloc_vec_vec (Type.robinson_clause_clause) (Type.alloc_alloc_global);
  var _15 : ();
  var _16 : Type.robinson_clause_clausestate;
  var _17 : borrowed (Type.robinson_assignments_assignments);
  var _18 : usize;
  var _19 : Type.robinson_formula_formula;
  var _20 : isize;
  var _21 : ();
  var _22 : Type.robinson_clause_clausestate;
  var _23 : isize;
  var _24 : Type.robinson_clause_clausestate;
  var _25 : ();
  var _26 : ();
  var _27 : ();
  {
    self_1 <- self;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    _6 <- self_1;
    _5 <- _6;
    _old_a_4 <- Record0.record _5;
    goto BB1
  }
  BB1 {
    i_7 <- (0 : usize);
    out_8 <- Type.Robinson_Clause_ClauseState_Sat;
    goto BB2
  }
  BB2 {
    invariant assignment_invariant { Invariant0.invariant' ( * self_1) f_2 };
    invariant proph {  ^ self_1 =  ^ Model0.model _old_a_4 };
    invariant maintains_compat { Compatible0.compatible ( * Model0.model _old_a_4) ( * self_1) };
    invariant maintains_sat { EventuallySatComplete0.eventually_sat_complete f_2 ( * Model0.model _old_a_4) = EventuallySatComplete0.eventually_sat_complete f_2 ( * self_1) };
    invariant out_not_unsat { not (out_8 = Type.Robinson_Clause_ClauseState_Unsat) };
    invariant inv { Complete0.complete ( * Model0.model _old_a_4) ->  * Model0.model _old_a_4 =  * self_1 && (forall j : (int) . 0 <= j && j < UInt64.to_int i_7 -> not (Unknown0.unknown (Seq.get (Model1.model (Type.robinson_formula_formula_Formula_clauses f_2)) j) ( * self_1)) && not (Unit0.unit (Seq.get (Model1.model (Type.robinson_formula_formula_Formula_clauses f_2)) j) ( * self_1)) && Sat1.sat (Seq.get (Model1.model (Type.robinson_formula_formula_Formula_clauses f_2)) j) ( * self_1)) };
    invariant inv2 { out_8 = Type.Robinson_Clause_ClauseState_Sat -> (forall j : (int) . 0 <= j && j < UInt64.to_int i_7 -> not (Unsat1.unsat (Seq.get (Model1.model (Type.robinson_formula_formula_Formula_clauses f_2)) j) ( * self_1)) && not (Unknown0.unknown (Seq.get (Model1.model (Type.robinson_formula_formula_Formula_clauses f_2)) j) ( * self_1)) && not (Unit0.unit (Seq.get (Model1.model (Type.robinson_formula_formula_Formula_clauses f_2)) j) ( * self_1)) && Sat1.sat (Seq.get (Model1.model (Type.robinson_formula_formula_Formula_clauses f_2)) j) ( * self_1)) };
    invariant inv3 { out_8 = Type.Robinson_Clause_ClauseState_Unit -> not (Complete0.complete ( * Model0.model _old_a_4)) };
    invariant inv4 { out_8 = Type.Robinson_Clause_ClauseState_Unknown -> not (Complete0.complete ( * self_1)) };
    _12 <- i_7;
    _14 <- Type.robinson_formula_formula_Formula_clauses f_2;
    _13 <- Len0.len _14;
    goto BB3
  }
  BB3 {
    _11 <- _12 < _13;
    switch (_11)
      | False -> goto BB14
      | _ -> goto BB4
      end
  }
  BB4 {
    _17 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _17) };
    _18 <- i_7;
    _19 <- f_2;
    _16 <- UnitPropOnce0.unit_prop_once _17 _18 _19;
    goto BB5
  }
  BB5 {
    switch (_16)
      | Type.Robinson_Clause_ClauseState_Sat -> goto BB8
      | Type.Robinson_Clause_ClauseState_Unsat -> goto BB9
      | Type.Robinson_Clause_ClauseState_Unit -> goto BB10
      | Type.Robinson_Clause_ClauseState_Unknown -> goto BB6
      end
  }
  BB6 {
    switch (out_8)
      | Type.Robinson_Clause_ClauseState_Sat -> goto BB12
      | _ -> goto BB11
      end
  }
  BB7 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB8 {
    _15 <- ();
    goto BB13
  }
  BB9 {
    assume { Resolve0.resolve self_1 };
    _0 <- Type.Robinson_Clause_ClauseState_Unsat;
    goto BB15
  }
  BB10 {
    _22 <- Type.Robinson_Clause_ClauseState_Unit;
    out_8 <- _22;
    _15 <- ();
    goto BB13
  }
  BB11 {
    _15 <- ();
    goto BB13
  }
  BB12 {
    _24 <- Type.Robinson_Clause_ClauseState_Unknown;
    out_8 <- _24;
    _15 <- ();
    goto BB13
  }
  BB13 {
    i_7 <- i_7 + (1 : usize);
    _10 <- ();
    goto BB2
  }
  BB14 {
    assume { Resolve0.resolve self_1 };
    _9 <- ();
    _0 <- out_8;
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module Robinson_Assignments_Impl2_DoUnitPropagation_Interface
  use Type
  use prelude.Prelude
  clone Robinson_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Robinson_Assignments_Impl1_Compatible_Interface as Compatible0
  clone Robinson_Formula_Impl1_Unsat_Interface as Unsat0
  clone Robinson_Formula_Impl1_Sat_Interface as Sat0
  clone Robinson_Assignments_Impl1_Complete_Interface as Complete0
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant0
  val do_unit_propagation [@cfg:stackify] (self : borrowed (Type.robinson_assignments_assignments)) (f : Type.robinson_formula_formula) : Type.core_option_option bool
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { result = Type.Core_Option_Option_None -> not (Complete0.complete ( ^ self)) }
    ensures { result = Type.Core_Option_Option_Some true -> Sat0.sat f ( ^ self) }
    ensures { result = Type.Core_Option_Option_Some false -> Unsat0.unsat f ( ^ self) }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
end
module Robinson_Assignments_Impl2_DoUnitPropagation
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model4.model
  clone Robinson_Lit_Impl0_UnsatInner as UnsatInner2
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model4.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Robinson_Lit_Impl0_SatInner as SatInner2
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Lit_Impl0_Invariant as Invariant3
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Robinson_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = borrowed (Type.robinson_assignments_assignments)
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model1.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Robinson_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model1.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Formula_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.robinson_assignments_assignments
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.robinson_assignments_assignments),
  function Model0.model = Model0.model
  clone Robinson_Assignments_Impl2_UnitPropagate_Interface as UnitPropagate0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Complete0.complete = Complete0.complete,
  predicate Sat0.sat = Sat0.sat, predicate Unsat0.unsat = Unsat0.unsat,
  predicate Compatible0.compatible = Compatible0.compatible,
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete
  let rec cfg do_unit_propagation [@cfg:stackify] (self : borrowed (Type.robinson_assignments_assignments)) (f : Type.robinson_formula_formula) : Type.core_option_option bool
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { result = Type.Core_Option_Option_None -> not (Complete0.complete ( ^ self)) }
    ensures { result = Type.Core_Option_Option_Some true -> Sat0.sat f ( ^ self) }
    ensures { result = Type.Core_Option_Option_Some false -> Unsat0.unsat f ( ^ self) }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
   = 
  var _0 : Type.core_option_option bool;
  var self_1 : borrowed (Type.robinson_assignments_assignments);
  var f_2 : Type.robinson_formula_formula;
  var _old_a_3 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.robinson_assignments_assignments));
  var _4 : borrowed (Type.robinson_assignments_assignments);
  var _5 : borrowed (Type.robinson_assignments_assignments);
  var _6 : ();
  var _7 : ();
  var _8 : Type.robinson_clause_clausestate;
  var _9 : borrowed (Type.robinson_assignments_assignments);
  var _10 : Type.robinson_formula_formula;
  var _11 : isize;
  var _12 : ();
  var _13 : ();
  var _14 : ();
  {
    self_1 <- self;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    _5 <- self_1;
    _4 <- _5;
    _old_a_3 <- Record0.record _4;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant assignments_invariant { Invariant0.invariant' ( * self_1) f_2 };
    invariant proph {  ^ self_1 =  ^ Model0.model _old_a_3 };
    invariant maintains_compat { Compatible0.compatible ( * Model0.model _old_a_3) ( * self_1) };
    invariant maintains_sat { EventuallySatComplete0.eventually_sat_complete f_2 ( * Model0.model _old_a_3) -> EventuallySatComplete0.eventually_sat_complete f_2 ( * self_1) };
    _9 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _9) };
    _10 <- f_2;
    _8 <- UnitPropagate0.unit_propagate _9 _10;
    goto BB3
  }
  BB3 {
    switch (_8)
      | Type.Robinson_Clause_ClauseState_Sat -> goto BB6
      | Type.Robinson_Clause_ClauseState_Unsat -> goto BB7
      | Type.Robinson_Clause_ClauseState_Unit -> goto BB4
      | Type.Robinson_Clause_ClauseState_Unknown -> goto BB8
      end
  }
  BB4 {
    _7 <- ();
    goto BB2
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB6 {
    assume { Resolve0.resolve self_1 };
    _0 <- Type.Core_Option_Option_Some true;
    goto BB9
  }
  BB7 {
    assume { Resolve0.resolve self_1 };
    _0 <- Type.Core_Option_Option_Some false;
    goto BB9
  }
  BB8 {
    assume { Resolve0.resolve self_1 };
    _0 <- Type.Core_Option_Option_None;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Robinson_Clause_Impl2_Len_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone Robinson_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.robinson_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.robinson_clause_clause) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Robinson_Clause_Impl2_Len
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.robinson_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.robinson_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model
  let rec cfg len [@cfg:stackify] (self : Type.robinson_clause_clause) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
   = 
  var _0 : usize;
  var self_1 : Type.robinson_clause_clause;
  var _2 : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- Type.robinson_clause_clause_Clause_rest self_1;
    _0 <- Len0.len _2;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Robinson_Lit_Impl1_CheckLitInvariant_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone Robinson_Lit_Impl0_Invariant_Interface as Invariant0
  val check_lit_invariant [@cfg:stackify] (self : Type.robinson_lit_lit) (n : usize) : bool
    ensures { result = Invariant0.invariant' self (UInt64.to_int n) }
    
end
module Robinson_Lit_Impl1_CheckLitInvariant
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone Robinson_Lit_Impl0_Invariant as Invariant0
  let rec cfg check_lit_invariant [@cfg:stackify] (self : Type.robinson_lit_lit) (n : usize) : bool
    ensures { result = Invariant0.invariant' self (UInt64.to_int n) }
    
   = 
  var _0 : bool;
  var self_1 : Type.robinson_lit_lit;
  var n_2 : usize;
  var _3 : ();
  var _4 : usize;
  var _5 : usize;
  {
    self_1 <- self;
    n_2 <- n;
    goto BB0
  }
  BB0 {
    _4 <- Type.robinson_lit_lit_Lit_idx self_1;
    _5 <- n_2;
    _0 <- _4 < _5;
    return _0
  }
  
end
module Robinson_Clause_Impl2_NoDuplicates_Interface
  use prelude.Prelude
  use Type
  clone Robinson_Clause_Impl1_NoDuplicateIndexes_Interface as NoDuplicateIndexes0
  val no_duplicates [@cfg:stackify] (self : Type.robinson_clause_clause) : bool
    ensures { result = NoDuplicateIndexes0.no_duplicate_indexes self }
    
end
module Robinson_Clause_Impl2_NoDuplicates
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model
  clone Robinson_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.robinson_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.robinson_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.robinson_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.robinson_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.robinson_lit_lit
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.robinson_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.robinson_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model
  let rec cfg no_duplicates [@cfg:stackify] (self : Type.robinson_clause_clause) : bool
    ensures { result = NoDuplicateIndexes0.no_duplicate_indexes self }
    
   = 
  var _0 : bool;
  var self_1 : Type.robinson_clause_clause;
  var _2 : ();
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global);
  var lit1_10 : Type.robinson_lit_lit;
  var _11 : Type.robinson_lit_lit;
  var _12 : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global);
  var _13 : usize;
  var j_14 : usize;
  var _15 : ();
  var _16 : bool;
  var _17 : usize;
  var _18 : usize;
  var lit2_19 : Type.robinson_lit_lit;
  var _20 : Type.robinson_lit_lit;
  var _21 : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global);
  var _22 : usize;
  var _23 : ();
  var _24 : bool;
  var _25 : usize;
  var _26 : usize;
  var _27 : ();
  var _28 : ();
  var _29 : ();
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    i_3 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant no_dups { forall k : (int) . forall j : (int) . 0 <= j && j < UInt64.to_int i_3 && 0 <= k && k < j -> Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model self_1) j) <> Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model self_1) k) };
    _7 <- i_3;
    _9 <- Type.robinson_clause_clause_Clause_rest self_1;
    _8 <- Len0.len _9;
    goto BB2
  }
  BB2 {
    _6 <- _7 < _8;
    switch (_6)
      | False -> goto BB11
      | _ -> goto BB3
      end
  }
  BB3 {
    _12 <- Type.robinson_clause_clause_Clause_rest self_1;
    _13 <- i_3;
    _11 <- Index0.index _12 _13;
    goto BB4
  }
  BB4 {
    lit1_10 <- _11;
    j_14 <- (0 : usize);
    goto BB5
  }
  BB5 {
    invariant inv { forall k : (int) . 0 <= k && k < UInt64.to_int j_14 -> Type.robinson_lit_lit_Lit_idx lit1_10 <> Type.robinson_lit_lit_Lit_idx (Seq.get (Model0.model self_1) k) };
    _17 <- j_14;
    _18 <- i_3;
    _16 <- _17 < _18;
    switch (_16)
      | False -> goto BB10
      | _ -> goto BB6
      end
  }
  BB6 {
    _21 <- Type.robinson_clause_clause_Clause_rest self_1;
    _22 <- j_14;
    _20 <- Index0.index _21 _22;
    goto BB7
  }
  BB7 {
    lit2_19 <- _20;
    _25 <- Type.robinson_lit_lit_Lit_idx lit1_10;
    _26 <- Type.robinson_lit_lit_Lit_idx lit2_19;
    _24 <- _25 = _26;
    switch (_24)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    _0 <- false;
    goto BB12
  }
  BB9 {
    _23 <- ();
    j_14 <- j_14 + (1 : usize);
    _5 <- ();
    goto BB5
  }
  BB10 {
    _15 <- ();
    i_3 <- i_3 + (1 : usize);
    _5 <- ();
    goto BB1
  }
  BB11 {
    _4 <- ();
    _0 <- true;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Robinson_Clause_Impl2_CheckClauseInvariant_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone Robinson_Clause_Impl1_Invariant_Interface as Invariant0
  val check_clause_invariant [@cfg:stackify] (self : Type.robinson_clause_clause) (n : usize) : bool
    ensures { result = Invariant0.invariant' self (UInt64.to_int n) }
    
end
module Robinson_Clause_Impl2_CheckClauseInvariant
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model
  clone Robinson_Lit_Impl0_Invariant as Invariant1
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Robinson_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.robinson_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.robinson_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.robinson_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.robinson_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.robinson_lit_lit
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.robinson_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Robinson_Clause_Impl2_NoDuplicates_Interface as NoDuplicates0 with predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Robinson_Lit_Impl1_CheckLitInvariant_Interface as CheckLitInvariant0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone Robinson_Clause_Impl2_Len_Interface as Len0 with function Model0.model = Model0.model
  let rec cfg check_clause_invariant [@cfg:stackify] (self : Type.robinson_clause_clause) (n : usize) : bool
    ensures { result = Invariant0.invariant' self (UInt64.to_int n) }
    
   = 
  var _0 : bool;
  var self_1 : Type.robinson_clause_clause;
  var n_2 : usize;
  var _3 : ();
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.robinson_clause_clause;
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : Type.robinson_lit_lit;
  var _15 : Type.robinson_lit_lit;
  var _16 : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global);
  var _17 : usize;
  var _18 : usize;
  var _19 : ();
  var _20 : ();
  var _21 : ();
  var _22 : ();
  var _23 : ();
  var _24 : bool;
  var _25 : Type.robinson_clause_clause;
  var _26 : ();
  {
    self_1 <- self;
    n_2 <- n;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant inv { forall j : (int) . 0 <= j && j < UInt64.to_int i_4 -> Invariant1.invariant' (Seq.get (Model0.model self_1) j) (UInt64.to_int n_2) };
    _8 <- i_4;
    _10 <- self_1;
    _9 <- Len0.len _10;
    goto BB2
  }
  BB2 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB8
      | _ -> goto BB3
      end
  }
  BB3 {
    _16 <- Type.robinson_clause_clause_Clause_rest self_1;
    _17 <- i_4;
    _15 <- Index0.index _16 _17;
    goto BB4
  }
  BB4 {
    _14 <- _15;
    _18 <- n_2;
    _13 <- CheckLitInvariant0.check_lit_invariant _14 _18;
    goto BB5
  }
  BB5 {
    _12 <- not _13;
    switch (_12)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    _0 <- false;
    goto BB12
  }
  BB7 {
    _11 <- ();
    i_4 <- i_4 + (1 : usize);
    _6 <- ();
    goto BB1
  }
  BB8 {
    _5 <- ();
    _25 <- self_1;
    _24 <- NoDuplicates0.no_duplicates _25;
    goto BB9
  }
  BB9 {
    switch (_24)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    _0 <- true;
    goto BB12
  }
  BB11 {
    _23 <- ();
    _0 <- false;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface
  type t
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) = 
    Permut.permut self o 0 (Seq.length self)
end
module Robinson_Util_SortedRangeRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range_rev (s : Seq.seq (usize, usize)) (l : int) (u : int)
end
module Robinson_Util_SortedRangeRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range_rev (s : Seq.seq (usize, usize)) (l : int) (u : int) = 
    forall j : (int) . forall i : (int) . l <= i && i < j && j < u -> (let (a, _) = Seq.get s i in a) >= (let (a, _) = Seq.get s j in a)
end
module Robinson_Util_SortedRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_rev (s : Seq.seq (usize, usize))
end
module Robinson_Util_SortedRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  clone Robinson_Util_SortedRangeRev_Interface as SortedRangeRev0
  predicate sorted_rev (s : Seq.seq (usize, usize)) = 
    SortedRangeRev0.sorted_range_rev s 0 (Seq.length s)
end
module Robinson_Util_PartitionRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate partition_rev (v : Seq.seq (usize, usize)) (i : int)
end
module Robinson_Util_PartitionRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  predicate partition_rev (v : Seq.seq (usize, usize)) (i : int) = 
    forall k2 : (int) . forall k1 : (int) . 0 <= k1 && k1 < i && i <= k2 && k2 < Seq.length v -> (let (a, _) = Seq.get v k1 in a) >= (let (a, _) = Seq.get v k2 in a)
end
module Core_Ops_Deref_Deref_Target
  type self
  type target
end
module Core_Ops_Deref_DerefMut_DerefMut_Interface
  type self
  use prelude.Prelude
  clone Core_Ops_Deref_Deref_Target as Target0 with type self = self
  val deref_mut [@cfg:stackify] (self : borrowed self) : borrowed Target0.target
    requires {false}
    
end
module Core_Ops_Deref_DerefMut_DerefMut
  type self
  use prelude.Prelude
  clone Core_Ops_Deref_Deref_Target as Target0 with type self = self
  val deref_mut [@cfg:stackify] (self : borrowed self) : borrowed Target0.target
    requires {false}
    
end
module Alloc_Vec_Impl11_DerefMut_Interface
  type t
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Impl2_Model_Interface as Model0 with type t = t
  val deref_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) : borrowed (seq t)
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    
end
module Alloc_Vec_Impl11_DerefMut
  type t
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Impl2_Model_Interface as Model0 with type t = t
  val deref_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) : borrowed (seq t)
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    
end
module Core_Slice_Impl0_Swap_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Impl2_Model_Interface as Model1 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Core_Slice_Impl0_Swap
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Impl2_Model_Interface as Model1 with type t = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Alloc_Vec_Impl10_Target
  type t
  type a
  use prelude.Prelude
  use seq.Seq
  type target  = 
    seq t
end
module Alloc_Vec_Impl11
  type t
  type a
  use Type
  clone Alloc_Vec_Impl10_Target as Target0 with type t = t, type a = a
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Impl2_Model as Model0 with type t = t
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = t, type a = a,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Deref_DerefMut_DerefMut_Interface as DerefMut1 with type self = Type.alloc_vec_vec t a,
  val deref_mut = DerefMut0.deref_mut, type Target0.target = Target0.target
end
module Robinson_Util_SortReverse_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone Robinson_Util_SortedRev_Interface as SortedRev0
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = (usize, usize),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = (usize, usize),
  type a = Type.alloc_alloc_global
  val sort_reverse [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global))) : ()
    ensures { PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    ensures { SortedRev0.sorted_rev (Model0.model ( ^ v)) }
    
end
module Robinson_Util_SortReverse
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  use mach.int.Int32
  use seq.Seq
  clone Robinson_Util_PartitionRev as PartitionRev0
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global))
  clone Robinson_Util_SortedRangeRev as SortedRangeRev0
  clone Robinson_Util_SortedRev as SortedRev0 with predicate SortedRangeRev0.sorted_range_rev = SortedRangeRev0.sorted_range_rev
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = (usize, usize),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = (usize, usize), type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = seq (usize, usize)
  clone CreusotContracts_Logic_Model_Impl2_Model as Model3 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl1_Model as Model4 with type t = seq (usize, usize),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = (usize, usize), function Model0.model = Model4.model,
  function Model1.model = Model3.model
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global)),
  function Model0.model = Model2.model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = (usize, usize), type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model, function Model1.model = Model0.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = (usize, usize), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = (usize, usize), type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  let rec cfg sort_reverse [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global))) : ()
    ensures { PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    ensures { SortedRev0.sorted_rev (Model0.model ( ^ v)) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var i_2 : usize;
  var _old_v_3 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global)));
  var _4 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _5 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var max_11 : usize;
  var j_12 : usize;
  var _13 : usize;
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _19 : ();
  var _20 : bool;
  var _21 : usize;
  var _22 : (usize, usize);
  var _23 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _24 : usize;
  var _25 : usize;
  var _26 : (usize, usize);
  var _27 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _28 : usize;
  var _29 : usize;
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : borrowed (seq (usize, usize));
  var _35 : borrowed (seq (usize, usize));
  var _36 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _37 : usize;
  var _38 : usize;
  var _39 : ();
  var _40 : ();
  var _41 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    _5 <- v_1;
    _4 <- _5;
    _old_v_3 <- Record0.record _4;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant proph_const {  ^ v_1 =  ^ Model2.model _old_v_3 };
    invariant permutation { PermutationOf0.permutation_of (Model1.model v_1) (Model0.model ( * Model2.model _old_v_3)) };
    invariant sorted { SortedRangeRev0.sorted_range_rev (Model1.model v_1) 0 (UInt64.to_int i_2) };
    invariant partition { PartitionRev0.partition_rev (Model1.model v_1) (UInt64.to_int i_2) };
    _8 <- i_2;
    _10 <-  * v_1;
    _9 <- Len0.len _10;
    goto BB3
  }
  BB3 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB16
      | _ -> goto BB4
      end
  }
  BB4 {
    max_11 <- i_2;
    _13 <- i_2;
    j_12 <- _13 + (1 : usize);
    goto BB5
  }
  BB5 {
    invariant max_is_max { forall k : (int) . UInt64.to_int i_2 <= k && k < UInt64.to_int j_12 -> (let (a, _) = Seq.get (Model1.model v_1) (UInt64.to_int max_11) in a) >= (let (a, _) = Seq.get (Model1.model v_1) k in a) };
    invariant j_bound { UInt64.to_int i_2 <= UInt64.to_int j_12 && UInt64.to_int j_12 <= Seq.length (Model1.model v_1) };
    invariant max_bound { UInt64.to_int i_2 <= UInt64.to_int max_11 && UInt64.to_int max_11 < UInt64.to_int j_12 };
    _16 <- j_12;
    _18 <-  * v_1;
    _17 <- Len0.len _18;
    goto BB6
  }
  BB6 {
    _15 <- _16 < _17;
    switch (_15)
      | False -> goto BB13
      | _ -> goto BB7
      end
  }
  BB7 {
    _23 <-  * v_1;
    _24 <- j_12;
    _22 <- Index0.index _23 _24;
    goto BB8
  }
  BB8 {
    _21 <- (let (a, _) = _22 in a);
    _27 <-  * v_1;
    _28 <- max_11;
    _26 <- Index0.index _27 _28;
    goto BB9
  }
  BB9 {
    _25 <- (let (a, _) = _26 in a);
    _20 <- _21 > _25;
    switch (_20)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    _29 <- j_12;
    max_11 <- _29;
    _19 <- ();
    goto BB12
  }
  BB11 {
    _19 <- ();
    goto BB12
  }
  BB12 {
    j_12 <- j_12 + (1 : usize);
    _6 <- ();
    goto BB5
  }
  BB13 {
    _14 <- ();
    _36 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _36) };
    _35 <- DerefMut0.deref_mut _36;
    goto BB14
  }
  BB14 {
    _34 <- borrow_mut ( * _35);
    _35 <- { _35 with current = ( ^ _34) };
    _37 <- i_2;
    _38 <- max_11;
    _33 <- Swap0.swap _34 _37 _38;
    goto BB15
  }
  BB15 {
    assume { Resolve0.resolve _35 };
    i_2 <- i_2 + (1 : usize);
    _6 <- ();
    goto BB2
  }
  BB16 {
    assume { Resolve1.resolve v_1 };
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) = 
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t1
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = t1, type t2 = t2,
  predicate Resolve0.resolve = Resolve2.resolve, predicate Resolve1.resolve = Resolve3.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = (t1, t2),
  predicate resolve = Resolve0.resolve
end
module Robinson_Decision_Impl1_New_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone Robinson_Decision_Impl0_Invariant_Interface as Invariant1
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (f : Type.robinson_formula_formula) : Type.robinson_decision_decisions
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result (UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f)) }
    
end
module Robinson_Decision_Impl1_New
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model
  clone Robinson_Lit_Impl0_Invariant as Invariant3
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = (usize, usize), type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize, type a = Type.alloc_alloc_global
  clone Robinson_Decision_Impl0_Invariant as Invariant1 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Robinson_Util_SortedRangeRev as SortedRangeRev0
  clone Robinson_Util_SortedRev as SortedRev0 with predicate SortedRangeRev0.sorted_range_rev = SortedRangeRev0.sorted_range_rev
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve6 with type t1 = usize, type t2 = usize,
  predicate Resolve0.resolve = Resolve5.resolve, predicate Resolve1.resolve = Resolve5.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy4 with type t = (usize, usize),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy3 with type t = (usize, usize)
  clone Core_Slice_Index_Impl2_Output as Output3 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue3 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere1 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds3 with type t = (usize, usize)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = usize
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy2 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output2 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue2 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds2 with type t = usize
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.robinson_lit_lit
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.robinson_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue1 with type t = Type.robinson_lit_lit
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds1 with type t = Type.robinson_lit_lit
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy0 with type t = Type.robinson_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.robinson_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.robinson_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.robinson_clause_clause
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.robinson_lit_lit, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model4.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with type t = Type.robinson_lit_lit, type a = Type.alloc_alloc_global,
  function Model0.model = Model4.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model5 with type t = Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy4.modelTy, function Model0.model = Model1.model
  clone Robinson_Util_SortReverse_Interface as SortReverse0 with function Model0.model = Model1.model,
  function Model1.model = Model5.model, predicate PermutationOf0.permutation_of = PermutationOf0.permutation_of,
  predicate SortedRev0.sorted_rev = SortedRev0.sorted_rev
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve4 with type t = (usize, usize),
  function Model0.model = Model1.model, predicate Resolve0.resolve = Resolve6.resolve
  clone Alloc_Vec_Impl16_Index_Interface as Index3 with type t = (usize, usize), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds3.in_bounds, predicate HasValue0.has_value = HasValue3.has_value,
  type Output0.output = Output3.output
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with type t = (usize, usize), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds3.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere,
  predicate HasValue0.has_value = HasValue3.has_value, type Output0.output = Output3.output
  clone Alloc_Vec_FromElem_Interface as FromElem1 with type t = (usize, usize), function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl2_Resolve as Resolve3 with type t = usize, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve5.resolve
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue2.has_value, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index2 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue2.has_value,
  type Output0.output = Output2.output
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = usize, function Model0.model = Model0.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.robinson_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model
  let rec cfg new [@cfg:stackify] (f : Type.robinson_formula_formula) : Type.robinson_decision_decisions
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result (UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f)) }
    
   = 
  var _0 : Type.robinson_decision_decisions;
  var f_1 : Type.robinson_formula_formula;
  var lit_order_2 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _3 : usize;
  var counts_4 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _5 : usize;
  var counts_with_index_6 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _7 : (usize, usize);
  var _8 : usize;
  var i_9 : usize;
  var _10 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : Type.alloc_vec_vec (Type.robinson_clause_clause) (Type.alloc_alloc_global);
  var curr_clause_16 : Type.robinson_clause_clause;
  var _17 : Type.robinson_clause_clause;
  var _18 : Type.alloc_vec_vec (Type.robinson_clause_clause) (Type.alloc_alloc_global);
  var _19 : usize;
  var j_20 : usize;
  var _21 : ();
  var _22 : bool;
  var _23 : usize;
  var _24 : usize;
  var _25 : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global);
  var _26 : ();
  var _27 : bool;
  var _28 : usize;
  var _29 : usize;
  var _30 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _31 : usize;
  var _32 : Type.robinson_lit_lit;
  var _33 : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global);
  var _34 : usize;
  var _35 : borrowed usize;
  var _36 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _37 : usize;
  var _38 : Type.robinson_lit_lit;
  var _39 : Type.alloc_vec_vec (Type.robinson_lit_lit) (Type.alloc_alloc_global);
  var _40 : usize;
  var _41 : ();
  var _42 : ();
  var _43 : ();
  var _44 : ();
  var _45 : ();
  var _46 : ();
  var _47 : ();
  var _48 : bool;
  var _49 : usize;
  var _50 : usize;
  var _51 : usize;
  var _52 : usize;
  var _53 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _54 : usize;
  var _55 : usize;
  var _56 : borrowed (usize, usize);
  var _57 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _58 : usize;
  var _59 : ();
  var _60 : ();
  var _61 : ();
  var _62 : ();
  var _63 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _64 : borrowed (Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global));
  var _65 : ();
  var _66 : bool;
  var _67 : usize;
  var _68 : usize;
  var _69 : usize;
  var _70 : (usize, usize);
  var _71 : Type.alloc_vec_vec (usize, usize) (Type.alloc_alloc_global);
  var _72 : usize;
  var _73 : borrowed usize;
  var _74 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _75 : usize;
  var _76 : ();
  var _77 : ();
  var _78 : ();
  var _79 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _3 <- Type.robinson_formula_formula_Formula_num_vars f_1;
    lit_order_2 <- FromElem0.from_elem (0 : usize) _3;
    goto BB1
  }
  BB1 {
    _5 <- Type.robinson_formula_formula_Formula_num_vars f_1;
    counts_4 <- FromElem0.from_elem (0 : usize) _5;
    goto BB2
  }
  BB2 {
    _7 <- ((0 : usize), (0 : usize));
    _8 <- Type.robinson_formula_formula_Formula_num_vars f_1;
    counts_with_index_6 <- FromElem1.from_elem _7 _8;
    goto BB3
  }
  BB3 {
    i_9 <- (0 : usize);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant counts_len1 { Seq.length (Model0.model counts_4) = UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f_1) };
    _13 <- i_9;
    _15 <- Type.robinson_formula_formula_Formula_clauses f_1;
    _14 <- Len0.len _15;
    goto BB6
  }
  BB6 {
    _12 <- _13 < _14;
    switch (_12)
      | False -> goto BB21
      | _ -> goto BB7
      end
  }
  BB7 {
    _18 <- Type.robinson_formula_formula_Formula_clauses f_1;
    _19 <- i_9;
    _17 <- Index0.index _18 _19;
    goto BB8
  }
  BB8 {
    curr_clause_16 <- _17;
    j_20 <- (0 : usize);
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    invariant counts_len { Seq.length (Model0.model counts_4) = UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f_1) };
    _23 <- j_20;
    _25 <- Type.robinson_clause_clause_Clause_rest curr_clause_16;
    _24 <- Len1.len _25;
    goto BB11
  }
  BB11 {
    _22 <- _23 < _24;
    switch (_22)
      | False -> goto BB20
      | _ -> goto BB12
      end
  }
  BB12 {
    _30 <- counts_4;
    _33 <- Type.robinson_clause_clause_Clause_rest curr_clause_16;
    _34 <- j_20;
    _32 <- Index1.index _33 _34;
    goto BB13
  }
  BB13 {
    _31 <- Type.robinson_lit_lit_Lit_idx _32;
    _29 <- Index2.index _30 _31;
    goto BB14
  }
  BB14 {
    _28 <- _29;
    _27 <- _28 < (18446744073709551615 : usize);
    switch (_27)
      | False -> goto BB18
      | _ -> goto BB15
      end
  }
  BB15 {
    _36 <- borrow_mut counts_4;
    counts_4 <-  ^ _36;
    _39 <- Type.robinson_clause_clause_Clause_rest curr_clause_16;
    _40 <- j_20;
    _38 <- Index1.index _39 _40;
    goto BB16
  }
  BB16 {
    _37 <- Type.robinson_lit_lit_Lit_idx _38;
    _35 <- IndexMut0.index_mut _36 _37;
    goto BB17
  }
  BB17 {
    _35 <- { _35 with current = ( * _35 + (1 : usize)) };
    assume { Resolve0.resolve _35 };
    _26 <- ();
    goto BB19
  }
  BB18 {
    _26 <- ();
    goto BB19
  }
  BB19 {
    j_20 <- j_20 + (1 : usize);
    _11 <- ();
    goto BB10
  }
  BB20 {
    _21 <- ();
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    goto BB5
  }
  BB21 {
    _10 <- ();
    i_9 <- (0 : usize);
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    goto BB24
  }
  BB24 {
    invariant counts_with_idx_len { Seq.length (Model1.model counts_with_index_6) = UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f_1) };
    invariant second_ok { forall j : (int) . 0 <= j && j < UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f_1) -> UInt64.to_int (let (_, a) = Seq.get (Model1.model counts_with_index_6) j in a) < UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f_1) };
    _49 <- i_9;
    _50 <- Type.robinson_formula_formula_Formula_num_vars f_1;
    _48 <- _49 < _50;
    switch (_48)
      | False -> goto BB28
      | _ -> goto BB25
      end
  }
  BB25 {
    _53 <- counts_4;
    _54 <- i_9;
    _52 <- Index2.index _53 _54;
    goto BB26
  }
  BB26 {
    _51 <- _52;
    _55 <- i_9;
    _57 <- borrow_mut counts_with_index_6;
    counts_with_index_6 <-  ^ _57;
    _58 <- i_9;
    _56 <- IndexMut1.index_mut _57 _58;
    goto BB27
  }
  BB27 {
    _56 <- { _56 with current = (_51, _55) };
    assume { Resolve1.resolve _56 };
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    goto BB24
  }
  BB28 {
    _47 <- ();
    _64 <- borrow_mut counts_with_index_6;
    counts_with_index_6 <-  ^ _64;
    _63 <- borrow_mut ( * _64);
    _64 <- { _64 with current = ( ^ _63) };
    _62 <- SortReverse0.sort_reverse _63;
    goto BB29
  }
  BB29 {
    assume { Resolve2.resolve _64 };
    i_9 <- (0 : usize);
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    goto BB32
  }
  BB32 {
    invariant lit_order_len { Seq.length (Model0.model lit_order_2) = UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f_1) };
    invariant second_ok { forall j : (int) . 0 <= j && j < UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f_1) -> UInt64.to_int (Seq.get (Model0.model lit_order_2) j) < UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f_1) };
    _67 <- i_9;
    _68 <- Type.robinson_formula_formula_Formula_num_vars f_1;
    _66 <- _67 < _68;
    switch (_66)
      | False -> goto BB36
      | _ -> goto BB33
      end
  }
  BB33 {
    _71 <- counts_with_index_6;
    _72 <- i_9;
    _70 <- Index3.index _71 _72;
    goto BB34
  }
  BB34 {
    _69 <- (let (_, a) = _70 in a);
    _74 <- borrow_mut lit_order_2;
    lit_order_2 <-  ^ _74;
    _75 <- i_9;
    _73 <- IndexMut0.index_mut _74 _75;
    goto BB35
  }
  BB35 {
    _73 <- { _73 with current = _69 };
    assume { Resolve0.resolve _73 };
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    goto BB32
  }
  BB36 {
    _65 <- ();
    assume { Resolve3.resolve _79 };
    _79 <- lit_order_2;
    _0 <- Type.Robinson_Decision_Decisions _79;
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    assume { Resolve4.resolve counts_with_index_6 };
    goto BB39
  }
  BB39 {
    assume { Resolve3.resolve counts_4 };
    goto BB40
  }
  BB40 {
    return _0
  }
  
end
module Robinson_Formula_Impl0_Model_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  function model (self : Type.robinson_formula_formula) : (Seq.seq (Type.robinson_clause_clause), int)
end
module Robinson_Formula_Impl0_Model
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  function model (self : Type.robinson_formula_formula) : (Seq.seq (Type.robinson_clause_clause), int) = 
    (Model0.model (Type.robinson_formula_formula_Formula_clauses self), UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars self))
end
module Robinson_Formula_FormulaSatInner_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate formula_sat_inner (f : (Seq.seq (Type.robinson_clause_clause), int)) (a : Seq.seq uint8)
end
module Robinson_Formula_FormulaSatInner
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Robinson_Clause_Impl1_SatInner_Interface as SatInner0
  predicate formula_sat_inner (f : (Seq.seq (Type.robinson_clause_clause), int)) (a : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length (let (a, _) = f in a) -> SatInner0.sat_inner (Seq.get (let (a, _) = f in a) i) a
end
module Robinson_Formula_Impl1_EventuallySatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate eventually_sat_inner (self : Type.robinson_formula_formula) (a : Seq.seq uint8)
end
module Robinson_Formula_Impl1_EventuallySatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone Robinson_Formula_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Assignments_CompatibleInner_Interface as CompatibleInner0
  predicate eventually_sat_inner (self : Type.robinson_formula_formula) (a : Seq.seq uint8) = 
    exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars self) && CompatibleInner0.compatible_inner a a2 && SatInner0.sat_inner self a2
end
module Robinson_Formula_Impl1_EventuallySatNoAss_Interface
  use Type
  predicate eventually_sat_no_ass (self : Type.robinson_formula_formula)
end
module Robinson_Formula_Impl1_EventuallySatNoAss
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Formula_Impl1_SatInner_Interface as SatInner0
  predicate eventually_sat_no_ass (self : Type.robinson_formula_formula) = 
    exists a2 : (Seq.seq uint8) . SatInner0.sat_inner self a2
end
module Robinson_Formula_Impl1_EventuallySatCompleteNoAss_Interface
  use Type
  predicate eventually_sat_complete_no_ass (self : Type.robinson_formula_formula)
end
module Robinson_Formula_Impl1_EventuallySatCompleteNoAss
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone Robinson_Formula_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Assignments_CompleteInner_Interface as CompleteInner0
  predicate eventually_sat_complete_no_ass (self : Type.robinson_formula_formula) = 
    exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars self) && CompleteInner0.complete_inner a2 && SatInner0.sat_inner self a2
end
module Robinson_Formula_Impl1_EventuallySat_Interface
  use Type
  predicate eventually_sat (self : Type.robinson_formula_formula) (a : Type.robinson_assignments_assignments)
end
module Robinson_Formula_Impl1_EventuallySat
  use Type
  clone Robinson_Formula_Impl1_EventuallySatInner_Interface as EventuallySatInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate eventually_sat (self : Type.robinson_formula_formula) (a : Type.robinson_assignments_assignments) = 
    EventuallySatInner0.eventually_sat_inner self (Model0.model a)
end
module Robinson_Formula_Impl1_ContainsEmptyClause_Interface
  use Type
  predicate contains_empty_clause (self : Type.robinson_formula_formula)
end
module Robinson_Formula_Impl1_ContainsEmptyClause
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Robinson_Clause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  predicate contains_empty_clause (self : Type.robinson_formula_formula) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.robinson_formula_formula_Formula_clauses self)) && Seq.length (Model1.model (Seq.get (Model0.model (Type.robinson_formula_formula_Formula_clauses self)) i)) = 0
end
module Robinson_Formula_Impl0_ModelTy
  use seq.Seq
  use Type
  use mach.int.Int
  type modelTy  = 
    (Seq.seq (Type.robinson_clause_clause), int)
end
module Robinson_Formula_Impl0
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Robinson_Formula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.robinson_formula_formula,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.robinson_formula_formula,
  type modelTy = ModelTy0.modelTy
end
module Robinson_Formula_Impl2_CheckFormulaInvariant_Interface
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use prelude.UInt8
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  clone Robinson_Formula_Impl1_ContainsEmptyClause_Interface as ContainsEmptyClause0
  clone Robinson_Formula_FormulaSatInner_Interface as FormulaSatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.robinson_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Robinson_Formula_Impl1_EventuallySatNoAss_Interface as EventuallySatNoAss0
  val check_formula_invariant [@cfg:stackify] (self : Type.robinson_formula_formula) : Type.robinson_solver_satresult
    ensures { match (result) with
      | Type.Robinson_Solver_SatResult_Sat assn -> EventuallySatNoAss0.eventually_sat_no_ass self && FormulaSatInner0.formula_sat_inner (Model0.model self) (Model1.model assn)
      | Type.Robinson_Solver_SatResult_Unsat -> ContainsEmptyClause0.contains_empty_clause self
      | Type.Robinson_Solver_SatResult_Unknown -> Invariant0.invariant' self && 0 < UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars self) && UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars self) < div 18446744073709551615 2
      | Type.Robinson_Solver_SatResult_Err -> true
      end }
    
end
module Robinson_Formula_Impl2_CheckFormulaInvariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use seq.Seq
  use prelude.UInt8
  clone Robinson_Lit_Impl0_Invariant as Invariant2
  clone Robinson_Lit_Impl0_SatInner as SatInner2
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model3 with function Model0.model = Model5.model
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant1 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Formula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl0_Model as Model4 with function Model0.model = Model2.model
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatNoAss as EventuallySatNoAss0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Robinson_Formula_Impl1_ContainsEmptyClause as ContainsEmptyClause0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.robinson_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model4.model
  clone Robinson_Clause_Impl0_ModelTy as ModelTy2
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = Type.robinson_clause_clause
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.robinson_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = Type.robinson_clause_clause
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = Type.robinson_clause_clause
  clone CreusotContracts_Logic_Model_Impl0_Model as Model6 with type t = Type.robinson_clause_clause,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model3.model
  clone Robinson_Clause_Impl2_Len_Interface as Len1 with function Model0.model = Model6.model
  clone Robinson_Clause_Impl2_CheckClauseInvariant_Interface as CheckClauseInvariant0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.robinson_clause_clause, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = uint8, function Model0.model = Model1.model
  let rec cfg check_formula_invariant [@cfg:stackify] (self : Type.robinson_formula_formula) : Type.robinson_solver_satresult
    ensures { match (result) with
      | Type.Robinson_Solver_SatResult_Sat assn -> EventuallySatNoAss0.eventually_sat_no_ass self && FormulaSatInner0.formula_sat_inner (Model0.model self) (Model1.model assn)
      | Type.Robinson_Solver_SatResult_Unsat -> ContainsEmptyClause0.contains_empty_clause self
      | Type.Robinson_Solver_SatResult_Unknown -> Invariant0.invariant' self && 0 < UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars self) && UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars self) < div 18446744073709551615 2
      | Type.Robinson_Solver_SatResult_Err -> true
      end }
    
   = 
  var _0 : Type.robinson_solver_satresult;
  var self_1 : Type.robinson_formula_formula;
  var _2 : ();
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : usize;
  var _7 : bool;
  var _8 : ();
  var _9 : ();
  var _10 : bool;
  var _11 : usize;
  var _12 : Type.alloc_vec_vec (Type.robinson_clause_clause) (Type.alloc_alloc_global);
  var _13 : ();
  var _14 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _15 : ();
  var _16 : bool;
  var _17 : usize;
  var _18 : ();
  var i_19 : usize;
  var _20 : ();
  var _21 : ();
  var _22 : bool;
  var _23 : usize;
  var _24 : usize;
  var _25 : Type.alloc_vec_vec (Type.robinson_clause_clause) (Type.alloc_alloc_global);
  var _26 : ();
  var _27 : bool;
  var _28 : bool;
  var _29 : Type.robinson_clause_clause;
  var _30 : Type.robinson_clause_clause;
  var _31 : Type.alloc_vec_vec (Type.robinson_clause_clause) (Type.alloc_alloc_global);
  var _32 : usize;
  var _33 : usize;
  var _34 : ();
  var _35 : ();
  var _36 : bool;
  var _37 : usize;
  var _38 : Type.robinson_clause_clause;
  var _39 : Type.robinson_clause_clause;
  var _40 : Type.alloc_vec_vec (Type.robinson_clause_clause) (Type.alloc_alloc_global);
  var _41 : usize;
  var _42 : ();
  var _43 : ();
  var _44 : ();
  var _45 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- Type.robinson_formula_formula_Formula_num_vars self_1;
    _7 <- (2 : usize) = (0 : usize);
    assert { not _7 };
    goto BB1
  }
  BB1 {
    _6 <- (18446744073709551615 : usize) / (2 : usize);
    _4 <- _5 >= _6;
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- Type.Robinson_Solver_SatResult_Err;
    goto BB25
  }
  BB3 {
    _3 <- ();
    _12 <- Type.robinson_formula_formula_Formula_clauses self_1;
    _11 <- Len0.len _12;
    goto BB4
  }
  BB4 {
    _10 <- _11 = (0 : usize);
    switch (_10)
      | False -> goto BB8
      | _ -> goto BB5
      end
  }
  BB5 {
    _14 <- New0.new ();
    goto BB6
  }
  BB6 {
    _0 <- Type.Robinson_Solver_SatResult_Sat _14;
    goto BB7
  }
  BB7 {
    goto BB25
  }
  BB8 {
    _9 <- ();
    _17 <- Type.robinson_formula_formula_Formula_num_vars self_1;
    _16 <- _17 = (0 : usize);
    switch (_16)
      | False -> goto BB10
      | _ -> goto BB9
      end
  }
  BB9 {
    _0 <- Type.Robinson_Solver_SatResult_Err;
    goto BB25
  }
  BB10 {
    _15 <- ();
    i_19 <- (0 : usize);
    goto BB11
  }
  BB11 {
    invariant inv { forall j : (int) . 0 <= j && j < UInt64.to_int i_19 -> Invariant1.invariant' (Seq.get (Model2.model (Type.robinson_formula_formula_Formula_clauses self_1)) j) (UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars self_1)) };
    invariant inv { forall j : (int) . 0 <= j && j < UInt64.to_int i_19 -> Seq.length (Model3.model (Seq.get (Model2.model (Type.robinson_formula_formula_Formula_clauses self_1)) j)) > 0 };
    _23 <- i_19;
    _25 <- Type.robinson_formula_formula_Formula_clauses self_1;
    _24 <- Len0.len _25;
    goto BB12
  }
  BB12 {
    _22 <- _23 < _24;
    switch (_22)
      | False -> goto BB22
      | _ -> goto BB13
      end
  }
  BB13 {
    _31 <- Type.robinson_formula_formula_Formula_clauses self_1;
    _32 <- i_19;
    _30 <- Index0.index _31 _32;
    goto BB14
  }
  BB14 {
    _29 <- _30;
    _33 <- Type.robinson_formula_formula_Formula_num_vars self_1;
    _28 <- CheckClauseInvariant0.check_clause_invariant _29 _33;
    goto BB15
  }
  BB15 {
    _27 <- not _28;
    switch (_27)
      | False -> goto BB17
      | _ -> goto BB16
      end
  }
  BB16 {
    _0 <- Type.Robinson_Solver_SatResult_Err;
    goto BB23
  }
  BB17 {
    _26 <- ();
    _40 <- Type.robinson_formula_formula_Formula_clauses self_1;
    _41 <- i_19;
    _39 <- Index0.index _40 _41;
    goto BB18
  }
  BB18 {
    _38 <- _39;
    _37 <- Len1.len _38;
    goto BB19
  }
  BB19 {
    _36 <- _37 = (0 : usize);
    switch (_36)
      | False -> goto BB21
      | _ -> goto BB20
      end
  }
  BB20 {
    _0 <- Type.Robinson_Solver_SatResult_Unsat;
    goto BB23
  }
  BB21 {
    _35 <- ();
    i_19 <- i_19 + (1 : usize);
    _21 <- ();
    goto BB11
  }
  BB22 {
    _20 <- ();
    _0 <- Type.Robinson_Solver_SatResult_Unknown;
    goto BB24
  }
  BB23 {
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
module Robinson_Lit_Impl2_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.robinson_lit_lit) : Type.robinson_lit_lit
end
module Robinson_Lit_Impl2_Clone
  use prelude.Prelude
  use Type
  let rec cfg clone' [@cfg:stackify] (self : Type.robinson_lit_lit) : Type.robinson_lit_lit = 
  var _0 : Type.robinson_lit_lit;
  var self_1 : Type.robinson_lit_lit;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    return _0
  }
  
end
module Robinson_Lit_Impl0_LitIn_Interface
  use Type
  predicate lit_in (self : Type.robinson_lit_lit) (c : Type.robinson_clause_clause)
end
module Robinson_Lit_Impl0_LitIn
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  predicate lit_in (self : Type.robinson_lit_lit) (c : Type.robinson_clause_clause) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) && Seq.get (Model0.model c) i = self
end
module Robinson_Lit_Impl1_LitUnsat_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone Robinson_Lit_Impl0_Unsat_Interface as Unsat0
  clone Robinson_Lit_Impl0_Invariant_Interface as Invariant0
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_unsat [@cfg:stackify] (self : Type.robinson_lit_lit) (a : Type.robinson_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unsat0.unsat self a }
    
end
module Robinson_Lit_Impl1_LitUnsat
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Lit_Impl0_UnsatInner as UnsatInner0
  clone Robinson_Lit_Impl0_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Lit_Impl0_Invariant as Invariant0
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = uint8
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg lit_unsat [@cfg:stackify] (self : Type.robinson_lit_lit) (a : Type.robinson_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unsat0.unsat self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.robinson_lit_lit;
  var a_2 : Type.robinson_assignments_assignments;
  var _3 : uint8;
  var _4 : uint8;
  var _5 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _6 : usize;
  var _7 : uint8;
  var _8 : uint8;
  var _9 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  var _10 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    switch (Type.robinson_lit_lit_Lit_polarity self_1)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB1 {
    _9 <- Type.robinson_assignments_assignments_Assignments_0 a_2;
    _10 <- Type.robinson_lit_lit_Lit_idx self_1;
    _8 <- Index0.index _9 _10;
    goto BB4
  }
  BB2 {
    _5 <- Type.robinson_assignments_assignments_Assignments_0 a_2;
    _6 <- Type.robinson_lit_lit_Lit_idx self_1;
    _4 <- Index0.index _5 _6;
    goto BB3
  }
  BB3 {
    _3 <- _4;
    _0 <- _3 = (0 : uint8);
    goto BB5
  }
  BB4 {
    _7 <- _8;
    _0 <- _7 = (1 : uint8);
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Robinson_Solver_Inner_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone Robinson_Formula_Impl1_EventuallySat_Interface as EventuallySat0
  clone Robinson_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant2
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Decision_Impl0_Invariant_Interface as Invariant0
  val inner [@cfg:stackify] (f : Type.robinson_formula_formula) (a : Type.robinson_assignments_assignments) (d : Type.robinson_decision_decisions) : bool
    requires {Invariant0.invariant' d (UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f))}
    requires {Invariant1.invariant' a f}
    requires {Invariant2.invariant' f}
    ensures { result = false -> not (EventuallySatComplete0.eventually_sat_complete f a) }
    ensures { result = true -> EventuallySat0.eventually_sat f a }
    
end
module Robinson_Solver_Inner
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  use prelude.UInt8
  clone Robinson_Lit_Impl0_SatInner as SatInner2
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model4.model
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Lit_Impl0_Invariant as Invariant4
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant4.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant3 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatInner as EventuallySatInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySat as EventuallySat0 with function Model0.model = Model1.model,
  predicate EventuallySatInner0.eventually_sat_inner = EventuallySatInner0.eventually_sat_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model1.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Formula_Impl1_Invariant as Invariant2 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize, type a = Type.alloc_alloc_global
  clone Robinson_Decision_Impl0_Invariant as Invariant0 with function Model0.model = Model0.model
  use mach.int.Int64
  clone Robinson_Lit_Impl0_UnsatInner as UnsatInner2
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = uint8
  clone CreusotContracts_Logic_Model_Impl2_ModelTy as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_ResolveElswhere as ResolveElswhere0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = uint8
  clone Robinson_Assignments_Impl0_ModelTy as ModelTy0
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model4.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = uint8, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Robinson_Assignments_Impl2_Clone_Interface as Clone0 with function Model0.model = Model7.model,
  function Model1.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model6 with type t = Type.robinson_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Robinson_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model1.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Robinson_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Formula_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Assignments_Impl2_DoUnitPropagation_Interface as DoUnitPropagation0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Complete0.complete = Complete0.complete,
  predicate Sat0.sat = Sat0.sat, predicate Unsat0.unsat = Unsat0.unsat,
  predicate Compatible0.compatible = Compatible0.compatible,
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete
  clone Robinson_Assignments_Impl2_FindUnassigned_Interface as FindUnassigned0 with function Model0.model = Model6.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Complete0.complete = Complete0.complete,
  predicate Invariant1.invariant' = Invariant1.invariant', function Model1.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  let rec cfg inner [@cfg:stackify] (f : Type.robinson_formula_formula) (a : Type.robinson_assignments_assignments) (d : Type.robinson_decision_decisions) : bool
    requires {Invariant0.invariant' d (UInt64.to_int (Type.robinson_formula_formula_Formula_num_vars f))}
    requires {Invariant1.invariant' a f}
    requires {Invariant2.invariant' f}
    ensures { result = false -> not (EventuallySatComplete0.eventually_sat_complete f a) }
    ensures { result = true -> EventuallySat0.eventually_sat f a }
    
   = 
  var _0 : bool;
  var f_1 : Type.robinson_formula_formula;
  var a_2 : Type.robinson_assignments_assignments;
  var d_3 : Type.robinson_decision_decisions;
  var _4 : ();
  var _5 : ();
  var _6 : Type.core_option_option bool;
  var _7 : borrowed (Type.robinson_assignments_assignments);
  var _8 : Type.robinson_formula_formula;
  var _9 : isize;
  var n_10 : bool;
  var _11 : ();
  var next_12 : usize;
  var _13 : borrowed (Type.robinson_assignments_assignments);
  var _14 : Type.robinson_decision_decisions;
  var _15 : Type.robinson_formula_formula;
  var a_cloned_16 : Type.robinson_assignments_assignments;
  var _17 : Type.robinson_assignments_assignments;
  var _18 : borrowed uint8;
  var _19 : borrowed (Type.alloc_vec_vec uint8 (Type.alloc_alloc_global));
  var _20 : usize;
  var old_a1_21 : usize;
  var _22 : ();
  var _23 : bool;
  var _24 : Type.robinson_formula_formula;
  var _25 : Type.robinson_assignments_assignments;
  var _26 : Type.robinson_decision_decisions;
  var _27 : ();
  var _28 : borrowed uint8;
  var _29 : borrowed (Type.alloc_vec_vec uint8 (Type.alloc_alloc_global));
  var _30 : usize;
  var _31 : usize;
  var _32 : Type.robinson_formula_formula;
  var _33 : Type.robinson_assignments_assignments;
  var _34 : Type.robinson_decision_decisions;
  {
    f_1 <- f;
    a_2 <- a;
    d_3 <- d;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _7 <- borrow_mut a_2;
    a_2 <-  ^ _7;
    _8 <- f_1;
    _6 <- DoUnitPropagation0.do_unit_propagation _7 _8;
    goto BB4
  }
  BB4 {
    switch (_6)
      | Type.Core_Option_Option_Some _ -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    _5 <- ();
    _13 <- borrow_mut a_2;
    a_2 <-  ^ _13;
    _14 <- d_3;
    _15 <- f_1;
    next_12 <- FindUnassigned0.find_unassigned _13 _14 _15;
    goto BB7
  }
  BB6 {
    n_10 <- Type.core_option_option_Some_0 _6;
    _0 <- n_10;
    goto BB17
  }
  BB7 {
    _17 <- a_2;
    a_cloned_16 <- Clone0.clone' _17;
    goto BB8
  }
  BB8 {
    _19 <- borrow_mut (Type.robinson_assignments_assignments_Assignments_0 a_2);
    a_2 <- (let Type.Robinson_Assignments_Assignments a b = a_2 in Type.Robinson_Assignments_Assignments ( ^ _19) b);
    _20 <- next_12;
    _18 <- IndexMut0.index_mut _19 _20;
    goto BB9
  }
  BB9 {
    _18 <- { _18 with current = (1 : uint8) };
    assume { Resolve0.resolve _18 };
    old_a1_21 <- Type.robinson_assignments_assignments_Assignments_1 a_2;
    _24 <- f_1;
    _25 <- a_2;
    _26 <- d_3;
    _23 <- inner _24 _25 _26;
    goto BB10
  }
  BB10 {
    switch (_23)
      | False -> goto BB12
      | _ -> goto BB11
      end
  }
  BB11 {
    _0 <- true;
    goto BB15
  }
  BB12 {
    _22 <- ();
    _29 <- borrow_mut (Type.robinson_assignments_assignments_Assignments_0 a_cloned_16);
    a_cloned_16 <- (let Type.Robinson_Assignments_Assignments a b = a_cloned_16 in Type.Robinson_Assignments_Assignments ( ^ _29) b);
    _30 <- next_12;
    _28 <- IndexMut0.index_mut _29 _30;
    goto BB13
  }
  BB13 {
    _28 <- { _28 with current = (0 : uint8) };
    assume { Resolve0.resolve _28 };
    _31 <- old_a1_21;
    a_cloned_16 <- (let Type.Robinson_Assignments_Assignments a b = a_cloned_16 in Type.Robinson_Assignments_Assignments a _31);
    _32 <- f_1;
    _33 <- a_cloned_16;
    _34 <- d_3;
    _0 <- inner _32 _33 _34;
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Robinson_Solver_Solver_Interface
  use Type
  use prelude.Prelude
  clone Robinson_Formula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone Robinson_Formula_Impl1_ContainsEmptyClause_Interface as ContainsEmptyClause0
  clone Robinson_Formula_Impl1_EventuallySatNoAss_Interface as EventuallySatNoAss0
  val solver [@cfg:stackify] (formula : borrowed (Type.robinson_formula_formula)) : Type.robinson_solver_satresult
    ensures { match (result) with
      | Type.Robinson_Solver_SatResult_Sat _assn -> EventuallySatNoAss0.eventually_sat_no_ass ( * formula)
      | Type.Robinson_Solver_SatResult_Unsat -> ContainsEmptyClause0.contains_empty_clause ( * formula) || not (EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( * formula))
      | _ -> true
      end }
    
end
module Robinson_Solver_Solver
  use Type
  use prelude.Prelude
  clone Robinson_Lit_Impl0_SatInner as SatInner2
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.robinson_lit_lit,
  type a = Type.alloc_alloc_global
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.robinson_clause_clause,
  type a = Type.alloc_alloc_global
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatNoAss as EventuallySatNoAss0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_ContainsEmptyClause as ContainsEmptyClause0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  use mach.int.Int
  use mach.int.Int64
  use prelude.UInt8
  use mach.int.UInt64
  clone Robinson_Lit_Impl0_Invariant as Invariant4
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = usize, type a = Type.alloc_alloc_global
  clone Robinson_Decision_Impl0_Invariant as Invariant2 with function Model0.model = Model7.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.robinson_formula_formula
  clone Robinson_Formula_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = uint8, type a = Type.alloc_alloc_global
  clone Robinson_Assignments_Impl0_Model as Model5 with function Model0.model = Model4.model
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model5.model
  clone Alloc_Vec_Impl0_New_Interface as New2 with type t = uint8, function Model0.model = Model4.model
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant4.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant3 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Robinson_Formula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Formula_Impl0_Model as Model6 with function Model0.model = Model0.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.robinson_formula_formula,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model6.model
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Decision_Impl1_New_Interface as New1 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant'
  clone Robinson_Assignments_Impl2_New_Interface as New0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model5.model, predicate Unset0.unset = Unset0.unset,
  predicate Invariant1.invariant' = Invariant1.invariant'
  clone Robinson_Formula_Impl1_EventuallySatInner as EventuallySatInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySat as EventuallySat0 with function Model0.model = Model5.model,
  predicate EventuallySatInner0.eventually_sat_inner = EventuallySatInner0.eventually_sat_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model5.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Solver_Inner_Interface as Inner0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant0.invariant',
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
  predicate EventuallySat0.eventually_sat = EventuallySat0.eventually_sat
  clone Robinson_Formula_Impl2_CheckFormulaInvariant_Interface as CheckFormulaInvariant0 with predicate EventuallySatNoAss0.eventually_sat_no_ass = EventuallySatNoAss0.eventually_sat_no_ass,
  function Model0.model = Model3.model, function Model1.model = Model4.model,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner,
  predicate ContainsEmptyClause0.contains_empty_clause = ContainsEmptyClause0.contains_empty_clause,
  predicate Invariant0.invariant' = Invariant0.invariant'
  let rec cfg solver [@cfg:stackify] (formula : borrowed (Type.robinson_formula_formula)) : Type.robinson_solver_satresult
    ensures { match (result) with
      | Type.Robinson_Solver_SatResult_Sat _assn -> EventuallySatNoAss0.eventually_sat_no_ass ( * formula)
      | Type.Robinson_Solver_SatResult_Unsat -> ContainsEmptyClause0.contains_empty_clause ( * formula) || not (EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( * formula))
      | _ -> true
      end }
    
   = 
  var _0 : Type.robinson_solver_satresult;
  var formula_1 : borrowed (Type.robinson_formula_formula);
  var _2 : ();
  var _3 : ();
  var _4 : Type.robinson_solver_satresult;
  var _5 : Type.robinson_formula_formula;
  var _6 : isize;
  var o_7 : Type.robinson_solver_satresult;
  var _8 : ();
  var assignments_9 : Type.robinson_assignments_assignments;
  var _10 : Type.robinson_formula_formula;
  var decisions_11 : Type.robinson_decision_decisions;
  var _12 : Type.robinson_formula_formula;
  var _13 : ();
  var _14 : bool;
  var _15 : Type.robinson_formula_formula;
  var _16 : Type.robinson_assignments_assignments;
  var _17 : Type.robinson_decision_decisions;
  var _18 : Type.robinson_decision_decisions;
  var _19 : ();
  var _20 : Type.alloc_vec_vec uint8 (Type.alloc_alloc_global);
  {
    formula_1 <- formula;
    goto BB0
  }
  BB0 {
    _5 <-  * formula_1;
    _4 <- CheckFormulaInvariant0.check_formula_invariant _5;
    goto BB1
  }
  BB1 {
    switch (_4)
      | Type.Robinson_Solver_SatResult_Unknown -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve formula_1 };
    o_7 <- _4;
    _0 <- o_7;
    goto BB15
  }
  BB3 {
    _3 <- ();
    goto BB4
  }
  BB4 {
    _10 <-  * formula_1;
    assignments_9 <- New0.new _10;
    goto BB5
  }
  BB5 {
    _12 <-  * formula_1;
    decisions_11 <- New1.new _12;
    goto BB6
  }
  BB6 {
    _15 <-  * formula_1;
    assume { Resolve0.resolve formula_1 };
    _16 <- assignments_9;
    _18 <- decisions_11;
    _17 <- _18;
    _14 <- Inner0.inner _15 _16 _17;
    goto BB7
  }
  BB7 {
    switch (_14)
      | False -> goto BB11
      | _ -> goto BB8
      end
  }
  BB8 {
    _20 <- New2.new ();
    goto BB9
  }
  BB9 {
    _0 <- Type.Robinson_Solver_SatResult_Sat _20;
    goto BB10
  }
  BB10 {
    goto BB12
  }
  BB11 {
    _13 <- ();
    _0 <- Type.Robinson_Solver_SatResult_Unsat;
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB17
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    return _0
  }
  
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Robinson_Lit_Impl2
  use Type
  clone Robinson_Lit_Impl2_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.robinson_lit_lit, val clone' = Clone0.clone'
end
module Robinson_Lit_Impl3
  
end
