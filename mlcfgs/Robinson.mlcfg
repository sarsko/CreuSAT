
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type core_ptr_nonnull_nonnull_type 't =
    | Core_Ptr_NonNull_NonNull_Type opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_ptr_unique_unique_type 't =
    | Core_Ptr_Unique_Unique_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type
  type alloc_rawvec_rawvec_type 't 'a =
    | Alloc_RawVec_RawVec_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type
  type alloc_vec_vec_type 't 'a =
    | Alloc_Vec_Vec_Type (Alloc_RawVec_RawVec_Type.alloc_rawvec_rawvec_type 't 'a) usize
    
end
module Robinson_Lit_Lit_Type
  use mach.int.Int
  use prelude.UIntSize
  type robinson_lit_lit_type  =
    | Robinson_Lit_Lit_Type usize bool
    
  let function robinson_lit_lit_type_Lit_idx (self : robinson_lit_lit_type) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Robinson_Lit_Lit_Type a _ -> a
      end
  let function robinson_lit_lit_type_Lit_polarity (self : robinson_lit_lit_type) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Robinson_Lit_Lit_Type _ a -> a
      end
end
module Alloc_Alloc_Global_Type
  type alloc_alloc_global_type  =
    | Alloc_Alloc_Global_Type
    
end
module Robinson_Clause_Clause_Type
  use Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type
  type robinson_clause_clause_type  =
    | Robinson_Clause_Clause_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    
  let function robinson_clause_clause_type_Clause_rest (self : robinson_clause_clause_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Robinson_Clause_Clause_Type a -> a
      end
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a . Seq.length (model self) <= 18446744073709551615
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) =
    forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_Impl3
  type t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module Robinson_Clause_Impl2_ClauseFromVec_Interface
  use Robinson_Clause_Clause_Type
  use Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type
  val clause_from_vec [@cfg:stackify] (vec : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : Robinson_Clause_Clause_Type.robinson_clause_clause_type
    
end
module Robinson_Clause_Impl2_ClauseFromVec
  use Robinson_Clause_Clause_Type
  use Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve1.resolve
  let rec cfg clause_from_vec [@cfg:stackify] [#"../Robinson/src/clause.rs" 111 4 111 51] (vec : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : Robinson_Clause_Clause_Type.robinson_clause_clause_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var vec_1 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _2 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  {
    vec_1 <- vec;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _2 };
    _2 <- vec_1;
    vec_1 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    _0 <- Robinson_Clause_Clause_Type.Robinson_Clause_Clause_Type _2;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module Robinson_Assignments_Assignments_Type
  use mach.int.Int
  use prelude.UInt8
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  type robinson_assignments_assignments_type  =
    | Robinson_Assignments_Assignments_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) usize
    
  let function robinson_assignments_assignments_type_Assignments_0 (self : robinson_assignments_assignments_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Robinson_Assignments_Assignments_Type a _ -> a
      end
  let function robinson_assignments_assignments_type_Assignments_1 (self : robinson_assignments_assignments_type) : usize
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Robinson_Assignments_Assignments_Type _ a -> a
      end
end
module Robinson_Assignments_Impl0_Model_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Assignments_Assignments_Type
  function model (self : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) : Seq.seq uint8
end
module Robinson_Assignments_Impl0_Model
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Assignments_Assignments_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  function model [#"../Robinson/src/assignments.rs" 21 4 21 35] (self : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) : Seq.seq uint8
    
   =
    [#"../Robinson/src/assignments.rs" 20 4 20 12] Model0.model (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 self)
end
module Robinson_Logic_Unset_Interface
  use mach.int.Int
  use prelude.UInt8
  predicate unset (v : uint8)
end
module Robinson_Logic_Unset
  use mach.int.Int
  use prelude.UInt8
  use mach.int.Int32
  predicate unset [#"../Robinson/src/logic.rs" 44 0 44 38] (v : uint8) =
    [#"../Robinson/src/logic.rs" 45 4 51 5] if UInt8.to_int v >= 2 then true else false
end
module Robinson_Assignments_CompatibleInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  predicate compatible_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module Robinson_Assignments_CompatibleInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use mach.int.Int32
  clone Robinson_Logic_Unset_Interface as Unset0
  predicate compatible_inner [#"../Robinson/src/assignments.rs" 27 0 27 78] (a : Seq.seq uint8) (a2 : Seq.seq uint8) =
    [#"../Robinson/src/assignments.rs" 29 8 30 43] Seq.length a = Seq.length a2 /\ (forall i : (int) . 0 <= i /\ i < Seq.length a -> Unset0.unset (Seq.get a i) \/ Seq.get a i = Seq.get a2 i)
end
module Robinson_Assignments_CompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  predicate complete_inner (a : Seq.seq uint8)
end
module Robinson_Assignments_CompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use mach.int.Int32
  clone Robinson_Logic_Unset_Interface as Unset0
  predicate complete_inner [#"../Robinson/src/assignments.rs" 35 0 35 52] (a : Seq.seq uint8) =
    [#"../Robinson/src/assignments.rs" 36 4 38 5] forall i : (int) . 0 <= i /\ i < Seq.length a -> not Unset0.unset (Seq.get a i)
end
module Robinson_Assignments_CompatibleCompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  predicate compatible_complete_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module Robinson_Assignments_CompatibleCompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  clone Robinson_Assignments_CompleteInner_Interface as CompleteInner0
  clone Robinson_Assignments_CompatibleInner_Interface as CompatibleInner0
  predicate compatible_complete_inner [#"../Robinson/src/assignments.rs" 42 0 42 87] (a : Seq.seq uint8) (a2 : Seq.seq uint8)
    
   =
    [#"../Robinson/src/assignments.rs" 43 4 43 49] CompatibleInner0.compatible_inner a a2 /\ CompleteInner0.complete_inner a2
end
module Robinson_Formula_Formula_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type
  type robinson_formula_formula_type  =
    | Robinson_Formula_Formula_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Clause_Clause_Type.robinson_clause_clause_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) usize
    
  let function robinson_formula_formula_type_Formula_num_vars (self : robinson_formula_formula_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Robinson_Formula_Formula_Type _ a -> a
      end
  let function robinson_formula_formula_type_Formula_clauses (self : robinson_formula_formula_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Clause_Clause_Type.robinson_clause_clause_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Robinson_Formula_Formula_Type a _ -> a
      end
end
module Robinson_Assignments_AssignmentsInvariant_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  predicate assignments_invariant (a : Seq.seq uint8) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type)
end
module Robinson_Assignments_AssignmentsInvariant
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  use mach.int.UInt64
  predicate assignments_invariant [#"../Robinson/src/assignments.rs" 47 0 47 71] (a : Seq.seq uint8) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type)
    
   =
    [#"../Robinson/src/assignments.rs" 48 16 48 38] UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f) = Seq.length a
end
module Robinson_Assignments_Impl1_Invariant_Interface
  use Robinson_Formula_Formula_Type
  use Robinson_Assignments_Assignments_Type
  predicate invariant' (self : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type)
    
end
module Robinson_Assignments_Impl1_Invariant
  use Robinson_Formula_Formula_Type
  use Robinson_Assignments_Assignments_Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate invariant' [#"../Robinson/src/assignments.rs" 54 4 54 46] (self : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type)
    
   =
    [#"../Robinson/src/assignments.rs" 56 12 56 66] UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f) = Seq.length (Model0.model self) /\ UInt64.to_int (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_1 self) <= UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f)
end
module Robinson_Assignments_Impl1_Compatible_Interface
  use Robinson_Assignments_Assignments_Type
  predicate compatible (self : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) (a2 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
end
module Robinson_Assignments_Impl1_Compatible
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_CompatibleInner_Interface as CompatibleInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate compatible [#"../Robinson/src/assignments.rs" 61 4 61 52] (self : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) (a2 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
   =
    [#"../Robinson/src/assignments.rs" 62 20 62 48] CompatibleInner0.compatible_inner (Model0.model self) (Model0.model a2)
end
module Robinson_Assignments_Impl1_Complete_Interface
  use Robinson_Assignments_Assignments_Type
  predicate complete (self : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
end
module Robinson_Assignments_Impl1_Complete
  use Robinson_Assignments_Assignments_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate complete [#"../Robinson/src/assignments.rs" 66 4 66 33] (self : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
   =
    [#"../Robinson/src/assignments.rs" 67 8 69 9] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> not Unset0.unset (Seq.get (Model0.model self) i)
end
module Robinson_Assignments_Impl1_CompatibleComplete_Interface
  use Robinson_Assignments_Assignments_Type
  predicate compatible_complete (self : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) (a2 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
end
module Robinson_Assignments_Impl1_CompatibleComplete
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl1_Complete_Interface as Complete0
  clone Robinson_Assignments_Impl1_Compatible_Interface as Compatible0
  predicate compatible_complete [#"../Robinson/src/assignments.rs" 73 4 73 61] (self : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) (a2 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
   =
    [#"../Robinson/src/assignments.rs" 74 8 74 44] Compatible0.compatible self a2 /\ Complete0.complete a2
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module Robinson_Assignments_Impl0_ModelTy_Type
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  type modelTy  =
    Seq.seq uint8
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module Robinson_Assignments_Impl0
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  clone Robinson_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type modelTy = ModelTy0.modelTy
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val new [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val new [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module Robinson_Assignments_Impl2_Clone_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_Model_Interface as Model1
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val clone' [@cfg:stackify] (self : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type
    ensures { [#"../Robinson/src/assignments.rs" 80 4 80 89] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> Seq.get (Model0.model self) i = Seq.get (Model1.model result) i }
    ensures { [#"../Robinson/src/assignments.rs" 81 14 81 46] Seq.length (Model0.model self) = Seq.length (Model1.model result) }
    ensures { [#"../Robinson/src/assignments.rs" 82 14 82 34] UInt64.to_int (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_1 result) = UInt64.to_int (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_1 self) }
    
end
module Robinson_Assignments_Impl2_Clone
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use prelude.UIntSize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve0 with type t = uint8, function Model0.model = Model2.model,
  predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = uint8, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = uint8, function Model0.model = Model2.model
  let rec cfg clone' [@cfg:stackify] [#"../Robinson/src/assignments.rs" 83 4 83 31] (self : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type
    ensures { [#"../Robinson/src/assignments.rs" 80 4 80 89] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> Seq.get (Model0.model self) i = Seq.get (Model1.model result) i }
    ensures { [#"../Robinson/src/assignments.rs" 81 14 81 46] Seq.length (Model0.model self) = Seq.length (Model1.model result) }
    ensures { [#"../Robinson/src/assignments.rs" 82 14 82 34] UInt64.to_int (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_1 result) = UInt64.to_int (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_1 self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var self_1 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var out_2 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _10 : ();
  var _11 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _12 : uint8;
  var _13 : uint8;
  var _14 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _15 : usize;
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var _19 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _20 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    out_2 <- ([#"../Robinson/src/assignments.rs" 84 22 84 32] New0.new ());
    goto BB1
  }
  BB1 {
    i_3 <- (0 : usize);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant loop_invariant { [#"../Robinson/src/assignments.rs" 86 36 86 55] UInt64.to_int i_3 <= Seq.length (Model0.model self_1) };
    invariant equality { [#"../Robinson/src/assignments.rs" 86 8 86 57] forall j : (int) . 0 <= j /\ j < UInt64.to_int i_3 -> Seq.get (Model2.model out_2) j = Seq.get (Model0.model self_1) j };
    invariant len { [#"../Robinson/src/assignments.rs" 88 25 88 43] Seq.length (Model2.model out_2) = UInt64.to_int i_3 };
    _7 <- i_3;
    _9 <- Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 self_1;
    _8 <- ([#"../Robinson/src/assignments.rs" 89 18 89 30] Len0.len _9);
    goto BB5
  }
  BB5 {
    _6 <- ([#"../Robinson/src/assignments.rs" 89 14 89 30] _7 < _8);
    switch (_6)
      | False -> goto BB9
      | _ -> goto BB6
      end
  }
  BB6 {
    _11 <- borrow_mut out_2;
    out_2 <-  ^ _11;
    _14 <- Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 self_1;
    _15 <- i_3;
    _13 <- ([#"../Robinson/src/assignments.rs" 90 21 90 30] Index0.index _14 _15);
    goto BB7
  }
  BB7 {
    _12 <- _13;
    _10 <- ([#"../Robinson/src/assignments.rs" 90 12 90 31] Push0.push _11 _12);
    goto BB8
  }
  BB8 {
    i_3 <- ([#"../Robinson/src/assignments.rs" 91 12 91 18] i_3 + (1 : usize));
    _5 <- ();
    goto BB4
  }
  BB9 {
    _4 <- ();
    assume { Resolve0.resolve _19 };
    _19 <- out_2;
    out_2 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    _20 <- Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_1 self_1;
    _0 <- Robinson_Assignments_Assignments_Type.Robinson_Assignments_Assignments_Type _19 _20;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Robinson_Clause_Impl0_Model_Interface
  use seq.Seq
  use Robinson_Lit_Lit_Type
  use Robinson_Clause_Clause_Type
  function model (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) : Seq.seq (Robinson_Lit_Lit_Type.robinson_lit_lit_type)
    
end
module Robinson_Clause_Impl0_Model
  use seq.Seq
  use Robinson_Lit_Lit_Type
  use Robinson_Clause_Clause_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  function model [#"../Robinson/src/clause.rs" 21 4 21 35] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) : Seq.seq (Robinson_Lit_Lit_Type.robinson_lit_lit_type)
    
   =
    [#"../Robinson/src/clause.rs" 20 4 20 12] Model0.model (Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest self)
end
module Robinson_Lit_Impl1_Invariant_Interface
  use mach.int.Int
  use Robinson_Lit_Lit_Type
  predicate invariant' (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (n : int)
end
module Robinson_Lit_Impl1_Invariant
  use mach.int.Int
  use Robinson_Lit_Lit_Type
  use mach.int.UInt64
  predicate invariant' [#"../Robinson/src/lit.rs" 39 4 39 42] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (n : int)
    
   =
    [#"../Robinson/src/lit.rs" 40 20 40 33] UInt64.to_int (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self) < n
end
module Robinson_Clause_Impl1_VarsInRange_Interface
  use mach.int.Int
  use Robinson_Clause_Clause_Type
  predicate vars_in_range (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (n : int)
end
module Robinson_Clause_Impl1_VarsInRange
  use mach.int.Int
  use Robinson_Clause_Clause_Type
  use mach.int.Int32
  use seq.Seq
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Invariant_Interface as Invariant0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  predicate vars_in_range [#"../Robinson/src/clause.rs" 81 4 81 46] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (n : int)
    
   =
    [#"../Robinson/src/clause.rs" 82 8 85 9] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> Invariant0.invariant' (Seq.get (Model0.model self) i) n
end
module Robinson_Clause_Impl1_Invariant_Interface
  use mach.int.Int
  use Robinson_Clause_Clause_Type
  predicate invariant' (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (n : int)
end
module Robinson_Clause_Impl1_Invariant
  use mach.int.Int
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_VarsInRange_Interface as VarsInRange0
  predicate invariant' [#"../Robinson/src/clause.rs" 97 4 97 42] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (n : int)
    
   =
    [#"../Robinson/src/clause.rs" 98 8 98 29] VarsInRange0.vars_in_range self n
end
module Robinson_Formula_Impl1_Invariant_Interface
  use Robinson_Formula_Formula_Type
  predicate invariant' (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type)
end
module Robinson_Formula_Impl1_Invariant
  use Robinson_Formula_Formula_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type
  clone Robinson_Clause_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate invariant' [#"../Robinson/src/formula.rs" 38 4 38 34] (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type)
    
   =
    [#"../Robinson/src/formula.rs" 39 8 42 9] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses self)) -> Invariant0.invariant' (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses self)) i) (UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars self))
end
module Robinson_Clause_Impl0_ModelTy_Type
  use seq.Seq
  use Robinson_Lit_Lit_Type
  type modelTy  =
    Seq.seq (Robinson_Lit_Lit_Type.robinson_lit_lit_type)
end
module Robinson_Clause_Impl0
  use Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_ModelTy_Type as ModelTy0
  clone Robinson_Clause_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type modelTy = ModelTy0.modelTy
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : (int) . 0 <= i /\ i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module Alloc_Vec_FromElem
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : (int) . 0 <= i /\ i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module Robinson_Assignments_Impl2_New_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Borrow
  use Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type
    requires {[#"../Robinson/src/assignments.rs" 97 15 97 28] Invariant0.invariant' f}
    ensures { [#"../Robinson/src/assignments.rs" 98 14 98 34] Invariant1.invariant' result f }
    ensures { [#"../Robinson/src/assignments.rs" 99 4 99 84] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model result) -> Unset0.unset (Seq.get (Model0.model result) i) }
    
end
module Robinson_Assignments_Impl2_New
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Borrow
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Lit_Impl1_Invariant as Invariant3
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model0.model
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  use prelude.UIntSize
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = uint8, function Model0.model = Model2.model
  let rec cfg new [@cfg:stackify] [#"../Robinson/src/assignments.rs" 100 4 100 35] (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type
    requires {[#"../Robinson/src/assignments.rs" 97 15 97 28] Invariant0.invariant' f}
    ensures { [#"../Robinson/src/assignments.rs" 98 14 98 34] Invariant1.invariant' result f }
    ensures { [#"../Robinson/src/assignments.rs" 99 4 99 84] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model result) -> Unset0.unset (Seq.get (Model0.model result) i) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var f_1 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var _2 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _3 : usize;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _3 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f_1;
    _2 <- ([#"../Robinson/src/assignments.rs" 101 20 101 51] FromElem0.from_elem (2 : uint8) _3);
    goto BB1
  }
  BB1 {
    _0 <- Robinson_Assignments_Assignments_Type.Robinson_Assignments_Assignments_Type _2 (0 : usize);
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module Robinson_Decision_Decisions_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  type robinson_decision_decisions_type  =
    | Robinson_Decision_Decisions_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    
  let function robinson_decision_decisions_type_Decisions_lit_order (self : robinson_decision_decisions_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Robinson_Decision_Decisions_Type a -> a
      end
end
module Robinson_Decision_Impl0_Invariant_Interface
  use mach.int.Int
  use Robinson_Decision_Decisions_Type
  predicate invariant' (self : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type) (n : int)
end
module Robinson_Decision_Impl0_Invariant
  use mach.int.Int
  use Robinson_Decision_Decisions_Type
  use seq.Seq
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate invariant' [#"../Robinson/src/decision.rs" 15 4 15 42] (self : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type) (n : int)
    
   =
    [#"../Robinson/src/decision.rs" 16 8 20 9] Seq.length (Model0.model (Robinson_Decision_Decisions_Type.robinson_decision_decisions_type_Decisions_lit_order self)) = n /\ (forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Robinson_Decision_Decisions_Type.robinson_decision_decisions_type_Decisions_lit_order self)) -> UInt64.to_int (Seq.get (Model0.model (Robinson_Decision_Decisions_Type.robinson_decision_decisions_type_Decisions_lit_order self)) i) < n)
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module Robinson_Assignments_Impl2_FindUnassigned_Interface
  use prelude.Borrow
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  use Robinson_Formula_Formula_Type
  use Robinson_Decision_Decisions_Type
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_Model_Interface as Model1
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Decision_Impl0_Invariant_Interface as Invariant1
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Robinson_Assignments_Impl1_Complete_Interface as Complete0
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant0
  val find_unassigned [@cfg:stackify] (self : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)) (d : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type) (_f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : usize
    requires {[#"../Robinson/src/assignments.rs" 105 4 105 43] Invariant0.invariant' ( * self) _f}
    requires {[#"../Robinson/src/assignments.rs" 106 15 106 31] not Complete0.complete ( * self)}
    requires {[#"../Robinson/src/assignments.rs" 107 15 107 41] Invariant1.invariant' d (Seq.length (Model0.model self))}
    ensures { [#"../Robinson/src/assignments.rs" 105 4 105 43] Invariant0.invariant' ( ^ self) _f }
    ensures { [#"../Robinson/src/assignments.rs" 108 14 108 64] UInt64.to_int result < Seq.length (Model0.model self) /\ Unset0.unset (Seq.get (Model0.model self) (UInt64.to_int result)) }
    ensures { [#"../Robinson/src/assignments.rs" 109 14 109 29] Model0.model self = Model1.model ( ^ self) }
    
end
module Robinson_Assignments_Impl2_FindUnassigned
  use prelude.Borrow
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.Int32
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Formula_Formula_Type
  use Robinson_Decision_Decisions_Type
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Decision_Impl0_Invariant as Invariant1 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Robinson_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy2 with type t = uint8
  clone Core_Slice_Index_Impl2_Output_Type as Output1 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = usize
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = usize
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model3.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = uint8, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = usize, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model
  let rec cfg find_unassigned [@cfg:stackify] [#"../Robinson/src/assignments.rs" 110 4 110 75] (self : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)) (d : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type) (_f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : usize
    requires {[#"../Robinson/src/assignments.rs" 105 4 105 43] Invariant0.invariant' ( * self) _f}
    requires {[#"../Robinson/src/assignments.rs" 106 15 106 31] not Complete0.complete ( * self)}
    requires {[#"../Robinson/src/assignments.rs" 107 15 107 41] Invariant1.invariant' d (Seq.length (Model0.model self))}
    ensures { [#"../Robinson/src/assignments.rs" 105 4 105 43] Invariant0.invariant' ( ^ self) _f }
    ensures { [#"../Robinson/src/assignments.rs" 108 14 108 64] UInt64.to_int result < Seq.length (Model0.model self) /\ Unset0.unset (Seq.get (Model0.model self) (UInt64.to_int result)) }
    ensures { [#"../Robinson/src/assignments.rs" 109 14 109 29] Model0.model self = Model1.model ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type);
  var d_2 : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type;
  var _f_3 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var _4 : ();
  var i_5 : usize;
  var _6 : ();
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var curr_12 : uint8;
  var _13 : uint8;
  var _14 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _15 : usize;
  var _16 : usize;
  var _17 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _18 : usize;
  var _19 : ();
  var _20 : bool;
  var _21 : uint8;
  var _22 : ();
  var _23 : usize;
  var _24 : usize;
  var _25 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _26 : usize;
  var _27 : ();
  var _28 : ();
  var _29 : ();
  var _30 : ();
  var _31 : bool;
  var _32 : usize;
  var _33 : usize;
  var _34 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _35 : ();
  var _36 : bool;
  var _37 : uint8;
  var _38 : uint8;
  var _39 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _40 : usize;
  var _41 : ();
  var _42 : ();
  var _43 : ();
  var _44 : ();
  var _45 : ();
  {
    self_1 <- self;
    d_2 <- d;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    i_5 <- Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_1 ( * self_1);
    goto BB1
  }
  BB1 {
    invariant i_bound { [#"../Robinson/src/assignments.rs" 112 29 112 55] UInt64.to_int i_5 <= Seq.length (Model2.model (Robinson_Decision_Decisions_Type.robinson_decision_decisions_type_Decisions_lit_order d_2)) };
    _9 <- i_5;
    _11 <- Robinson_Decision_Decisions_Type.robinson_decision_decisions_type_Decisions_lit_order d_2;
    _10 <- ([#"../Robinson/src/assignments.rs" 113 18 113 35] Len0.len _11);
    goto BB2
  }
  BB2 {
    _8 <- ([#"../Robinson/src/assignments.rs" 113 14 113 35] _9 < _10);
    switch (_8)
      | False -> goto BB9
      | _ -> goto BB3
      end
  }
  BB3 {
    _14 <- Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 ( * self_1);
    _17 <- Robinson_Decision_Decisions_Type.robinson_decision_decisions_type_Decisions_lit_order d_2;
    _18 <- i_5;
    _16 <- ([#"../Robinson/src/assignments.rs" 114 30 114 44] Index0.index _17 _18);
    goto BB4
  }
  BB4 {
    _15 <- _16;
    _13 <- ([#"../Robinson/src/assignments.rs" 114 23 114 45] Index1.index _14 _15);
    goto BB5
  }
  BB5 {
    curr_12 <- _13;
    _21 <- curr_12;
    _20 <- ([#"../Robinson/src/assignments.rs" 115 15 115 24] _21 >= (2 : uint8));
    switch (_20)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB6 {
    _23 <- i_5;
    self_1 <- { self_1 with current = (let Robinson_Assignments_Assignments_Type.Robinson_Assignments_Assignments_Type a b =  * self_1 in Robinson_Assignments_Assignments_Type.Robinson_Assignments_Assignments_Type a ([#"../Robinson/src/assignments.rs" 116 16 116 30] _23 + (1 : usize))) };
    assume { Resolve0.resolve self_1 };
    _25 <- Robinson_Decision_Decisions_Type.robinson_decision_decisions_type_Decisions_lit_order d_2;
    _26 <- i_5;
    _24 <- ([#"../Robinson/src/assignments.rs" 117 23 117 37] Index0.index _25 _26);
    goto BB7
  }
  BB7 {
    _0 <- _24;
    goto BB17
  }
  BB8 {
    _19 <- ();
    i_5 <- ([#"../Robinson/src/assignments.rs" 119 12 119 18] i_5 + (1 : usize));
    _7 <- ();
    goto BB1
  }
  BB9 {
    _6 <- ();
    i_5 <- (0 : usize);
    goto BB10
  }
  BB10 {
    invariant prev { [#"../Robinson/src/assignments.rs" 124 8 124 82] forall j : (int) . 0 <= j /\ j < UInt64.to_int i_5 -> not Unset0.unset (Seq.get (Model0.model self_1) j) };
    _32 <- i_5;
    _34 <- Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 ( * self_1);
    _33 <- ([#"../Robinson/src/assignments.rs" 125 18 125 30] Len1.len _34);
    goto BB11
  }
  BB11 {
    _31 <- ([#"../Robinson/src/assignments.rs" 125 14 125 30] _32 < _33);
    switch (_31)
      | False -> goto BB16
      | _ -> goto BB12
      end
  }
  BB12 {
    _39 <- Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 ( * self_1);
    _40 <- i_5;
    _38 <- ([#"../Robinson/src/assignments.rs" 126 15 126 24] Index1.index _39 _40);
    goto BB13
  }
  BB13 {
    _37 <- _38;
    _36 <- ([#"../Robinson/src/assignments.rs" 126 15 126 29] _37 >= (2 : uint8));
    switch (_36)
      | False -> goto BB15
      | _ -> goto BB14
      end
  }
  BB14 {
    assume { Resolve0.resolve self_1 };
    _0 <- i_5;
    goto BB17
  }
  BB15 {
    _35 <- ();
    i_5 <- ([#"../Robinson/src/assignments.rs" 129 12 129 18] i_5 + (1 : usize));
    _7 <- ();
    goto BB10
  }
  BB16 {
    assume { Resolve0.resolve self_1 };
    _30 <- ();
    absurd
  }
  BB17 {
    return _0
  }
  
end
module Robinson_Lit_Impl1_SatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type
  predicate sat_inner (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Seq.seq uint8)
end
module Robinson_Lit_Impl1_SatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type
  use mach.int.UInt64
  use mach.int.Int32
  predicate sat_inner [#"../Robinson/src/lit.rs" 44 4 44 57] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/lit.rs" 46 12 49 13] if Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_polarity self then
      UInt8.to_int (Seq.get a (UInt64.to_int (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self))) = 1
    else
      UInt8.to_int (Seq.get a (UInt64.to_int (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self))) = 0
    
end
module Robinson_Clause_Impl1_SatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type
  predicate sat_inner (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Seq.seq uint8)
end
module Robinson_Clause_Impl1_SatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type
  use mach.int.Int32
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  predicate sat_inner [#"../Robinson/src/clause.rs" 63 4 63 57] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/clause.rs" 64 8 67 9] exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) /\ SatInner0.sat_inner (Seq.get (Model0.model self) i) a
end
module Robinson_Formula_Impl1_SatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  predicate sat_inner (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8)
end
module Robinson_Formula_Impl1_SatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type
  clone Robinson_Clause_Impl1_SatInner_Interface as SatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate sat_inner [#"../Robinson/src/formula.rs" 82 4 82 57] (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/formula.rs" 83 8 86 9] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses self)) -> SatInner0.sat_inner (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses self)) i) a
end
module Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  predicate eventually_sat_complete_inner (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8)
    
end
module Robinson_Formula_Impl1_EventuallySatCompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  use mach.int.UInt64
  clone Robinson_Formula_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Assignments_CompatibleCompleteInner_Interface as CompatibleCompleteInner0
  predicate eventually_sat_complete_inner [#"../Robinson/src/formula.rs" 65 4 65 77] (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/formula.rs" 66 8 68 9] exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars self) /\ CompatibleCompleteInner0.compatible_complete_inner a a2 /\ SatInner0.sat_inner self a2
end
module Robinson_Formula_Impl1_EventuallySatComplete_Interface
  use Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type
  predicate eventually_sat_complete (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
end
module Robinson_Formula_Impl1_EventuallySatComplete
  use Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate eventually_sat_complete [#"../Robinson/src/formula.rs" 72 4 72 64] (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
   =
    [#"../Robinson/src/formula.rs" 73 20 73 58] EventuallySatCompleteInner0.eventually_sat_complete_inner self (Model0.model a)
end
module Robinson_Clause_ClauseState_Type
  type robinson_clause_clausestate_type  =
    | Robinson_Clause_ClauseState_Sat_Type
    | Robinson_Clause_ClauseState_Unsat_Type
    | Robinson_Clause_ClauseState_Unit_Type
    | Robinson_Clause_ClauseState_Unknown_Type
    
end
module Robinson_Lit_Impl1_UnsetInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type
  predicate unset_inner (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Seq.seq uint8)
end
module Robinson_Lit_Impl1_UnsetInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type
  use mach.int.UInt64
  use mach.int.Int32
  predicate unset_inner [#"../Robinson/src/lit.rs" 64 4 64 59] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/lit.rs" 66 12 66 32] UInt8.to_int (Seq.get a (UInt64.to_int (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self))) >= 2
end
module Robinson_Clause_Impl1_UnitInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type
  predicate unit_inner (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Seq.seq uint8)
end
module Robinson_Clause_Impl1_UnitInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type
  use mach.int.Int32
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsetInner_Interface as UnsetInner0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  clone Robinson_Clause_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Clause_Impl1_VarsInRange_Interface as VarsInRange0
  predicate unit_inner [#"../Robinson/src/clause.rs" 36 4 36 58] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/clause.rs" 37 8 42 9] VarsInRange0.vars_in_range self (Seq.length a) /\ not SatInner0.sat_inner self a /\ (exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) /\ UnsetInner0.unset_inner (Seq.get (Model0.model self) i) a /\ (forall j : (int) . 0 <= j /\ j < Seq.length (Model0.model self) /\ j <> i -> not UnsetInner0.unset_inner (Seq.get (Model0.model self) j) a))
end
module Robinson_Clause_Impl1_Unit_Interface
  use Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type
  predicate unit (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
end
module Robinson_Clause_Impl1_Unit
  use Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_UnitInner_Interface as UnitInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate unit [#"../Robinson/src/clause.rs" 45 4 45 45] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
   =
    [#"../Robinson/src/clause.rs" 46 20 46 39] UnitInner0.unit_inner self (Model0.model a)
end
module Robinson_Clause_Impl1_Sat_Interface
  use Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type
  predicate sat (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
end
module Robinson_Clause_Impl1_Sat
  use Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate sat [#"../Robinson/src/clause.rs" 71 4 71 44] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
   =
    [#"../Robinson/src/clause.rs" 72 20 72 38] SatInner0.sat_inner self (Model0.model a)
end
module Robinson_Lit_Impl1_UnsatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type
  predicate unsat_inner (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Seq.seq uint8)
end
module Robinson_Lit_Impl1_UnsatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Lit_Lit_Type
  use mach.int.UInt64
  use mach.int.Int32
  predicate unsat_inner [#"../Robinson/src/lit.rs" 54 4 54 59] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/lit.rs" 56 12 59 13] if Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_polarity self then
      UInt8.to_int (Seq.get a (UInt64.to_int (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self))) = 0
    else
      UInt8.to_int (Seq.get a (UInt64.to_int (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self))) = 1
    
end
module Robinson_Clause_Impl1_UnsatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type
  predicate unsat_inner (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Seq.seq uint8)
end
module Robinson_Clause_Impl1_UnsatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type
  use mach.int.Int32
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsatInner_Interface as UnsatInner0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  predicate unsat_inner [#"../Robinson/src/clause.rs" 50 4 50 59] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/clause.rs" 51 8 54 9] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> UnsatInner0.unsat_inner (Seq.get (Model0.model self) i) a
end
module Robinson_Clause_Impl1_Unsat_Interface
  use Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type
  predicate unsat (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
end
module Robinson_Clause_Impl1_Unsat
  use Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_UnsatInner_Interface as UnsatInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate unsat [#"../Robinson/src/clause.rs" 58 4 58 46] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
   =
    [#"../Robinson/src/clause.rs" 59 20 59 40] UnsatInner0.unsat_inner self (Model0.model a)
end
module Robinson_Lit_Impl0_IndexLogic_Interface
  use mach.int.Int
  use Robinson_Lit_Lit_Type
  function index_logic [@inline:trivial] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) : int
end
module Robinson_Lit_Impl0_IndexLogic
  use mach.int.Int
  use Robinson_Lit_Lit_Type
  use mach.int.UInt64
  function index_logic [@inline:trivial] [#"../Robinson/src/lit.rs" 24 4 24 35] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) : int
    
   =
    [#"../Robinson/src/lit.rs" 25 8 25 31] UInt64.to_int (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self)
end
module Robinson_Logic_BoolToAssignedstate_Interface
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  function bool_to_assignedstate (b : bool) : uint8
end
module Robinson_Logic_BoolToAssignedstate
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  function bool_to_assignedstate [#"../Robinson/src/logic.rs" 12 0 12 54] (b : bool) : uint8 =
    [#"../Robinson/src/logic.rs" 9 0 9 8] if b then (1 : uint8) else (0 : uint8)
  axiom bool_to_assignedstate_spec : forall b : bool . ([#"../Robinson/src/logic.rs" 11 0 11 31] not b -> UInt8.to_int (bool_to_assignedstate b) = 0) && ([#"../Robinson/src/logic.rs" 10 0 10 30] b -> UInt8.to_int (bool_to_assignedstate b) = 1)
end
module Robinson_Logic_BoolToAssignedstate_Impl
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  let rec ghost function bool_to_assignedstate (b : bool) : uint8
    ensures { [#"../Robinson/src/logic.rs" 10 0 10 30] b -> UInt8.to_int result = 1 }
    ensures { [#"../Robinson/src/logic.rs" 11 0 11 31] not b -> UInt8.to_int result = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Robinson/src/logic.rs" 9 0 9 8] if b then (1 : uint8) else (0 : uint8)
end
module Robinson_Clause_Impl1_InFormula_Interface
  use Robinson_Formula_Formula_Type
  use Robinson_Clause_Clause_Type
  predicate in_formula (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type)
    
end
module Robinson_Clause_Impl1_InFormula
  use Robinson_Formula_Formula_Type
  use Robinson_Clause_Clause_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate in_formula [#"../Robinson/src/clause.rs" 28 4 28 47] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type)
    
   =
    [#"../Robinson/src/clause.rs" 29 8 32 9] exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f)) /\ Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f)) i = self
end
module Robinson_Logic_FlipV_Interface
  use mach.int.Int
  use prelude.UInt8
  function flip_v (v : uint8) : uint8
end
module Robinson_Logic_FlipV
  use mach.int.Int
  use prelude.UInt8
  use mach.int.Int32
  function flip_v [#"../Robinson/src/logic.rs" 21 0 21 44] (v : uint8) : uint8 =
    [#"../Robinson/src/logic.rs" 22 4 30 5] if UInt8.to_int v = 0 then
      (1 : uint8)
    else
      if UInt8.to_int v = 1 then (0 : uint8) else v
    
end
module Robinson_Formula_Impl1_UnsatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  predicate unsat_inner (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8)
end
module Robinson_Formula_Impl1_UnsatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type
  clone Robinson_Clause_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate unsat_inner [#"../Robinson/src/formula.rs" 95 4 95 59] (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/formula.rs" 96 8 99 9] exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses self)) /\ UnsatInner0.unsat_inner (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses self)) i) a
end
module Robinson_Logic_LemmaUnitWrongPolarityUnsatFormula_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.UInt8
  use Robinson_Lit_Lit_Type
  use Robinson_Formula_Formula_Type
  use Robinson_Clause_Clause_Type
  clone Robinson_Formula_Impl1_UnsatInner_Interface as UnsatInner1
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Logic_FlipV_Interface as FlipV0
  clone Robinson_Lit_Impl1_UnsatInner_Interface as UnsatInner0
  clone Robinson_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Robinson_Lit_Impl0_IndexLogic_Interface as IndexLogic0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  clone Robinson_Clause_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Clause_Impl1_InFormula_Interface as InFormula0
  clone Robinson_Clause_Impl1_UnitInner_Interface as UnitInner0
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  function lemma_unit_wrong_polarity_unsat_formula (c : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Robinson_Logic_LemmaUnitWrongPolarityUnsatFormula
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.UInt8
  use Robinson_Lit_Lit_Type
  use Robinson_Formula_Formula_Type
  use Robinson_Clause_Clause_Type
  clone Robinson_Formula_Impl1_UnsatInner_Interface as UnsatInner1
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Logic_FlipV_Interface as FlipV0
  clone Robinson_Lit_Impl1_UnsatInner_Interface as UnsatInner0
  clone Robinson_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Robinson_Lit_Impl0_IndexLogic_Interface as IndexLogic0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  clone Robinson_Clause_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Clause_Impl1_InFormula_Interface as InFormula0
  clone Robinson_Clause_Impl1_UnitInner_Interface as UnitInner0
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  function lemma_unit_wrong_polarity_unsat_formula [#"../Robinson/src/logic.rs" 76 0 78 1] (c : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
   =
    [#"../Robinson/src/logic.rs" 64 0 64 8] ()
  axiom lemma_unit_wrong_polarity_unsat_formula_spec : forall c : Robinson_Clause_Clause_Type.robinson_clause_clause_type, f : Robinson_Formula_Formula_Type.robinson_formula_formula_type, a : Seq.seq uint8, ix : int, v : uint8 . ([#"../Robinson/src/logic.rs" 65 11 65 24] Invariant0.invariant' f) -> ([#"../Robinson/src/logic.rs" 66 11 66 33] UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f) = Seq.length a) -> ([#"../Robinson/src/logic.rs" 67 11 67 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)) -> ([#"../Robinson/src/logic.rs" 68 11 68 20] not Unset0.unset v) -> ([#"../Robinson/src/logic.rs" 69 11 69 26] UnitInner0.unit_inner c a) -> ([#"../Robinson/src/logic.rs" 70 11 70 26] InFormula0.in_formula c f) -> ([#"../Robinson/src/logic.rs" 71 11 71 31] Invariant1.invariant' c (Seq.length a)) -> ([#"../Robinson/src/logic.rs" 72 0 72 133] exists j : (int) . 0 <= j /\ j < Seq.length (Model0.model c) /\ IndexLogic0.index_logic (Seq.get (Model0.model c) j) = ix /\ BoolToAssignedstate0.bool_to_assignedstate (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_polarity (Seq.get (Model0.model c) j)) = v) -> ([#"../Robinson/src/logic.rs" 73 0 73 113] forall j : (int) . 0 <= j /\ j < Seq.length (Model0.model c) /\ not IndexLogic0.index_logic (Seq.get (Model0.model c) j) = ix -> UnsatInner0.unsat_inner (Seq.get (Model0.model c) j) a) -> ([#"../Robinson/src/logic.rs" 75 10 75 45] UnsatInner1.unsat_inner f (Seq.set a ix (FlipV0.flip_v v))) && ([#"../Robinson/src/logic.rs" 74 10 74 64] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v)))
end
module Robinson_Logic_LemmaUnitWrongPolarityUnsatFormula_Impl
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.UInt8
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  clone Robinson_Lit_Impl1_Invariant as Invariant2
  clone Robinson_Lit_Impl1_UnsatInner as UnsatInner0
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner2 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Lit_Impl1_UnsetInner as UnsetInner0
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Logic_FlipV as FlipV0
  clone Robinson_Logic_BoolToAssignedstate as BoolToAssignedstate0 with axiom .
  clone Robinson_Lit_Impl0_IndexLogic as IndexLogic0
  clone Robinson_Clause_Impl1_Invariant as Invariant1 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Robinson_Clause_Impl1_InFormula as InFormula0 with function Model0.model = Model1.model
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model0.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  let rec ghost function lemma_unit_wrong_polarity_unsat_formula (c : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {[#"../Robinson/src/logic.rs" 65 11 65 24] Invariant0.invariant' f}
    requires {[#"../Robinson/src/logic.rs" 66 11 66 33] UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f) = Seq.length a}
    requires {[#"../Robinson/src/logic.rs" 67 11 67 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)}
    requires {[#"../Robinson/src/logic.rs" 68 11 68 20] not Unset0.unset v}
    requires {[#"../Robinson/src/logic.rs" 69 11 69 26] UnitInner0.unit_inner c a}
    requires {[#"../Robinson/src/logic.rs" 70 11 70 26] InFormula0.in_formula c f}
    requires {[#"../Robinson/src/logic.rs" 71 11 71 31] Invariant1.invariant' c (Seq.length a)}
    requires {[#"../Robinson/src/logic.rs" 72 0 72 133] exists j : (int) . 0 <= j /\ j < Seq.length (Model0.model c) /\ IndexLogic0.index_logic (Seq.get (Model0.model c) j) = ix /\ BoolToAssignedstate0.bool_to_assignedstate (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_polarity (Seq.get (Model0.model c) j)) = v}
    requires {[#"../Robinson/src/logic.rs" 73 0 73 113] forall j : (int) . 0 <= j /\ j < Seq.length (Model0.model c) /\ not IndexLogic0.index_logic (Seq.get (Model0.model c) j) = ix -> UnsatInner0.unsat_inner (Seq.get (Model0.model c) j) a}
    ensures { [#"../Robinson/src/logic.rs" 74 10 74 64] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v)) }
    ensures { [#"../Robinson/src/logic.rs" 75 10 75 45] UnsatInner1.unsat_inner f (Seq.set a ix (FlipV0.flip_v v)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Robinson/src/logic.rs" 64 0 64 8] ()
end
module Robinson_Logic_LemmaUnitForces_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  clone Robinson_Logic_FlipV_Interface as FlipV0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  function lemma_unit_forces (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Robinson_Logic_LemmaUnitForces
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  clone Robinson_Logic_FlipV_Interface as FlipV0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Logic_Unset_Interface as Unset0
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  function lemma_unit_forces [#"../Robinson/src/logic.rs" 62 0 62 86] (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
   =
    [#"../Robinson/src/logic.rs" 54 0 54 8] ()
  axiom lemma_unit_forces_spec : forall f : Robinson_Formula_Formula_Type.robinson_formula_formula_type, a : Seq.seq uint8, ix : int, v : uint8 . ([#"../Robinson/src/logic.rs" 55 11 55 24] Invariant0.invariant' f) -> ([#"../Robinson/src/logic.rs" 56 11 56 33] UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f) = Seq.length a) -> ([#"../Robinson/src/logic.rs" 57 11 57 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)) -> ([#"../Robinson/src/logic.rs" 58 11 58 20] not Unset0.unset v) -> ([#"../Robinson/src/logic.rs" 59 11 59 45] EventuallySatCompleteInner0.eventually_sat_complete_inner f a) -> ([#"../Robinson/src/logic.rs" 60 11 60 65] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v))) -> ([#"../Robinson/src/logic.rs" 61 10 61 55] EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v))
end
module Robinson_Logic_LemmaUnitForces_Impl
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  clone Robinson_Lit_Impl1_Invariant as Invariant2
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Clause_Impl1_Invariant as Invariant1 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Robinson_Logic_FlipV as FlipV0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  let rec ghost function lemma_unit_forces (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {[#"../Robinson/src/logic.rs" 55 11 55 24] Invariant0.invariant' f}
    requires {[#"../Robinson/src/logic.rs" 56 11 56 33] UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f) = Seq.length a}
    requires {[#"../Robinson/src/logic.rs" 57 11 57 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)}
    requires {[#"../Robinson/src/logic.rs" 58 11 58 20] not Unset0.unset v}
    requires {[#"../Robinson/src/logic.rs" 59 11 59 45] EventuallySatCompleteInner0.eventually_sat_complete_inner f a}
    requires {[#"../Robinson/src/logic.rs" 60 11 60 65] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v))}
    ensures { [#"../Robinson/src/logic.rs" 61 10 61 55] EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Robinson/src/logic.rs" 54 0 54 8] ()
end
module Robinson_Logic_LemmaExtensionSatBaseSat_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Logic_Unset_Interface as Unset0
  function lemma_extension_sat_base_sat (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Robinson_Logic_LemmaExtensionSatBaseSat
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Logic_Unset_Interface as Unset0
  function lemma_extension_sat_base_sat [#"../Robinson/src/logic.rs" 85 0 85 97] (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
   =
    [#"../Robinson/src/logic.rs" 81 0 81 8] ()
  axiom lemma_extension_sat_base_sat_spec : forall f : Robinson_Formula_Formula_Type.robinson_formula_formula_type, a : Seq.seq uint8, ix : int, v : uint8 . ([#"../Robinson/src/logic.rs" 82 11 82 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)) -> ([#"../Robinson/src/logic.rs" 83 11 83 56] EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v)) -> ([#"../Robinson/src/logic.rs" 84 10 84 44] EventuallySatCompleteInner0.eventually_sat_complete_inner f a)
end
module Robinson_Logic_LemmaExtensionSatBaseSat_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  let rec ghost function lemma_extension_sat_base_sat (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {[#"../Robinson/src/logic.rs" 82 11 82 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)}
    requires {[#"../Robinson/src/logic.rs" 83 11 83 56] EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v)}
    ensures { [#"../Robinson/src/logic.rs" 84 10 84 44] EventuallySatCompleteInner0.eventually_sat_complete_inner f a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Robinson/src/logic.rs" 81 0 81 8] ()
end
module Robinson_Logic_Neg_Interface
  use mach.int.Int
  use prelude.UInt8
  function neg (_ : ()) : uint8
end
module Robinson_Logic_Neg
  use mach.int.Int
  use prelude.UInt8
  function neg [#"../Robinson/src/logic.rs" 39 0 39 25] (_ : ()) : uint8 =
    [#"../Robinson/src/logic.rs" 40 4 40 7] (0 : uint8)
end
module Robinson_Logic_Pos_Interface
  use mach.int.Int
  use prelude.UInt8
  function pos (_ : ()) : uint8
end
module Robinson_Logic_Pos
  use mach.int.Int
  use prelude.UInt8
  function pos [#"../Robinson/src/logic.rs" 34 0 34 25] (_ : ()) : uint8 =
    [#"../Robinson/src/logic.rs" 35 4 35 7] (1 : uint8)
end
module Robinson_Logic_LemmaExtensionsUnsatBaseUnsat_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  clone Robinson_Logic_Pos_Interface as Pos0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Logic_Neg_Interface as Neg0
  clone Robinson_Logic_Unset_Interface as Unset0
  function lemma_extensions_unsat_base_unsat (a : Seq.seq uint8) (ix : int) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : ()
    
end
module Robinson_Logic_LemmaExtensionsUnsatBaseUnsat
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  clone Robinson_Logic_Pos_Interface as Pos0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Robinson_Logic_Neg_Interface as Neg0
  clone Robinson_Logic_Unset_Interface as Unset0
  function lemma_extensions_unsat_base_unsat [#"../Robinson/src/logic.rs" 92 0 92 84] (a : Seq.seq uint8) (ix : int) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : ()
    
   =
    [#"../Robinson/src/logic.rs" 87 0 87 8] ()
  axiom lemma_extensions_unsat_base_unsat_spec : forall a : Seq.seq uint8, ix : int, f : Robinson_Formula_Formula_Type.robinson_formula_formula_type . ([#"../Robinson/src/logic.rs" 88 11 88 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)) -> ([#"../Robinson/src/logic.rs" 89 11 89 61] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Neg0.neg ()))) -> ([#"../Robinson/src/logic.rs" 90 11 90 61] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Pos0.pos ()))) -> ([#"../Robinson/src/logic.rs" 91 10 91 45] not EventuallySatCompleteInner0.eventually_sat_complete_inner f a)
end
module Robinson_Logic_LemmaExtensionsUnsatBaseUnsat_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Logic_Pos as Pos0
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Logic_Neg as Neg0
  let rec ghost function lemma_extensions_unsat_base_unsat (a : Seq.seq uint8) (ix : int) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : ()
    requires {[#"../Robinson/src/logic.rs" 88 11 88 50] 0 <= ix /\ ix < Seq.length a /\ Unset0.unset (Seq.get a ix)}
    requires {[#"../Robinson/src/logic.rs" 89 11 89 61] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Neg0.neg ()))}
    requires {[#"../Robinson/src/logic.rs" 90 11 90 61] not EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Pos0.pos ()))}
    ensures { [#"../Robinson/src/logic.rs" 91 10 91 45] not EventuallySatCompleteInner0.eventually_sat_complete_inner f a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Robinson/src/logic.rs" 87 0 87 8] ()
end
module Robinson_Lit_Impl1_Unset_Interface
  use Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type
  predicate unset (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
end
module Robinson_Lit_Impl1_Unset
  use Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsetInner_Interface as UnsetInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate unset [#"../Robinson/src/lit.rs" 78 4 78 46] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
   =
    [#"../Robinson/src/lit.rs" 79 20 79 40] UnsetInner0.unset_inner self (Model0.model a)
end
module Robinson_Lit_Impl1_Unsat_Interface
  use Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type
  predicate unsat (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
end
module Robinson_Lit_Impl1_Unsat
  use Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsatInner_Interface as UnsatInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate unsat [#"../Robinson/src/lit.rs" 83 4 83 46] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
   =
    [#"../Robinson/src/lit.rs" 84 20 84 40] UnsatInner0.unsat_inner self (Model0.model a)
end
module Robinson_Lit_Impl1_Sat_Interface
  use Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type
  predicate sat (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
end
module Robinson_Lit_Impl1_Sat
  use Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate sat [#"../Robinson/src/lit.rs" 71 4 71 44] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
   =
    [#"../Robinson/src/lit.rs" 73 12 73 30] SatInner0.sat_inner self (Model0.model a)
end
module Robinson_Lit_Impl2_LitSat_Interface
  use seq.Seq
  use prelude.Borrow
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  use Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Sat_Interface as Sat0
  clone Robinson_Lit_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_sat [@cfg:stackify] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) : bool
    requires {[#"../Robinson/src/lit.rs" 97 15 97 41] Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { [#"../Robinson/src/lit.rs" 98 14 98 36] result = Sat0.sat self a }
    
end
module Robinson_Lit_Impl2_LitSat
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner as SatInner0
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  clone Robinson_Lit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Lit_Impl1_Invariant as Invariant0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = uint8
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = uint8, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg lit_sat [@cfg:stackify] [#"../Robinson/src/lit.rs" 99 4 99 49] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) : bool
    requires {[#"../Robinson/src/lit.rs" 97 15 97 41] Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { [#"../Robinson/src/lit.rs" 98 14 98 36] result = Sat0.sat self a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var a_2 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _3 : uint8;
  var _4 : uint8;
  var _5 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _6 : usize;
  var _7 : uint8;
  var _8 : uint8;
  var _9 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _10 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    switch (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_polarity self_1)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB1 {
    _9 <- Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 a_2;
    _10 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self_1;
    _8 <- ([#"../Robinson/src/lit.rs" 102 22 102 35] Index0.index _9 _10);
    goto BB4
  }
  BB2 {
    _5 <- Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 a_2;
    _6 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self_1;
    _4 <- ([#"../Robinson/src/lit.rs" 101 21 101 34] Index0.index _5 _6);
    goto BB3
  }
  BB3 {
    _3 <- _4;
    _0 <- ([#"../Robinson/src/lit.rs" 101 20 101 40] _3 = (1 : uint8));
    goto BB5
  }
  BB4 {
    _7 <- _8;
    _0 <- ([#"../Robinson/src/lit.rs" 102 21 102 41] _7 = (0 : uint8));
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Robinson_Lit_Impl2_LitUnset_Interface
  use seq.Seq
  use prelude.Borrow
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  use Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Unset_Interface as Unset0
  clone Robinson_Lit_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_unset [@cfg:stackify] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) : bool
    requires {[#"../Robinson/src/lit.rs" 118 15 118 41] Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { [#"../Robinson/src/lit.rs" 119 14 119 38] result = Unset0.unset self a }
    
end
module Robinson_Lit_Impl2_LitUnset
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsetInner as UnsetInner0
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  clone Robinson_Lit_Impl1_Unset as Unset0 with function Model0.model = Model1.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Lit_Impl1_Invariant as Invariant0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = uint8
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = uint8, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg lit_unset [@cfg:stackify] [#"../Robinson/src/lit.rs" 120 4 120 51] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) : bool
    requires {[#"../Robinson/src/lit.rs" 118 15 118 41] Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { [#"../Robinson/src/lit.rs" 119 14 119 38] result = Unset0.unset self a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var a_2 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _3 : uint8;
  var _4 : uint8;
  var _5 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _6 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _5 <- Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 a_2;
    _6 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self_1;
    _4 <- ([#"../Robinson/src/lit.rs" 121 8 121 21] Index0.index _5 _6);
    goto BB1
  }
  BB1 {
    _3 <- _4;
    _0 <- ([#"../Robinson/src/lit.rs" 121 8 121 26] _3 >= (2 : uint8));
    return _0
  }
  
end
module Robinson_Clause_Impl2_CheckIfUnit_Interface
  use seq.Seq
  use prelude.Borrow
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  use Robinson_Formula_Formula_Type
  use Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type
  clone Robinson_Assignments_Impl1_Complete_Interface as Complete0
  clone Robinson_Clause_Impl1_Unit_Interface as Unit0
  clone Robinson_Clause_Impl1_Unsat_Interface as Unsat0
  clone Robinson_Clause_Impl1_Sat_Interface as Sat0
  use Robinson_Clause_ClauseState_Type
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant2
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Clause_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val check_if_unit [@cfg:stackify] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) (_f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type
    requires {[#"../Robinson/src/clause.rs" 116 15 116 41] Invariant0.invariant' self (Seq.length (Model0.model a))}
    requires {[#"../Robinson/src/clause.rs" 117 15 117 29] Invariant1.invariant' _f}
    requires {[#"../Robinson/src/clause.rs" 118 15 118 31] Invariant2.invariant' a _f}
    ensures { [#"../Robinson/src/clause.rs" 119 4 119 65] result = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Sat_Type -> Sat0.sat self a }
    ensures { [#"../Robinson/src/clause.rs" 120 4 120 67] result = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type -> Unsat0.unsat self a }
    ensures { [#"../Robinson/src/clause.rs" 121 4 121 83] result = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unit_Type -> Unit0.unit self a /\ not Complete0.complete a }
    ensures { [#"../Robinson/src/clause.rs" 122 4 122 66] result = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unknown_Type -> not Complete0.complete a }
    
end
module Robinson_Clause_Impl2_CheckIfUnit
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.UInt8
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner as SatInner1
  clone Robinson_Lit_Impl1_Invariant as Invariant3
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Lit_Impl1_UnsatInner as UnsatInner1
  clone Robinson_Lit_Impl1_UnsetInner as UnsetInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model5 with function Model0.model = Model1.model
  clone Robinson_Clause_Impl0_ModelTy_Type as ModelTy1
  clone Robinson_Logic_Unset as Unset1
  clone Robinson_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model5.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model5.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model5.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_Model as Model3 with function Model0.model = Model6.model
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  clone Robinson_Lit_Impl1_Unsat as Unsat1 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Lit_Impl1_Unset as Unset0 with function Model0.model = Model3.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model5.model
  use Robinson_Formula_Formula_Type
  clone Robinson_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model3.model,
  predicate Unset0.unset = Unset1.unset
  clone Robinson_Clause_Impl1_Unit as Unit0 with function Model0.model = Model3.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone Robinson_Clause_Impl1_Unsat as Unsat0 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Clause_Impl1_Sat as Sat0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  use Robinson_Clause_ClauseState_Type
  clone Robinson_Assignments_Impl1_Invariant as Invariant2 with function Model0.model = Model3.model
  clone Robinson_Clause_Impl1_Invariant as Invariant0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Robinson_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model3.model
  use prelude.UIntSize
  clone Robinson_Lit_Impl1_Sat as Sat1 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy2 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone Robinson_Lit_Impl2_LitUnset_Interface as LitUnset0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Unset0.unset = Unset0.unset
  clone Robinson_Lit_Impl2_LitSat_Interface as LitSat0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Sat0.sat = Sat1.sat
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type i = usize, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model1.model
  let rec cfg check_if_unit [@cfg:stackify] [#"../Robinson/src/clause.rs" 123 4 123 77] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) (_f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type
    requires {[#"../Robinson/src/clause.rs" 116 15 116 41] Invariant0.invariant' self (Seq.length (Model0.model a))}
    requires {[#"../Robinson/src/clause.rs" 117 15 117 29] Invariant1.invariant' _f}
    requires {[#"../Robinson/src/clause.rs" 118 15 118 31] Invariant2.invariant' a _f}
    ensures { [#"../Robinson/src/clause.rs" 119 4 119 65] result = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Sat_Type -> Sat0.sat self a }
    ensures { [#"../Robinson/src/clause.rs" 120 4 120 67] result = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type -> Unsat0.unsat self a }
    ensures { [#"../Robinson/src/clause.rs" 121 4 121 83] result = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unit_Type -> Unit0.unit self a /\ not Complete0.complete a }
    ensures { [#"../Robinson/src/clause.rs" 122 4 122 66] result = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unknown_Type -> not Complete0.complete a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
  var self_1 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var a_2 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _f_3 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var i_4 : usize;
  var _k_5 : usize;
  var unassigned_6 : usize;
  var _7 : ();
  var _8 : ();
  var _9 : bool;
  var _10 : usize;
  var _11 : usize;
  var _12 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var lit_13 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _14 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _15 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _16 : usize;
  var _17 : ();
  var _18 : bool;
  var _19 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _20 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _21 : ();
  var _22 : bool;
  var _23 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _24 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _25 : ();
  var _26 : bool;
  var _27 : usize;
  var _28 : ();
  var _29 : usize;
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : bool;
  var _34 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : usize);
    _k_5 <- (0 : usize);
    unassigned_6 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant loop_invariant { [#"../Robinson/src/clause.rs" 127 36 127 71] 0 <= UInt64.to_int i_4 /\ UInt64.to_int i_4 <= Seq.length (Model1.model (Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest self_1)) };
    invariant unass { [#"../Robinson/src/clause.rs" 128 27 128 43] UInt64.to_int unassigned_6 <= 1 };
    invariant k_is_unass { [#"../Robinson/src/clause.rs" 129 32 129 76] UInt64.to_int unassigned_6 = 0 \/ Unset0.unset (Seq.get (Model2.model self_1) (UInt64.to_int _k_5)) a_2 };
    invariant kk { [#"../Robinson/src/clause.rs" 127 8 127 73] UInt64.to_int unassigned_6 > 0 -> Unset0.unset (Seq.get (Model2.model self_1) (UInt64.to_int _k_5)) a_2 };
    invariant not_sat { [#"../Robinson/src/clause.rs" 127 8 127 73] forall j : (int) . 0 <= j /\ j < UInt64.to_int i_4 -> Unsat1.unsat (Seq.get (Model2.model self_1) j) a_2 \/ Unset0.unset (Seq.get (Model2.model self_1) j) a_2 /\ UInt64.to_int unassigned_6 >= 1 };
    invariant k_in_bounds { [#"../Robinson/src/clause.rs" 133 33 133 84] UInt64.to_int unassigned_6 = 0 \/ 0 <= UInt64.to_int _k_5 /\ UInt64.to_int _k_5 < Seq.length (Model2.model self_1) };
    invariant k_only { [#"../Robinson/src/clause.rs" 127 8 127 73] UInt64.to_int unassigned_6 = 1 -> (forall j : (int) . 0 <= j /\ j < UInt64.to_int i_4 /\ j <> UInt64.to_int _k_5 -> not Unset0.unset (Seq.get (Model2.model self_1) j) a_2) };
    invariant k_unset { [#"../Robinson/src/clause.rs" 127 8 127 73] UInt64.to_int unassigned_6 = 0 -> UInt64.to_int _k_5 = 0 };
    _10 <- i_4;
    _12 <- Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest self_1;
    _11 <- ([#"../Robinson/src/clause.rs" 137 18 137 33] Len0.len _12);
    goto BB2
  }
  BB2 {
    _9 <- ([#"../Robinson/src/clause.rs" 137 14 137 33] _10 < _11);
    switch (_9)
      | False -> goto BB14
      | _ -> goto BB3
      end
  }
  BB3 {
    _15 <- Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest self_1;
    _16 <- i_4;
    _14 <- ([#"../Robinson/src/clause.rs" 138 22 138 34] Index0.index _15 _16);
    goto BB4
  }
  BB4 {
    lit_13 <- _14;
    _19 <- lit_13;
    _20 <- a_2;
    _18 <- ([#"../Robinson/src/clause.rs" 139 15 139 29] LitSat0.lit_sat _19 _20);
    goto BB5
  }
  BB5 {
    switch (_18)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    _0 <- Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Sat_Type;
    goto BB18
  }
  BB7 {
    _23 <- lit_13;
    _24 <- a_2;
    _22 <- ([#"../Robinson/src/clause.rs" 141 22 141 38] LitUnset0.lit_unset _23 _24);
    goto BB8
  }
  BB8 {
    switch (_22)
      | False -> goto BB12
      | _ -> goto BB9
      end
  }
  BB9 {
    _27 <- unassigned_6;
    _26 <- ([#"../Robinson/src/clause.rs" 143 19 143 33] _27 > (0 : usize));
    switch (_26)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    _0 <- Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unknown_Type;
    goto BB18
  }
  BB11 {
    _25 <- ();
    _29 <- i_4;
    _k_5 <- _29;
    _29 <- any usize;
    unassigned_6 <- ([#"../Robinson/src/clause.rs" 147 16 147 31] unassigned_6 + (1 : usize));
    _17 <- ();
    goto BB13
  }
  BB12 {
    _17 <- ();
    goto BB13
  }
  BB13 {
    i_4 <- ([#"../Robinson/src/clause.rs" 149 12 149 18] i_4 + (1 : usize));
    _8 <- ();
    goto BB1
  }
  BB14 {
    _7 <- ();
    _34 <- unassigned_6;
    _33 <- ([#"../Robinson/src/clause.rs" 151 11 151 26] _34 = (1 : usize));
    switch (_33)
      | False -> goto BB16
      | _ -> goto BB15
      end
  }
  BB15 {
    _0 <- Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unit_Type;
    goto BB17
  }
  BB16 {
    _0 <- Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type;
    goto BB17
  }
  BB17 {
    goto BB19
  }
  BB18 {
    goto BB19
  }
  BB19 {
    return _0
  }
  
end
module Robinson_Clause_Impl2_GetUnit_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Borrow
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy1
  use Robinson_Lit_Lit_Type
  clone Robinson_Clause_Impl0_ModelTy_Type as ModelTy0
  use Robinson_Formula_Formula_Type
  use Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type
  clone Robinson_Logic_Unset_Interface as Unset0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone Robinson_Lit_Impl0_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  clone Robinson_Clause_Impl1_Unit_Interface as Unit0
  val get_unit [@cfg:stackify] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) (_f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : Robinson_Lit_Lit_Type.robinson_lit_lit_type
    requires {[#"../Robinson/src/clause.rs" 159 15 159 28] Unit0.unit self a}
    requires {[#"../Robinson/src/clause.rs" 160 15 160 29] Invariant0.invariant' _f}
    requires {[#"../Robinson/src/clause.rs" 161 15 161 31] Invariant1.invariant' a _f}
    ensures { [#"../Robinson/src/clause.rs" 162 4 162 82] exists j : (int) . 0 <= j /\ j < Seq.length (Model0.model self) /\ Seq.get (Model0.model self) j = result }
    ensures { [#"../Robinson/src/clause.rs" 163 14 163 47] IndexLogic0.index_logic result < Seq.length (Model1.model a) }
    ensures { [#"../Robinson/src/clause.rs" 164 14 164 47] Unset0.unset (Seq.get (Model1.model a) (IndexLogic0.index_logic result)) }
    
end
module Robinson_Clause_Impl2_GetUnit
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Borrow
  use mach.int.UInt64
  use prelude.UInt8
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner as SatInner1
  clone Robinson_Lit_Impl1_Invariant as Invariant3
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model4 with function Model0.model = Model6.model
  clone Robinson_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Lit_Impl1_UnsetInner as UnsetInner0
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy1
  clone Robinson_Clause_Impl0_ModelTy_Type as ModelTy0
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model4.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_Model as Model2 with function Model0.model = Model5.model
  clone Robinson_Lit_Impl1_Unset as Unset1 with function Model0.model = Model2.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  use Robinson_Formula_Formula_Type
  clone Robinson_Logic_Unset as Unset0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone Robinson_Lit_Impl0_IndexLogic as IndexLogic0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model4.model
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Robinson_Clause_Impl1_Unit as Unit0 with function Model0.model = Model2.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy2 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone Robinson_Lit_Impl2_LitUnset_Interface as LitUnset0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Unset0.unset = Unset1.unset
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type i = usize, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model6.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model6.model
  let rec cfg get_unit [@cfg:stackify] [#"../Robinson/src/clause.rs" 165 4 165 64] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) (_f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : Robinson_Lit_Lit_Type.robinson_lit_lit_type
    requires {[#"../Robinson/src/clause.rs" 159 15 159 28] Unit0.unit self a}
    requires {[#"../Robinson/src/clause.rs" 160 15 160 29] Invariant0.invariant' _f}
    requires {[#"../Robinson/src/clause.rs" 161 15 161 31] Invariant1.invariant' a _f}
    ensures { [#"../Robinson/src/clause.rs" 162 4 162 82] exists j : (int) . 0 <= j /\ j < Seq.length (Model0.model self) /\ Seq.get (Model0.model self) j = result }
    ensures { [#"../Robinson/src/clause.rs" 163 14 163 47] IndexLogic0.index_logic result < Seq.length (Model1.model a) }
    ensures { [#"../Robinson/src/clause.rs" 164 14 164 47] Unset0.unset (Seq.get (Model1.model a) (IndexLogic0.index_logic result)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var self_1 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var a_2 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _f_3 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var _4 : ();
  var i_5 : usize;
  var _6 : ();
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var lit_12 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _13 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _14 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _15 : usize;
  var _16 : ();
  var _17 : bool;
  var _18 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _19 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _20 : ();
  var _21 : ();
  var _22 : ();
  var _23 : ();
  var _24 : ();
  {
    self_1 <- self;
    a_2 <- a;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    i_5 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant not_unset { [#"../Robinson/src/clause.rs" 167 8 167 90] forall j : (int) . 0 <= j /\ j < UInt64.to_int i_5 -> not Unset1.unset (Seq.get (Model0.model self_1) j) a_2 };
    _9 <- i_5;
    _11 <- Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest self_1;
    _10 <- ([#"../Robinson/src/clause.rs" 168 18 168 33] Len0.len _11);
    goto BB2
  }
  BB2 {
    _8 <- ([#"../Robinson/src/clause.rs" 168 14 168 33] _9 < _10);
    switch (_8)
      | False -> goto BB8
      | _ -> goto BB3
      end
  }
  BB3 {
    _14 <- Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest self_1;
    _15 <- i_5;
    _13 <- ([#"../Robinson/src/clause.rs" 169 22 169 34] Index0.index _14 _15);
    goto BB4
  }
  BB4 {
    lit_12 <- _13;
    _18 <- lit_12;
    _19 <- a_2;
    _17 <- ([#"../Robinson/src/clause.rs" 170 15 170 31] LitUnset0.lit_unset _18 _19);
    goto BB5
  }
  BB5 {
    switch (_17)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    _0 <- lit_12;
    return _0
  }
  BB7 {
    _16 <- ();
    i_5 <- ([#"../Robinson/src/clause.rs" 173 12 173 18] i_5 + (1 : usize));
    _7 <- ();
    goto BB1
  }
  BB8 {
    _6 <- ();
    absurd
  }
  
end
module Robinson_Lit_Impl2_Index_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl0_IndexLogic_Interface as IndexLogic0
  val index [@cfg:stackify] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) : usize
    ensures { [#"../Robinson/src/lit.rs" 91 14 91 43] UInt64.to_int result = IndexLogic0.index_logic self }
    
end
module Robinson_Lit_Impl2_Index
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl0_IndexLogic as IndexLogic0
  let rec cfg index [@cfg:stackify] [#"../Robinson/src/lit.rs" 92 4 92 31] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) : usize
    ensures { [#"../Robinson/src/lit.rs" 91 14 91 43] UInt64.to_int result = IndexLogic0.index_logic self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self_1;
    return _0
  }
  
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.Int32
  use mach.int.UInt64
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : (int) . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module Robinson_Assignments_Impl2_UnitPropOnce_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.UIntSize
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  use Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type
  use Robinson_Formula_Formula_Type
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Clause_Impl1_Unsat_Interface as Unsat0
  clone Robinson_Assignments_Impl0_Model_Interface as Model2
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Robinson_Clause_Impl1_Sat_Interface as Sat0
  clone Robinson_Assignments_Impl1_Complete_Interface as Complete0
  clone Robinson_Clause_Impl1_Unit_Interface as Unit0
  use Robinson_Clause_ClauseState_Type
  clone Robinson_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Robinson_Assignments_Impl1_Compatible_Interface as Compatible0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant0
  val unit_prop_once [@cfg:stackify] (self : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)) (i : usize) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type
    requires {[#"../Robinson/src/assignments.rs" 135 4 135 42] Invariant0.invariant' ( * self) f}
    requires {[#"../Robinson/src/assignments.rs" 136 15 136 28] Invariant1.invariant' f}
    requires {[#"../Robinson/src/assignments.rs" 137 15 137 49] 0 <= UInt64.to_int i /\ UInt64.to_int i < Seq.length (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f))}
    ensures { [#"../Robinson/src/assignments.rs" 135 4 135 42] Invariant0.invariant' ( ^ self) f }
    ensures { [#"../Robinson/src/assignments.rs" 138 14 138 39] Compatible0.compatible ( * self) ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 139 14 139 82] EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 146 14 151 5] match (result) with
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unit_Type -> Unit0.unit (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f)) (UInt64.to_int i)) ( * self) /\ not Complete0.complete ( * self)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Sat_Type -> Sat0.sat (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f)) (UInt64.to_int i)) ( ^ self) /\ Model1.model self = Model2.model ( ^ self)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type -> Unsat0.unsat (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f)) (UInt64.to_int i)) ( ^ self) /\ Model1.model self = Model2.model ( ^ self)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unknown_Type -> Model1.model self = Model2.model ( ^ self) /\ not Complete0.complete ( ^ self)
      end }
    ensures { [#"../Robinson/src/assignments.rs" 152 4 152 120] Complete0.complete ( * self) ->  * self =  ^ self /\ (result = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type \/ result = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Sat_Type) }
    
end
module Robinson_Assignments_Impl2_UnitPropOnce
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.UIntSize
  use prelude.UInt8
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Invariant as Invariant3
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  clone Robinson_Lit_Impl1_UnsetInner as UnsetInner0
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone Robinson_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner1 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Logic_Pos as Pos0
  clone Robinson_Logic_Neg as Neg0
  clone Robinson_Lit_Impl1_UnsatInner as UnsatInner1
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model4.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner2 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Logic_FlipV as FlipV0
  clone Robinson_Clause_Impl1_InFormula as InFormula0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model4.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Robinson_Logic_LemmaExtensionsUnsatBaseUnsat as LemmaExtensionsUnsatBaseUnsat0 with predicate Unset0.unset = Unset0.unset,
  function Neg0.neg = Neg0.neg,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  function Pos0.pos = Pos0.pos, axiom .
  clone Robinson_Logic_LemmaExtensionSatBaseSat as LemmaExtensionSatBaseSat0 with predicate Unset0.unset = Unset0.unset,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  axiom .
  clone Robinson_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Robinson_Logic_LemmaUnitForces as LemmaUnitForces0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Unset0.unset = Unset0.unset,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  function FlipV0.flip_v = FlipV0.flip_v, axiom .
  clone Robinson_Logic_BoolToAssignedstate as BoolToAssignedstate0 with axiom .
  clone Robinson_Lit_Impl0_IndexLogic as IndexLogic0
  clone Robinson_Logic_LemmaUnitWrongPolarityUnsatFormula as LemmaUnitWrongPolarityUnsatFormula0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Unset0.unset = Unset0.unset, predicate UnitInner0.unit_inner = UnitInner0.unit_inner,
  predicate InFormula0.in_formula = InFormula0.in_formula, predicate Invariant1.invariant' = Invariant2.invariant',
  function Model0.model = Model4.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner, function FlipV0.flip_v = FlipV0.flip_v,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  predicate UnsatInner1.unsat_inner = UnsatInner2.unsat_inner, axiom .
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_Model as Model2 with function Model0.model = Model3.model
  clone Robinson_Clause_Impl1_Unsat as Unsat0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone Robinson_Clause_Impl1_Sat as Sat0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model2.model,
  predicate Unset0.unset = Unset0.unset
  clone Robinson_Clause_Impl1_Unit as Unit0 with function Model0.model = Model2.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  use Robinson_Clause_ClauseState_Type
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model2.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model2.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Robinson_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model2.model
  use prelude.IntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy3 with type t = uint8
  clone Core_Slice_Index_Impl2_Output_Type as Output1 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = uint8
  clone Robinson_Clause_Impl0_ModelTy_Type as ModelTy2
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model6 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = uint8
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = uint8, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere, type Output0.output = Output1.output
  clone Robinson_Lit_Impl2_Index_Interface as Index1 with function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Robinson_Clause_Impl2_GetUnit_Interface as GetUnit0 with predicate Unit0.unit = Unit0.unit,
  predicate Invariant0.invariant' = Invariant1.invariant', predicate Invariant1.invariant' = Invariant0.invariant',
  function Model0.model = Model7.model, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function Model1.model = Model6.model, predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type
  clone Robinson_Clause_Impl2_CheckIfUnit_Interface as CheckIfUnit0 with function Model0.model = Model6.model,
  predicate Invariant0.invariant' = Invariant2.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Invariant2.invariant' = Invariant0.invariant', predicate Sat0.sat = Sat0.sat,
  predicate Unsat0.unsat = Unsat0.unsat, predicate Unit0.unit = Unit0.unit,
  predicate Complete0.complete = Complete0.complete
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type i = usize, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg unit_prop_once [@cfg:stackify] [#"../Robinson/src/assignments.rs" 153 4 153 74] (self : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)) (i : usize) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type
    requires {[#"../Robinson/src/assignments.rs" 135 4 135 42] Invariant0.invariant' ( * self) f}
    requires {[#"../Robinson/src/assignments.rs" 136 15 136 28] Invariant1.invariant' f}
    requires {[#"../Robinson/src/assignments.rs" 137 15 137 49] 0 <= UInt64.to_int i /\ UInt64.to_int i < Seq.length (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f))}
    ensures { [#"../Robinson/src/assignments.rs" 135 4 135 42] Invariant0.invariant' ( ^ self) f }
    ensures { [#"../Robinson/src/assignments.rs" 138 14 138 39] Compatible0.compatible ( * self) ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 139 14 139 82] EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 146 14 151 5] match (result) with
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unit_Type -> Unit0.unit (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f)) (UInt64.to_int i)) ( * self) /\ not Complete0.complete ( * self)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Sat_Type -> Sat0.sat (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f)) (UInt64.to_int i)) ( ^ self) /\ Model1.model self = Model2.model ( ^ self)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type -> Unsat0.unsat (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f)) (UInt64.to_int i)) ( ^ self) /\ Model1.model self = Model2.model ( ^ self)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unknown_Type -> Model1.model self = Model2.model ( ^ self) /\ not Complete0.complete ( ^ self)
      end }
    ensures { [#"../Robinson/src/assignments.rs" 152 4 152 120] Complete0.complete ( * self) ->  * self =  ^ self /\ (result = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type \/ result = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Sat_Type) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
  var self_1 : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type);
  var i_2 : usize;
  var f_3 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var clause_4 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var _5 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var _6 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Clause_Clause_Type.robinson_clause_clause_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _7 : usize;
  ghost var _old_a_8 : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type);
  var _9 : ();
  var _10 : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
  var _11 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var _12 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _13 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var _14 : isize;
  var _15 : ();
  var lit_16 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _17 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var _18 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _19 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var _20 : ();
  var _21 : ();
  var _22 : ();
  var _23 : bool;
  var _24 : borrowed uint8;
  var _25 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _26 : usize;
  var _27 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _28 : borrowed uint8;
  var _29 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _30 : usize;
  var _31 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _32 : ();
  var _33 : ();
  var _34 : ();
  var o_35 : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
  var _36 : ();
  {
    self_1 <- self;
    i_2 <- i;
    f_3 <- f;
    goto BB0
  }
  BB0 {
    _6 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f_3;
    _7 <- i_2;
    _5 <- ([#"../Robinson/src/assignments.rs" 154 22 154 34] Index0.index _6 _7);
    goto BB1
  }
  BB1 {
    clause_4 <- _5;
    _9 <- ();
    _old_a_8 <- ghost ([#"../Robinson/src/assignments.rs" 155 21 155 33] self_1);
    goto BB2
  }
  BB2 {
    _11 <- clause_4;
    _12 <-  * self_1;
    _13 <- f_3;
    _10 <- ([#"../Robinson/src/assignments.rs" 156 14 156 43] CheckIfUnit0.check_if_unit _11 _12 _13);
    goto BB3
  }
  BB3 {
    switch (_10)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unit_Type -> goto BB5
      | _ -> goto BB4
      end
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    o_35 <- _10;
    _10 <- any Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
    _0 <- o_35;
    o_35 <- any Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
    goto BB14
  }
  BB5 {
    _17 <- clause_4;
    _18 <-  * self_1;
    _19 <- f_3;
    lit_16 <- ([#"../Robinson/src/assignments.rs" 162 26 162 50] GetUnit0.get_unit _17 _18 _19);
    goto BB6
  }
  BB6 {
    assert { [#"../Robinson/src/assignments.rs" 163 30 163 145] let _ = LemmaUnitWrongPolarityUnsatFormula0.lemma_unit_wrong_polarity_unsat_formula clause_4 f_3 (Model1.model self_1) (IndexLogic0.index_logic lit_16) (BoolToAssignedstate0.bool_to_assignedstate (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_polarity lit_16)) in true };
    _20 <- ();
    assert { [#"../Robinson/src/assignments.rs" 164 30 164 114] let _ = LemmaUnitForces0.lemma_unit_forces f_3 (Model1.model self_1) (IndexLogic0.index_logic lit_16) (BoolToAssignedstate0.bool_to_assignedstate (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_polarity lit_16)) in true };
    _21 <- ();
    _23 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_polarity lit_16;
    switch (_23)
      | False -> goto BB10
      | _ -> goto BB7
      end
  }
  BB7 {
    _25 <- borrow_mut (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 ( * self_1));
    self_1 <- { self_1 with current = (let Robinson_Assignments_Assignments_Type.Robinson_Assignments_Assignments_Type a b =  * self_1 in Robinson_Assignments_Assignments_Type.Robinson_Assignments_Assignments_Type ( ^ _25) b) };
    assume { Resolve0.resolve self_1 };
    _27 <- lit_16;
    _26 <- ([#"../Robinson/src/assignments.rs" 166 27 166 38] Index1.index _27);
    goto BB8
  }
  BB8 {
    _24 <- ([#"../Robinson/src/assignments.rs" 166 20 166 39] IndexMut0.index_mut _25 _26);
    goto BB9
  }
  BB9 {
    _24 <- { _24 with current = (1 : uint8) };
    assume { Resolve1.resolve _24 };
    _22 <- ();
    goto BB13
  }
  BB10 {
    _29 <- borrow_mut (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 ( * self_1));
    self_1 <- { self_1 with current = (let Robinson_Assignments_Assignments_Type.Robinson_Assignments_Assignments_Type a b =  * self_1 in Robinson_Assignments_Assignments_Type.Robinson_Assignments_Assignments_Type ( ^ _29) b) };
    assume { Resolve0.resolve self_1 };
    _31 <- lit_16;
    _30 <- ([#"../Robinson/src/assignments.rs" 168 27 168 38] Index1.index _31);
    goto BB11
  }
  BB11 {
    _28 <- ([#"../Robinson/src/assignments.rs" 168 20 168 39] IndexMut0.index_mut _29 _30);
    goto BB12
  }
  BB12 {
    _28 <- { _28 with current = (0 : uint8) };
    assume { Resolve1.resolve _28 };
    _22 <- ();
    goto BB13
  }
  BB13 {
    assert { [#"../Robinson/src/assignments.rs" 170 30 170 135] let _ = LemmaExtensionSatBaseSat0.lemma_extension_sat_base_sat f_3 (Model1.model _old_a_8) (IndexLogic0.index_logic lit_16) (BoolToAssignedstate0.bool_to_assignedstate (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_polarity lit_16)) in true };
    _32 <- ();
    assert { [#"../Robinson/src/assignments.rs" 171 30 171 103] let _ = LemmaExtensionsUnsatBaseUnsat0.lemma_extensions_unsat_base_unsat (Model1.model _old_a_8) (IndexLogic0.index_logic lit_16) f_3 in true };
    _33 <- ();
    assert { [#"../Robinson/src/assignments.rs" 172 30 172 54]  ^ self_1 =  ^ _old_a_8 };
    _34 <- ();
    _0 <- Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unit_Type;
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module Robinson_Formula_Impl1_Sat_Interface
  use Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type
  predicate sat (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
end
module Robinson_Formula_Impl1_Sat
  use Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate sat [#"../Robinson/src/formula.rs" 90 4 90 44] (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
   =
    [#"../Robinson/src/formula.rs" 91 20 91 38] SatInner0.sat_inner self (Model0.model a)
end
module Robinson_Formula_Impl1_Unsat_Interface
  use Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type
  predicate unsat (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
end
module Robinson_Formula_Impl1_Unsat
  use Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate unsat [#"../Robinson/src/formula.rs" 103 4 103 46] (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
   =
    [#"../Robinson/src/formula.rs" 104 20 104 40] UnsatInner0.unsat_inner self (Model0.model a)
end
module Robinson_Clause_Impl1_Unknown_Interface
  use Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type
  predicate unknown (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
end
module Robinson_Clause_Impl1_Unknown
  use Robinson_Assignments_Assignments_Type
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_Unsat_Interface as Unsat0
  clone Robinson_Clause_Impl1_Sat_Interface as Sat0
  predicate unknown [#"../Robinson/src/clause.rs" 76 4 76 48] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
   =
    [#"../Robinson/src/clause.rs" 77 8 77 38] not Sat0.sat self a /\ not Unsat0.unsat self a
end
module Robinson_Assignments_Impl2_UnitPropagate_Interface
  use prelude.Borrow
  use Robinson_Formula_Formula_Type
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl1_Complete_Interface as Complete0
  clone Robinson_Formula_Impl1_Unsat_Interface as Unsat0
  clone Robinson_Formula_Impl1_Sat_Interface as Sat0
  use Robinson_Clause_ClauseState_Type
  clone Robinson_Assignments_Impl1_Compatible_Interface as Compatible0
  clone Robinson_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  val unit_propagate [@cfg:stackify] (self : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type
    requires {[#"../Robinson/src/assignments.rs" 180 15 180 28] Invariant0.invariant' f}
    requires {[#"../Robinson/src/assignments.rs" 181 15 181 33] Invariant1.invariant' ( * self) f}
    ensures { [#"../Robinson/src/assignments.rs" 182 14 182 35] Invariant1.invariant' ( ^ self) f }
    ensures { [#"../Robinson/src/assignments.rs" 183 14 183 82] EventuallySatComplete0.eventually_sat_complete f ( ^ self) = EventuallySatComplete0.eventually_sat_complete f ( * self) }
    ensures { [#"../Robinson/src/assignments.rs" 184 14 184 39] Compatible0.compatible ( * self) ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 185 14 190 5] match (result) with
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Sat_Type -> Sat0.sat f ( ^ self)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type -> Unsat0.unsat f ( ^ self)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unknown_Type -> not Complete0.complete ( ^ self)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unit_Type -> not Complete0.complete ( * self)
      end }
    ensures { [#"../Robinson/src/assignments.rs" 191 4 191 106] Complete0.complete ( * self) ->  * self =  ^ self /\ (result = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type \/ Sat0.sat f ( * self)) }
    
end
module Robinson_Assignments_Impl2_UnitPropagate
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Lit_Impl1_Invariant as Invariant3
  clone Robinson_Lit_Impl1_UnsatInner as UnsatInner2
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  clone Robinson_Lit_Impl1_UnsetInner as UnsetInner0
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner1.sat_inner, function Model0.model = Model3.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Robinson_Clause_Impl1_Unsat as Unsat1 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Clause_Impl1_Sat as Sat1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Clause_Impl1_Unit as Unit0 with function Model0.model = Model1.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone Robinson_Clause_Impl1_Unknown as Unknown0 with predicate Sat0.sat = Sat1.sat,
  predicate Unsat0.unsat = Unsat1.unsat
  clone Robinson_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  clone Robinson_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Formula_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  use Robinson_Clause_ClauseState_Type
  clone Robinson_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model1.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model1.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  use prelude.UIntSize
  use prelude.IntSize
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model5 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type
  clone Robinson_Assignments_Impl2_UnitPropOnce_Interface as UnitPropOnce0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant0.invariant', function Model0.model = Model0.model,
  predicate Compatible0.compatible = Compatible0.compatible,
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
  predicate Unit0.unit = Unit0.unit, predicate Complete0.complete = Complete0.complete, predicate Sat0.sat = Sat1.sat,
  function Model1.model = Model5.model, function Model2.model = Model1.model, predicate Unsat0.unsat = Unsat1.unsat
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model
  let rec cfg unit_propagate [@cfg:stackify] [#"../Robinson/src/assignments.rs" 192 4 192 64] (self : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type
    requires {[#"../Robinson/src/assignments.rs" 180 15 180 28] Invariant0.invariant' f}
    requires {[#"../Robinson/src/assignments.rs" 181 15 181 33] Invariant1.invariant' ( * self) f}
    ensures { [#"../Robinson/src/assignments.rs" 182 14 182 35] Invariant1.invariant' ( ^ self) f }
    ensures { [#"../Robinson/src/assignments.rs" 183 14 183 82] EventuallySatComplete0.eventually_sat_complete f ( ^ self) = EventuallySatComplete0.eventually_sat_complete f ( * self) }
    ensures { [#"../Robinson/src/assignments.rs" 184 14 184 39] Compatible0.compatible ( * self) ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 185 14 190 5] match (result) with
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Sat_Type -> Sat0.sat f ( ^ self)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type -> Unsat0.unsat f ( ^ self)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unknown_Type -> not Complete0.complete ( ^ self)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unit_Type -> not Complete0.complete ( * self)
      end }
    ensures { [#"../Robinson/src/assignments.rs" 191 4 191 106] Complete0.complete ( * self) ->  * self =  ^ self /\ (result = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type \/ Sat0.sat f ( * self)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
  var self_1 : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type);
  var f_2 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var _3 : ();
  ghost var _old_a_4 : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type);
  var _5 : ();
  var i_6 : usize;
  var out_7 : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
  var _8 : ();
  var _9 : ();
  var _10 : bool;
  var _11 : usize;
  var _12 : usize;
  var _13 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Clause_Clause_Type.robinson_clause_clause_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _14 : ();
  var _15 : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
  var _16 : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type);
  var _17 : usize;
  var _18 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var _19 : isize;
  var _20 : ();
  var _21 : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
  var _22 : isize;
  var _23 : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    self_1 <- self;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    _5 <- ();
    _old_a_4 <- ghost ([#"../Robinson/src/assignments.rs" 193 21 193 33] self_1);
    goto BB1
  }
  BB1 {
    i_6 <- (0 : usize);
    out_7 <- Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Sat_Type;
    goto BB2
  }
  BB2 {
    invariant assignment_invariant { [#"../Robinson/src/assignments.rs" 196 42 196 60] Invariant1.invariant' ( * self_1) f_2 };
    invariant proph { [#"../Robinson/src/assignments.rs" 197 27 197 51]  ^ self_1 =  ^ _old_a_4 };
    invariant maintains_compat { [#"../Robinson/src/assignments.rs" 198 38 198 62] Compatible0.compatible ( * _old_a_4) ( * self_1) };
    invariant maintains_sat { [#"../Robinson/src/assignments.rs" 199 35 199 113] EventuallySatComplete0.eventually_sat_complete f_2 ( * _old_a_4) = EventuallySatComplete0.eventually_sat_complete f_2 ( * self_1) };
    invariant out_not_unsat { [#"../Robinson/src/assignments.rs" 200 35 200 63] not out_7 = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type };
    invariant inv { [#"../Robinson/src/assignments.rs" 196 8 196 62] Complete0.complete ( * _old_a_4) ->  * _old_a_4 =  * self_1 /\ (forall j : (int) . 0 <= j /\ j < UInt64.to_int i_6 -> not Unknown0.unknown (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f_2)) j) ( * self_1) /\ not Unit0.unit (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f_2)) j) ( * self_1) /\ Sat1.sat (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f_2)) j) ( * self_1)) };
    invariant inv2 { [#"../Robinson/src/assignments.rs" 196 8 196 62] out_7 = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Sat_Type -> (forall j : (int) . 0 <= j /\ j < UInt64.to_int i_6 -> not Unsat1.unsat (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f_2)) j) ( * self_1) /\ not Unknown0.unknown (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f_2)) j) ( * self_1) /\ not Unit0.unit (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f_2)) j) ( * self_1) /\ Sat1.sat (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f_2)) j) ( * self_1)) };
    invariant inv3 { [#"../Robinson/src/assignments.rs" 196 8 196 62] out_7 = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unit_Type -> not Complete0.complete ( * _old_a_4) };
    invariant inv4 { [#"../Robinson/src/assignments.rs" 196 8 196 62] out_7 = Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unknown_Type -> not Complete0.complete ( * self_1) };
    _11 <- i_6;
    _13 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f_2;
    _12 <- ([#"../Robinson/src/assignments.rs" 211 18 211 33] Len0.len _13);
    goto BB3
  }
  BB3 {
    _10 <- ([#"../Robinson/src/assignments.rs" 211 14 211 33] _11 < _12);
    switch (_10)
      | False -> goto BB14
      | _ -> goto BB4
      end
  }
  BB4 {
    _16 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _16) };
    _17 <- i_6;
    _18 <- f_2;
    _15 <- ([#"../Robinson/src/assignments.rs" 212 18 212 43] UnitPropOnce0.unit_prop_once _16 _17 _18);
    goto BB5
  }
  BB5 {
    switch (_15)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Sat_Type -> goto BB8
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type -> goto BB9
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unit_Type -> goto BB10
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unknown_Type -> goto BB6
      end
  }
  BB6 {
    switch (out_7)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Sat_Type -> goto BB12
      | _ -> goto BB11
      end
  }
  BB7 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB8 {
    _14 <- ();
    goto BB13
  }
  BB9 {
    assume { Resolve0.resolve self_1 };
    _0 <- Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type;
    goto BB15
  }
  BB10 {
    _21 <- Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unit_Type;
    out_7 <- _21;
    _21 <- any Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
    _14 <- ();
    goto BB13
  }
  BB11 {
    _14 <- ();
    goto BB13
  }
  BB12 {
    _23 <- Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unknown_Type;
    out_7 <- _23;
    _23 <- any Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
    _14 <- ();
    goto BB13
  }
  BB13 {
    i_6 <- ([#"../Robinson/src/assignments.rs" 227 12 227 18] i_6 + (1 : usize));
    _9 <- ();
    goto BB2
  }
  BB14 {
    assume { Resolve0.resolve self_1 };
    _8 <- ();
    _0 <- out_7;
    out_7 <- any Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module Core_Option_Option_Type
  type core_option_option_type 't =
    | Core_Option_Option_None_Type
    | Core_Option_Option_Some_Type 't
    
  let function core_option_option_type_Some_0 (self : core_option_option_type 't) : 't
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Core_Option_Option_None_Type -> any 't
      | Core_Option_Option_Some_Type a -> a
      end
end
module Robinson_Assignments_Impl2_DoUnitPropagation_Interface
  use prelude.Borrow
  use Robinson_Formula_Formula_Type
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl1_Complete_Interface as Complete0
  clone Robinson_Formula_Impl1_Sat_Interface as Sat0
  clone Robinson_Formula_Impl1_Unsat_Interface as Unsat0
  use Core_Option_Option_Type
  clone Robinson_Assignments_Impl1_Compatible_Interface as Compatible0
  clone Robinson_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  val do_unit_propagation [@cfg:stackify] (self : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : Core_Option_Option_Type.core_option_option_type bool
    requires {[#"../Robinson/src/assignments.rs" 233 15 233 28] Invariant0.invariant' f}
    requires {[#"../Robinson/src/assignments.rs" 234 4 234 42] Invariant1.invariant' ( * self) f}
    ensures { [#"../Robinson/src/assignments.rs" 234 4 234 42] Invariant1.invariant' ( ^ self) f }
    ensures { [#"../Robinson/src/assignments.rs" 235 14 235 82] EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 236 14 236 39] Compatible0.compatible ( * self) ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 237 4 237 56] result = Core_Option_Option_Type.Core_Option_Option_Some_Type false -> Unsat0.unsat f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 238 4 238 53] result = Core_Option_Option_Type.Core_Option_Option_Some_Type true -> Sat0.sat f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 239 4 239 54] result = Core_Option_Option_Type.Core_Option_Option_None_Type -> not Complete0.complete ( ^ self) }
    
end
module Robinson_Assignments_Impl2_DoUnitPropagation
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  clone Robinson_Lit_Impl1_UnsatInner as UnsatInner2
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Lit_Impl1_Invariant as Invariant3
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Robinson_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  clone Robinson_Formula_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  use Core_Option_Option_Type
  clone Robinson_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model1.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model1.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  use prelude.IntSize
  use Robinson_Clause_ClauseState_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type
  clone Robinson_Assignments_Impl2_UnitPropagate_Interface as UnitPropagate0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant',
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
  predicate Compatible0.compatible = Compatible0.compatible, predicate Sat0.sat = Sat0.sat,
  predicate Unsat0.unsat = Unsat0.unsat, predicate Complete0.complete = Complete0.complete
  let rec cfg do_unit_propagation [@cfg:stackify] [#"../Robinson/src/assignments.rs" 240 4 240 70] (self : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)) (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : Core_Option_Option_Type.core_option_option_type bool
    requires {[#"../Robinson/src/assignments.rs" 233 15 233 28] Invariant0.invariant' f}
    requires {[#"../Robinson/src/assignments.rs" 234 4 234 42] Invariant1.invariant' ( * self) f}
    ensures { [#"../Robinson/src/assignments.rs" 234 4 234 42] Invariant1.invariant' ( ^ self) f }
    ensures { [#"../Robinson/src/assignments.rs" 235 14 235 82] EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 236 14 236 39] Compatible0.compatible ( * self) ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 237 4 237 56] result = Core_Option_Option_Type.Core_Option_Option_Some_Type false -> Unsat0.unsat f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 238 4 238 53] result = Core_Option_Option_Type.Core_Option_Option_Some_Type true -> Sat0.sat f ( ^ self) }
    ensures { [#"../Robinson/src/assignments.rs" 239 4 239 54] result = Core_Option_Option_Type.Core_Option_Option_None_Type -> not Complete0.complete ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.core_option_option_type bool;
  var self_1 : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type);
  var f_2 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  ghost var _old_a_3 : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type);
  var _4 : ();
  var _5 : ();
  var _6 : ();
  var _7 : Robinson_Clause_ClauseState_Type.robinson_clause_clausestate_type;
  var _8 : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type);
  var _9 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var _10 : isize;
  var _11 : ();
  var _12 : ();
  var _13 : ();
  {
    self_1 <- self;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    _4 <- ();
    _old_a_3 <- ghost ([#"../Robinson/src/assignments.rs" 241 21 241 33] self_1);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant assignments_invariant { [#"../Robinson/src/assignments.rs" 242 43 242 61] Invariant1.invariant' ( * self_1) f_2 };
    invariant proph { [#"../Robinson/src/assignments.rs" 243 27 243 51]  ^ self_1 =  ^ _old_a_3 };
    invariant maintains_compat { [#"../Robinson/src/assignments.rs" 244 38 244 62] Compatible0.compatible ( * _old_a_3) ( * self_1) };
    invariant maintains_sat { [#"../Robinson/src/assignments.rs" 242 8 242 63] EventuallySatComplete0.eventually_sat_complete f_2 ( * _old_a_3) -> EventuallySatComplete0.eventually_sat_complete f_2 ( * self_1) };
    _8 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _8) };
    _9 <- f_2;
    _7 <- ([#"../Robinson/src/assignments.rs" 247 18 247 40] UnitPropagate0.unit_propagate _8 _9);
    goto BB3
  }
  BB3 {
    switch (_7)
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Sat_Type -> goto BB6
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unsat_Type -> goto BB7
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unit_Type -> goto BB4
      | Robinson_Clause_ClauseState_Type.Robinson_Clause_ClauseState_Unknown_Type -> goto BB8
      end
  }
  BB4 {
    _6 <- ();
    goto BB2
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB6 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.Core_Option_Option_Some_Type true;
    goto BB9
  }
  BB7 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.Core_Option_Option_Some_Type false;
    goto BB9
  }
  BB8 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.Core_Option_Option_None_Type;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Robinson_Clause_Impl1_NoDuplicateIndexes_Interface
  use Robinson_Clause_Clause_Type
  predicate no_duplicate_indexes (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type)
end
module Robinson_Clause_Impl1_NoDuplicateIndexes
  use Robinson_Clause_Clause_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl0_IndexLogic_Interface as IndexLogic0
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  predicate no_duplicate_indexes [#"../Robinson/src/clause.rs" 89 4 89 45] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type)
    
   =
    [#"../Robinson/src/clause.rs" 90 8 93 9] forall k : (int) . forall j : (int) . 0 <= j /\ j < Seq.length (Model0.model self) /\ 0 <= k /\ k < j -> not IndexLogic0.index_logic (Seq.get (Model0.model self) k) = IndexLogic0.index_logic (Seq.get (Model0.model self) j)
end
module Robinson_Clause_Impl2_Len_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Robinson_Lit_Lit_Type
  clone Robinson_Clause_Impl0_ModelTy_Type as ModelTy0
  use Robinson_Clause_Clause_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) : usize
    ensures { [#"../Robinson/src/clause.rs" 225 14 225 38] UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Robinson_Clause_Impl2_Len
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl0_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model
  let rec cfg len [@cfg:stackify] [#"../Robinson/src/clause.rs" 226 4 226 30] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) : usize
    ensures { [#"../Robinson/src/clause.rs" 225 14 225 38] UInt64.to_int result = Seq.length (Model0.model self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var _2 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest self_1;
    _0 <- ([#"../Robinson/src/clause.rs" 227 8 227 23] Len0.len _2);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Robinson_Lit_Impl2_CheckLitInvariant_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Invariant_Interface as Invariant0
  val check_lit_invariant [@cfg:stackify] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (n : usize) : bool
    ensures { [#"../Robinson/src/lit.rs" 126 14 126 42] result = Invariant0.invariant' self (UInt64.to_int n) }
    ensures { [#"../Robinson/src/lit.rs" 127 14 127 40] result = (UInt64.to_int (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self) < UInt64.to_int n) }
    
end
module Robinson_Lit_Impl2_CheckLitInvariant
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Invariant as Invariant0
  let rec cfg check_lit_invariant [@cfg:stackify] [#"../Robinson/src/lit.rs" 128 4 128 55] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (n : usize) : bool
    ensures { [#"../Robinson/src/lit.rs" 126 14 126 42] result = Invariant0.invariant' self (UInt64.to_int n) }
    ensures { [#"../Robinson/src/lit.rs" 127 14 127 40] result = (UInt64.to_int (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self) < UInt64.to_int n) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var n_2 : usize;
  var _3 : usize;
  var _4 : usize;
  {
    self_1 <- self;
    n_2 <- n;
    goto BB0
  }
  BB0 {
    _3 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self_1;
    _4 <- n_2;
    _0 <- ([#"../Robinson/src/lit.rs" 129 8 129 20] _3 < _4);
    return _0
  }
  
end
module Robinson_Clause_Impl2_CheckClauseInvariant_Interface
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Borrow
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_Invariant_Interface as Invariant0
  clone Robinson_Clause_Impl1_VarsInRange_Interface as VarsInRange0
  val check_clause_invariant [@cfg:stackify] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (n : usize) : usize
    requires {[#"../Robinson/src/clause.rs" 179 15 179 46] VarsInRange0.vars_in_range self 18446744073709551615}
    ensures { [#"../Robinson/src/clause.rs" 180 14 180 37] Invariant0.invariant' self (UInt64.to_int result) }
    
end
module Robinson_Clause_Impl2_CheckClauseInvariant
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Borrow
  use mach.int.Int32
  use seq.Seq
  use Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Clause_Impl0_ModelTy_Type as ModelTy0
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Lit_Impl1_Invariant as Invariant1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone Robinson_Lit_Impl2_CheckLitInvariant_Interface as CheckLitInvariant0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type i = usize, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Robinson_Clause_Impl2_Len_Interface as Len0 with function Model0.model = Model0.model
  let rec cfg check_clause_invariant [@cfg:stackify] [#"../Robinson/src/clause.rs" 181 4 181 59] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) (n : usize) : usize
    requires {[#"../Robinson/src/clause.rs" 179 15 179 46] VarsInRange0.vars_in_range self 18446744073709551615}
    ensures { [#"../Robinson/src/clause.rs" 180 14 180 37] Invariant0.invariant' self (UInt64.to_int result) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var n_2 : usize;
  var i_3 : usize;
  var new_n_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _15 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _16 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _17 : usize;
  var _18 : usize;
  var _19 : usize;
  var _20 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _21 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _22 : usize;
  var _23 : ();
  var _24 : ();
  var _25 : ();
  {
    self_1 <- self;
    n_2 <- n;
    goto BB0
  }
  BB0 {
    i_3 <- (0 : usize);
    new_n_4 <- n_2;
    goto BB1
  }
  BB1 {
    invariant inv { [#"../Robinson/src/clause.rs" 184 8 184 91] forall j : (int) . 0 <= j /\ j < UInt64.to_int i_3 -> Invariant1.invariant' (Seq.get (Model0.model self_1) j) (UInt64.to_int new_n_4) };
    invariant new_n_inv { [#"../Robinson/src/clause.rs" 185 31 185 43] UInt64.to_int new_n_4 >= UInt64.to_int n_2 };
    _8 <- i_3;
    _10 <- self_1;
    _9 <- ([#"../Robinson/src/clause.rs" 186 18 186 28] Len0.len _10);
    goto BB2
  }
  BB2 {
    _7 <- ([#"../Robinson/src/clause.rs" 186 14 186 28] _8 < _9);
    switch (_7)
      | False -> goto BB10
      | _ -> goto BB3
      end
  }
  BB3 {
    _16 <- Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest self_1;
    _17 <- i_3;
    _15 <- ([#"../Robinson/src/clause.rs" 187 16 187 28] Index0.index _16 _17);
    goto BB4
  }
  BB4 {
    _14 <- _15;
    _18 <- new_n_4;
    _13 <- ([#"../Robinson/src/clause.rs" 187 16 187 55] CheckLitInvariant0.check_lit_invariant _14 _18);
    goto BB5
  }
  BB5 {
    _12 <- not _13;
    switch (_12)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB6 {
    _21 <- Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest self_1;
    _22 <- i_3;
    _20 <- ([#"../Robinson/src/clause.rs" 188 24 188 36] Index0.index _21 _22);
    goto BB7
  }
  BB7 {
    _19 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx _20;
    new_n_4 <- ([#"../Robinson/src/clause.rs" 188 16 188 44] _19 + (1 : usize));
    _11 <- ();
    goto BB9
  }
  BB8 {
    _11 <- ();
    goto BB9
  }
  BB9 {
    i_3 <- ([#"../Robinson/src/clause.rs" 190 12 190 18] i_3 + (1 : usize));
    _6 <- ();
    goto BB1
  }
  BB10 {
    _5 <- ();
    _0 <- new_n_4;
    return _0
  }
  
end
module Robinson_Clause_Impl2_NoDuplicates_Interface
  use prelude.Borrow
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl1_NoDuplicateIndexes_Interface as NoDuplicateIndexes0
  val no_duplicates [@cfg:stackify] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) : bool
    ensures { [#"../Robinson/src/clause.rs" 201 14 201 51] result = NoDuplicateIndexes0.no_duplicate_indexes self }
    
end
module Robinson_Clause_Impl2_NoDuplicates
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Clause_Impl0_ModelTy_Type as ModelTy0
  clone Robinson_Lit_Impl0_IndexLogic as IndexLogic0
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Robinson_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type i = usize, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model
  let rec cfg no_duplicates [@cfg:stackify] [#"../Robinson/src/clause.rs" 202 4 202 39] (self : Robinson_Clause_Clause_Type.robinson_clause_clause_type) : bool
    ensures { [#"../Robinson/src/clause.rs" 201 14 201 51] result = NoDuplicateIndexes0.no_duplicate_indexes self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var _2 : ();
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var lit1_10 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _11 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _12 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _13 : usize;
  var j_14 : usize;
  var _15 : ();
  var _16 : bool;
  var _17 : usize;
  var _18 : usize;
  var lit2_19 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _20 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _21 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _22 : usize;
  var _23 : ();
  var _24 : bool;
  var _25 : usize;
  var _26 : usize;
  var _27 : ();
  var _28 : ();
  var _29 : ();
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    i_3 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant no_dups { [#"../Robinson/src/clause.rs" 204 8 206 67] forall k : (int) . forall j : (int) . 0 <= j /\ j < UInt64.to_int i_3 /\ 0 <= k /\ k < j -> Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx (Seq.get (Model0.model self_1) j) <> Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx (Seq.get (Model0.model self_1) k) };
    _7 <- i_3;
    _9 <- Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest self_1;
    _8 <- ([#"../Robinson/src/clause.rs" 207 18 207 33] Len0.len _9);
    goto BB2
  }
  BB2 {
    _6 <- ([#"../Robinson/src/clause.rs" 207 14 207 33] _7 < _8);
    switch (_6)
      | False -> goto BB11
      | _ -> goto BB3
      end
  }
  BB3 {
    _12 <- Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest self_1;
    _13 <- i_3;
    _11 <- ([#"../Robinson/src/clause.rs" 208 23 208 35] Index0.index _12 _13);
    goto BB4
  }
  BB4 {
    lit1_10 <- _11;
    j_14 <- (0 : usize);
    goto BB5
  }
  BB5 {
    invariant inv { [#"../Robinson/src/clause.rs" 210 12 210 93] forall k : (int) . 0 <= k /\ k < UInt64.to_int j_14 -> Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx lit1_10 <> Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx (Seq.get (Model0.model self_1) k) };
    _17 <- j_14;
    _18 <- i_3;
    _16 <- ([#"../Robinson/src/clause.rs" 211 18 211 23] _17 < _18);
    switch (_16)
      | False -> goto BB10
      | _ -> goto BB6
      end
  }
  BB6 {
    _21 <- Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest self_1;
    _22 <- j_14;
    _20 <- ([#"../Robinson/src/clause.rs" 212 27 212 39] Index0.index _21 _22);
    goto BB7
  }
  BB7 {
    lit2_19 <- _20;
    _25 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx lit1_10;
    _26 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx lit2_19;
    _24 <- ([#"../Robinson/src/clause.rs" 213 19 213 39] _25 = _26);
    switch (_24)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    _0 <- false;
    goto BB12
  }
  BB9 {
    _23 <- ();
    j_14 <- ([#"../Robinson/src/clause.rs" 216 16 216 22] j_14 + (1 : usize));
    _5 <- ();
    goto BB5
  }
  BB10 {
    _15 <- ();
    i_3 <- ([#"../Robinson/src/clause.rs" 218 12 218 18] i_3 + (1 : usize));
    _5 <- ();
    goto BB1
  }
  BB11 {
    _4 <- ();
    _0 <- true;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Robinson_Util_SortedRangeRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  predicate sorted_range_rev (s : Seq.seq (usize, usize)) (l : int) (u : int)
end
module Robinson_Util_SortedRangeRev
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  predicate sorted_range_rev [#"../Robinson/src/util.rs" 8 0 8 67] (s : Seq.seq (usize, usize)) (l : int) (u : int) =
    [#"../Robinson/src/util.rs" 9 4 11 5] forall j : (int) . forall i : (int) . l <= i /\ i < j /\ j < u -> (let (a, _) = Seq.get s i in a) >= (let (a, _) = Seq.get s j in a)
end
module Robinson_Util_SortedRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  predicate sorted_rev (s : Seq.seq (usize, usize))
end
module Robinson_Util_SortedRev
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.Int32
  clone Robinson_Util_SortedRangeRev_Interface as SortedRangeRev0
  predicate sorted_rev [#"../Robinson/src/util.rs" 15 0 15 49] (s : Seq.seq (usize, usize)) =
    [#"../Robinson/src/util.rs" 16 4 16 35] SortedRangeRev0.sorted_range_rev s 0 (Seq.length s)
end
module CreusotContracts_Logic_Seq_Impl2_PermutationOf_Interface
  type t
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl2_PermutationOf
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) =
    Permut.permut self o 0 (Seq.length self)
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy_Type
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Robinson_Util_PartitionRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  predicate partition_rev (v : Seq.seq (usize, usize)) (i : int)
end
module Robinson_Util_PartitionRev
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.Int32
  predicate partition_rev [#"../Robinson/src/util.rs" 20 0 20 56] (v : Seq.seq (usize, usize)) (i : int) =
    [#"../Robinson/src/util.rs" 21 4 21 110] forall k2 : (int) . forall k1 : (int) . 0 <= k1 /\ k1 < i /\ i <= k2 /\ k2 < Seq.length v -> (let (a, _) = Seq.get v k1 in a) >= (let (a, _) = Seq.get v k2 in a)
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Slice.id self && Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_Impl11_DerefMut_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val deref_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) : borrowed (seq t)
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    
end
module Alloc_Vec_Impl11_DerefMut
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val deref_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) : borrowed (seq t)
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    
end
module Core_Slice_Impl0_Swap_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use seq.Permut
  use prelude.Slice
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model1 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Core_Slice_Impl0_Swap
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use seq.Permut
  use prelude.Slice
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model1 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Alloc_Vec_Impl11
  type t
  type a
end
module Robinson_Util_SortReverse_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = (usize, usize),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf_Interface as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Robinson_Util_SortedRev_Interface as SortedRev0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = (usize, usize),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val sort_reverse [@cfg:stackify] (v : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type))) : ()
    ensures { [#"../Robinson/src/util.rs" 26 10 26 25] SortedRev0.sorted_rev (Model0.model ( ^ v)) }
    ensures { [#"../Robinson/src/util.rs" 27 10 27 34] PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    
end
module Robinson_Util_SortReverse
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = (usize, usize),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone Robinson_Util_PartitionRev as PartitionRev0
  clone Robinson_Util_SortedRangeRev as SortedRangeRev0
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = (usize, usize),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone Robinson_Util_SortedRev as SortedRev0 with predicate SortedRangeRev0.sorted_range_rev = SortedRangeRev0.sorted_range_rev
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model2 with type t = (usize, usize), axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = seq (usize, usize),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = seq (usize, usize)
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = (usize, usize), function Model0.model = Model3.model,
  function Model1.model = Model2.model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = (usize, usize),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model,
  function Model1.model = Model0.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = (usize, usize), type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = (usize, usize),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model
  let rec cfg sort_reverse [@cfg:stackify] [#"../Robinson/src/util.rs" 28 0 28 48] (v : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type))) : ()
    ensures { [#"../Robinson/src/util.rs" 26 10 26 25] SortedRev0.sorted_rev (Model0.model ( ^ v)) }
    ensures { [#"../Robinson/src/util.rs" 27 10 27 34] PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var i_2 : usize;
  ghost var _old_v_3 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var max_10 : usize;
  var j_11 : usize;
  var _12 : usize;
  var _13 : ();
  var _14 : bool;
  var _15 : usize;
  var _16 : usize;
  var _17 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _18 : ();
  var _19 : bool;
  var _20 : usize;
  var _21 : (usize, usize);
  var _22 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _23 : usize;
  var _24 : usize;
  var _25 : (usize, usize);
  var _26 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _27 : usize;
  var _28 : usize;
  var _29 : ();
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : borrowed (seq (usize, usize));
  var _34 : borrowed (seq (usize, usize));
  var _35 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _36 : usize;
  var _37 : usize;
  var _38 : ();
  var _39 : ();
  var _40 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    _4 <- ();
    _old_v_3 <- ghost ([#"../Robinson/src/util.rs" 30 17 30 26] v_1);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant proph_const { [#"../Robinson/src/util.rs" 31 29 31 50]  ^ v_1 =  ^ _old_v_3 };
    invariant permutation { [#"../Robinson/src/util.rs" 32 29 32 65] PermutationOf0.permutation_of (Model1.model v_1) (Model1.model _old_v_3) };
    invariant sorted { [#"../Robinson/src/util.rs" 33 24 33 51] SortedRangeRev0.sorted_range_rev (Model1.model v_1) 0 (UInt64.to_int i_2) };
    invariant partition { [#"../Robinson/src/util.rs" 34 27 34 48] PartitionRev0.partition_rev (Model1.model v_1) (UInt64.to_int i_2) };
    _7 <- i_2;
    _9 <-  * v_1;
    _8 <- ([#"../Robinson/src/util.rs" 35 14 35 21] Len0.len _9);
    goto BB3
  }
  BB3 {
    _6 <- ([#"../Robinson/src/util.rs" 35 10 35 21] _7 < _8);
    switch (_6)
      | False -> goto BB16
      | _ -> goto BB4
      end
  }
  BB4 {
    max_10 <- i_2;
    _12 <- i_2;
    j_11 <- ([#"../Robinson/src/util.rs" 37 20 37 25] _12 + (1 : usize));
    goto BB5
  }
  BB5 {
    invariant max_is_max { [#"../Robinson/src/util.rs" 38 8 38 96] forall k : (int) . UInt64.to_int i_2 <= k /\ k < UInt64.to_int j_11 -> (let (a, _) = Seq.get (Model1.model v_1) (UInt64.to_int max_10) in a) >= (let (a, _) = Seq.get (Model1.model v_1) k in a) };
    invariant j_bound { [#"../Robinson/src/util.rs" 39 29 39 57] UInt64.to_int i_2 <= UInt64.to_int j_11 /\ UInt64.to_int j_11 <= Seq.length (Model1.model v_1) };
    invariant max_bound { [#"../Robinson/src/util.rs" 40 31 40 54] UInt64.to_int i_2 <= UInt64.to_int max_10 /\ UInt64.to_int max_10 < UInt64.to_int j_11 };
    _15 <- j_11;
    _17 <-  * v_1;
    _16 <- ([#"../Robinson/src/util.rs" 41 18 41 25] Len0.len _17);
    goto BB6
  }
  BB6 {
    _14 <- ([#"../Robinson/src/util.rs" 41 14 41 25] _15 < _16);
    switch (_14)
      | False -> goto BB13
      | _ -> goto BB7
      end
  }
  BB7 {
    _22 <-  * v_1;
    _23 <- j_11;
    _21 <- ([#"../Robinson/src/util.rs" 42 15 42 19] Index0.index _22 _23);
    goto BB8
  }
  BB8 {
    _20 <- (let (a, _) = _21 in a);
    _26 <-  * v_1;
    _27 <- max_10;
    _25 <- ([#"../Robinson/src/util.rs" 42 24 42 30] Index0.index _26 _27);
    goto BB9
  }
  BB9 {
    _24 <- (let (a, _) = _25 in a);
    _19 <- ([#"../Robinson/src/util.rs" 42 15 42 32] _20 > _24);
    switch (_19)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    _28 <- j_11;
    max_10 <- _28;
    _28 <- any usize;
    _18 <- ();
    goto BB12
  }
  BB11 {
    _18 <- ();
    goto BB12
  }
  BB12 {
    j_11 <- ([#"../Robinson/src/util.rs" 45 12 45 18] j_11 + (1 : usize));
    _5 <- ();
    goto BB5
  }
  BB13 {
    _13 <- ();
    _35 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _35) };
    _34 <- ([#"../Robinson/src/util.rs" 47 8 47 22] DerefMut0.deref_mut _35);
    goto BB14
  }
  BB14 {
    _33 <- borrow_mut ( * _34);
    _34 <- { _34 with current = ( ^ _33) };
    _36 <- i_2;
    _37 <- max_10;
    _32 <- ([#"../Robinson/src/util.rs" 47 8 47 22] Swap0.swap _33 _36 _37);
    goto BB15
  }
  BB15 {
    assume { Resolve0.resolve _34 };
    i_2 <- ([#"../Robinson/src/util.rs" 48 8 48 14] i_2 + (1 : usize));
    _5 <- ();
    goto BB2
  }
  BB16 {
    assume { Resolve1.resolve v_1 };
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module Robinson_Decision_Impl1_New_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use Robinson_Decision_Decisions_Type
  use Robinson_Formula_Formula_Type
  clone Robinson_Decision_Impl0_Invariant_Interface as Invariant1
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type
    requires {[#"../Robinson/src/decision.rs" 26 15 26 28] Invariant0.invariant' f}
    ensures { [#"../Robinson/src/decision.rs" 27 14 27 43] Invariant1.invariant' result (UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f)) }
    
end
module Robinson_Decision_Impl1_New
  use mach.int.UInt64
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Robinson_Lit_Lit_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Lit_Impl1_Invariant as Invariant3
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = (usize, usize),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Decision_Decisions_Type
  use Robinson_Formula_Formula_Type
  clone Robinson_Decision_Impl0_Invariant as Invariant1 with function Model0.model = Model0.model
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Robinson_Util_SortedRangeRev as SortedRangeRev0
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve6 with type t1 = usize, type t2 = usize,
  predicate Resolve0.resolve = Resolve5.resolve, predicate Resolve1.resolve = Resolve5.resolve
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy4 with type t = (usize, usize),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl1_Model as Model5 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy4.modelTy, function Model0.model = Model1.model
  clone Robinson_Util_SortedRev as SortedRev0 with predicate SortedRangeRev0.sorted_range_rev = SortedRangeRev0.sorted_range_rev
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy3 with type t = (usize, usize)
  clone Core_Slice_Index_Impl2_Output_Type as Output3 with type t = (usize, usize)
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere1 with type t = (usize, usize)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue3 with type t = (usize, usize)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds3 with type t = (usize, usize)
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy2 with type t = usize
  clone Core_Slice_Index_Impl2_Output_Type as Output2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone Core_Slice_Index_Impl2_Output_Type as Output1 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve4 with type t = (usize, usize),
  function Model0.model = Model1.model, predicate Resolve0.resolve = Resolve6.resolve
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve3 with type t = usize, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve5.resolve
  clone Alloc_Vec_Impl16_Index_Interface as Index3 with type t = (usize, usize), type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds3.in_bounds, predicate HasValue0.has_value = HasValue3.has_value,
  type Output0.output = Output3.output
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone Robinson_Util_SortReverse_Interface as SortReverse0 with function Model0.model = Model1.model,
  predicate SortedRev0.sorted_rev = SortedRev0.sorted_rev, function Model1.model = Model5.model,
  predicate PermutationOf0.permutation_of = PermutationOf0.permutation_of
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = (usize, usize)
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with type t = (usize, usize), type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds3.in_bounds, predicate HasValue0.has_value = HasValue3.has_value,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere, type Output0.output = Output3.output
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = usize
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = usize, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue2.has_value,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index2 with type t = usize, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue2.has_value,
  type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type i = usize, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model4.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl1_Len_Interface as Len1 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model4.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type i = usize, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model
  clone Alloc_Vec_FromElem_Interface as FromElem1 with type t = (usize, usize), function Model0.model = Model1.model
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = usize, function Model0.model = Model0.model
  let rec cfg new [@cfg:stackify] [#"../Robinson/src/decision.rs" 28 4 28 40] (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type
    requires {[#"../Robinson/src/decision.rs" 26 15 26 28] Invariant0.invariant' f}
    ensures { [#"../Robinson/src/decision.rs" 27 14 27 43] Invariant1.invariant' result (UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type;
  var f_1 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var lit_order_2 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _3 : usize;
  var counts_4 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _5 : usize;
  var counts_with_index_6 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _7 : (usize, usize);
  var _8 : usize;
  var i_9 : usize;
  var _10 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Clause_Clause_Type.robinson_clause_clause_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var curr_clause_16 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var _17 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var _18 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Clause_Clause_Type.robinson_clause_clause_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _19 : usize;
  var j_20 : usize;
  var _21 : ();
  var _22 : bool;
  var _23 : usize;
  var _24 : usize;
  var _25 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _26 : ();
  var _27 : bool;
  var _28 : usize;
  var _29 : usize;
  var _30 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _31 : usize;
  var _32 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _33 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _34 : usize;
  var _35 : borrowed usize;
  var _36 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _37 : usize;
  var _38 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _39 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Lit_Lit_Type.robinson_lit_lit_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _40 : usize;
  var _41 : ();
  var _42 : ();
  var _43 : ();
  var _44 : ();
  var _45 : ();
  var _46 : ();
  var _47 : ();
  var _48 : bool;
  var _49 : usize;
  var _50 : usize;
  var _51 : usize;
  var _52 : usize;
  var _53 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _54 : usize;
  var _55 : usize;
  var _56 : borrowed (usize, usize);
  var _57 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _58 : usize;
  var _59 : ();
  var _60 : ();
  var _61 : ();
  var _62 : ();
  var _63 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _64 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _65 : ();
  var _66 : bool;
  var _67 : usize;
  var _68 : usize;
  var _69 : usize;
  var _70 : (usize, usize);
  var _71 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, usize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _72 : usize;
  var _73 : borrowed usize;
  var _74 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _75 : usize;
  var _76 : ();
  var _77 : ();
  var _78 : ();
  var _79 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _3 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f_1;
    lit_order_2 <- ([#"../Robinson/src/decision.rs" 29 40 29 69] FromElem0.from_elem (0 : usize) _3);
    goto BB1
  }
  BB1 {
    _5 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f_1;
    counts_4 <- ([#"../Robinson/src/decision.rs" 30 37 30 66] FromElem0.from_elem (0 : usize) _5);
    goto BB2
  }
  BB2 {
    _7 <- ((0 : usize), (0 : usize));
    _8 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f_1;
    counts_with_index_6 <- ([#"../Robinson/src/decision.rs" 31 57 31 91] FromElem1.from_elem _7 _8);
    goto BB3
  }
  BB3 {
    i_9 <- (0 : usize);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant counts_len1 { [#"../Robinson/src/decision.rs" 33 33 33 63] Seq.length (Model0.model counts_4) = UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f_1) };
    _13 <- i_9;
    _15 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f_1;
    _14 <- ([#"../Robinson/src/decision.rs" 34 18 34 33] Len0.len _15);
    goto BB6
  }
  BB6 {
    _12 <- ([#"../Robinson/src/decision.rs" 34 14 34 33] _13 < _14);
    switch (_12)
      | False -> goto BB21
      | _ -> goto BB7
      end
  }
  BB7 {
    _18 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses f_1;
    _19 <- i_9;
    _17 <- ([#"../Robinson/src/decision.rs" 35 31 35 43] Index0.index _18 _19);
    goto BB8
  }
  BB8 {
    curr_clause_16 <- _17;
    j_20 <- (0 : usize);
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    invariant counts_len { [#"../Robinson/src/decision.rs" 37 36 37 66] Seq.length (Model0.model counts_4) = UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f_1) };
    _23 <- j_20;
    _25 <- Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest curr_clause_16;
    _24 <- ([#"../Robinson/src/decision.rs" 38 22 38 44] Len1.len _25);
    goto BB11
  }
  BB11 {
    _22 <- ([#"../Robinson/src/decision.rs" 38 18 38 44] _23 < _24);
    switch (_22)
      | False -> goto BB20
      | _ -> goto BB12
      end
  }
  BB12 {
    _30 <- counts_4;
    _33 <- Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest curr_clause_16;
    _34 <- j_20;
    _32 <- ([#"../Robinson/src/decision.rs" 43 26 43 45] Index1.index _33 _34);
    goto BB13
  }
  BB13 {
    _31 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx _32;
    _29 <- ([#"../Robinson/src/decision.rs" 43 19 43 50] Index2.index _30 _31);
    goto BB14
  }
  BB14 {
    _28 <- _29;
    _27 <- ([#"../Robinson/src/decision.rs" 43 19 43 63] _28 < (18446744073709551615 : usize));
    switch (_27)
      | False -> goto BB18
      | _ -> goto BB15
      end
  }
  BB15 {
    _36 <- borrow_mut counts_4;
    counts_4 <-  ^ _36;
    _39 <- Robinson_Clause_Clause_Type.robinson_clause_clause_type_Clause_rest curr_clause_16;
    _40 <- j_20;
    _38 <- ([#"../Robinson/src/decision.rs" 44 27 44 46] Index1.index _39 _40);
    goto BB16
  }
  BB16 {
    _37 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx _38;
    _35 <- ([#"../Robinson/src/decision.rs" 44 20 44 51] IndexMut0.index_mut _36 _37);
    goto BB17
  }
  BB17 {
    _35 <- { _35 with current = ([#"../Robinson/src/decision.rs" 44 20 44 56]  * _35 + (1 : usize)) };
    assume { Resolve0.resolve _35 };
    _26 <- ();
    goto BB19
  }
  BB18 {
    _26 <- ();
    goto BB19
  }
  BB19 {
    j_20 <- ([#"../Robinson/src/decision.rs" 46 16 46 22] j_20 + (1 : usize));
    _11 <- ();
    goto BB10
  }
  BB20 {
    _21 <- ();
    i_9 <- ([#"../Robinson/src/decision.rs" 48 12 48 18] i_9 + (1 : usize));
    _11 <- ();
    goto BB5
  }
  BB21 {
    _10 <- ();
    i_9 <- (0 : usize);
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    goto BB24
  }
  BB24 {
    invariant counts_with_idx_len { [#"../Robinson/src/decision.rs" 51 41 51 82] Seq.length (Model1.model counts_with_index_6) = UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f_1) };
    invariant second_ok { [#"../Robinson/src/decision.rs" 51 8 51 84] forall j : (int) . 0 <= j /\ j < UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f_1) -> UInt64.to_int (let (_, a) = Seq.get (Model1.model counts_with_index_6) j in a) < UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f_1) };
    _49 <- i_9;
    _50 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f_1;
    _48 <- ([#"../Robinson/src/decision.rs" 54 14 54 28] _49 < _50);
    switch (_48)
      | False -> goto BB28
      | _ -> goto BB25
      end
  }
  BB25 {
    _53 <- counts_4;
    _54 <- i_9;
    _52 <- ([#"../Robinson/src/decision.rs" 55 36 55 45] Index2.index _53 _54);
    goto BB26
  }
  BB26 {
    _51 <- _52;
    _55 <- i_9;
    _57 <- borrow_mut counts_with_index_6;
    counts_with_index_6 <-  ^ _57;
    _58 <- i_9;
    _56 <- ([#"../Robinson/src/decision.rs" 55 12 55 32] IndexMut1.index_mut _57 _58);
    goto BB27
  }
  BB27 {
    _56 <- { _56 with current = (_51, _55) };
    assume { Resolve1.resolve _56 };
    i_9 <- ([#"../Robinson/src/decision.rs" 56 12 56 18] i_9 + (1 : usize));
    _11 <- ();
    goto BB24
  }
  BB28 {
    _47 <- ();
    _64 <- borrow_mut counts_with_index_6;
    counts_with_index_6 <-  ^ _64;
    _63 <- borrow_mut ( * _64);
    _64 <- { _64 with current = ( ^ _63) };
    _62 <- ([#"../Robinson/src/decision.rs" 58 8 58 44] SortReverse0.sort_reverse _63);
    goto BB29
  }
  BB29 {
    assume { Resolve2.resolve _64 };
    i_9 <- (0 : usize);
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    goto BB32
  }
  BB32 {
    invariant lit_order_len { [#"../Robinson/src/decision.rs" 60 35 60 68] Seq.length (Model0.model lit_order_2) = UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f_1) };
    invariant second_ok { [#"../Robinson/src/decision.rs" 60 8 60 70] forall j : (int) . 0 <= j /\ j < UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f_1) -> UInt64.to_int (Seq.get (Model0.model lit_order_2) j) < UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f_1) };
    _67 <- i_9;
    _68 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f_1;
    _66 <- ([#"../Robinson/src/decision.rs" 62 14 62 28] _67 < _68);
    switch (_66)
      | False -> goto BB36
      | _ -> goto BB33
      end
  }
  BB33 {
    _71 <- counts_with_index_6;
    _72 <- i_9;
    _70 <- ([#"../Robinson/src/decision.rs" 63 27 63 47] Index3.index _71 _72);
    goto BB34
  }
  BB34 {
    _69 <- (let (_, a) = _70 in a);
    _74 <- borrow_mut lit_order_2;
    lit_order_2 <-  ^ _74;
    _75 <- i_9;
    _73 <- ([#"../Robinson/src/decision.rs" 63 12 63 24] IndexMut0.index_mut _74 _75);
    goto BB35
  }
  BB35 {
    _73 <- { _73 with current = _69 };
    _69 <- any usize;
    assume { Resolve0.resolve _73 };
    i_9 <- ([#"../Robinson/src/decision.rs" 64 12 64 18] i_9 + (1 : usize));
    _11 <- ();
    goto BB32
  }
  BB36 {
    _65 <- ();
    assume { Resolve3.resolve _79 };
    _79 <- lit_order_2;
    lit_order_2 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    _0 <- Robinson_Decision_Decisions_Type.Robinson_Decision_Decisions_Type _79;
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    assume { Resolve4.resolve counts_with_index_6 };
    goto BB39
  }
  BB39 {
    assume { Resolve3.resolve counts_4 };
    goto BB40
  }
  BB40 {
    return _0
  }
  
end
module Robinson_Formula_Impl0_Model_Interface
  use seq.Seq
  use mach.int.Int
  use Robinson_Clause_Clause_Type
  use Robinson_Formula_Formula_Type
  function model (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : (Seq.seq (Robinson_Clause_Clause_Type.robinson_clause_clause_type), int)
    
end
module Robinson_Formula_Impl0_Model
  use seq.Seq
  use mach.int.Int
  use Robinson_Clause_Clause_Type
  use Robinson_Formula_Formula_Type
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  function model [#"../Robinson/src/formula.rs" 22 4 22 35] (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) : (Seq.seq (Robinson_Clause_Clause_Type.robinson_clause_clause_type), int)
    
   =
    [#"../Robinson/src/formula.rs" 23 8 23 53] (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses self), UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars self))
end
module Robinson_Formula_FormulaSatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type
  predicate formula_sat_inner (f : (Seq.seq (Robinson_Clause_Clause_Type.robinson_clause_clause_type), int)) (a : Seq.seq uint8)
    
end
module Robinson_Formula_FormulaSatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Clause_Clause_Type
  use mach.int.Int32
  clone Robinson_Clause_Impl1_SatInner_Interface as SatInner0
  predicate formula_sat_inner [#"../Robinson/src/formula.rs" 28 0 28 78] (f : (Seq.seq (Robinson_Clause_Clause_Type.robinson_clause_clause_type), int)) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/formula.rs" 29 4 32 5] forall i : (int) . 0 <= i /\ i < Seq.length (let (a, _) = f in a) -> SatInner0.sat_inner (Seq.get (let (a, _) = f in a) i) a
end
module Robinson_Formula_Impl1_EventuallySatInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  predicate eventually_sat_inner (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8)
    
end
module Robinson_Formula_Impl1_EventuallySatInner
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use Robinson_Formula_Formula_Type
  use mach.int.UInt64
  clone Robinson_Formula_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Assignments_CompatibleInner_Interface as CompatibleInner0
  predicate eventually_sat_inner [#"../Robinson/src/formula.rs" 46 4 46 68] (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Seq.seq uint8)
    
   =
    [#"../Robinson/src/formula.rs" 47 8 49 9] exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars self) /\ CompatibleInner0.compatible_inner a a2 /\ SatInner0.sat_inner self a2
end
module Robinson_Formula_Impl1_EventuallySatNoAss_Interface
  use Robinson_Formula_Formula_Type
  predicate eventually_sat_no_ass (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type)
end
module Robinson_Formula_Impl1_EventuallySatNoAss
  use Robinson_Formula_Formula_Type
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  clone Robinson_Formula_Impl1_SatInner_Interface as SatInner0
  predicate eventually_sat_no_ass [#"../Robinson/src/formula.rs" 53 4 53 46] (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type)
    
   =
    [#"../Robinson/src/formula.rs" 54 8 54 72] exists a2 : (Seq.seq uint8) . SatInner0.sat_inner self a2
end
module Robinson_Formula_Impl1_EventuallySatCompleteNoAss_Interface
  use Robinson_Formula_Formula_Type
  predicate eventually_sat_complete_no_ass (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type)
end
module Robinson_Formula_Impl1_EventuallySatCompleteNoAss
  use Robinson_Formula_Formula_Type
  use seq.Seq
  use mach.int.Int
  use prelude.UInt8
  use mach.int.UInt64
  clone Robinson_Formula_Impl1_SatInner_Interface as SatInner0
  clone Robinson_Assignments_CompleteInner_Interface as CompleteInner0
  predicate eventually_sat_complete_no_ass [#"../Robinson/src/formula.rs" 58 4 58 55] (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type)
    
   =
    [#"../Robinson/src/formula.rs" 59 8 61 9] exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars self) /\ CompleteInner0.complete_inner a2 /\ SatInner0.sat_inner self a2
end
module Robinson_Formula_Impl1_EventuallySat_Interface
  use Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type
  predicate eventually_sat (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
end
module Robinson_Formula_Impl1_EventuallySat
  use Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatInner_Interface as EventuallySatInner0
  clone Robinson_Assignments_Impl0_Model_Interface as Model0
  predicate eventually_sat [#"../Robinson/src/formula.rs" 77 4 77 55] (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type)
    
   =
    [#"../Robinson/src/formula.rs" 78 20 78 49] EventuallySatInner0.eventually_sat_inner self (Model0.model a)
end
module Robinson_Formula_Impl1_ContainsEmptyClause_Interface
  use Robinson_Formula_Formula_Type
  predicate contains_empty_clause (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type)
end
module Robinson_Formula_Impl1_ContainsEmptyClause
  use Robinson_Formula_Formula_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Robinson_Lit_Lit_Type
  use Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type
  clone Robinson_Clause_Impl0_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate contains_empty_clause [#"../Robinson/src/formula.rs" 108 4 108 46] (self : Robinson_Formula_Formula_Type.robinson_formula_formula_type)
    
   =
    [#"../Robinson/src/formula.rs" 109 8 112 9] exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses self)) /\ Seq.length (Model1.model (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses self)) i)) = 0
end
module Robinson_Solver_SatResult_Type
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  type robinson_solver_satresult_type  =
    | Robinson_Solver_SatResult_Sat_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    | Robinson_Solver_SatResult_Unsat_Type
    | Robinson_Solver_SatResult_Unknown_Type
    
end
module Robinson_Formula_Impl0_ModelTy_Type
  use seq.Seq
  use mach.int.Int
  use Robinson_Clause_Clause_Type
  type modelTy  =
    (Seq.seq (Robinson_Clause_Clause_Type.robinson_clause_clause_type), int)
end
module Robinson_Formula_Impl0
  use Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl0_ModelTy_Type as ModelTy0
  clone Robinson_Formula_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Robinson_Formula_Formula_Type.robinson_formula_formula_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Robinson_Formula_Formula_Type.robinson_formula_formula_type,
  type modelTy = ModelTy0.modelTy
end
module Robinson_Formula_Impl2_CheckAndEstablishFormulaInvariant_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  use seq.Seq
  use prelude.UIntSize
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Robinson_Clause_Clause_Type
  clone Robinson_Formula_Impl0_ModelTy_Type as ModelTy0
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  clone Robinson_Formula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone Robinson_Formula_Impl1_ContainsEmptyClause_Interface as ContainsEmptyClause0
  clone Robinson_Formula_FormulaSatInner_Interface as FormulaSatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Robinson_Formula_Formula_Type.robinson_formula_formula_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Robinson_Formula_Impl1_EventuallySatNoAss_Interface as EventuallySatNoAss0
  use Robinson_Solver_SatResult_Type
  clone Robinson_Clause_Impl1_VarsInRange_Interface as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val check_and_establish_formula_invariant [@cfg:stackify] (self : borrowed (Robinson_Formula_Formula_Type.robinson_formula_formula_type)) : Robinson_Solver_SatResult_Type.robinson_solver_satresult_type
    requires {[#"../Robinson/src/formula.rs" 118 4 119 59] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * self))) -> VarsInRange0.vars_in_range (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * self))) i) 18446744073709551615}
    ensures { [#"../Robinson/src/formula.rs" 120 14 124 5] match (result) with
      | Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Sat_Type assn -> EventuallySatNoAss0.eventually_sat_no_ass ( ^ self) /\ FormulaSatInner0.formula_sat_inner (Model1.model self) (Model2.model assn)
      | Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Unsat_Type -> ContainsEmptyClause0.contains_empty_clause ( ^ self) /\ not EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( * self)
      | Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Unknown_Type -> Invariant0.invariant' ( ^ self)
      end }
    ensures { [#"../Robinson/src/formula.rs" 125 14 125 45] Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * self) = Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( ^ self) }
    
end
module Robinson_Formula_Impl2_CheckAndEstablishFormulaInvariant
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.UInt8
  clone Robinson_Logic_Unset as Unset0
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model3 with function Model0.model = Model5.model
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl0_Model as Model4 with function Model0.model = Model0.model
  clone Robinson_Formula_Impl0_ModelTy_Type as ModelTy0
  clone Robinson_Lit_Impl1_Invariant as Invariant2
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Robinson_Clause_Impl1_Invariant as Invariant1 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Robinson_Formula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_ContainsEmptyClause as ContainsEmptyClause0 with function Model0.model = Model0.model,
  function Model1.model = Model3.model
  clone Robinson_Formula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Robinson_Formula_Formula_Type.robinson_formula_formula_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model4.model
  clone Robinson_Formula_Impl1_EventuallySatNoAss as EventuallySatNoAss0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  use Robinson_Solver_SatResult_Type
  clone Robinson_Clause_Impl0_ModelTy_Type as ModelTy2
  clone CreusotContracts_Logic_Model_Impl0_Model as Model6 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = uint8
  clone Robinson_Clause_Impl2_CheckClauseInvariant_Interface as CheckClauseInvariant0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Robinson_Clause_Impl2_Len_Interface as Len1 with function Model0.model = Model6.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type i = usize, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve1 with type t = uint8, function Model0.model = Model2.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = uint8, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Robinson_Formula_Formula_Type.robinson_formula_formula_type
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model
  let rec cfg check_and_establish_formula_invariant [@cfg:stackify] [#"../Robinson/src/formula.rs" 126 4 126 72] (self : borrowed (Robinson_Formula_Formula_Type.robinson_formula_formula_type)) : Robinson_Solver_SatResult_Type.robinson_solver_satresult_type
    requires {[#"../Robinson/src/formula.rs" 118 4 119 59] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * self))) -> VarsInRange0.vars_in_range (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * self))) i) 18446744073709551615}
    ensures { [#"../Robinson/src/formula.rs" 120 14 124 5] match (result) with
      | Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Sat_Type assn -> EventuallySatNoAss0.eventually_sat_no_ass ( ^ self) /\ FormulaSatInner0.formula_sat_inner (Model1.model self) (Model2.model assn)
      | Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Unsat_Type -> ContainsEmptyClause0.contains_empty_clause ( ^ self) /\ not EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( * self)
      | Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Unknown_Type -> Invariant0.invariant' ( ^ self)
      end }
    ensures { [#"../Robinson/src/formula.rs" 125 14 125 45] Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * self) = Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Solver_SatResult_Type.robinson_solver_satresult_type;
  var self_1 : borrowed (Robinson_Formula_Formula_Type.robinson_formula_formula_type);
  var _2 : ();
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Clause_Clause_Type.robinson_clause_clause_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _7 : ();
  var a_8 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _9 : ();
  var _10 : ();
  var _11 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  ghost var old_self_12 : borrowed (Robinson_Formula_Formula_Type.robinson_formula_formula_type);
  var _13 : ();
  var i_14 : usize;
  var _15 : ();
  var _16 : ();
  var _17 : bool;
  var _18 : usize;
  var _19 : usize;
  var _20 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Clause_Clause_Type.robinson_clause_clause_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _21 : ();
  var _22 : bool;
  var _23 : usize;
  var _24 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var _25 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var _26 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Clause_Clause_Type.robinson_clause_clause_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _27 : usize;
  var _28 : ();
  var new_n_29 : usize;
  var _30 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var _31 : Robinson_Clause_Clause_Type.robinson_clause_clause_type;
  var _32 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Robinson_Clause_Clause_Type.robinson_clause_clause_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _33 : usize;
  var _34 : usize;
  var _35 : ();
  var _36 : bool;
  var _37 : usize;
  var _38 : usize;
  var _39 : usize;
  var _40 : ();
  var _41 : ();
  var _42 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _6 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * self_1);
    _5 <- ([#"../Robinson/src/formula.rs" 127 11 127 29] Len0.len _6);
    goto BB1
  }
  BB1 {
    _4 <- ([#"../Robinson/src/formula.rs" 127 11 127 34] _5 = (0 : usize));
    switch (_4)
      | False -> goto BB6
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    a_8 <- ([#"../Robinson/src/formula.rs" 128 20 128 30] New0.new ());
    goto BB3
  }
  BB3 {
    assert { [#"../Robinson/src/formula.rs" 130 26 130 44] SatInner0.sat_inner ( * self_1) (Model2.model a_8) };
    goto BB4
  }
  BB4 {
    _9 <- ();
    assert { [#"../Robinson/src/formula.rs" 131 26 131 54] EventuallySatNoAss0.eventually_sat_no_ass ( * self_1) };
    _10 <- ();
    assume { Resolve1.resolve _11 };
    _11 <- a_8;
    a_8 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    _0 <- Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Sat_Type _11;
    goto BB5
  }
  BB5 {
    goto BB22
  }
  BB6 {
    _3 <- ();
    _13 <- ();
    old_self_12 <- ghost ([#"../Robinson/src/formula.rs" 134 23 134 35] self_1);
    goto BB7
  }
  BB7 {
    i_14 <- (0 : usize);
    goto BB8
  }
  BB8 {
    invariant inv { [#"../Robinson/src/formula.rs" 136 8 136 107] forall j : (int) . 0 <= j /\ j < UInt64.to_int i_14 -> Invariant1.invariant' (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * self_1))) j) (UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars ( * self_1))) };
    invariant inv { [#"../Robinson/src/formula.rs" 136 8 136 107] forall j : (int) . 0 <= j /\ j < UInt64.to_int i_14 -> Seq.length (Model3.model (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * self_1))) j)) > 0 };
    invariant unch { [#"../Robinson/src/formula.rs" 138 26 138 60] (let (a, _) = Model1.model self_1 in a) = (let (a, _) = Model1.model old_self_12 in a) };
    invariant unch { [#"../Robinson/src/formula.rs" 139 26 139 58] Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * self_1) = Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * old_self_12) };
    invariant proph { [#"../Robinson/src/formula.rs" 140 27 140 53]  ^ self_1 =  ^ old_self_12 };
    _18 <- i_14;
    _20 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * self_1);
    _19 <- ([#"../Robinson/src/formula.rs" 141 18 141 36] Len0.len _20);
    goto BB9
  }
  BB9 {
    _17 <- ([#"../Robinson/src/formula.rs" 141 14 141 36] _18 < _19);
    switch (_17)
      | False -> goto BB20
      | _ -> goto BB10
      end
  }
  BB10 {
    _26 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * self_1);
    _27 <- i_14;
    _25 <- ([#"../Robinson/src/formula.rs" 142 15 142 30] Index0.index _26 _27);
    goto BB11
  }
  BB11 {
    _24 <- _25;
    _23 <- ([#"../Robinson/src/formula.rs" 142 15 142 36] Len1.len _24);
    goto BB12
  }
  BB12 {
    _22 <- ([#"../Robinson/src/formula.rs" 142 15 142 41] _23 = (0 : usize));
    switch (_22)
      | False -> goto BB14
      | _ -> goto BB13
      end
  }
  BB13 {
    assume { Resolve0.resolve self_1 };
    _0 <- Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Unsat_Type;
    goto BB21
  }
  BB14 {
    _21 <- ();
    _32 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * self_1);
    _33 <- i_14;
    _31 <- ([#"../Robinson/src/formula.rs" 145 24 145 39] Index0.index _32 _33);
    goto BB15
  }
  BB15 {
    _30 <- _31;
    _34 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars ( * self_1);
    new_n_29 <- ([#"../Robinson/src/formula.rs" 145 24 145 77] CheckClauseInvariant0.check_clause_invariant _30 _34);
    goto BB16
  }
  BB16 {
    _37 <- new_n_29;
    _38 <- Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars ( * self_1);
    _36 <- ([#"../Robinson/src/formula.rs" 146 15 146 36] _37 > _38);
    switch (_36)
      | False -> goto BB18
      | _ -> goto BB17
      end
  }
  BB17 {
    _39 <- new_n_29;
    self_1 <- { self_1 with current = (let Robinson_Formula_Formula_Type.Robinson_Formula_Formula_Type a b =  * self_1 in Robinson_Formula_Formula_Type.Robinson_Formula_Formula_Type a _39) };
    _39 <- any usize;
    _35 <- ();
    goto BB19
  }
  BB18 {
    _35 <- ();
    goto BB19
  }
  BB19 {
    i_14 <- ([#"../Robinson/src/formula.rs" 149 12 149 18] i_14 + (1 : usize));
    _16 <- ();
    goto BB8
  }
  BB20 {
    assume { Resolve0.resolve self_1 };
    _15 <- ();
    _0 <- Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Unknown_Type;
    goto BB21
  }
  BB21 {
    goto BB23
  }
  BB22 {
    goto BB23
  }
  BB23 {
    return _0
  }
  
end
module Core_Clone_Impls_Impl5_Clone_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  val clone' [@cfg:stackify] (self : usize) : usize
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl5_Clone
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  val clone' [@cfg:stackify] (self : usize) : usize
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl19_Clone_Interface
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : bool) : bool
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl19_Clone
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : bool) : bool
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl5
  
end
module Core_Clone_Impls_Impl19
  
end
module Robinson_Lit_Impl3_Clone_Interface
  use prelude.Borrow
  use Robinson_Lit_Lit_Type
  val clone' [@cfg:stackify] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) : Robinson_Lit_Lit_Type.robinson_lit_lit_type
    ensures { [#"../Robinson/src/lit.rs" 14 9 14 14] result = self }
    
end
module Robinson_Lit_Impl3_Clone
  use prelude.Borrow
  use Robinson_Lit_Lit_Type
  use mach.int.Int
  use prelude.UIntSize
  clone Core_Clone_Impls_Impl19_Clone_Interface as Clone1
  clone Core_Clone_Impls_Impl5_Clone_Interface as Clone0
  let rec cfg clone' [@cfg:stackify] [#"../Robinson/src/lit.rs" 14 9 14 14] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) : Robinson_Lit_Lit_Type.robinson_lit_lit_type
    ensures { [#"../Robinson/src/lit.rs" 14 9 14 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var self_1 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var _2 : usize;
  var _3 : usize;
  var _4 : bool;
  var _5 : bool;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self_1;
    _2 <- ([#"../Robinson/src/lit.rs" 16 4 16 18] Clone0.clone' _3);
    goto BB1
  }
  BB1 {
    _5 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_polarity self_1;
    _4 <- ([#"../Robinson/src/lit.rs" 17 4 17 22] Clone1.clone' _5);
    goto BB2
  }
  BB2 {
    _0 <- Robinson_Lit_Lit_Type.Robinson_Lit_Lit_Type _2 _4;
    return _0
  }
  
end
module Robinson_Lit_Impl1_LitIn_Interface
  use Robinson_Clause_Clause_Type
  use Robinson_Lit_Lit_Type
  predicate lit_in (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (c : Robinson_Clause_Clause_Type.robinson_clause_clause_type)
    
end
module Robinson_Lit_Impl1_LitIn
  use Robinson_Clause_Clause_Type
  use Robinson_Lit_Lit_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Robinson_Clause_Impl0_Model_Interface as Model0
  predicate lit_in [#"../Robinson/src/lit.rs" 32 4 32 42] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (c : Robinson_Clause_Clause_Type.robinson_clause_clause_type)
    
   =
    [#"../Robinson/src/lit.rs" 33 8 35 9] exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model c) /\ Seq.get (Model0.model c) i = self
end
module Robinson_Lit_Impl2_LitUnsat_Interface
  use seq.Seq
  use prelude.Borrow
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  use Robinson_Assignments_Assignments_Type
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_Unsat_Interface as Unsat0
  clone Robinson_Lit_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_unsat [@cfg:stackify] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) : bool
    requires {[#"../Robinson/src/lit.rs" 108 15 108 41] Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { [#"../Robinson/src/lit.rs" 109 14 109 38] result = Unsat0.unsat self a }
    
end
module Robinson_Lit_Impl2_LitUnsat
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_UnsatInner as UnsatInner0
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  clone Robinson_Lit_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Lit_Impl1_Invariant as Invariant0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = uint8
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = uint8, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg lit_unsat [@cfg:stackify] [#"../Robinson/src/lit.rs" 110 4 110 51] (self : Robinson_Lit_Lit_Type.robinson_lit_lit_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) : bool
    requires {[#"../Robinson/src/lit.rs" 108 15 108 41] Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { [#"../Robinson/src/lit.rs" 109 14 109 38] result = Unsat0.unsat self a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Robinson_Lit_Lit_Type.robinson_lit_lit_type;
  var a_2 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _3 : uint8;
  var _4 : uint8;
  var _5 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _6 : usize;
  var _7 : uint8;
  var _8 : uint8;
  var _9 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _10 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    switch (Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_polarity self_1)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB1 {
    _9 <- Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 a_2;
    _10 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self_1;
    _8 <- ([#"../Robinson/src/lit.rs" 113 22 113 35] Index0.index _9 _10);
    goto BB4
  }
  BB2 {
    _5 <- Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 a_2;
    _6 <- Robinson_Lit_Lit_Type.robinson_lit_lit_type_Lit_idx self_1;
    _4 <- ([#"../Robinson/src/lit.rs" 112 21 112 34] Index0.index _5 _6);
    goto BB3
  }
  BB3 {
    _3 <- _4;
    _0 <- ([#"../Robinson/src/lit.rs" 112 20 112 40] _3 = (0 : uint8));
    goto BB5
  }
  BB4 {
    _7 <- _8;
    _0 <- ([#"../Robinson/src/lit.rs" 113 21 113 41] _7 = (1 : uint8));
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Robinson_Solver_Inner_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use Robinson_Decision_Decisions_Type
  use Robinson_Assignments_Assignments_Type
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Robinson_Formula_Impl1_EventuallySat_Interface as EventuallySat0
  clone Robinson_Decision_Impl0_Invariant_Interface as Invariant2
  clone Robinson_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Robinson_Formula_Impl1_Invariant_Interface as Invariant0
  val inner [@cfg:stackify] (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) (d : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type) : bool
    requires {[#"../Robinson/src/solver.rs" 17 11 17 24] Invariant0.invariant' f}
    requires {[#"../Robinson/src/solver.rs" 18 11 18 26] Invariant1.invariant' a f}
    requires {[#"../Robinson/src/solver.rs" 19 11 19 35] Invariant2.invariant' d (UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f))}
    ensures { [#"../Robinson/src/solver.rs" 20 0 20 50] result = true -> EventuallySat0.eventually_sat f a }
    ensures { [#"../Robinson/src/solver.rs" 21 0 21 61] result = false -> not EventuallySatComplete0.eventually_sat_complete f a }
    
end
module Robinson_Solver_Inner
  use mach.int.UInt64
  use prelude.Borrow
  use mach.int.Int
  use prelude.UInt8
  use prelude.UIntSize
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Logic_Unset as Unset0
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Lit_Impl1_Invariant as Invariant4
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant4.invariant'
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatInner as EventuallySatInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Robinson_Clause_Impl1_Invariant as Invariant3 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  use Robinson_Decision_Decisions_Type
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model1.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Formula_Impl1_EventuallySat as EventuallySat0 with function Model0.model = Model1.model,
  predicate EventuallySatInner0.eventually_sat_inner = EventuallySatInner0.eventually_sat_inner
  clone Robinson_Decision_Impl0_Invariant as Invariant2 with function Model0.model = Model2.model
  clone Robinson_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone Robinson_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  use prelude.IntSize
  clone Robinson_Lit_Impl1_UnsatInner as UnsatInner2
  clone Robinson_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model4.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Robinson_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = uint8
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = uint8
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = uint8
  clone Robinson_Assignments_Impl0_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model6 with type t = Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Robinson_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  clone Robinson_Formula_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Robinson_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model1.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = uint8
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = uint8, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere, type Output0.output = Output0.output
  clone Robinson_Assignments_Impl2_Clone_Interface as Clone0 with function Model0.model = Model7.model,
  function Model1.model = Model1.model
  clone Robinson_Assignments_Impl2_FindUnassigned_Interface as FindUnassigned0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Complete0.complete = Complete0.complete, function Model0.model = Model6.model,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Unset0.unset = Unset0.unset,
  function Model1.model = Model1.model
  clone Robinson_Assignments_Impl2_DoUnitPropagation_Interface as DoUnitPropagation0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant',
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
  predicate Compatible0.compatible = Compatible0.compatible, predicate Unsat0.unsat = Unsat0.unsat,
  predicate Sat0.sat = Sat0.sat, predicate Complete0.complete = Complete0.complete
  let rec cfg inner [@cfg:stackify] [#"../Robinson/src/solver.rs" 22 0 22 64] (f : Robinson_Formula_Formula_Type.robinson_formula_formula_type) (a : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type) (d : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type) : bool
    requires {[#"../Robinson/src/solver.rs" 17 11 17 24] Invariant0.invariant' f}
    requires {[#"../Robinson/src/solver.rs" 18 11 18 26] Invariant1.invariant' a f}
    requires {[#"../Robinson/src/solver.rs" 19 11 19 35] Invariant2.invariant' d (UInt64.to_int (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_num_vars f))}
    ensures { [#"../Robinson/src/solver.rs" 20 0 20 50] result = true -> EventuallySat0.eventually_sat f a }
    ensures { [#"../Robinson/src/solver.rs" 21 0 21 61] result = false -> not EventuallySatComplete0.eventually_sat_complete f a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var f_1 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var a_2 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var d_3 : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type;
  var _4 : ();
  var _5 : ();
  var _6 : Core_Option_Option_Type.core_option_option_type bool;
  var _7 : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type);
  var _8 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var _9 : isize;
  var n_10 : bool;
  var _11 : ();
  var next_12 : usize;
  var _13 : borrowed (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type);
  var _14 : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type;
  var _15 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var a_cloned_16 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _17 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _18 : borrowed uint8;
  var _19 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _20 : usize;
  var old_a1_21 : usize;
  var _22 : ();
  var _23 : bool;
  var _24 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var _25 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _26 : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type;
  var _27 : ();
  var _28 : borrowed uint8;
  var _29 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _30 : usize;
  var _31 : usize;
  var _32 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var _33 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _34 : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type;
  {
    f_1 <- f;
    a_2 <- a;
    d_3 <- d;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _7 <- borrow_mut a_2;
    a_2 <-  ^ _7;
    _8 <- f_1;
    _6 <- ([#"../Robinson/src/solver.rs" 23 10 23 34] DoUnitPropagation0.do_unit_propagation _7 _8);
    goto BB4
  }
  BB4 {
    switch (_6)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    _5 <- ();
    _13 <- borrow_mut a_2;
    a_2 <-  ^ _13;
    _14 <- d_3;
    _15 <- f_1;
    next_12 <- ([#"../Robinson/src/solver.rs" 29 15 29 38] FindUnassigned0.find_unassigned _13 _14 _15);
    goto BB7
  }
  BB6 {
    n_10 <- Core_Option_Option_Type.core_option_option_type_Some_0 _6;
    _0 <- n_10;
    goto BB17
  }
  BB7 {
    _17 <- a_2;
    a_cloned_16 <- ([#"../Robinson/src/solver.rs" 30 23 30 32] Clone0.clone' _17);
    goto BB8
  }
  BB8 {
    _19 <- borrow_mut (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 a_2);
    a_2 <- (let Robinson_Assignments_Assignments_Type.Robinson_Assignments_Assignments_Type a b = a_2 in Robinson_Assignments_Assignments_Type.Robinson_Assignments_Assignments_Type ( ^ _19) b);
    _20 <- next_12;
    _18 <- ([#"../Robinson/src/solver.rs" 31 4 31 13] IndexMut0.index_mut _19 _20);
    goto BB9
  }
  BB9 {
    _18 <- { _18 with current = (1 : uint8) };
    assume { Resolve0.resolve _18 };
    old_a1_21 <- Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_1 a_2;
    _24 <- f_1;
    _25 <- a_2;
    a_2 <- any Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
    _26 <- d_3;
    _23 <- ([#"../Robinson/src/solver.rs" 33 7 33 21] inner _24 _25 _26);
    goto BB10
  }
  BB10 {
    switch (_23)
      | False -> goto BB12
      | _ -> goto BB11
      end
  }
  BB11 {
    _0 <- true;
    goto BB15
  }
  BB12 {
    _22 <- ();
    _29 <- borrow_mut (Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type_Assignments_0 a_cloned_16);
    a_cloned_16 <- (let Robinson_Assignments_Assignments_Type.Robinson_Assignments_Assignments_Type a b = a_cloned_16 in Robinson_Assignments_Assignments_Type.Robinson_Assignments_Assignments_Type ( ^ _29) b);
    _30 <- next_12;
    _28 <- ([#"../Robinson/src/solver.rs" 36 4 36 20] IndexMut0.index_mut _29 _30);
    goto BB13
  }
  BB13 {
    _28 <- { _28 with current = (0 : uint8) };
    assume { Resolve0.resolve _28 };
    _31 <- old_a1_21;
    a_cloned_16 <- (let Robinson_Assignments_Assignments_Type.Robinson_Assignments_Assignments_Type a b = a_cloned_16 in Robinson_Assignments_Assignments_Type.Robinson_Assignments_Assignments_Type a _31);
    _31 <- any usize;
    _32 <- f_1;
    _33 <- a_cloned_16;
    a_cloned_16 <- any Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
    _34 <- d_3;
    _0 <- ([#"../Robinson/src/solver.rs" 38 11 38 32] inner _32 _33 _34);
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Robinson_Solver_Solver_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  use seq.Seq
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Robinson_Clause_Clause_Type
  use Alloc_Vec_Vec_Type
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone Robinson_Formula_Impl1_EventuallySatNoAss_Interface as EventuallySatNoAss0
  use Robinson_Solver_SatResult_Type
  clone Robinson_Clause_Impl1_VarsInRange_Interface as VarsInRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val solver [@cfg:stackify] (formula : borrowed (Robinson_Formula_Formula_Type.robinson_formula_formula_type)) : Robinson_Solver_SatResult_Type.robinson_solver_satresult_type
    requires {[#"../Robinson/src/solver.rs" 42 0 43 58] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * formula))) -> VarsInRange0.vars_in_range (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * formula))) i) 18446744073709551615}
    ensures { [#"../Robinson/src/solver.rs" 44 10 50 1] match (result) with
      | Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Sat_Type _assn -> EventuallySatNoAss0.eventually_sat_no_ass ( ^ formula)
      | Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Unsat_Type -> not EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( ^ formula)
      | _ -> false
      end }
    ensures { [#"../Robinson/src/solver.rs" 51 10 51 47] Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( ^ formula) = Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * formula) }
    
end
module Robinson_Solver_Solver
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  use seq.Seq
  use prelude.UIntSize
  use Robinson_Lit_Lit_Type
  clone Robinson_Lit_Impl1_SatInner as SatInner2
  clone Robinson_Logic_Unset as Unset0
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Clause_Clause_Type
  clone Robinson_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Robinson_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Robinson_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Robinson_Clause_Clause_Type.robinson_clause_clause_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Formula_Formula_Type
  clone Robinson_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Robinson_Lit_Impl1_Invariant as Invariant0
  clone Robinson_Formula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatNoAss as EventuallySatNoAss0 with predicate SatInner0.sat_inner = SatInner0.sat_inner
  use Robinson_Solver_SatResult_Type
  clone Robinson_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant0.invariant'
  use prelude.IntSize
  use prelude.UInt8
  clone Robinson_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Robinson_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Robinson_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Robinson_Formula_Impl1_EventuallySatInner as EventuallySatInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Robinson_Clause_Impl1_Invariant as Invariant4 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range
  clone Robinson_Formula_Impl0_Model as Model6 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = uint8,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Robinson_Assignments_Assignments_Type
  clone Robinson_Assignments_Impl0_Model as Model5 with function Model0.model = Model4.model
  clone Robinson_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model5.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Robinson_Formula_Impl1_EventuallySat as EventuallySat0 with function Model0.model = Model5.model,
  predicate EventuallySatInner0.eventually_sat_inner = EventuallySatInner0.eventually_sat_inner
  use Robinson_Decision_Decisions_Type
  clone Robinson_Decision_Impl0_Invariant as Invariant3 with function Model0.model = Model7.model
  clone Robinson_Assignments_Impl1_Invariant as Invariant2 with function Model0.model = Model5.model
  clone Robinson_Formula_Impl0_ModelTy_Type as ModelTy0
  clone Robinson_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant4.invariant'
  clone Robinson_Formula_Impl1_ContainsEmptyClause as ContainsEmptyClause0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone Robinson_Formula_FormulaSatInner as FormulaSatInner0 with predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = Robinson_Formula_Formula_Type.robinson_formula_formula_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model6.model
  clone Alloc_Vec_Impl0_New_Interface as New2 with type t = uint8, function Model0.model = Model4.model
  clone Robinson_Solver_Inner_Interface as Inner0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant3.invariant',
  predicate EventuallySat0.eventually_sat = EventuallySat0.eventually_sat,
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete
  clone Robinson_Decision_Impl1_New_Interface as New1 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant3.invariant'
  clone Robinson_Assignments_Impl2_New_Interface as New0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', function Model0.model = Model5.model,
  predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Robinson_Formula_Formula_Type.robinson_formula_formula_type
  clone Robinson_Formula_Impl2_CheckAndEstablishFormulaInvariant_Interface as CheckAndEstablishFormulaInvariant0 with function Model0.model = Model0.model,
  predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate EventuallySatNoAss0.eventually_sat_no_ass = EventuallySatNoAss0.eventually_sat_no_ass,
  function Model1.model = Model3.model, function Model2.model = Model4.model,
  predicate FormulaSatInner0.formula_sat_inner = FormulaSatInner0.formula_sat_inner,
  predicate ContainsEmptyClause0.contains_empty_clause = ContainsEmptyClause0.contains_empty_clause,
  predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass,
  predicate Invariant0.invariant' = Invariant1.invariant'
  let rec cfg solver [@cfg:stackify] [#"../Robinson/src/solver.rs" 52 0 52 49] (formula : borrowed (Robinson_Formula_Formula_Type.robinson_formula_formula_type)) : Robinson_Solver_SatResult_Type.robinson_solver_satresult_type
    requires {[#"../Robinson/src/solver.rs" 42 0 43 58] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * formula))) -> VarsInRange0.vars_in_range (Seq.get (Model0.model (Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * formula))) i) 18446744073709551615}
    ensures { [#"../Robinson/src/solver.rs" 44 10 50 1] match (result) with
      | Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Sat_Type _assn -> EventuallySatNoAss0.eventually_sat_no_ass ( ^ formula)
      | Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Unsat_Type -> not EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( ^ formula)
      | _ -> false
      end }
    ensures { [#"../Robinson/src/solver.rs" 51 10 51 47] Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( ^ formula) = Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * formula) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Robinson_Solver_SatResult_Type.robinson_solver_satresult_type;
  var formula_1 : borrowed (Robinson_Formula_Formula_Type.robinson_formula_formula_type);
  var _2 : ();
  ghost var old_f_3 : borrowed (Robinson_Formula_Formula_Type.robinson_formula_formula_type);
  var _4 : ();
  var _5 : ();
  var _6 : Robinson_Solver_SatResult_Type.robinson_solver_satresult_type;
  var _7 : borrowed (Robinson_Formula_Formula_Type.robinson_formula_formula_type);
  var _8 : isize;
  var o_9 : Robinson_Solver_SatResult_Type.robinson_solver_satresult_type;
  var _10 : ();
  var _11 : ();
  var assignments_12 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _13 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var decisions_14 : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type;
  var _15 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var _16 : ();
  var _17 : bool;
  var _18 : Robinson_Formula_Formula_Type.robinson_formula_formula_type;
  var _19 : Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
  var _20 : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type;
  var _21 : Robinson_Decision_Decisions_Type.robinson_decision_decisions_type;
  var _22 : ();
  var _23 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  {
    formula_1 <- formula;
    goto BB0
  }
  BB0 {
    _4 <- ();
    old_f_3 <- ghost ([#"../Robinson/src/solver.rs" 53 16 53 31] formula_1);
    goto BB1
  }
  BB1 {
    _7 <- borrow_mut ( * formula_1);
    formula_1 <- { formula_1 with current = ( ^ _7) };
    _6 <- ([#"../Robinson/src/solver.rs" 54 10 54 57] CheckAndEstablishFormulaInvariant0.check_and_establish_formula_invariant _7);
    goto BB2
  }
  BB2 {
    switch (_6)
      | Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Unknown_Type -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve0.resolve formula_1 };
    o_9 <- _6;
    _6 <- any Robinson_Solver_SatResult_Type.robinson_solver_satresult_type;
    _0 <- o_9;
    o_9 <- any Robinson_Solver_SatResult_Type.robinson_solver_satresult_type;
    goto BB16
  }
  BB4 {
    _5 <- ();
    goto BB5
  }
  BB5 {
    assert { [#"../Robinson/src/solver.rs" 58 18 58 50] Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * formula_1) = Robinson_Formula_Formula_Type.robinson_formula_formula_type_Formula_clauses ( * old_f_3) };
    _11 <- ();
    _13 <-  * formula_1;
    assignments_12 <- ([#"../Robinson/src/solver.rs" 59 22 59 47] New0.new _13);
    goto BB6
  }
  BB6 {
    _15 <-  * formula_1;
    decisions_14 <- ([#"../Robinson/src/solver.rs" 60 20 60 43] New1.new _15);
    goto BB7
  }
  BB7 {
    _18 <-  * formula_1;
    assume { Resolve0.resolve formula_1 };
    _19 <- assignments_12;
    assignments_12 <- any Robinson_Assignments_Assignments_Type.robinson_assignments_assignments_type;
    _21 <- decisions_14;
    _20 <- _21;
    _17 <- ([#"../Robinson/src/solver.rs" 61 7 61 46] Inner0.inner _18 _19 _20);
    goto BB8
  }
  BB8 {
    switch (_17)
      | False -> goto BB12
      | _ -> goto BB9
      end
  }
  BB9 {
    _23 <- ([#"../Robinson/src/solver.rs" 62 30 62 40] New2.new ());
    goto BB10
  }
  BB10 {
    _0 <- Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Sat_Type _23;
    goto BB11
  }
  BB11 {
    goto BB13
  }
  BB12 {
    _16 <- ();
    _0 <- Robinson_Solver_SatResult_Type.Robinson_Solver_SatResult_Unsat_Type;
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB18
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Borrow
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Borrow
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Robinson_Lit_Impl3
  use Robinson_Lit_Lit_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Robinson_Lit_Lit_Type.robinson_lit_lit_type
  clone Robinson_Lit_Impl3_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Robinson_Lit_Lit_Type.robinson_lit_lit_type,
  val clone' = Clone0.clone'
end
module Robinson_Lit_Impl4
  
end
