<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.8.12" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.4.1" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg">
<path name=".."/><path name="lib.mlcfg"/>
<theory name="Lib_Decision_Impl0_GetNext" proved="true">
 <goal name="get_next&#39;vc" expl="VC for get_next" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="31"/></proof>
 </goal>
</theory>
<theory name="Lib_Formula_Impl0_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="31"/></proof>
 </goal>
</theory>
<theory name="Lib_Assignments_Impl0_Len" proved="true">
 <goal name="len&#39;vc" expl="VC for len" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="68"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicFormula_Impl1_Invariant_Impl" proved="true">
 <goal name="invariant&#39;&#39;vc" expl="VC for invariant&#39;" proved="true">
 <proof prover="2"><result status="valid" time="0.05" steps="383"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaAssignMaintainsPostForEach_Impl">
 <goal name="lemma_assign_maintains_post_for_each&#39;vc" expl="VC for lemma_assign_maintains_post_for_each">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="139320"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaAssignMaintainsForEachToPost_Impl">
 <goal name="lemma_assign_maintains_for_each_to_post&#39;vc" expl="VC for lemma_assign_maintains_for_each_to_post">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="127705"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaAssignMaintainsLongArePostUnit_Impl" proved="true">
 <goal name="lemma_assign_maintains_long_are_post_unit&#39;vc" expl="VC for lemma_assign_maintains_long_are_post_unit" proved="true">
 <proof prover="2"><result status="valid" time="0.11" steps="805"/></proof>
 </goal>
</theory>
<theory name="CreusotContracts_Std1_Vec_Impl2" proved="true">
 <goal name="IndexMut1.index_mut&#39;refn&#39;vc" expl="VC for index_mut&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="31"/></proof>
 </goal>
</theory>
<theory name="Lib_Assignments_Impl0_SetAssignment">
 <goal name="set_assignment&#39;vc" expl="VC for set_assignment">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="131190"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Assignments_Impl0_New" proved="true">
 <goal name="new&#39;vc" expl="VC for new" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="1142"/></proof>
 </goal>
</theory>
<theory name="CreusotContracts_Std1_Vec_Impl3" proved="true">
 <goal name="Index1.index&#39;refn&#39;vc" expl="VC for index&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="31"/></proof>
 </goal>
</theory>
<theory name="Lib_Assignments_Impl0_FindUnassigned" proved="true">
 <goal name="find_unassigned&#39;vc" expl="VC for find_unassigned" proved="true">
 <proof prover="1"><result status="valid" time="0.60" steps="92813"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Clause_Impl1_MoveToEnd">
 <goal name="move_to_end&#39;vc" expl="VC for move_to_end">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="162368"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Clause_Impl1_RemoveFromClause">
 <goal name="remove_from_clause&#39;vc" expl="VC for remove_from_clause">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="190294"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_ConflictAnalysis_IdxIn" proved="true">
 <goal name="idx_in&#39;vc" expl="VC for idx_in" proved="true">
 <proof prover="2"><result status="valid" time="0.54" steps="3559"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicConflictAnalysis_LemmaIdx_Impl" proved="true">
 <goal name="lemma_idx&#39;vc" expl="VC for lemma_idx" proved="true">
 <proof prover="0"><result status="valid" time="0.17" steps="321908"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="166695"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicConflictAnalysis_LemmaIdx2_Impl" proved="true">
 <goal name="lemma_idx2&#39;vc" expl="VC for lemma_idx2" proved="true">
 <proof prover="2"><result status="valid" time="0.38" steps="2293"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaEqFormulas_Impl" proved="true">
 <goal name="lemma_eq_formulas&#39;vc" expl="VC for lemma_eq_formulas" proved="true">
 <proof prover="2"><result status="valid" time="0.07" steps="304"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaNotSatGivesNotSat_Impl" proved="true">
 <goal name="lemma_not_sat_gives_not_sat&#39;vc" expl="VC for lemma_not_sat_gives_not_sat" proved="true">
 <proof prover="2"><result status="valid" time="0.07" steps="237"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaSatGivesSat_Impl">
 <goal name="lemma_sat_gives_sat&#39;vc" expl="VC for lemma_sat_gives_sat">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="141309"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaExtendedFormulaIsEquisatCompatible_Impl">
 <goal name="lemma_extended_formula_is_equisat_compatible&#39;vc" expl="VC for lemma_extended_formula_is_equisat_compatible">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="206838"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaResolventOfEquisatExtensionIsEquisat_Impl">
 <goal name="lemma_resolvent_of_equisat_extension_is_equisat&#39;vc" expl="VC for lemma_resolvent_of_equisat_extension_is_equisat">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="129591"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_ConflictAnalysis_Resolve">
 <goal name="resolve&#39;vc" expl="VC for resolve">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="406622"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_ConflictAnalysis_ChooseLiteral" proved="true">
 <goal name="choose_literal&#39;vc" expl="VC for choose_literal" proved="true">
 <proof prover="1"><result status="valid" time="0.63" steps="86833"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Trail_Impl0_DecisionLevel" proved="true">
 <goal name="decision_level&#39;vc" expl="VC for decision_level" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="38"/></proof>
 </goal>
</theory>
<theory name="Lib_Clause_Impl0" proved="true">
 <goal name="Clone1.clone&#39;&#39;refn&#39;vc" expl="VC for clone&#39;&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="31"/></proof>
 </goal>
</theory>
<theory name="Lib_ConflictAnalysis_DeriveEmptyFormula">
 <goal name="derive_empty_formula&#39;vc" expl="VC for derive_empty_formula">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="160893"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_ConflictAnalysis_AnalyzeConflict">
 <goal name="analyze_conflict&#39;vc" expl="VC for analyze_conflict">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="590556"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Util_SortReverse">
 <goal name="sort_reverse&#39;vc" expl="VC for sort_reverse">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="141186"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Decision_Impl0_New">
 <goal name="new&#39;vc" expl="VC for new">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="174775"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Lit_Impl0_LitSat" proved="true">
 <goal name="lit_sat&#39;vc" expl="VC for lit_sat" proved="true">
 <proof prover="2"><result status="valid" time="0.09" steps="456"/></proof>
 </goal>
</theory>
<theory name="Lib_Formula_Impl1_IsClauseSat" proved="true">
 <goal name="is_clause_sat&#39;vc" expl="VC for is_clause_sat" proved="true">
 <proof prover="0"><result status="valid" time="0.42" steps="698871"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="210800"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Lit_Impl0_ToNegWatchidx" proved="true">
 <goal name="to_neg_watchidx&#39;vc" expl="VC for to_neg_watchidx" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="524"/></proof>
 </goal>
</theory>
<theory name="Lib_Watches_Impl0_AddWatcher" proved="true">
 <goal name="add_watcher&#39;vc" expl="VC for add_watcher" proved="true">
 <proof prover="1"><result status="valid" time="0.73" steps="92712"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Formula_Impl1_AddClause">
 <goal name="add_clause&#39;vc" expl="VC for add_clause">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="116988"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Formula_Impl1_AddUnit">
 <goal name="add_unit&#39;vc" expl="VC for add_unit">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="105803"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicFormula_Impl1_Sat_Impl" proved="true">
 <goal name="sat&#39;vc" expl="VC for sat" proved="true">
 <proof prover="2"><result status="valid" time="0.09" steps="270"/></proof>
 </goal>
</theory>
<theory name="Lib_Formula_Impl1_IsSat" proved="true">
 <goal name="is_sat&#39;vc" expl="VC for is_sat" proved="true">
 <proof prover="1"><result status="valid" time="0.49" steps="63093"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Lit_Impl3_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="2"><result status="valid" time="0.04" steps="31"/></proof>
 </goal>
</theory>
<theory name="Lib_Lit_Impl0_LitUnsat" proved="true">
 <goal name="lit_unsat&#39;vc" expl="VC for lit_unsat" proved="true">
 <proof prover="2"><result status="valid" time="0.08" steps="450"/></proof>
 </goal>
</theory>
<theory name="Lib_Lit_Impl0_LitUnset" proved="true">
 <goal name="lit_unset&#39;vc" expl="VC for lit_unset" proved="true">
 <proof prover="2"><result status="valid" time="0.07" steps="252"/></proof>
 </goal>
</theory>
<theory name="Lib_Lit_Impl0_LitSet" proved="true">
 <goal name="lit_set&#39;vc" expl="VC for lit_set" proved="true">
 <proof prover="2"><result status="valid" time="0.06" steps="269"/></proof>
 </goal>
</theory>
<theory name="Lib_Lit_Impl0_ToWatchidx" proved="true">
 <goal name="to_watchidx&#39;vc" expl="VC for to_watchidx" proved="true">
 <proof prover="2"><result status="valid" time="0.08" steps="545"/></proof>
 </goal>
</theory>
<theory name="Lib_Lit_Impl1_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="2"><result status="valid" time="0.09" steps="576"/></proof>
 </goal>
</theory>
<theory name="Lib_Lit_Impl2_Not" proved="true">
 <goal name="not&#39;&#39;vc" expl="VC for not&#39;" proved="true">
 <proof prover="2"><result status="valid" time="0.05" steps="168"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicUtil_Pop_Impl" proved="true">
 <goal name="pop&#39;vc" expl="VC for pop" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="38"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicUtil_LastIdx_Impl" proved="true">
 <goal name="last_idx&#39;vc" expl="VC for last_idx" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="0"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicUtil_LastElem_Impl" proved="true">
 <goal name="last_elem&#39;vc" expl="VC for last_elem" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="0"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicUtil_LemmaPopMaintainsSorted_Impl" proved="true">
 <goal name="lemma_pop_maintains_sorted&#39;vc" expl="VC for lemma_pop_maintains_sorted" proved="true">
 <proof prover="2"><result status="valid" time="0.05" steps="197"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicWatches_LemmaPopWatchMaintainsWatcherInvariant_Impl" proved="true">
 <goal name="lemma_pop_watch_maintains_watcher_invariant&#39;vc" expl="VC for lemma_pop_watch_maintains_watcher_invariant" proved="true">
 <proof prover="2"><result status="valid" time="0.05" steps="164"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicWatches_LemmaPushMaintainsWatcherInvariant_Impl" proved="true">
 <goal name="lemma_push_maintains_watcher_invariant&#39;vc" expl="VC for lemma_push_maintains_watcher_invariant" proved="true">
 <proof prover="2"><result status="valid" time="0.05" steps="207"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_BoolToAssignedstate_Impl" proved="true">
 <goal name="bool_to_assignedstate&#39;vc" expl="VC for bool_to_assignedstate" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="25"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaTrailPost_Impl">
 <goal name="lemma_trail_post&#39;vc" expl="VC for lemma_trail_post">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="108960"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaTrailOnlyLast_Impl" proved="true">
 <goal name="lemma_trail_only_last&#39;vc" expl="VC for lemma_trail_only_last" proved="true">
 <proof prover="2"><result status="valid" time="0.12" steps="722"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaTrailFin_Impl" proved="true">
 <goal name="lemma_trail_fin&#39;vc" expl="VC for lemma_trail_fin" proved="true">
 <proof prover="2"><result status="valid" time="0.18" steps="1417"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaTrailFin2_Impl">
 <goal name="lemma_trail_fin2&#39;vc" expl="VC for lemma_trail_fin2">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="101346"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaTrailFin3_Impl">
 <goal name="lemma_trail_fin3&#39;vc" expl="VC for lemma_trail_fin3">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="106832"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaPopNoUnassIsOk_Impl" proved="true">
 <goal name="lemma_pop_no_unass_is_ok&#39;vc" expl="VC for lemma_pop_no_unass_is_ok" proved="true">
 <proof prover="2"><result status="valid" time="0.09" steps="505"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaBacktrackOk_Impl">
 <goal name="lemma_backtrack_ok&#39;vc" expl="VC for lemma_backtrack_ok">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="107129"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaAssignMaintainsLongArePostUnit2_Impl">
 <goal name="lemma_assign_maintains_long_are_post_unit2&#39;vc" expl="VC for lemma_assign_maintains_long_are_post_unit2">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="116417"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaPostUnitNoUnset_Impl" proved="true">
 <goal name="lemma_post_unit_no_unset&#39;vc" expl="VC for lemma_post_unit_no_unset" proved="true">
 <proof prover="2"><result status="valid" time="0.11" steps="569"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaIdxNotInPostUnit_Impl" proved="true">
 <goal name="lemma_idx_not_in_post_unit&#39;vc" expl="VC for lemma_idx_not_in_post_unit" proved="true">
 <proof prover="2"><result status="valid" time="0.13" steps="672"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaUnsetToForall_Impl" proved="true">
 <goal name="lemma_unset_to_forall&#39;vc" expl="VC for lemma_unset_to_forall" proved="true">
 <proof prover="2"><result status="valid" time="0.89" steps="5357"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaForallToUnsetPush_Impl" proved="true">
 <goal name="lemma_forall_to_unset_push&#39;vc" expl="VC for lemma_forall_to_unset_push" proved="true">
 <proof prover="2"><result status="valid" time="0.55" steps="3745"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_LogicTrail_LemmaPushMaintainsLitNotInLess_Impl" proved="true">
 <goal name="lemma_push_maintains_lit_not_in_less&#39;vc" expl="VC for lemma_push_maintains_lit_not_in_less" proved="true">
 <proof prover="2"><result status="valid" time="0.42" steps="2943"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaPermutClauseOk_Impl" proved="true">
 <goal name="lemma_permut_clause_ok&#39;vc" expl="VC for lemma_permut_clause_ok" proved="true">
 <proof prover="2"><result status="valid" time="0.06" steps="190"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaPermutClauseOk2_Impl" proved="true">
 <goal name="lemma_permut_clause_ok2&#39;vc" expl="VC for lemma_permut_clause_ok2" proved="true">
 <proof prover="2"><result status="valid" time="0.07" steps="189"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaSwapClauseNoDups_Impl" proved="true">
 <goal name="lemma_swap_clause_no_dups&#39;vc" expl="VC for lemma_swap_clause_no_dups" proved="true">
 <proof prover="2"><result status="valid" time="0.34" steps="2682"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaSwapMaintainsPostUnit_Impl">
 <goal name="lemma_swap_maintains_post_unit&#39;vc" expl="VC for lemma_swap_maintains_post_unit">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="133144"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaSwapMaintainsPostWithRegardsTo_Impl" proved="true">
 <goal name="lemma_swap_maintains_post_with_regards_to&#39;vc" expl="VC for lemma_swap_maintains_post_with_regards_to" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="792"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaPermutFormulaOk_Impl" proved="true">
 <goal name="lemma_permut_formula_ok&#39;vc" expl="VC for lemma_permut_formula_ok" proved="true">
 <proof prover="2"><result status="valid" time="0.08" steps="261"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaPermutFormulaOk2_Impl" proved="true">
 <goal name="lemma_permut_formula_ok2&#39;vc" expl="VC for lemma_permut_formula_ok2" proved="true">
 <proof prover="2"><result status="valid" time="0.07" steps="216"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaPermutFormulaOkNoAss_Impl" proved="true">
 <goal name="lemma_permut_formula_ok_no_ass&#39;vc" expl="VC for lemma_permut_formula_ok_no_ass" proved="true">
 <proof prover="2"><result status="valid" time="0.05" steps="228"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaPermutClauseInFormulaMaintainsSat_Impl" proved="true">
 <goal name="lemma_permut_clause_in_formula_maintains_sat&#39;vc" expl="VC for lemma_permut_clause_in_formula_maintains_sat" proved="true">
 <proof prover="2"><result status="valid" time="0.09" steps="527"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaPermutClauseInFormulaMaintainsUnsat_Impl" proved="true">
 <goal name="lemma_permut_clause_in_formula_maintains_unsat&#39;vc" expl="VC for lemma_permut_clause_in_formula_maintains_unsat" proved="true">
 <proof prover="2"><result status="valid" time="0.09" steps="527"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaSamePol_Impl" proved="true">
 <goal name="lemma_same_pol&#39;vc" expl="VC for lemma_same_pol" proved="true">
 <proof prover="2"><result status="valid" time="0.08" steps="745"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaResolvedPostAndUnsatIsUnsat_Impl" proved="true">
 <goal name="lemma_resolved_post_and_unsat_is_unsat&#39;vc" expl="VC for lemma_resolved_post_and_unsat_is_unsat" proved="true">
 <proof prover="2"><result status="valid" time="0.52" steps="3987"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaExtendingWithEquiExtIsEquiCompat_Impl" proved="true">
 <goal name="lemma_extending_with_equi_ext_is_equi_compat&#39;vc" expl="VC for lemma_extending_with_equi_ext_is_equi_compat" proved="true">
 <proof prover="2"><result status="valid" time="0.36" steps="2563"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaEquisatIsTrans_Impl" proved="true">
 <goal name="lemma_equisat_is_trans&#39;vc" expl="VC for lemma_equisat_is_trans" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="861"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaCompleteImpliesSatOrUnsat_Impl" proved="true">
 <goal name="lemma_complete_implies_sat_or_unsat&#39;vc" expl="VC for lemma_complete_implies_sat_or_unsat" proved="true">
 <proof prover="2"><result status="valid" time="0.08" steps="380"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaCompleteAndNotSatImpliesUnsat_Impl" proved="true">
 <goal name="lemma_complete_and_not_sat_implies_unsat&#39;vc" expl="VC for lemma_complete_and_not_sat_implies_unsat" proved="true">
 <proof prover="2"><result status="valid" time="0.04" steps="49"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaCompleteAndNotUnsatImpliesSat_Impl" proved="true">
 <goal name="lemma_complete_and_not_unsat_implies_sat&#39;vc" expl="VC for lemma_complete_and_not_unsat_implies_sat" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="49"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaNotSatFormulaImpliesUnsatFormula_Impl" proved="true">
 <goal name="lemma_not_sat_formula_implies_unsat_formula&#39;vc" expl="VC for lemma_not_sat_formula_implies_unsat_formula" proved="true">
 <proof prover="2"><result status="valid" time="0.07" steps="423"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaNotSatClauseImpliesUnsatFormula_Impl" proved="true">
 <goal name="lemma_not_sat_clause_implies_unsat_formula&#39;vc" expl="VC for lemma_not_sat_clause_implies_unsat_formula" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="85"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaUnitForces_Impl" proved="true">
 <goal name="lemma_unit_forces&#39;vc" expl="VC for lemma_unit_forces" proved="true">
 <proof prover="2"><result status="valid" time="0.07" steps="607"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaCorrectPolarityMakesClauseSat_Impl" proved="true">
 <goal name="lemma_correct_polarity_makes_clause_sat&#39;vc" expl="VC for lemma_correct_polarity_makes_clause_sat" proved="true">
 <proof prover="2"><result status="valid" time="0.04" steps="275"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaIncorrectPolarityMakesClauseUnsat_Impl" proved="true">
 <goal name="lemma_incorrect_polarity_makes_clause_unsat&#39;vc" expl="VC for lemma_incorrect_polarity_makes_clause_unsat" proved="true">
 <proof prover="2"><result status="valid" time="0.04" steps="177"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaUnitWrongPolarityUnsatFormula_Impl">
 <goal name="lemma_unit_wrong_polarity_unsat_formula&#39;vc" expl="VC for lemma_unit_wrong_polarity_unsat_formula">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="108135"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaExtensionSatBaseSat_Impl" proved="true">
 <goal name="lemma_extension_sat_base_sat&#39;vc" expl="VC for lemma_extension_sat_base_sat" proved="true">
 <proof prover="2"><result status="valid" time="0.04" steps="214"/></proof>
 </goal>
</theory>
<theory name="Lib_Logic_Logic_LemmaExtensionsUnsatBaseUnsat_Impl" proved="true">
 <goal name="lemma_extensions_unsat_base_unsat&#39;vc" expl="VC for lemma_extensions_unsat_base_unsat" proved="true">
 <proof prover="2"><result status="valid" time="0.06" steps="435"/></proof>
 </goal>
</theory>
<theory name="Lib_Trail_Impl0_Backstep" proved="true">
 <goal name="backstep&#39;vc" expl="VC for backstep" proved="true">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="135209"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="backstep&#39;vc.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.09" steps="545"/></proof>
  </goal>
  <goal name="backstep&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="263"/></proof>
  </goal>
  <goal name="backstep&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="442"/></proof>
  </goal>
  <goal name="backstep&#39;vc.3" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="164"/></proof>
  </goal>
  <goal name="backstep&#39;vc.4" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.09" steps="536"/></proof>
  </goal>
  <goal name="backstep&#39;vc.5" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="515"/></proof>
  </goal>
  <goal name="backstep&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="522"/></proof>
  </goal>
  <goal name="backstep&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="76"/></proof>
  </goal>
  <goal name="backstep&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.11" steps="550"/></proof>
  </goal>
  <goal name="backstep&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="236"/></proof>
  </goal>
  <goal name="backstep&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.21" steps="1855"/></proof>
  </goal>
  <goal name="backstep&#39;vc.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.34" steps="3085"/></proof>
  </goal>
  <goal name="backstep&#39;vc.12" expl="precondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="118192"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.12.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.45" steps="2751"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.13" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="122510"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.89" steps="5438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.35" steps="2119"/></proof>
  </goal>
  <goal name="backstep&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="103"/></proof>
  </goal>
  <goal name="backstep&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="103"/></proof>
  </goal>
  <goal name="backstep&#39;vc.17" expl="precondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="118367"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.17.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.79" steps="4554"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.18" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="120428"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.18.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.92" steps="105104"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="119348"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.19.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.20" steps="571988"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="116124"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.20" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="118948"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.20.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.91" steps="116027"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.21" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="119402"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.21.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.31" steps="1422"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.22" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="125842"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.22.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.88" steps="116444"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.23" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="126663"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.23.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.83" steps="114517"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.24" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="133"/></proof>
  </goal>
  <goal name="backstep&#39;vc.25" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="107279"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.25.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.79" steps="109061"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.12" steps="503"/></proof>
  </goal>
  <goal name="backstep&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="115178"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.27.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.93" steps="123372"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.28" expl="precondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="102650"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.28.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.70" steps="2741"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.29" expl="integer overflow" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="203"/></proof>
  </goal>
  <goal name="backstep&#39;vc.30" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="100089"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.30.0" expl="assertion" proved="true">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="117055"/></proof>
   <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="0.88" steps="6747"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.31" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.40" steps="2163"/></proof>
  </goal>
  <goal name="backstep&#39;vc.32" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="106"/></proof>
  </goal>
  <goal name="backstep&#39;vc.33" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="106"/></proof>
  </goal>
  <goal name="backstep&#39;vc.34" expl="precondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="88942"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.34.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.79" steps="104660"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.35" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="95898"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.35.0" expl="assertion" proved="true">
   <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
   <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="421097"/></proof>
   <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
   <transf name="inline_goal" proved="true" >
    <goal name="backstep&#39;vc.35.0.0" expl="assertion" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="backstep&#39;vc.35.0.0.0" expl="assertion" proved="true">
     <proof prover="0"><result status="timeout" time="1.00"/></proof>
     <proof prover="1"><result status="timeout" time="1.00" steps="124242"/></proof>
     <proof prover="2"><result status="timeout" time="1.00"/></proof>
     <transf name="split_vc" proved="true" >
      <goal name="backstep&#39;vc.35.0.0.0.0" expl="assertion" proved="true">
      <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
      <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="702154"/></proof>
      <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
      <transf name="inline_goal" proved="true" >
       <goal name="backstep&#39;vc.35.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="backstep&#39;vc.35.0.0.0.0.0.0" expl="VC for backstep" proved="true">
        <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
        <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="501245"/></proof>
        <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
        <transf name="inline_goal" proved="true" >
         <goal name="backstep&#39;vc.35.0.0.0.0.0.0.0" expl="VC for backstep" proved="true">
         <proof prover="2" timelimit="30" memlimit="4000"><result status="valid" time="24.73" steps="226743"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="backstep&#39;vc.35.0.0.0.0.0.1" expl="VC for backstep" proved="true">
        <proof prover="0"><result status="timeout" time="1.00"/></proof>
        <proof prover="1"><result status="timeout" time="1.00" steps="120507"/></proof>
        <proof prover="2"><result status="timeout" time="1.00"/></proof>
        <transf name="split_vc" proved="true" >
         <goal name="backstep&#39;vc.35.0.0.0.0.0.1.0" expl="VC for backstep" proved="true">
         <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
         <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="485995"/></proof>
         <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
         <transf name="inline_goal" proved="true" >
          <goal name="backstep&#39;vc.35.0.0.0.0.0.1.0.0" expl="VC for backstep" proved="true">
          <proof prover="2" timelimit="30" memlimit="4000"><result status="valid" time="11.30" steps="118898"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.36" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="100666"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.36.0" expl="assertion" proved="true">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="125225"/></proof>
   <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="1.38" steps="9693"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.37" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="81505"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.37.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.93" steps="3760"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.38" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="101862"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.38.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.33" steps="1466"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.39" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="94805"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.39.0" expl="assertion" proved="true">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="126990"/></proof>
   <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="2.75" steps="20948"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.40" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="94347"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.40.0" expl="assertion" proved="true">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="126341"/></proof>
   <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="2.47" steps="17358"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.41" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="137"/></proof>
  </goal>
  <goal name="backstep&#39;vc.42" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="101611"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.42.0" expl="assertion" proved="true">
   <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
   <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="440951"/></proof>
   <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
   <transf name="inline_goal" proved="true" >
    <goal name="backstep&#39;vc.42.0.0" expl="assertion" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="backstep&#39;vc.42.0.0.0" expl="assertion" proved="true">
     <proof prover="0"><result status="timeout" time="1.00"/></proof>
     <proof prover="1"><result status="timeout" time="1.00" steps="126157"/></proof>
     <proof prover="2"><result status="timeout" time="1.00"/></proof>
     <transf name="split_vc" proved="true" >
      <goal name="backstep&#39;vc.42.0.0.0.0" expl="assertion" proved="true">
      <proof prover="0"><result status="timeout" time="1.00"/></proof>
      <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="1.94" steps="216393"/></proof>
      <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="backstep&#39;vc.43" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.12" steps="513"/></proof>
  </goal>
  <goal name="backstep&#39;vc.44" expl="postcondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="99735"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="backstep&#39;vc.44.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="123495"/></proof>
   <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="4.50" steps="34894"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Lib_Trail_Impl0_BacktrackTo">
 <goal name="backtrack_to&#39;vc" expl="VC for backtrack_to">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="182501"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Trail_Impl0_EnqAssignment">
 <goal name="enq_assignment&#39;vc" expl="VC for enq_assignment">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="133068"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Trail_Impl0_LearnUnit">
 <goal name="learn_unit&#39;vc" expl="VC for learn_unit">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="153531"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Solver_HandleConflict">
 <goal name="handle_conflict&#39;vc" expl="VC for handle_conflict">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="140148"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_UnitProp_Swap">
 <goal name="swap&#39;vc" expl="VC for swap">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="138503"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Watches_UpdateWatch" proved="true">
 <goal name="update_watch&#39;vc" expl="VC for update_watch" proved="true">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="187069"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="update_watch&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="62"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="567"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="462"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="724"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="272"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="133"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="142"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="345"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.14" steps="976"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.9" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="165"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="142231"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="update_watch&#39;vc.10.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.79" steps="114344"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="update_watch&#39;vc.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="177"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.12" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="968"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.13" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="207"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.14" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="207"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.15" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="1050"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.16" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.16" steps="1128"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="217"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.18" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="137209"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="update_watch&#39;vc.18.0" expl="assertion" proved="true">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="1.78" steps="235158"/></proof>
   <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="update_watch&#39;vc.19" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="131309"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="update_watch&#39;vc.19.0" expl="assertion" proved="true">
   <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
   <proof prover="1" timelimit="30" memlimit="4000"><result status="valid" time="8.93" steps="1884519"/></proof>
   <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="update_watch&#39;vc.20" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.75" steps="106171"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.21" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.42" steps="2488"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="231"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.23" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.51" steps="3177"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.24" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="252"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.25" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.32" steps="1626"/></proof>
  </goal>
  <goal name="update_watch&#39;vc.26" expl="assertion" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="127932"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="update_watch&#39;vc.26.0" expl="assertion" proved="true">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="2.20" steps="283322"/></proof>
   <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="update_watch&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.14" steps="611"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Lib_UnitProp_UnitPropCheckRest">
 <goal name="unit_prop_check_rest&#39;vc" expl="VC for unit_prop_check_rest">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="224302"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_UnitProp_UnitPropDoOuter">
 <goal name="unit_prop_do_outer&#39;vc" expl="VC for unit_prop_do_outer">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="428883"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_UnitProp_UnitPropCurrentLevel">
 <goal name="unit_prop_current_level&#39;vc" expl="VC for unit_prop_current_level">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="179234"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_UnitProp_UnitPropagate">
 <goal name="unit_propagate&#39;vc" expl="VC for unit_propagate">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="146532"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Solver_UnitPropStep" proved="true">
 <goal name="unit_prop_step&#39;vc" expl="VC for unit_prop_step" proved="true">
 <proof prover="1"><result status="valid" time="0.51" steps="87354"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Solver_UnitPropLoop" proved="true">
 <goal name="unit_prop_loop&#39;vc" expl="VC for unit_prop_loop" proved="true">
 <proof prover="2"><result status="valid" time="0.63" steps="3764"/></proof>
 </goal>
</theory>
<theory name="Lib_Trail_Impl0_EnqDecision">
 <goal name="enq_decision&#39;vc" expl="VC for enq_decision">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="162705"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Solver_OuterLoop">
 <goal name="outer_loop&#39;vc" expl="VC for outer_loop">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="164032"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Solver_Inner" proved="true">
 <goal name="inner&#39;vc" expl="VC for inner" proved="true">
 <proof prover="1"><result status="valid" time="0.87" steps="120736"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Trail_Impl0_New" proved="true">
 <goal name="new&#39;vc" expl="VC for new" proved="true">
 <proof prover="2"><result status="valid" time="0.23" steps="1624"/></proof>
 </goal>
</theory>
<theory name="Lib_Watches_Impl0_New" proved="true">
 <goal name="new&#39;vc" expl="VC for new" proved="true">
 <proof prover="2"><result status="valid" time="0.65" steps="4601"/></proof>
 </goal>
</theory>
<theory name="Lib_Watches_Impl0_InitWatches">
 <goal name="init_watches&#39;vc" expl="VC for init_watches">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="143379"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Trail_Impl0_LearnUnits">
 <goal name="learn_units&#39;vc" expl="VC for learn_units">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="137930"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Solver_Solver">
 <goal name="solver&#39;vc" expl="VC for solver">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="156854"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Watches_Impl0_MoveToEnd">
 <goal name="move_to_end&#39;vc" expl="VC for move_to_end">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="119113"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Lib_Formula_Impl0" proved="true">
 <goal name="Eq1.eq&#39;refn&#39;vc" expl="VC for eq&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="31"/></proof>
 </goal>
</theory>
<theory name="Lib_Lit_Impl1" proved="true">
 <goal name="Eq1.eq&#39;refn&#39;vc" expl="VC for eq&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="31"/></proof>
 </goal>
</theory>
<theory name="Lib_Lit_Impl3" proved="true">
 <goal name="Clone1.clone&#39;&#39;refn&#39;vc" expl="VC for clone&#39;&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="31"/></proof>
 </goal>
</theory>
<theory name="Lib_Lit_Impl2" proved="true">
 <goal name="Not1.not&#39;&#39;refn&#39;vc" expl="VC for not&#39;&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="31"/></proof>
 </goal>
</theory>
</file>
</why3session>
