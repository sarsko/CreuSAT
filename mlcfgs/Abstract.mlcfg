
module Abstract_Assignments_Unset_Stub
  use prelude.Int
  predicate unset [#"../Abstract/src/assignments.rs" 41 0 41 28] (v : int)
end
module Abstract_Assignments_Unset_Interface
  use prelude.Int
  predicate unset [#"../Abstract/src/assignments.rs" 41 0 41 28] (v : int)
end
module Abstract_Assignments_Unset
  use prelude.Int
  predicate unset [#"../Abstract/src/assignments.rs" 41 0 41 28] (v : int) =
    [#"../Abstract/src/assignments.rs" 42 16 42 22] v >= 2
  val unset [#"../Abstract/src/assignments.rs" 41 0 41 28] (v : int) : bool
    ensures { result = unset v }
    
end
module Abstract_Assignments_AssignmentsModel_Type
  use seq.Seq
  use prelude.Int
  type t_assignmentsmodel  =
    | C_AssignmentsModel (Seq.seq int)
    
  let function assignmentsmodel_0 (self : t_assignmentsmodel) : Seq.seq int = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_AssignmentsModel a -> a
      end
end
module Abstract_Assignments_Impl0_Invariant_Stub
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  predicate invariant' [#"../Abstract/src/assignments.rs" 49 4 49 34] (self : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module Abstract_Assignments_Impl0_Invariant_Interface
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  predicate invariant' [#"../Abstract/src/assignments.rs" 49 4 49 34] (self : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module Abstract_Assignments_Impl0_Invariant
  use prelude.Int
  use seq.Seq
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  predicate invariant' [#"../Abstract/src/assignments.rs" 49 4 49 34] (self : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
   =
    [#"../Abstract/src/assignments.rs" 50 8 53 9] forall i : int . 0 <= i /\ i < Seq.length (Abstract_Assignments_AssignmentsModel_Type.assignmentsmodel_0 self) -> 0 <= Seq.get (Abstract_Assignments_AssignmentsModel_Type.assignmentsmodel_0 self) i
  val invariant' [#"../Abstract/src/assignments.rs" 49 4 49 34] (self : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel) : bool
    ensures { result = invariant' self }
    
end
module Abstract_Assignments_Impl0_Complete_Stub
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  predicate complete [#"../Abstract/src/assignments.rs" 57 4 57 33] (self : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module Abstract_Assignments_Impl0_Complete_Interface
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  predicate complete [#"../Abstract/src/assignments.rs" 57 4 57 33] (self : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module Abstract_Assignments_Impl0_Complete
  use prelude.Int
  use seq.Seq
  clone Abstract_Assignments_Unset_Stub as Unset0
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  predicate complete [#"../Abstract/src/assignments.rs" 57 4 57 33] (self : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
   =
    [#"../Abstract/src/assignments.rs" 58 8 60 9] forall i : int . 0 <= i /\ i < Seq.length (Abstract_Assignments_AssignmentsModel_Type.assignmentsmodel_0 self) -> not Unset0.unset (Seq.get (Abstract_Assignments_AssignmentsModel_Type.assignmentsmodel_0 self) i)
  val complete [#"../Abstract/src/assignments.rs" 57 4 57 33] (self : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel) : bool
    ensures { result = complete self }
    
end
module Abstract_Lit_LitModel_Type
  use prelude.Int
  type t_litmodel  =
    | C_LitModel int
    
  let function litmodel_code (self : t_litmodel) : int = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_LitModel a -> a
      end
end
module Abstract_Clause_ClauseFSet_Type
  use set.Fset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  type t_clausefset  =
    | C_ClauseFSet (Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel))
    
  let function clausefset_lits (self : t_clausefset) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseFSet a -> a
      end
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Stub
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Interface
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
end
module CreusotContracts_Logic_Fset_Impl0_Contains
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t) =
    [#"../Abstract/src/clause_manager.rs" 52 83 52 101] Fset.mem e self
  val contains [@inline:trivial] (self : Fset.fset t) (e : t) : bool
    ensures { result = contains self e }
    
end
module Abstract_Lit_Impl0_IndexLogic_Stub
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  function index_logic [@inline:trivial] [#"../Abstract/src/lit.rs" 63 4 63 35] (self : Abstract_Lit_LitModel_Type.t_litmodel) : int
    
end
module Abstract_Lit_Impl0_IndexLogic_Interface
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  function index_logic [@inline:trivial] [#"../Abstract/src/lit.rs" 63 4 63 35] (self : Abstract_Lit_LitModel_Type.t_litmodel) : int
    
end
module Abstract_Lit_Impl0_IndexLogic
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  function index_logic [@inline:trivial] [#"../Abstract/src/lit.rs" 63 4 63 35] (self : Abstract_Lit_LitModel_Type.t_litmodel) : int
    
   =
    [#"../Abstract/src/lit.rs" 61 4 61 12] div (Abstract_Lit_LitModel_Type.litmodel_code self) 2
  val index_logic [@inline:trivial] [#"../Abstract/src/lit.rs" 63 4 63 35] (self : Abstract_Lit_LitModel_Type.t_litmodel) : int
    ensures { result = index_logic self }
    
end
module Abstract_Lit_Impl0_IsPositiveLogic_Stub
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  function is_positive_logic [@inline:trivial] [#"../Abstract/src/lit.rs" 69 4 69 42] (self : Abstract_Lit_LitModel_Type.t_litmodel) : bool
    
end
module Abstract_Lit_Impl0_IsPositiveLogic_Interface
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  function is_positive_logic [@inline:trivial] [#"../Abstract/src/lit.rs" 69 4 69 42] (self : Abstract_Lit_LitModel_Type.t_litmodel) : bool
    
end
module Abstract_Lit_Impl0_IsPositiveLogic
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  function is_positive_logic [@inline:trivial] [#"../Abstract/src/lit.rs" 69 4 69 42] (self : Abstract_Lit_LitModel_Type.t_litmodel) : bool
    
   =
    [#"../Abstract/src/lit.rs" 70 8 70 26] mod (Abstract_Lit_LitModel_Type.litmodel_code self) 2 = 0
  val is_positive_logic [@inline:trivial] [#"../Abstract/src/lit.rs" 69 4 69 42] (self : Abstract_Lit_LitModel_Type.t_litmodel) : bool
    ensures { result = is_positive_logic self }
    
end
module Abstract_LogicUtil_BoolAsInt_Stub
  use prelude.Int
  function bool_as_int [@inline:trivial] [#"../Abstract/src/logic_util.rs" 21 0 21 41] (b : bool) : int
end
module Abstract_LogicUtil_BoolAsInt_Interface
  use prelude.Int
  function bool_as_int [@inline:trivial] [#"../Abstract/src/logic_util.rs" 21 0 21 41] (b : bool) : int
end
module Abstract_LogicUtil_BoolAsInt
  use prelude.Int
  function bool_as_int [@inline:trivial] [#"../Abstract/src/logic_util.rs" 21 0 21 41] (b : bool) : int =
    [#"../Abstract/src/logic_util.rs" 23 7 26 8] if b then 1 else 0
  val bool_as_int [@inline:trivial] [#"../Abstract/src/logic_util.rs" 21 0 21 41] (b : bool) : int
    ensures { result = bool_as_int b }
    
end
module Abstract_Lit_Impl1_Sat_Stub
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  predicate sat [@inline:trivial] [#"../Abstract/src/lit.rs" 91 4 91 56] (self : Abstract_Lit_LitModel_Type.t_litmodel) (a : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module Abstract_Lit_Impl1_Sat_Interface
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  predicate sat [@inline:trivial] [#"../Abstract/src/lit.rs" 91 4 91 56] (self : Abstract_Lit_LitModel_Type.t_litmodel) (a : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module Abstract_Lit_Impl1_Sat
  use seq.Seq
  clone Abstract_LogicUtil_BoolAsInt_Stub as BoolAsInt0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl0_IsPositiveLogic_Stub as IsPositiveLogic0
  clone Abstract_Lit_Impl0_IndexLogic_Stub as IndexLogic0
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  predicate sat [@inline:trivial] [#"../Abstract/src/lit.rs" 91 4 91 56] (self : Abstract_Lit_LitModel_Type.t_litmodel) (a : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
   =
    [#"../Abstract/src/lit.rs" 93 12 93 76] Seq.get (Abstract_Assignments_AssignmentsModel_Type.assignmentsmodel_0 a) (IndexLogic0.index_logic self) = BoolAsInt0.bool_as_int (IsPositiveLogic0.is_positive_logic self)
  val sat [@inline:trivial] [#"../Abstract/src/lit.rs" 91 4 91 56] (self : Abstract_Lit_LitModel_Type.t_litmodel) (a : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel) : bool
    ensures { result = sat self a }
    
end
module Abstract_Clause_Impl0_Sat_Stub
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  predicate sat [#"../Abstract/src/clause.rs" 41 4 41 66] (self : Abstract_Clause_ClauseFSet_Type.t_clausefset) (assignments : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module Abstract_Clause_Impl0_Sat_Interface
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  predicate sat [#"../Abstract/src/clause.rs" 41 4 41 66] (self : Abstract_Clause_ClauseFSet_Type.t_clausefset) (assignments : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module Abstract_Clause_Impl0_Sat
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl1_Sat_Stub as Sat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  predicate sat [#"../Abstract/src/clause.rs" 41 4 41 66] (self : Abstract_Clause_ClauseFSet_Type.t_clausefset) (assignments : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
   =
    [#"../Abstract/src/clause.rs" 42 8 44 9] exists l : Abstract_Lit_LitModel_Type.t_litmodel . Contains0.contains (Abstract_Clause_ClauseFSet_Type.clausefset_lits self) l /\ Sat0.sat l assignments
  val sat [#"../Abstract/src/clause.rs" 41 4 41 66] (self : Abstract_Clause_ClauseFSet_Type.t_clausefset) (assignments : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel) : bool
    ensures { result = sat self assignments }
    
end
module Abstract_Lit_Impl1_Invariant_Stub
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  predicate invariant' [#"../Abstract/src/lit.rs" 77 4 77 41] (self : Abstract_Lit_LitModel_Type.t_litmodel)
end
module Abstract_Lit_Impl1_Invariant_Interface
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  predicate invariant' [#"../Abstract/src/lit.rs" 77 4 77 41] (self : Abstract_Lit_LitModel_Type.t_litmodel)
end
module Abstract_Lit_Impl1_Invariant
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  predicate invariant' [#"../Abstract/src/lit.rs" 77 4 77 41] (self : Abstract_Lit_LitModel_Type.t_litmodel) =
    [#"../Abstract/src/lit.rs" 78 8 78 22] 0 <= Abstract_Lit_LitModel_Type.litmodel_code self
  val invariant' [#"../Abstract/src/lit.rs" 77 4 77 41] (self : Abstract_Lit_LitModel_Type.t_litmodel) : bool
    ensures { result = invariant' self }
    
end
module Abstract_Lit_Impl1_VarInRange_Stub
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  predicate var_in_range [#"../Abstract/src/lit.rs" 82 4 82 52] (self : Abstract_Lit_LitModel_Type.t_litmodel) (n : int)
end
module Abstract_Lit_Impl1_VarInRange_Interface
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  predicate var_in_range [#"../Abstract/src/lit.rs" 82 4 82 52] (self : Abstract_Lit_LitModel_Type.t_litmodel) (n : int)
end
module Abstract_Lit_Impl1_VarInRange
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl0_IndexLogic_Stub as IndexLogic0
  clone Abstract_Lit_Impl1_Invariant_Stub as Invariant0
  predicate var_in_range [#"../Abstract/src/lit.rs" 82 4 82 52] (self : Abstract_Lit_LitModel_Type.t_litmodel) (n : int)
   =
    [#"../Abstract/src/lit.rs" 84 12 85 37] Invariant0.invariant' self /\ IndexLogic0.index_logic self < n
  val var_in_range [#"../Abstract/src/lit.rs" 82 4 82 52] (self : Abstract_Lit_LitModel_Type.t_litmodel) (n : int) : bool
    ensures { result = var_in_range self n }
    
end
module Abstract_Clause_Impl0_Invariant_Stub
  use prelude.Int
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  predicate invariant' [#"../Abstract/src/clause.rs" 49 4 49 56] (self : Abstract_Clause_ClauseFSet_Type.t_clausefset) (num_vars : int)
    
end
module Abstract_Clause_Impl0_Invariant_Interface
  use prelude.Int
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  predicate invariant' [#"../Abstract/src/clause.rs" 49 4 49 56] (self : Abstract_Clause_ClauseFSet_Type.t_clausefset) (num_vars : int)
    
end
module Abstract_Clause_Impl0_Invariant
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl1_VarInRange_Stub as VarInRange0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  predicate invariant' [#"../Abstract/src/clause.rs" 49 4 49 56] (self : Abstract_Clause_ClauseFSet_Type.t_clausefset) (num_vars : int)
    
   =
    [#"../Abstract/src/clause.rs" 50 8 52 9] forall l : Abstract_Lit_LitModel_Type.t_litmodel . Contains0.contains (Abstract_Clause_ClauseFSet_Type.clausefset_lits self) l -> VarInRange0.var_in_range l num_vars
  val invariant' [#"../Abstract/src/clause.rs" 49 4 49 56] (self : Abstract_Clause_ClauseFSet_Type.t_clausefset) (num_vars : int) : bool
    ensures { result = invariant' self num_vars }
    
end
module Abstract_Clause_ClauseSeq_Type
  use seq.Seq
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  type t_clauseseq  =
    | C_ClauseSeq (Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel))
    
  let function clauseseq_lits (self : t_clauseseq) : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseSeq a -> a
      end
end
module Abstract_Clause_Impl1_CalcHeader_Stub
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  function calc_header [#"../Abstract/src/clause.rs" 65 4 65 42] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : int
    
end
module Abstract_Clause_Impl1_CalcHeader_Interface
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  function calc_header [#"../Abstract/src/clause.rs" 65 4 65 42] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : int
    
  axiom calc_header_spec : forall self : Abstract_Clause_ClauseSeq_Type.t_clauseseq . [#"../Abstract/src/clause.rs" 64 14 64 25] 0 <= calc_header self
end
module Abstract_Clause_Impl1_CalcHeader
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  function calc_header [#"../Abstract/src/clause.rs" 65 4 65 42] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : int
    
   =
    [#"../Abstract/src/clause.rs" 66 8 66 9] 0
  val calc_header [#"../Abstract/src/clause.rs" 65 4 65 42] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : int
    ensures { result = calc_header self }
    
  axiom calc_header_spec : forall self : Abstract_Clause_ClauseSeq_Type.t_clauseseq . [#"../Abstract/src/clause.rs" 64 14 64 25] 0 <= calc_header self
end
module Abstract_Clause_Impl1_CalcHeader_Impl
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  let rec ghost function calc_header [#"../Abstract/src/clause.rs" 65 4 65 42] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : int
    ensures { [#"../Abstract/src/clause.rs" 64 14 64 25] 0 <= result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/clause.rs" 66 8 66 9] 0
end
module Abstract_Clause_Impl1_Len_Stub
  use prelude.Int
  use seq.Seq
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  function len [#"../Abstract/src/clause.rs" 73 4 73 34] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : int
end
module Abstract_Clause_Impl1_Len_Interface
  use prelude.Int
  use seq.Seq
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  function len [#"../Abstract/src/clause.rs" 73 4 73 34] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : int
  axiom len_spec : forall self : Abstract_Clause_ClauseSeq_Type.t_clauseseq . ([#"../Abstract/src/clause.rs" 72 14 72 39] len self = Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits self)) && ([#"../Abstract/src/clause.rs" 71 14 71 25] 0 <= len self)
end
module Abstract_Clause_Impl1_Len
  use prelude.Int
  use seq.Seq
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  function len [#"../Abstract/src/clause.rs" 73 4 73 34] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : int =
    [#"../Abstract/src/clause.rs" 70 4 70 12] Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits self)
  val len [#"../Abstract/src/clause.rs" 73 4 73 34] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : int
    ensures { result = len self }
    
  axiom len_spec : forall self : Abstract_Clause_ClauseSeq_Type.t_clauseseq . ([#"../Abstract/src/clause.rs" 72 14 72 39] len self = Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits self)) && ([#"../Abstract/src/clause.rs" 71 14 71 25] 0 <= len self)
end
module Abstract_Clause_Impl1_Len_Impl
  use prelude.Int
  use seq.Seq
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  let rec ghost function len [#"../Abstract/src/clause.rs" 73 4 73 34] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : int
    ensures { [#"../Abstract/src/clause.rs" 71 14 71 25] 0 <= result }
    ensures { [#"../Abstract/src/clause.rs" 72 14 72 39] result = Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/clause.rs" 70 4 70 12] Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits self)
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Stub
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Interface
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t =
    [#"../Abstract/src/clause_manager.rs" 66 8 66 26] Fset.add e self
  val insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
    ensures { result = insert self e }
    
end
module Abstract_LogicUtil_SeqToFsetInternal_Stub
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  function seq_to_fset_internal [#"../Abstract/src/logic_util.rs" 44 0 44 71] (seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel)) (idx : int) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    
end
module Abstract_LogicUtil_SeqToFsetInternal_Interface
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  function seq_to_fset_internal [#"../Abstract/src/logic_util.rs" 44 0 44 71] (seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel)) (idx : int) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    
  axiom seq_to_fset_internal_spec : forall seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel), idx : int . ([#"../Abstract/src/logic_util.rs" 41 11 41 19] idx >= 0) -> ([#"../Abstract/src/logic_util.rs" 43 0 43 80] forall i : int . idx <= i /\ i < Seq.length seq -> Contains0.contains (seq_to_fset_internal seq idx) (Seq.get seq i)) && ([#"../Abstract/src/logic_util.rs" 42 0 42 101] forall l : Abstract_Lit_LitModel_Type.t_litmodel . Contains0.contains (seq_to_fset_internal seq idx) l -> (exists i : int . idx <= i /\ i < Seq.length seq /\ Seq.get seq i = l))
end
module Abstract_LogicUtil_SeqToFsetInternal
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  function seq_to_fset_internal [#"../Abstract/src/logic_util.rs" 44 0 44 71] (seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel)) (idx : int) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    
  val seq_to_fset_internal [#"../Abstract/src/logic_util.rs" 44 0 44 71] (seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel)) (idx : int) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    requires {[#"../Abstract/src/logic_util.rs" 41 11 41 19] idx >= 0}
    ensures { result = seq_to_fset_internal seq idx }
    
  axiom def : forall seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel), idx : int . seq_to_fset_internal seq idx = ([#"../Abstract/src/logic_util.rs" 45 4 52 5] if idx < Seq.length seq then
    let set = seq_to_fset_internal seq (idx + 1) in Insert0.insert set (Seq.get seq idx)
  else
    Fset.empty 
  )
  axiom seq_to_fset_internal_spec : forall seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel), idx : int . ([#"../Abstract/src/logic_util.rs" 41 11 41 19] idx >= 0) -> ([#"../Abstract/src/logic_util.rs" 43 0 43 80] forall i : int . idx <= i /\ i < Seq.length seq -> Contains0.contains (seq_to_fset_internal seq idx) (Seq.get seq i)) && ([#"../Abstract/src/logic_util.rs" 42 0 42 101] forall l : Abstract_Lit_LitModel_Type.t_litmodel . Contains0.contains (seq_to_fset_internal seq idx) l -> (exists i : int . idx <= i /\ i < Seq.length seq /\ Seq.get seq i = l))
end
module Abstract_LogicUtil_SeqToFsetInternal_Impl
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  let rec ghost function seq_to_fset_internal [#"../Abstract/src/logic_util.rs" 44 0 44 71] (seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel)) (idx : int) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    requires {[#"../Abstract/src/logic_util.rs" 41 11 41 19] idx >= 0}
    ensures { [#"../Abstract/src/logic_util.rs" 42 0 42 101] forall l : Abstract_Lit_LitModel_Type.t_litmodel . Contains0.contains result l -> (exists i : int . idx <= i /\ i < Seq.length seq /\ Seq.get seq i = l) }
    ensures { [#"../Abstract/src/logic_util.rs" 43 0 43 80] forall i : int . idx <= i /\ i < Seq.length seq -> Contains0.contains result (Seq.get seq i) }
    variant {[#"../Abstract/src/logic_util.rs" 40 10 40 25] Seq.length seq - idx}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/logic_util.rs" 45 4 52 5] if pure {idx < Seq.length seq} then
      let set = seq_to_fset_internal seq (idx + 1) in Insert0.insert set (Seq.get seq idx)
    else
      Fset.empty 
    
end
module Abstract_LogicUtil_SeqToFset_Stub
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  function seq_to_fset [#"../Abstract/src/logic_util.rs" 33 0 33 63] (seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel)) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    
end
module Abstract_LogicUtil_SeqToFset_Interface
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  function seq_to_fset [#"../Abstract/src/logic_util.rs" 33 0 33 63] (seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel)) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    
  axiom seq_to_fset_spec : forall seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel) . ([#"../Abstract/src/logic_util.rs" 32 0 32 101] forall l : Abstract_Lit_LitModel_Type.t_litmodel . Contains0.contains (seq_to_fset seq) l -> (exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = l)) && ([#"../Abstract/src/logic_util.rs" 31 0 31 78] forall i : int . 0 <= i /\ i < Seq.length seq -> Contains0.contains (seq_to_fset seq) (Seq.get seq i))
end
module Abstract_LogicUtil_SeqToFset
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  clone Abstract_LogicUtil_SeqToFsetInternal_Stub as SeqToFsetInternal0 with
    predicate Contains0.contains = Contains0.contains,
    axiom .
  function seq_to_fset [#"../Abstract/src/logic_util.rs" 33 0 33 63] (seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel)) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    
   =
    [#"../Abstract/src/logic_util.rs" 35 8 35 36] SeqToFsetInternal0.seq_to_fset_internal seq 0
  val seq_to_fset [#"../Abstract/src/logic_util.rs" 33 0 33 63] (seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel)) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    ensures { result = seq_to_fset seq }
    
  axiom seq_to_fset_spec : forall seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel) . ([#"../Abstract/src/logic_util.rs" 32 0 32 101] forall l : Abstract_Lit_LitModel_Type.t_litmodel . Contains0.contains (seq_to_fset seq) l -> (exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = l)) && ([#"../Abstract/src/logic_util.rs" 31 0 31 78] forall i : int . 0 <= i /\ i < Seq.length seq -> Contains0.contains (seq_to_fset seq) (Seq.get seq i))
end
module Abstract_LogicUtil_SeqToFset_Impl
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  clone Abstract_LogicUtil_SeqToFsetInternal as SeqToFsetInternal0 with
    predicate Contains0.contains = Contains0.contains,
    function Insert0.insert = Insert0.insert,
    axiom .
  let rec ghost function seq_to_fset [#"../Abstract/src/logic_util.rs" 33 0 33 63] (seq : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel)) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    ensures { [#"../Abstract/src/logic_util.rs" 31 0 31 78] forall i : int . 0 <= i /\ i < Seq.length seq -> Contains0.contains result (Seq.get seq i) }
    ensures { [#"../Abstract/src/logic_util.rs" 32 0 32 101] forall l : Abstract_Lit_LitModel_Type.t_litmodel . Contains0.contains result l -> (exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = l) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/logic_util.rs" 35 8 35 36] SeqToFsetInternal0.seq_to_fset_internal seq 0
end
module Abstract_Clause_Impl1_ToFset_Stub
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  function to_fset [#"../Abstract/src/clause.rs" 78 4 78 45] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : Abstract_Clause_ClauseFSet_Type.t_clausefset
    
end
module Abstract_Clause_Impl1_ToFset_Interface
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  function to_fset [#"../Abstract/src/clause.rs" 78 4 78 45] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : Abstract_Clause_ClauseFSet_Type.t_clausefset
    
end
module Abstract_Clause_Impl1_ToFset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  clone Abstract_LogicUtil_SeqToFset_Stub as SeqToFset0 with
    predicate Contains0.contains = Contains0.contains,
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  function to_fset [#"../Abstract/src/clause.rs" 78 4 78 45] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : Abstract_Clause_ClauseFSet_Type.t_clausefset
    
   =
    [#"../Abstract/src/clause.rs" 79 8 79 51] Abstract_Clause_ClauseFSet_Type.C_ClauseFSet (SeqToFset0.seq_to_fset (Abstract_Clause_ClauseSeq_Type.clauseseq_lits self))
  val to_fset [#"../Abstract/src/clause.rs" 78 4 78 45] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : Abstract_Clause_ClauseFSet_Type.t_clausefset
    ensures { result = to_fset self }
    
end
module Abstract_Clause_Impl2_Invariant_Stub
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  predicate invariant' [#"../Abstract/src/clause.rs" 85 4 85 56] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) (num_vars : int)
    
end
module Abstract_Clause_Impl2_Invariant_Interface
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  predicate invariant' [#"../Abstract/src/clause.rs" 85 4 85 56] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) (num_vars : int)
    
end
module Abstract_Clause_Impl2_Invariant
  use prelude.Int
  use seq.Seq
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl1_VarInRange_Stub as VarInRange0
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  predicate invariant' [#"../Abstract/src/clause.rs" 85 4 85 56] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) (num_vars : int)
    
   =
    [#"../Abstract/src/clause.rs" 86 8 89 9] forall i : int . 0 <= i /\ i < Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits self) -> VarInRange0.var_in_range (Seq.get (Abstract_Clause_ClauseSeq_Type.clauseseq_lits self) i) num_vars
  val invariant' [#"../Abstract/src/clause.rs" 85 4 85 56] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) (num_vars : int) : bool
    ensures { result = invariant' self num_vars }
    
end
module Abstract_Clause_Impl2_NoDuplicateIndexes_Stub
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  predicate no_duplicate_indexes [#"../Abstract/src/clause.rs" 94 4 94 52] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq)
    
end
module Abstract_Clause_Impl2_NoDuplicateIndexes_Interface
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  predicate no_duplicate_indexes [#"../Abstract/src/clause.rs" 94 4 94 52] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq)
    
end
module Abstract_Clause_Impl2_NoDuplicateIndexes
  use prelude.Int
  use seq.Seq
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl0_IndexLogic_Stub as IndexLogic0
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  predicate no_duplicate_indexes [#"../Abstract/src/clause.rs" 94 4 94 52] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq)
    
   =
    [#"../Abstract/src/clause.rs" 95 8 98 9] forall k : int . forall j : int . 0 <= j /\ j < Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits self) /\ 0 <= k /\ k < j -> not IndexLogic0.index_logic (Seq.get (Abstract_Clause_ClauseSeq_Type.clauseseq_lits self) k) = IndexLogic0.index_logic (Seq.get (Abstract_Clause_ClauseSeq_Type.clauseseq_lits self) j)
  val no_duplicate_indexes [#"../Abstract/src/clause.rs" 94 4 94 52] (self : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : bool
    ensures { result = no_duplicate_indexes self }
    
end
module Abstract_ClauseAllocator_HeaderLen_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant hEADER_LEN' [#"../Abstract/src/clause_allocator.rs" 31 0 31 27]  : usize
end
module Abstract_ClauseAllocator_HeaderLen
  use prelude.Int
  use prelude.UIntSize
  let constant hEADER_LEN' [#"../Abstract/src/clause_allocator.rs" 31 0 31 27]  : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/clause_allocator.rs" 31 0 31 27] (2 : usize)
end
module Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  use seq.Seq
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  type t_clauseallocatormodel  =
    | C_ClauseAllocatorModel (Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel)) int
    
  let function clauseallocatormodel_buffer (self : t_clauseallocatormodel) : Seq.seq (Abstract_Lit_LitModel_Type.t_litmodel)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseAllocatorModel a _ -> a
      end
  let function clauseallocatormodel_num_vars (self : t_clauseallocatormodel) : int = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseAllocatorModel _ a -> a
      end
end
module Abstract_ClauseAllocator_Impl0_Invariant_Stub
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  predicate invariant' [#"../Abstract/src/clause_allocator.rs" 96 4 96 41] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module Abstract_ClauseAllocator_Impl0_Invariant_Interface
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  predicate invariant' [#"../Abstract/src/clause_allocator.rs" 96 4 96 41] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module Abstract_ClauseAllocator_Impl0_Invariant
  use prelude.Int
  use seq.Seq
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl1_Invariant_Stub as Invariant0
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  predicate invariant' [#"../Abstract/src/clause_allocator.rs" 96 4 96 41] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
   =
    [#"../Abstract/src/clause_allocator.rs" 97 8 99 9] forall i : int . 0 <= i /\ i < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) -> Invariant0.invariant' (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) i)
  val invariant' [#"../Abstract/src/clause_allocator.rs" 96 4 96 41] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : bool
    ensures { result = invariant' self }
    
end
module Abstract_ClauseAllocator_Impl0_Extended_Stub
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  predicate extended [#"../Abstract/src/clause_allocator.rs" 111 4 111 67] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (new : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module Abstract_ClauseAllocator_Impl0_Extended_Interface
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  predicate extended [#"../Abstract/src/clause_allocator.rs" 111 4 111 67] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (new : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module Abstract_ClauseAllocator_Impl0_Extended
  use seq.Seq
  use prelude.Int
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  predicate extended [#"../Abstract/src/clause_allocator.rs" 111 4 111 67] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (new : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
   =
    [#"../Abstract/src/clause_allocator.rs" 112 8 117 9] Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars self = Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars new /\ Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer new) /\ (forall i : int . 0 <= i /\ i < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) -> Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) i = Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer new) i)
  val extended [#"../Abstract/src/clause_allocator.rs" 111 4 111 67] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (new : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : bool
    ensures { result = extended self new }
    
end
module Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  use seq_ext.SeqExt
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  function get_clause_seq [#"../Abstract/src/clause_allocator.rs" 132 4 132 62] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : Abstract_Clause_ClauseSeq_Type.t_clauseseq
    
end
module Abstract_ClauseAllocator_Impl1_GetClauseSeq_Interface
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  use seq_ext.SeqExt
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  function get_clause_seq [#"../Abstract/src/clause_allocator.rs" 132 4 132 62] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : Abstract_Clause_ClauseSeq_Type.t_clauseseq
    
  axiom get_clause_seq_spec : forall self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, cref : int . ([#"../Abstract/src/clause_allocator.rs" 126 8 127 75] 0 <= cref /\ cref < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) /\ Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref) + cref + UIntSize.to_int HeaderLen0.hEADER_LEN' <= Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self)) -> ([#"../Abstract/src/clause_allocator.rs" 129 15 129 31] Invariant0.invariant' self) -> ([#"../Abstract/src/clause_allocator.rs" 131 14 131 57] Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (get_clause_seq self cref)) = Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref)) && ([#"../Abstract/src/clause_allocator.rs" 130 14 130 117] Abstract_Clause_ClauseSeq_Type.clauseseq_lits (get_clause_seq self cref) = SeqExt.subsequence (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) (cref + UIntSize.to_int HeaderLen0.hEADER_LEN') (cref + UIntSize.to_int HeaderLen0.hEADER_LEN' + Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref)))
end
module Abstract_ClauseAllocator_Impl1_GetClauseSeq
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  use seq_ext.SeqExt
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  function get_clause_seq [#"../Abstract/src/clause_allocator.rs" 132 4 132 62] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : Abstract_Clause_ClauseSeq_Type.t_clauseseq
    
   =
    [#"../Abstract/src/clause_allocator.rs" 134 12 134 120] Abstract_Clause_ClauseSeq_Type.C_ClauseSeq (SeqExt.subsequence (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) (cref + UIntSize.to_int HeaderLen0.hEADER_LEN') (cref + UIntSize.to_int HeaderLen0.hEADER_LEN' + Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref)))
  val get_clause_seq [#"../Abstract/src/clause_allocator.rs" 132 4 132 62] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : Abstract_Clause_ClauseSeq_Type.t_clauseseq
    requires {[#"../Abstract/src/clause_allocator.rs" 126 8 127 75] 0 <= cref /\ cref < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) /\ Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref) + cref + UIntSize.to_int HeaderLen0.hEADER_LEN' <= Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self)}
    requires {[#"../Abstract/src/clause_allocator.rs" 129 15 129 31] Invariant0.invariant' self}
    ensures { result = get_clause_seq self cref }
    
  axiom get_clause_seq_spec : forall self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, cref : int . ([#"../Abstract/src/clause_allocator.rs" 126 8 127 75] 0 <= cref /\ cref < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) /\ Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref) + cref + UIntSize.to_int HeaderLen0.hEADER_LEN' <= Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self)) -> ([#"../Abstract/src/clause_allocator.rs" 129 15 129 31] Invariant0.invariant' self) -> ([#"../Abstract/src/clause_allocator.rs" 131 14 131 57] Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (get_clause_seq self cref)) = Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref)) && ([#"../Abstract/src/clause_allocator.rs" 130 14 130 117] Abstract_Clause_ClauseSeq_Type.clauseseq_lits (get_clause_seq self cref) = SeqExt.subsequence (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) (cref + UIntSize.to_int HeaderLen0.hEADER_LEN') (cref + UIntSize.to_int HeaderLen0.hEADER_LEN' + Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref)))
end
module Abstract_ClauseAllocator_Impl1_GetClauseSeq_Impl
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  use seq_ext.SeqExt
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl1_Invariant as Invariant1
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  let rec ghost function get_clause_seq [#"../Abstract/src/clause_allocator.rs" 132 4 132 62] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : Abstract_Clause_ClauseSeq_Type.t_clauseseq
    requires {[#"../Abstract/src/clause_allocator.rs" 126 8 127 75] 0 <= cref /\ cref < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) /\ Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref) + cref + UIntSize.to_int HeaderLen0.hEADER_LEN' <= Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self)}
    requires {[#"../Abstract/src/clause_allocator.rs" 129 15 129 31] Invariant0.invariant' self}
    ensures { [#"../Abstract/src/clause_allocator.rs" 130 14 130 117] Abstract_Clause_ClauseSeq_Type.clauseseq_lits result = SeqExt.subsequence (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) (cref + UIntSize.to_int HeaderLen0.hEADER_LEN') (cref + UIntSize.to_int HeaderLen0.hEADER_LEN' + Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref)) }
    ensures { [#"../Abstract/src/clause_allocator.rs" 131 14 131 57] Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits result) = Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/clause_allocator.rs" 134 12 134 120] Abstract_Clause_ClauseSeq_Type.C_ClauseSeq (SeqExt.subsequence (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) (cref + UIntSize.to_int HeaderLen0.hEADER_LEN') (cref + UIntSize.to_int HeaderLen0.hEADER_LEN' + Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref)))
end
module Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  use set.Fset
  use seq.ToFset
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  function get_clause_fset [#"../Abstract/src/clause_allocator.rs" 148 4 148 64] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : Abstract_Clause_ClauseFSet_Type.t_clausefset
    
end
module Abstract_ClauseAllocator_Impl1_GetClauseFset_Interface
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  use set.Fset
  use seq.ToFset
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  function get_clause_fset [#"../Abstract/src/clause_allocator.rs" 148 4 148 64] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : Abstract_Clause_ClauseFSet_Type.t_clausefset
    
  axiom get_clause_fset_spec : forall self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, cref : int . ([#"../Abstract/src/clause_allocator.rs" 142 8 143 75] 0 <= cref /\ cref < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) /\ Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref) + cref + UIntSize.to_int HeaderLen0.hEADER_LEN' <= Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self)) -> ([#"../Abstract/src/clause_allocator.rs" 145 15 145 31] Invariant0.invariant' self) -> ([#"../Abstract/src/clause_allocator.rs" 147 14 147 68] Abstract_Clause_ClauseFSet_Type.clausefset_lits (get_clause_fset self cref) = ToFset.to_set (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq self cref))) && ([#"../Abstract/src/clause_allocator.rs" 146 14 146 57] Fset.cardinal (Abstract_Clause_ClauseFSet_Type.clausefset_lits (get_clause_fset self cref)) <= Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref))
end
module Abstract_ClauseAllocator_Impl1_GetClauseFset
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  use set.Fset
  use seq.ToFset
  use seq_ext.SeqExt
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  function get_clause_fset [#"../Abstract/src/clause_allocator.rs" 148 4 148 64] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : Abstract_Clause_ClauseFSet_Type.t_clausefset
    
   =
    [#"../Abstract/src/clause_allocator.rs" 151 12 151 130] Abstract_Clause_ClauseFSet_Type.C_ClauseFSet (ToFset.to_set (SeqExt.subsequence (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) (cref + UIntSize.to_int HeaderLen0.hEADER_LEN') (cref + UIntSize.to_int HeaderLen0.hEADER_LEN' + Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref))))
  val get_clause_fset [#"../Abstract/src/clause_allocator.rs" 148 4 148 64] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : Abstract_Clause_ClauseFSet_Type.t_clausefset
    requires {[#"../Abstract/src/clause_allocator.rs" 142 8 143 75] 0 <= cref /\ cref < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) /\ Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref) + cref + UIntSize.to_int HeaderLen0.hEADER_LEN' <= Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self)}
    requires {[#"../Abstract/src/clause_allocator.rs" 145 15 145 31] Invariant0.invariant' self}
    ensures { result = get_clause_fset self cref }
    
  axiom get_clause_fset_spec : forall self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, cref : int . ([#"../Abstract/src/clause_allocator.rs" 142 8 143 75] 0 <= cref /\ cref < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) /\ Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref) + cref + UIntSize.to_int HeaderLen0.hEADER_LEN' <= Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self)) -> ([#"../Abstract/src/clause_allocator.rs" 145 15 145 31] Invariant0.invariant' self) -> ([#"../Abstract/src/clause_allocator.rs" 147 14 147 68] Abstract_Clause_ClauseFSet_Type.clausefset_lits (get_clause_fset self cref) = ToFset.to_set (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq self cref))) && ([#"../Abstract/src/clause_allocator.rs" 146 14 146 57] Fset.cardinal (Abstract_Clause_ClauseFSet_Type.clausefset_lits (get_clause_fset self cref)) <= Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref))
end
module Abstract_ClauseAllocator_Impl1_GetClauseFset_Impl
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  use set.Fset
  use seq.ToFset
  use seq_ext.SeqExt
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl1_Invariant as Invariant1
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  let rec ghost function get_clause_fset [#"../Abstract/src/clause_allocator.rs" 148 4 148 64] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) : Abstract_Clause_ClauseFSet_Type.t_clausefset
    requires {[#"../Abstract/src/clause_allocator.rs" 142 8 143 75] 0 <= cref /\ cref < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) /\ Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref) + cref + UIntSize.to_int HeaderLen0.hEADER_LEN' <= Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self)}
    requires {[#"../Abstract/src/clause_allocator.rs" 145 15 145 31] Invariant0.invariant' self}
    ensures { [#"../Abstract/src/clause_allocator.rs" 146 14 146 57] Fset.cardinal (Abstract_Clause_ClauseFSet_Type.clausefset_lits result) <= Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref) }
    ensures { [#"../Abstract/src/clause_allocator.rs" 147 14 147 68] Abstract_Clause_ClauseFSet_Type.clausefset_lits result = ToFset.to_set (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq self cref)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/clause_allocator.rs" 151 12 151 130] Abstract_Clause_ClauseFSet_Type.C_ClauseFSet (ToFset.to_set (SeqExt.subsequence (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) (cref + UIntSize.to_int HeaderLen0.hEADER_LEN') (cref + UIntSize.to_int HeaderLen0.hEADER_LEN' + Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) cref))))
end
module Abstract_ClauseAllocator_Impl1_GetClauseFsetInternal_Stub
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  function get_clause_fset_internal [#"../Abstract/src/clause_allocator.rs" 159 4 159 88] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) (idx : int) (upper : int) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    
end
module Abstract_ClauseAllocator_Impl1_GetClauseFsetInternal_Interface
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  function get_clause_fset_internal [#"../Abstract/src/clause_allocator.rs" 159 4 159 88] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) (idx : int) (upper : int) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    
end
module Abstract_ClauseAllocator_Impl1_GetClauseFsetInternal
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  function get_clause_fset_internal [#"../Abstract/src/clause_allocator.rs" 159 4 159 88] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) (idx : int) (upper : int) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    
  val get_clause_fset_internal [#"../Abstract/src/clause_allocator.rs" 159 4 159 88] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) (idx : int) (upper : int) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    requires {[#"../Abstract/src/clause_allocator.rs" 158 15 158 53] idx >= 0 /\ upper <= Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self)}
    ensures { result = get_clause_fset_internal self cref idx upper }
    
  axiom def : forall self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, cref : int, idx : int, upper : int . get_clause_fset_internal self cref idx upper = ([#"../Abstract/src/clause_allocator.rs" 160 8 167 9] if idx < upper then
    let set = get_clause_fset_internal self cref (idx + 1) upper in Insert0.insert set (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) (cref + idx))
  else
    Fset.empty 
  )
end
module Abstract_ClauseAllocator_Impl1_GetClauseFsetInternal_Impl
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  let rec ghost function get_clause_fset_internal [#"../Abstract/src/clause_allocator.rs" 159 4 159 88] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (cref : int) (idx : int) (upper : int) : Fset.fset (Abstract_Lit_LitModel_Type.t_litmodel)
    requires {[#"../Abstract/src/clause_allocator.rs" 158 15 158 53] idx >= 0 /\ upper <= Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self)}
    variant {[#"../Abstract/src/clause_allocator.rs" 157 14 157 25] upper - idx}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/clause_allocator.rs" 160 8 167 9] if pure {idx < upper} then
      let set = get_clause_fset_internal self cref (idx + 1) upper in Insert0.insert set (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) (cref + idx))
    else
      Fset.empty 
    
end
module Abstract_CrefManager_CRefManagerModel_Type
  use seq.Seq
  use prelude.Int
  type t_crefmanagermodel  =
    | C_CRefManagerModel (Seq.seq int) int
    
  let function crefmanagermodel_num_vars (self : t_crefmanagermodel) : int = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_CRefManagerModel _ a -> a
      end
  let function crefmanagermodel_crefs (self : t_crefmanagermodel) : Seq.seq int = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_CRefManagerModel a _ -> a
      end
end
module Abstract_Cref_CrefInvariant_Stub
  use prelude.Int
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  predicate cref_invariant [#"../Abstract/src/cref.rs" 16 0 16 102] (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int)
    
end
module Abstract_Cref_CrefInvariant_Interface
  use prelude.Int
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  predicate cref_invariant [#"../Abstract/src/cref.rs" 16 0 16 102] (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int)
    
end
module Abstract_Cref_CrefInvariant
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant1
  clone Abstract_Clause_Impl2_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  predicate cref_invariant [#"../Abstract/src/cref.rs" 16 0 16 102] (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int)
    
   =
    [#"../Abstract/src/cref.rs" 18 8 20 68] 0 <= cref /\ cref < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer clause_allocator) /\ Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer clause_allocator) cref) + cref + UIntSize.to_int HeaderLen0.hEADER_LEN' <= Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer clause_allocator) /\ Invariant0.invariant' (GetClauseSeq0.get_clause_seq clause_allocator cref) num_vars
  val cref_invariant [#"../Abstract/src/cref.rs" 16 0 16 102] (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int) : bool
    ensures { result = cref_invariant cref clause_allocator num_vars }
    
end
module Abstract_CrefManager_Impl0_Invariant_Stub
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  predicate invariant' [#"../Abstract/src/cref_manager.rs" 56 4 56 81] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module Abstract_CrefManager_Impl0_Invariant_Interface
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  predicate invariant' [#"../Abstract/src/cref_manager.rs" 56 4 56 81] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module Abstract_CrefManager_Impl0_Invariant
  use prelude.Int
  use seq.Seq
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  predicate invariant' [#"../Abstract/src/cref_manager.rs" 56 4 56 81] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
   =
    [#"../Abstract/src/cref_manager.rs" 57 8 62 9] Invariant0.invariant' clause_allocator /\ Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self = Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator /\ (forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) -> CrefInvariant0.cref_invariant (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) i) clause_allocator (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator))
  val invariant' [#"../Abstract/src/cref_manager.rs" 56 4 56 81] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : bool
    ensures { result = invariant' self clause_allocator }
    
end
module Abstract_ClauseAllocator_Impl1_AddClause_Stub
  use seq.Seq
  use prelude.Int
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  clone Abstract_ClauseAllocator_Impl0_Extended_Stub as Extended0
  clone Abstract_CrefManager_Impl0_Invariant_Stub as Invariant2
  clone Abstract_Clause_Impl2_Invariant_Stub as Invariant1
  function add_clause [#"../Abstract/src/clause_allocator.rs" 186 4 186 112] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (clause : Abstract_Clause_ClauseSeq_Type.t_clauseseq) (oc : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (lc : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) : (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, int)
    
end
module Abstract_ClauseAllocator_Impl1_AddClause_Interface
  use seq.Seq
  use prelude.Int
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  clone Abstract_ClauseAllocator_Impl0_Extended_Stub as Extended0
  clone Abstract_CrefManager_Impl0_Invariant_Stub as Invariant2
  clone Abstract_Clause_Impl2_Invariant_Stub as Invariant1
  function add_clause [#"../Abstract/src/clause_allocator.rs" 186 4 186 112] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (clause : Abstract_Clause_ClauseSeq_Type.t_clauseseq) (oc : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (lc : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) : (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, int)
    
  axiom add_clause_spec : forall self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, clause : Abstract_Clause_ClauseSeq_Type.t_clauseseq, oc : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel, lc : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel . ([#"../Abstract/src/clause_allocator.rs" 173 15 173 31] Invariant0.invariant' self) -> ([#"../Abstract/src/clause_allocator.rs" 174 15 174 36] Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits clause) > 0) -> ([#"../Abstract/src/clause_allocator.rs" 175 15 175 46] Invariant1.invariant' clause (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars self)) -> ([#"../Abstract/src/clause_allocator.rs" 176 15 176 33] Invariant2.invariant' oc self) -> ([#"../Abstract/src/clause_allocator.rs" 177 15 177 33] Invariant2.invariant' lc self) -> ([#"../Abstract/src/clause_allocator.rs" 185 14 185 36] Invariant2.invariant' lc (let (a, _) = add_clause self clause oc lc in a)) && ([#"../Abstract/src/clause_allocator.rs" 184 14 184 36] Invariant2.invariant' oc (let (a, _) = add_clause self clause oc lc in a)) && ([#"../Abstract/src/clause_allocator.rs" 182 14 182 57] GetClauseSeq0.get_clause_seq (let (a, _) = add_clause self clause oc lc in a) (let (_, a) = add_clause self clause oc lc in a) = clause) && ([#"../Abstract/src/clause_allocator.rs" 181 4 181 103] forall i : int . 0 <= i /\ i < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) -> Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) i = Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (let (a, _) = add_clause self clause oc lc in a)) i) && ([#"../Abstract/src/clause_allocator.rs" 180 4 180 36] Invariant0.invariant' (let (a, _) = add_clause self clause oc lc in a)) && ([#"../Abstract/src/clause_allocator.rs" 179 14 179 67] CrefInvariant0.cref_invariant (let (_, a) = add_clause self clause oc lc in a) (let (a, _) = add_clause self clause oc lc in a) (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (let (a, _) = add_clause self clause oc lc in a))) && ([#"../Abstract/src/clause_allocator.rs" 178 14 178 37] Extended0.extended self (let (a, _) = add_clause self clause oc lc in a))
end
module Abstract_ClauseAllocator_Impl1_AddClause
  use seq.Seq
  use prelude.Int
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_Clause_Impl1_CalcHeader_Stub as CalcHeader0 with
    axiom .
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Clause_Impl1_Len_Stub as Len0 with
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  clone Abstract_ClauseAllocator_Impl0_Extended_Stub as Extended0
  clone Abstract_CrefManager_Impl0_Invariant_Stub as Invariant2
  clone Abstract_Clause_Impl2_Invariant_Stub as Invariant1
  function add_clause [#"../Abstract/src/clause_allocator.rs" 186 4 186 112] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (clause : Abstract_Clause_ClauseSeq_Type.t_clauseseq) (oc : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (lc : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) : (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, int)
    
   =
    [#"../Abstract/src/clause_allocator.rs" 172 4 172 12] let cref = Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) in let tmp_buffer = Seq.snoc (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) (Abstract_Lit_LitModel_Type.C_LitModel (Len0.len clause)) in let header = CalcHeader0.calc_header clause in let tmp_buffer2 = Seq.snoc tmp_buffer (Abstract_Lit_LitModel_Type.C_LitModel header) in let result = (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.C_ClauseAllocatorModel (Seq.(++) tmp_buffer2 (Abstract_Clause_ClauseSeq_Type.clauseseq_lits clause)) (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars self), cref) in let _ = if Seq.(==) (Abstract_Clause_ClauseSeq_Type.clauseseq_lits clause) (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq (let (a, _) = result in a) (let (_, a) = result in a))) then
      ()
    else
      ()
     in result
  val add_clause [#"../Abstract/src/clause_allocator.rs" 186 4 186 112] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (clause : Abstract_Clause_ClauseSeq_Type.t_clauseseq) (oc : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (lc : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) : (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, int)
    requires {[#"../Abstract/src/clause_allocator.rs" 173 15 173 31] Invariant0.invariant' self}
    requires {[#"../Abstract/src/clause_allocator.rs" 174 15 174 36] Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits clause) > 0}
    requires {[#"../Abstract/src/clause_allocator.rs" 175 15 175 46] Invariant1.invariant' clause (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars self)}
    requires {[#"../Abstract/src/clause_allocator.rs" 176 15 176 33] Invariant2.invariant' oc self}
    requires {[#"../Abstract/src/clause_allocator.rs" 177 15 177 33] Invariant2.invariant' lc self}
    ensures { result = add_clause self clause oc lc }
    
  axiom add_clause_spec : forall self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, clause : Abstract_Clause_ClauseSeq_Type.t_clauseseq, oc : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel, lc : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel . ([#"../Abstract/src/clause_allocator.rs" 173 15 173 31] Invariant0.invariant' self) -> ([#"../Abstract/src/clause_allocator.rs" 174 15 174 36] Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits clause) > 0) -> ([#"../Abstract/src/clause_allocator.rs" 175 15 175 46] Invariant1.invariant' clause (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars self)) -> ([#"../Abstract/src/clause_allocator.rs" 176 15 176 33] Invariant2.invariant' oc self) -> ([#"../Abstract/src/clause_allocator.rs" 177 15 177 33] Invariant2.invariant' lc self) -> ([#"../Abstract/src/clause_allocator.rs" 185 14 185 36] Invariant2.invariant' lc (let (a, _) = add_clause self clause oc lc in a)) && ([#"../Abstract/src/clause_allocator.rs" 184 14 184 36] Invariant2.invariant' oc (let (a, _) = add_clause self clause oc lc in a)) && ([#"../Abstract/src/clause_allocator.rs" 182 14 182 57] GetClauseSeq0.get_clause_seq (let (a, _) = add_clause self clause oc lc in a) (let (_, a) = add_clause self clause oc lc in a) = clause) && ([#"../Abstract/src/clause_allocator.rs" 181 4 181 103] forall i : int . 0 <= i /\ i < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) -> Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) i = Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (let (a, _) = add_clause self clause oc lc in a)) i) && ([#"../Abstract/src/clause_allocator.rs" 180 4 180 36] Invariant0.invariant' (let (a, _) = add_clause self clause oc lc in a)) && ([#"../Abstract/src/clause_allocator.rs" 179 14 179 67] CrefInvariant0.cref_invariant (let (_, a) = add_clause self clause oc lc in a) (let (a, _) = add_clause self clause oc lc in a) (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (let (a, _) = add_clause self clause oc lc in a))) && ([#"../Abstract/src/clause_allocator.rs" 178 14 178 37] Extended0.extended self (let (a, _) = add_clause self clause oc lc in a))
end
module Abstract_ClauseAllocator_Impl1_AddClause_Impl
  use seq.Seq
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl0_IndexLogic as IndexLogic0
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  clone Abstract_Lit_Impl1_Invariant as Invariant3
  clone Abstract_Lit_Impl1_VarInRange as VarInRange0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_Clause_Impl1_CalcHeader as CalcHeader0 with
    axiom .
  clone Abstract_Clause_Impl1_Len as Len0 with
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Abstract_Clause_Impl2_Invariant as Invariant1 with
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  clone Abstract_Cref_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant0.invariant'
  clone Abstract_ClauseAllocator_Impl0_Extended as Extended0
  clone Abstract_CrefManager_Impl0_Invariant as Invariant2 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant
  let rec ghost function add_clause [#"../Abstract/src/clause_allocator.rs" 186 4 186 112] (self : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (clause : Abstract_Clause_ClauseSeq_Type.t_clauseseq) (oc : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (lc : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) : (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, int)
    requires {[#"../Abstract/src/clause_allocator.rs" 173 15 173 31] Invariant0.invariant' self}
    requires {[#"../Abstract/src/clause_allocator.rs" 174 15 174 36] Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits clause) > 0}
    requires {[#"../Abstract/src/clause_allocator.rs" 175 15 175 46] Invariant1.invariant' clause (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars self)}
    requires {[#"../Abstract/src/clause_allocator.rs" 176 15 176 33] Invariant2.invariant' oc self}
    requires {[#"../Abstract/src/clause_allocator.rs" 177 15 177 33] Invariant2.invariant' lc self}
    ensures { [#"../Abstract/src/clause_allocator.rs" 178 14 178 37] Extended0.extended self (let (a, _) = result in a) }
    ensures { [#"../Abstract/src/clause_allocator.rs" 179 14 179 67] CrefInvariant0.cref_invariant (let (_, a) = result in a) (let (a, _) = result in a) (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (let (a, _) = result in a)) }
    ensures { [#"../Abstract/src/clause_allocator.rs" 180 4 180 36] Invariant0.invariant' (let (a, _) = result in a) }
    ensures { [#"../Abstract/src/clause_allocator.rs" 181 4 181 103] forall i : int . 0 <= i /\ i < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) -> Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) i = Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (let (a, _) = result in a)) i }
    ensures { [#"../Abstract/src/clause_allocator.rs" 182 14 182 57] GetClauseSeq0.get_clause_seq (let (a, _) = result in a) (let (_, a) = result in a) = clause }
    ensures { [#"../Abstract/src/clause_allocator.rs" 184 14 184 36] Invariant2.invariant' oc (let (a, _) = result in a) }
    ensures { [#"../Abstract/src/clause_allocator.rs" 185 14 185 36] Invariant2.invariant' lc (let (a, _) = result in a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/clause_allocator.rs" 172 4 172 12] let cref = Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) in let tmp_buffer = let b' = Abstract_Lit_LitModel_Type.C_LitModel (Len0.len clause) in Seq.snoc (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer self) b' in let header = CalcHeader0.calc_header clause in let tmp_buffer2 = Seq.snoc tmp_buffer (Abstract_Lit_LitModel_Type.C_LitModel header) in let result = (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.C_ClauseAllocatorModel (Seq.(++) tmp_buffer2 (Abstract_Clause_ClauseSeq_Type.clauseseq_lits clause)) (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars self), cref) in let _ = if let b' = Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq (let (a, _) = result in a) (let (_, a) = result in a)) in Seq.(==) (Abstract_Clause_ClauseSeq_Type.clauseseq_lits clause) b' then
      ()
    else
      ()
     in result
end
module Abstract_ClauseManager_ClauseManagerModel_Type
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  type t_clausemanagermodel  =
    | C_ClauseManagerModel (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel)
    
  let function clausemanagermodel_clause_allocator (self : t_clausemanagermodel) : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseManagerModel a _ _ -> a
      end
  let function clausemanagermodel_original_clauses (self : t_clausemanagermodel) : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseManagerModel _ a _ -> a
      end
  let function clausemanagermodel_learnt_core (self : t_clausemanagermodel) : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_ClauseManagerModel _ _ a -> a
      end
end
module Abstract_Formula_Formula_Type
  use set.Fset
  use prelude.Int
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  type t_formula  =
    | C_Formula (Fset.fset (Abstract_Clause_ClauseFSet_Type.t_clausefset)) int
    
  let function formula_num_vars (self : t_formula) : int = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Formula _ a -> a
      end
  let function formula_formula (self : t_formula) : Fset.fset (Abstract_Clause_ClauseFSet_Type.t_clausefset)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Formula a _ -> a
      end
end
module Abstract_Formula_Impl0_FromInternal_Stub
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  function from_internal [#"../Abstract/src/formula.rs" 61 4 63 25] (crefs : Seq.seq int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (idx : int) (_num_vars : int) : Fset.fset (Abstract_Clause_ClauseFSet_Type.t_clausefset)
    
end
module Abstract_Formula_Impl0_FromInternal_Interface
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  function from_internal [#"../Abstract/src/formula.rs" 61 4 63 25] (crefs : Seq.seq int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (idx : int) (_num_vars : int) : Fset.fset (Abstract_Clause_ClauseFSet_Type.t_clausefset)
    
  axiom from_internal_spec : forall crefs : Seq.seq int, clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, idx : int, _num_vars : int . ([#"../Abstract/src/formula.rs" 55 15 55 23] idx >= 0) -> ([#"../Abstract/src/formula.rs" 56 15 56 43] Invariant0.invariant' clause_allocator) -> ([#"../Abstract/src/formula.rs" 57 4 58 71] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (Seq.get crefs i) clause_allocator _num_vars) -> ([#"../Abstract/src/formula.rs" 60 4 60 145] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (from_internal crefs clause_allocator idx _num_vars) c -> (exists i : int . idx <= i /\ i < Seq.length crefs /\ GetClauseFset0.get_clause_fset clause_allocator (Seq.get crefs i) = c)) && ([#"../Abstract/src/formula.rs" 59 4 59 145] forall i : int . idx <= i /\ i < Seq.length crefs -> (exists c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (from_internal crefs clause_allocator idx _num_vars) c /\ GetClauseFset0.get_clause_fset clause_allocator (Seq.get crefs i) = c))
end
module Abstract_Formula_Impl0_FromInternal
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  function from_internal [#"../Abstract/src/formula.rs" 61 4 63 25] (crefs : Seq.seq int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (idx : int) (_num_vars : int) : Fset.fset (Abstract_Clause_ClauseFSet_Type.t_clausefset)
    
  val from_internal [#"../Abstract/src/formula.rs" 61 4 63 25] (crefs : Seq.seq int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (idx : int) (_num_vars : int) : Fset.fset (Abstract_Clause_ClauseFSet_Type.t_clausefset)
    requires {[#"../Abstract/src/formula.rs" 55 15 55 23] idx >= 0}
    requires {[#"../Abstract/src/formula.rs" 56 15 56 43] Invariant0.invariant' clause_allocator}
    requires {[#"../Abstract/src/formula.rs" 57 4 58 71] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (Seq.get crefs i) clause_allocator _num_vars}
    ensures { result = from_internal crefs clause_allocator idx _num_vars }
    
  axiom def : forall crefs : Seq.seq int, clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, idx : int, _num_vars : int . from_internal crefs clause_allocator idx _num_vars = ([#"../Abstract/src/formula.rs" 64 8 72 9] if idx < Seq.length crefs then
    let set = from_internal crefs clause_allocator (idx + 1) _num_vars in let clause = GetClauseFset0.get_clause_fset clause_allocator (Seq.get crefs idx) in Insert0.insert set clause
  else
    Fset.empty 
  )
  axiom from_internal_spec : forall crefs : Seq.seq int, clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, idx : int, _num_vars : int . ([#"../Abstract/src/formula.rs" 55 15 55 23] idx >= 0) -> ([#"../Abstract/src/formula.rs" 56 15 56 43] Invariant0.invariant' clause_allocator) -> ([#"../Abstract/src/formula.rs" 57 4 58 71] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (Seq.get crefs i) clause_allocator _num_vars) -> ([#"../Abstract/src/formula.rs" 60 4 60 145] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (from_internal crefs clause_allocator idx _num_vars) c -> (exists i : int . idx <= i /\ i < Seq.length crefs /\ GetClauseFset0.get_clause_fset clause_allocator (Seq.get crefs i) = c)) && ([#"../Abstract/src/formula.rs" 59 4 59 145] forall i : int . idx <= i /\ i < Seq.length crefs -> (exists c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (from_internal crefs clause_allocator idx _num_vars) c /\ GetClauseFset0.get_clause_fset clause_allocator (Seq.get crefs i) = c))
end
module Abstract_Formula_Impl0_FromInternal_Impl
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl0_IndexLogic as IndexLogic0
  clone Abstract_Lit_Impl1_Invariant as Invariant1
  clone Abstract_Lit_Impl1_VarInRange as VarInRange0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_Clause_Impl2_Invariant as Invariant2 with
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  clone Abstract_Cref_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Invariant1.invariant' = Invariant0.invariant'
  let rec ghost function from_internal [#"../Abstract/src/formula.rs" 61 4 63 25] (crefs : Seq.seq int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (idx : int) (_num_vars : int) : Fset.fset (Abstract_Clause_ClauseFSet_Type.t_clausefset)
    requires {[#"../Abstract/src/formula.rs" 55 15 55 23] idx >= 0}
    requires {[#"../Abstract/src/formula.rs" 56 15 56 43] Invariant0.invariant' clause_allocator}
    requires {[#"../Abstract/src/formula.rs" 57 4 58 71] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (Seq.get crefs i) clause_allocator _num_vars}
    ensures { [#"../Abstract/src/formula.rs" 59 4 59 145] forall i : int . idx <= i /\ i < Seq.length crefs -> (exists c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains result c /\ GetClauseFset0.get_clause_fset clause_allocator (Seq.get crefs i) = c) }
    ensures { [#"../Abstract/src/formula.rs" 60 4 60 145] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains result c -> (exists i : int . idx <= i /\ i < Seq.length crefs /\ GetClauseFset0.get_clause_fset clause_allocator (Seq.get crefs i) = c) }
    variant {[#"../Abstract/src/formula.rs" 54 14 54 31] Seq.length crefs - idx}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/formula.rs" 64 8 72 9] if pure {idx < Seq.length crefs} then
      let set = from_internal crefs clause_allocator (idx + 1) _num_vars in let clause = GetClauseFset0.get_clause_fset clause_allocator (Seq.get crefs idx) in Insert0.insert set clause
    else
      Fset.empty 
    
end
module Abstract_Formula_Impl0_From_Stub
  use prelude.Int
  use seq.Seq
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  function from [#"../Abstract/src/formula.rs" 44 4 44 105] (crefs : Seq.seq int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int) : Abstract_Formula_Formula_Type.t_formula
    
end
module Abstract_Formula_Impl0_From_Interface
  use prelude.Int
  use seq.Seq
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  function from [#"../Abstract/src/formula.rs" 44 4 44 105] (crefs : Seq.seq int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int) : Abstract_Formula_Formula_Type.t_formula
    
  axiom from_spec : forall crefs : Seq.seq int, clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, num_vars : int . ([#"../Abstract/src/formula.rs" 38 15 38 43] Invariant0.invariant' clause_allocator) -> ([#"../Abstract/src/formula.rs" 39 4 40 70] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (Seq.get crefs i) clause_allocator num_vars) -> ([#"../Abstract/src/formula.rs" 43 4 43 151] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (from crefs clause_allocator num_vars)) c -> (exists i : int . 0 <= i /\ i < Seq.length crefs /\ GetClauseFset0.get_clause_fset clause_allocator (Seq.get crefs i) = c)) && ([#"../Abstract/src/formula.rs" 42 4 42 151] forall i : int . 0 <= i /\ i < Seq.length crefs -> (exists c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (from crefs clause_allocator num_vars)) c /\ GetClauseFset0.get_clause_fset clause_allocator (Seq.get crefs i) = c)) && ([#"../Abstract/src/formula.rs" 41 14 41 41] Abstract_Formula_Formula_Type.formula_num_vars (from crefs clause_allocator num_vars) = num_vars)
end
module Abstract_Formula_Impl0_From
  use prelude.Int
  use seq.Seq
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  clone Abstract_Formula_Impl0_FromInternal_Stub as FromInternal0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  function from [#"../Abstract/src/formula.rs" 44 4 44 105] (crefs : Seq.seq int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int) : Abstract_Formula_Formula_Type.t_formula
    
   =
    [#"../Abstract/src/formula.rs" 45 8 45 99] Abstract_Formula_Formula_Type.C_Formula (FromInternal0.from_internal crefs clause_allocator 0 num_vars) num_vars
  val from [#"../Abstract/src/formula.rs" 44 4 44 105] (crefs : Seq.seq int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int) : Abstract_Formula_Formula_Type.t_formula
    requires {[#"../Abstract/src/formula.rs" 38 15 38 43] Invariant0.invariant' clause_allocator}
    requires {[#"../Abstract/src/formula.rs" 39 4 40 70] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (Seq.get crefs i) clause_allocator num_vars}
    ensures { result = from crefs clause_allocator num_vars }
    
  axiom from_spec : forall crefs : Seq.seq int, clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, num_vars : int . ([#"../Abstract/src/formula.rs" 38 15 38 43] Invariant0.invariant' clause_allocator) -> ([#"../Abstract/src/formula.rs" 39 4 40 70] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (Seq.get crefs i) clause_allocator num_vars) -> ([#"../Abstract/src/formula.rs" 43 4 43 151] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (from crefs clause_allocator num_vars)) c -> (exists i : int . 0 <= i /\ i < Seq.length crefs /\ GetClauseFset0.get_clause_fset clause_allocator (Seq.get crefs i) = c)) && ([#"../Abstract/src/formula.rs" 42 4 42 151] forall i : int . 0 <= i /\ i < Seq.length crefs -> (exists c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (from crefs clause_allocator num_vars)) c /\ GetClauseFset0.get_clause_fset clause_allocator (Seq.get crefs i) = c)) && ([#"../Abstract/src/formula.rs" 41 14 41 41] Abstract_Formula_Formula_Type.formula_num_vars (from crefs clause_allocator num_vars) = num_vars)
end
module Abstract_Formula_Impl0_From_Impl
  use prelude.Int
  use seq.Seq
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl0_IndexLogic as IndexLogic0
  clone Abstract_Lit_Impl1_Invariant as Invariant1
  clone Abstract_Lit_Impl1_VarInRange as VarInRange0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_Clause_Impl2_Invariant as Invariant2 with
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  clone Abstract_Cref_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Invariant1.invariant' = Invariant0.invariant'
  clone Abstract_Formula_Impl0_FromInternal as FromInternal0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function Insert0.insert = Insert0.insert,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  let rec ghost function from [#"../Abstract/src/formula.rs" 44 4 44 105] (crefs : Seq.seq int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int) : Abstract_Formula_Formula_Type.t_formula
    requires {[#"../Abstract/src/formula.rs" 38 15 38 43] Invariant0.invariant' clause_allocator}
    requires {[#"../Abstract/src/formula.rs" 39 4 40 70] forall i : int . 0 <= i /\ i < Seq.length crefs -> CrefInvariant0.cref_invariant (Seq.get crefs i) clause_allocator num_vars}
    ensures { [#"../Abstract/src/formula.rs" 41 14 41 41] Abstract_Formula_Formula_Type.formula_num_vars result = num_vars }
    ensures { [#"../Abstract/src/formula.rs" 42 4 42 151] forall i : int . 0 <= i /\ i < Seq.length crefs -> (exists c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula result) c /\ GetClauseFset0.get_clause_fset clause_allocator (Seq.get crefs i) = c) }
    ensures { [#"../Abstract/src/formula.rs" 43 4 43 151] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula result) c -> (exists i : int . 0 <= i /\ i < Seq.length crefs /\ GetClauseFset0.get_clause_fset clause_allocator (Seq.get crefs i) = c) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/formula.rs" 45 8 45 99] Abstract_Formula_Formula_Type.C_Formula (FromInternal0.from_internal crefs clause_allocator 0 num_vars) num_vars
end
module Abstract_Formula_Impl0_Sat_Stub
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  predicate sat [#"../Abstract/src/formula.rs" 93 4 93 56] (self : Abstract_Formula_Formula_Type.t_formula) (a : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module Abstract_Formula_Impl0_Sat_Interface
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  predicate sat [#"../Abstract/src/formula.rs" 93 4 93 56] (self : Abstract_Formula_Formula_Type.t_formula) (a : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
end
module Abstract_Formula_Impl0_Sat
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_Clause_Impl0_Sat_Stub as Sat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  predicate sat [#"../Abstract/src/formula.rs" 93 4 93 56] (self : Abstract_Formula_Formula_Type.t_formula) (a : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel)
    
   =
    [#"../Abstract/src/formula.rs" 94 8 96 9] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula self) c -> Sat0.sat c a
  val sat [#"../Abstract/src/formula.rs" 93 4 93 56] (self : Abstract_Formula_Formula_Type.t_formula) (a : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel) : bool
    ensures { result = sat self a }
    
end
module Abstract_Formula_Impl0_EventuallySatComplete_Stub
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  predicate eventually_sat_complete [#"../Abstract/src/formula.rs" 83 4 83 55] (self : Abstract_Formula_Formula_Type.t_formula)
    
end
module Abstract_Formula_Impl0_EventuallySatComplete_Interface
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  predicate eventually_sat_complete [#"../Abstract/src/formula.rs" 83 4 83 55] (self : Abstract_Formula_Formula_Type.t_formula)
    
end
module Abstract_Formula_Impl0_EventuallySatComplete
  use seq.Seq
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_Formula_Impl0_Sat_Stub as Sat0
  clone Abstract_Assignments_Impl0_Complete_Stub as Complete0
  clone Abstract_Assignments_Impl0_Invariant_Stub as Invariant0
  predicate eventually_sat_complete [#"../Abstract/src/formula.rs" 83 4 83 55] (self : Abstract_Formula_Formula_Type.t_formula)
    
   =
    [#"../Abstract/src/formula.rs" 84 8 89 9] exists a : Abstract_Assignments_AssignmentsModel_Type.t_assignmentsmodel . Seq.length (Abstract_Assignments_AssignmentsModel_Type.assignmentsmodel_0 a) = Abstract_Formula_Formula_Type.formula_num_vars self /\ Invariant0.invariant' a /\ Complete0.complete a /\ Sat0.sat self a
  val eventually_sat_complete [#"../Abstract/src/formula.rs" 83 4 83 55] (self : Abstract_Formula_Formula_Type.t_formula) : bool
    ensures { result = eventually_sat_complete self }
    
end
module Abstract_Formula_Impl0_Insert_Stub
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  function insert [#"../Abstract/src/formula.rs" 49 4 49 50] (self : Abstract_Formula_Formula_Type.t_formula) (clause : Abstract_Clause_ClauseFSet_Type.t_clausefset) : Abstract_Formula_Formula_Type.t_formula
    
end
module Abstract_Formula_Impl0_Insert_Interface
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  function insert [#"../Abstract/src/formula.rs" 49 4 49 50] (self : Abstract_Formula_Formula_Type.t_formula) (clause : Abstract_Clause_ClauseFSet_Type.t_clausefset) : Abstract_Formula_Formula_Type.t_formula
    
end
module Abstract_Formula_Impl0_Insert
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  function insert [#"../Abstract/src/formula.rs" 49 4 49 50] (self : Abstract_Formula_Formula_Type.t_formula) (clause : Abstract_Clause_ClauseFSet_Type.t_clausefset) : Abstract_Formula_Formula_Type.t_formula
    
   =
    [#"../Abstract/src/formula.rs" 50 8 50 81] Abstract_Formula_Formula_Type.C_Formula (Insert0.insert (Abstract_Formula_Formula_Type.formula_formula self) clause) (Abstract_Formula_Formula_Type.formula_num_vars self)
  val insert [#"../Abstract/src/formula.rs" 49 4 49 50] (self : Abstract_Formula_Formula_Type.t_formula) (clause : Abstract_Clause_ClauseFSet_Type.t_clausefset) : Abstract_Formula_Formula_Type.t_formula
    ensures { result = insert self clause }
    
end
module Abstract_Formula_Impl0_Implies_Stub
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  predicate implies [#"../Abstract/src/formula.rs" 76 4 76 59] (self : Abstract_Formula_Formula_Type.t_formula) (clause : Abstract_Clause_ClauseFSet_Type.t_clausefset)
    
end
module Abstract_Formula_Impl0_Implies_Interface
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  predicate implies [#"../Abstract/src/formula.rs" 76 4 76 59] (self : Abstract_Formula_Formula_Type.t_formula) (clause : Abstract_Clause_ClauseFSet_Type.t_clausefset)
    
end
module Abstract_Formula_Impl0_Implies
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_Formula_Impl0_Insert_Stub as Insert0
  clone Abstract_Formula_Impl0_EventuallySatComplete_Stub as EventuallySatComplete0
  predicate implies [#"../Abstract/src/formula.rs" 76 4 76 59] (self : Abstract_Formula_Formula_Type.t_formula) (clause : Abstract_Clause_ClauseFSet_Type.t_clausefset)
    
   =
    [#"../Abstract/src/formula.rs" 77 8 79 9] EventuallySatComplete0.eventually_sat_complete self -> EventuallySatComplete0.eventually_sat_complete (Insert0.insert self clause)
  val implies [#"../Abstract/src/formula.rs" 76 4 76 59] (self : Abstract_Formula_Formula_Type.t_formula) (clause : Abstract_Clause_ClauseFSet_Type.t_clausefset) : bool
    ensures { result = implies self clause }
    
end
module Abstract_CrefManager_Impl0_AreImpliedBy_Stub
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  predicate are_implied_by [#"../Abstract/src/cref_manager.rs" 66 4 68 13] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (original_clauses : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module Abstract_CrefManager_Impl0_AreImpliedBy_Interface
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  predicate are_implied_by [#"../Abstract/src/cref_manager.rs" 66 4 68 13] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (original_clauses : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
end
module Abstract_CrefManager_Impl0_AreImpliedBy
  use prelude.Int
  use seq.Seq
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  clone Abstract_Formula_Impl0_Implies_Stub as Implies0
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Formula_Impl0_From_Stub as From0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  predicate are_implied_by [#"../Abstract/src/cref_manager.rs" 66 4 68 13] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (original_clauses : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel)
    
   =
    [#"../Abstract/src/cref_manager.rs" 69 8 73 9] let formula = From0.from (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs original_clauses) clause_allocator (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self) in forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) -> Implies0.implies formula (GetClauseFset0.get_clause_fset clause_allocator (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) i))
  val are_implied_by [#"../Abstract/src/cref_manager.rs" 66 4 68 13] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (original_clauses : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : bool
    ensures { result = are_implied_by self original_clauses clause_allocator }
    
end
module Abstract_ClauseManager_Impl0_Invariant_Stub
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  predicate invariant' [#"../Abstract/src/clause_manager.rs" 66 4 66 41] (self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel)
    
end
module Abstract_ClauseManager_Impl0_Invariant_Interface
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  predicate invariant' [#"../Abstract/src/clause_manager.rs" 66 4 66 41] (self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel)
    
end
module Abstract_ClauseManager_Impl0_Invariant
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_CrefManager_Impl0_AreImpliedBy_Stub as AreImpliedBy0
  clone Abstract_CrefManager_Impl0_Invariant_Stub as Invariant1
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  predicate invariant' [#"../Abstract/src/clause_manager.rs" 66 4 66 41] (self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel)
    
   =
    [#"../Abstract/src/clause_manager.rs" 67 8 72 9] Invariant0.invariant' (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) /\ Invariant1.invariant' (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) /\ Invariant1.invariant' (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_learnt_core self) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) /\ AreImpliedBy0.are_implied_by (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_learnt_core self) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self)
  val invariant' [#"../Abstract/src/clause_manager.rs" 66 4 66 41] (self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : bool
    ensures { result = invariant' self }
    
end
module Abstract_ClauseManager_Impl1_OriginalClauses_Stub
  use prelude.Int
  use seq.Seq
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant1
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_ClauseManager_Impl0_Invariant_Stub as Invariant0
  function original_clauses [#"../Abstract/src/clause_manager.rs" 121 4 121 51] (self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : Abstract_Formula_Formula_Type.t_formula
    
end
module Abstract_ClauseManager_Impl1_OriginalClauses_Interface
  use prelude.Int
  use seq.Seq
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant1
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_ClauseManager_Impl0_Invariant_Stub as Invariant0
  function original_clauses [#"../Abstract/src/clause_manager.rs" 121 4 121 51] (self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : Abstract_Formula_Formula_Type.t_formula
    
  axiom original_clauses_spec : forall self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel . ([#"../Abstract/src/clause_manager.rs" 115 15 115 31] Invariant0.invariant' self) -> ([#"../Abstract/src/clause_manager.rs" 119 4 120 150] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (original_clauses self)) c -> (exists i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) /\ GetClauseFset0.get_clause_fset (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) i) = c)) && ([#"../Abstract/src/clause_manager.rs" 117 4 118 87] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) -> (exists c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (original_clauses self)) c /\ GetClauseFset0.get_clause_fset (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) i) = c)) && ([#"../Abstract/src/clause_manager.rs" 116 14 116 63] Abstract_Formula_Formula_Type.formula_num_vars (original_clauses self) = Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self))
end
module Abstract_ClauseManager_Impl1_OriginalClauses
  use prelude.Int
  use seq.Seq
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant1
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_Formula_Impl0_From_Stub as From0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  clone Abstract_ClauseManager_Impl0_Invariant_Stub as Invariant0
  function original_clauses [#"../Abstract/src/clause_manager.rs" 121 4 121 51] (self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : Abstract_Formula_Formula_Type.t_formula
    
   =
    [#"../Abstract/src/clause_manager.rs" 122 8 122 105] From0.from (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self))
  val original_clauses [#"../Abstract/src/clause_manager.rs" 121 4 121 51] (self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : Abstract_Formula_Formula_Type.t_formula
    requires {[#"../Abstract/src/clause_manager.rs" 115 15 115 31] Invariant0.invariant' self}
    ensures { result = original_clauses self }
    
  axiom original_clauses_spec : forall self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel . ([#"../Abstract/src/clause_manager.rs" 115 15 115 31] Invariant0.invariant' self) -> ([#"../Abstract/src/clause_manager.rs" 119 4 120 150] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (original_clauses self)) c -> (exists i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) /\ GetClauseFset0.get_clause_fset (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) i) = c)) && ([#"../Abstract/src/clause_manager.rs" 117 4 118 87] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) -> (exists c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (original_clauses self)) c /\ GetClauseFset0.get_clause_fset (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) i) = c)) && ([#"../Abstract/src/clause_manager.rs" 116 14 116 63] Abstract_Formula_Formula_Type.formula_num_vars (original_clauses self) = Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self))
end
module Abstract_ClauseManager_Impl1_OriginalClauses_Impl
  use prelude.Int
  use seq.Seq
  clone Abstract_LogicUtil_BoolAsInt as BoolAsInt0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone Abstract_Lit_Impl0_IndexLogic as IndexLogic0
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  clone Abstract_Lit_Impl1_Sat as Sat2 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
    function BoolAsInt0.bool_as_int = BoolAsInt0.bool_as_int
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_Clause_Impl0_Sat as Sat1 with
    predicate Contains0.contains = Contains1.contains,
    predicate Sat0.sat = Sat2.sat
  clone Abstract_Assignments_Unset as Unset0
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_Formula_Impl0_Sat as Sat0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Sat0.sat = Sat1.sat
  clone Abstract_Assignments_Impl0_Complete as Complete0 with
    predicate Unset0.unset = Unset0.unset
  clone Abstract_Assignments_Impl0_Invariant as Invariant5
  clone Abstract_Lit_Impl1_Invariant as Invariant3
  clone Abstract_Lit_Impl1_VarInRange as VarInRange0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  clone Abstract_Formula_Impl0_Insert as Insert1 with
    function Insert0.insert = Insert0.insert
  clone Abstract_Formula_Impl0_EventuallySatComplete as EventuallySatComplete0 with
    predicate Invariant0.invariant' = Invariant5.invariant',
    predicate Complete0.complete = Complete0.complete,
    predicate Sat0.sat = Sat0.sat
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_Clause_Impl2_Invariant as Invariant4 with
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  clone Abstract_Formula_Impl0_Implies as Implies0 with
    predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
    function Insert0.insert = Insert1.insert
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant1 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Cref_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant4.invariant',
    predicate Invariant1.invariant' = Invariant1.invariant'
  clone Abstract_Formula_Impl0_FromInternal as FromInternal0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function Insert0.insert = Insert0.insert,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Formula_Impl0_From as From0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function FromInternal0.from_internal = FromInternal0.from_internal,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  clone Abstract_CrefManager_Impl0_AreImpliedBy as AreImpliedBy0 with
    function From0.from = From0.from,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    predicate Implies0.implies = Implies0.implies,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq
  clone Abstract_CrefManager_Impl0_Invariant as Invariant2 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  clone Abstract_ClauseManager_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant2.invariant',
    predicate AreImpliedBy0.are_implied_by = AreImpliedBy0.are_implied_by
  let rec ghost function original_clauses [#"../Abstract/src/clause_manager.rs" 121 4 121 51] (self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : Abstract_Formula_Formula_Type.t_formula
    requires {[#"../Abstract/src/clause_manager.rs" 115 15 115 31] Invariant0.invariant' self}
    ensures { [#"../Abstract/src/clause_manager.rs" 116 14 116 63] Abstract_Formula_Formula_Type.formula_num_vars result = Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) }
    ensures { [#"../Abstract/src/clause_manager.rs" 117 4 118 87] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) -> (exists c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula result) c /\ GetClauseFset0.get_clause_fset (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) i) = c) }
    ensures { [#"../Abstract/src/clause_manager.rs" 119 4 120 150] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula result) c -> (exists i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) /\ GetClauseFset0.get_clause_fset (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) i) = c) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/clause_manager.rs" 122 8 122 105] From0.from (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self))
end
module Abstract_CrefManager_Impl1_Push2_Stub
  use seq.Seq
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant1
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  clone Abstract_CrefManager_Impl0_AreImpliedBy_Stub as AreImpliedBy0
  clone Abstract_Formula_Impl0_Implies_Stub as Implies0
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  clone Abstract_Formula_Impl0_From_Stub as From0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_CrefManager_Impl0_Invariant_Stub as Invariant0
  function push2 [#"../Abstract/src/cref_manager.rs" 101 4 101 112] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (orig : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
end
module Abstract_CrefManager_Impl1_Push2_Interface
  use seq.Seq
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant1
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  clone Abstract_CrefManager_Impl0_AreImpliedBy_Stub as AreImpliedBy0
  clone Abstract_Formula_Impl0_Implies_Stub as Implies0
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  clone Abstract_Formula_Impl0_From_Stub as From0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_CrefManager_Impl0_Invariant_Stub as Invariant0
  function push2 [#"../Abstract/src/cref_manager.rs" 101 4 101 112] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (orig : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
  axiom push2_spec : forall self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel, cref : int, clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, orig : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel . ([#"../Abstract/src/cref_manager.rs" 90 15 90 47] Invariant0.invariant' self clause_allocator) -> ([#"../Abstract/src/cref_manager.rs" 91 15 91 80] CrefInvariant0.cref_invariant cref clause_allocator (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator)) -> ([#"../Abstract/src/cref_manager.rs" 93 8 94 56] Implies0.implies (From0.from (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs orig) clause_allocator (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator)) (GetClauseFset0.get_clause_fset clause_allocator cref)) -> ([#"../Abstract/src/cref_manager.rs" 100 14 100 46] Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars (push2 self cref clause_allocator orig) = Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self) && ([#"../Abstract/src/cref_manager.rs" 99 14 99 51] Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (push2 self cref clause_allocator orig) = Seq.snoc (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) cref) && ([#"../Abstract/src/cref_manager.rs" 97 14 97 59] AreImpliedBy0.are_implied_by (push2 self cref clause_allocator orig) orig clause_allocator) && ([#"../Abstract/src/cref_manager.rs" 95 14 95 48] Invariant0.invariant' (push2 self cref clause_allocator orig) clause_allocator)
end
module Abstract_CrefManager_Impl1_Push2
  use seq.Seq
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant1
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  clone Abstract_CrefManager_Impl0_AreImpliedBy_Stub as AreImpliedBy0
  clone Abstract_Formula_Impl0_Implies_Stub as Implies0
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  clone Abstract_Formula_Impl0_From_Stub as From0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_CrefManager_Impl0_Invariant_Stub as Invariant0
  function push2 [#"../Abstract/src/cref_manager.rs" 101 4 101 112] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (orig : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
   =
    [#"../Abstract/src/cref_manager.rs" 102 8 102 70] Abstract_CrefManager_CRefManagerModel_Type.C_CRefManagerModel (Seq.snoc (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) cref) (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self)
  val push2 [#"../Abstract/src/cref_manager.rs" 101 4 101 112] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (orig : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    requires {[#"../Abstract/src/cref_manager.rs" 90 15 90 47] Invariant0.invariant' self clause_allocator}
    requires {[#"../Abstract/src/cref_manager.rs" 91 15 91 80] CrefInvariant0.cref_invariant cref clause_allocator (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator)}
    requires {[#"../Abstract/src/cref_manager.rs" 93 8 94 56] Implies0.implies (From0.from (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs orig) clause_allocator (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator)) (GetClauseFset0.get_clause_fset clause_allocator cref)}
    ensures { result = push2 self cref clause_allocator orig }
    
  axiom push2_spec : forall self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel, cref : int, clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, orig : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel . ([#"../Abstract/src/cref_manager.rs" 90 15 90 47] Invariant0.invariant' self clause_allocator) -> ([#"../Abstract/src/cref_manager.rs" 91 15 91 80] CrefInvariant0.cref_invariant cref clause_allocator (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator)) -> ([#"../Abstract/src/cref_manager.rs" 93 8 94 56] Implies0.implies (From0.from (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs orig) clause_allocator (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator)) (GetClauseFset0.get_clause_fset clause_allocator cref)) -> ([#"../Abstract/src/cref_manager.rs" 100 14 100 46] Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars (push2 self cref clause_allocator orig) = Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self) && ([#"../Abstract/src/cref_manager.rs" 99 14 99 51] Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (push2 self cref clause_allocator orig) = Seq.snoc (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) cref) && ([#"../Abstract/src/cref_manager.rs" 97 14 97 59] AreImpliedBy0.are_implied_by (push2 self cref clause_allocator orig) orig clause_allocator) && ([#"../Abstract/src/cref_manager.rs" 95 14 95 48] Invariant0.invariant' (push2 self cref clause_allocator orig) clause_allocator)
end
module Abstract_CrefManager_Impl1_Push2_Impl
  use seq.Seq
  use prelude.Int
  clone Abstract_LogicUtil_BoolAsInt as BoolAsInt0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone Abstract_Lit_Impl0_IndexLogic as IndexLogic0
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  clone Abstract_Lit_Impl1_Sat as Sat2 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
    function BoolAsInt0.bool_as_int = BoolAsInt0.bool_as_int
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_Clause_Impl0_Sat as Sat1 with
    predicate Contains0.contains = Contains1.contains,
    predicate Sat0.sat = Sat2.sat
  clone Abstract_Assignments_Unset as Unset0
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_Formula_Impl0_Sat as Sat0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Sat0.sat = Sat1.sat
  clone Abstract_Assignments_Impl0_Complete as Complete0 with
    predicate Unset0.unset = Unset0.unset
  clone Abstract_Assignments_Impl0_Invariant as Invariant4
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert1 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  clone Abstract_Lit_Impl1_Invariant as Invariant3
  clone Abstract_Lit_Impl1_VarInRange as VarInRange0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Abstract_Formula_Impl0_Insert as Insert0 with
    function Insert0.insert = Insert1.insert
  clone Abstract_Formula_Impl0_EventuallySatComplete as EventuallySatComplete0 with
    predicate Invariant0.invariant' = Invariant4.invariant',
    predicate Complete0.complete = Complete0.complete,
    predicate Sat0.sat = Sat0.sat
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant1 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Clause_Impl2_Invariant as Invariant2 with
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  clone Abstract_Cref_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Invariant1.invariant' = Invariant1.invariant'
  clone Abstract_Formula_Impl0_FromInternal as FromInternal0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function Insert0.insert = Insert1.insert,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Formula_Impl0_Implies as Implies0 with
    predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
    function Insert0.insert = Insert0.insert
  clone Abstract_Formula_Impl0_From as From0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function FromInternal0.from_internal = FromInternal0.from_internal,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  clone Abstract_CrefManager_Impl0_AreImpliedBy as AreImpliedBy0 with
    function From0.from = From0.from,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    predicate Implies0.implies = Implies0.implies,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq
  clone Abstract_CrefManager_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant
  let rec ghost function push2 [#"../Abstract/src/cref_manager.rs" 101 4 101 112] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (orig : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    requires {[#"../Abstract/src/cref_manager.rs" 90 15 90 47] Invariant0.invariant' self clause_allocator}
    requires {[#"../Abstract/src/cref_manager.rs" 91 15 91 80] CrefInvariant0.cref_invariant cref clause_allocator (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator)}
    requires {[#"../Abstract/src/cref_manager.rs" 93 8 94 56] Implies0.implies (From0.from (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs orig) clause_allocator (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator)) (GetClauseFset0.get_clause_fset clause_allocator cref)}
    ensures { [#"../Abstract/src/cref_manager.rs" 95 14 95 48] Invariant0.invariant' result clause_allocator }
    ensures { [#"../Abstract/src/cref_manager.rs" 97 14 97 59] AreImpliedBy0.are_implied_by result orig clause_allocator }
    ensures { [#"../Abstract/src/cref_manager.rs" 99 14 99 51] Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs result = Seq.snoc (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) cref }
    ensures { [#"../Abstract/src/cref_manager.rs" 100 14 100 46] Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars result = Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/cref_manager.rs" 102 8 102 70] Abstract_CrefManager_CRefManagerModel_Type.C_CRefManagerModel (Seq.snoc (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) cref) (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self)
end
module Abstract_ClauseManager_LemmaExtEqToEq_Stub
  use prelude.Int
  use seq.Seq
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  function lemma_ext_eq_to_eq [#"../Abstract/src/clause_manager.rs" 147 0 147 71] (cm1 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (cm2 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : ()
    
end
module Abstract_ClauseManager_LemmaExtEqToEq_Interface
  use prelude.Int
  use seq.Seq
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  function lemma_ext_eq_to_eq [#"../Abstract/src/clause_manager.rs" 147 0 147 71] (cm1 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (cm2 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : ()
    
  axiom lemma_ext_eq_to_eq_spec : forall cm1 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel, cm2 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel . ([#"../Abstract/src/clause_manager.rs" 143 0 144 161] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) -> Seq.(==) (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i))) (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i)))) -> ([#"../Abstract/src/clause_manager.rs" 145 0 146 147] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) -> GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i) = GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i))
end
module Abstract_ClauseManager_LemmaExtEqToEq
  use prelude.Int
  use seq.Seq
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  function lemma_ext_eq_to_eq [#"../Abstract/src/clause_manager.rs" 147 0 147 71] (cm1 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (cm2 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : ()
    
   =
    [#"../Abstract/src/clause_manager.rs" 142 0 142 8] ()
  val lemma_ext_eq_to_eq [#"../Abstract/src/clause_manager.rs" 147 0 147 71] (cm1 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (cm2 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : ()
    requires {[#"../Abstract/src/clause_manager.rs" 143 0 144 161] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) -> Seq.(==) (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i))) (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i)))}
    ensures { result = lemma_ext_eq_to_eq cm1 cm2 }
    
  axiom lemma_ext_eq_to_eq_spec : forall cm1 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel, cm2 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel . ([#"../Abstract/src/clause_manager.rs" 143 0 144 161] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) -> Seq.(==) (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i))) (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i)))) -> ([#"../Abstract/src/clause_manager.rs" 145 0 146 147] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) -> GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i) = GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i))
end
module Abstract_ClauseManager_LemmaExtEqToEq_Impl
  use prelude.Int
  use seq.Seq
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl1_Invariant as Invariant1
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  let rec ghost function lemma_ext_eq_to_eq [#"../Abstract/src/clause_manager.rs" 147 0 147 71] (cm1 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (cm2 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : ()
    requires {[#"../Abstract/src/clause_manager.rs" 143 0 144 161] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) -> Seq.(==) (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i))) (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i)))}
    ensures { [#"../Abstract/src/clause_manager.rs" 145 0 146 147] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) -> GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i) = GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/clause_manager.rs" 142 0 142 8] ()
end
module Abstract_ClauseManager_LemmaOriginalClausesMaintained_Stub
  use prelude.Int
  use seq.Seq
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant1
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  clone Abstract_ClauseManager_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseManager_Impl1_OriginalClauses_Stub as OriginalClauses0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant1.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended_Stub as Extended0
  function lemma_original_clauses_maintained [#"../Abstract/src/clause_manager.rs" 138 0 138 86] (cm1 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (cm2 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : ()
    
end
module Abstract_ClauseManager_LemmaOriginalClausesMaintained_Interface
  use prelude.Int
  use seq.Seq
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant1
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  clone Abstract_ClauseManager_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseManager_Impl1_OriginalClauses_Stub as OriginalClauses0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant1.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended_Stub as Extended0
  function lemma_original_clauses_maintained [#"../Abstract/src/clause_manager.rs" 138 0 138 86] (cm1 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (cm2 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : ()
    
  axiom lemma_original_clauses_maintained_spec : forall cm1 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel, cm2 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel . ([#"../Abstract/src/clause_manager.rs" 128 11 128 55] Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1 = Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm2) -> ([#"../Abstract/src/clause_manager.rs" 129 0 129 64] Extended0.extended (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2)) -> ([#"../Abstract/src/clause_manager.rs" 130 11 130 26] Invariant0.invariant' cm1) -> ([#"../Abstract/src/clause_manager.rs" 131 11 131 26] Invariant0.invariant' cm2) -> ([#"../Abstract/src/clause_manager.rs" 137 0 137 114] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses cm2)) c -> Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses cm1)) c) && ([#"../Abstract/src/clause_manager.rs" 136 0 136 114] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses cm1)) c -> Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses cm2)) c) && ([#"../Abstract/src/clause_manager.rs" 134 0 135 149] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) -> GetClauseFset0.get_clause_fset (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i) = GetClauseFset0.get_clause_fset (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i)) && ([#"../Abstract/src/clause_manager.rs" 132 0 133 147] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) -> GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i) = GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i))
end
module Abstract_ClauseManager_LemmaOriginalClausesMaintained
  use prelude.Int
  use seq.Seq
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant1
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  clone Abstract_ClauseManager_LemmaExtEqToEq_Stub as LemmaExtEqToEq0 with
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_ClauseManager_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseManager_Impl1_OriginalClauses_Stub as OriginalClauses0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant1.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended_Stub as Extended0
  function lemma_original_clauses_maintained [#"../Abstract/src/clause_manager.rs" 138 0 138 86] (cm1 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (cm2 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : ()
    
   =
    [#"../Abstract/src/clause_manager.rs" 139 4 139 32] LemmaExtEqToEq0.lemma_ext_eq_to_eq cm1 cm2
  val lemma_original_clauses_maintained [#"../Abstract/src/clause_manager.rs" 138 0 138 86] (cm1 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (cm2 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : ()
    requires {[#"../Abstract/src/clause_manager.rs" 128 11 128 55] Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1 = Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm2}
    requires {[#"../Abstract/src/clause_manager.rs" 129 0 129 64] Extended0.extended (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2)}
    requires {[#"../Abstract/src/clause_manager.rs" 130 11 130 26] Invariant0.invariant' cm1}
    requires {[#"../Abstract/src/clause_manager.rs" 131 11 131 26] Invariant0.invariant' cm2}
    ensures { result = lemma_original_clauses_maintained cm1 cm2 }
    
  axiom lemma_original_clauses_maintained_spec : forall cm1 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel, cm2 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel . ([#"../Abstract/src/clause_manager.rs" 128 11 128 55] Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1 = Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm2) -> ([#"../Abstract/src/clause_manager.rs" 129 0 129 64] Extended0.extended (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2)) -> ([#"../Abstract/src/clause_manager.rs" 130 11 130 26] Invariant0.invariant' cm1) -> ([#"../Abstract/src/clause_manager.rs" 131 11 131 26] Invariant0.invariant' cm2) -> ([#"../Abstract/src/clause_manager.rs" 137 0 137 114] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses cm2)) c -> Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses cm1)) c) && ([#"../Abstract/src/clause_manager.rs" 136 0 136 114] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses cm1)) c -> Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses cm2)) c) && ([#"../Abstract/src/clause_manager.rs" 134 0 135 149] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) -> GetClauseFset0.get_clause_fset (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i) = GetClauseFset0.get_clause_fset (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i)) && ([#"../Abstract/src/clause_manager.rs" 132 0 133 147] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) -> GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i) = GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i))
end
module Abstract_ClauseManager_LemmaOriginalClausesMaintained_Impl
  use prelude.Int
  use seq.Seq
  clone Abstract_LogicUtil_BoolAsInt as BoolAsInt0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone Abstract_Lit_Impl0_IndexLogic as IndexLogic0
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  clone Abstract_Lit_Impl1_Sat as Sat2 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
    function BoolAsInt0.bool_as_int = BoolAsInt0.bool_as_int
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_Clause_Impl0_Sat as Sat1 with
    predicate Contains0.contains = Contains1.contains,
    predicate Sat0.sat = Sat2.sat
  clone Abstract_Assignments_Unset as Unset0
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_Formula_Impl0_Sat as Sat0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Sat0.sat = Sat1.sat
  clone Abstract_Assignments_Impl0_Complete as Complete0 with
    predicate Unset0.unset = Unset0.unset
  clone Abstract_Assignments_Impl0_Invariant as Invariant5
  clone Abstract_Lit_Impl1_Invariant as Invariant3
  clone Abstract_Lit_Impl1_VarInRange as VarInRange0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert1 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  clone Abstract_Formula_Impl0_Insert as Insert0 with
    function Insert0.insert = Insert1.insert
  clone Abstract_Formula_Impl0_EventuallySatComplete as EventuallySatComplete0 with
    predicate Invariant0.invariant' = Invariant5.invariant',
    predicate Complete0.complete = Complete0.complete,
    predicate Sat0.sat = Sat0.sat
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_Clause_Impl2_Invariant as Invariant4 with
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant1 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Cref_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant4.invariant',
    predicate Invariant1.invariant' = Invariant1.invariant'
  clone Abstract_Formula_Impl0_FromInternal as FromInternal0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function Insert0.insert = Insert1.insert,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Formula_Impl0_Implies as Implies0 with
    predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
    function Insert0.insert = Insert0.insert
  clone Abstract_Formula_Impl0_From as From0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function FromInternal0.from_internal = FromInternal0.from_internal,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  clone Abstract_CrefManager_Impl0_AreImpliedBy as AreImpliedBy0 with
    function From0.from = From0.from,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    predicate Implies0.implies = Implies0.implies,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq
  clone Abstract_CrefManager_Impl0_Invariant as Invariant2 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  clone Abstract_ClauseManager_LemmaExtEqToEq as LemmaExtEqToEq0 with
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone Abstract_ClauseManager_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant2.invariant',
    predicate AreImpliedBy0.are_implied_by = AreImpliedBy0.are_implied_by
  clone Abstract_ClauseManager_Impl1_OriginalClauses as OriginalClauses0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function From0.from = From0.from,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant1.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended as Extended0
  let rec ghost function lemma_original_clauses_maintained [#"../Abstract/src/clause_manager.rs" 138 0 138 86] (cm1 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (cm2 : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) : ()
    requires {[#"../Abstract/src/clause_manager.rs" 128 11 128 55] Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1 = Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm2}
    requires {[#"../Abstract/src/clause_manager.rs" 129 0 129 64] Extended0.extended (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2)}
    requires {[#"../Abstract/src/clause_manager.rs" 130 11 130 26] Invariant0.invariant' cm1}
    requires {[#"../Abstract/src/clause_manager.rs" 131 11 131 26] Invariant0.invariant' cm2}
    ensures { [#"../Abstract/src/clause_manager.rs" 132 0 133 147] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) -> GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i) = GetClauseSeq0.get_clause_seq (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i) }
    ensures { [#"../Abstract/src/clause_manager.rs" 134 0 135 149] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) -> GetClauseFset0.get_clause_fset (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm1) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i) = GetClauseFset0.get_clause_fset (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator cm2) (Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses cm1)) i) }
    ensures { [#"../Abstract/src/clause_manager.rs" 136 0 136 114] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses cm1)) c -> Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses cm2)) c }
    ensures { [#"../Abstract/src/clause_manager.rs" 137 0 137 114] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses cm2)) c -> Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses cm1)) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/clause_manager.rs" 139 4 139 32] LemmaExtEqToEq0.lemma_ext_eq_to_eq cm1 cm2
end
module Abstract_ClauseManager_Impl1_LearnClause_Stub
  use seq.Seq
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant2
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant2.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  clone Abstract_Formula_Impl0_Implies_Stub as Implies0
  clone Abstract_Clause_Impl1_ToFset_Stub as ToFset0
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  clone Abstract_ClauseManager_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseManager_Impl1_OriginalClauses_Stub as OriginalClauses0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant1.invariant' = Invariant2.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Clause_Impl2_Invariant_Stub as Invariant1
  function learn_clause [#"../Abstract/src/clause_manager.rs" 93 4 93 70] (self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (clause : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : (Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel, int)
    
end
module Abstract_ClauseManager_Impl1_LearnClause_Interface
  use seq.Seq
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant2
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant2.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  clone Abstract_Formula_Impl0_Implies_Stub as Implies0
  clone Abstract_Clause_Impl1_ToFset_Stub as ToFset0
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  clone Abstract_ClauseManager_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseManager_Impl1_OriginalClauses_Stub as OriginalClauses0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant1.invariant' = Invariant2.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Clause_Impl2_Invariant_Stub as Invariant1
  function learn_clause [#"../Abstract/src/clause_manager.rs" 93 4 93 70] (self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (clause : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : (Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel, int)
    
  axiom learn_clause_spec : forall self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel, clause : Abstract_Clause_ClauseSeq_Type.t_clauseseq . ([#"../Abstract/src/clause_manager.rs" 78 15 78 31] Invariant0.invariant' self) -> ([#"../Abstract/src/clause_manager.rs" 79 15 79 36] Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits clause) > 0) -> ([#"../Abstract/src/clause_manager.rs" 80 15 80 63] Invariant1.invariant' clause (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self))) -> ([#"../Abstract/src/clause_manager.rs" 81 15 81 64] Implies0.implies (OriginalClauses0.original_clauses self) (ToFset0.to_fset clause)) -> ([#"../Abstract/src/clause_manager.rs" 92 4 92 124] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses self)) c -> Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses (let (a, _) = learn_clause self clause in a))) c) && ([#"../Abstract/src/clause_manager.rs" 91 4 91 124] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses (let (a, _) = learn_clause self clause in a))) c -> Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses self)) c) && ([#"../Abstract/src/clause_manager.rs" 89 4 90 116] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) -> 0 <= Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) i /\ Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) i < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self))) && ([#"../Abstract/src/clause_manager.rs" 88 14 88 101] CrefInvariant0.cref_invariant (let (_, a) = learn_clause self clause in a) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (let (a, _) = learn_clause self clause in a)) (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (let (a, _) = learn_clause self clause in a)))) && ([#"../Abstract/src/clause_manager.rs" 86 4 87 80] forall i : int . 0 <= i /\ i < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self)) -> Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self)) i = Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (let (a, _) = learn_clause self clause in a))) i) && ([#"../Abstract/src/clause_manager.rs" 85 4 85 83] Seq.(==) (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses (let (a, _) = learn_clause self clause in a)))) && ([#"../Abstract/src/clause_manager.rs" 82 4 82 36] Invariant0.invariant' (let (a, _) = learn_clause self clause in a))
end
module Abstract_ClauseManager_Impl1_LearnClause
  use seq.Seq
  use prelude.Int
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  clone Abstract_CrefManager_Impl0_AreImpliedBy_Stub as AreImpliedBy0
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant2
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant2.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  clone Abstract_Formula_Impl0_From_Stub as From0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended_Stub as Extended0
  clone Abstract_CrefManager_Impl0_Invariant_Stub as Invariant3
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  clone Abstract_ClauseManager_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseManager_Impl1_OriginalClauses_Stub as OriginalClauses0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant1.invariant' = Invariant2.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_ClauseManager_LemmaOriginalClausesMaintained_Stub as LemmaOriginalClausesMaintained0 with
    predicate Extended0.extended = Extended0.extended,
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function OriginalClauses0.original_clauses = OriginalClauses0.original_clauses,
    predicate Contains0.contains = Contains0.contains,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant1.invariant' = Invariant2.invariant',
    axiom .
  clone Abstract_Formula_Impl0_Implies_Stub as Implies0
  clone Abstract_CrefManager_Impl1_Push2_Stub as Push20 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    function From0.from = From0.from,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    predicate Implies0.implies = Implies0.implies,
    predicate AreImpliedBy0.are_implied_by = AreImpliedBy0.are_implied_by,
    predicate Invariant1.invariant' = Invariant2.invariant',
    predicate Contains0.contains = Contains0.contains,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Clause_Impl2_Invariant_Stub as Invariant1
  clone Abstract_ClauseAllocator_Impl1_AddClause_Stub as AddClause0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Invariant2.invariant' = Invariant3.invariant',
    predicate Extended0.extended = Extended0.extended,
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    axiom .
  clone Abstract_Clause_Impl1_ToFset_Stub as ToFset0
  function learn_clause [#"../Abstract/src/clause_manager.rs" 93 4 93 70] (self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (clause : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : (Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel, int)
    
   =
    [#"../Abstract/src/clause_manager.rs" 77 4 77 12] let (new_clause_allocator, cref) = AddClause0.add_clause (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) clause (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_learnt_core self) in let _ = if Implies0.implies (OriginalClauses0.original_clauses self) (GetClauseFset0.get_clause_fset new_clause_allocator cref) then
      ()
    else
      ()
     in let new_learnt_core = Push20.push2 (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_learnt_core self) cref new_clause_allocator (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self) in let result = (Abstract_ClauseManager_ClauseManagerModel_Type.C_ClauseManagerModel new_clause_allocator (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self) new_learnt_core, cref) in let _ = if Seq.(==) (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses (let (a, _) = result in a))) then
      ()
    else
      ()
     in let _ = if Invariant0.invariant' (let (a, _) = result in a) then
      ()
    else
      ()
     in let _ = LemmaOriginalClausesMaintained0.lemma_original_clauses_maintained self (let (a, _) = result in a) in result
  val learn_clause [#"../Abstract/src/clause_manager.rs" 93 4 93 70] (self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (clause : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : (Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel, int)
    requires {[#"../Abstract/src/clause_manager.rs" 78 15 78 31] Invariant0.invariant' self}
    requires {[#"../Abstract/src/clause_manager.rs" 79 15 79 36] Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits clause) > 0}
    requires {[#"../Abstract/src/clause_manager.rs" 80 15 80 63] Invariant1.invariant' clause (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self))}
    requires {[#"../Abstract/src/clause_manager.rs" 81 15 81 64] Implies0.implies (OriginalClauses0.original_clauses self) (ToFset0.to_fset clause)}
    ensures { result = learn_clause self clause }
    
  axiom learn_clause_spec : forall self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel, clause : Abstract_Clause_ClauseSeq_Type.t_clauseseq . ([#"../Abstract/src/clause_manager.rs" 78 15 78 31] Invariant0.invariant' self) -> ([#"../Abstract/src/clause_manager.rs" 79 15 79 36] Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits clause) > 0) -> ([#"../Abstract/src/clause_manager.rs" 80 15 80 63] Invariant1.invariant' clause (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self))) -> ([#"../Abstract/src/clause_manager.rs" 81 15 81 64] Implies0.implies (OriginalClauses0.original_clauses self) (ToFset0.to_fset clause)) -> ([#"../Abstract/src/clause_manager.rs" 92 4 92 124] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses self)) c -> Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses (let (a, _) = learn_clause self clause in a))) c) && ([#"../Abstract/src/clause_manager.rs" 91 4 91 124] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses (let (a, _) = learn_clause self clause in a))) c -> Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses self)) c) && ([#"../Abstract/src/clause_manager.rs" 89 4 90 116] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) -> 0 <= Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) i /\ Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) i < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self))) && ([#"../Abstract/src/clause_manager.rs" 88 14 88 101] CrefInvariant0.cref_invariant (let (_, a) = learn_clause self clause in a) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (let (a, _) = learn_clause self clause in a)) (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (let (a, _) = learn_clause self clause in a)))) && ([#"../Abstract/src/clause_manager.rs" 86 4 87 80] forall i : int . 0 <= i /\ i < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self)) -> Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self)) i = Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (let (a, _) = learn_clause self clause in a))) i) && ([#"../Abstract/src/clause_manager.rs" 85 4 85 83] Seq.(==) (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses (let (a, _) = learn_clause self clause in a)))) && ([#"../Abstract/src/clause_manager.rs" 82 4 82 36] Invariant0.invariant' (let (a, _) = learn_clause self clause in a))
end
module Abstract_ClauseManager_Impl1_LearnClause_Impl
  use seq.Seq
  use prelude.Int
  clone Abstract_LogicUtil_BoolAsInt as BoolAsInt0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl0_IsPositiveLogic as IsPositiveLogic0
  clone Abstract_Lit_Impl0_IndexLogic as IndexLogic0
  use Abstract_Assignments_AssignmentsModel_Type as Abstract_Assignments_AssignmentsModel_Type
  clone Abstract_Lit_Impl1_Sat as Sat2 with
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IsPositiveLogic0.is_positive_logic = IsPositiveLogic0.is_positive_logic,
    function BoolAsInt0.bool_as_int = BoolAsInt0.bool_as_int
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_Clause_Impl0_Sat as Sat1 with
    predicate Contains0.contains = Contains1.contains,
    predicate Sat0.sat = Sat2.sat
  clone Abstract_Assignments_Unset as Unset0
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert2 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert1 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Abstract_Clause_ClauseFSet_Type.t_clausefset
  use Abstract_Formula_Formula_Type as Abstract_Formula_Formula_Type
  clone Abstract_Formula_Impl0_Sat as Sat0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Sat0.sat = Sat1.sat
  clone Abstract_Assignments_Impl0_Complete as Complete0 with
    predicate Unset0.unset = Unset0.unset
  clone Abstract_Assignments_Impl0_Invariant as Invariant5
  clone Abstract_LogicUtil_SeqToFsetInternal as SeqToFsetInternal0 with
    predicate Contains0.contains = Contains1.contains,
    function Insert0.insert = Insert2.insert,
    axiom .
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_Lit_Impl1_Invariant as Invariant4
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant2 with
    predicate Invariant0.invariant' = Invariant4.invariant'
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant2.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Lit_Impl1_VarInRange as VarInRange0 with
    predicate Invariant0.invariant' = Invariant4.invariant',
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Abstract_Clause_Impl2_Invariant as Invariant1 with
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  clone Abstract_Cref_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant2.invariant'
  clone Abstract_Formula_Impl0_FromInternal as FromInternal0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function Insert0.insert = Insert1.insert,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseManager_ClauseManagerModel_Type as Abstract_ClauseManager_ClauseManagerModel_Type
  clone Abstract_ClauseManager_LemmaExtEqToEq as LemmaExtEqToEq0 with
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  clone Abstract_Clause_Impl1_CalcHeader as CalcHeader0 with
    axiom .
  clone Abstract_Clause_Impl1_Len as Len0 with
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended as Extended0
  clone Abstract_Formula_Impl0_Insert as Insert0 with
    function Insert0.insert = Insert1.insert
  clone Abstract_Formula_Impl0_EventuallySatComplete as EventuallySatComplete0 with
    predicate Invariant0.invariant' = Invariant5.invariant',
    predicate Complete0.complete = Complete0.complete,
    predicate Sat0.sat = Sat0.sat
  clone Abstract_LogicUtil_SeqToFset as SeqToFset0 with
    predicate Contains0.contains = Contains1.contains,
    function SeqToFsetInternal0.seq_to_fset_internal = SeqToFsetInternal0.seq_to_fset_internal,
    axiom .
  clone Abstract_Formula_Impl0_From as From0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function FromInternal0.from_internal = FromInternal0.from_internal,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_Formula_Impl0_Implies as Implies0 with
    predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
    function Insert0.insert = Insert0.insert
  clone Abstract_CrefManager_Impl0_AreImpliedBy as AreImpliedBy0 with
    function From0.from = From0.from,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    predicate Implies0.implies = Implies0.implies,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    predicate Contains0.contains = Contains0.contains,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq
  clone Abstract_CrefManager_Impl0_Invariant as Invariant3 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant
  clone Abstract_ClauseManager_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Invariant1.invariant' = Invariant3.invariant',
    predicate AreImpliedBy0.are_implied_by = AreImpliedBy0.are_implied_by
  clone Abstract_ClauseManager_Impl1_OriginalClauses as OriginalClauses0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function From0.from = From0.from,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant1.invariant' = Invariant2.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    axiom .
  clone Abstract_ClauseManager_LemmaOriginalClausesMaintained as LemmaOriginalClausesMaintained0 with
    predicate Extended0.extended = Extended0.extended,
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    function OriginalClauses0.original_clauses = OriginalClauses0.original_clauses,
    predicate Contains0.contains = Contains0.contains,
    function LemmaExtEqToEq0.lemma_ext_eq_to_eq = LemmaExtEqToEq0.lemma_ext_eq_to_eq,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant1.invariant' = Invariant2.invariant',
    axiom .
  clone Abstract_CrefManager_Impl1_Push2 as Push20 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    function From0.from = From0.from,
    function GetClauseFset0.get_clause_fset = GetClauseFset0.get_clause_fset,
    predicate Implies0.implies = Implies0.implies,
    predicate AreImpliedBy0.are_implied_by = AreImpliedBy0.are_implied_by,
    predicate Invariant1.invariant' = Invariant2.invariant',
    predicate Contains0.contains = Contains0.contains,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_ClauseAllocator_Impl1_AddClause as AddClause0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Invariant2.invariant' = Invariant3.invariant',
    predicate Extended0.extended = Extended0.extended,
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant,
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    function Len0.len = Len0.len,
    function CalcHeader0.calc_header = CalcHeader0.calc_header,
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    axiom .
  clone Abstract_Clause_Impl1_ToFset as ToFset0 with
    function SeqToFset0.seq_to_fset = SeqToFset0.seq_to_fset,
    predicate Contains0.contains = Contains1.contains
  let rec ghost function learn_clause [#"../Abstract/src/clause_manager.rs" 93 4 93 70] (self : Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel) (clause : Abstract_Clause_ClauseSeq_Type.t_clauseseq) : (Abstract_ClauseManager_ClauseManagerModel_Type.t_clausemanagermodel, int)
    requires {[#"../Abstract/src/clause_manager.rs" 78 15 78 31] Invariant0.invariant' self}
    requires {[#"../Abstract/src/clause_manager.rs" 79 15 79 36] Seq.length (Abstract_Clause_ClauseSeq_Type.clauseseq_lits clause) > 0}
    requires {[#"../Abstract/src/clause_manager.rs" 80 15 80 63] Invariant1.invariant' clause (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self))}
    requires {[#"../Abstract/src/clause_manager.rs" 81 15 81 64] Implies0.implies (OriginalClauses0.original_clauses self) (ToFset0.to_fset clause)}
    ensures { [#"../Abstract/src/clause_manager.rs" 82 4 82 36] Invariant0.invariant' (let (a, _) = result in a) }
    ensures { [#"../Abstract/src/clause_manager.rs" 85 4 85 83] Seq.(==) (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses (let (a, _) = result in a))) }
    ensures { [#"../Abstract/src/clause_manager.rs" 86 4 87 80] forall i : int . 0 <= i /\ i < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self)) -> Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self)) i = Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (let (a, _) = result in a))) i }
    ensures { [#"../Abstract/src/clause_manager.rs" 88 14 88 101] CrefInvariant0.cref_invariant (let (_, a) = result in a) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (let (a, _) = result in a)) (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator (let (a, _) = result in a))) }
    ensures { [#"../Abstract/src/clause_manager.rs" 89 4 90 116] forall i : int . 0 <= i /\ i < Seq.length (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) -> 0 <= Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) i /\ Seq.get (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) i < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self)) }
    ensures { [#"../Abstract/src/clause_manager.rs" 91 4 91 124] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses (let (a, _) = result in a))) c -> Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses self)) c }
    ensures { [#"../Abstract/src/clause_manager.rs" 92 4 92 124] forall c : Abstract_Clause_ClauseFSet_Type.t_clausefset . Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses self)) c -> Contains0.contains (Abstract_Formula_Formula_Type.formula_formula (OriginalClauses0.original_clauses (let (a, _) = result in a))) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/clause_manager.rs" 77 4 77 12] let (new_clause_allocator, cref) = AddClause0.add_clause (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_clause_allocator self) clause (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self) (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_learnt_core self) in let _ = if let a' = OriginalClauses0.original_clauses self in let b' = GetClauseFset0.get_clause_fset new_clause_allocator cref in Implies0.implies a' b' then
      ()
    else
      ()
     in let new_learnt_core = Push20.push2 (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_learnt_core self) cref new_clause_allocator (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self) in let result = (Abstract_ClauseManager_ClauseManagerModel_Type.C_ClauseManagerModel new_clause_allocator (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self) new_learnt_core, cref) in let _ = if Seq.(==) (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses self)) (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (Abstract_ClauseManager_ClauseManagerModel_Type.clausemanagermodel_original_clauses (let (a, _) = result in a))) then
      ()
    else
      ()
     in let _ = if Invariant0.invariant' (let (a, _) = result in a) then
      ()
    else
      ()
     in let _ = LemmaOriginalClausesMaintained0.lemma_original_clauses_maintained self (let (a, _) = result in a) in result
end
module Abstract_ClauseManager_LemmaCrefEqSeq_Stub
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended_Stub as Extended0
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  function lemma_cref_eq_seq [#"../Abstract/src/clause_manager.rs" 156 0 156 85] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    
end
module Abstract_ClauseManager_LemmaCrefEqSeq_Interface
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended_Stub as Extended0
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  function lemma_cref_eq_seq [#"../Abstract/src/clause_manager.rs" 156 0 156 85] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    
  axiom lemma_cref_eq_seq_spec : forall cref : int, ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel . ([#"../Abstract/src/clause_manager.rs" 150 11 150 50] CrefInvariant0.cref_invariant cref ca1 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca1)) -> ([#"../Abstract/src/clause_manager.rs" 151 11 151 50] CrefInvariant0.cref_invariant cref ca2 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca2)) -> ([#"../Abstract/src/clause_manager.rs" 152 11 152 28] Extended0.extended ca1 ca2) -> ([#"../Abstract/src/clause_manager.rs" 153 11 153 26] Invariant0.invariant' ca1) -> ([#"../Abstract/src/clause_manager.rs" 154 11 154 26] Invariant0.invariant' ca2) -> ([#"../Abstract/src/clause_manager.rs" 155 10 155 62] GetClauseSeq0.get_clause_seq ca1 cref = GetClauseSeq0.get_clause_seq ca2 cref)
end
module Abstract_ClauseManager_LemmaCrefEqSeq
  use prelude.Int
  use seq.Seq
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended_Stub as Extended0
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  function lemma_cref_eq_seq [#"../Abstract/src/clause_manager.rs" 156 0 156 85] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    
   =
    [#"../Abstract/src/clause_manager.rs" 157 4 157 77] if Seq.(==) (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq ca1 cref)) (Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq ca2 cref)) then
      ()
    else
      ()
    
  val lemma_cref_eq_seq [#"../Abstract/src/clause_manager.rs" 156 0 156 85] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    requires {[#"../Abstract/src/clause_manager.rs" 150 11 150 50] CrefInvariant0.cref_invariant cref ca1 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca1)}
    requires {[#"../Abstract/src/clause_manager.rs" 151 11 151 50] CrefInvariant0.cref_invariant cref ca2 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca2)}
    requires {[#"../Abstract/src/clause_manager.rs" 152 11 152 28] Extended0.extended ca1 ca2}
    requires {[#"../Abstract/src/clause_manager.rs" 153 11 153 26] Invariant0.invariant' ca1}
    requires {[#"../Abstract/src/clause_manager.rs" 154 11 154 26] Invariant0.invariant' ca2}
    ensures { result = lemma_cref_eq_seq cref ca1 ca2 }
    
  axiom lemma_cref_eq_seq_spec : forall cref : int, ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel . ([#"../Abstract/src/clause_manager.rs" 150 11 150 50] CrefInvariant0.cref_invariant cref ca1 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca1)) -> ([#"../Abstract/src/clause_manager.rs" 151 11 151 50] CrefInvariant0.cref_invariant cref ca2 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca2)) -> ([#"../Abstract/src/clause_manager.rs" 152 11 152 28] Extended0.extended ca1 ca2) -> ([#"../Abstract/src/clause_manager.rs" 153 11 153 26] Invariant0.invariant' ca1) -> ([#"../Abstract/src/clause_manager.rs" 154 11 154 26] Invariant0.invariant' ca2) -> ([#"../Abstract/src/clause_manager.rs" 155 10 155 62] GetClauseSeq0.get_clause_seq ca1 cref = GetClauseSeq0.get_clause_seq ca2 cref)
end
module Abstract_ClauseManager_LemmaCrefEqSeq_Impl
  use prelude.Int
  use seq.Seq
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl0_IndexLogic as IndexLogic0
  clone Abstract_Lit_Impl1_Invariant as Invariant2
  clone Abstract_Lit_Impl1_VarInRange as VarInRange0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_Clause_Impl2_Invariant as Invariant1 with
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended as Extended0
  clone Abstract_Cref_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant0.invariant'
  let rec ghost function lemma_cref_eq_seq [#"../Abstract/src/clause_manager.rs" 156 0 156 85] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    requires {[#"../Abstract/src/clause_manager.rs" 150 11 150 50] CrefInvariant0.cref_invariant cref ca1 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca1)}
    requires {[#"../Abstract/src/clause_manager.rs" 151 11 151 50] CrefInvariant0.cref_invariant cref ca2 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca2)}
    requires {[#"../Abstract/src/clause_manager.rs" 152 11 152 28] Extended0.extended ca1 ca2}
    requires {[#"../Abstract/src/clause_manager.rs" 153 11 153 26] Invariant0.invariant' ca1}
    requires {[#"../Abstract/src/clause_manager.rs" 154 11 154 26] Invariant0.invariant' ca2}
    ensures { [#"../Abstract/src/clause_manager.rs" 155 10 155 62] GetClauseSeq0.get_clause_seq ca1 cref = GetClauseSeq0.get_clause_seq ca2 cref }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/clause_manager.rs" 157 4 157 77] if let a' = Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq ca1 cref) in let b' = Abstract_Clause_ClauseSeq_Type.clauseseq_lits (GetClauseSeq0.get_clause_seq ca2 cref) in Seq.(==) a' b' then
      ()
    else
      ()
    
end
module CreusotContracts_Logic_Fset_Impl0_ExtEq_Stub
  type t
  use set.Fset
  predicate ext_eq (self : Fset.fset t) (other : Fset.fset t)
end
module CreusotContracts_Logic_Fset_Impl0_ExtEq_Interface
  type t
  use set.Fset
  predicate ext_eq (self : Fset.fset t) (other : Fset.fset t)
  axiom ext_eq_spec : forall self : Fset.fset t, other : Fset.fset t . [#"../Abstract/src/clause_manager.rs" 90 70 90 106] ext_eq self other -> self = other
end
module CreusotContracts_Logic_Fset_Impl0_ExtEq
  type t
  use set.Fset
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = t
  predicate ext_eq (self : Fset.fset t) (other : Fset.fset t) =
    [#"../Abstract/src/clause_manager.rs" 91 77 92 37] forall e : t . Contains0.contains self e = Contains0.contains other e
  val ext_eq (self : Fset.fset t) (other : Fset.fset t) : bool
    ensures { result = ext_eq self other }
    
  axiom ext_eq_spec : forall self : Fset.fset t, other : Fset.fset t . [#"../Abstract/src/clause_manager.rs" 90 70 90 106] ext_eq self other -> self = other
end
module Abstract_ClauseManager_LemmaCrefExtEqFset_Stub
  use seq.Seq
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_ExtEq_Stub as ExtEq0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel,
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended_Stub as Extended0
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  function lemma_cref_ext_eq_fset [#"../Abstract/src/clause_manager.rs" 171 0 171 90] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    
end
module Abstract_ClauseManager_LemmaCrefExtEqFset_Interface
  use seq.Seq
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_ExtEq_Stub as ExtEq0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel,
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended_Stub as Extended0
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  function lemma_cref_ext_eq_fset [#"../Abstract/src/clause_manager.rs" 171 0 171 90] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    
  axiom lemma_cref_ext_eq_fset_spec : forall cref : int, ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel . ([#"../Abstract/src/clause_manager.rs" 162 11 162 50] CrefInvariant0.cref_invariant cref ca1 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca1)) -> ([#"../Abstract/src/clause_manager.rs" 163 11 163 50] CrefInvariant0.cref_invariant cref ca2 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca2)) -> ([#"../Abstract/src/clause_manager.rs" 164 11 164 28] Extended0.extended ca1 ca2) -> ([#"../Abstract/src/clause_manager.rs" 165 11 165 26] Invariant0.invariant' ca1) -> ([#"../Abstract/src/clause_manager.rs" 166 11 166 26] Invariant0.invariant' ca2) -> ([#"../Abstract/src/clause_manager.rs" 167 11 167 47] Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer ca1) cref = Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer ca2) cref) -> ([#"../Abstract/src/clause_manager.rs" 168 0 168 81] ExtEq0.ext_eq (Abstract_Clause_ClauseFSet_Type.clausefset_lits (GetClauseFset0.get_clause_fset ca1 cref)) (Abstract_Clause_ClauseFSet_Type.clausefset_lits (GetClauseFset0.get_clause_fset ca2 cref)))
end
module Abstract_ClauseManager_LemmaCrefExtEqFset
  use seq.Seq
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_ExtEq_Stub as ExtEq0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel,
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended_Stub as Extended0
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  function lemma_cref_ext_eq_fset [#"../Abstract/src/clause_manager.rs" 171 0 171 90] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    
   =
    [#"../Abstract/src/clause_manager.rs" 161 0 161 8] ()
  val lemma_cref_ext_eq_fset [#"../Abstract/src/clause_manager.rs" 171 0 171 90] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    requires {[#"../Abstract/src/clause_manager.rs" 162 11 162 50] CrefInvariant0.cref_invariant cref ca1 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca1)}
    requires {[#"../Abstract/src/clause_manager.rs" 163 11 163 50] CrefInvariant0.cref_invariant cref ca2 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca2)}
    requires {[#"../Abstract/src/clause_manager.rs" 164 11 164 28] Extended0.extended ca1 ca2}
    requires {[#"../Abstract/src/clause_manager.rs" 165 11 165 26] Invariant0.invariant' ca1}
    requires {[#"../Abstract/src/clause_manager.rs" 166 11 166 26] Invariant0.invariant' ca2}
    requires {[#"../Abstract/src/clause_manager.rs" 167 11 167 47] Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer ca1) cref = Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer ca2) cref}
    ensures { result = lemma_cref_ext_eq_fset cref ca1 ca2 }
    
  axiom lemma_cref_ext_eq_fset_spec : forall cref : int, ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel . ([#"../Abstract/src/clause_manager.rs" 162 11 162 50] CrefInvariant0.cref_invariant cref ca1 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca1)) -> ([#"../Abstract/src/clause_manager.rs" 163 11 163 50] CrefInvariant0.cref_invariant cref ca2 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca2)) -> ([#"../Abstract/src/clause_manager.rs" 164 11 164 28] Extended0.extended ca1 ca2) -> ([#"../Abstract/src/clause_manager.rs" 165 11 165 26] Invariant0.invariant' ca1) -> ([#"../Abstract/src/clause_manager.rs" 166 11 166 26] Invariant0.invariant' ca2) -> ([#"../Abstract/src/clause_manager.rs" 167 11 167 47] Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer ca1) cref = Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer ca2) cref) -> ([#"../Abstract/src/clause_manager.rs" 168 0 168 81] ExtEq0.ext_eq (Abstract_Clause_ClauseFSet_Type.clausefset_lits (GetClauseFset0.get_clause_fset ca1 cref)) (Abstract_Clause_ClauseFSet_Type.clausefset_lits (GetClauseFset0.get_clause_fset ca2 cref)))
end
module Abstract_ClauseManager_LemmaCrefExtEqFset_Impl
  use seq.Seq
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl0_IndexLogic as IndexLogic0
  clone Abstract_Lit_Impl1_Invariant as Invariant2
  clone Abstract_Lit_Impl1_VarInRange as VarInRange0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_Clause_Impl2_Invariant as Invariant1 with
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_ExtEq as ExtEq0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel,
    predicate Contains0.contains = Contains0.contains,
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended as Extended0
  clone Abstract_Cref_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant0.invariant'
  let rec ghost function lemma_cref_ext_eq_fset [#"../Abstract/src/clause_manager.rs" 171 0 171 90] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    requires {[#"../Abstract/src/clause_manager.rs" 162 11 162 50] CrefInvariant0.cref_invariant cref ca1 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca1)}
    requires {[#"../Abstract/src/clause_manager.rs" 163 11 163 50] CrefInvariant0.cref_invariant cref ca2 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca2)}
    requires {[#"../Abstract/src/clause_manager.rs" 164 11 164 28] Extended0.extended ca1 ca2}
    requires {[#"../Abstract/src/clause_manager.rs" 165 11 165 26] Invariant0.invariant' ca1}
    requires {[#"../Abstract/src/clause_manager.rs" 166 11 166 26] Invariant0.invariant' ca2}
    requires {[#"../Abstract/src/clause_manager.rs" 167 11 167 47] Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer ca1) cref = Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer ca2) cref}
    ensures { [#"../Abstract/src/clause_manager.rs" 168 0 168 81] ExtEq0.ext_eq (Abstract_Clause_ClauseFSet_Type.clausefset_lits (GetClauseFset0.get_clause_fset ca1 cref)) (Abstract_Clause_ClauseFSet_Type.clausefset_lits (GetClauseFset0.get_clause_fset ca2 cref)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/clause_manager.rs" 161 0 161 8] ()
end
module Abstract_ClauseManager_LemmaCrefEqFset_Stub
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_ExtEq_Stub as ExtEq0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel,
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  function lemma_cref_eq_fset [#"../Abstract/src/clause_manager.rs" 179 0 179 86] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    
end
module Abstract_ClauseManager_LemmaCrefEqFset_Interface
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_ExtEq_Stub as ExtEq0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel,
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  function lemma_cref_eq_fset [#"../Abstract/src/clause_manager.rs" 179 0 179 86] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    
  axiom lemma_cref_eq_fset_spec : forall cref : int, ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel . ([#"../Abstract/src/clause_manager.rs" 177 0 177 82] ExtEq0.ext_eq (Abstract_Clause_ClauseFSet_Type.clausefset_lits (GetClauseFset0.get_clause_fset ca1 cref)) (Abstract_Clause_ClauseFSet_Type.clausefset_lits (GetClauseFset0.get_clause_fset ca2 cref))) -> ([#"../Abstract/src/clause_manager.rs" 178 10 178 64] GetClauseFset0.get_clause_fset ca1 cref = GetClauseFset0.get_clause_fset ca2 cref)
end
module Abstract_ClauseManager_LemmaCrefEqFset
  use prelude.Int
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_ExtEq_Stub as ExtEq0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel,
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  function lemma_cref_eq_fset [#"../Abstract/src/clause_manager.rs" 179 0 179 86] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    
   =
    [#"../Abstract/src/clause_manager.rs" 176 0 176 8] ()
  val lemma_cref_eq_fset [#"../Abstract/src/clause_manager.rs" 179 0 179 86] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    requires {[#"../Abstract/src/clause_manager.rs" 177 0 177 82] ExtEq0.ext_eq (Abstract_Clause_ClauseFSet_Type.clausefset_lits (GetClauseFset0.get_clause_fset ca1 cref)) (Abstract_Clause_ClauseFSet_Type.clausefset_lits (GetClauseFset0.get_clause_fset ca2 cref))}
    ensures { result = lemma_cref_eq_fset cref ca1 ca2 }
    
  axiom lemma_cref_eq_fset_spec : forall cref : int, ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel, ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel . ([#"../Abstract/src/clause_manager.rs" 177 0 177 82] ExtEq0.ext_eq (Abstract_Clause_ClauseFSet_Type.clausefset_lits (GetClauseFset0.get_clause_fset ca1 cref)) (Abstract_Clause_ClauseFSet_Type.clausefset_lits (GetClauseFset0.get_clause_fset ca2 cref))) -> ([#"../Abstract/src/clause_manager.rs" 178 10 178 64] GetClauseFset0.get_clause_fset ca1 cref = GetClauseFset0.get_clause_fset ca2 cref)
end
module Abstract_ClauseManager_LemmaCrefEqFset_Impl
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl1_Invariant as Invariant1
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_ExtEq as ExtEq0 with
    type t = Abstract_Lit_LitModel_Type.t_litmodel,
    predicate Contains0.contains = Contains0.contains,
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  let rec ghost function lemma_cref_eq_fset [#"../Abstract/src/clause_manager.rs" 179 0 179 86] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    requires {[#"../Abstract/src/clause_manager.rs" 177 0 177 82] ExtEq0.ext_eq (Abstract_Clause_ClauseFSet_Type.clausefset_lits (GetClauseFset0.get_clause_fset ca1 cref)) (Abstract_Clause_ClauseFSet_Type.clausefset_lits (GetClauseFset0.get_clause_fset ca2 cref))}
    ensures { [#"../Abstract/src/clause_manager.rs" 178 10 178 64] GetClauseFset0.get_clause_fset ca1 cref = GetClauseFset0.get_clause_fset ca2 cref }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/clause_manager.rs" 176 0 176 8] ()
end
module Abstract_ClauseManager_LemmaCrefSeqToFset_Interface
  use prelude.Int
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended_Stub as Extended0
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  val lemma_cref_seq_to_fset [#"../Abstract/src/clause_manager.rs" 188 0 188 90] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    requires {[#"../Abstract/src/clause_manager.rs" 181 11 181 50] CrefInvariant0.cref_invariant cref ca1 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca1)}
    requires {[#"../Abstract/src/clause_manager.rs" 182 11 182 50] CrefInvariant0.cref_invariant cref ca2 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca2)}
    requires {[#"../Abstract/src/clause_manager.rs" 183 11 183 26] Invariant0.invariant' ca1}
    requires {[#"../Abstract/src/clause_manager.rs" 184 11 184 26] Invariant0.invariant' ca2}
    requires {[#"../Abstract/src/clause_manager.rs" 185 11 185 28] Extended0.extended ca1 ca2}
    requires {[#"../Abstract/src/clause_manager.rs" 186 11 186 63] GetClauseSeq0.get_clause_seq ca1 cref = GetClauseSeq0.get_clause_seq ca2 cref}
    ensures { [#"../Abstract/src/clause_manager.rs" 187 10 187 64] GetClauseFset0.get_clause_fset ca1 cref = GetClauseFset0.get_clause_fset ca2 cref }
    
end
module Abstract_ClauseManager_LemmaCrefSeqToFset
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl0_IndexLogic as IndexLogic0
  clone Abstract_Lit_Impl1_Invariant as Invariant2
  clone Abstract_Lit_Impl1_VarInRange as VarInRange0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_Clause_Impl2_Invariant as Invariant1 with
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant0.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  clone Abstract_ClauseAllocator_Impl0_Extended as Extended0
  clone Abstract_Cref_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Invariant1.invariant' = Invariant0.invariant'
  let rec cfg lemma_cref_seq_to_fset [#"../Abstract/src/clause_manager.rs" 188 0 188 90] [@cfg:stackify] [@cfg:subregion_analysis] (cref : int) (ca1 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (ca2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : ()
    requires {[#"../Abstract/src/clause_manager.rs" 181 11 181 50] CrefInvariant0.cref_invariant cref ca1 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca1)}
    requires {[#"../Abstract/src/clause_manager.rs" 182 11 182 50] CrefInvariant0.cref_invariant cref ca2 (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars ca2)}
    requires {[#"../Abstract/src/clause_manager.rs" 183 11 183 26] Invariant0.invariant' ca1}
    requires {[#"../Abstract/src/clause_manager.rs" 184 11 184 26] Invariant0.invariant' ca2}
    requires {[#"../Abstract/src/clause_manager.rs" 185 11 185 28] Extended0.extended ca1 ca2}
    requires {[#"../Abstract/src/clause_manager.rs" 186 11 186 63] GetClauseSeq0.get_clause_seq ca1 cref = GetClauseSeq0.get_clause_seq ca2 cref}
    ensures { [#"../Abstract/src/clause_manager.rs" 187 10 187 64] GetClauseFset0.get_clause_fset ca1 cref = GetClauseFset0.get_clause_fset ca2 cref }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var cref_1 : int;
  var ca1_2 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel;
  var ca2_3 : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel;
  {
    cref_1 <- cref;
    ca1_2 <- ca1;
    ca2_3 <- ca2;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Abstract_Cref_CrefInvariantFset_Stub
  use prelude.Int
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  predicate cref_invariant_fset [#"../Abstract/src/cref.rs" 26 0 26 107] (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int)
    
end
module Abstract_Cref_CrefInvariantFset_Interface
  use prelude.Int
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  predicate cref_invariant_fset [#"../Abstract/src/cref.rs" 26 0 26 107] (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int)
    
end
module Abstract_Cref_CrefInvariantFset
  use prelude.Int
  use seq.Seq
  use prelude.UIntSize
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant_Stub as Invariant1
  clone Abstract_ClauseAllocator_HeaderLen_Stub as HeaderLen0
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq_Stub as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use Abstract_Clause_ClauseFSet_Type as Abstract_Clause_ClauseFSet_Type
  clone Abstract_Clause_Impl0_Invariant_Stub as Invariant0
  clone Abstract_ClauseAllocator_Impl1_GetClauseFset_Stub as GetClauseFset0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    axiom .
  predicate cref_invariant_fset [#"../Abstract/src/cref.rs" 26 0 26 107] (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int)
    
   =
    [#"../Abstract/src/cref.rs" 28 8 30 69] 0 <= cref /\ cref < Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer clause_allocator) /\ Abstract_Lit_LitModel_Type.litmodel_code (Seq.get (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer clause_allocator) cref) + cref + UIntSize.to_int HeaderLen0.hEADER_LEN' <= Seq.length (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_buffer clause_allocator) /\ Invariant0.invariant' (GetClauseFset0.get_clause_fset clause_allocator cref) num_vars
  val cref_invariant_fset [#"../Abstract/src/cref.rs" 26 0 26 107] (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) (num_vars : int) : bool
    ensures { result = cref_invariant_fset cref clause_allocator num_vars }
    
end
module Abstract_CrefManager_Impl1_Push_Stub
  use seq.Seq
  use prelude.Int
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  clone Abstract_CrefManager_Impl0_Invariant_Stub as Invariant0
  function push [#"../Abstract/src/cref_manager.rs" 85 4 85 87] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
end
module Abstract_CrefManager_Impl1_Push_Interface
  use seq.Seq
  use prelude.Int
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  clone Abstract_CrefManager_Impl0_Invariant_Stub as Invariant0
  function push [#"../Abstract/src/cref_manager.rs" 85 4 85 87] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
  axiom push_spec : forall self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel, cref : int, clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel . ([#"../Abstract/src/cref_manager.rs" 79 15 79 47] Invariant0.invariant' self clause_allocator) -> ([#"../Abstract/src/cref_manager.rs" 80 15 80 80] CrefInvariant0.cref_invariant cref clause_allocator (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator)) -> ([#"../Abstract/src/cref_manager.rs" 84 14 84 46] Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars (push self cref clause_allocator) = Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self) && ([#"../Abstract/src/cref_manager.rs" 83 14 83 51] Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (push self cref clause_allocator) = Seq.snoc (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) cref) && ([#"../Abstract/src/cref_manager.rs" 81 14 81 48] Invariant0.invariant' (push self cref clause_allocator) clause_allocator)
end
module Abstract_CrefManager_Impl1_Push
  use seq.Seq
  use prelude.Int
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_Cref_CrefInvariant_Stub as CrefInvariant0
  clone Abstract_CrefManager_Impl0_Invariant_Stub as Invariant0
  function push [#"../Abstract/src/cref_manager.rs" 85 4 85 87] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    
   =
    [#"../Abstract/src/cref_manager.rs" 86 8 86 70] Abstract_CrefManager_CRefManagerModel_Type.C_CRefManagerModel (Seq.snoc (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) cref) (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self)
  val push [#"../Abstract/src/cref_manager.rs" 85 4 85 87] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    requires {[#"../Abstract/src/cref_manager.rs" 79 15 79 47] Invariant0.invariant' self clause_allocator}
    requires {[#"../Abstract/src/cref_manager.rs" 80 15 80 80] CrefInvariant0.cref_invariant cref clause_allocator (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator)}
    ensures { result = push self cref clause_allocator }
    
  axiom push_spec : forall self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel, cref : int, clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel . ([#"../Abstract/src/cref_manager.rs" 79 15 79 47] Invariant0.invariant' self clause_allocator) -> ([#"../Abstract/src/cref_manager.rs" 80 15 80 80] CrefInvariant0.cref_invariant cref clause_allocator (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator)) -> ([#"../Abstract/src/cref_manager.rs" 84 14 84 46] Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars (push self cref clause_allocator) = Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self) && ([#"../Abstract/src/cref_manager.rs" 83 14 83 51] Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs (push self cref clause_allocator) = Seq.snoc (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) cref) && ([#"../Abstract/src/cref_manager.rs" 81 14 81 48] Invariant0.invariant' (push self cref clause_allocator) clause_allocator)
end
module Abstract_CrefManager_Impl1_Push_Impl
  use seq.Seq
  use prelude.Int
  use Abstract_Lit_LitModel_Type as Abstract_Lit_LitModel_Type
  clone Abstract_Lit_Impl0_IndexLogic as IndexLogic0
  clone Abstract_Lit_Impl1_Invariant as Invariant3
  clone Abstract_Lit_Impl1_VarInRange as VarInRange0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  use Abstract_Clause_ClauseSeq_Type as Abstract_Clause_ClauseSeq_Type
  clone Abstract_Clause_Impl2_Invariant as Invariant2 with
    predicate VarInRange0.var_in_range = VarInRange0.var_in_range
  use Abstract_ClauseAllocator_ClauseAllocatorModel_Type as Abstract_ClauseAllocator_ClauseAllocatorModel_Type
  clone Abstract_ClauseAllocator_Impl0_Invariant as Invariant1 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Abstract_ClauseAllocator_HeaderLen as HeaderLen0
  clone Abstract_ClauseAllocator_Impl1_GetClauseSeq as GetClauseSeq0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use Abstract_CrefManager_CRefManagerModel_Type as Abstract_CrefManager_CRefManagerModel_Type
  clone Abstract_Cref_CrefInvariant as CrefInvariant0 with
    val HeaderLen0.hEADER_LEN' = HeaderLen0.hEADER_LEN',
    function GetClauseSeq0.get_clause_seq = GetClauseSeq0.get_clause_seq,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Invariant1.invariant' = Invariant1.invariant'
  clone Abstract_CrefManager_Impl0_Invariant as Invariant0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate CrefInvariant0.cref_invariant = CrefInvariant0.cref_invariant
  let rec ghost function push [#"../Abstract/src/cref_manager.rs" 85 4 85 87] (self : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel) (cref : int) (clause_allocator : Abstract_ClauseAllocator_ClauseAllocatorModel_Type.t_clauseallocatormodel) : Abstract_CrefManager_CRefManagerModel_Type.t_crefmanagermodel
    requires {[#"../Abstract/src/cref_manager.rs" 79 15 79 47] Invariant0.invariant' self clause_allocator}
    requires {[#"../Abstract/src/cref_manager.rs" 80 15 80 80] CrefInvariant0.cref_invariant cref clause_allocator (Abstract_ClauseAllocator_ClauseAllocatorModel_Type.clauseallocatormodel_num_vars clause_allocator)}
    ensures { [#"../Abstract/src/cref_manager.rs" 81 14 81 48] Invariant0.invariant' result clause_allocator }
    ensures { [#"../Abstract/src/cref_manager.rs" 83 14 83 51] Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs result = Seq.snoc (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) cref }
    ensures { [#"../Abstract/src/cref_manager.rs" 84 14 84 46] Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars result = Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../Abstract/src/cref_manager.rs" 86 8 86 70] Abstract_CrefManager_CRefManagerModel_Type.C_CRefManagerModel (Seq.snoc (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_crefs self) cref) (Abstract_CrefManager_CRefManagerModel_Type.crefmanagermodel_num_vars self)
end
module Abstract_LogicUtil_BoolAsU8_Stub
  use prelude.Int
  use prelude.UInt8
  function bool_as_u8 [@inline:trivial] [#"../Abstract/src/logic_util.rs" 10 0 10 39] (b : bool) : uint8
end
module Abstract_LogicUtil_BoolAsU8_Interface
  use prelude.Int
  use prelude.UInt8
  function bool_as_u8 [@inline:trivial] [#"../Abstract/src/logic_util.rs" 10 0 10 39] (b : bool) : uint8
end
module Abstract_LogicUtil_BoolAsU8
  use prelude.Int
  use prelude.UInt8
  function bool_as_u8 [@inline:trivial] [#"../Abstract/src/logic_util.rs" 10 0 10 39] (b : bool) : uint8 =
    [#"../Abstract/src/logic_util.rs" 12 7 15 8] if b then (1 : uint8) else (0 : uint8)
  val bool_as_u8 [@inline:trivial] [#"../Abstract/src/logic_util.rs" 10 0 10 39] (b : bool) : uint8
    ensures { result = bool_as_u8 b }
    
end
