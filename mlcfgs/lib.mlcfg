module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type lib_assignments_assignedstate  = 
    | Lib_Assignments_AssignedState_Unset
    | Lib_Assignments_AssignedState_Positive
    | Lib_Assignments_AssignedState_Negative
    
  type lib_formula_satstate  = 
    | Lib_Formula_SatState_Unknown
    | Lib_Formula_SatState_Sat
    | Lib_Formula_SatState_Unsat
    
  type lib_lit_lit  = 
    | Lib_Lit_Lit usize bool
    
  function lib_lit_lit_Lit_polarity (self : lib_lit_lit) : bool
  val lib_lit_lit_Lit_polarity (self : lib_lit_lit) : bool
    ensures { result = lib_lit_lit_Lit_polarity self }
    
  axiom lib_lit_lit_Lit_polarity_acc : forall a : usize, b : bool . lib_lit_lit_Lit_polarity (Lib_Lit_Lit a b : lib_lit_lit) = b
  function lib_lit_lit_Lit_idx (self : lib_lit_lit) : usize
  val lib_lit_lit_Lit_idx (self : lib_lit_lit) : usize
    ensures { result = lib_lit_lit_Lit_idx self }
    
  axiom lib_lit_lit_Lit_idx_acc : forall a : usize, b : bool . lib_lit_lit_Lit_idx (Lib_Lit_Lit a b : lib_lit_lit) = a
  type creusotcontracts_std1_vec_vec 't  
  type lib_clause_clause  = 
    | Lib_Clause_Clause (creusotcontracts_std1_vec_vec (lib_lit_lit))
    
  function lib_clause_clause_Clause_0 (self : lib_clause_clause) : creusotcontracts_std1_vec_vec (lib_lit_lit)
  val lib_clause_clause_Clause_0 (self : lib_clause_clause) : creusotcontracts_std1_vec_vec (lib_lit_lit)
    ensures { result = lib_clause_clause_Clause_0 self }
    
  axiom lib_clause_clause_Clause_0_acc : forall a : creusotcontracts_std1_vec_vec (lib_lit_lit) . lib_clause_clause_Clause_0 (Lib_Clause_Clause a : lib_clause_clause) = a
  type lib_assignments_assignments  = 
    | Lib_Assignments_Assignments (creusotcontracts_std1_vec_vec (lib_assignments_assignedstate))
    
  function lib_assignments_assignments_Assignments_0 (self : lib_assignments_assignments) : creusotcontracts_std1_vec_vec (lib_assignments_assignedstate)
    
  val lib_assignments_assignments_Assignments_0 (self : lib_assignments_assignments) : creusotcontracts_std1_vec_vec (lib_assignments_assignedstate)
    ensures { result = lib_assignments_assignments_Assignments_0 self }
    
  axiom lib_assignments_assignments_Assignments_0_acc : forall a : creusotcontracts_std1_vec_vec (lib_assignments_assignedstate) . lib_assignments_assignments_Assignments_0 (Lib_Assignments_Assignments a : lib_assignments_assignments) = a
  type lib_formula_formula  = 
    | Lib_Formula_Formula (creusotcontracts_std1_vec_vec (lib_clause_clause)) usize
    
  function lib_formula_formula_Formula_num_vars (self : lib_formula_formula) : usize
  val lib_formula_formula_Formula_num_vars (self : lib_formula_formula) : usize
    ensures { result = lib_formula_formula_Formula_num_vars self }
    
  axiom lib_formula_formula_Formula_num_vars_acc : forall a : creusotcontracts_std1_vec_vec (lib_clause_clause), b : usize . lib_formula_formula_Formula_num_vars (Lib_Formula_Formula a b : lib_formula_formula) = b
  function lib_formula_formula_Formula_clauses (self : lib_formula_formula) : creusotcontracts_std1_vec_vec (lib_clause_clause)
    
  val lib_formula_formula_Formula_clauses (self : lib_formula_formula) : creusotcontracts_std1_vec_vec (lib_clause_clause)
    ensures { result = lib_formula_formula_Formula_clauses self }
    
  axiom lib_formula_formula_Formula_clauses_acc : forall a : creusotcontracts_std1_vec_vec (lib_clause_clause), b : usize . lib_formula_formula_Formula_clauses (Lib_Formula_Formula a b : lib_formula_formula) = a
  type creusotcontracts_logic_ghost_ghost 't = 
    | CreusotContracts_Logic_Ghost_Ghost opaque_ptr
    
end
module Core_Cmp_PartialEq_Eq_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val eq (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Eq
  type self   
  type rhs   
  use prelude.Prelude
  val eq (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Ne_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val ne (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Ne
  type self   
  type rhs   
  use prelude.Prelude
  val ne (self : self) (other : rhs) : bool
    requires {false}
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module Lib_Assignments_Impl0_Eq_Interface
  use prelude.Prelude
  use Type
  val eq (self : Type.lib_assignments_assignedstate) (other : Type.lib_assignments_assignedstate) : bool
end
module Lib_Assignments_Impl0_Eq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = (Type.lib_assignments_assignedstate, Type.lib_assignments_assignedstate)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_assignments_assignedstate
  let rec cfg eq (self : Type.lib_assignments_assignedstate) (other : Type.lib_assignments_assignedstate) : bool = 
  var _0 : bool;
  var self_1 : Type.lib_assignments_assignedstate;
  var other_2 : Type.lib_assignments_assignedstate;
  var _3 : ();
  var _4 : (Type.lib_assignments_assignedstate, Type.lib_assignments_assignedstate);
  var _5 : Type.lib_assignments_assignedstate;
  var _6 : Type.lib_assignments_assignedstate;
  var _7 : isize;
  var _8 : isize;
  var _9 : isize;
  var _10 : isize;
  {
    self_1 <- self;
    other_2 <- other;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _5 };
    _5 <- self_1;
    assume { Resolve0.resolve self_1 };
    assume { Resolve0.resolve _6 };
    _6 <- other_2;
    assume { Resolve0.resolve other_2 };
    _4 <- (_5, _6);
    switch (let (a, _) = _4 in a)
      | Type.Lib_Assignments_AssignedState_Unset -> goto BB1
      | Type.Lib_Assignments_AssignedState_Positive -> goto BB4
      | Type.Lib_Assignments_AssignedState_Negative -> goto BB6
      end
  }
  BB1 {
    assume { Resolve1.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Type.Lib_Assignments_AssignedState_Unset -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    goto BB8
  }
  BB3 {
    _0 <- false;
    goto BB11
  }
  BB4 {
    assume { Resolve1.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Type.Lib_Assignments_AssignedState_Positive -> goto BB5
      | _ -> goto BB3
      end
  }
  BB5 {
    goto BB9
  }
  BB6 {
    assume { Resolve1.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Type.Lib_Assignments_AssignedState_Negative -> goto BB7
      | _ -> goto BB3
      end
  }
  BB7 {
    goto BB10
  }
  BB8 {
    _0 <- true;
    goto BB11
  }
  BB9 {
    _0 <- true;
    goto BB11
  }
  BB10 {
    _0 <- true;
    goto BB11
  }
  BB11 {
    return _0
  }
  BB12 {
    assume { Resolve1.resolve _4 };
    goto BB3
  }
  
end
module Lib_Assignments_Impl0
  use Type
  clone Lib_Assignments_Impl0_Eq_Interface as Eq0
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Type.lib_assignments_assignedstate,
  type rhs = Type.lib_assignments_assignedstate, val eq = Eq0.eq
end
module Lib_Formula_Impl0_Eq_Interface
  use prelude.Prelude
  use Type
  val eq (self : Type.lib_formula_satstate) (other : Type.lib_formula_satstate) : bool
end
module Lib_Formula_Impl0_Eq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = (Type.lib_formula_satstate, Type.lib_formula_satstate)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_satstate
  let rec cfg eq (self : Type.lib_formula_satstate) (other : Type.lib_formula_satstate) : bool = 
  var _0 : bool;
  var self_1 : Type.lib_formula_satstate;
  var other_2 : Type.lib_formula_satstate;
  var _3 : ();
  var _4 : (Type.lib_formula_satstate, Type.lib_formula_satstate);
  var _5 : Type.lib_formula_satstate;
  var _6 : Type.lib_formula_satstate;
  var _7 : isize;
  var _8 : isize;
  var _9 : isize;
  var _10 : isize;
  {
    self_1 <- self;
    other_2 <- other;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _5 };
    _5 <- self_1;
    assume { Resolve0.resolve self_1 };
    assume { Resolve0.resolve _6 };
    _6 <- other_2;
    assume { Resolve0.resolve other_2 };
    _4 <- (_5, _6);
    switch (let (a, _) = _4 in a)
      | Type.Lib_Formula_SatState_Unknown -> goto BB1
      | Type.Lib_Formula_SatState_Sat -> goto BB4
      | Type.Lib_Formula_SatState_Unsat -> goto BB6
      end
  }
  BB1 {
    assume { Resolve1.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Type.Lib_Formula_SatState_Unknown -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    goto BB8
  }
  BB3 {
    _0 <- false;
    goto BB11
  }
  BB4 {
    assume { Resolve1.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Type.Lib_Formula_SatState_Sat -> goto BB5
      | _ -> goto BB3
      end
  }
  BB5 {
    goto BB9
  }
  BB6 {
    assume { Resolve1.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Type.Lib_Formula_SatState_Unsat -> goto BB7
      | _ -> goto BB3
      end
  }
  BB7 {
    goto BB10
  }
  BB8 {
    _0 <- true;
    goto BB11
  }
  BB9 {
    _0 <- true;
    goto BB11
  }
  BB10 {
    _0 <- true;
    goto BB11
  }
  BB11 {
    return _0
  }
  BB12 {
    assume { Resolve1.resolve _4 };
    goto BB3
  }
  
end
module Lib_Formula_Impl0
  use Type
  clone Lib_Formula_Impl0_Eq_Interface as Eq0
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Type.lib_formula_satstate,
  type rhs = Type.lib_formula_satstate, val eq = Eq0.eq
end
module Lib_SolverDpll_Main_Interface
  val main () : ()
end
module Lib_SolverDpll_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Core_Clone_Clone_Clone_Interface
  type self   
  use prelude.Prelude
  val clone' (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self   
  use prelude.Prelude
  val clone' (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self   
  use prelude.Prelude
  val clone_from (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self   
  use prelude.Prelude
  val clone_from (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Lib_Lit_Impl1_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' (self : Type.lib_lit_lit) : Type.lib_lit_lit
end
module Lib_Lit_Impl1_Clone
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_lit_lit
  let rec cfg clone' (self : Type.lib_lit_lit) : Type.lib_lit_lit = 
  var _0 : Type.lib_lit_lit;
  var self_1 : Type.lib_lit_lit;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- self_1;
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module Lib_Lit_Impl1
  use Type
  clone Lib_Lit_Impl1_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.lib_lit_lit, val clone' = Clone0.clone'
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module Lib_Clause_Impl0_ModelTy
  use seq.Seq
  use Type
  type modelTy  = 
    Seq.seq (Type.lib_lit_lit)
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module Lib_Clause_Impl0_Model_Interface
  use Type
  use seq.Seq
  function model (self : Type.lib_clause_clause) : Seq.seq (Type.lib_lit_lit)
end
module Lib_Clause_Impl0_Model
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_lit_lit
  function model (self : Type.lib_clause_clause) : Seq.seq (Type.lib_lit_lit) = 
    Model0.model (Type.lib_clause_clause_Clause_0 self)
end
module Lib_Clause_Impl0
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.lib_clause_clause,
  type modelTy = ModelTy0.modelTy
end
module Lib_Lit_Impl0_LitIn_Interface
  use Type
  predicate lit_in (self : Type.lib_lit_lit) (c : Type.lib_clause_clause)
end
module Lib_Lit_Impl0_LitIn
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate lit_in (self : Type.lib_lit_lit) (c : Type.lib_clause_clause) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) && Seq.get (Model0.model c) i = self
end
module Lib_Clause_SatClauseInner_Interface
  use seq.Seq
  use Type
  predicate sat_clause_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (c : Type.lib_clause_clause)
end
module Lib_Clause_SatClauseInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate sat_clause_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (c : Type.lib_clause_clause) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) && match (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) i)))) with
      | Type.Lib_Assignments_AssignedState_Positive -> Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) i)
      | Type.Lib_Assignments_AssignedState_Negative -> not (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) i))
      | Type.Lib_Assignments_AssignedState_Unset -> false
      end
end
module Lib_Clause_NotSatClauseInner_Interface
  use seq.Seq
  use Type
  predicate not_sat_clause_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (c : Type.lib_clause_clause)
end
module Lib_Clause_NotSatClauseInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate not_sat_clause_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (c : Type.lib_clause_clause) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model c) -> match (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) i)))) with
      | Type.Lib_Assignments_AssignedState_Positive -> not (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) i))
      | Type.Lib_Assignments_AssignedState_Negative -> Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) i)
      | Type.Lib_Assignments_AssignedState_Unset -> false
      end
end
module Lib_Clause_Impl1_VarsInRange_Interface
  use Type
  use mach.int.Int
  predicate vars_in_range (self : Type.lib_clause_clause) (n : int)
end
module Lib_Clause_Impl1_VarsInRange
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate vars_in_range (self : Type.lib_clause_clause) (n : int) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> 0 <= UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self) i)) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self) i)) < n
end
module Lib_Clause_UnitInner_Interface
  use seq.Seq
  use Type
  predicate unit_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (c : Type.lib_clause_clause)
end
module Lib_Clause_UnitInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone Lib_Clause_Impl0_Model_Interface as Model0
  clone Lib_Clause_SatClauseInner_Interface as SatClauseInner0
  clone Lib_Clause_Impl1_VarsInRange_Interface as VarsInRange0
  predicate unit_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (c : Type.lib_clause_clause) = 
    VarsInRange0.vars_in_range c (Seq.length a) && not (SatClauseInner0.sat_clause_inner a c) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) && Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) i))) = Type.Lib_Assignments_AssignedState_Unset && (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && j <> i -> not (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j))) = Type.Lib_Assignments_AssignedState_Unset)))
end
module Lib_Assignments_Impl1_ModelTy
  use seq.Seq
  use Type
  type modelTy  = 
    Seq.seq (Type.lib_assignments_assignedstate)
end
module Lib_Assignments_Impl1_Model_Interface
  use Type
  use seq.Seq
  function model (self : Type.lib_assignments_assignments) : Seq.seq (Type.lib_assignments_assignedstate)
end
module Lib_Assignments_Impl1_Model
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignedstate
  function model (self : Type.lib_assignments_assignments) : Seq.seq (Type.lib_assignments_assignedstate) = 
    Model0.model (Type.lib_assignments_assignments_Assignments_0 self)
end
module Lib_Assignments_Impl1
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl1_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.lib_assignments_assignments,
  type modelTy = ModelTy0.modelTy
end
module Lib_Clause_Impl1_Unit_Interface
  use Type
  predicate unit (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl1_Unit
  use Type
  clone Lib_Clause_UnitInner_Interface as UnitInner0
  clone Lib_Assignments_Impl1_Model_Interface as Model0
  predicate unit (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    UnitInner0.unit_inner (Model0.model a) self
end
module Lib_Clause_Impl1_Unsat_Interface
  use Type
  predicate unsat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl1_Unsat
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt64
  clone Lib_Assignments_Impl1_Model_Interface as Model1
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate unsat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> match (Seq.get (Model1.model a) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self) i)))) with
      | Type.Lib_Assignments_AssignedState_Positive -> not (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model self) i))
      | Type.Lib_Assignments_AssignedState_Negative -> Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model self) i)
      | Type.Lib_Assignments_AssignedState_Unset -> false
      end
end
module Lib_Clause_Impl1_Sat_Interface
  use Type
  predicate sat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl1_Sat
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt64
  clone Lib_Assignments_Impl1_Model_Interface as Model1
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate sat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model self) && match (Seq.get (Model1.model a) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self) i)))) with
      | Type.Lib_Assignments_AssignedState_Positive -> Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model self) i)
      | Type.Lib_Assignments_AssignedState_Negative -> not (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model self) i))
      | Type.Lib_Assignments_AssignedState_Unset -> false
      end
end
module Lib_Clause_Impl1_Unknown_Interface
  use Type
  predicate unknown (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl1_Unknown
  use Type
  clone Lib_Clause_Impl1_Unsat_Interface as Unsat0
  clone Lib_Clause_Impl1_Sat_Interface as Sat0
  predicate unknown (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    not (Sat0.sat self a) && not (Unsat0.unsat self a)
end
module Lib_Clause_Impl1_NoDuplicateIndexes_Interface
  use Type
  predicate no_duplicate_indexes (self : Type.lib_clause_clause)
end
module Lib_Clause_Impl1_NoDuplicateIndexes
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate no_duplicate_indexes (self : Type.lib_clause_clause) = 
    forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && k < j -> not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self) k)) = UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self) j)))
end
module Lib_Clause_Impl1_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.lib_clause_clause) (n : int)
end
module Lib_Clause_Impl1_Invariant
  use Type
  use mach.int.Int
  clone Lib_Clause_Impl1_NoDuplicateIndexes_Interface as NoDuplicateIndexes0
  clone Lib_Clause_Impl1_VarsInRange_Interface as VarsInRange0
  predicate invariant' (self : Type.lib_clause_clause) (n : int) = 
    VarsInRange0.vars_in_range self n && NoDuplicateIndexes0.no_duplicate_indexes self
end
module Lib_Assignments_Impl2_Invariant_Interface
  use Type
  predicate invariant' (self : Type.lib_assignments_assignments) (f : Type.lib_formula_formula)
end
module Lib_Assignments_Impl2_Invariant
  use Type
  use mach.int.UInt64
  use seq.Seq
  clone Lib_Assignments_Impl1_Model_Interface as Model0
  predicate invariant' (self : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) = 
    UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length (Model0.model self)
end
module Lib_Formula_Impl1_Invariant_Interface
  use Type
  predicate invariant' (self : Type.lib_formula_formula)
end
module Lib_Formula_Impl1_Invariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Lib_Clause_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate invariant' (self : Type.lib_formula_formula) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self)) -> Invariant0.invariant' (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self)) i) (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars self))
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index = Index0.index
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module Lib_Clause_Impl2_CheckIfUnit_Interface
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Lib_Clause_Impl1_Unit_Interface as Unit0
  clone Lib_Clause_Impl1_Invariant_Interface as Invariant2
  clone Lib_Assignments_Impl1_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl2_Invariant_Interface as Invariant0
  val check_if_unit (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) : bool
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {Invariant2.invariant' self (Seq.length (Model0.model a))}
    ensures { result -> Unit0.unit self a }
    
end
module Lib_Clause_Impl2_CheckIfUnit
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model3 with function Model0.model = Model6.model
  clone Lib_Assignments_Impl2_Invariant as Invariant0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model2 with function Model0.model = Model5.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model2.model
  clone Lib_Clause_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, function Model0.model = Model2.model
  clone Lib_Clause_Impl1_Unit as Unit0 with function Model0.model = Model3.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Assignments_Impl1_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone Lib_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve9 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = bool
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.lib_assignments_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy3 with type t = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate),
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = Type.lib_assignments_assignedstate,
  function Model0.model = Model8.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.lib_lit_lit,
  function Model0.model = Model7.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_lit_lit,
  function Model0.model = Model7.model
  let rec cfg check_if_unit (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) : bool
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {Invariant2.invariant' self (Seq.length (Model1.model a))}
    ensures { result -> Unit0.unit self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.lib_clause_clause;
  var a_2 : Type.lib_assignments_assignments;
  var f_3 : Type.lib_formula_formula;
  var i_4 : usize;
  var unassigned_5 : usize;
  var k_6 : usize;
  var _7 : ();
  var _8 : ();
  var _9 : bool;
  var _10 : usize;
  var _11 : usize;
  var _12 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var lit_13 : Type.lib_lit_lit;
  var _14 : Type.lib_lit_lit;
  var _15 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _16 : usize;
  var res_17 : Type.lib_assignments_assignedstate;
  var _18 : Type.lib_assignments_assignedstate;
  var _19 : Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate);
  var _20 : usize;
  var _21 : ();
  var _22 : isize;
  var _23 : bool;
  var _24 : ();
  var _25 : ();
  var _26 : bool;
  var _27 : bool;
  var _28 : ();
  var _29 : ();
  var _30 : ();
  var _31 : bool;
  var _32 : usize;
  var _33 : ();
  var _34 : usize;
  var _35 : ();
  var _36 : ();
  var _37 : ();
  var _38 : bool;
  var _39 : usize;
  var _40 : ();
  var _41 : ();
  var _42 : ();
  var _43 : ();
  {
    self_1 <- self;
    a_2 <- a;
    f_3 <- f;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve f_3 };
    i_4 <- (0 : usize);
    unassigned_5 <- (0 : usize);
    k_6 <- (0 : usize);
    assume { Resolve1.resolve k_6 };
    goto BB1
  }
  BB1 {
    invariant loop_invariant { 0 <= UInt64.to_int i_4 && UInt64.to_int i_4 <= Seq.length (Model0.model self_1) };
    invariant unass { UInt64.to_int unassigned_5 < 2 };
    invariant k_is_unass { UInt64.to_int unassigned_5 = 0 || Seq.get (Model1.model a_2) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self_1) (UInt64.to_int k_6)))) = Type.Lib_Assignments_AssignedState_Unset };
    invariant kk { UInt64.to_int unassigned_5 > 0 -> Seq.get (Model1.model a_2) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self_1) (UInt64.to_int k_6)))) = Type.Lib_Assignments_AssignedState_Unset };
    invariant not_sat { forall j : (int) . 0 <= j && j < UInt64.to_int i_4 -> match (Seq.get (Model1.model a_2) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self_1) j)))) with
      | Type.Lib_Assignments_AssignedState_Positive -> not (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model self_1) j))
      | Type.Lib_Assignments_AssignedState_Negative -> Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model self_1) j)
      | Type.Lib_Assignments_AssignedState_Unset -> UInt64.to_int unassigned_5 = 1
      end };
    invariant k_in_bounds { UInt64.to_int unassigned_5 = 0 || 0 <= UInt64.to_int k_6 && UInt64.to_int k_6 < Seq.length (Model0.model self_1) };
    invariant k_only { UInt64.to_int unassigned_5 = 1 -> (forall j : (int) . 0 <= j && j < UInt64.to_int i_4 && j <> UInt64.to_int k_6 -> not (Seq.get (Model1.model a_2) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self_1) j))) = Type.Lib_Assignments_AssignedState_Unset)) };
    invariant k_unset { UInt64.to_int unassigned_5 = 0 -> UInt64.to_int k_6 = 0 };
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _10 };
    _10 <- i_4;
    _12 <- Type.lib_clause_clause_Clause_0 self_1;
    _11 <- Len0.len _12;
    goto BB3
  }
  BB3 {
    _9 <- _10 < _11;
    switch (_9)
      | False -> goto BB20
      | _ -> goto BB4
      end
  }
  BB4 {
    _15 <- Type.lib_clause_clause_Clause_0 self_1;
    assume { Resolve1.resolve _16 };
    _16 <- i_4;
    _14 <- Index0.index _15 _16;
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve lit_13 };
    lit_13 <- _14;
    assume { Resolve3.resolve _14 };
    _19 <- Type.lib_assignments_assignments_Assignments_0 a_2;
    assume { Resolve1.resolve _20 };
    _20 <- Type.lib_lit_lit_Lit_idx lit_13;
    _18 <- Index1.index _19 _20;
    goto BB6
  }
  BB6 {
    assume { Resolve4.resolve res_17 };
    res_17 <- _18;
    assume { Resolve5.resolve _18 };
    assume { Resolve4.resolve res_17 };
    switch (res_17)
      | Type.Lib_Assignments_AssignedState_Unset -> goto BB7
      | Type.Lib_Assignments_AssignedState_Positive -> goto BB8
      | Type.Lib_Assignments_AssignedState_Negative -> goto BB9
      end
  }
  BB7 {
    assume { Resolve2.resolve lit_13 };
    assume { Resolve1.resolve _32 };
    _32 <- unassigned_5;
    _31 <- _32 >= (1 : usize);
    switch (_31)
      | False -> goto BB18
      | _ -> goto BB17
      end
  }
  BB8 {
    goto BB11
  }
  BB9 {
    goto BB14
  }
  BB10 {
    assume { Resolve6.resolve self_1 };
    assume { Resolve7.resolve a_2 };
    assume { Resolve1.resolve i_4 };
    assume { Resolve1.resolve unassigned_5 };
    assume { Resolve2.resolve lit_13 };
    absurd
  }
  BB11 {
    assume { Resolve8.resolve _23 };
    _23 <- Type.lib_lit_lit_Lit_polarity lit_13;
    assume { Resolve2.resolve lit_13 };
    switch (_23)
      | False -> goto BB13
      | _ -> goto BB12
      end
  }
  BB12 {
    assume { Resolve6.resolve self_1 };
    assume { Resolve7.resolve a_2 };
    assume { Resolve1.resolve i_4 };
    assume { Resolve1.resolve unassigned_5 };
    assert { SatClauseInner0.sat_clause_inner (Model1.model a_2) self_1 };
    _25 <- ();
    assume { Resolve9.resolve _25 };
    _0 <- false;
    goto BB24
  }
  BB13 {
    _21 <- ();
    assume { Resolve9.resolve _21 };
    goto BB19
  }
  BB14 {
    assume { Resolve8.resolve _27 };
    _27 <- Type.lib_lit_lit_Lit_polarity lit_13;
    assume { Resolve2.resolve lit_13 };
    _26 <- not _27;
    switch (_26)
      | False -> goto BB16
      | _ -> goto BB15
      end
  }
  BB15 {
    assume { Resolve6.resolve self_1 };
    assume { Resolve7.resolve a_2 };
    assume { Resolve1.resolve i_4 };
    assume { Resolve1.resolve unassigned_5 };
    assert { SatClauseInner0.sat_clause_inner (Model1.model a_2) self_1 };
    _29 <- ();
    assume { Resolve9.resolve _29 };
    _0 <- false;
    goto BB24
  }
  BB16 {
    _21 <- ();
    assume { Resolve9.resolve _21 };
    goto BB19
  }
  BB17 {
    assume { Resolve6.resolve self_1 };
    assume { Resolve7.resolve a_2 };
    assume { Resolve1.resolve i_4 };
    assume { Resolve1.resolve unassigned_5 };
    _0 <- false;
    goto BB24
  }
  BB18 {
    _30 <- ();
    assume { Resolve9.resolve _30 };
    assume { Resolve1.resolve _34 };
    _34 <- i_4;
    assume { Resolve1.resolve k_6 };
    k_6 <- _34;
    unassigned_5 <- unassigned_5 + (1 : usize);
    _21 <- ();
    assume { Resolve9.resolve _21 };
    goto BB19
  }
  BB19 {
    i_4 <- i_4 + (1 : usize);
    _8 <- ();
    assume { Resolve9.resolve _8 };
    goto BB1
  }
  BB20 {
    assume { Resolve6.resolve self_1 };
    assume { Resolve7.resolve a_2 };
    assume { Resolve1.resolve i_4 };
    _7 <- ();
    assume { Resolve9.resolve _7 };
    assume { Resolve1.resolve _39 };
    _39 <- unassigned_5;
    assume { Resolve1.resolve unassigned_5 };
    _38 <- _39 = (1 : usize);
    switch (_38)
      | False -> goto BB22
      | _ -> goto BB21
      end
  }
  BB21 {
    assert { not (SatClauseInner0.sat_clause_inner (Model1.model a_2) self_1) };
    _40 <- ();
    assume { Resolve9.resolve _40 };
    assert { Seq.get (Model1.model a_2) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self_1) (UInt64.to_int k_6)))) = Type.Lib_Assignments_AssignedState_Unset };
    _41 <- ();
    assume { Resolve9.resolve _41 };
    assert { 0 <= UInt64.to_int k_6 && UInt64.to_int k_6 < Seq.length (Model0.model self_1) && Seq.get (Model1.model a_2) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self_1) (UInt64.to_int k_6)))) = Type.Lib_Assignments_AssignedState_Unset };
    _42 <- ();
    assume { Resolve9.resolve _42 };
    assert { 0 <= UInt64.to_int k_6 && UInt64.to_int k_6 < Seq.length (Model0.model self_1) && Seq.get (Model1.model a_2) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self_1) (UInt64.to_int k_6)))) = Type.Lib_Assignments_AssignedState_Unset && (forall j : (int) . 0 <= j && j < Seq.length (Model0.model self_1) && j <> UInt64.to_int k_6 -> not (Seq.get (Model1.model a_2) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self_1) j))) = Type.Lib_Assignments_AssignedState_Unset)) };
    _43 <- ();
    assume { Resolve9.resolve _43 };
    _0 <- true;
    goto BB23
  }
  BB22 {
    _0 <- false;
    goto BB23
  }
  BB23 {
    goto BB25
  }
  BB24 {
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
module Lib_Clause_Impl2_GetUnit_Interface
  use mach.int.UInt64
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone Lib_Clause_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone Lib_Assignments_Impl1_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Lib_Clause_Impl1_Unit_Interface as Unit0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl2_Invariant_Interface as Invariant0
  val get_unit (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) : Type.lib_lit_lit
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {Unit0.unit self a}
    ensures { Seq.get (Model0.model a) (UInt64.to_int (Type.lib_lit_lit_Lit_idx result)) = Type.Lib_Assignments_AssignedState_Unset }
    ensures { UInt64.to_int (Type.lib_lit_lit_Lit_idx result) < Seq.length (Model0.model a) }
    ensures { exists j : (int) . 0 <= j && j < Seq.length (Model1.model self) && Seq.get (Model1.model self) j = result }
    
end
module Lib_Clause_Impl2_GetUnit
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model3 with function Model0.model = Model6.model
  clone Lib_Assignments_Impl2_Invariant as Invariant0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model2 with function Model0.model = Model5.model
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model2.model
  clone Lib_Clause_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, function Model0.model = Model2.model
  clone Lib_Clause_Impl1_Unit as Unit0 with function Model0.model = Model3.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Assignments_Impl1_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone Lib_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.lib_assignments_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy3 with type t = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate),
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = Type.lib_assignments_assignedstate,
  function Model0.model = Model8.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.lib_lit_lit,
  function Model0.model = Model7.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_lit_lit,
  function Model0.model = Model7.model
  let rec cfg get_unit (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) : Type.lib_lit_lit
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {Unit0.unit self a}
    ensures { Seq.get (Model1.model a) (UInt64.to_int (Type.lib_lit_lit_Lit_idx result)) = Type.Lib_Assignments_AssignedState_Unset }
    ensures { UInt64.to_int (Type.lib_lit_lit_Lit_idx result) < Seq.length (Model1.model a) }
    ensures { exists j : (int) . 0 <= j && j < Seq.length (Model0.model self) && Seq.get (Model0.model self) j = result }
    
   = 
  var _0 : Type.lib_lit_lit;
  var self_1 : Type.lib_clause_clause;
  var a_2 : Type.lib_assignments_assignments;
  var f_3 : Type.lib_formula_formula;
  var _4 : ();
  var i_5 : usize;
  var _6 : ();
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var lit_12 : Type.lib_lit_lit;
  var _13 : Type.lib_lit_lit;
  var _14 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _15 : usize;
  var res_16 : Type.lib_assignments_assignedstate;
  var _17 : Type.lib_assignments_assignedstate;
  var _18 : Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate);
  var _19 : usize;
  var _20 : ();
  var _21 : isize;
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : ();
  var _26 : ();
  var _27 : ();
  {
    self_1 <- self;
    a_2 <- a;
    f_3 <- f;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve f_3 };
    i_5 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant loop_invariant { 0 <= UInt64.to_int i_5 && UInt64.to_int i_5 <= Seq.length (Model0.model self_1) };
    invariant not_unset { forall j : (int) . 0 <= j && j < UInt64.to_int i_5 -> not (Seq.get (Model1.model a_2) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self_1) j))) = Type.Lib_Assignments_AssignedState_Unset) };
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _9 };
    _9 <- i_5;
    _11 <- Type.lib_clause_clause_Clause_0 self_1;
    _10 <- Len0.len _11;
    goto BB3
  }
  BB3 {
    _8 <- _9 < _10;
    switch (_8)
      | False -> goto BB14
      | _ -> goto BB4
      end
  }
  BB4 {
    _14 <- Type.lib_clause_clause_Clause_0 self_1;
    assume { Resolve1.resolve _15 };
    _15 <- i_5;
    _13 <- Index0.index _14 _15;
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve lit_12 };
    lit_12 <- _13;
    assume { Resolve3.resolve _13 };
    _18 <- Type.lib_assignments_assignments_Assignments_0 a_2;
    assume { Resolve1.resolve _19 };
    _19 <- Type.lib_lit_lit_Lit_idx lit_12;
    _17 <- Index1.index _18 _19;
    goto BB6
  }
  BB6 {
    assume { Resolve4.resolve res_16 };
    res_16 <- _17;
    assume { Resolve5.resolve _17 };
    assume { Resolve4.resolve res_16 };
    switch (res_16)
      | Type.Lib_Assignments_AssignedState_Unset -> goto BB7
      | Type.Lib_Assignments_AssignedState_Positive -> goto BB8
      | Type.Lib_Assignments_AssignedState_Negative -> goto BB9
      end
  }
  BB7 {
    assume { Resolve6.resolve self_1 };
    assume { Resolve7.resolve a_2 };
    assume { Resolve1.resolve i_5 };
    assume { Resolve2.resolve _0 };
    _0 <- lit_12;
    assume { Resolve2.resolve lit_12 };
    return _0
  }
  BB8 {
    assume { Resolve2.resolve lit_12 };
    goto BB11
  }
  BB9 {
    assume { Resolve2.resolve lit_12 };
    goto BB12
  }
  BB10 {
    assume { Resolve6.resolve self_1 };
    assume { Resolve7.resolve a_2 };
    assume { Resolve1.resolve i_5 };
    assume { Resolve2.resolve lit_12 };
    absurd
  }
  BB11 {
    _20 <- ();
    assume { Resolve8.resolve _20 };
    goto BB13
  }
  BB12 {
    _20 <- ();
    assume { Resolve8.resolve _20 };
    goto BB13
  }
  BB13 {
    i_5 <- i_5 + (1 : usize);
    _7 <- ();
    assume { Resolve8.resolve _7 };
    goto BB1
  }
  BB14 {
    assume { Resolve6.resolve self_1 };
    assume { Resolve7.resolve a_2 };
    assume { Resolve1.resolve i_5 };
    _6 <- ();
    assume { Resolve8.resolve _6 };
    absurd
  }
  
end
module Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface
  type self   
  use prelude.Prelude
  val assert_receiver_is_total_eq (self : self) : ()
    requires {false}
    
end
module Core_Cmp_Eq_AssertReceiverIsTotalEq
  type self   
  use prelude.Prelude
  val assert_receiver_is_total_eq (self : self) : ()
    requires {false}
    
end
module Lib_Assignments_Impl6_AssertReceiverIsTotalEq_Interface
  use prelude.Prelude
  use Type
  val assert_receiver_is_total_eq (self : Type.lib_assignments_assignedstate) : ()
end
module Lib_Assignments_Impl6_AssertReceiverIsTotalEq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_assignments_assignedstate
  let rec cfg assert_receiver_is_total_eq (self : Type.lib_assignments_assignedstate) : () = 
  var _0 : ();
  var self_1 : Type.lib_assignments_assignedstate;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Lib_Assignments_Impl6
  use Type
  clone Lib_Assignments_Impl6_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Type.lib_assignments_assignedstate,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Lib_Assignments_AssignmentsEquality_Interface
  use Type
  predicate assignments_equality (a : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments)
end
module Lib_Assignments_AssignmentsEquality
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone Lib_Assignments_Impl1_Model_Interface as Model0
  predicate assignments_equality (a : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments) = 
    Seq.length (Model0.model a) = Seq.length (Model0.model a2) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model a) -> Seq.get (Model0.model a) i = Seq.get (Model0.model a2) i)
end
module Lib_Assignments_CompatibleInner_Interface
  use seq.Seq
  use Type
  predicate compatible_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (a2 : Seq.seq (Type.lib_assignments_assignedstate))
    
end
module Lib_Assignments_CompatibleInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  predicate compatible_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (a2 : Seq.seq (Type.lib_assignments_assignedstate))
    
   = 
    Seq.length a = Seq.length a2 && (forall i : (int) . 0 <= i && i < Seq.length a -> Seq.get a i = Type.Lib_Assignments_AssignedState_Unset || Seq.get a i = Seq.get a2 i)
end
module Lib_Assignments_CompleteInner_Interface
  use seq.Seq
  use Type
  predicate complete_inner (a : Seq.seq (Type.lib_assignments_assignedstate))
end
module Lib_Assignments_CompleteInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  predicate complete_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) = 
    forall i : (int) . 0 <= i && i < Seq.length a -> not (Seq.get a i = Type.Lib_Assignments_AssignedState_Unset)
end
module Lib_Assignments_CompatibleCompleteInner_Interface
  use seq.Seq
  use Type
  predicate compatible_complete_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (a2 : Seq.seq (Type.lib_assignments_assignedstate))
    
end
module Lib_Assignments_CompatibleCompleteInner
  use seq.Seq
  use Type
  clone Lib_Assignments_CompleteInner_Interface as CompleteInner0
  clone Lib_Assignments_CompatibleInner_Interface as CompatibleInner0
  predicate compatible_complete_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (a2 : Seq.seq (Type.lib_assignments_assignedstate))
    
   = 
    CompatibleInner0.compatible_inner a a2 && CompleteInner0.complete_inner a2
end
module Lib_Assignments_AssignmentsInvariant_Interface
  use seq.Seq
  use Type
  predicate assignments_invariant (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula)
end
module Lib_Assignments_AssignmentsInvariant
  use seq.Seq
  use Type
  use mach.int.UInt64
  predicate assignments_invariant (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula) = 
    UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length a
end
module Lib_Assignments_Impl2_Compatible_Interface
  use Type
  predicate compatible (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments)
end
module Lib_Assignments_Impl2_Compatible
  use Type
  clone Lib_Assignments_CompatibleInner_Interface as CompatibleInner0
  clone Lib_Assignments_Impl1_Model_Interface as Model0
  predicate compatible (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments) = 
    CompatibleInner0.compatible_inner (Model0.model self) (Model0.model a2)
end
module Lib_Assignments_Impl2_Complete_Interface
  use Type
  predicate complete (self : Type.lib_assignments_assignments)
end
module Lib_Assignments_Impl2_Complete
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Lib_Assignments_Impl1_Model_Interface as Model0
  predicate complete (self : Type.lib_assignments_assignments) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> not (Seq.get (Model0.model self) i = Type.Lib_Assignments_AssignedState_Unset)
end
module Lib_Assignments_Impl2_CompatibleComplete_Interface
  use Type
  predicate compatible_complete (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments)
end
module Lib_Assignments_Impl2_CompatibleComplete
  use Type
  clone Lib_Assignments_Impl2_Complete_Interface as Complete0
  clone Lib_Assignments_Impl2_Compatible_Interface as Compatible0
  predicate compatible_complete (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments) = 
    Compatible0.compatible self a2 && Complete0.complete a2
end
module Lib_Formula_NotSatFormulaInner_Interface
  use seq.Seq
  use Type
  predicate not_sat_formula_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula)
end
module Lib_Formula_NotSatFormulaInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone Lib_Clause_NotSatClauseInner_Interface as NotSatClauseInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate not_sat_formula_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) && NotSatClauseInner0.not_sat_clause_inner a (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i)
end
module Lib_Formula_SatFormulaInner_Interface
  use seq.Seq
  use Type
  predicate sat_formula_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula)
end
module Lib_Formula_SatFormulaInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone Lib_Clause_SatClauseInner_Interface as SatClauseInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate sat_formula_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) -> SatClauseInner0.sat_clause_inner a (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i)
end
module Lib_Formula_EventuallySatCompleteFormulaInner_Interface
  use seq.Seq
  use Type
  predicate eventually_sat_complete_formula_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula)
    
end
module Lib_Formula_EventuallySatCompleteFormulaInner
  use seq.Seq
  use Type
  use mach.int.UInt64
  clone Lib_Formula_SatFormulaInner_Interface as SatFormulaInner0
  clone Lib_Assignments_CompatibleCompleteInner_Interface as CompatibleCompleteInner0
  predicate eventually_sat_complete_formula_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula)
    
   = 
    exists a2 : (Seq.seq (Type.lib_assignments_assignedstate)) . Seq.length a2 = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) && CompatibleCompleteInner0.compatible_complete_inner a a2 && SatFormulaInner0.sat_formula_inner a2 f
end
module Lib_Assignments_LemmaNotSatFormulaImpliesUnsatFormula_Interface
  use Type
  use seq.Seq
  clone Lib_Formula_EventuallySatCompleteFormulaInner_Interface as EventuallySatCompleteFormulaInner0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Formula_NotSatFormulaInner_Interface as NotSatFormulaInner0
  function lemma_not_sat_formula_implies_unsat_formula (f : Type.lib_formula_formula) (a : Seq.seq (Type.lib_assignments_assignedstate)) : ()
    
end
module Lib_Assignments_LemmaNotSatFormulaImpliesUnsatFormula
  use Type
  use seq.Seq
  clone Lib_Formula_EventuallySatCompleteFormulaInner_Interface as EventuallySatCompleteFormulaInner0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Formula_NotSatFormulaInner_Interface as NotSatFormulaInner0
  function lemma_not_sat_formula_implies_unsat_formula (f : Type.lib_formula_formula) (a : Seq.seq (Type.lib_assignments_assignedstate)) : ()
    
   = 
    ()
  axiom lemma_not_sat_formula_implies_unsat_formula_spec : forall f : Type.lib_formula_formula, a : Seq.seq (Type.lib_assignments_assignedstate) . NotSatFormulaInner0.not_sat_formula_inner a f -> AssignmentsInvariant0.assignments_invariant a f -> Invariant0.invariant' f -> not (EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner a f)
end
module Lib_Assignments_LemmaNotSatFormulaImpliesUnsatFormula_Impl
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_Invariant as Invariant1 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Clause_NotSatClauseInner as NotSatClauseInner0 with function Model0.model = Model1.model
  clone Lib_Assignments_CompleteInner as CompleteInner0
  clone Lib_Assignments_CompatibleInner as CompatibleInner0
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Assignments_AssignmentsInvariant as AssignmentsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_SatFormulaInner as SatFormulaInner0 with function Model0.model = Model0.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner
  clone Lib_Formula_EventuallySatCompleteFormulaInner as EventuallySatCompleteFormulaInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatFormulaInner0.sat_formula_inner = SatFormulaInner0.sat_formula_inner
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Lib_Formula_NotSatFormulaInner as NotSatFormulaInner0 with function Model0.model = Model0.model,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner
  let rec ghost function lemma_not_sat_formula_implies_unsat_formula (f : Type.lib_formula_formula) (a : Seq.seq (Type.lib_assignments_assignedstate)) : ()
    requires {NotSatFormulaInner0.not_sat_formula_inner a f}
    requires {AssignmentsInvariant0.assignments_invariant a f}
    requires {Invariant0.invariant' f}
    ensures { not (EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner a f) }
    
   = 
    ()
end
module Lib_Formula_ClauseInFormula_Interface
  use Type
  predicate clause_in_formula (c : Type.lib_clause_clause) (f : Type.lib_formula_formula)
end
module Lib_Formula_ClauseInFormula
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate clause_in_formula (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) && Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i = c
end
module Lib_Assignments_LemmaNotSatClauseImpliesUnsatFormula_Interface
  use Type
  use seq.Seq
  clone Lib_Formula_NotSatFormulaInner_Interface as NotSatFormulaInner0
  clone Lib_Clause_NotSatClauseInner_Interface as NotSatClauseInner0
  clone Lib_Formula_ClauseInFormula_Interface as ClauseInFormula0
  function lemma_not_sat_clause_implies_unsat_formula (f : Type.lib_formula_formula) (c : Type.lib_clause_clause) (a : Seq.seq (Type.lib_assignments_assignedstate)) : ()
    
end
module Lib_Assignments_LemmaNotSatClauseImpliesUnsatFormula
  use Type
  use seq.Seq
  clone Lib_Formula_NotSatFormulaInner_Interface as NotSatFormulaInner0
  clone Lib_Clause_NotSatClauseInner_Interface as NotSatClauseInner0
  clone Lib_Formula_ClauseInFormula_Interface as ClauseInFormula0
  function lemma_not_sat_clause_implies_unsat_formula (f : Type.lib_formula_formula) (c : Type.lib_clause_clause) (a : Seq.seq (Type.lib_assignments_assignedstate)) : ()
    
   = 
    ()
  axiom lemma_not_sat_clause_implies_unsat_formula_spec : forall f : Type.lib_formula_formula, c : Type.lib_clause_clause, a : Seq.seq (Type.lib_assignments_assignedstate) . ClauseInFormula0.clause_in_formula c f -> NotSatClauseInner0.not_sat_clause_inner a c -> NotSatFormulaInner0.not_sat_formula_inner a f
end
module Lib_Assignments_LemmaNotSatClauseImpliesUnsatFormula_Impl
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Clause_NotSatClauseInner as NotSatClauseInner0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_NotSatFormulaInner as NotSatFormulaInner0 with function Model0.model = Model0.model,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner
  clone Lib_Formula_ClauseInFormula as ClauseInFormula0 with function Model0.model = Model0.model
  let rec ghost function lemma_not_sat_clause_implies_unsat_formula (f : Type.lib_formula_formula) (c : Type.lib_clause_clause) (a : Seq.seq (Type.lib_assignments_assignedstate)) : ()
    requires {ClauseInFormula0.clause_in_formula c f}
    requires {NotSatClauseInner0.not_sat_clause_inner a c}
    ensures { NotSatFormulaInner0.not_sat_formula_inner a f }
    
   = 
    ()
end
module Lib_Assignments_FlipV_Interface
  use Type
  function flip_v (v : Type.lib_assignments_assignedstate) : Type.lib_assignments_assignedstate
end
module Lib_Assignments_FlipV
  use Type
  function flip_v (v : Type.lib_assignments_assignedstate) : Type.lib_assignments_assignedstate = 
    match (v) with
      | Type.Lib_Assignments_AssignedState_Unset -> Type.Lib_Assignments_AssignedState_Unset
      | Type.Lib_Assignments_AssignedState_Positive -> Type.Lib_Assignments_AssignedState_Negative
      | Type.Lib_Assignments_AssignedState_Negative -> Type.Lib_Assignments_AssignedState_Positive
      end
end
module Lib_Assignments_LemmaUnitForces_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Formula_EventuallySatCompleteFormulaInner_Interface as EventuallySatCompleteFormulaInner0
  clone Lib_Assignments_FlipV_Interface as FlipV0
  function lemma_unit_forces (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    
end
module Lib_Assignments_LemmaUnitForces
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Formula_EventuallySatCompleteFormulaInner_Interface as EventuallySatCompleteFormulaInner0
  clone Lib_Assignments_FlipV_Interface as FlipV0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Formula_NotSatFormulaInner_Interface as NotSatFormulaInner0
  clone Lib_Assignments_LemmaNotSatFormulaImpliesUnsatFormula_Interface as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate NotSatFormulaInner0.not_sat_formula_inner = NotSatFormulaInner0.not_sat_formula_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner = EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner,
  axiom .
  function lemma_unit_forces (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    
   = 
    let _ = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula f a in ()
  axiom lemma_unit_forces_spec : forall c : Type.lib_clause_clause, f : Type.lib_formula_formula, a : Seq.seq (Type.lib_assignments_assignedstate), ix : int, v : Type.lib_assignments_assignedstate . not (EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner (Seq.set a ix (FlipV0.flip_v v)) f) -> EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner a f -> v = Type.Lib_Assignments_AssignedState_Positive || v = Type.Lib_Assignments_AssignedState_Negative -> 0 <= ix && ix < Seq.length a && Seq.get a ix = Type.Lib_Assignments_AssignedState_Unset -> UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length a -> Invariant0.invariant' f -> EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner (Seq.set a ix v) f
end
module Lib_Assignments_LemmaUnitForces_Impl
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Clause_NotSatClauseInner as NotSatClauseInner0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_Invariant as Invariant1 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model1.model
  clone Lib_Assignments_CompleteInner as CompleteInner0
  clone Lib_Assignments_CompatibleInner as CompatibleInner0
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Assignments_AssignmentsInvariant as AssignmentsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_NotSatFormulaInner as NotSatFormulaInner0 with function Model0.model = Model0.model,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner
  clone Lib_Formula_SatFormulaInner as SatFormulaInner0 with function Model0.model = Model0.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner
  clone Lib_Formula_EventuallySatCompleteFormulaInner as EventuallySatCompleteFormulaInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatFormulaInner0.sat_formula_inner = SatFormulaInner0.sat_formula_inner
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Lib_Assignments_LemmaNotSatFormulaImpliesUnsatFormula as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate NotSatFormulaInner0.not_sat_formula_inner = NotSatFormulaInner0.not_sat_formula_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner = EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner,
  axiom .
  clone Lib_Assignments_FlipV as FlipV0
  let rec ghost function lemma_unit_forces (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    requires {not (EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner (Seq.set a ix (FlipV0.flip_v v)) f)}
    requires {EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner a f}
    requires {v = Type.Lib_Assignments_AssignedState_Positive || v = Type.Lib_Assignments_AssignedState_Negative}
    requires {0 <= ix && ix < Seq.length a && Seq.get a ix = Type.Lib_Assignments_AssignedState_Unset}
    requires {UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length a}
    requires {Invariant0.invariant' f}
    ensures { EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner (Seq.set a ix v) f }
    
   = 
    let _ = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula f a in ()
end
module Lib_Logic_BoolToAssignedstate_Interface
  use Type
  function bool_to_assignedstate (b : bool) : Type.lib_assignments_assignedstate
end
module Lib_Logic_BoolToAssignedstate
  use Type
  function bool_to_assignedstate (b : bool) : Type.lib_assignments_assignedstate = 
    if b then Type.Lib_Assignments_AssignedState_Positive else Type.Lib_Assignments_AssignedState_Negative
  axiom bool_to_assignedstate_spec : forall b : bool . (b -> bool_to_assignedstate b = Type.Lib_Assignments_AssignedState_Positive) && (not b -> bool_to_assignedstate b = Type.Lib_Assignments_AssignedState_Negative)
end
module Lib_Logic_BoolToAssignedstate_Impl
  use Type
  let rec ghost function bool_to_assignedstate (b : bool) : Type.lib_assignments_assignedstate
    ensures { not b -> result = Type.Lib_Assignments_AssignedState_Negative }
    ensures { b -> result = Type.Lib_Assignments_AssignedState_Positive }
    
   = 
    if b then Type.Lib_Assignments_AssignedState_Positive else Type.Lib_Assignments_AssignedState_Negative
end
module Lib_Assignments_LemmaCorrectPolarityMakesClauseSat_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone Lib_Clause_SatClauseInner_Interface as SatClauseInner0
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Clause_Impl0_Model_Interface as Model0
  function lemma_correctPolarityMakesClauseSat (c : Type.lib_clause_clause) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    
end
module Lib_Assignments_LemmaCorrectPolarityMakesClauseSat
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone Lib_Clause_SatClauseInner_Interface as SatClauseInner0
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Clause_Impl0_Model_Interface as Model0
  function lemma_correctPolarityMakesClauseSat (c : Type.lib_clause_clause) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    
   = 
    ()
  axiom lemma_correctPolarityMakesClauseSat_spec : forall c : Type.lib_clause_clause, a : Seq.seq (Type.lib_assignments_assignedstate), ix : int, v : Type.lib_assignments_assignedstate . (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v) -> 0 <= ix && ix < Seq.length a -> SatClauseInner0.sat_clause_inner (Seq.set a ix v) c
end
module Lib_Assignments_LemmaCorrectPolarityMakesClauseSat_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone Lib_Logic_BoolToAssignedstate as BoolToAssignedstate0 with axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model0.model
  let rec ghost function lemma_correctPolarityMakesClauseSat (c : Type.lib_clause_clause) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    requires {exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v}
    requires {0 <= ix && ix < Seq.length a}
    ensures { SatClauseInner0.sat_clause_inner (Seq.set a ix v) c }
    
   = 
    ()
end
module Lib_Assignments_LemmaIncorrectPolarityMakesClauseUnsat_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone Lib_Clause_NotSatClauseInner_Interface as NotSatClauseInner0
  clone Lib_Assignments_FlipV_Interface as FlipV0
  clone Lib_Clause_UnitInner_Interface as UnitInner0
  clone Lib_Clause_SatClauseInner_Interface as SatClauseInner0
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Clause_Impl0_Model_Interface as Model0
  function lemma_incorrectPolarityMakesClauseUnsat (c : Type.lib_clause_clause) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    
end
module Lib_Assignments_LemmaIncorrectPolarityMakesClauseUnsat
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone Lib_Clause_NotSatClauseInner_Interface as NotSatClauseInner0
  clone Lib_Assignments_FlipV_Interface as FlipV0
  clone Lib_Clause_UnitInner_Interface as UnitInner0
  clone Lib_Clause_SatClauseInner_Interface as SatClauseInner0
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Clause_Impl0_Model_Interface as Model0
  function lemma_incorrectPolarityMakesClauseUnsat (c : Type.lib_clause_clause) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    
   = 
    ()
  axiom lemma_incorrectPolarityMakesClauseUnsat_spec : forall c : Type.lib_clause_clause, a : Seq.seq (Type.lib_assignments_assignedstate), ix : int, v : Type.lib_assignments_assignedstate . (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> not (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j))) = BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)))) -> (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> not (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j))) = Type.Lib_Assignments_AssignedState_Unset)) -> (forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && k < j -> not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) k)) = UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)))) -> (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) -> 0 <= UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) < Seq.length a) -> (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v) -> v = Type.Lib_Assignments_AssignedState_Positive || v = Type.Lib_Assignments_AssignedState_Negative -> not (SatClauseInner0.sat_clause_inner a c) -> UnitInner0.unit_inner a c -> 0 <= ix && ix < Seq.length a && Seq.get a ix = Type.Lib_Assignments_AssignedState_Unset -> (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) -> not (Seq.get (Seq.set a ix v) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j))) = Type.Lib_Assignments_AssignedState_Unset)) && not (Seq.get (Seq.set a ix (FlipV0.flip_v v)) ix = Type.Lib_Assignments_AssignedState_Unset) && NotSatClauseInner0.not_sat_clause_inner (Seq.set a ix (FlipV0.flip_v v)) c && not (SatClauseInner0.sat_clause_inner (Seq.set a ix (FlipV0.flip_v v)) c)
end
module Lib_Assignments_LemmaIncorrectPolarityMakesClauseUnsat_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone Lib_Assignments_FlipV as FlipV0
  clone Lib_Logic_BoolToAssignedstate as BoolToAssignedstate0 with axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model0.model
  clone Lib_Clause_NotSatClauseInner as NotSatClauseInner0 with function Model0.model = Model0.model
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model0.model
  clone Lib_Clause_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, function Model0.model = Model0.model
  let rec ghost function lemma_incorrectPolarityMakesClauseUnsat (c : Type.lib_clause_clause) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    requires {forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> not (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j))) = BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)))}
    requires {forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> not (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j))) = Type.Lib_Assignments_AssignedState_Unset)}
    requires {forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && k < j -> not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) k)) = UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)))}
    requires {forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) -> 0 <= UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) < Seq.length a}
    requires {exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v}
    requires {v = Type.Lib_Assignments_AssignedState_Positive || v = Type.Lib_Assignments_AssignedState_Negative}
    requires {not (SatClauseInner0.sat_clause_inner a c)}
    requires {UnitInner0.unit_inner a c}
    requires {0 <= ix && ix < Seq.length a && Seq.get a ix = Type.Lib_Assignments_AssignedState_Unset}
    ensures { not (SatClauseInner0.sat_clause_inner (Seq.set a ix (FlipV0.flip_v v)) c) }
    ensures { NotSatClauseInner0.not_sat_clause_inner (Seq.set a ix (FlipV0.flip_v v)) c }
    ensures { not (Seq.get (Seq.set a ix (FlipV0.flip_v v)) ix = Type.Lib_Assignments_AssignedState_Unset) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) -> not (Seq.get (Seq.set a ix v) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j))) = Type.Lib_Assignments_AssignedState_Unset) }
    
   = 
    ()
end
module Lib_Assignments_LemmaUnitClauseLiteralFalseTauNotSatisfiable_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone Lib_Formula_EventuallySatCompleteFormulaInner_Interface as EventuallySatCompleteFormulaInner0
  clone Lib_Formula_NotSatFormulaInner_Interface as NotSatFormulaInner0
  clone Lib_Assignments_FlipV_Interface as FlipV0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Clause_UnitInner_Interface as UnitInner0
  clone Lib_Formula_ClauseInFormula_Interface as ClauseInFormula0
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Clause_Impl0_Model_Interface as Model0
  function lemma_unitClauseLiteralFalse_tauNotSatisfiable (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    
end
module Lib_Assignments_LemmaUnitClauseLiteralFalseTauNotSatisfiable
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone Lib_Formula_EventuallySatCompleteFormulaInner_Interface as EventuallySatCompleteFormulaInner0
  clone Lib_Formula_NotSatFormulaInner_Interface as NotSatFormulaInner0
  clone Lib_Assignments_FlipV_Interface as FlipV0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Clause_UnitInner_Interface as UnitInner0
  clone Lib_Formula_ClauseInFormula_Interface as ClauseInFormula0
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Clause_Impl0_Model_Interface as Model0
  clone Lib_Clause_NotSatClauseInner_Interface as NotSatClauseInner0
  clone Lib_Clause_SatClauseInner_Interface as SatClauseInner0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Assignments_LemmaNotSatFormulaImpliesUnsatFormula_Interface as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate NotSatFormulaInner0.not_sat_formula_inner = NotSatFormulaInner0.not_sat_formula_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner = EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner,
  axiom .
  clone Lib_Assignments_LemmaNotSatClauseImpliesUnsatFormula_Interface as LemmaNotSatClauseImpliesUnsatFormula0 with predicate ClauseInFormula0.clause_in_formula = ClauseInFormula0.clause_in_formula,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner,
  predicate NotSatFormulaInner0.not_sat_formula_inner = NotSatFormulaInner0.not_sat_formula_inner, axiom .
  clone Lib_Assignments_LemmaIncorrectPolarityMakesClauseUnsat_Interface as LemmaIncorrectPolarityMakesClauseUnsat0 with function Model0.model = Model0.model,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner, function FlipV0.flip_v = FlipV0.flip_v,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner, axiom .
  clone Lib_Assignments_LemmaCorrectPolarityMakesClauseSat_Interface as LemmaCorrectPolarityMakesClauseSat0 with function Model0.model = Model0.model,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, axiom .
  function lemma_unitClauseLiteralFalse_tauNotSatisfiable (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    
   = 
    let _ = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula f a in let _ = LemmaCorrectPolarityMakesClauseSat0.lemma_correctPolarityMakesClauseSat c a ix v in let _ = LemmaIncorrectPolarityMakesClauseUnsat0.lemma_incorrectPolarityMakesClauseUnsat c a ix v in let _ = LemmaNotSatClauseImpliesUnsatFormula0.lemma_not_sat_clause_implies_unsat_formula f c (Seq.set a ix (FlipV0.flip_v v)) in ()
  axiom lemma_unitClauseLiteralFalse_tauNotSatisfiable_spec : forall c : Type.lib_clause_clause, f : Type.lib_formula_formula, a : Seq.seq (Type.lib_assignments_assignedstate), ix : int, v : Type.lib_assignments_assignedstate . (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> not (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j))) = BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)))) -> (forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && k < j -> not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) k)) = UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)))) -> (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> not (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j))) = Type.Lib_Assignments_AssignedState_Unset)) -> (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v) -> (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) -> 0 <= UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) < Seq.length a) -> ClauseInFormula0.clause_in_formula c f -> UnitInner0.unit_inner a c -> v = Type.Lib_Assignments_AssignedState_Positive || v = Type.Lib_Assignments_AssignedState_Negative -> 0 <= ix && ix < Seq.length a && Seq.get a ix = Type.Lib_Assignments_AssignedState_Unset -> UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length a -> Invariant0.invariant' f -> not (EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner (Seq.set a ix (FlipV0.flip_v v)) f) && NotSatFormulaInner0.not_sat_formula_inner (Seq.set a ix (FlipV0.flip_v v)) f
end
module Lib_Assignments_LemmaUnitClauseLiteralFalseTauNotSatisfiable_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone Lib_Assignments_CompleteInner as CompleteInner0
  clone Lib_Assignments_CompatibleInner as CompatibleInner0
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Assignments_AssignmentsInvariant as AssignmentsInvariant0
  clone Lib_Assignments_FlipV as FlipV0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Formula_ClauseInFormula as ClauseInFormula0 with function Model0.model = Model2.model
  clone Lib_Logic_BoolToAssignedstate as BoolToAssignedstate0 with axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model0.model
  clone Lib_Clause_NotSatClauseInner as NotSatClauseInner0 with function Model0.model = Model0.model
  clone Lib_Formula_NotSatFormulaInner as NotSatFormulaInner0 with function Model0.model = Model2.model,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner
  clone Lib_Assignments_LemmaNotSatClauseImpliesUnsatFormula as LemmaNotSatClauseImpliesUnsatFormula0 with predicate ClauseInFormula0.clause_in_formula = ClauseInFormula0.clause_in_formula,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner,
  predicate NotSatFormulaInner0.not_sat_formula_inner = NotSatFormulaInner0.not_sat_formula_inner, axiom .
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model0.model
  clone Lib_Formula_SatFormulaInner as SatFormulaInner0 with function Model0.model = Model2.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner
  clone Lib_Formula_EventuallySatCompleteFormulaInner as EventuallySatCompleteFormulaInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatFormulaInner0.sat_formula_inner = SatFormulaInner0.sat_formula_inner
  clone Lib_Assignments_LemmaCorrectPolarityMakesClauseSat as LemmaCorrectPolarityMakesClauseSat0 with function Model0.model = Model0.model,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, axiom .
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model0.model
  clone Lib_Clause_Impl1_Invariant as Invariant1 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Lib_Assignments_LemmaNotSatFormulaImpliesUnsatFormula as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate NotSatFormulaInner0.not_sat_formula_inner = NotSatFormulaInner0.not_sat_formula_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner = EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner,
  axiom .
  clone Lib_Clause_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, function Model0.model = Model0.model
  clone Lib_Assignments_LemmaIncorrectPolarityMakesClauseUnsat as LemmaIncorrectPolarityMakesClauseUnsat0 with function Model0.model = Model0.model,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner, function FlipV0.flip_v = FlipV0.flip_v,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner, axiom .
  let rec ghost function lemma_unitClauseLiteralFalse_tauNotSatisfiable (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    requires {forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> not (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j))) = BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)))}
    requires {forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && k < j -> not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) k)) = UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)))}
    requires {forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> not (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j))) = Type.Lib_Assignments_AssignedState_Unset)}
    requires {exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v}
    requires {forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) -> 0 <= UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) < Seq.length a}
    requires {ClauseInFormula0.clause_in_formula c f}
    requires {UnitInner0.unit_inner a c}
    requires {v = Type.Lib_Assignments_AssignedState_Positive || v = Type.Lib_Assignments_AssignedState_Negative}
    requires {0 <= ix && ix < Seq.length a && Seq.get a ix = Type.Lib_Assignments_AssignedState_Unset}
    requires {UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length a}
    requires {Invariant0.invariant' f}
    ensures { NotSatFormulaInner0.not_sat_formula_inner (Seq.set a ix (FlipV0.flip_v v)) f }
    ensures { not (EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner (Seq.set a ix (FlipV0.flip_v v)) f) }
    
   = 
    let _ = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula f a in let _ = LemmaCorrectPolarityMakesClauseSat0.lemma_correctPolarityMakesClauseSat c a ix v in let _ = LemmaIncorrectPolarityMakesClauseUnsat0.lemma_incorrectPolarityMakesClauseUnsat c a ix v in let _ = let c' = let c' = FlipV0.flip_v v in Seq.set a ix c' in LemmaNotSatClauseImpliesUnsatFormula0.lemma_not_sat_clause_implies_unsat_formula f c c' in ()
end
module Lib_Assignments_LemmaExtensionSatBaseSat_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone Lib_Formula_EventuallySatCompleteFormulaInner_Interface as EventuallySatCompleteFormulaInner0
  function lemma_extensionSat_baseSat (f : Type.lib_formula_formula) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    
end
module Lib_Assignments_LemmaExtensionSatBaseSat
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone Lib_Formula_EventuallySatCompleteFormulaInner_Interface as EventuallySatCompleteFormulaInner0
  function lemma_extensionSat_baseSat (f : Type.lib_formula_formula) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    
   = 
    ()
  axiom lemma_extensionSat_baseSat_spec : forall f : Type.lib_formula_formula, a : Seq.seq (Type.lib_assignments_assignedstate), ix : int, v : Type.lib_assignments_assignedstate . EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner (Seq.set a ix v) f -> 0 <= ix && ix < Seq.length a && Seq.get a ix = Type.Lib_Assignments_AssignedState_Unset -> EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner a f
end
module Lib_Assignments_LemmaExtensionSatBaseSat_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_SatFormulaInner as SatFormulaInner0 with function Model0.model = Model0.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner
  clone Lib_Assignments_CompleteInner as CompleteInner0
  clone Lib_Assignments_CompatibleInner as CompatibleInner0
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Formula_EventuallySatCompleteFormulaInner as EventuallySatCompleteFormulaInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatFormulaInner0.sat_formula_inner = SatFormulaInner0.sat_formula_inner
  let rec ghost function lemma_extensionSat_baseSat (f : Type.lib_formula_formula) (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (v : Type.lib_assignments_assignedstate) : ()
    requires {EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner (Seq.set a ix v) f}
    requires {0 <= ix && ix < Seq.length a && Seq.get a ix = Type.Lib_Assignments_AssignedState_Unset}
    ensures { EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner a f }
    
   = 
    ()
end
module Lib_Assignments_LemmaExtensionsUnsatBaseUnsat_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone Lib_Formula_EventuallySatCompleteFormulaInner_Interface as EventuallySatCompleteFormulaInner0
  function lemma_extensionsUnsat_baseUnsat (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (f : Type.lib_formula_formula) : ()
    
end
module Lib_Assignments_LemmaExtensionsUnsatBaseUnsat
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone Lib_Formula_EventuallySatCompleteFormulaInner_Interface as EventuallySatCompleteFormulaInner0
  clone Lib_Assignments_CompatibleInner_Interface as CompatibleInner0
  function lemma_extensionsUnsat_baseUnsat (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (f : Type.lib_formula_formula) : ()
    
   = 
    let _ = CompatibleInner0.compatible_inner a (Seq.set a ix (Type.Lib_Assignments_AssignedState_Positive)) in let _ = CompatibleInner0.compatible_inner a (Seq.set a ix (Type.Lib_Assignments_AssignedState_Negative)) in ()
  axiom lemma_extensionsUnsat_baseUnsat_spec : forall a : Seq.seq (Type.lib_assignments_assignedstate), ix : int, f : Type.lib_formula_formula . not (EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner (Seq.set a ix (Type.Lib_Assignments_AssignedState_Negative)) f) -> not (EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner (Seq.set a ix (Type.Lib_Assignments_AssignedState_Positive)) f) -> 0 <= ix && ix < Seq.length a && Seq.get a ix = Type.Lib_Assignments_AssignedState_Unset -> not (EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner a f)
end
module Lib_Assignments_LemmaExtensionsUnsatBaseUnsat_Impl
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_SatFormulaInner as SatFormulaInner0 with function Model0.model = Model0.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner
  clone Lib_Assignments_CompleteInner as CompleteInner0
  clone Lib_Assignments_CompatibleInner as CompatibleInner0
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Formula_EventuallySatCompleteFormulaInner as EventuallySatCompleteFormulaInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatFormulaInner0.sat_formula_inner = SatFormulaInner0.sat_formula_inner
  let rec ghost function lemma_extensionsUnsat_baseUnsat (a : Seq.seq (Type.lib_assignments_assignedstate)) (ix : int) (f : Type.lib_formula_formula) : ()
    requires {not (EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner (Seq.set a ix (Type.Lib_Assignments_AssignedState_Negative)) f)}
    requires {not (EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner (Seq.set a ix (Type.Lib_Assignments_AssignedState_Positive)) f)}
    requires {0 <= ix && ix < Seq.length a && Seq.get a ix = Type.Lib_Assignments_AssignedState_Unset}
    ensures { not (EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner a f) }
    
   = 
    let _ = CompatibleInner0.compatible_inner a (Seq.set a ix (Type.Lib_Assignments_AssignedState_Positive)) in let _ = CompatibleInner0.compatible_inner a (Seq.set a ix (Type.Lib_Assignments_AssignedState_Negative)) in ()
end
module Lib_Assignments_Impl3_Clone_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Lib_Assignments_Impl1_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Lib_Assignments_Impl1_Model_Interface as Model0
  val clone' (self : Type.lib_assignments_assignments) : Type.lib_assignments_assignments
    ensures { Model0.model self = Model0.model result }
    ensures { Seq.length (Model1.model self) = Seq.length (Model0.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model self) -> Seq.get (Model1.model self) i = Seq.get (Model0.model result) i }
    
end
module Lib_Assignments_Impl3_Clone
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Lib_Assignments_Impl1_ModelTy as ModelTy0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  val clone' (self : Type.lib_assignments_assignments) : Type.lib_assignments_assignments
    ensures { Model0.model self = Model0.model result }
    ensures { Seq.length (Model1.model self) = Seq.length (Model0.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model self) -> Seq.get (Model1.model self) i = Seq.get (Model0.model result) i }
    
end
module CreusotContracts_Std1_Vec_Impl1_New_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val new () : Type.creusotcontracts_std1_vec_vec t
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Std1_Vec_Impl1_New
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  val new () : Type.creusotcontracts_std1_vec_vec t
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl1_Push_Interface
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val push (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (v : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model1.model self) v }
    
end
module CreusotContracts_Std1_Vec_Impl1_Push
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  val push (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (v : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model1.model self) v }
    
end
module Lib_Assignments_Impl3_New_Interface
  use prelude.Prelude
  use Type
  clone Lib_Assignments_Impl2_Invariant_Interface as Invariant1
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  val new (f : Type.lib_formula_formula) : Type.lib_assignments_assignments
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result f }
    
end
module Lib_Assignments_Impl3_New
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model2 with function Model0.model = Model0.model
  clone Lib_Assignments_Impl2_Invariant as Invariant1 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = ()
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl1_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Push_Interface as Push0 with type t = Type.lib_assignments_assignedstate,
  function Model0.model = Model0.model, function Model1.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl1_New_Interface as New0 with type t = Type.lib_assignments_assignedstate,
  function Model0.model = Model0.model
  let rec cfg new (f : Type.lib_formula_formula) : Type.lib_assignments_assignments
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result f }
    
   = 
  var _0 : Type.lib_assignments_assignments;
  var f_1 : Type.lib_formula_formula;
  var assign_2 : Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate);
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : ();
  var _10 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate));
  var _11 : Type.lib_assignments_assignedstate;
  var _12 : ();
  var _13 : ();
  var _14 : ();
  var _15 : Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate);
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    assign_2 <- New0.new ();
    goto BB1
  }
  BB1 {
    i_3 <- (0 : usize);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant loop_invariant { 0 <= UInt64.to_int i_3 && UInt64.to_int i_3 <= UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f_1) };
    invariant length_invariant { Seq.length (Model0.model assign_2) = UInt64.to_int i_3 };
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve _7 };
    _7 <- i_3;
    assume { Resolve0.resolve _8 };
    _8 <- Type.lib_formula_formula_Formula_num_vars f_1;
    _6 <- _7 < _8;
    switch (_6)
      | False -> goto BB7
      | _ -> goto BB5
      end
  }
  BB5 {
    _10 <- borrow_mut assign_2;
    assign_2 <-  ^ _10;
    _11 <- Type.Lib_Assignments_AssignedState_Unset;
    _9 <- Push0.push _10 _11;
    goto BB6
  }
  BB6 {
    i_3 <- i_3 + (1 : usize);
    _5 <- ();
    assume { Resolve1.resolve _5 };
    goto BB3
  }
  BB7 {
    assume { Resolve2.resolve f_1 };
    assume { Resolve0.resolve i_3 };
    _4 <- ();
    assume { Resolve1.resolve _4 };
    assume { Resolve3.resolve _15 };
    _15 <- assign_2;
    _0 <- Type.Lib_Assignments_Assignments _15;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  val index_mut (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = t,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index_mut = IndexMut0.index_mut
end
module Lib_Assignments_Impl3_Assign_Interface
  use mach.int.UInt64
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone Lib_Assignments_Impl2_Compatible_Interface as Compatible0
  clone Lib_Assignments_Impl1_Model_Interface as Model1
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl2_Invariant_Interface as Invariant0
  clone Lib_Assignments_Impl1_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val assign (self : borrowed (Type.lib_assignments_assignments)) (ix : usize) (s : Type.lib_assignments_assignedstate) (_f : Type.lib_formula_formula) : ()
    requires {Seq.get (Model0.model self) (UInt64.to_int ix) = Type.Lib_Assignments_AssignedState_Unset}
    requires {0 <= UInt64.to_int ix && UInt64.to_int ix < Seq.length (Model0.model self)}
    requires {Invariant0.invariant' ( * self) _f}
    requires {Invariant1.invariant' _f}
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && j <> UInt64.to_int ix -> Seq.get (Model1.model ( * self)) j = Seq.get (Model1.model ( ^ self)) j }
    ensures { Seq.get (Model1.model ( ^ self)) (UInt64.to_int ix) = s }
    ensures { Model1.model ( ^ self) = Seq.set (Model1.model ( * self)) (UInt64.to_int ix) s }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module Lib_Assignments_Impl3_Assign
  use mach.int.UInt64
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Assignments_CompatibleInner as CompatibleInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Assignments_Impl2_Compatible as Compatible0 with function Model0.model = Model1.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Lib_Assignments_Impl2_Invariant as Invariant0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Assignments_Impl1_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.lib_assignments_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Model_Impl1_Model as Model6 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = Type.lib_assignments_assignedstate,
  function Model0.model = Model3.model, function Model1.model = Model6.model
  let rec cfg assign (self : borrowed (Type.lib_assignments_assignments)) (ix : usize) (s : Type.lib_assignments_assignedstate) (_f : Type.lib_formula_formula) : ()
    requires {Seq.get (Model0.model self) (UInt64.to_int ix) = Type.Lib_Assignments_AssignedState_Unset}
    requires {0 <= UInt64.to_int ix && UInt64.to_int ix < Seq.length (Model0.model self)}
    requires {Invariant0.invariant' ( * self) _f}
    requires {Invariant1.invariant' _f}
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && j <> UInt64.to_int ix -> Seq.get (Model1.model ( * self)) j = Seq.get (Model1.model ( ^ self)) j }
    ensures { Seq.get (Model1.model ( ^ self)) (UInt64.to_int ix) = s }
    ensures { Model1.model ( ^ self) = Seq.set (Model1.model ( * self)) (UInt64.to_int ix) s }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.lib_assignments_assignments);
  var ix_2 : usize;
  var s_3 : Type.lib_assignments_assignedstate;
  var _f_4 : Type.lib_formula_formula;
  var _5 : Type.lib_assignments_assignedstate;
  var _6 : borrowed (Type.lib_assignments_assignedstate);
  var _7 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate));
  var _8 : usize;
  {
    self_1 <- self;
    ix_2 <- ix;
    s_3 <- s;
    _f_4 <- _f;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _f_4 };
    assume { Resolve1.resolve _5 };
    _5 <- s_3;
    assume { Resolve1.resolve s_3 };
    _7 <- borrow_mut (Type.lib_assignments_assignments_Assignments_0 ( * self_1));
    self_1 <- { self_1 with current = (let Type.Lib_Assignments_Assignments a =  * self_1 in Type.Lib_Assignments_Assignments ( ^ _7)) };
    assume { Resolve2.resolve self_1 };
    assume { Resolve3.resolve _8 };
    _8 <- ix_2;
    assume { Resolve3.resolve ix_2 };
    _6 <- IndexMut0.index_mut _7 _8;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve ( * _6) };
    _6 <- { _6 with current = _5 };
    assume { Resolve4.resolve _6 };
    _0 <- ();
    return _0
  }
  
end
module Lib_Assignments_Impl3_FindUnassigned_Interface
  use mach.int.UInt64
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone Lib_Assignments_Impl1_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Lib_Assignments_Impl2_Complete_Interface as Complete0
  val find_unassigned (self : Type.lib_assignments_assignments) : usize
    requires {not (Complete0.complete self)}
    ensures { Seq.get (Model0.model self) (UInt64.to_int result) = Type.Lib_Assignments_AssignedState_Unset }
    ensures { UInt64.to_int result < Seq.length (Model0.model self) }
    
end
module Lib_Assignments_Impl3_FindUnassigned
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl2_Complete as Complete0 with function Model0.model = Model1.model
  clone Lib_Assignments_Impl1_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_assignments_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.lib_assignments_assignedstate,
  function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_assignments_assignedstate,
  function Model0.model = Model3.model
  let rec cfg find_unassigned (self : Type.lib_assignments_assignments) : usize
    requires {not (Complete0.complete self)}
    ensures { Seq.get (Model0.model self) (UInt64.to_int result) = Type.Lib_Assignments_AssignedState_Unset }
    ensures { UInt64.to_int result < Seq.length (Model0.model self) }
    
   = 
  var _0 : usize;
  var self_1 : Type.lib_assignments_assignments;
  var i_2 : usize;
  var _3 : ();
  var _4 : ();
  var _5 : bool;
  var _6 : usize;
  var _7 : usize;
  var _8 : Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate);
  var curr_9 : Type.lib_assignments_assignedstate;
  var _10 : Type.lib_assignments_assignedstate;
  var _11 : Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate);
  var _12 : usize;
  var _13 : ();
  var _14 : isize;
  var _15 : ();
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var _19 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant loop_invariant { 0 <= UInt64.to_int i_2 && UInt64.to_int i_2 <= Seq.length (Model0.model self_1) };
    invariant prev { forall j : (int) . 0 <= j && j < UInt64.to_int i_2 -> not (Seq.get (Model0.model self_1) j = Type.Lib_Assignments_AssignedState_Unset) };
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _6 };
    _6 <- i_2;
    _8 <- Type.lib_assignments_assignments_Assignments_0 self_1;
    _7 <- Len0.len _8;
    goto BB3
  }
  BB3 {
    _5 <- _6 < _7;
    switch (_5)
      | False -> goto BB9
      | _ -> goto BB4
      end
  }
  BB4 {
    _11 <- Type.lib_assignments_assignments_Assignments_0 self_1;
    assume { Resolve0.resolve _12 };
    _12 <- i_2;
    _10 <- Index0.index _11 _12;
    goto BB5
  }
  BB5 {
    assume { Resolve1.resolve curr_9 };
    curr_9 <- _10;
    assume { Resolve2.resolve _10 };
    assume { Resolve1.resolve curr_9 };
    switch (curr_9)
      | Type.Lib_Assignments_AssignedState_Unset -> goto BB6
      | _ -> goto BB7
      end
  }
  BB6 {
    assume { Resolve4.resolve self_1 };
    goto BB8
  }
  BB7 {
    _13 <- ();
    assume { Resolve3.resolve _13 };
    i_2 <- i_2 + (1 : usize);
    _4 <- ();
    assume { Resolve3.resolve _4 };
    goto BB1
  }
  BB8 {
    assume { Resolve0.resolve _0 };
    _0 <- i_2;
    assume { Resolve0.resolve i_2 };
    return _0
  }
  BB9 {
    assume { Resolve4.resolve self_1 };
    assume { Resolve0.resolve i_2 };
    _3 <- ();
    assume { Resolve3.resolve _3 };
    absurd
  }
  
end
module Lib_Formula_Impl1_EventuallySatComplete_Interface
  use Type
  predicate eventually_sat_complete (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_EventuallySatComplete
  use Type
  clone Lib_Formula_EventuallySatCompleteFormulaInner_Interface as EventuallySatCompleteFormulaInner0
  clone Lib_Assignments_Impl1_Model_Interface as Model0
  predicate eventually_sat_complete (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner (Model0.model a) self
end
module CreusotContracts_Logic_Ghost_Impl0_ModelTy
  type t   
  type modelTy  = 
    t
end
module CreusotContracts_Logic_Ghost_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Model
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0
  type t   
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Ghost_Impl1_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Ghost_Impl1_Record
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  val record (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module Lib_Assignments_Impl3_UnitPropOnce_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Lib_Assignments_Impl2_Compatible_Interface as Compatible0
  clone Lib_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl2_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  val unit_prop_once (self : borrowed (Type.lib_assignments_assignments)) (i : usize) (f : Type.lib_formula_formula) : bool
    requires {0 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
end
module Lib_Assignments_Impl3_UnitPropOnce
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  clone Lib_Assignments_CompleteInner as CompleteInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model5 with function Model0.model = Model7.model
  clone Lib_Assignments_Impl2_Invariant as Invariant0 with function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model4 with function Model0.model = Model6.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Clause_NotSatClauseInner as NotSatClauseInner0 with function Model0.model = Model4.model
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model4.model
  clone Lib_Clause_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_clause_clause
  clone Lib_Formula_SatFormulaInner as SatFormulaInner0 with function Model0.model = Model3.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner
  clone Lib_Formula_NotSatFormulaInner as NotSatFormulaInner0 with function Model0.model = Model3.model,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner
  clone Lib_Formula_ClauseInFormula as ClauseInFormula0 with function Model0.model = Model3.model
  clone Lib_Assignments_LemmaNotSatClauseImpliesUnsatFormula as LemmaNotSatClauseImpliesUnsatFormula0 with predicate ClauseInFormula0.clause_in_formula = ClauseInFormula0.clause_in_formula,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner,
  predicate NotSatFormulaInner0.not_sat_formula_inner = NotSatFormulaInner0.not_sat_formula_inner, axiom .
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Assignments_CompatibleInner as CompatibleInner0
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Formula_EventuallySatCompleteFormulaInner as EventuallySatCompleteFormulaInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatFormulaInner0.sat_formula_inner = SatFormulaInner0.sat_formula_inner
  clone Lib_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model5.model,
  predicate EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner = EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner
  clone Lib_Assignments_LemmaExtensionsUnsatBaseUnsat as LemmaExtensionsUnsatBaseUnsat0 with predicate EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner = EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner, axiom .
  clone Lib_Assignments_LemmaExtensionSatBaseSat as LemmaExtensionSatBaseSat0 with predicate EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner = EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner,
  axiom .
  clone Lib_Assignments_Impl2_Compatible as Compatible0 with function Model0.model = Model5.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Lib_Assignments_AssignmentsInvariant as AssignmentsInvariant0
  clone Lib_Assignments_LemmaNotSatFormulaImpliesUnsatFormula as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate NotSatFormulaInner0.not_sat_formula_inner = NotSatFormulaInner0.not_sat_formula_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant1.invariant',
  predicate EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner = EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner,
  axiom .
  clone Lib_Assignments_FlipV as FlipV0
  clone Lib_Assignments_LemmaUnitForces as LemmaUnitForces0 with function FlipV0.flip_v = FlipV0.flip_v,
  predicate EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner = EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner,
  predicate Invariant0.invariant' = Invariant1.invariant',
  function LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula,
  predicate NotSatFormulaInner0.not_sat_formula_inner = NotSatFormulaInner0.not_sat_formula_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant, axiom .
  clone Lib_Logic_BoolToAssignedstate as BoolToAssignedstate0 with axiom .
  clone Lib_Assignments_LemmaIncorrectPolarityMakesClauseUnsat as LemmaIncorrectPolarityMakesClauseUnsat0 with function Model0.model = Model4.model,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner, function FlipV0.flip_v = FlipV0.flip_v,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner, axiom .
  clone Lib_Assignments_LemmaCorrectPolarityMakesClauseSat as LemmaCorrectPolarityMakesClauseSat0 with function Model0.model = Model4.model,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner, axiom .
  clone Lib_Assignments_LemmaUnitClauseLiteralFalseTauNotSatisfiable as LemmaUnitClauseLiteralFalseTauNotSatisfiable0 with function Model0.model = Model4.model,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate ClauseInFormula0.clause_in_formula = ClauseInFormula0.clause_in_formula,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner, predicate Invariant0.invariant' = Invariant1.invariant',
  function FlipV0.flip_v = FlipV0.flip_v,
  predicate NotSatFormulaInner0.not_sat_formula_inner = NotSatFormulaInner0.not_sat_formula_inner,
  predicate EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner = EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner,
  function LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula,
  function LemmaCorrectPolarityMakesClauseSat0.lemma_correctPolarityMakesClauseSat = LemmaCorrectPolarityMakesClauseSat0.lemma_correctPolarityMakesClauseSat,
  function LemmaIncorrectPolarityMakesClauseUnsat0.lemma_incorrectPolarityMakesClauseUnsat = LemmaIncorrectPolarityMakesClauseUnsat0.lemma_incorrectPolarityMakesClauseUnsat,
  function LemmaNotSatClauseImpliesUnsatFormula0.lemma_not_sat_clause_implies_unsat_formula = LemmaNotSatClauseImpliesUnsatFormula0.lemma_not_sat_clause_implies_unsat_formula,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner,
  predicate NotSatClauseInner0.not_sat_clause_inner = NotSatClauseInner0.not_sat_clause_inner, axiom .
  clone Lib_Assignments_Impl1_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl1_Model as Model2 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model5.model
  clone Lib_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = borrowed (Type.lib_assignments_assignments)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve8 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = bool
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = borrowed (Type.lib_assignments_assignments)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone Lib_Clause_Impl1_Unit as Unit0 with function Model0.model = Model5.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.lib_clause_clause,
  function Model0.model = Model8.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model9 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model5.model
  clone Lib_Clause_Impl2_CheckIfUnit_Interface as CheckIfUnit0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', function Model0.model = Model9.model,
  predicate Invariant2.invariant' = Invariant2.invariant', predicate Unit0.unit = Unit0.unit
  clone Lib_Assignments_Impl3_Assign_Interface as Assign0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  function Model1.model = Model5.model, predicate Compatible0.compatible = Compatible0.compatible
  clone Lib_Clause_Impl2_GetUnit_Interface as GetUnit0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Unit0.unit = Unit0.unit,
  function Model0.model = Model9.model, function Model1.model = Model1.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.lib_assignments_assignments),
  function Model0.model = Model0.model
  let rec cfg unit_prop_once (self : borrowed (Type.lib_assignments_assignments)) (i : usize) (f : Type.lib_formula_formula) : bool
    requires {0 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model3.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
   = 
  var _0 : bool;
  var self_1 : borrowed (Type.lib_assignments_assignments);
  var i_2 : usize;
  var f_3 : Type.lib_formula_formula;
  var _4 : ();
  var clause_5 : Type.lib_clause_clause;
  var _6 : Type.lib_clause_clause;
  var _7 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _8 : usize;
  var old_a_9 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments));
  var _10 : borrowed (Type.lib_assignments_assignments);
  var _11 : borrowed (Type.lib_assignments_assignments);
  var _12 : ();
  var _13 : ();
  var _14 : bool;
  var _15 : Type.lib_clause_clause;
  var _16 : Type.lib_assignments_assignments;
  var _17 : Type.lib_formula_formula;
  var _18 : ();
  var lit_19 : Type.lib_lit_lit;
  var _20 : Type.lib_clause_clause;
  var _21 : Type.lib_assignments_assignments;
  var _22 : Type.lib_formula_formula;
  var _23 : ();
  var _24 : ();
  var _25 : ();
  var _26 : ();
  var _27 : ();
  var _28 : ();
  var _29 : bool;
  var _30 : ();
  var _31 : borrowed (Type.lib_assignments_assignments);
  var _32 : usize;
  var _33 : Type.lib_assignments_assignedstate;
  var _34 : Type.lib_formula_formula;
  var _35 : ();
  var _36 : borrowed (Type.lib_assignments_assignments);
  var _37 : usize;
  var _38 : Type.lib_assignments_assignedstate;
  var _39 : Type.lib_formula_formula;
  var _40 : ();
  var _41 : ();
  var _42 : ();
  {
    self_1 <- self;
    i_2 <- i;
    f_3 <- f;
    goto BB0
  }
  BB0 {
    _7 <- Type.lib_formula_formula_Formula_clauses f_3;
    assume { Resolve0.resolve _8 };
    _8 <- i_2;
    assume { Resolve0.resolve i_2 };
    _6 <- Index0.index _7 _8;
    goto BB1
  }
  BB1 {
    clause_5 <- _6;
    assume { Resolve1.resolve _6 };
    _11 <- self_1;
    _10 <- _11;
    assume { Resolve2.resolve _11 };
    old_a_9 <- Record0.record _10;
    goto BB2
  }
  BB2 {
    assume { Resolve3.resolve old_a_9 };
    assert {  ^ self_1 =  ^ Model0.model old_a_9 };
    _12 <- ();
    assume { Resolve4.resolve _12 };
    _15 <- clause_5;
    _16 <-  * self_1;
    _17 <- f_3;
    _14 <- CheckIfUnit0.check_if_unit _15 _16 _17;
    goto BB3
  }
  BB3 {
    switch (_14)
      | False -> goto BB11
      | _ -> goto BB4
      end
  }
  BB4 {
    _20 <- clause_5;
    assume { Resolve1.resolve clause_5 };
    _21 <-  * self_1;
    _22 <- f_3;
    lit_19 <- GetUnit0.get_unit _20 _21 _22;
    goto BB5
  }
  BB5 {
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model1.model clause_5) -> 0 <= UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model1.model clause_5) j)) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model1.model clause_5) j)) < Seq.length (Model2.model self_1) };
    _23 <- ();
    assume { Resolve4.resolve _23 };
    assert { let _ = LemmaUnitClauseLiteralFalseTauNotSatisfiable0.lemma_unitClauseLiteralFalse_tauNotSatisfiable clause_5 f_3 (Model2.model self_1) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit_19)) (BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity lit_19)) in true };
    _24 <- ();
    assume { Resolve4.resolve _24 };
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model1.model clause_5) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model1.model clause_5) j)) = UInt64.to_int (Type.lib_lit_lit_Lit_idx lit_19)) -> not (Seq.get (Model2.model self_1) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model1.model clause_5) j))) = Type.Lib_Assignments_AssignedState_Unset) };
    _25 <- ();
    assume { Resolve4.resolve _25 };
    assert { forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length (Model1.model clause_5) && k < j -> not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model1.model clause_5) k)) = UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model1.model clause_5) j))) };
    _26 <- ();
    assume { Resolve4.resolve _26 };
    assert { let _ = LemmaUnitForces0.lemma_unit_forces clause_5 f_3 (Model2.model self_1) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit_19)) (BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity lit_19)) in true };
    _27 <- ();
    assume { Resolve4.resolve _27 };
    assume { Resolve5.resolve _29 };
    _29 <- Type.lib_lit_lit_Lit_polarity lit_19;
    switch (_29)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB6 {
    _31 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _31) };
    assume { Resolve0.resolve _32 };
    _32 <- Type.lib_lit_lit_Lit_idx lit_19;
    assume { Resolve6.resolve lit_19 };
    _33 <- Type.Lib_Assignments_AssignedState_Positive;
    _34 <- f_3;
    assume { Resolve7.resolve f_3 };
    _30 <- Assign0.assign _31 _32 _33 _34;
    goto BB7
  }
  BB7 {
    assume { Resolve8.resolve self_1 };
    _28 <- ();
    assume { Resolve4.resolve _28 };
    goto BB10
  }
  BB8 {
    _36 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _36) };
    assume { Resolve0.resolve _37 };
    _37 <- Type.lib_lit_lit_Lit_idx lit_19;
    assume { Resolve6.resolve lit_19 };
    _38 <- Type.Lib_Assignments_AssignedState_Negative;
    _39 <- f_3;
    assume { Resolve7.resolve f_3 };
    _35 <- Assign0.assign _36 _37 _38 _39;
    goto BB9
  }
  BB9 {
    assume { Resolve8.resolve self_1 };
    _28 <- ();
    assume { Resolve4.resolve _28 };
    goto BB10
  }
  BB10 {
    assert { let _ = LemmaExtensionSatBaseSat0.lemma_extensionSat_baseSat f_3 (Model2.model (Model0.model old_a_9)) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit_19)) (BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity lit_19)) in true };
    _40 <- ();
    assume { Resolve4.resolve _40 };
    assert { let _ = LemmaExtensionsUnsatBaseUnsat0.lemma_extensionsUnsat_baseUnsat (Model2.model (Model0.model old_a_9)) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit_19)) f_3 in true };
    _41 <- ();
    assume { Resolve4.resolve _41 };
    assert {  ^ self_1 =  ^ Model0.model old_a_9 };
    _42 <- ();
    assume { Resolve4.resolve _42 };
    _0 <- true;
    goto BB12
  }
  BB11 {
    assume { Resolve8.resolve self_1 };
    assume { Resolve7.resolve f_3 };
    assume { Resolve1.resolve clause_5 };
    _13 <- ();
    assume { Resolve4.resolve _13 };
    _0 <- false;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Lib_Assignments_Impl3_UnitPropagate_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Lib_Assignments_Impl2_Compatible_Interface as Compatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl2_Invariant_Interface as Invariant0
  val unit_propagate (self : borrowed (Type.lib_assignments_assignments)) (f : Type.lib_formula_formula) : bool
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete f ( ^ self) = EventuallySatComplete0.eventually_sat_complete f ( * self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
end
module Lib_Assignments_Impl3_UnitPropagate
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Assignments_CompleteInner as CompleteInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model2 with function Model0.model = Model3.model
  clone Lib_Assignments_Impl2_Invariant as Invariant0 with function Model0.model = Model2.model
  clone Lib_Assignments_CompatibleInner as CompatibleInner0
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Assignments_Impl2_Compatible as Compatible0 with function Model0.model = Model2.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = borrowed (Type.lib_assignments_assignments)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_SatFormulaInner as SatFormulaInner0 with function Model0.model = Model0.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner
  clone Lib_Formula_EventuallySatCompleteFormulaInner as EventuallySatCompleteFormulaInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatFormulaInner0.sat_formula_inner = SatFormulaInner0.sat_formula_inner
  clone Lib_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model2.model,
  predicate EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner = EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = bool
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.lib_assignments_assignments)
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.lib_assignments_assignments),
  function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model6 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_clause_clause,
  function Model0.model = Model6.model
  clone Lib_Assignments_Impl3_UnitPropOnce_Interface as UnitPropOnce0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
  predicate Compatible0.compatible = Compatible0.compatible
  let rec cfg unit_propagate (self : borrowed (Type.lib_assignments_assignments)) (f : Type.lib_formula_formula) : bool
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete f ( ^ self) = EventuallySatComplete0.eventually_sat_complete f ( * self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
   = 
  var _0 : bool;
  var self_1 : borrowed (Type.lib_assignments_assignments);
  var f_2 : Type.lib_formula_formula;
  var _3 : ();
  var old_a_4 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments));
  var _5 : borrowed (Type.lib_assignments_assignments);
  var _6 : borrowed (Type.lib_assignments_assignments);
  var i_7 : usize;
  var out_8 : bool;
  var _9 : ();
  var _10 : ();
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _15 : ();
  var _16 : bool;
  var _17 : borrowed (Type.lib_assignments_assignments);
  var _18 : usize;
  var _19 : Type.lib_formula_formula;
  var _20 : ();
  var _21 : ();
  var _22 : ();
  {
    self_1 <- self;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    _6 <- self_1;
    _5 <- _6;
    assume { Resolve0.resolve _6 };
    old_a_4 <- Record0.record _5;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_a_4 };
    i_7 <- (0 : usize);
    out_8 <- false;
    goto BB2
  }
  BB2 {
    invariant loop_invariant { (0 : usize) <= i_7 && UInt64.to_int i_7 <= Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f_2)) };
    invariant ai { Invariant0.invariant' ( * self_1) f_2 };
    invariant proph {  ^ self_1 =  ^ Model1.model old_a_4 };
    invariant compat { Compatible0.compatible ( * Model1.model old_a_4) ( * self_1) };
    invariant maintains_sat { EventuallySatComplete0.eventually_sat_complete f_2 ( * Model1.model old_a_4) = EventuallySatComplete0.eventually_sat_complete f_2 ( * self_1) };
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve _12 };
    _12 <- i_7;
    _14 <- Type.lib_formula_formula_Formula_clauses f_2;
    _13 <- Len0.len _14;
    goto BB4
  }
  BB4 {
    _11 <- _12 < _13;
    switch (_11)
      | False -> goto BB10
      | _ -> goto BB5
      end
  }
  BB5 {
    _17 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _17) };
    assume { Resolve2.resolve _18 };
    _18 <- i_7;
    _19 <- f_2;
    _16 <- UnitPropOnce0.unit_prop_once _17 _18 _19;
    goto BB6
  }
  BB6 {
    switch (_16)
      | False -> goto BB8
      | _ -> goto BB7
      end
  }
  BB7 {
    assume { Resolve3.resolve out_8 };
    out_8 <- true;
    _15 <- ();
    assume { Resolve4.resolve _15 };
    goto BB9
  }
  BB8 {
    _15 <- ();
    assume { Resolve4.resolve _15 };
    goto BB9
  }
  BB9 {
    i_7 <- i_7 + (1 : usize);
    _10 <- ();
    assume { Resolve4.resolve _10 };
    goto BB2
  }
  BB10 {
    assume { Resolve5.resolve self_1 };
    assume { Resolve6.resolve f_2 };
    assume { Resolve2.resolve i_7 };
    _9 <- ();
    assume { Resolve4.resolve _9 };
    assume { Resolve3.resolve _0 };
    _0 <- out_8;
    assume { Resolve3.resolve out_8 };
    return _0
  }
  
end
module Lib_Assignments_Impl3_DoUnitPropagation_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Lib_Assignments_Impl2_Compatible_Interface as Compatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl2_Invariant_Interface as Invariant0
  val do_unit_propagation (self : borrowed (Type.lib_assignments_assignments)) (f : Type.lib_formula_formula) : ()
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
end
module Lib_Assignments_Impl3_DoUnitPropagation
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Assignments_CompleteInner as CompleteInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Assignments_Impl2_Invariant as Invariant0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Formula_SatFormulaInner as SatFormulaInner0 with function Model0.model = Model2.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Assignments_CompatibleInner as CompatibleInner0
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Formula_EventuallySatCompleteFormulaInner as EventuallySatCompleteFormulaInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatFormulaInner0.sat_formula_inner = SatFormulaInner0.sat_formula_inner
  clone Lib_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model1.model,
  predicate EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner = EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner
  clone Lib_Assignments_Impl2_Compatible as Compatible0 with function Model0.model = Model1.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = borrowed (Type.lib_assignments_assignments)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.lib_assignments_assignments)
  clone Lib_Assignments_Impl3_UnitPropagate_Interface as UnitPropagate0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Compatible0.compatible = Compatible0.compatible,
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.lib_assignments_assignments),
  function Model0.model = Model0.model
  let rec cfg do_unit_propagation (self : borrowed (Type.lib_assignments_assignments)) (f : Type.lib_formula_formula) : ()
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.lib_assignments_assignments);
  var f_2 : Type.lib_formula_formula;
  var old_a_3 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments));
  var _4 : borrowed (Type.lib_assignments_assignments);
  var _5 : borrowed (Type.lib_assignments_assignments);
  var _6 : ();
  var _7 : bool;
  var _8 : borrowed (Type.lib_assignments_assignments);
  var _9 : Type.lib_formula_formula;
  var _10 : ();
  var _11 : ();
  var _12 : ();
  {
    self_1 <- self;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    _5 <- self_1;
    _4 <- _5;
    assume { Resolve0.resolve _5 };
    old_a_3 <- Record0.record _4;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_a_3 };
    goto BB2
  }
  BB2 {
    invariant ai { Invariant0.invariant' ( * self_1) f_2 };
    invariant proph {  ^ self_1 =  ^ Model0.model old_a_3 };
    invariant compat { Compatible0.compatible ( * Model0.model old_a_3) ( * self_1) };
    invariant maintains_sat { EventuallySatComplete0.eventually_sat_complete f_2 ( * Model0.model old_a_3) -> EventuallySatComplete0.eventually_sat_complete f_2 ( * self_1) };
    goto BB3
  }
  BB3 {
    _8 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _8) };
    _9 <- f_2;
    _7 <- UnitPropagate0.unit_propagate _8 _9;
    goto BB4
  }
  BB4 {
    switch (_7)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    _6 <- ();
    assume { Resolve2.resolve _6 };
    goto BB2
  }
  BB6 {
    assume { Resolve3.resolve self_1 };
    assume { Resolve4.resolve f_2 };
    _0 <- ();
    return _0
  }
  
end
module Lib_Formula_Impl4_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' (self : Type.lib_formula_satstate) : Type.lib_formula_satstate
end
module Lib_Formula_Impl4_Clone
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_formula_satstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_satstate
  let rec cfg clone' (self : Type.lib_formula_satstate) : Type.lib_formula_satstate = 
  var _0 : Type.lib_formula_satstate;
  var self_1 : Type.lib_formula_satstate;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- self_1;
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module Lib_Formula_Impl4
  use Type
  clone Lib_Formula_Impl4_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.lib_formula_satstate,
  val clone' = Clone0.clone'
end
module Lib_Formula_Impl6_AssertReceiverIsTotalEq_Interface
  use prelude.Prelude
  use Type
  val assert_receiver_is_total_eq (self : Type.lib_formula_satstate) : ()
end
module Lib_Formula_Impl6_AssertReceiverIsTotalEq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_satstate
  let rec cfg assert_receiver_is_total_eq (self : Type.lib_formula_satstate) : () = 
  var _0 : ();
  var self_1 : Type.lib_formula_satstate;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Lib_Formula_Impl6
  use Type
  clone Lib_Formula_Impl6_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Type.lib_formula_satstate,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Lib_Formula_EventuallySatFormulaInner_Interface
  use seq.Seq
  use Type
  predicate eventually_sat_formula_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula)
    
end
module Lib_Formula_EventuallySatFormulaInner
  use seq.Seq
  use Type
  use mach.int.UInt64
  clone Lib_Formula_SatFormulaInner_Interface as SatFormulaInner0
  clone Lib_Assignments_CompatibleInner_Interface as CompatibleInner0
  predicate eventually_sat_formula_inner (a : Seq.seq (Type.lib_assignments_assignedstate)) (f : Type.lib_formula_formula)
    
   = 
    exists a2 : (Seq.seq (Type.lib_assignments_assignedstate)) . Seq.length a2 = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) && CompatibleInner0.compatible_inner a a2 && SatFormulaInner0.sat_formula_inner a2 f
end
module Lib_Formula_Impl1_EventuallySat_Interface
  use Type
  predicate eventually_sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_EventuallySat
  use Type
  clone Lib_Formula_EventuallySatFormulaInner_Interface as EventuallySatFormulaInner0
  clone Lib_Assignments_Impl1_Model_Interface as Model0
  predicate eventually_sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    EventuallySatFormulaInner0.eventually_sat_formula_inner (Model0.model a) self
end
module Lib_Formula_Impl1_Sat_Interface
  use Type
  predicate sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_Sat
  use Type
  clone Lib_Formula_SatFormulaInner_Interface as SatFormulaInner0
  clone Lib_Assignments_Impl1_Model_Interface as Model0
  predicate sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    SatFormulaInner0.sat_formula_inner (Model0.model a) self
end
module Lib_Formula_Impl1_Unsat_Interface
  use Type
  predicate unsat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_Unsat
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Lib_Clause_Impl1_Unsat_Interface as Unsat0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate unsat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self)) && Unsat0.unsat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self)) i) a
end
module Lib_SolverDpll_IsClauseUnsat_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone Lib_Clause_Impl1_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl2_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  val is_clause_unsat (f : Type.lib_formula_formula) (idx : usize) (a : Type.lib_assignments_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Unsat0.unsat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
end
module Lib_SolverDpll_IsClauseUnsat
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model4 with function Model0.model = Model6.model
  clone Lib_Assignments_Impl2_Invariant as Invariant0 with function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model3 with function Model0.model = Model5.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Clause_Impl1_Unsat as Unsat0 with function Model0.model = Model3.model, function Model1.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Assignments_Impl1_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model4.model
  clone Lib_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model3.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = bool
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.lib_assignments_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy4 with type t = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy3 with type t = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Model_Impl0_Model as Model9 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate),
  type ModelTy0.modelTy = ModelTy4.modelTy, function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index2 with type t = Type.lib_assignments_assignedstate,
  function Model0.model = Model9.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = Type.lib_lit_lit,
  function Model0.model = Model8.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_lit_lit,
  function Model0.model = Model8.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.lib_clause_clause,
  function Model0.model = Model7.model
  let rec cfg is_clause_unsat (f : Type.lib_formula_formula) (idx : usize) (a : Type.lib_assignments_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model2.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Unsat0.unsat (Seq.get (Model2.model (Type.lib_formula_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
   = 
  var _0 : bool;
  var f_1 : Type.lib_formula_formula;
  var idx_2 : usize;
  var a_3 : Type.lib_assignments_assignments;
  var _4 : ();
  var clause_5 : Type.lib_clause_clause;
  var _6 : Type.lib_clause_clause;
  var _7 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _8 : usize;
  var i_9 : usize;
  var _10 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var lit_16 : Type.lib_lit_lit;
  var _17 : Type.lib_lit_lit;
  var _18 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _19 : usize;
  var _20 : ();
  var _21 : Type.lib_assignments_assignedstate;
  var _22 : Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate);
  var _23 : usize;
  var _24 : isize;
  var _25 : bool;
  var _26 : ();
  var _27 : bool;
  var _28 : bool;
  var _29 : ();
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : ();
  {
    f_1 <- f;
    idx_2 <- idx;
    a_3 <- a;
    goto BB0
  }
  BB0 {
    _7 <- Type.lib_formula_formula_Formula_clauses f_1;
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve _8 };
    _8 <- idx_2;
    assume { Resolve1.resolve idx_2 };
    _6 <- Index0.index _7 _8;
    goto BB1
  }
  BB1 {
    clause_5 <- _6;
    assume { Resolve2.resolve _6 };
    i_9 <- (0 : usize);
    goto BB2
  }
  BB2 {
    invariant loop_invariant { 0 <= UInt64.to_int i_9 && UInt64.to_int i_9 <= Seq.length (Model0.model clause_5) };
    invariant previous { forall j : (int) . 0 <= j && j < UInt64.to_int i_9 -> match (Seq.get (Model1.model a_3) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model clause_5) j)))) with
      | Type.Lib_Assignments_AssignedState_Positive -> not (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model clause_5) j))
      | Type.Lib_Assignments_AssignedState_Negative -> Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model clause_5) j)
      | Type.Lib_Assignments_AssignedState_Unset -> false
      end };
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve _13 };
    _13 <- i_9;
    _15 <- Type.lib_clause_clause_Clause_0 clause_5;
    _14 <- Len0.len _15;
    goto BB4
  }
  BB4 {
    _12 <- _13 < _14;
    switch (_12)
      | False -> goto BB19
      | _ -> goto BB5
      end
  }
  BB5 {
    _18 <- Type.lib_clause_clause_Clause_0 clause_5;
    assume { Resolve1.resolve _19 };
    _19 <- i_9;
    _17 <- Index1.index _18 _19;
    goto BB6
  }
  BB6 {
    assume { Resolve3.resolve lit_16 };
    lit_16 <- _17;
    assume { Resolve4.resolve _17 };
    _22 <- Type.lib_assignments_assignments_Assignments_0 a_3;
    assume { Resolve1.resolve _23 };
    _23 <- Type.lib_lit_lit_Lit_idx lit_16;
    _21 <- Index2.index _22 _23;
    goto BB7
  }
  BB7 {
    assume { Resolve5.resolve _21 };
    switch (_21)
      | Type.Lib_Assignments_AssignedState_Unset -> goto BB8
      | Type.Lib_Assignments_AssignedState_Positive -> goto BB9
      | Type.Lib_Assignments_AssignedState_Negative -> goto BB10
      end
  }
  BB8 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    assume { Resolve3.resolve lit_16 };
    _0 <- false;
    goto BB20
  }
  BB9 {
    goto BB12
  }
  BB10 {
    goto BB15
  }
  BB11 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    assume { Resolve3.resolve lit_16 };
    absurd
  }
  BB12 {
    assume { Resolve7.resolve _25 };
    _25 <- Type.lib_lit_lit_Lit_polarity lit_16;
    assume { Resolve3.resolve lit_16 };
    switch (_25)
      | False -> goto BB14
      | _ -> goto BB13
      end
  }
  BB13 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _0 <- false;
    goto BB20
  }
  BB14 {
    _20 <- ();
    assume { Resolve8.resolve _20 };
    goto BB18
  }
  BB15 {
    assume { Resolve7.resolve _28 };
    _28 <- Type.lib_lit_lit_Lit_polarity lit_16;
    assume { Resolve3.resolve lit_16 };
    _27 <- not _28;
    switch (_27)
      | False -> goto BB17
      | _ -> goto BB16
      end
  }
  BB16 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _0 <- false;
    goto BB20
  }
  BB17 {
    _20 <- ();
    assume { Resolve8.resolve _20 };
    goto BB18
  }
  BB18 {
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    assume { Resolve8.resolve _11 };
    goto BB2
  }
  BB19 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _10 <- ();
    assume { Resolve8.resolve _10 };
    _0 <- true;
    goto BB21
  }
  BB20 {
    goto BB21
  }
  BB21 {
    return _0
  }
  
end
module Lib_Formula_Impl2_IsUnsat_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl2_Invariant_Interface as Invariant0
  val is_unsat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Unsat0.unsat self a }
    
end
module Lib_Formula_Impl2_IsUnsat
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model2 with function Model0.model = Model4.model
  clone Lib_Assignments_Impl2_Invariant as Invariant0 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Clause_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model, function Model1.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Unsat as Unsat1 with function Model0.model = Model0.model,
  predicate Unsat0.unsat = Unsat0.unsat
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_formula_formula
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_clause_clause,
  function Model0.model = Model5.model
  clone Lib_SolverDpll_IsClauseUnsat_Interface as IsClauseUnsat0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Unsat0.unsat = Unsat0.unsat
  let rec cfg is_unsat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Unsat1.unsat self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.lib_formula_formula;
  var a_2 : Type.lib_assignments_assignments;
  var _3 : ();
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _11 : ();
  var _12 : bool;
  var _13 : Type.lib_formula_formula;
  var _14 : usize;
  var _15 : Type.lib_assignments_assignments;
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var _19 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant prev { forall k : (int) . 0 <= k && k < UInt64.to_int i_4 -> not (Unsat0.unsat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self_1)) k) a_2) };
    invariant loop_invariant { 0 <= UInt64.to_int i_4 && UInt64.to_int i_4 <= Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self_1)) };
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _8 };
    _8 <- i_4;
    _10 <- Type.lib_formula_formula_Formula_clauses self_1;
    _9 <- Len0.len _10;
    goto BB3
  }
  BB3 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB8
      | _ -> goto BB4
      end
  }
  BB4 {
    _13 <- self_1;
    assume { Resolve0.resolve _14 };
    _14 <- i_4;
    _15 <- a_2;
    _12 <- IsClauseUnsat0.is_clause_unsat _13 _14 _15;
    goto BB5
  }
  BB5 {
    switch (_12)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve0.resolve i_4 };
    _0 <- true;
    goto BB9
  }
  BB7 {
    _11 <- ();
    assume { Resolve3.resolve _11 };
    i_4 <- i_4 + (1 : usize);
    _6 <- ();
    assume { Resolve3.resolve _6 };
    goto BB1
  }
  BB8 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve0.resolve i_4 };
    _5 <- ();
    assume { Resolve3.resolve _5 };
    _0 <- false;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Lib_SolverDpll_IsClauseSat_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone Lib_Clause_Impl1_Sat_Interface as Sat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl2_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  val is_clause_sat (f : Type.lib_formula_formula) (idx : usize) (a : Type.lib_assignments_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Sat0.sat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
end
module Lib_SolverDpll_IsClauseSat
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model4 with function Model0.model = Model6.model
  clone Lib_Assignments_Impl2_Invariant as Invariant0 with function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model3 with function Model0.model = Model5.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Clause_Impl1_Sat as Sat0 with function Model0.model = Model3.model, function Model1.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Assignments_Impl1_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model4.model
  clone Lib_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model3.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = bool
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.lib_assignments_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy4 with type t = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy3 with type t = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Model_Impl0_Model as Model9 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate),
  type ModelTy0.modelTy = ModelTy4.modelTy, function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index2 with type t = Type.lib_assignments_assignedstate,
  function Model0.model = Model9.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = Type.lib_lit_lit,
  function Model0.model = Model8.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_lit_lit,
  function Model0.model = Model8.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.lib_clause_clause,
  function Model0.model = Model7.model
  let rec cfg is_clause_sat (f : Type.lib_formula_formula) (idx : usize) (a : Type.lib_assignments_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model2.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Sat0.sat (Seq.get (Model2.model (Type.lib_formula_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
   = 
  var _0 : bool;
  var f_1 : Type.lib_formula_formula;
  var idx_2 : usize;
  var a_3 : Type.lib_assignments_assignments;
  var _4 : ();
  var clause_5 : Type.lib_clause_clause;
  var _6 : Type.lib_clause_clause;
  var _7 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _8 : usize;
  var i_9 : usize;
  var _10 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var lit_16 : Type.lib_lit_lit;
  var _17 : Type.lib_lit_lit;
  var _18 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _19 : usize;
  var _20 : ();
  var _21 : Type.lib_assignments_assignedstate;
  var _22 : Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate);
  var _23 : usize;
  var _24 : isize;
  var _25 : bool;
  var _26 : ();
  var _27 : bool;
  var _28 : bool;
  var _29 : ();
  var _30 : ();
  var _31 : ();
  var _32 : ();
  {
    f_1 <- f;
    idx_2 <- idx;
    a_3 <- a;
    goto BB0
  }
  BB0 {
    _7 <- Type.lib_formula_formula_Formula_clauses f_1;
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve _8 };
    _8 <- idx_2;
    assume { Resolve1.resolve idx_2 };
    _6 <- Index0.index _7 _8;
    goto BB1
  }
  BB1 {
    clause_5 <- _6;
    assume { Resolve2.resolve _6 };
    i_9 <- (0 : usize);
    goto BB2
  }
  BB2 {
    invariant previous { forall j : (int) . 0 <= j && j < UInt64.to_int i_9 -> match (Seq.get (Model1.model a_3) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model clause_5) j)))) with
      | Type.Lib_Assignments_AssignedState_Positive -> not (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model clause_5) j))
      | Type.Lib_Assignments_AssignedState_Negative -> Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model clause_5) j)
      | Type.Lib_Assignments_AssignedState_Unset -> true
      end };
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve _13 };
    _13 <- i_9;
    _15 <- Type.lib_clause_clause_Clause_0 clause_5;
    _14 <- Len0.len _15;
    goto BB4
  }
  BB4 {
    _12 <- _13 < _14;
    switch (_12)
      | False -> goto BB19
      | _ -> goto BB5
      end
  }
  BB5 {
    _18 <- Type.lib_clause_clause_Clause_0 clause_5;
    assume { Resolve1.resolve _19 };
    _19 <- i_9;
    _17 <- Index1.index _18 _19;
    goto BB6
  }
  BB6 {
    assume { Resolve3.resolve lit_16 };
    lit_16 <- _17;
    assume { Resolve4.resolve _17 };
    _22 <- Type.lib_assignments_assignments_Assignments_0 a_3;
    assume { Resolve1.resolve _23 };
    _23 <- Type.lib_lit_lit_Lit_idx lit_16;
    _21 <- Index2.index _22 _23;
    goto BB7
  }
  BB7 {
    assume { Resolve5.resolve _21 };
    switch (_21)
      | Type.Lib_Assignments_AssignedState_Unset -> goto BB8
      | Type.Lib_Assignments_AssignedState_Positive -> goto BB9
      | Type.Lib_Assignments_AssignedState_Negative -> goto BB10
      end
  }
  BB8 {
    assume { Resolve3.resolve lit_16 };
    _20 <- ();
    assume { Resolve8.resolve _20 };
    goto BB18
  }
  BB9 {
    goto BB12
  }
  BB10 {
    goto BB15
  }
  BB11 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    assume { Resolve3.resolve lit_16 };
    absurd
  }
  BB12 {
    assume { Resolve7.resolve _25 };
    _25 <- Type.lib_lit_lit_Lit_polarity lit_16;
    assume { Resolve3.resolve lit_16 };
    switch (_25)
      | False -> goto BB14
      | _ -> goto BB13
      end
  }
  BB13 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _0 <- true;
    goto BB20
  }
  BB14 {
    _20 <- ();
    assume { Resolve8.resolve _20 };
    goto BB18
  }
  BB15 {
    assume { Resolve7.resolve _28 };
    _28 <- Type.lib_lit_lit_Lit_polarity lit_16;
    assume { Resolve3.resolve lit_16 };
    _27 <- not _28;
    switch (_27)
      | False -> goto BB17
      | _ -> goto BB16
      end
  }
  BB16 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _0 <- true;
    goto BB20
  }
  BB17 {
    _20 <- ();
    assume { Resolve8.resolve _20 };
    goto BB18
  }
  BB18 {
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    assume { Resolve8.resolve _11 };
    goto BB2
  }
  BB19 {
    assume { Resolve6.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _10 <- ();
    assume { Resolve8.resolve _10 };
    _0 <- false;
    goto BB21
  }
  BB20 {
    goto BB21
  }
  BB21 {
    return _0
  }
  
end
module Lib_Formula_Impl2_IsSat_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl2_Invariant_Interface as Invariant0
  val is_sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Sat0.sat self a }
    
end
module Lib_Formula_Impl2_IsSat
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model2 with function Model0.model = Model4.model
  clone Lib_Assignments_Impl2_Invariant as Invariant0 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Clause_Impl1_Sat as Sat0 with function Model0.model = Model1.model, function Model1.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_SatFormulaInner as SatFormulaInner0 with function Model0.model = Model0.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner
  clone Lib_Formula_Impl1_Sat as Sat1 with function Model0.model = Model2.model,
  predicate SatFormulaInner0.sat_formula_inner = SatFormulaInner0.sat_formula_inner
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_formula_formula
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_clause_clause,
  function Model0.model = Model5.model
  clone Lib_SolverDpll_IsClauseSat_Interface as IsClauseSat0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Sat0.sat = Sat0.sat
  let rec cfg is_sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Sat1.sat self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.lib_formula_formula;
  var a_2 : Type.lib_assignments_assignments;
  var _3 : ();
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : Type.lib_formula_formula;
  var _15 : usize;
  var _16 : Type.lib_assignments_assignments;
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var _20 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant prev { forall k : (int) . 0 <= k && k < UInt64.to_int i_4 -> Sat0.sat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self_1)) k) a_2 };
    invariant loop_invariant { 0 <= UInt64.to_int i_4 && UInt64.to_int i_4 <= Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self_1)) };
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _8 };
    _8 <- i_4;
    _10 <- Type.lib_formula_formula_Formula_clauses self_1;
    _9 <- Len0.len _10;
    goto BB3
  }
  BB3 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB8
      | _ -> goto BB4
      end
  }
  BB4 {
    _14 <- self_1;
    assume { Resolve0.resolve _15 };
    _15 <- i_4;
    _16 <- a_2;
    _13 <- IsClauseSat0.is_clause_sat _14 _15 _16;
    goto BB5
  }
  BB5 {
    _12 <- not _13;
    switch (_12)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve0.resolve i_4 };
    _0 <- false;
    goto BB9
  }
  BB7 {
    _11 <- ();
    assume { Resolve3.resolve _11 };
    i_4 <- i_4 + (1 : usize);
    _6 <- ();
    assume { Resolve3.resolve _6 };
    goto BB1
  }
  BB8 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve0.resolve i_4 };
    _5 <- ();
    assume { Resolve3.resolve _5 };
    _0 <- true;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Lib_Formula_Impl2_Eval_Interface
  use Type
  use prelude.Prelude
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Assignments_Impl2_Complete_Interface as Complete0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl2_Invariant_Interface as Invariant0
  val eval (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : Type.lib_formula_satstate
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Type.Lib_Formula_SatState_Unknown -> not (Complete0.complete a) }
    ensures { (result = Type.Lib_Formula_SatState_Unsat) = Unsat0.unsat self a }
    ensures { (result = Type.Lib_Formula_SatState_Sat) = Sat0.sat self a }
    
end
module Lib_Formula_Impl2_Eval
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_Unsat as Unsat1 with function Model0.model = Model3.model, function Model1.model = Model0.model
  clone Lib_Assignments_Impl2_Complete as Complete0 with function Model0.model = Model0.model
  clone Lib_Assignments_Impl2_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_SatFormulaInner as SatFormulaInner0 with function Model0.model = Model1.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model0.model,
  predicate SatFormulaInner0.sat_formula_inner = SatFormulaInner0.sat_formula_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate Unsat0.unsat = Unsat1.unsat
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_formula
  clone Lib_Formula_Impl2_IsUnsat_Interface as IsUnsat0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Unsat0.unsat = Unsat0.unsat
  clone Lib_Formula_Impl2_IsSat_Interface as IsSat0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Sat0.sat = Sat0.sat
  let rec cfg eval (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : Type.lib_formula_satstate
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Type.Lib_Formula_SatState_Unknown -> not (Complete0.complete a) }
    ensures { (result = Type.Lib_Formula_SatState_Unsat) = Unsat0.unsat self a }
    ensures { (result = Type.Lib_Formula_SatState_Sat) = Sat0.sat self a }
    
   = 
  var _0 : Type.lib_formula_satstate;
  var self_1 : Type.lib_formula_formula;
  var a_2 : Type.lib_assignments_assignments;
  var _3 : bool;
  var _4 : Type.lib_formula_formula;
  var _5 : Type.lib_assignments_assignments;
  var _6 : ();
  var _7 : bool;
  var _8 : Type.lib_formula_formula;
  var _9 : Type.lib_assignments_assignments;
  var _10 : ();
  var _11 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _4 <- self_1;
    _5 <- a_2;
    _3 <- IsSat0.is_sat _4 _5;
    goto BB1
  }
  BB1 {
    switch (_3)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve a_2 };
    _0 <- Type.Lib_Formula_SatState_Sat;
    goto BB8
  }
  BB3 {
    _8 <- self_1;
    assume { Resolve0.resolve self_1 };
    _9 <- a_2;
    assume { Resolve1.resolve a_2 };
    _7 <- IsUnsat0.is_unsat _8 _9;
    goto BB4
  }
  BB4 {
    switch (_7)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    _0 <- Type.Lib_Formula_SatState_Unsat;
    goto BB7
  }
  BB6 {
    _0 <- Type.Lib_Formula_SatState_Unknown;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module Lib_SolverDpll_Inner_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_EventuallySat_Interface as EventuallySat0
  clone Lib_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl2_Invariant_Interface as Invariant0
  val inner (f : Type.lib_formula_formula) (a : borrowed (Type.lib_assignments_assignments)) : bool
    requires {Invariant0.invariant' ( * a) f}
    requires {Invariant1.invariant' f}
    ensures { result = false -> not (EventuallySatComplete0.eventually_sat_complete f ( * a)) }
    ensures { result = true -> EventuallySat0.eventually_sat f ( * a) }
    ensures { Invariant0.invariant' ( ^ a) f }
    
end
module Lib_SolverDpll_Inner
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_SatClauseInner as SatClauseInner0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Assignments_CompleteInner as CompleteInner0
  clone Lib_Assignments_CompatibleInner as CompatibleInner0
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_assignments_assignedstate
  clone Lib_Assignments_Impl1_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl2_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_SatFormulaInner as SatFormulaInner0 with function Model0.model = Model1.model,
  predicate SatClauseInner0.sat_clause_inner = SatClauseInner0.sat_clause_inner
  clone Lib_Formula_EventuallySatFormulaInner as EventuallySatFormulaInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate SatFormulaInner0.sat_formula_inner = SatFormulaInner0.sat_formula_inner
  clone Lib_Formula_Impl1_EventuallySat as EventuallySat0 with function Model0.model = Model0.model,
  predicate EventuallySatFormulaInner0.eventually_sat_formula_inner = EventuallySatFormulaInner0.eventually_sat_formula_inner
  clone Lib_Formula_EventuallySatCompleteFormulaInner as EventuallySatCompleteFormulaInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatFormulaInner0.sat_formula_inner = SatFormulaInner0.sat_formula_inner
  clone Lib_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model0.model,
  predicate EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner = EventuallySatCompleteFormulaInner0.eventually_sat_complete_formula_inner
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  use mach.int.Int
  use mach.int.Int64
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.lib_assignments_assignedstate
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.lib_assignments_assignedstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = usize
  clone Lib_Assignments_Impl1_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_satstate
  clone CreusotContracts_Logic_Model_Impl1_Model as Model6 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = Type.lib_assignments_assignedstate,
  function Model0.model = Model2.model, function Model1.model = Model6.model
  clone Lib_Clause_Impl1_Unsat as Unsat1 with function Model0.model = Model3.model, function Model1.model = Model0.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone Lib_Assignments_Impl3_Clone_Interface as Clone0 with function Model0.model = Model0.model,
  function Model1.model = Model5.model
  clone Lib_Assignments_Impl2_Complete as Complete0 with function Model0.model = Model0.model
  clone Lib_Assignments_Impl3_FindUnassigned_Interface as FindUnassigned0 with predicate Complete0.complete = Complete0.complete,
  function Model0.model = Model5.model
  clone Lib_Assignments_Impl2_Compatible as Compatible0 with function Model0.model = Model0.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate Unsat0.unsat = Unsat1.unsat
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model0.model,
  predicate SatFormulaInner0.sat_formula_inner = SatFormulaInner0.sat_formula_inner
  clone Lib_Formula_Impl2_Eval_Interface as Eval0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Complete0.complete = Complete0.complete,
  predicate Unsat0.unsat = Unsat0.unsat, predicate Sat0.sat = Sat0.sat
  clone Lib_Assignments_Impl3_DoUnitPropagation_Interface as DoUnitPropagation0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Compatible0.compatible = Compatible0.compatible,
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete
  let rec cfg inner (f : Type.lib_formula_formula) (a : borrowed (Type.lib_assignments_assignments)) : bool
    requires {Invariant0.invariant' ( * a) f}
    requires {Invariant1.invariant' f}
    ensures { result = false -> not (EventuallySatComplete0.eventually_sat_complete f ( * a)) }
    ensures { result = true -> EventuallySat0.eventually_sat f ( * a) }
    ensures { Invariant0.invariant' ( ^ a) f }
    
   = 
  var _0 : bool;
  var f_1 : Type.lib_formula_formula;
  var a_2 : borrowed (Type.lib_assignments_assignments);
  var _3 : ();
  var _4 : borrowed (Type.lib_assignments_assignments);
  var _5 : Type.lib_formula_formula;
  var _6 : ();
  var _7 : Type.lib_formula_satstate;
  var _8 : Type.lib_formula_formula;
  var _9 : Type.lib_assignments_assignments;
  var _10 : isize;
  var _11 : ();
  var _12 : ();
  var a_cloned_13 : Type.lib_assignments_assignments;
  var _14 : Type.lib_assignments_assignments;
  var next_15 : usize;
  var _16 : Type.lib_assignments_assignments;
  var _17 : Type.lib_assignments_assignedstate;
  var _18 : borrowed (Type.lib_assignments_assignedstate);
  var _19 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate));
  var _20 : usize;
  var _21 : Type.lib_assignments_assignedstate;
  var _22 : borrowed (Type.lib_assignments_assignedstate);
  var _23 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.lib_assignments_assignedstate));
  var _24 : usize;
  var _25 : bool;
  var _26 : Type.lib_formula_formula;
  var _27 : borrowed (Type.lib_assignments_assignments);
  var _28 : ();
  var _29 : ();
  var _30 : Type.lib_formula_formula;
  var _31 : borrowed (Type.lib_assignments_assignments);
  var _32 : borrowed (Type.lib_assignments_assignments);
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _4 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _4) };
    _5 <- f_1;
    _3 <- DoUnitPropagation0.do_unit_propagation _4 _5;
    goto BB1
  }
  BB1 {
    _8 <- f_1;
    _9 <-  * a_2;
    _7 <- Eval0.eval _8 _9;
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _7 };
    switch (_7)
      | Type.Lib_Formula_SatState_Sat -> goto BB4
      | Type.Lib_Formula_SatState_Unsat -> goto BB5
      | _ -> goto BB3
      end
  }
  BB3 {
    _6 <- ();
    assume { Resolve1.resolve _6 };
    _14 <-  * a_2;
    a_cloned_13 <- Clone0.clone' _14;
    goto BB8
  }
  BB4 {
    assume { Resolve6.resolve f_1 };
    assume { Resolve5.resolve a_2 };
    goto BB6
  }
  BB5 {
    assume { Resolve6.resolve f_1 };
    assume { Resolve5.resolve a_2 };
    goto BB7
  }
  BB6 {
    _0 <- true;
    goto BB18
  }
  BB7 {
    _0 <- false;
    goto BB18
  }
  BB8 {
    _16 <-  * a_2;
    next_15 <- FindUnassigned0.find_unassigned _16;
    goto BB9
  }
  BB9 {
    _17 <- Type.Lib_Assignments_AssignedState_Positive;
    _19 <- borrow_mut (Type.lib_assignments_assignments_Assignments_0 ( * a_2));
    a_2 <- { a_2 with current = (let Type.Lib_Assignments_Assignments a =  * a_2 in Type.Lib_Assignments_Assignments ( ^ _19)) };
    assume { Resolve2.resolve _20 };
    _20 <- next_15;
    _18 <- IndexMut0.index_mut _19 _20;
    goto BB10
  }
  BB10 {
    assume { Resolve3.resolve ( * _18) };
    _18 <- { _18 with current = _17 };
    assume { Resolve4.resolve _18 };
    _21 <- Type.Lib_Assignments_AssignedState_Negative;
    _23 <- borrow_mut (Type.lib_assignments_assignments_Assignments_0 a_cloned_13);
    a_cloned_13 <- (let Type.Lib_Assignments_Assignments a = a_cloned_13 in Type.Lib_Assignments_Assignments ( ^ _23));
    assume { Resolve2.resolve _24 };
    _24 <- next_15;
    assume { Resolve2.resolve next_15 };
    _22 <- IndexMut0.index_mut _23 _24;
    goto BB11
  }
  BB11 {
    assume { Resolve3.resolve ( * _22) };
    _22 <- { _22 with current = _21 };
    assume { Resolve4.resolve _22 };
    _26 <- f_1;
    _27 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _27) };
    _25 <- inner _26 _27;
    goto BB12
  }
  BB12 {
    assume { Resolve5.resolve a_2 };
    switch (_25)
      | False -> goto BB14
      | _ -> goto BB13
      end
  }
  BB13 {
    assume { Resolve6.resolve f_1 };
    _0 <- true;
    goto BB16
  }
  BB14 {
    _30 <- f_1;
    assume { Resolve6.resolve f_1 };
    _32 <- borrow_mut a_cloned_13;
    a_cloned_13 <-  ^ _32;
    _31 <- borrow_mut ( * _32);
    _32 <- { _32 with current = ( ^ _31) };
    _0 <- inner _30 _31;
    goto BB15
  }
  BB15 {
    assume { Resolve5.resolve _32 };
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    assume { Resolve7.resolve a_cloned_13 };
    goto BB19
  }
  BB18 {
    goto BB19
  }
  BB19 {
    return _0
  }
  
end
module Lib_Assignments_Impl5
  
end
module Lib_Formula_Impl5
  
end
module Lib_Lit_Impl2
  
end
module Lib_Assignments_Impl4
  
end
module Lib_Formula_Impl3
  
end
