module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type lib_formula_satstate  = 
    | Lib_Formula_SatState_Unknown
    | Lib_Formula_SatState_Sat
    | Lib_Formula_SatState_Unsat
    
  type creusotcontracts_std1_vec_vec 't  
  type lib_decision_decisions  = 
    | Lib_Decision_Decisions (creusotcontracts_std1_vec_vec usize)
    
  function lib_decision_decisions_Decisions_lit_order (self : lib_decision_decisions) : creusotcontracts_std1_vec_vec usize
    
  val lib_decision_decisions_Decisions_lit_order (self : lib_decision_decisions) : creusotcontracts_std1_vec_vec usize
    ensures { result = lib_decision_decisions_Decisions_lit_order self }
    
  axiom lib_decision_decisions_Decisions_lit_order_acc : forall a : creusotcontracts_std1_vec_vec usize . lib_decision_decisions_Decisions_lit_order (Lib_Decision_Decisions a : lib_decision_decisions) = a
  type lib_lit_lit  = 
    | Lib_Lit_Lit usize bool
    
  function lib_lit_lit_Lit_idx (self : lib_lit_lit) : usize
  val lib_lit_lit_Lit_idx (self : lib_lit_lit) : usize
    ensures { result = lib_lit_lit_Lit_idx self }
    
  axiom lib_lit_lit_Lit_idx_acc : forall a : usize, b : bool . lib_lit_lit_Lit_idx (Lib_Lit_Lit a b : lib_lit_lit) = a
  function lib_lit_lit_Lit_polarity (self : lib_lit_lit) : bool
  val lib_lit_lit_Lit_polarity (self : lib_lit_lit) : bool
    ensures { result = lib_lit_lit_Lit_polarity self }
    
  axiom lib_lit_lit_Lit_polarity_acc : forall a : usize, b : bool . lib_lit_lit_Lit_polarity (Lib_Lit_Lit a b : lib_lit_lit) = b
  type lib_clause_clause  = 
    | Lib_Clause_Clause (creusotcontracts_std1_vec_vec (lib_lit_lit))
    
  function lib_clause_clause_Clause_rest (self : lib_clause_clause) : creusotcontracts_std1_vec_vec (lib_lit_lit)
  val lib_clause_clause_Clause_rest (self : lib_clause_clause) : creusotcontracts_std1_vec_vec (lib_lit_lit)
    ensures { result = lib_clause_clause_Clause_rest self }
    
  axiom lib_clause_clause_Clause_rest_acc : forall a : creusotcontracts_std1_vec_vec (lib_lit_lit) . lib_clause_clause_Clause_rest (Lib_Clause_Clause a : lib_clause_clause) = a
  type lib_formula_formula  = 
    | Lib_Formula_Formula (creusotcontracts_std1_vec_vec (lib_clause_clause)) usize
    
  function lib_formula_formula_Formula_clauses (self : lib_formula_formula) : creusotcontracts_std1_vec_vec (lib_clause_clause)
    
  val lib_formula_formula_Formula_clauses (self : lib_formula_formula) : creusotcontracts_std1_vec_vec (lib_clause_clause)
    ensures { result = lib_formula_formula_Formula_clauses self }
    
  axiom lib_formula_formula_Formula_clauses_acc : forall a : creusotcontracts_std1_vec_vec (lib_clause_clause), b : usize . lib_formula_formula_Formula_clauses (Lib_Formula_Formula a b : lib_formula_formula) = a
  function lib_formula_formula_Formula_num_vars (self : lib_formula_formula) : usize
  val lib_formula_formula_Formula_num_vars (self : lib_formula_formula) : usize
    ensures { result = lib_formula_formula_Formula_num_vars self }
    
  axiom lib_formula_formula_Formula_num_vars_acc : forall a : creusotcontracts_std1_vec_vec (lib_clause_clause), b : usize . lib_formula_formula_Formula_num_vars (Lib_Formula_Formula a b : lib_formula_formula) = b
  type lib_assignments_assignments  = 
    | Lib_Assignments_Assignments (creusotcontracts_std1_vec_vec uint8) usize
    
  function lib_assignments_assignments_Assignments_0 (self : lib_assignments_assignments) : creusotcontracts_std1_vec_vec uint8
    
  val lib_assignments_assignments_Assignments_0 (self : lib_assignments_assignments) : creusotcontracts_std1_vec_vec uint8
    ensures { result = lib_assignments_assignments_Assignments_0 self }
    
  axiom lib_assignments_assignments_Assignments_0_acc : forall a : creusotcontracts_std1_vec_vec uint8, b : usize . lib_assignments_assignments_Assignments_0 (Lib_Assignments_Assignments a b : lib_assignments_assignments) = a
  function lib_assignments_assignments_Assignments_1 (self : lib_assignments_assignments) : usize
  val lib_assignments_assignments_Assignments_1 (self : lib_assignments_assignments) : usize
    ensures { result = lib_assignments_assignments_Assignments_1 self }
    
  axiom lib_assignments_assignments_Assignments_1_acc : forall a : creusotcontracts_std1_vec_vec uint8, b : usize . lib_assignments_assignments_Assignments_1 (Lib_Assignments_Assignments a b : lib_assignments_assignments) = b
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  type creusotcontracts_logic_ghost_ghost 't = 
    | CreusotContracts_Logic_Ghost_Ghost opaque_ptr
    
end
module Core_Cmp_PartialEq_Eq_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Eq
  type self   
  type rhs   
  use prelude.Prelude
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Ne_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Ne
  type self   
  type rhs   
  use prelude.Prelude
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module Lib_Formula_Impl0_Eq_Interface
  use prelude.Prelude
  use Type
  val eq [@cfg:stackify] (self : Type.lib_formula_satstate) (other : Type.lib_formula_satstate) : bool
end
module Lib_Formula_Impl0_Eq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = (Type.lib_formula_satstate, Type.lib_formula_satstate)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_satstate
  let rec cfg eq [@cfg:stackify] (self : Type.lib_formula_satstate) (other : Type.lib_formula_satstate) : bool = 
  var _0 : bool;
  var self_1 : Type.lib_formula_satstate;
  var other_2 : Type.lib_formula_satstate;
  var _3 : ();
  var _4 : (Type.lib_formula_satstate, Type.lib_formula_satstate);
  var _5 : Type.lib_formula_satstate;
  var _6 : Type.lib_formula_satstate;
  var _7 : isize;
  var _8 : isize;
  var _9 : isize;
  var _10 : isize;
  {
    self_1 <- self;
    other_2 <- other;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _5 };
    _5 <- self_1;
    assume { Resolve0.resolve self_1 };
    assume { Resolve0.resolve _6 };
    _6 <- other_2;
    assume { Resolve0.resolve other_2 };
    _4 <- (_5, _6);
    switch (let (a, _) = _4 in a)
      | Type.Lib_Formula_SatState_Unknown -> goto BB1
      | Type.Lib_Formula_SatState_Sat -> goto BB3
      | Type.Lib_Formula_SatState_Unsat -> goto BB4
      end
  }
  BB1 {
    assume { Resolve1.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Type.Lib_Formula_SatState_Unknown -> goto BB5
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- false;
    goto BB8
  }
  BB3 {
    assume { Resolve1.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Type.Lib_Formula_SatState_Sat -> goto BB6
      | _ -> goto BB2
      end
  }
  BB4 {
    assume { Resolve1.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Type.Lib_Formula_SatState_Unsat -> goto BB7
      | _ -> goto BB2
      end
  }
  BB5 {
    _0 <- true;
    goto BB8
  }
  BB6 {
    _0 <- true;
    goto BB8
  }
  BB7 {
    _0 <- true;
    goto BB8
  }
  BB8 {
    return _0
  }
  BB9 {
    assume { Resolve1.resolve _4 };
    goto BB2
  }
  
end
module Lib_Formula_Impl0
  use Type
  clone Lib_Formula_Impl0_Eq_Interface as Eq0
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Type.lib_formula_satstate,
  type rhs = Type.lib_formula_satstate, val eq = Eq0.eq
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module Lib_Decision_Impl1_MoveToFront_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  val move_to_front [@cfg:stackify] (self : borrowed (Type.lib_decision_decisions)) (tomove : usize) : ()
end
module Lib_Decision_Impl1_MoveToFront
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.lib_decision_decisions
  let rec cfg move_to_front [@cfg:stackify] (self : borrowed (Type.lib_decision_decisions)) (tomove : usize) : () = 
  var _0 : ();
  var self_1 : borrowed (Type.lib_decision_decisions);
  var tomove_2 : usize;
  {
    self_1 <- self;
    tomove_2 <- tomove;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve tomove_2 };
    return _0
  }
  
end
module Lib_Decision_Impl1_IncrementAndMove_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  val increment_and_move [@cfg:stackify] (self : borrowed (Type.lib_decision_decisions)) (f : Type.lib_formula_formula) (cref : usize) : ()
    
end
module Lib_Decision_Impl1_IncrementAndMove
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.lib_decision_decisions
  let rec cfg increment_and_move [@cfg:stackify] (self : borrowed (Type.lib_decision_decisions)) (f : Type.lib_formula_formula) (cref : usize) : ()
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.lib_decision_decisions);
  var f_2 : Type.lib_formula_formula;
  var cref_3 : usize;
  {
    self_1 <- self;
    f_2 <- f;
    cref_3 <- cref;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve cref_3 };
    return _0
  }
  
end
module Lib_Decision_Impl1_GetNext_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  val get_next [@cfg:stackify] (self : borrowed (Type.lib_decision_decisions)) (a : Type.lib_assignments_assignments) : Type.core_option_option usize
    
end
module Lib_Decision_Impl1_GetNext
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.lib_decision_decisions
  let rec cfg get_next [@cfg:stackify] (self : borrowed (Type.lib_decision_decisions)) (a : Type.lib_assignments_assignments) : Type.core_option_option usize
    
   = 
  var _0 : Type.core_option_option usize;
  var self_1 : borrowed (Type.lib_decision_decisions);
  var a_2 : Type.lib_assignments_assignments;
  var _3 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _0 <- Type.Core_Option_Option_None;
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve a_2 };
    return _0
  }
  
end
module Core_Clone_Clone_Clone_Interface
  type self   
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self   
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self   
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self   
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Lib_Lit_Impl2_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.lib_lit_lit) : Type.lib_lit_lit
end
module Lib_Lit_Impl2_Clone
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_lit_lit
  let rec cfg clone' [@cfg:stackify] (self : Type.lib_lit_lit) : Type.lib_lit_lit = 
  var _0 : Type.lib_lit_lit;
  var self_1 : Type.lib_lit_lit;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- self_1;
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module Lib_Lit_Impl2
  use Type
  clone Lib_Lit_Impl2_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.lib_lit_lit, val clone' = Clone0.clone'
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module Lib_Clause_Impl0_ModelTy
  use seq.Seq
  use Type
  type modelTy  = 
    Seq.seq (Type.lib_lit_lit)
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module Lib_Clause_Impl0_Model_Interface
  use Type
  use seq.Seq
  function model (self : Type.lib_clause_clause) : Seq.seq (Type.lib_lit_lit)
end
module Lib_Clause_Impl0_Model
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_lit_lit
  function model (self : Type.lib_clause_clause) : Seq.seq (Type.lib_lit_lit) = 
    Model0.model (Type.lib_clause_clause_Clause_rest self)
end
module Lib_Clause_Impl0
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.lib_clause_clause,
  type modelTy = ModelTy0.modelTy
end
module Lib_Lit_Impl0_LitIn_Interface
  use Type
  predicate lit_in (self : Type.lib_lit_lit) (c : Type.lib_clause_clause)
end
module Lib_Lit_Impl0_LitIn
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate lit_in (self : Type.lib_lit_lit) (c : Type.lib_clause_clause) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) && Seq.get (Model0.model c) i = self
end
module Lib_Lit_Impl0_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.lib_lit_lit) (n : int)
end
module Lib_Lit_Impl0_Invariant
  use Type
  use mach.int.Int
  use mach.int.UInt64
  predicate invariant' (self : Type.lib_lit_lit) (n : int) = 
    UInt64.to_int (Type.lib_lit_lit_Lit_idx self) < n
end
module Lib_Lit_Impl0_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.lib_lit_lit) (a : Seq.seq uint8)
end
module Lib_Lit_Impl0_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  use mach.int.Int32
  predicate sat_inner (self : Type.lib_lit_lit) (a : Seq.seq uint8) = 
    if Type.lib_lit_lit_Lit_polarity self then
      UInt8.to_int (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx self))) = 1
    else
      UInt8.to_int (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx self))) = 0
    
end
module Lib_Lit_Impl0_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.lib_lit_lit) (a : Seq.seq uint8)
end
module Lib_Lit_Impl0_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  use mach.int.Int32
  predicate unsat_inner (self : Type.lib_lit_lit) (a : Seq.seq uint8) = 
    if Type.lib_lit_lit_Lit_polarity self then
      UInt8.to_int (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx self))) = 0
    else
      UInt8.to_int (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx self))) = 1
    
end
module Lib_Lit_Impl0_UnsetInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unset_inner (self : Type.lib_lit_lit) (a : Seq.seq uint8)
end
module Lib_Lit_Impl0_UnsetInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  use mach.int.Int32
  predicate unset_inner (self : Type.lib_lit_lit) (a : Seq.seq uint8) = 
    UInt8.to_int (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx self))) >= 2
end
module Lib_Assignments_Impl0_ModelTy
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  type modelTy  = 
    Seq.seq uint8
end
module Lib_Assignments_Impl0_Model_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function model (self : Type.lib_assignments_assignments) : Seq.seq uint8
end
module Lib_Assignments_Impl0_Model
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = uint8
  function model (self : Type.lib_assignments_assignments) : Seq.seq uint8 = 
    Model0.model (Type.lib_assignments_assignments_Assignments_0 self)
end
module Lib_Assignments_Impl0
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.lib_assignments_assignments,
  type modelTy = ModelTy0.modelTy
end
module Lib_Lit_Impl0_Sat_Interface
  use Type
  predicate sat (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments)
end
module Lib_Lit_Impl0_Sat
  use Type
  clone Lib_Lit_Impl0_SatInner_Interface as SatInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate sat (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) = 
    SatInner0.sat_inner self (Model0.model a)
end
module Lib_Lit_Impl0_Unset_Interface
  use Type
  predicate unset (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments)
end
module Lib_Lit_Impl0_Unset
  use Type
  clone Lib_Lit_Impl0_UnsetInner_Interface as UnsetInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate unset (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) = 
    UnsetInner0.unset_inner self (Model0.model a)
end
module Lib_Lit_Impl0_Unsat_Interface
  use Type
  predicate unsat (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments)
end
module Lib_Lit_Impl0_Unsat
  use Type
  clone Lib_Lit_Impl0_UnsatInner_Interface as UnsatInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate unsat (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) = 
    UnsatInner0.unsat_inner self (Model0.model a)
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index = Index0.index
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module Lib_Lit_Impl1_LitSat_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone Lib_Lit_Impl0_Sat_Interface as Sat0
  clone Lib_Lit_Impl0_Invariant_Interface as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_sat [@cfg:stackify] (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Sat0.sat self a }
    
end
module Lib_Lit_Impl1_LitSat
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Lit_Impl0_SatInner as SatInner0
  clone Lib_Lit_Impl0_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Lit_Impl0_Invariant as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = uint8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = uint8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec uint8,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = uint8,
  function Model0.model = Model3.model
  let rec cfg lit_sat [@cfg:stackify] (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Sat0.sat self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.lib_lit_lit;
  var a_2 : Type.lib_assignments_assignments;
  var _3 : uint8;
  var _4 : uint8;
  var _5 : Type.creusotcontracts_std1_vec_vec uint8;
  var _6 : usize;
  var _7 : uint8;
  var _8 : uint8;
  var _9 : Type.creusotcontracts_std1_vec_vec uint8;
  var _10 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    switch (Type.lib_lit_lit_Lit_polarity self_1)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB1 {
    _9 <- Type.lib_assignments_assignments_Assignments_0 a_2;
    assume { Resolve0.resolve a_2 };
    assume { Resolve1.resolve _10 };
    _10 <- Type.lib_lit_lit_Lit_idx self_1;
    assume { Resolve2.resolve self_1 };
    _8 <- Index0.index _9 _10;
    goto BB4
  }
  BB2 {
    _5 <- Type.lib_assignments_assignments_Assignments_0 a_2;
    assume { Resolve0.resolve a_2 };
    assume { Resolve1.resolve _6 };
    _6 <- Type.lib_lit_lit_Lit_idx self_1;
    assume { Resolve2.resolve self_1 };
    _4 <- Index0.index _5 _6;
    goto BB3
  }
  BB3 {
    assume { Resolve3.resolve _3 };
    _3 <- _4;
    assume { Resolve4.resolve _4 };
    _0 <- _3 = (1 : uint8);
    goto BB5
  }
  BB4 {
    assume { Resolve3.resolve _7 };
    _7 <- _8;
    assume { Resolve4.resolve _8 };
    _0 <- _7 = (0 : uint8);
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Lib_Lit_Impl1_LitUnsat_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone Lib_Lit_Impl0_Unsat_Interface as Unsat0
  clone Lib_Lit_Impl0_Invariant_Interface as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_unsat [@cfg:stackify] (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unsat0.unsat self a }
    
end
module Lib_Lit_Impl1_LitUnsat
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Lit_Impl0_UnsatInner as UnsatInner0
  clone Lib_Lit_Impl0_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Lit_Impl0_Invariant as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = uint8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = uint8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec uint8,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = uint8,
  function Model0.model = Model3.model
  let rec cfg lit_unsat [@cfg:stackify] (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unsat0.unsat self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.lib_lit_lit;
  var a_2 : Type.lib_assignments_assignments;
  var _3 : uint8;
  var _4 : uint8;
  var _5 : Type.creusotcontracts_std1_vec_vec uint8;
  var _6 : usize;
  var _7 : uint8;
  var _8 : uint8;
  var _9 : Type.creusotcontracts_std1_vec_vec uint8;
  var _10 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    switch (Type.lib_lit_lit_Lit_polarity self_1)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB1 {
    _9 <- Type.lib_assignments_assignments_Assignments_0 a_2;
    assume { Resolve0.resolve a_2 };
    assume { Resolve1.resolve _10 };
    _10 <- Type.lib_lit_lit_Lit_idx self_1;
    assume { Resolve2.resolve self_1 };
    _8 <- Index0.index _9 _10;
    goto BB4
  }
  BB2 {
    _5 <- Type.lib_assignments_assignments_Assignments_0 a_2;
    assume { Resolve0.resolve a_2 };
    assume { Resolve1.resolve _6 };
    _6 <- Type.lib_lit_lit_Lit_idx self_1;
    assume { Resolve2.resolve self_1 };
    _4 <- Index0.index _5 _6;
    goto BB3
  }
  BB3 {
    assume { Resolve3.resolve _3 };
    _3 <- _4;
    assume { Resolve4.resolve _4 };
    _0 <- _3 = (0 : uint8);
    goto BB5
  }
  BB4 {
    assume { Resolve3.resolve _7 };
    _7 <- _8;
    assume { Resolve4.resolve _8 };
    _0 <- _7 = (1 : uint8);
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Lib_Lit_Impl1_LitUnset_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone Lib_Lit_Impl0_Unset_Interface as Unset0
  clone Lib_Lit_Impl0_Invariant_Interface as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_unset [@cfg:stackify] (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unset0.unset self a }
    
end
module Lib_Lit_Impl1_LitUnset
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Lit_Impl0_UnsetInner as UnsetInner0
  clone Lib_Lit_Impl0_Unset as Unset0 with function Model0.model = Model1.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Lib_Lit_Impl0_Invariant as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = uint8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = uint8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec uint8,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = uint8,
  function Model0.model = Model3.model
  let rec cfg lit_unset [@cfg:stackify] (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unset0.unset self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.lib_lit_lit;
  var a_2 : Type.lib_assignments_assignments;
  var _3 : uint8;
  var _4 : uint8;
  var _5 : Type.creusotcontracts_std1_vec_vec uint8;
  var _6 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _5 <- Type.lib_assignments_assignments_Assignments_0 a_2;
    assume { Resolve0.resolve a_2 };
    assume { Resolve1.resolve _6 };
    _6 <- Type.lib_lit_lit_Lit_idx self_1;
    assume { Resolve2.resolve self_1 };
    _4 <- Index0.index _5 _6;
    goto BB1
  }
  BB1 {
    assume { Resolve3.resolve _3 };
    _3 <- _4;
    assume { Resolve4.resolve _4 };
    _0 <- _3 >= (2 : uint8);
    return _0
  }
  
end
module Lib_Clause_Impl1_InFormula_Interface
  use Type
  predicate in_formula (self : Type.lib_clause_clause) (f : Type.lib_formula_formula)
end
module Lib_Clause_Impl1_InFormula
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate in_formula (self : Type.lib_clause_clause) (f : Type.lib_formula_formula) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) && Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i = self
end
module Lib_Clause_Impl1_VarsInRange_Interface
  use Type
  use mach.int.Int
  predicate vars_in_range (self : Type.lib_clause_clause) (n : int)
end
module Lib_Clause_Impl1_VarsInRange
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Lib_Lit_Impl0_Invariant_Interface as Invariant0
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate vars_in_range (self : Type.lib_clause_clause) (n : int) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Invariant0.invariant' (Seq.get (Model0.model self) i) n
end
module Lib_Clause_Impl1_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.lib_clause_clause) (a : Seq.seq uint8)
end
module Lib_Clause_Impl1_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Lib_Lit_Impl0_SatInner_Interface as SatInner0
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate sat_inner (self : Type.lib_clause_clause) (a : Seq.seq uint8) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model self) && SatInner0.sat_inner (Seq.get (Model0.model self) i) a
end
module Lib_Clause_Impl1_UnitInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unit_inner (self : Type.lib_clause_clause) (a : Seq.seq uint8)
end
module Lib_Clause_Impl1_UnitInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Lib_Lit_Impl0_UnsetInner_Interface as UnsetInner0
  clone Lib_Clause_Impl0_Model_Interface as Model0
  clone Lib_Clause_Impl1_SatInner_Interface as SatInner0
  clone Lib_Clause_Impl1_VarsInRange_Interface as VarsInRange0
  predicate unit_inner (self : Type.lib_clause_clause) (a : Seq.seq uint8) = 
    VarsInRange0.vars_in_range self (Seq.length a) && not (SatInner0.sat_inner self a) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model self) && UnsetInner0.unset_inner (Seq.get (Model0.model self) i) a && (forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && j <> i -> not (UnsetInner0.unset_inner (Seq.get (Model0.model self) j) a)))
end
module Lib_Clause_Impl1_Unit_Interface
  use Type
  predicate unit (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl1_Unit
  use Type
  clone Lib_Clause_Impl1_UnitInner_Interface as UnitInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate unit (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    UnitInner0.unit_inner self (Model0.model a)
end
module Lib_Clause_Impl1_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.lib_clause_clause) (a : Seq.seq uint8)
end
module Lib_Clause_Impl1_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Lib_Lit_Impl0_UnsatInner_Interface as UnsatInner0
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate unsat_inner (self : Type.lib_clause_clause) (a : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> UnsatInner0.unsat_inner (Seq.get (Model0.model self) i) a
end
module Lib_Clause_Impl1_Unsat_Interface
  use Type
  predicate unsat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl1_Unsat
  use Type
  clone Lib_Clause_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate unsat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    UnsatInner0.unsat_inner self (Model0.model a)
end
module Lib_Clause_Impl1_Sat_Interface
  use Type
  predicate sat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl1_Sat
  use Type
  clone Lib_Clause_Impl1_SatInner_Interface as SatInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate sat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    SatInner0.sat_inner self (Model0.model a)
end
module Lib_Clause_Impl1_Unknown_Interface
  use Type
  predicate unknown (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl1_Unknown
  use Type
  clone Lib_Clause_Impl1_Unsat_Interface as Unsat0
  clone Lib_Clause_Impl1_Sat_Interface as Sat0
  predicate unknown (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    not (Sat0.sat self a) && not (Unsat0.unsat self a)
end
module Lib_Clause_Impl1_NoDuplicateIndexes_Interface
  use Type
  predicate no_duplicate_indexes (self : Type.lib_clause_clause)
end
module Lib_Clause_Impl1_NoDuplicateIndexes
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Lib_Clause_Impl0_Model_Interface as Model0
  predicate no_duplicate_indexes (self : Type.lib_clause_clause) = 
    forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && k < j -> not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self) k)) = UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model self) j)))
end
module Lib_Clause_Impl1_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.lib_clause_clause) (n : int)
end
module Lib_Clause_Impl1_Invariant
  use Type
  use mach.int.Int
  clone Lib_Clause_Impl1_NoDuplicateIndexes_Interface as NoDuplicateIndexes0
  clone Lib_Clause_Impl1_VarsInRange_Interface as VarsInRange0
  predicate invariant' (self : Type.lib_clause_clause) (n : int) = 
    VarsInRange0.vars_in_range self n && NoDuplicateIndexes0.no_duplicate_indexes self
end
module Lib_Clause_Impl2_ClauseFromVec_Interface
  use prelude.Prelude
  use Type
  val clause_from_vec [@cfg:stackify] (vec : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)) : Type.lib_clause_clause
    
end
module Lib_Clause_Impl2_ClauseFromVec
  use prelude.Prelude
  use Type
  val clause_from_vec [@cfg:stackify] (vec : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)) : Type.lib_clause_clause
    
end
module Lib_Assignments_Impl1_Invariant_Interface
  use Type
  predicate invariant' (self : Type.lib_assignments_assignments) (f : Type.lib_formula_formula)
end
module Lib_Assignments_Impl1_Invariant
  use Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate invariant' (self : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) = 
    UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length (Model0.model self) && UInt64.to_int (Type.lib_assignments_assignments_Assignments_1 self) <= UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f)
end
module Lib_Formula_Impl1_Invariant_Interface
  use Type
  predicate invariant' (self : Type.lib_formula_formula)
end
module Lib_Formula_Impl1_Invariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Lib_Clause_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate invariant' (self : Type.lib_formula_formula) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self)) -> Invariant0.invariant' (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self)) i) (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars self))
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Lib_Clause_Impl2_CheckIfUnit_Interface
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Lib_Clause_Impl1_Unit_Interface as Unit0
  clone Lib_Clause_Impl1_Invariant_Interface as Invariant2
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val check_if_unit [@cfg:stackify] (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) : bool
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {Invariant2.invariant' self (Seq.length (Model0.model a))}
    ensures { result -> Unit0.unit self a }
    
end
module Lib_Clause_Impl2_CheckIfUnit
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Lib_Lit_Impl0_SatInner as SatInner1
  clone Lib_Lit_Impl0_Invariant as Invariant3
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model3 with function Model0.model = Model6.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model2 with function Model0.model = Model5.model
  clone Lib_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Assignments_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Lit_Impl0_UnsatInner as UnsatInner0
  clone Lib_Lit_Impl0_Unsat as Unsat0 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Lit_Impl0_UnsetInner as UnsetInner0
  clone Lib_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model2.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Lib_Clause_Impl1_Unit as Unit0 with function Model0.model = Model3.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone Lib_Lit_Impl0_Unset as Unset0 with function Model0.model = Model3.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Lib_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_formula
  clone Lib_Lit_Impl0_Sat as Sat0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.lib_lit_lit,
  function Model0.model = Model7.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_lit_lit,
  function Model0.model = Model7.model
  clone Lib_Lit_Impl1_LitSat_Interface as LitSat0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Sat0.sat = Sat0.sat
  clone Lib_Lit_Impl1_LitUnset_Interface as LitUnset0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Unset0.unset = Unset0.unset
  let rec cfg check_if_unit [@cfg:stackify] (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) : bool
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {Invariant2.invariant' self (Seq.length (Model1.model a))}
    ensures { result -> Unit0.unit self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.lib_clause_clause;
  var a_2 : Type.lib_assignments_assignments;
  var f_3 : Type.lib_formula_formula;
  var i_4 : usize;
  var unassigned_5 : usize;
  var k_6 : usize;
  var _7 : ();
  var _8 : ();
  var _9 : bool;
  var _10 : usize;
  var _11 : usize;
  var _12 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var lit_13 : Type.lib_lit_lit;
  var _14 : Type.lib_lit_lit;
  var _15 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _16 : usize;
  var _17 : ();
  var _18 : bool;
  var _19 : Type.lib_lit_lit;
  var _20 : Type.lib_assignments_assignments;
  var _21 : ();
  var _22 : bool;
  var _23 : Type.lib_lit_lit;
  var _24 : Type.lib_assignments_assignments;
  var _25 : ();
  var _26 : bool;
  var _27 : usize;
  var _28 : ();
  var _29 : usize;
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : bool;
  var _34 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    f_3 <- f;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve f_3 };
    i_4 <- (0 : usize);
    unassigned_5 <- (0 : usize);
    k_6 <- (0 : usize);
    assume { Resolve1.resolve k_6 };
    goto BB1
  }
  BB1 {
    invariant loop_invariant { 0 <= UInt64.to_int i_4 && UInt64.to_int i_4 <= Seq.length (Model0.model self_1) };
    invariant unass { UInt64.to_int unassigned_5 < 2 };
    invariant k_is_unass { UInt64.to_int unassigned_5 = 0 || Unset0.unset (Seq.get (Model0.model self_1) (UInt64.to_int k_6)) a_2 };
    invariant kk { UInt64.to_int unassigned_5 > 0 -> Unset0.unset (Seq.get (Model0.model self_1) (UInt64.to_int k_6)) a_2 };
    invariant not_sat { forall j : (int) . 0 <= j && j < UInt64.to_int i_4 -> Unsat0.unsat (Seq.get (Model0.model self_1) j) a_2 || Unset0.unset (Seq.get (Model0.model self_1) j) a_2 && UInt64.to_int unassigned_5 = 1 };
    invariant k_in_bounds { UInt64.to_int unassigned_5 = 0 || 0 <= UInt64.to_int k_6 && UInt64.to_int k_6 < Seq.length (Model0.model self_1) };
    invariant k_only { UInt64.to_int unassigned_5 = 1 -> (forall j : (int) . 0 <= j && j < UInt64.to_int i_4 && j <> UInt64.to_int k_6 -> not (Unset0.unset (Seq.get (Model0.model self_1) j) a_2)) };
    invariant k_unset { UInt64.to_int unassigned_5 = 0 -> UInt64.to_int k_6 = 0 };
    assume { Resolve1.resolve _10 };
    _10 <- i_4;
    _12 <- Type.lib_clause_clause_Clause_rest self_1;
    _11 <- Len0.len _12;
    goto BB2
  }
  BB2 {
    _9 <- _10 < _11;
    switch (_9)
      | False -> goto BB14
      | _ -> goto BB3
      end
  }
  BB3 {
    _15 <- Type.lib_clause_clause_Clause_rest self_1;
    assume { Resolve1.resolve _16 };
    _16 <- i_4;
    _14 <- Index0.index _15 _16;
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve lit_13 };
    lit_13 <- _14;
    assume { Resolve3.resolve _14 };
    assume { Resolve2.resolve _19 };
    _19 <- lit_13;
    _20 <- a_2;
    _18 <- LitSat0.lit_sat _19 _20;
    goto BB5
  }
  BB5 {
    switch (_18)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve4.resolve self_1 };
    assume { Resolve5.resolve a_2 };
    assume { Resolve1.resolve i_4 };
    assume { Resolve1.resolve unassigned_5 };
    assume { Resolve2.resolve lit_13 };
    _0 <- false;
    goto BB18
  }
  BB7 {
    assume { Resolve2.resolve _23 };
    _23 <- lit_13;
    assume { Resolve2.resolve lit_13 };
    _24 <- a_2;
    _22 <- LitUnset0.lit_unset _23 _24;
    goto BB8
  }
  BB8 {
    switch (_22)
      | False -> goto BB12
      | _ -> goto BB9
      end
  }
  BB9 {
    assume { Resolve1.resolve _27 };
    _27 <- unassigned_5;
    _26 <- _27 > (0 : usize);
    switch (_26)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    assume { Resolve4.resolve self_1 };
    assume { Resolve5.resolve a_2 };
    assume { Resolve1.resolve i_4 };
    assume { Resolve1.resolve unassigned_5 };
    _0 <- false;
    goto BB18
  }
  BB11 {
    _25 <- ();
    assume { Resolve6.resolve _25 };
    assume { Resolve1.resolve _29 };
    _29 <- i_4;
    assume { Resolve1.resolve k_6 };
    k_6 <- _29;
    unassigned_5 <- unassigned_5 + (1 : usize);
    _17 <- ();
    assume { Resolve6.resolve _17 };
    goto BB13
  }
  BB12 {
    _17 <- ();
    assume { Resolve6.resolve _17 };
    goto BB13
  }
  BB13 {
    i_4 <- i_4 + (1 : usize);
    _8 <- ();
    assume { Resolve6.resolve _8 };
    goto BB1
  }
  BB14 {
    assume { Resolve4.resolve self_1 };
    assume { Resolve5.resolve a_2 };
    assume { Resolve1.resolve i_4 };
    _7 <- ();
    assume { Resolve6.resolve _7 };
    assume { Resolve1.resolve _34 };
    _34 <- unassigned_5;
    assume { Resolve1.resolve unassigned_5 };
    _33 <- _34 = (1 : usize);
    switch (_33)
      | False -> goto BB16
      | _ -> goto BB15
      end
  }
  BB15 {
    _0 <- true;
    goto BB17
  }
  BB16 {
    _0 <- false;
    goto BB17
  }
  BB17 {
    goto BB19
  }
  BB18 {
    goto BB19
  }
  BB19 {
    return _0
  }
  
end
module Lib_Logic_Unset_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unset (v : uint8)
end
module Lib_Logic_Unset
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  predicate unset (v : uint8) = 
    if UInt8.to_int v >= 2 then true else false
end
module Lib_Clause_Impl2_GetUnit_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Lib_Clause_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Lib_Clause_Impl1_Unit_Interface as Unit0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val get_unit [@cfg:stackify] (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) : Type.lib_lit_lit
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {Unit0.unit self a}
    ensures { Unset0.unset (Seq.get (Model0.model a) (UInt64.to_int (Type.lib_lit_lit_Lit_idx result))) }
    ensures { UInt64.to_int (Type.lib_lit_lit_Lit_idx result) < Seq.length (Model0.model a) }
    ensures { exists j : (int) . 0 <= j && j < Seq.length (Model1.model self) && Seq.get (Model1.model self) j = result }
    
end
module Lib_Clause_Impl2_GetUnit
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Lib_Lit_Impl0_SatInner as SatInner1
  clone Lib_Lit_Impl0_Invariant as Invariant3
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model3 with function Model0.model = Model6.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model2 with function Model0.model = Model5.model
  clone Lib_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Logic_Unset as Unset1
  clone Lib_Assignments_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Lit_Impl0_UnsetInner as UnsetInner0
  clone Lib_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model2.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Lib_Clause_Impl1_Unit as Unit0 with function Model0.model = Model3.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone Lib_Lit_Impl0_Unset as Unset0 with function Model0.model = Model3.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Lib_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.lib_lit_lit,
  function Model0.model = Model7.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_lit_lit,
  function Model0.model = Model7.model
  clone Lib_Lit_Impl1_LitUnset_Interface as LitUnset0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Unset0.unset = Unset0.unset
  let rec cfg get_unit [@cfg:stackify] (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) : Type.lib_lit_lit
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {Unit0.unit self a}
    ensures { Unset1.unset (Seq.get (Model1.model a) (UInt64.to_int (Type.lib_lit_lit_Lit_idx result))) }
    ensures { UInt64.to_int (Type.lib_lit_lit_Lit_idx result) < Seq.length (Model1.model a) }
    ensures { exists j : (int) . 0 <= j && j < Seq.length (Model0.model self) && Seq.get (Model0.model self) j = result }
    
   = 
  var _0 : Type.lib_lit_lit;
  var self_1 : Type.lib_clause_clause;
  var a_2 : Type.lib_assignments_assignments;
  var f_3 : Type.lib_formula_formula;
  var _4 : ();
  var i_5 : usize;
  var _6 : ();
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var lit_12 : Type.lib_lit_lit;
  var _13 : Type.lib_lit_lit;
  var _14 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _15 : usize;
  var _16 : ();
  var _17 : bool;
  var _18 : Type.lib_lit_lit;
  var _19 : Type.lib_assignments_assignments;
  var _20 : ();
  var _21 : ();
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : ();
  {
    self_1 <- self;
    a_2 <- a;
    f_3 <- f;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve f_3 };
    i_5 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant not_unset { forall j : (int) . 0 <= j && j < UInt64.to_int i_5 -> not (Unset0.unset (Seq.get (Model0.model self_1) j) a_2) };
    assume { Resolve1.resolve _9 };
    _9 <- i_5;
    _11 <- Type.lib_clause_clause_Clause_rest self_1;
    _10 <- Len0.len _11;
    goto BB2
  }
  BB2 {
    _8 <- _9 < _10;
    switch (_8)
      | False -> goto BB8
      | _ -> goto BB3
      end
  }
  BB3 {
    _14 <- Type.lib_clause_clause_Clause_rest self_1;
    assume { Resolve1.resolve _15 };
    _15 <- i_5;
    _13 <- Index0.index _14 _15;
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve lit_12 };
    lit_12 <- _13;
    assume { Resolve3.resolve _13 };
    assume { Resolve2.resolve _18 };
    _18 <- lit_12;
    _19 <- a_2;
    _17 <- LitUnset0.lit_unset _18 _19;
    goto BB5
  }
  BB5 {
    switch (_17)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve4.resolve self_1 };
    assume { Resolve5.resolve a_2 };
    assume { Resolve1.resolve i_5 };
    assume { Resolve2.resolve _0 };
    _0 <- lit_12;
    assume { Resolve2.resolve lit_12 };
    return _0
  }
  BB7 {
    assume { Resolve2.resolve lit_12 };
    _16 <- ();
    assume { Resolve6.resolve _16 };
    i_5 <- i_5 + (1 : usize);
    _7 <- ();
    assume { Resolve6.resolve _7 };
    goto BB1
  }
  BB8 {
    assume { Resolve4.resolve self_1 };
    assume { Resolve5.resolve a_2 };
    assume { Resolve1.resolve i_5 };
    _6 <- ();
    assume { Resolve6.resolve _6 };
    absurd
  }
  
end
module Lib_Assignments_AssignmentsEquality_Interface
  use Type
  predicate assignments_equality (a : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments)
end
module Lib_Assignments_AssignmentsEquality
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate assignments_equality (a : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments) = 
    Seq.length (Model0.model a) = Seq.length (Model0.model a2) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model a) -> Seq.get (Model0.model a) i = Seq.get (Model0.model a2) i)
end
module Lib_Assignments_CompatibleInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate compatible_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module Lib_Assignments_CompatibleInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Lib_Logic_Unset_Interface as Unset0
  predicate compatible_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8) = 
    Seq.length a = Seq.length a2 && (forall i : (int) . 0 <= i && i < Seq.length a -> Unset0.unset (Seq.get a i) || Seq.get a i = Seq.get a2 i)
end
module Lib_Assignments_CompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate complete_inner (a : Seq.seq uint8)
end
module Lib_Assignments_CompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Lib_Logic_Unset_Interface as Unset0
  predicate complete_inner (a : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length a -> not (Unset0.unset (Seq.get a i))
end
module Lib_Assignments_CompatibleCompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate compatible_complete_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module Lib_Assignments_CompatibleCompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Assignments_CompleteInner_Interface as CompleteInner0
  clone Lib_Assignments_CompatibleInner_Interface as CompatibleInner0
  predicate compatible_complete_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8) = 
    CompatibleInner0.compatible_inner a a2 && CompleteInner0.complete_inner a2
end
module Lib_Assignments_AssignmentsInvariant_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  predicate assignments_invariant (a : Seq.seq uint8) (f : Type.lib_formula_formula)
end
module Lib_Assignments_AssignmentsInvariant
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  use mach.int.UInt64
  predicate assignments_invariant (a : Seq.seq uint8) (f : Type.lib_formula_formula) = 
    UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length a
end
module Lib_Assignments_Impl1_Compatible_Interface
  use Type
  predicate compatible (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments)
end
module Lib_Assignments_Impl1_Compatible
  use Type
  clone Lib_Assignments_CompatibleInner_Interface as CompatibleInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate compatible (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments) = 
    CompatibleInner0.compatible_inner (Model0.model self) (Model0.model a2)
end
module Lib_Assignments_Impl1_Complete_Interface
  use Type
  predicate complete (self : Type.lib_assignments_assignments)
end
module Lib_Assignments_Impl1_Complete
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate complete (self : Type.lib_assignments_assignments) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> not (Unset0.unset (Seq.get (Model0.model self) i))
end
module Lib_Assignments_Impl1_CompatibleComplete_Interface
  use Type
  predicate compatible_complete (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments)
end
module Lib_Assignments_Impl1_CompatibleComplete
  use Type
  clone Lib_Assignments_Impl1_Complete_Interface as Complete0
  clone Lib_Assignments_Impl1_Compatible_Interface as Compatible0
  predicate compatible_complete (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments) = 
    Compatible0.compatible self a2 && Complete0.complete a2
end
module Lib_Assignments_Impl2_Clone_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  val clone' [@cfg:stackify] (self : Type.lib_assignments_assignments) : Type.lib_assignments_assignments
    ensures { Seq.(==) (Model0.model self) (Model0.model result) }
    ensures { UInt64.to_int (Type.lib_assignments_assignments_Assignments_1 result) = UInt64.to_int (Type.lib_assignments_assignments_Assignments_1 self) }
    ensures { Seq.length (Model1.model self) = Seq.length (Model0.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model self) -> Seq.get (Model1.model self) i = Seq.get (Model0.model result) i }
    
end
module Lib_Assignments_Impl2_Clone
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  val clone' [@cfg:stackify] (self : Type.lib_assignments_assignments) : Type.lib_assignments_assignments
    ensures { Seq.(==) (Model0.model self) (Model0.model result) }
    ensures { UInt64.to_int (Type.lib_assignments_assignments_Assignments_1 result) = UInt64.to_int (Type.lib_assignments_assignments_Assignments_1 self) }
    ensures { Seq.length (Model1.model self) = Seq.length (Model0.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model self) -> Seq.get (Model1.model self) i = Seq.get (Model0.model result) i }
    
end
module CreusotContracts_Std1_Vec_Impl1_New_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val new [@cfg:stackify] () : Type.creusotcontracts_std1_vec_vec t
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Std1_Vec_Impl1_New
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  val new [@cfg:stackify] () : Type.creusotcontracts_std1_vec_vec t
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl1_Push_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val push [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (v : t) : ()
    ensures { Seq.get (Model0.model ( ^ self)) (Seq.length (Model0.model ( ^ self)) - 1) = v }
    ensures { Seq.length (Model1.model self) + 1 = Seq.length (Model0.model ( ^ self)) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model self) -> Seq.get (Model1.model self) i = Seq.get (Model0.model ( ^ self)) i }
    ensures { Model0.model ( ^ self) = Seq.snoc (Model1.model self) v }
    
end
module CreusotContracts_Std1_Vec_Impl1_Push
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  val push [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (v : t) : ()
    ensures { Seq.get (Model0.model ( ^ self)) (Seq.length (Model0.model ( ^ self)) - 1) = v }
    ensures { Seq.length (Model1.model self) + 1 = Seq.length (Model0.model ( ^ self)) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model self) -> Seq.get (Model1.model self) i = Seq.get (Model0.model ( ^ self)) i }
    ensures { Model0.model ( ^ self) = Seq.snoc (Model1.model self) v }
    
end
module Lib_Assignments_Impl2_New_Interface
  use prelude.Prelude
  use Type
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (f : Type.lib_formula_formula) : Type.lib_assignments_assignments
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result f }
    
end
module Lib_Assignments_Impl2_New
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model
  clone Lib_Lit_Impl0_Invariant as Invariant3
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model2 with function Model0.model = Model0.model
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.creusotcontracts_std1_vec_vec uint8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = ()
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = uint8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl1_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec uint8,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Push_Interface as Push0 with type t = uint8,
  function Model0.model = Model0.model, function Model1.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl1_New_Interface as New0 with type t = uint8, function Model0.model = Model0.model
  let rec cfg new [@cfg:stackify] (f : Type.lib_formula_formula) : Type.lib_assignments_assignments
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result f }
    
   = 
  var _0 : Type.lib_assignments_assignments;
  var f_1 : Type.lib_formula_formula;
  var assign_2 : Type.creusotcontracts_std1_vec_vec uint8;
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : ();
  var _10 : borrowed (Type.creusotcontracts_std1_vec_vec uint8);
  var _11 : ();
  var _12 : ();
  var _13 : ();
  var _14 : Type.creusotcontracts_std1_vec_vec uint8;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    assign_2 <- New0.new ();
    goto BB1
  }
  BB1 {
    i_3 <- (0 : usize);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant loop_invariant { 0 <= UInt64.to_int i_3 && UInt64.to_int i_3 <= UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f_1) };
    invariant length_invariant { Seq.length (Model0.model assign_2) = UInt64.to_int i_3 };
    assume { Resolve0.resolve _7 };
    _7 <- i_3;
    assume { Resolve0.resolve _8 };
    _8 <- Type.lib_formula_formula_Formula_num_vars f_1;
    _6 <- _7 < _8;
    switch (_6)
      | False -> goto BB6
      | _ -> goto BB4
      end
  }
  BB4 {
    _10 <- borrow_mut assign_2;
    assign_2 <-  ^ _10;
    _9 <- Push0.push _10 (2 : uint8);
    goto BB5
  }
  BB5 {
    i_3 <- i_3 + (1 : usize);
    _5 <- ();
    assume { Resolve1.resolve _5 };
    goto BB3
  }
  BB6 {
    assume { Resolve2.resolve f_1 };
    assume { Resolve0.resolve i_3 };
    _4 <- ();
    assume { Resolve1.resolve _4 };
    assume { Resolve3.resolve _14 };
    _14 <- assign_2;
    _0 <- Type.Lib_Assignments_Assignments _14 (0 : usize);
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module Lib_Decision_Impl0_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.lib_decision_decisions) (n : int)
end
module Lib_Decision_Impl0_Invariant
  use Type
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize
  predicate invariant' (self : Type.lib_decision_decisions) (n : int) = 
    Seq.length (Model0.model (Type.lib_decision_decisions_Decisions_lit_order self)) = n && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_decision_decisions_Decisions_lit_order self)) -> UInt64.to_int (Seq.get (Model0.model (Type.lib_decision_decisions_Decisions_lit_order self)) i) < n)
end
module Lib_Assignments_Impl2_FindUnassigned_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Assignments_Impl0_Model_Interface as Model1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Complete_Interface as Complete0
  clone Lib_Decision_Impl0_Invariant_Interface as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val find_unassigned [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (d : Type.lib_decision_decisions) (_f : Type.lib_formula_formula) : usize
    requires {Invariant0.invariant' d (Seq.length (Model0.model self))}
    requires {not (Complete0.complete ( * self))}
    requires {Invariant1.invariant' ( * self) _f}
    ensures { Invariant1.invariant' ( ^ self) _f }
    ensures { Model0.model self = Model1.model ( ^ self) }
    ensures { Unset0.unset (Seq.get (Model0.model self) (UInt64.to_int result)) }
    ensures { UInt64.to_int result < Seq.length (Model0.model self) }
    
end
module Lib_Assignments_Impl2_FindUnassigned
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model2 with function Model0.model = Model3.model
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model2.model,
  predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize
  clone Lib_Decision_Impl0_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.lib_decision_decisions
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = uint8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = uint8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec uint8,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len1 with type t = uint8, function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = uint8,
  function Model0.model = Model5.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = Type.creusotcontracts_std1_vec_vec usize,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = usize,
  function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = usize, function Model0.model = Model4.model
  let rec cfg find_unassigned [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (d : Type.lib_decision_decisions) (_f : Type.lib_formula_formula) : usize
    requires {Invariant0.invariant' d (Seq.length (Model1.model self))}
    requires {not (Complete0.complete ( * self))}
    requires {Invariant1.invariant' ( * self) _f}
    ensures { Invariant1.invariant' ( ^ self) _f }
    ensures { Model1.model self = Model2.model ( ^ self) }
    ensures { Unset0.unset (Seq.get (Model1.model self) (UInt64.to_int result)) }
    ensures { UInt64.to_int result < Seq.length (Model1.model self) }
    
   = 
  var _0 : usize;
  var self_1 : borrowed (Type.lib_assignments_assignments);
  var d_2 : Type.lib_decision_decisions;
  var _f_3 : Type.lib_formula_formula;
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.creusotcontracts_std1_vec_vec usize;
  var curr_11 : uint8;
  var _12 : uint8;
  var _13 : Type.creusotcontracts_std1_vec_vec uint8;
  var _14 : usize;
  var _15 : usize;
  var _16 : Type.creusotcontracts_std1_vec_vec usize;
  var _17 : usize;
  var _18 : ();
  var _19 : bool;
  var _20 : uint8;
  var _21 : ();
  var _22 : usize;
  var _23 : usize;
  var _24 : Type.creusotcontracts_std1_vec_vec usize;
  var _25 : usize;
  var _26 : ();
  var _27 : ();
  var _28 : ();
  var _29 : ();
  var _30 : bool;
  var _31 : usize;
  var _32 : usize;
  var _33 : Type.creusotcontracts_std1_vec_vec uint8;
  var _34 : ();
  var _35 : bool;
  var _36 : uint8;
  var _37 : uint8;
  var _38 : Type.creusotcontracts_std1_vec_vec uint8;
  var _39 : usize;
  var _40 : ();
  var _41 : ();
  var _42 : ();
  var _43 : ();
  var _44 : ();
  {
    self_1 <- self;
    d_2 <- d;
    _f_3 <- _f;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _f_3 };
    assume { Resolve1.resolve i_4 };
    i_4 <- Type.lib_assignments_assignments_Assignments_1 ( * self_1);
    goto BB1
  }
  BB1 {
    invariant i_bound { UInt64.to_int i_4 <= Seq.length (Model0.model (Type.lib_decision_decisions_Decisions_lit_order d_2)) };
    assume { Resolve1.resolve _8 };
    _8 <- i_4;
    _10 <- Type.lib_decision_decisions_Decisions_lit_order d_2;
    _9 <- Len0.len _10;
    goto BB2
  }
  BB2 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB9
      | _ -> goto BB3
      end
  }
  BB3 {
    _13 <- Type.lib_assignments_assignments_Assignments_0 ( * self_1);
    _16 <- Type.lib_decision_decisions_Decisions_lit_order d_2;
    assume { Resolve1.resolve _17 };
    _17 <- i_4;
    _15 <- Index0.index _16 _17;
    goto BB4
  }
  BB4 {
    assume { Resolve1.resolve _14 };
    _14 <- _15;
    assume { Resolve2.resolve _15 };
    _12 <- Index1.index _13 _14;
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve curr_11 };
    curr_11 <- _12;
    assume { Resolve4.resolve _12 };
    assume { Resolve3.resolve _20 };
    _20 <- curr_11;
    assume { Resolve3.resolve curr_11 };
    _19 <- _20 >= (2 : uint8);
    switch (_19)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve1.resolve _22 };
    _22 <- i_4;
    self_1 <- { self_1 with current = (let Type.Lib_Assignments_Assignments a b =  * self_1 in Type.Lib_Assignments_Assignments a (_22 + (1 : usize))) };
    assume { Resolve5.resolve self_1 };
    _24 <- Type.lib_decision_decisions_Decisions_lit_order d_2;
    assume { Resolve6.resolve d_2 };
    assume { Resolve1.resolve _25 };
    _25 <- i_4;
    assume { Resolve1.resolve i_4 };
    _23 <- Index0.index _24 _25;
    goto BB7
  }
  BB7 {
    assume { Resolve1.resolve _0 };
    _0 <- _23;
    assume { Resolve2.resolve _23 };
    goto BB17
  }
  BB8 {
    _18 <- ();
    assume { Resolve7.resolve _18 };
    i_4 <- i_4 + (1 : usize);
    _6 <- ();
    assume { Resolve7.resolve _6 };
    goto BB1
  }
  BB9 {
    assume { Resolve6.resolve d_2 };
    assume { Resolve1.resolve i_4 };
    _5 <- ();
    assume { Resolve7.resolve _5 };
    i_4 <- (0 : usize);
    goto BB10
  }
  BB10 {
    invariant prev { forall j : (int) . 0 <= j && j < UInt64.to_int i_4 -> not (Unset0.unset (Seq.get (Model1.model self_1) j)) };
    assume { Resolve1.resolve _31 };
    _31 <- i_4;
    _33 <- Type.lib_assignments_assignments_Assignments_0 ( * self_1);
    _32 <- Len1.len _33;
    goto BB11
  }
  BB11 {
    _30 <- _31 < _32;
    switch (_30)
      | False -> goto BB16
      | _ -> goto BB12
      end
  }
  BB12 {
    _38 <- Type.lib_assignments_assignments_Assignments_0 ( * self_1);
    assume { Resolve1.resolve _39 };
    _39 <- i_4;
    _37 <- Index1.index _38 _39;
    goto BB13
  }
  BB13 {
    assume { Resolve3.resolve _36 };
    _36 <- _37;
    assume { Resolve4.resolve _37 };
    _35 <- _36 >= (2 : uint8);
    switch (_35)
      | False -> goto BB15
      | _ -> goto BB14
      end
  }
  BB14 {
    assume { Resolve5.resolve self_1 };
    assume { Resolve1.resolve _0 };
    _0 <- i_4;
    assume { Resolve1.resolve i_4 };
    goto BB17
  }
  BB15 {
    _34 <- ();
    assume { Resolve7.resolve _34 };
    i_4 <- i_4 + (1 : usize);
    _6 <- ();
    assume { Resolve7.resolve _6 };
    goto BB10
  }
  BB16 {
    assume { Resolve5.resolve self_1 };
    assume { Resolve1.resolve i_4 };
    _29 <- ();
    assume { Resolve7.resolve _29 };
    absurd
  }
  BB17 {
    return _0
  }
  
end
module Lib_Formula_Impl1_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8)
end
module Lib_Formula_Impl1_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Lib_Clause_Impl1_SatInner_Interface as SatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate sat_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self)) -> SatInner0.sat_inner (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self)) i) a
end
module Lib_Formula_Impl1_EventuallySatCompleteInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate eventually_sat_complete_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8)
end
module Lib_Formula_Impl1_EventuallySatCompleteInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone Lib_Formula_Impl1_SatInner_Interface as SatInner0
  clone Lib_Assignments_CompatibleCompleteInner_Interface as CompatibleCompleteInner0
  predicate eventually_sat_complete_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8) = 
    exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars self) && CompatibleCompleteInner0.compatible_complete_inner a a2 && SatInner0.sat_inner self a2
end
module Lib_Formula_Impl1_EventuallySatComplete_Interface
  use Type
  predicate eventually_sat_complete (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_EventuallySatComplete
  use Type
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate eventually_sat_complete (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    EventuallySatCompleteInner0.eventually_sat_complete_inner self (Model0.model a)
end
module CreusotContracts_Logic_Ghost_Impl0_ModelTy
  type t   
  type modelTy  = 
    t
end
module CreusotContracts_Logic_Ghost_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Model
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0
  type t   
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module Lib_Logic_BoolToAssignedstate_Interface
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function bool_to_assignedstate (b : bool) : uint8
end
module Lib_Logic_BoolToAssignedstate
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function bool_to_assignedstate (b : bool) : uint8 = 
    if b then (1 : uint8) else (0 : uint8)
  axiom bool_to_assignedstate_spec : forall b : bool . (b -> UInt8.to_int (bool_to_assignedstate b) = 1) && (not b -> UInt8.to_int (bool_to_assignedstate b) = 0)
end
module Lib_Logic_BoolToAssignedstate_Impl
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  let rec ghost function bool_to_assignedstate (b : bool) : uint8
    ensures { not b -> UInt8.to_int result = 0 }
    ensures { b -> UInt8.to_int result = 1 }
    
   = 
    if b then (1 : uint8) else (0 : uint8)
end
module Lib_Logic_FlipV_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function flip_v (v : uint8) : uint8
end
module Lib_Logic_FlipV
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  function flip_v (v : uint8) : uint8 = 
    if UInt8.to_int v = 0 then (1 : uint8) else if UInt8.to_int v = 1 then (0 : uint8) else v
end
module Lib_Formula_Impl1_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8)
end
module Lib_Formula_Impl1_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Lib_Clause_Impl1_UnsatInner_Interface as UnsatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate unsat_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self)) && UnsatInner0.unsat_inner (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self)) i) a
end
module Lib_Logic_LemmaNotSatFormulaImpliesUnsatFormula_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  function lemma_not_sat_formula_implies_unsat_formula (f : Type.lib_formula_formula) (a : Seq.seq uint8) : ()
end
module Lib_Logic_LemmaNotSatFormulaImpliesUnsatFormula
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  function lemma_not_sat_formula_implies_unsat_formula (f : Type.lib_formula_formula) (a : Seq.seq uint8) : () = 
    ()
  axiom lemma_not_sat_formula_implies_unsat_formula_spec : forall f : Type.lib_formula_formula, a : Seq.seq uint8 . UnsatInner0.unsat_inner f a -> AssignmentsInvariant0.assignments_invariant a f -> Invariant0.invariant' f -> not (EventuallySatCompleteInner0.eventually_sat_complete_inner f a)
end
module Lib_Logic_LemmaNotSatFormulaImpliesUnsatFormula_Impl
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Lit_Impl0_SatInner as SatInner2
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Lit_Impl0_Invariant as Invariant2
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant1 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Lit_Impl0_UnsatInner as UnsatInner2
  clone Lib_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Assignments_AssignmentsInvariant as AssignmentsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  let rec ghost function lemma_not_sat_formula_implies_unsat_formula (f : Type.lib_formula_formula) (a : Seq.seq uint8) : ()
    requires {UnsatInner0.unsat_inner f a}
    requires {AssignmentsInvariant0.assignments_invariant a f}
    requires {Invariant0.invariant' f}
    ensures { not (EventuallySatCompleteInner0.eventually_sat_complete_inner f a) }
    
   = 
    ()
end
module Lib_Logic_LemmaCorrectPolarityMakesClauseSat_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Clause_Impl1_SatInner_Interface as SatInner0
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Clause_Impl0_Model_Interface as Model0
  function lemma_correctPolarityMakesClauseSat (c : Type.lib_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Lib_Logic_LemmaCorrectPolarityMakesClauseSat
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Clause_Impl1_SatInner_Interface as SatInner0
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Clause_Impl0_Model_Interface as Model0
  function lemma_correctPolarityMakesClauseSat (c : Type.lib_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
   = 
    ()
  axiom lemma_correctPolarityMakesClauseSat_spec : forall c : Type.lib_clause_clause, a : Seq.seq uint8, ix : int, v : uint8 . (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v) -> 0 <= ix && ix < Seq.length a -> SatInner0.sat_inner c (Seq.set a ix v)
end
module Lib_Logic_LemmaCorrectPolarityMakesClauseSat_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Lit_Impl0_SatInner as SatInner1
  clone Lib_Logic_BoolToAssignedstate as BoolToAssignedstate0 with axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  let rec ghost function lemma_correctPolarityMakesClauseSat (c : Type.lib_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v}
    requires {0 <= ix && ix < Seq.length a}
    ensures { SatInner0.sat_inner c (Seq.set a ix v) }
    
   = 
    ()
end
module Lib_Logic_LemmaIncorrectPolarityMakesClauseUnsat_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Clause_Impl1_UnsatInner_Interface as UnsatInner1
  clone Lib_Logic_FlipV_Interface as FlipV0
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Clause_Impl1_UnitInner_Interface as UnitInner0
  clone Lib_Clause_Impl1_SatInner_Interface as SatInner1
  clone Lib_Lit_Impl0_SatInner_Interface as SatInner0
  clone Lib_Clause_Impl1_Invariant_Interface as Invariant0
  clone Lib_Lit_Impl0_UnsatInner_Interface as UnsatInner0
  clone Lib_Clause_Impl0_Model_Interface as Model0
  function lemma_incorrectPolarityMakesClauseUnsat (c : Type.lib_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Lib_Logic_LemmaIncorrectPolarityMakesClauseUnsat
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Clause_Impl1_UnsatInner_Interface as UnsatInner1
  clone Lib_Logic_FlipV_Interface as FlipV0
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Clause_Impl1_UnitInner_Interface as UnitInner0
  clone Lib_Clause_Impl1_SatInner_Interface as SatInner1
  clone Lib_Lit_Impl0_SatInner_Interface as SatInner0
  clone Lib_Clause_Impl1_Invariant_Interface as Invariant0
  clone Lib_Lit_Impl0_UnsatInner_Interface as UnsatInner0
  clone Lib_Clause_Impl0_Model_Interface as Model0
  function lemma_incorrectPolarityMakesClauseUnsat (c : Type.lib_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
   = 
    ()
  axiom lemma_incorrectPolarityMakesClauseUnsat_spec : forall c : Type.lib_clause_clause, a : Seq.seq uint8, ix : int, v : uint8 . (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> UnsatInner0.unsat_inner (Seq.get (Model0.model c) j) a) -> Invariant0.invariant' c (Seq.length a) -> (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && SatInner0.sat_inner (Seq.get (Model0.model c) j) a) -> not (SatInner1.sat_inner c a) -> UnitInner0.unit_inner c a -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> not (Unset0.unset v) -> (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) -> not (Unset0.unset (Seq.get (Seq.set a ix v) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)))))) && not (Unset0.unset (Seq.get (Seq.set a ix (FlipV0.flip_v v)) ix)) && UnsatInner1.unsat_inner c (Seq.set a ix (FlipV0.flip_v v)) && not (SatInner1.sat_inner c (Seq.set a ix (FlipV0.flip_v v)))
end
module Lib_Logic_LemmaIncorrectPolarityMakesClauseUnsat_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Lit_Impl0_Invariant as Invariant1
  clone Lib_Logic_FlipV as FlipV0
  clone Lib_Logic_Unset as Unset0
  clone Lib_Lit_Impl0_UnsetInner as UnsetInner0
  clone Lib_Lit_Impl0_SatInner as SatInner0
  clone Lib_Lit_Impl0_UnsatInner as UnsatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model0.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner1.sat_inner, function Model0.model = Model0.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  let rec ghost function lemma_incorrectPolarityMakesClauseUnsat (c : Type.lib_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> UnsatInner0.unsat_inner (Seq.get (Model0.model c) j) a}
    requires {Invariant0.invariant' c (Seq.length a)}
    requires {exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && SatInner0.sat_inner (Seq.get (Model0.model c) j) a}
    requires {not (SatInner1.sat_inner c a)}
    requires {UnitInner0.unit_inner c a}
    requires {0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix)}
    requires {not (Unset0.unset v)}
    ensures { not (SatInner1.sat_inner c (Seq.set a ix (FlipV0.flip_v v))) }
    ensures { UnsatInner1.unsat_inner c (Seq.set a ix (FlipV0.flip_v v)) }
    ensures { not (Unset0.unset (Seq.get (Seq.set a ix (FlipV0.flip_v v)) ix)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) -> not (Unset0.unset (Seq.get (Seq.set a ix v) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j))))) }
    
   = 
    ()
end
module Lib_Logic_LemmaNotSatClauseImpliesUnsatFormula_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner1
  clone Lib_Clause_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Clause_Impl1_InFormula_Interface as InFormula0
  function lemma_not_sat_clause_implies_unsat_formula (f : Type.lib_formula_formula) (c : Type.lib_clause_clause) (a : Seq.seq uint8) : ()
    
end
module Lib_Logic_LemmaNotSatClauseImpliesUnsatFormula
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner1
  clone Lib_Clause_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Clause_Impl1_InFormula_Interface as InFormula0
  function lemma_not_sat_clause_implies_unsat_formula (f : Type.lib_formula_formula) (c : Type.lib_clause_clause) (a : Seq.seq uint8) : ()
    
   = 
    ()
  axiom lemma_not_sat_clause_implies_unsat_formula_spec : forall f : Type.lib_formula_formula, c : Type.lib_clause_clause, a : Seq.seq uint8 . InFormula0.in_formula c f -> UnsatInner0.unsat_inner c a -> UnsatInner1.unsat_inner f a
end
module Lib_Logic_LemmaNotSatClauseImpliesUnsatFormula_Impl
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Lit_Impl0_UnsatInner as UnsatInner2
  clone Lib_Clause_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Clause_Impl1_InFormula as InFormula0 with function Model0.model = Model0.model
  let rec ghost function lemma_not_sat_clause_implies_unsat_formula (f : Type.lib_formula_formula) (c : Type.lib_clause_clause) (a : Seq.seq uint8) : ()
    requires {InFormula0.in_formula c f}
    requires {UnsatInner0.unsat_inner c a}
    ensures { UnsatInner1.unsat_inner f a }
    
   = 
    ()
end
module Lib_Logic_LemmaUnitClauseLiteralFalseTauNotSatisfiable_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner1
  clone Lib_Logic_FlipV_Interface as FlipV0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Clause_Impl1_UnitInner_Interface as UnitInner0
  clone Lib_Clause_Impl1_InFormula_Interface as InFormula0
  clone Lib_Clause_Impl1_Invariant_Interface as Invariant0
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Lit_Impl0_UnsatInner_Interface as UnsatInner0
  clone Lib_Clause_Impl0_Model_Interface as Model0
  function lemma_unitClauseLiteralFalse_tauNotSatisfiable (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Lib_Logic_LemmaUnitClauseLiteralFalseTauNotSatisfiable
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner1
  clone Lib_Logic_FlipV_Interface as FlipV0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Clause_Impl1_UnitInner_Interface as UnitInner0
  clone Lib_Clause_Impl1_InFormula_Interface as InFormula0
  clone Lib_Clause_Impl1_Invariant_Interface as Invariant0
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Lit_Impl0_UnsatInner_Interface as UnsatInner0
  clone Lib_Clause_Impl0_Model_Interface as Model0
  clone Lib_Clause_Impl1_UnsatInner_Interface as UnsatInner2
  clone Lib_Lit_Impl0_SatInner_Interface as SatInner1
  clone Lib_Clause_Impl1_SatInner_Interface as SatInner0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Logic_LemmaNotSatFormulaImpliesUnsatFormula_Interface as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant1.invariant',
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  axiom .
  clone Lib_Logic_LemmaNotSatClauseImpliesUnsatFormula_Interface as LemmaNotSatClauseImpliesUnsatFormula0 with predicate InFormula0.in_formula = InFormula0.in_formula,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner,
  predicate UnsatInner1.unsat_inner = UnsatInner1.unsat_inner, axiom .
  clone Lib_Logic_LemmaIncorrectPolarityMakesClauseUnsat_Interface as LemmaIncorrectPolarityMakesClauseUnsat0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate SatInner0.sat_inner = SatInner1.sat_inner, predicate SatInner1.sat_inner = SatInner0.sat_inner,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner, predicate Unset0.unset = Unset0.unset,
  function FlipV0.flip_v = FlipV0.flip_v, predicate UnsatInner1.unsat_inner = UnsatInner2.unsat_inner, axiom .
  clone Lib_Logic_LemmaCorrectPolarityMakesClauseSat_Interface as LemmaCorrectPolarityMakesClauseSat0 with function Model0.model = Model0.model,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, axiom .
  function lemma_unitClauseLiteralFalse_tauNotSatisfiable (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
   = 
    let _ = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula f a in let _ = LemmaCorrectPolarityMakesClauseSat0.lemma_correctPolarityMakesClauseSat c a ix v in let _ = LemmaIncorrectPolarityMakesClauseUnsat0.lemma_incorrectPolarityMakesClauseUnsat c a ix v in let _ = LemmaNotSatClauseImpliesUnsatFormula0.lemma_not_sat_clause_implies_unsat_formula f c (Seq.set a ix (FlipV0.flip_v v)) in ()
  axiom lemma_unitClauseLiteralFalse_tauNotSatisfiable_spec : forall c : Type.lib_clause_clause, f : Type.lib_formula_formula, a : Seq.seq uint8, ix : int, v : uint8 . (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> UnsatInner0.unsat_inner (Seq.get (Model0.model c) j) a) -> (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v) -> Invariant0.invariant' c (Seq.length a) -> InFormula0.in_formula c f -> UnitInner0.unit_inner c a -> not (Unset0.unset v) -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length a -> Invariant1.invariant' f -> not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v))) && UnsatInner1.unsat_inner f (Seq.set a ix (FlipV0.flip_v v))
end
module Lib_Logic_LemmaUnitClauseLiteralFalseTauNotSatisfiable_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Lit_Impl0_Invariant as Invariant2
  clone Lib_Lit_Impl0_SatInner as SatInner2
  clone Lib_Assignments_AssignmentsInvariant as AssignmentsInvariant0
  clone Lib_Logic_FlipV as FlipV0
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Lit_Impl0_UnsetInner as UnsetInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Clause_Impl1_InFormula as InFormula0 with function Model0.model = Model2.model
  clone Lib_Logic_BoolToAssignedstate as BoolToAssignedstate0 with axiom .
  clone Lib_Lit_Impl0_UnsatInner as UnsatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_UnsatInner as UnsatInner2 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Logic_LemmaNotSatClauseImpliesUnsatFormula as LemmaNotSatClauseImpliesUnsatFormula0 with predicate InFormula0.in_formula = InFormula0.in_formula,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner,
  predicate UnsatInner1.unsat_inner = UnsatInner1.unsat_inner, axiom .
  clone Lib_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Formula_Impl1_SatInner as SatInner1 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Logic_LemmaCorrectPolarityMakesClauseSat as LemmaCorrectPolarityMakesClauseSat0 with function Model0.model = Model0.model,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, axiom .
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model0.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model0.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Lib_Clause_Impl1_Invariant as Invariant0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Logic_LemmaIncorrectPolarityMakesClauseUnsat as LemmaIncorrectPolarityMakesClauseUnsat0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate SatInner0.sat_inner = SatInner2.sat_inner, predicate SatInner1.sat_inner = SatInner0.sat_inner,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner, predicate Unset0.unset = Unset0.unset,
  function FlipV0.flip_v = FlipV0.flip_v, predicate UnsatInner1.unsat_inner = UnsatInner2.unsat_inner, axiom .
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant0.invariant'
  clone Lib_Logic_LemmaNotSatFormulaImpliesUnsatFormula as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant1.invariant',
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  axiom .
  let rec ghost function lemma_unitClauseLiteralFalse_tauNotSatisfiable (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> UnsatInner0.unsat_inner (Seq.get (Model0.model c) j) a}
    requires {exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v}
    requires {Invariant0.invariant' c (Seq.length a)}
    requires {InFormula0.in_formula c f}
    requires {UnitInner0.unit_inner c a}
    requires {not (Unset0.unset v)}
    requires {0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix)}
    requires {UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length a}
    requires {Invariant1.invariant' f}
    ensures { UnsatInner1.unsat_inner f (Seq.set a ix (FlipV0.flip_v v)) }
    ensures { not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v))) }
    
   = 
    let _ = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula f a in let _ = LemmaCorrectPolarityMakesClauseSat0.lemma_correctPolarityMakesClauseSat c a ix v in let _ = LemmaIncorrectPolarityMakesClauseUnsat0.lemma_incorrectPolarityMakesClauseUnsat c a ix v in let _ = let c' = let c' = FlipV0.flip_v v in Seq.set a ix c' in LemmaNotSatClauseImpliesUnsatFormula0.lemma_not_sat_clause_implies_unsat_formula f c c' in ()
end
module Lib_Logic_LemmaUnitForces_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Logic_FlipV_Interface as FlipV0
  function lemma_unit_forces (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Lib_Logic_LemmaUnitForces
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Logic_FlipV_Interface as FlipV0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Logic_LemmaNotSatFormulaImpliesUnsatFormula_Interface as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  axiom .
  function lemma_unit_forces (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
   = 
    let _ = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula f a in ()
  axiom lemma_unit_forces_spec : forall c : Type.lib_clause_clause, f : Type.lib_formula_formula, a : Seq.seq uint8, ix : int, v : uint8 . not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v))) -> EventuallySatCompleteInner0.eventually_sat_complete_inner f a -> not (Unset0.unset v) -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length a -> Invariant0.invariant' f -> EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v)
end
module Lib_Logic_LemmaUnitForces_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model
  clone Lib_Lit_Impl0_UnsatInner as UnsatInner2
  clone Lib_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Lit_Impl0_Invariant as Invariant2
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant1 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Lit_Impl0_SatInner as SatInner2
  clone Lib_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Assignments_AssignmentsInvariant as AssignmentsInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Logic_LemmaNotSatFormulaImpliesUnsatFormula as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant0.invariant',
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  axiom .
  clone Lib_Logic_FlipV as FlipV0
  let rec ghost function lemma_unit_forces (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v)))}
    requires {EventuallySatCompleteInner0.eventually_sat_complete_inner f a}
    requires {not (Unset0.unset v)}
    requires {0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix)}
    requires {UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length a}
    requires {Invariant0.invariant' f}
    ensures { EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v) }
    
   = 
    let _ = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula f a in ()
end
module Lib_Logic_LemmaExtensionSatBaseSat_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  function lemma_extensionSat_baseSat (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
end
module Lib_Logic_LemmaExtensionSatBaseSat
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  function lemma_extensionSat_baseSat (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : () = 
    ()
  axiom lemma_extensionSat_baseSat_spec : forall f : Type.lib_formula_formula, a : Seq.seq uint8, ix : int, v : uint8 . EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v) -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> EventuallySatCompleteInner0.eventually_sat_complete_inner f a
end
module Lib_Logic_LemmaExtensionSatBaseSat_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Lit_Impl0_SatInner as SatInner2
  clone Lib_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  let rec ghost function lemma_extensionSat_baseSat (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    requires {EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v)}
    requires {0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix)}
    ensures { EventuallySatCompleteInner0.eventually_sat_complete_inner f a }
    
   = 
    ()
end
module Lib_Logic_Pos_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function pos () : uint8
end
module Lib_Logic_Pos
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function pos () : uint8 = 
    (1 : uint8)
end
module Lib_Logic_Neg_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function neg () : uint8
end
module Lib_Logic_Neg
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function neg () : uint8 = 
    (0 : uint8)
end
module Lib_Logic_LemmaExtensionsUnsatBaseUnsat_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Logic_Neg_Interface as Neg0
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Logic_Pos_Interface as Pos0
  function lemma_extensionsUnsat_baseUnsat (a : Seq.seq uint8) (ix : int) (f : Type.lib_formula_formula) : ()
end
module Lib_Logic_LemmaExtensionsUnsatBaseUnsat
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Logic_Neg_Interface as Neg0
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Logic_Pos_Interface as Pos0
  clone Lib_Assignments_CompatibleInner_Interface as CompatibleInner0
  function lemma_extensionsUnsat_baseUnsat (a : Seq.seq uint8) (ix : int) (f : Type.lib_formula_formula) : () = 
    let _ = CompatibleInner0.compatible_inner a (Seq.set a ix (Pos0.pos ())) in let _ = CompatibleInner0.compatible_inner a (Seq.set a ix (Neg0.neg ())) in ()
  axiom lemma_extensionsUnsat_baseUnsat_spec : forall a : Seq.seq uint8, ix : int, f : Type.lib_formula_formula . not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Pos0.pos ()))) -> not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Neg0.neg ()))) -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> not (EventuallySatCompleteInner0.eventually_sat_complete_inner f a)
end
module Lib_Logic_LemmaExtensionsUnsatBaseUnsat_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Lit_Impl0_SatInner as SatInner2
  clone Lib_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Logic_Neg as Neg0
  clone Lib_Logic_Pos as Pos0
  let rec ghost function lemma_extensionsUnsat_baseUnsat (a : Seq.seq uint8) (ix : int) (f : Type.lib_formula_formula) : ()
    requires {not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Pos0.pos ())))}
    requires {not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Neg0.neg ())))}
    requires {0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix)}
    ensures { not (EventuallySatCompleteInner0.eventually_sat_complete_inner f a) }
    
   = 
    let _ = let b' = let c' = Pos0.pos () in Seq.set a ix c' in CompatibleInner0.compatible_inner a b' in let _ = let b' = let c' = Neg0.neg () in Seq.set a ix c' in CompatibleInner0.compatible_inner a b' in ()
end
module CreusotContracts_Logic_Ghost_Impl1_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Ghost_Impl1_Record
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = t,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index_mut = IndexMut0.index_mut
end
module Lib_Assignments_Impl2_UnitPropOnce_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Lib_Assignments_Impl1_Compatible_Interface as Compatible0
  clone Lib_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  val unit_prop_once [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (i : usize) (f : Type.lib_formula_formula) : bool
    requires {0 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
end
module Lib_Assignments_Impl2_UnitPropOnce
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model5 with function Model0.model = Model7.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model5.model
  clone Lib_Lit_Impl0_Invariant as Invariant3
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model5.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_clause_clause
  clone Lib_Clause_Impl1_InFormula as InFormula0 with function Model0.model = Model4.model
  clone Lib_Formula_Impl1_Invariant as Invariant2 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant0.invariant'
  clone Lib_Logic_Neg as Neg0
  clone Lib_Logic_Pos as Pos0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model3 with function Model0.model = Model6.model
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model3.model
  clone Lib_Lit_Impl0_UnsetInner as UnsetInner0
  clone Lib_Lit_Impl0_Unset as Unset0 with function Model0.model = Model3.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Lib_Clause_Impl0_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model5.model
  clone Lib_Lit_Impl0_SatInner as SatInner1
  clone Lib_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_SatInner as SatInner2 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Clause_Impl1_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model5.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Lib_Assignments_AssignmentsInvariant as AssignmentsInvariant0
  clone Lib_Logic_FlipV as FlipV0
  clone Lib_Logic_Unset as Unset1
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset1.unset
  clone Lib_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset1.unset
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model3.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Lib_Logic_LemmaExtensionsUnsatBaseUnsat as LemmaExtensionsUnsatBaseUnsat0 with function Pos0.pos = Pos0.pos,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  function Neg0.neg = Neg0.neg, predicate Unset0.unset = Unset1.unset,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner, axiom .
  clone Lib_Logic_LemmaExtensionSatBaseSat as LemmaExtensionSatBaseSat0 with predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  predicate Unset0.unset = Unset1.unset, axiom .
  clone Lib_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model3.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Lib_Lit_Impl0_UnsatInner as UnsatInner0
  clone Lib_Clause_Impl1_UnsatInner as UnsatInner2 with function Model0.model = Model5.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Logic_LemmaIncorrectPolarityMakesClauseUnsat as LemmaIncorrectPolarityMakesClauseUnsat0 with function Model0.model = Model5.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate SatInner0.sat_inner = SatInner1.sat_inner, predicate SatInner1.sat_inner = SatInner0.sat_inner,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner, predicate Unset0.unset = Unset1.unset,
  function FlipV0.flip_v = FlipV0.flip_v, predicate UnsatInner1.unsat_inner = UnsatInner2.unsat_inner, axiom .
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model4.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Logic_LemmaNotSatClauseImpliesUnsatFormula as LemmaNotSatClauseImpliesUnsatFormula0 with predicate InFormula0.in_formula = InFormula0.in_formula,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner,
  predicate UnsatInner1.unsat_inner = UnsatInner1.unsat_inner, axiom .
  clone Lib_Logic_LemmaNotSatFormulaImpliesUnsatFormula as LemmaNotSatFormulaImpliesUnsatFormula0 with predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant2.invariant',
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  axiom .
  clone Lib_Logic_LemmaUnitForces as LemmaUnitForces0 with function FlipV0.flip_v = FlipV0.flip_v,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  predicate Unset0.unset = Unset1.unset, predicate Invariant0.invariant' = Invariant2.invariant',
  function LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant, axiom .
  clone Lib_Logic_BoolToAssignedstate as BoolToAssignedstate0 with axiom .
  clone Lib_Logic_LemmaCorrectPolarityMakesClauseSat as LemmaCorrectPolarityMakesClauseSat0 with function Model0.model = Model5.model,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, axiom .
  clone Lib_Logic_LemmaUnitClauseLiteralFalseTauNotSatisfiable as LemmaUnitClauseLiteralFalseTauNotSatisfiable0 with function Model0.model = Model5.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner,
  function BoolToAssignedstate0.bool_to_assignedstate = BoolToAssignedstate0.bool_to_assignedstate,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate InFormula0.in_formula = InFormula0.in_formula,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner, predicate Unset0.unset = Unset1.unset,
  predicate Invariant1.invariant' = Invariant2.invariant', function FlipV0.flip_v = FlipV0.flip_v,
  predicate UnsatInner1.unsat_inner = UnsatInner1.unsat_inner,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner,
  function LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula = LemmaNotSatFormulaImpliesUnsatFormula0.lemma_not_sat_formula_implies_unsat_formula,
  function LemmaCorrectPolarityMakesClauseSat0.lemma_correctPolarityMakesClauseSat = LemmaCorrectPolarityMakesClauseSat0.lemma_correctPolarityMakesClauseSat,
  function LemmaIncorrectPolarityMakesClauseUnsat0.lemma_incorrectPolarityMakesClauseUnsat = LemmaIncorrectPolarityMakesClauseUnsat0.lemma_incorrectPolarityMakesClauseUnsat,
  function LemmaNotSatClauseImpliesUnsatFormula0.lemma_not_sat_clause_implies_unsat_formula = LemmaNotSatClauseImpliesUnsatFormula0.lemma_not_sat_clause_implies_unsat_formula,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, predicate SatInner1.sat_inner = SatInner1.sat_inner,
  predicate UnsatInner2.unsat_inner = UnsatInner2.unsat_inner, axiom .
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = borrowed (Type.lib_assignments_assignments)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve9 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy3 with type t = uint8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = bool
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = borrowed (Type.lib_assignments_assignments)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.lib_clause_clause,
  function Model0.model = Model8.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model10 with type t = Type.creusotcontracts_std1_vec_vec uint8,
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = uint8,
  function Model0.model = Model6.model, function Model1.model = Model10.model
  clone Lib_Clause_Impl1_Unit as Unit0 with function Model0.model = Model3.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone CreusotContracts_Logic_Model_Impl0_Model as Model9 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model3.model
  clone Lib_Clause_Impl2_GetUnit_Interface as GetUnit0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Unit0.unit = Unit0.unit,
  function Model0.model = Model9.model, predicate Unset0.unset = Unset1.unset, function Model1.model = Model2.model
  clone Lib_Clause_Impl2_CheckIfUnit_Interface as CheckIfUnit0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', function Model0.model = Model9.model,
  predicate Invariant2.invariant' = Invariant0.invariant', predicate Unit0.unit = Unit0.unit
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.lib_assignments_assignments),
  function Model0.model = Model0.model
  let rec cfg unit_prop_once [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (i : usize) (f : Type.lib_formula_formula) : bool
    requires {0 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model4.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant1.invariant' ( * self) f}
    requires {Invariant2.invariant' f}
    ensures { EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { Invariant1.invariant' ( ^ self) f }
    
   = 
  var _0 : bool;
  var self_1 : borrowed (Type.lib_assignments_assignments);
  var i_2 : usize;
  var f_3 : Type.lib_formula_formula;
  var _4 : ();
  var clause_5 : Type.lib_clause_clause;
  var _6 : Type.lib_clause_clause;
  var _7 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _8 : usize;
  var old_a_9 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments));
  var _10 : borrowed (Type.lib_assignments_assignments);
  var _11 : borrowed (Type.lib_assignments_assignments);
  var _12 : ();
  var _13 : ();
  var _14 : bool;
  var _15 : Type.lib_clause_clause;
  var _16 : Type.lib_assignments_assignments;
  var _17 : Type.lib_formula_formula;
  var _18 : ();
  var lit_19 : Type.lib_lit_lit;
  var _20 : Type.lib_clause_clause;
  var _21 : Type.lib_assignments_assignments;
  var _22 : Type.lib_formula_formula;
  var _23 : ();
  var _24 : ();
  var _25 : ();
  var _26 : ();
  var _27 : ();
  var _28 : bool;
  var _29 : borrowed uint8;
  var _30 : borrowed (Type.creusotcontracts_std1_vec_vec uint8);
  var _31 : usize;
  var _32 : borrowed uint8;
  var _33 : borrowed (Type.creusotcontracts_std1_vec_vec uint8);
  var _34 : usize;
  var _35 : ();
  var _36 : ();
  var _37 : ();
  var _38 : ();
  {
    self_1 <- self;
    i_2 <- i;
    f_3 <- f;
    goto BB0
  }
  BB0 {
    _7 <- Type.lib_formula_formula_Formula_clauses f_3;
    assume { Resolve0.resolve _8 };
    _8 <- i_2;
    assume { Resolve0.resolve i_2 };
    _6 <- Index0.index _7 _8;
    goto BB1
  }
  BB1 {
    clause_5 <- _6;
    assume { Resolve1.resolve _6 };
    _11 <- self_1;
    _10 <- _11;
    assume { Resolve2.resolve _11 };
    old_a_9 <- Record0.record _10;
    goto BB2
  }
  BB2 {
    assume { Resolve3.resolve old_a_9 };
    assert {  ^ self_1 =  ^ Model0.model old_a_9 };
    _12 <- ();
    assume { Resolve4.resolve _12 };
    _15 <- clause_5;
    _16 <-  * self_1;
    _17 <- f_3;
    _14 <- CheckIfUnit0.check_if_unit _15 _16 _17;
    goto BB3
  }
  BB3 {
    switch (_14)
      | False -> goto BB11
      | _ -> goto BB4
      end
  }
  BB4 {
    _20 <- clause_5;
    assume { Resolve1.resolve clause_5 };
    _21 <-  * self_1;
    _22 <- f_3;
    assume { Resolve5.resolve f_3 };
    lit_19 <- GetUnit0.get_unit _20 _21 _22;
    goto BB5
  }
  BB5 {
    assert { Invariant0.invariant' clause_5 (Seq.length (Model1.model self_1)) };
    _23 <- ();
    assume { Resolve4.resolve _23 };
    assert { let _ = LemmaUnitClauseLiteralFalseTauNotSatisfiable0.lemma_unitClauseLiteralFalse_tauNotSatisfiable clause_5 f_3 (Model1.model self_1) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit_19)) (BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity lit_19)) in true };
    _24 <- ();
    assume { Resolve4.resolve _24 };
    assert { forall j : (int) . 0 <= j && j < Seq.length (Model2.model clause_5) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model2.model clause_5) j)) = UInt64.to_int (Type.lib_lit_lit_Lit_idx lit_19)) -> not (Unset0.unset (Seq.get (Model2.model clause_5) j) ( * self_1)) };
    _25 <- ();
    assume { Resolve4.resolve _25 };
    assert { let _ = LemmaUnitForces0.lemma_unit_forces clause_5 f_3 (Model1.model self_1) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit_19)) (BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity lit_19)) in true };
    _26 <- ();
    assume { Resolve4.resolve _26 };
    assume { Resolve6.resolve _28 };
    _28 <- Type.lib_lit_lit_Lit_polarity lit_19;
    switch (_28)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB6 {
    _30 <- borrow_mut (Type.lib_assignments_assignments_Assignments_0 ( * self_1));
    self_1 <- { self_1 with current = (let Type.Lib_Assignments_Assignments a b =  * self_1 in Type.Lib_Assignments_Assignments ( ^ _30) b) };
    assume { Resolve7.resolve self_1 };
    assume { Resolve0.resolve _31 };
    _31 <- Type.lib_lit_lit_Lit_idx lit_19;
    assume { Resolve8.resolve lit_19 };
    _29 <- IndexMut0.index_mut _30 _31;
    goto BB7
  }
  BB7 {
    _29 <- { _29 with current = (1 : uint8) };
    assume { Resolve9.resolve _29 };
    _27 <- ();
    assume { Resolve4.resolve _27 };
    goto BB10
  }
  BB8 {
    _33 <- borrow_mut (Type.lib_assignments_assignments_Assignments_0 ( * self_1));
    self_1 <- { self_1 with current = (let Type.Lib_Assignments_Assignments a b =  * self_1 in Type.Lib_Assignments_Assignments ( ^ _33) b) };
    assume { Resolve7.resolve self_1 };
    assume { Resolve0.resolve _34 };
    _34 <- Type.lib_lit_lit_Lit_idx lit_19;
    assume { Resolve8.resolve lit_19 };
    _32 <- IndexMut0.index_mut _33 _34;
    goto BB9
  }
  BB9 {
    _32 <- { _32 with current = (0 : uint8) };
    assume { Resolve9.resolve _32 };
    _27 <- ();
    assume { Resolve4.resolve _27 };
    goto BB10
  }
  BB10 {
    assert { Seq.(==) (Model3.model ( ^ self_1)) (Seq.set (Model3.model ( * Model0.model old_a_9)) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit_19)) (BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity lit_19))) };
    _35 <- ();
    assume { Resolve4.resolve _35 };
    assert { let _ = LemmaExtensionSatBaseSat0.lemma_extensionSat_baseSat f_3 (Model1.model (Model0.model old_a_9)) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit_19)) (BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity lit_19)) in true };
    _36 <- ();
    assume { Resolve4.resolve _36 };
    assert { let _ = LemmaExtensionsUnsatBaseUnsat0.lemma_extensionsUnsat_baseUnsat (Model1.model (Model0.model old_a_9)) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit_19)) f_3 in true };
    _37 <- ();
    assume { Resolve4.resolve _37 };
    assert {  ^ self_1 =  ^ Model0.model old_a_9 };
    _38 <- ();
    assume { Resolve4.resolve _38 };
    _0 <- true;
    goto BB12
  }
  BB11 {
    assume { Resolve7.resolve self_1 };
    assume { Resolve5.resolve f_3 };
    assume { Resolve1.resolve clause_5 };
    _13 <- ();
    assume { Resolve4.resolve _13 };
    _0 <- false;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Lib_Assignments_Impl2_UnitPropagate_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Lib_Assignments_Impl1_Compatible_Interface as Compatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val unit_propagate [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (f : Type.lib_formula_formula) : bool
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete f ( ^ self) = EventuallySatComplete0.eventually_sat_complete f ( * self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
end
module Lib_Assignments_Impl2_UnitPropagate
  use prelude.Prelude
  use Type
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model4.model
  clone Lib_Lit_Impl0_SatInner as SatInner2
  clone Lib_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Lit_Impl0_Invariant as Invariant3
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model1.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model1.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = borrowed (Type.lib_assignments_assignments)
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = bool
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.lib_assignments_assignments)
  clone CreusotContracts_Logic_Model_Impl0_Model as Model6 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_clause_clause,
  function Model0.model = Model6.model
  clone Lib_Assignments_Impl2_UnitPropOnce_Interface as UnitPropOnce0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
  predicate Compatible0.compatible = Compatible0.compatible
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.lib_assignments_assignments),
  function Model0.model = Model0.model
  let rec cfg unit_propagate [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (f : Type.lib_formula_formula) : bool
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete f ( ^ self) = EventuallySatComplete0.eventually_sat_complete f ( * self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
   = 
  var _0 : bool;
  var self_1 : borrowed (Type.lib_assignments_assignments);
  var f_2 : Type.lib_formula_formula;
  var _3 : ();
  var old_a_4 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments));
  var _5 : borrowed (Type.lib_assignments_assignments);
  var _6 : borrowed (Type.lib_assignments_assignments);
  var i_7 : usize;
  var out_8 : bool;
  var _9 : ();
  var _10 : ();
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _15 : ();
  var _16 : bool;
  var _17 : borrowed (Type.lib_assignments_assignments);
  var _18 : usize;
  var _19 : Type.lib_formula_formula;
  var _20 : ();
  var _21 : ();
  var _22 : ();
  {
    self_1 <- self;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    _6 <- self_1;
    _5 <- _6;
    assume { Resolve0.resolve _6 };
    old_a_4 <- Record0.record _5;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_a_4 };
    i_7 <- (0 : usize);
    out_8 <- false;
    goto BB2
  }
  BB2 {
    invariant ai { Invariant0.invariant' ( * self_1) f_2 };
    invariant proph {  ^ self_1 =  ^ Model0.model old_a_4 };
    invariant compat { Compatible0.compatible ( * Model0.model old_a_4) ( * self_1) };
    invariant maintains_sat { EventuallySatComplete0.eventually_sat_complete f_2 ( * Model0.model old_a_4) = EventuallySatComplete0.eventually_sat_complete f_2 ( * self_1) };
    assume { Resolve2.resolve _12 };
    _12 <- i_7;
    _14 <- Type.lib_formula_formula_Formula_clauses f_2;
    _13 <- Len0.len _14;
    goto BB3
  }
  BB3 {
    _11 <- _12 < _13;
    switch (_11)
      | False -> goto BB9
      | _ -> goto BB4
      end
  }
  BB4 {
    _17 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _17) };
    assume { Resolve2.resolve _18 };
    _18 <- i_7;
    _19 <- f_2;
    _16 <- UnitPropOnce0.unit_prop_once _17 _18 _19;
    goto BB5
  }
  BB5 {
    switch (_16)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve3.resolve out_8 };
    out_8 <- true;
    _15 <- ();
    assume { Resolve4.resolve _15 };
    goto BB8
  }
  BB7 {
    _15 <- ();
    assume { Resolve4.resolve _15 };
    goto BB8
  }
  BB8 {
    i_7 <- i_7 + (1 : usize);
    _10 <- ();
    assume { Resolve4.resolve _10 };
    goto BB2
  }
  BB9 {
    assume { Resolve5.resolve self_1 };
    assume { Resolve6.resolve f_2 };
    assume { Resolve2.resolve i_7 };
    _9 <- ();
    assume { Resolve4.resolve _9 };
    assume { Resolve3.resolve _0 };
    _0 <- out_8;
    assume { Resolve3.resolve out_8 };
    return _0
  }
  
end
module Lib_Assignments_Impl2_DoUnitPropagation_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Lib_Assignments_Impl1_Compatible_Interface as Compatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val do_unit_propagation [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (f : Type.lib_formula_formula) : ()
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
end
module Lib_Assignments_Impl2_DoUnitPropagation
  use prelude.Prelude
  use Type
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model4.model
  clone Lib_Lit_Impl0_SatInner as SatInner2
  clone Lib_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Lit_Impl0_Invariant as Invariant3
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model1.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model1.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = borrowed (Type.lib_assignments_assignments)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.lib_assignments_assignments)
  clone Lib_Assignments_Impl2_UnitPropagate_Interface as UnitPropagate0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Compatible0.compatible = Compatible0.compatible,
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.lib_assignments_assignments),
  function Model0.model = Model0.model
  let rec cfg do_unit_propagation [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (f : Type.lib_formula_formula) : ()
    requires {Invariant0.invariant' ( * self) f}
    requires {Invariant1.invariant' f}
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete f ( * self) = EventuallySatComplete0.eventually_sat_complete f ( ^ self) }
    ensures { Invariant0.invariant' ( ^ self) f }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.lib_assignments_assignments);
  var f_2 : Type.lib_formula_formula;
  var old_a_3 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments));
  var _4 : borrowed (Type.lib_assignments_assignments);
  var _5 : borrowed (Type.lib_assignments_assignments);
  var _6 : ();
  var _7 : bool;
  var _8 : borrowed (Type.lib_assignments_assignments);
  var _9 : Type.lib_formula_formula;
  var _10 : ();
  var _11 : ();
  var _12 : ();
  {
    self_1 <- self;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    _5 <- self_1;
    _4 <- _5;
    assume { Resolve0.resolve _5 };
    old_a_3 <- Record0.record _4;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_a_3 };
    goto BB2
  }
  BB2 {
    invariant ai { Invariant0.invariant' ( * self_1) f_2 };
    invariant proph {  ^ self_1 =  ^ Model0.model old_a_3 };
    invariant compat { Compatible0.compatible ( * Model0.model old_a_3) ( * self_1) };
    invariant maintains_sat { EventuallySatComplete0.eventually_sat_complete f_2 ( * Model0.model old_a_3) -> EventuallySatComplete0.eventually_sat_complete f_2 ( * self_1) };
    _8 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _8) };
    _9 <- f_2;
    _7 <- UnitPropagate0.unit_propagate _8 _9;
    goto BB3
  }
  BB3 {
    switch (_7)
      | False -> goto BB5
      | _ -> goto BB4
      end
  }
  BB4 {
    _6 <- ();
    assume { Resolve2.resolve _6 };
    goto BB2
  }
  BB5 {
    assume { Resolve3.resolve self_1 };
    assume { Resolve4.resolve f_2 };
    _0 <- ();
    return _0
  }
  
end
module Lib_Formula_Impl4_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.lib_formula_satstate) : Type.lib_formula_satstate
end
module Lib_Formula_Impl4_Clone
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_formula_satstate
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_satstate
  let rec cfg clone' [@cfg:stackify] (self : Type.lib_formula_satstate) : Type.lib_formula_satstate = 
  var _0 : Type.lib_formula_satstate;
  var self_1 : Type.lib_formula_satstate;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- self_1;
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module Lib_Formula_Impl4
  use Type
  clone Lib_Formula_Impl4_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.lib_formula_satstate,
  val clone' = Clone0.clone'
end
module Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface
  type self   
  use prelude.Prelude
  val assert_receiver_is_total_eq [@cfg:stackify] (self : self) : ()
    requires {false}
    
end
module Core_Cmp_Eq_AssertReceiverIsTotalEq
  type self   
  use prelude.Prelude
  val assert_receiver_is_total_eq [@cfg:stackify] (self : self) : ()
    requires {false}
    
end
module Lib_Formula_Impl6_AssertReceiverIsTotalEq_Interface
  use prelude.Prelude
  use Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Type.lib_formula_satstate) : ()
end
module Lib_Formula_Impl6_AssertReceiverIsTotalEq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_satstate
  let rec cfg assert_receiver_is_total_eq [@cfg:stackify] (self : Type.lib_formula_satstate) : () = 
  var _0 : ();
  var self_1 : Type.lib_formula_satstate;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module Lib_Formula_Impl6
  use Type
  clone Lib_Formula_Impl6_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Type.lib_formula_satstate,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Lib_Formula_Impl1_EventuallySatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate eventually_sat_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8)
end
module Lib_Formula_Impl1_EventuallySatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone Lib_Formula_Impl1_SatInner_Interface as SatInner0
  clone Lib_Assignments_CompatibleInner_Interface as CompatibleInner0
  predicate eventually_sat_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8) = 
    exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars self) && CompatibleInner0.compatible_inner a a2 && SatInner0.sat_inner self a2
end
module Lib_Formula_Impl1_EventuallySat_Interface
  use Type
  predicate eventually_sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_EventuallySat
  use Type
  clone Lib_Formula_Impl1_EventuallySatInner_Interface as EventuallySatInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate eventually_sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    EventuallySatInner0.eventually_sat_inner self (Model0.model a)
end
module Lib_Formula_Impl1_Sat_Interface
  use Type
  predicate sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_Sat
  use Type
  clone Lib_Formula_Impl1_SatInner_Interface as SatInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    SatInner0.sat_inner self (Model0.model a)
end
module Lib_Formula_Impl1_Unsat_Interface
  use Type
  predicate unsat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_Unsat
  use Type
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate unsat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    UnsatInner0.unsat_inner self (Model0.model a)
end
module Lib_SolverDpll_IsClauseUnsat_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone Lib_Clause_Impl1_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  val is_clause_unsat [@cfg:stackify] (f : Type.lib_formula_formula) (idx : usize) (a : Type.lib_assignments_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Unsat0.unsat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
end
module Lib_SolverDpll_IsClauseUnsat
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Lib_Lit_Impl0_Invariant as Invariant3
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model3 with function Model0.model = Model5.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model2 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Lit_Impl0_UnsatInner as UnsatInner0
  clone Lib_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Clause_Impl1_Unsat as Unsat1 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Lit_Impl0_Unsat as Unsat0 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.lib_assignments_assignments
  clone Lib_Assignments_Impl0_ModelTy as ModelTy3
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = Type.lib_lit_lit,
  function Model0.model = Model7.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_lit_lit,
  function Model0.model = Model7.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model6 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.lib_clause_clause,
  function Model0.model = Model6.model
  clone Lib_Lit_Impl1_LitUnsat_Interface as LitUnsat0 with function Model0.model = Model8.model,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Unsat0.unsat = Unsat0.unsat
  let rec cfg is_clause_unsat [@cfg:stackify] (f : Type.lib_formula_formula) (idx : usize) (a : Type.lib_assignments_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Unsat1.unsat (Seq.get (Model1.model (Type.lib_formula_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
   = 
  var _0 : bool;
  var f_1 : Type.lib_formula_formula;
  var idx_2 : usize;
  var a_3 : Type.lib_assignments_assignments;
  var _4 : ();
  var clause_5 : Type.lib_clause_clause;
  var _6 : Type.lib_clause_clause;
  var _7 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _8 : usize;
  var i_9 : usize;
  var _10 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _16 : ();
  var _17 : bool;
  var _18 : bool;
  var _19 : Type.lib_lit_lit;
  var _20 : Type.lib_lit_lit;
  var _21 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _22 : usize;
  var _23 : Type.lib_assignments_assignments;
  var _24 : ();
  var _25 : ();
  var _26 : ();
  var _27 : ();
  {
    f_1 <- f;
    idx_2 <- idx;
    a_3 <- a;
    goto BB0
  }
  BB0 {
    _7 <- Type.lib_formula_formula_Formula_clauses f_1;
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve _8 };
    _8 <- idx_2;
    assume { Resolve1.resolve idx_2 };
    _6 <- Index0.index _7 _8;
    goto BB1
  }
  BB1 {
    clause_5 <- _6;
    assume { Resolve2.resolve _6 };
    i_9 <- (0 : usize);
    goto BB2
  }
  BB2 {
    invariant previous { forall j : (int) . 0 <= j && j < UInt64.to_int i_9 -> Unsat0.unsat (Seq.get (Model0.model clause_5) j) a_3 };
    assume { Resolve1.resolve _13 };
    _13 <- i_9;
    _15 <- Type.lib_clause_clause_Clause_rest clause_5;
    _14 <- Len0.len _15;
    goto BB3
  }
  BB3 {
    _12 <- _13 < _14;
    switch (_12)
      | False -> goto BB9
      | _ -> goto BB4
      end
  }
  BB4 {
    _21 <- Type.lib_clause_clause_Clause_rest clause_5;
    assume { Resolve1.resolve _22 };
    _22 <- i_9;
    _20 <- Index1.index _21 _22;
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _19 };
    _19 <- _20;
    assume { Resolve4.resolve _20 };
    _23 <- a_3;
    _18 <- LitUnsat0.lit_unsat _19 _23;
    goto BB6
  }
  BB6 {
    _17 <- not _18;
    switch (_17)
      | False -> goto BB8
      | _ -> goto BB7
      end
  }
  BB7 {
    assume { Resolve5.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _0 <- false;
    goto BB10
  }
  BB8 {
    _16 <- ();
    assume { Resolve6.resolve _16 };
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    assume { Resolve6.resolve _11 };
    goto BB2
  }
  BB9 {
    assume { Resolve5.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _10 <- ();
    assume { Resolve6.resolve _10 };
    _0 <- true;
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module Lib_Formula_Impl2_IsUnsat_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val is_unsat [@cfg:stackify] (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Unsat0.unsat self a }
    
end
module Lib_Formula_Impl2_IsUnsat
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Lib_Lit_Impl0_Invariant as Invariant3
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Lit_Impl0_UnsatInner as UnsatInner2
  clone Lib_Clause_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Formula_Impl1_Unsat as Unsat1 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_formula_formula
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_clause_clause,
  function Model0.model = Model5.model
  clone Lib_SolverDpll_IsClauseUnsat_Interface as IsClauseUnsat0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Unsat0.unsat = Unsat0.unsat
  let rec cfg is_unsat [@cfg:stackify] (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Unsat1.unsat self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.lib_formula_formula;
  var a_2 : Type.lib_assignments_assignments;
  var _3 : ();
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _11 : ();
  var _12 : bool;
  var _13 : Type.lib_formula_formula;
  var _14 : usize;
  var _15 : Type.lib_assignments_assignments;
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var _19 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant prev { forall k : (int) . 0 <= k && k < UInt64.to_int i_4 -> not (Unsat0.unsat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self_1)) k) a_2) };
    assume { Resolve0.resolve _8 };
    _8 <- i_4;
    _10 <- Type.lib_formula_formula_Formula_clauses self_1;
    _9 <- Len0.len _10;
    goto BB2
  }
  BB2 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB7
      | _ -> goto BB3
      end
  }
  BB3 {
    _13 <- self_1;
    assume { Resolve0.resolve _14 };
    _14 <- i_4;
    _15 <- a_2;
    _12 <- IsClauseUnsat0.is_clause_unsat _13 _14 _15;
    goto BB4
  }
  BB4 {
    switch (_12)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve0.resolve i_4 };
    _0 <- true;
    goto BB8
  }
  BB6 {
    _11 <- ();
    assume { Resolve3.resolve _11 };
    i_4 <- i_4 + (1 : usize);
    _6 <- ();
    assume { Resolve3.resolve _6 };
    goto BB1
  }
  BB7 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve0.resolve i_4 };
    _5 <- ();
    assume { Resolve3.resolve _5 };
    _0 <- false;
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module Lib_SolverDpll_IsClauseSat_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone Lib_Clause_Impl1_Sat_Interface as Sat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  val is_clause_sat [@cfg:stackify] (f : Type.lib_formula_formula) (idx : usize) (a : Type.lib_assignments_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Sat0.sat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
end
module Lib_SolverDpll_IsClauseSat
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Lib_Lit_Impl0_Invariant as Invariant3
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model3 with function Model0.model = Model5.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model2 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Lit_Impl0_SatInner as SatInner0
  clone Lib_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Clause_Impl1_Sat as Sat1 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Lit_Impl0_Sat as Sat0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Clause_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.lib_assignments_assignments
  clone Lib_Assignments_Impl0_ModelTy as ModelTy3
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = Type.lib_lit_lit,
  function Model0.model = Model7.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_lit_lit,
  function Model0.model = Model7.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model6 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.lib_clause_clause,
  function Model0.model = Model6.model
  clone Lib_Lit_Impl1_LitSat_Interface as LitSat0 with function Model0.model = Model8.model,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Sat0.sat = Sat0.sat
  let rec cfg is_clause_sat [@cfg:stackify] (f : Type.lib_formula_formula) (idx : usize) (a : Type.lib_assignments_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Sat1.sat (Seq.get (Model1.model (Type.lib_formula_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
   = 
  var _0 : bool;
  var f_1 : Type.lib_formula_formula;
  var idx_2 : usize;
  var a_3 : Type.lib_assignments_assignments;
  var _4 : ();
  var clause_5 : Type.lib_clause_clause;
  var _6 : Type.lib_clause_clause;
  var _7 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _8 : usize;
  var i_9 : usize;
  var _10 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _16 : ();
  var _17 : bool;
  var _18 : Type.lib_lit_lit;
  var _19 : Type.lib_lit_lit;
  var _20 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _21 : usize;
  var _22 : Type.lib_assignments_assignments;
  var _23 : ();
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    f_1 <- f;
    idx_2 <- idx;
    a_3 <- a;
    goto BB0
  }
  BB0 {
    _7 <- Type.lib_formula_formula_Formula_clauses f_1;
    assume { Resolve0.resolve f_1 };
    assume { Resolve1.resolve _8 };
    _8 <- idx_2;
    assume { Resolve1.resolve idx_2 };
    _6 <- Index0.index _7 _8;
    goto BB1
  }
  BB1 {
    clause_5 <- _6;
    assume { Resolve2.resolve _6 };
    i_9 <- (0 : usize);
    goto BB2
  }
  BB2 {
    invariant previous { forall j : (int) . 0 <= j && j < UInt64.to_int i_9 -> not (Sat0.sat (Seq.get (Model0.model clause_5) j) a_3) };
    assume { Resolve1.resolve _13 };
    _13 <- i_9;
    _15 <- Type.lib_clause_clause_Clause_rest clause_5;
    _14 <- Len0.len _15;
    goto BB3
  }
  BB3 {
    _12 <- _13 < _14;
    switch (_12)
      | False -> goto BB9
      | _ -> goto BB4
      end
  }
  BB4 {
    _20 <- Type.lib_clause_clause_Clause_rest clause_5;
    assume { Resolve1.resolve _21 };
    _21 <- i_9;
    _19 <- Index1.index _20 _21;
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _18 };
    _18 <- _19;
    assume { Resolve4.resolve _19 };
    _22 <- a_3;
    _17 <- LitSat0.lit_sat _18 _22;
    goto BB6
  }
  BB6 {
    switch (_17)
      | False -> goto BB8
      | _ -> goto BB7
      end
  }
  BB7 {
    assume { Resolve5.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _0 <- true;
    goto BB10
  }
  BB8 {
    _16 <- ();
    assume { Resolve6.resolve _16 };
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    assume { Resolve6.resolve _11 };
    goto BB2
  }
  BB9 {
    assume { Resolve5.resolve a_3 };
    assume { Resolve2.resolve clause_5 };
    assume { Resolve1.resolve i_9 };
    _10 <- ();
    assume { Resolve6.resolve _10 };
    _0 <- false;
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module Lib_Formula_Impl2_IsSat_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val is_sat [@cfg:stackify] (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Sat0.sat self a }
    
end
module Lib_Formula_Impl2_IsSat
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Lib_Lit_Impl0_Invariant as Invariant3
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Lit_Impl0_SatInner as SatInner2
  clone Lib_Clause_Impl1_SatInner as SatInner0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner1 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Sat as Sat1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_formula_formula
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_clause_clause,
  function Model0.model = Model5.model
  clone Lib_SolverDpll_IsClauseSat_Interface as IsClauseSat0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Sat0.sat = Sat0.sat
  let rec cfg is_sat [@cfg:stackify] (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Sat1.sat self a }
    
   = 
  var _0 : bool;
  var self_1 : Type.lib_formula_formula;
  var a_2 : Type.lib_assignments_assignments;
  var _3 : ();
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : Type.lib_formula_formula;
  var _15 : usize;
  var _16 : Type.lib_assignments_assignments;
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var _20 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant prev { forall k : (int) . 0 <= k && k < UInt64.to_int i_4 -> Sat0.sat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self_1)) k) a_2 };
    assume { Resolve0.resolve _8 };
    _8 <- i_4;
    _10 <- Type.lib_formula_formula_Formula_clauses self_1;
    _9 <- Len0.len _10;
    goto BB2
  }
  BB2 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB7
      | _ -> goto BB3
      end
  }
  BB3 {
    _14 <- self_1;
    assume { Resolve0.resolve _15 };
    _15 <- i_4;
    _16 <- a_2;
    _13 <- IsClauseSat0.is_clause_sat _14 _15 _16;
    goto BB4
  }
  BB4 {
    _12 <- not _13;
    switch (_12)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve0.resolve i_4 };
    _0 <- false;
    goto BB8
  }
  BB6 {
    _11 <- ();
    assume { Resolve3.resolve _11 };
    i_4 <- i_4 + (1 : usize);
    _6 <- ();
    assume { Resolve3.resolve _6 };
    goto BB1
  }
  BB7 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve0.resolve i_4 };
    _5 <- ();
    assume { Resolve3.resolve _5 };
    _0 <- true;
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module Lib_Formula_Impl2_Eval_Interface
  use Type
  use prelude.Prelude
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Assignments_Impl1_Complete_Interface as Complete0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val eval [@cfg:stackify] (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : Type.lib_formula_satstate
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Type.Lib_Formula_SatState_Unknown -> not (Complete0.complete a) }
    ensures { (result = Type.Lib_Formula_SatState_Unsat) = Unsat0.unsat self a }
    ensures { (result = Type.Lib_Formula_SatState_Sat) = Sat0.sat self a }
    
end
module Lib_Formula_Impl2_Eval
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model
  clone Lib_Lit_Impl0_SatInner as SatInner2
  clone Lib_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Lit_Impl0_UnsatInner as UnsatInner2
  clone Lib_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Lit_Impl0_Invariant as Invariant3
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model0.model,
  predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_formula
  clone Lib_Formula_Impl2_IsUnsat_Interface as IsUnsat0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Unsat0.unsat = Unsat0.unsat
  clone Lib_Formula_Impl2_IsSat_Interface as IsSat0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Sat0.sat = Sat0.sat
  let rec cfg eval [@cfg:stackify] (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : Type.lib_formula_satstate
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Type.Lib_Formula_SatState_Unknown -> not (Complete0.complete a) }
    ensures { (result = Type.Lib_Formula_SatState_Unsat) = Unsat0.unsat self a }
    ensures { (result = Type.Lib_Formula_SatState_Sat) = Sat0.sat self a }
    
   = 
  var _0 : Type.lib_formula_satstate;
  var self_1 : Type.lib_formula_formula;
  var a_2 : Type.lib_assignments_assignments;
  var _3 : bool;
  var _4 : Type.lib_formula_formula;
  var _5 : Type.lib_assignments_assignments;
  var _6 : ();
  var _7 : bool;
  var _8 : Type.lib_formula_formula;
  var _9 : Type.lib_assignments_assignments;
  var _10 : ();
  var _11 : ();
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _4 <- self_1;
    _5 <- a_2;
    _3 <- IsSat0.is_sat _4 _5;
    goto BB1
  }
  BB1 {
    switch (_3)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve a_2 };
    _0 <- Type.Lib_Formula_SatState_Sat;
    goto BB8
  }
  BB3 {
    _8 <- self_1;
    assume { Resolve0.resolve self_1 };
    _9 <- a_2;
    assume { Resolve1.resolve a_2 };
    _7 <- IsUnsat0.is_unsat _8 _9;
    goto BB4
  }
  BB4 {
    switch (_7)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    _0 <- Type.Lib_Formula_SatState_Unsat;
    goto BB7
  }
  BB6 {
    _0 <- Type.Lib_Formula_SatState_Unknown;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module Lib_SolverDpll_Inner_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_EventuallySat_Interface as EventuallySat0
  clone Lib_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant2
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Lib_Decision_Impl0_Invariant_Interface as Invariant0
  val inner [@cfg:stackify] (f : Type.lib_formula_formula) (a : borrowed (Type.lib_assignments_assignments)) (d : Type.lib_decision_decisions) : bool
    requires {Invariant0.invariant' d (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f))}
    requires {Invariant1.invariant' ( * a) f}
    requires {Invariant2.invariant' f}
    ensures { result = false -> not (EventuallySatComplete0.eventually_sat_complete f ( * a)) }
    ensures { result = true -> EventuallySat0.eventually_sat f ( * a) }
    ensures { Invariant1.invariant' ( ^ a) f }
    
end
module Lib_SolverDpll_Inner
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  use prelude.UInt8
  clone Lib_Lit_Impl0_SatInner as SatInner2
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model4 with function Model0.model = Model5.model
  clone Lib_Clause_Impl1_SatInner as SatInner1 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model4.model
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Lit_Impl0_Invariant as Invariant4
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant4.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant3 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_EventuallySatInner as EventuallySatInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_EventuallySat as EventuallySat0 with function Model0.model = Model1.model,
  predicate EventuallySatInner0.eventually_sat_inner = EventuallySatInner0.eventually_sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model1.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Lib_Formula_Impl1_Invariant as Invariant2 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize
  clone Lib_Decision_Impl0_Invariant as Invariant0 with function Model0.model = Model0.model
  use mach.int.Int64
  clone Lib_Lit_Impl0_UnsatInner as UnsatInner2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.lib_decision_decisions
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = uint8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = usize
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_formula_satstate
  clone Lib_Clause_Impl1_UnsatInner as UnsatInner1 with function Model0.model = Model4.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreusotContracts_Logic_Model_Impl1_Model as Model8 with type t = Type.creusotcontracts_std1_vec_vec uint8,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = uint8,
  function Model0.model = Model3.model, function Model1.model = Model8.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model7 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model6 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Lib_Assignments_Impl2_Clone_Interface as Clone0 with function Model0.model = Model1.model,
  function Model1.model = Model6.model
  clone Lib_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model1.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl2_Eval_Interface as Eval0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Complete0.complete = Complete0.complete,
  predicate Unsat0.unsat = Unsat0.unsat, predicate Sat0.sat = Sat0.sat
  clone Lib_Assignments_Impl2_DoUnitPropagation_Interface as DoUnitPropagation0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Compatible0.compatible = Compatible0.compatible,
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete
  clone Lib_Assignments_Impl2_FindUnassigned_Interface as FindUnassigned0 with function Model0.model = Model7.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Complete0.complete = Complete0.complete,
  predicate Invariant1.invariant' = Invariant1.invariant', function Model1.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  let rec cfg inner [@cfg:stackify] (f : Type.lib_formula_formula) (a : borrowed (Type.lib_assignments_assignments)) (d : Type.lib_decision_decisions) : bool
    requires {Invariant0.invariant' d (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f))}
    requires {Invariant1.invariant' ( * a) f}
    requires {Invariant2.invariant' f}
    ensures { result = false -> not (EventuallySatComplete0.eventually_sat_complete f ( * a)) }
    ensures { result = true -> EventuallySat0.eventually_sat f ( * a) }
    ensures { Invariant1.invariant' ( ^ a) f }
    
   = 
  var _0 : bool;
  var f_1 : Type.lib_formula_formula;
  var a_2 : borrowed (Type.lib_assignments_assignments);
  var d_3 : Type.lib_decision_decisions;
  var _4 : ();
  var _5 : borrowed (Type.lib_assignments_assignments);
  var _6 : Type.lib_formula_formula;
  var _7 : ();
  var _8 : Type.lib_formula_satstate;
  var _9 : Type.lib_formula_formula;
  var _10 : Type.lib_assignments_assignments;
  var _11 : isize;
  var _12 : ();
  var _13 : ();
  var a_cloned_14 : Type.lib_assignments_assignments;
  var _15 : Type.lib_assignments_assignments;
  var next_16 : usize;
  var _17 : borrowed (Type.lib_assignments_assignments);
  var _18 : Type.lib_decision_decisions;
  var _19 : Type.lib_formula_formula;
  var _20 : borrowed uint8;
  var _21 : borrowed (Type.creusotcontracts_std1_vec_vec uint8);
  var _22 : usize;
  var _23 : borrowed uint8;
  var _24 : borrowed (Type.creusotcontracts_std1_vec_vec uint8);
  var _25 : usize;
  var _26 : bool;
  var _27 : Type.lib_formula_formula;
  var _28 : borrowed (Type.lib_assignments_assignments);
  var _29 : Type.lib_decision_decisions;
  var _30 : ();
  var _31 : ();
  var _32 : Type.lib_formula_formula;
  var _33 : borrowed (Type.lib_assignments_assignments);
  var _34 : borrowed (Type.lib_assignments_assignments);
  var _35 : Type.lib_decision_decisions;
  {
    f_1 <- f;
    a_2 <- a;
    d_3 <- d;
    goto BB0
  }
  BB0 {
    _5 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _5) };
    _6 <- f_1;
    _4 <- DoUnitPropagation0.do_unit_propagation _5 _6;
    goto BB1
  }
  BB1 {
    _9 <- f_1;
    _10 <-  * a_2;
    _8 <- Eval0.eval _9 _10;
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _8 };
    switch (_8)
      | Type.Lib_Formula_SatState_Sat -> goto BB4
      | Type.Lib_Formula_SatState_Unsat -> goto BB5
      | _ -> goto BB3
      end
  }
  BB3 {
    _7 <- ();
    assume { Resolve1.resolve _7 };
    _15 <-  * a_2;
    a_cloned_14 <- Clone0.clone' _15;
    goto BB6
  }
  BB4 {
    assume { Resolve5.resolve f_1 };
    assume { Resolve4.resolve a_2 };
    assume { Resolve6.resolve d_3 };
    _0 <- true;
    goto BB16
  }
  BB5 {
    assume { Resolve5.resolve f_1 };
    assume { Resolve4.resolve a_2 };
    assume { Resolve6.resolve d_3 };
    _0 <- false;
    goto BB16
  }
  BB6 {
    _17 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _17) };
    _18 <- d_3;
    _19 <- f_1;
    next_16 <- FindUnassigned0.find_unassigned _17 _18 _19;
    goto BB7
  }
  BB7 {
    _21 <- borrow_mut (Type.lib_assignments_assignments_Assignments_0 ( * a_2));
    a_2 <- { a_2 with current = (let Type.Lib_Assignments_Assignments a b =  * a_2 in Type.Lib_Assignments_Assignments ( ^ _21) b) };
    assume { Resolve2.resolve _22 };
    _22 <- next_16;
    _20 <- IndexMut0.index_mut _21 _22;
    goto BB8
  }
  BB8 {
    _20 <- { _20 with current = (1 : uint8) };
    assume { Resolve3.resolve _20 };
    _24 <- borrow_mut (Type.lib_assignments_assignments_Assignments_0 a_cloned_14);
    a_cloned_14 <- (let Type.Lib_Assignments_Assignments a b = a_cloned_14 in Type.Lib_Assignments_Assignments ( ^ _24) b);
    assume { Resolve2.resolve _25 };
    _25 <- next_16;
    assume { Resolve2.resolve next_16 };
    _23 <- IndexMut0.index_mut _24 _25;
    goto BB9
  }
  BB9 {
    _23 <- { _23 with current = (0 : uint8) };
    assume { Resolve3.resolve _23 };
    _27 <- f_1;
    _28 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _28) };
    _29 <- d_3;
    _26 <- inner _27 _28 _29;
    goto BB10
  }
  BB10 {
    assume { Resolve4.resolve a_2 };
    switch (_26)
      | False -> goto BB12
      | _ -> goto BB11
      end
  }
  BB11 {
    assume { Resolve5.resolve f_1 };
    assume { Resolve6.resolve d_3 };
    _0 <- true;
    goto BB14
  }
  BB12 {
    _32 <- f_1;
    assume { Resolve5.resolve f_1 };
    _34 <- borrow_mut a_cloned_14;
    a_cloned_14 <-  ^ _34;
    _33 <- borrow_mut ( * _34);
    _34 <- { _34 with current = ( ^ _33) };
    _35 <- d_3;
    assume { Resolve6.resolve d_3 };
    _0 <- inner _32 _33 _35;
    goto BB13
  }
  BB13 {
    assume { Resolve4.resolve _34 };
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    assume { Resolve7.resolve a_cloned_14 };
    goto BB17
  }
  BB16 {
    goto BB17
  }
  BB17 {
    return _0
  }
  
end
module Lib_SolverDpll_Solver_Interface
  use prelude.Prelude
  use Type
  val solver [@cfg:stackify] (f : Type.lib_formula_formula) (units : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)) : bool
    
end
module Lib_SolverDpll_Solver
  use prelude.Prelude
  use Type
  val solver [@cfg:stackify] (f : Type.lib_formula_formula) (units : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)) : bool
    
end
module Lib_Util_SortedRangeRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range_rev (s : Seq.seq (usize, usize)) (l : int) (u : int)
end
module Lib_Util_SortedRangeRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range_rev (s : Seq.seq (usize, usize)) (l : int) (u : int) = 
    forall j : (int) . forall i : (int) . l <= i && i < j && j < u -> (let (a, _) = Seq.get s i in a) >= (let (a, _) = Seq.get s j in a)
end
module Lib_Util_SortedRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_rev (s : Seq.seq (usize, usize))
end
module Lib_Util_SortedRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  clone Lib_Util_SortedRangeRev_Interface as SortedRangeRev0
  predicate sorted_rev (s : Seq.seq (usize, usize)) = 
    SortedRangeRev0.sorted_range_rev s 0 (Seq.length s)
end
module Lib_Util_PartitionRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate partition_rev (v : Seq.seq (usize, usize)) (i : int)
end
module Lib_Util_PartitionRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  predicate partition_rev (v : Seq.seq (usize, usize)) (i : int) = 
    forall k2 : (int) . forall k1 : (int) . 0 <= k1 && k1 < i && i <= k2 && k2 < Seq.length v -> (let (a, _) = Seq.get v k1 in a) >= (let (a, _) = Seq.get v k2 in a)
end
module CreusotContracts_Logic_Seq_Impl1_PermutationOf_Interface
  type t   
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl1_PermutationOf
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) = 
    Permut.permut self o 0 (Seq.length self)
end
module CreusotContracts_Std1_Vec_Impl1_Swap_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (i : usize) (j : usize) : ()
    requires {UInt64.to_int j < Seq.length (Model0.model self)}
    requires {UInt64.to_int i < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int i) (UInt64.to_int j) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Swap
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val swap [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (i : usize) (j : usize) : ()
    requires {UInt64.to_int j < Seq.length (Model0.model self)}
    requires {UInt64.to_int i < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int i) (UInt64.to_int j) }
    
end
module Lib_Util_SortReverse_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone Lib_Util_SortedRev_Interface as SortedRev0
  clone CreusotContracts_Logic_Seq_Impl1_PermutationOf_Interface as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec (usize, usize),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = (usize, usize)
  val sort_reverse [@cfg:stackify] (v : borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize))) : ()
    ensures { PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    ensures { SortedRev0.sorted_rev (Model0.model ( ^ v)) }
    
end
module Lib_Util_SortReverse
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Lib_Util_PartitionRev as PartitionRev0
  clone Lib_Util_SortedRangeRev as SortedRangeRev0
  clone Lib_Util_SortedRev as SortedRev0 with predicate SortedRangeRev0.sorted_range_rev = SortedRangeRev0.sorted_range_rev
  clone CreusotContracts_Logic_Seq_Impl1_PermutationOf as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec (usize, usize),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize))
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.creusotcontracts_std1_vec_vec (usize, usize)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = (usize, usize)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize)))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize))
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec (usize, usize),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = (usize, usize),
  function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = (usize, usize),
  function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl1_Swap_Interface as Swap0 with type t = (usize, usize),
  function Model0.model = Model1.model, function Model1.model = Model2.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize)),
  function Model0.model = Model0.model
  let rec cfg sort_reverse [@cfg:stackify] (v : borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize))) : ()
    ensures { PermutationOf0.permutation_of (Model2.model ( ^ v)) (Model1.model v) }
    ensures { SortedRev0.sorted_rev (Model2.model ( ^ v)) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize));
  var i_2 : usize;
  var old_v_3 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize)));
  var _4 : borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize));
  var _5 : borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize));
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.creusotcontracts_std1_vec_vec (usize, usize);
  var max_11 : usize;
  var j_12 : usize;
  var _13 : usize;
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Type.creusotcontracts_std1_vec_vec (usize, usize);
  var _19 : ();
  var _20 : bool;
  var _21 : usize;
  var _22 : (usize, usize);
  var _23 : Type.creusotcontracts_std1_vec_vec (usize, usize);
  var _24 : usize;
  var _25 : usize;
  var _26 : (usize, usize);
  var _27 : Type.creusotcontracts_std1_vec_vec (usize, usize);
  var _28 : usize;
  var _29 : usize;
  var _30 : ();
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize));
  var _35 : usize;
  var _36 : usize;
  var _37 : ();
  var _38 : ();
  var _39 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    _5 <- v_1;
    _4 <- _5;
    assume { Resolve0.resolve _5 };
    old_v_3 <- Record0.record _4;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_v_3 };
    goto BB2
  }
  BB2 {
    invariant proph_const {  ^ v_1 =  ^ Model0.model old_v_3 };
    invariant permutation { PermutationOf0.permutation_of (Model1.model v_1) (Model2.model ( * Model0.model old_v_3)) };
    invariant i_bound { UInt64.to_int i_2 <= Seq.length (Model1.model v_1) };
    invariant sorted { SortedRangeRev0.sorted_range_rev (Model1.model v_1) 0 (UInt64.to_int i_2) };
    invariant partition { PartitionRev0.partition_rev (Model1.model v_1) (UInt64.to_int i_2) };
    assume { Resolve2.resolve _8 };
    _8 <- i_2;
    _10 <-  * v_1;
    _9 <- Len0.len _10;
    goto BB3
  }
  BB3 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB15
      | _ -> goto BB4
      end
  }
  BB4 {
    assume { Resolve2.resolve max_11 };
    max_11 <- i_2;
    assume { Resolve2.resolve _13 };
    _13 <- i_2;
    j_12 <- _13 + (1 : usize);
    goto BB5
  }
  BB5 {
    invariant max_is_max { forall k : (int) . UInt64.to_int i_2 <= k && k < UInt64.to_int j_12 -> (let (a, _) = Seq.get (Model1.model v_1) (UInt64.to_int max_11) in a) >= (let (a, _) = Seq.get (Model1.model v_1) k in a) };
    invariant j_bound { UInt64.to_int i_2 <= UInt64.to_int j_12 && UInt64.to_int j_12 <= Seq.length (Model1.model v_1) };
    invariant max_bound { UInt64.to_int i_2 <= UInt64.to_int max_11 && UInt64.to_int max_11 < UInt64.to_int j_12 };
    assume { Resolve2.resolve _16 };
    _16 <- j_12;
    _18 <-  * v_1;
    _17 <- Len0.len _18;
    goto BB6
  }
  BB6 {
    _15 <- _16 < _17;
    switch (_15)
      | False -> goto BB13
      | _ -> goto BB7
      end
  }
  BB7 {
    _23 <-  * v_1;
    assume { Resolve2.resolve _24 };
    _24 <- j_12;
    _22 <- Index0.index _23 _24;
    goto BB8
  }
  BB8 {
    assume { Resolve2.resolve _21 };
    _21 <- (let (a, _) = _22 in a);
    assume { Resolve3.resolve _22 };
    _27 <-  * v_1;
    assume { Resolve2.resolve _28 };
    _28 <- max_11;
    _26 <- Index0.index _27 _28;
    goto BB9
  }
  BB9 {
    assume { Resolve2.resolve _25 };
    _25 <- (let (a, _) = _26 in a);
    assume { Resolve3.resolve _26 };
    _20 <- _21 > _25;
    switch (_20)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    assume { Resolve2.resolve max_11 };
    assume { Resolve2.resolve _29 };
    _29 <- j_12;
    assume { Resolve2.resolve max_11 };
    max_11 <- _29;
    _19 <- ();
    assume { Resolve4.resolve _19 };
    goto BB12
  }
  BB11 {
    _19 <- ();
    assume { Resolve4.resolve _19 };
    goto BB12
  }
  BB12 {
    j_12 <- j_12 + (1 : usize);
    _6 <- ();
    assume { Resolve4.resolve _6 };
    goto BB5
  }
  BB13 {
    assume { Resolve2.resolve j_12 };
    _14 <- ();
    assume { Resolve4.resolve _14 };
    _34 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _34) };
    assume { Resolve2.resolve _35 };
    _35 <- i_2;
    assume { Resolve2.resolve _36 };
    _36 <- max_11;
    assume { Resolve2.resolve max_11 };
    _33 <- Swap0.swap _34 _35 _36;
    goto BB14
  }
  BB14 {
    i_2 <- i_2 + (1 : usize);
    _6 <- ();
    assume { Resolve4.resolve _6 };
    goto BB2
  }
  BB15 {
    assume { Resolve5.resolve v_1 };
    assume { Resolve2.resolve i_2 };
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Std1_Vec_FromElem_Interface
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module CreusotContracts_Std1_Vec_FromElem
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Lib_Decision_Impl1_New_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone Lib_Decision_Impl0_Invariant_Interface as Invariant1
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (f : Type.lib_formula_formula) : Type.lib_decision_decisions
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f)) }
    
end
module Lib_Decision_Impl1_New
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Lib_Lit_Impl0_Invariant as Invariant3
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl0_Model as Model4 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model4.model
  clone Lib_Clause_Impl1_VarsInRange as VarsInRange0 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Lib_Clause_Impl1_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize
  clone Lib_Decision_Impl0_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Util_SortedRangeRev as SortedRangeRev0
  clone Lib_Util_SortedRev as SortedRev0 with predicate SortedRangeRev0.sorted_range_rev = SortedRangeRev0.sorted_range_rev
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve11 with type self = Type.creusotcontracts_std1_vec_vec usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve10 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve9 with type self = (usize, usize)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.creusotcontracts_std1_vec_vec (usize, usize)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.creusotcontracts_std1_vec_vec (usize, usize)
  clone CreusotContracts_Logic_Seq_Impl1_PermutationOf as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy3 with type t = (usize, usize)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = ()
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = usize
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model10 with type t = Type.creusotcontracts_std1_vec_vec (usize, usize),
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index3 with type t = (usize, usize),
  function Model0.model = Model10.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model9 with type t = Type.creusotcontracts_std1_vec_vec (usize, usize),
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model3.model
  clone Lib_Util_SortReverse_Interface as SortReverse0 with function Model0.model = Model3.model,
  function Model1.model = Model9.model, predicate PermutationOf0.permutation_of = PermutationOf0.permutation_of,
  predicate SortedRev0.sorted_rev = SortedRev0.sorted_rev
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut1 with type t = (usize, usize),
  function Model0.model = Model3.model, function Model1.model = Model9.model
  clone CreusotContracts_Std1_Vec_FromElem_Interface as FromElem1 with type t = (usize, usize),
  function Model0.model = Model3.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model6 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = Type.lib_lit_lit,
  function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len1 with type t = Type.lib_lit_lit,
  function Model0.model = Model6.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model8 with type t = Type.creusotcontracts_std1_vec_vec usize,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = usize,
  function Model0.model = Model1.model, function Model1.model = Model8.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Type.creusotcontracts_std1_vec_vec usize,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index2 with type t = usize,
  function Model0.model = Model7.model
  clone CreusotContracts_Std1_Vec_FromElem_Interface as FromElem0 with type t = usize,
  function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.lib_clause_clause,
  function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.lib_clause_clause,
  function Model0.model = Model5.model
  let rec cfg new [@cfg:stackify] (f : Type.lib_formula_formula) : Type.lib_decision_decisions
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f)) }
    
   = 
  var _0 : Type.lib_decision_decisions;
  var f_1 : Type.lib_formula_formula;
  var lit_order_2 : Type.creusotcontracts_std1_vec_vec usize;
  var _3 : usize;
  var counts_4 : Type.creusotcontracts_std1_vec_vec usize;
  var _5 : usize;
  var counts_with_index_6 : Type.creusotcontracts_std1_vec_vec (usize, usize);
  var _7 : (usize, usize);
  var _8 : usize;
  var i_9 : usize;
  var _10 : ();
  var _11 : ();
  var _12 : bool;
  var _13 : usize;
  var _14 : usize;
  var _15 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var curr_clause_16 : Type.lib_clause_clause;
  var _17 : Type.lib_clause_clause;
  var _18 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _19 : usize;
  var j_20 : usize;
  var _21 : ();
  var _22 : bool;
  var _23 : usize;
  var _24 : usize;
  var _25 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _26 : ();
  var _27 : bool;
  var _28 : usize;
  var _29 : usize;
  var _30 : Type.creusotcontracts_std1_vec_vec usize;
  var _31 : usize;
  var _32 : Type.lib_lit_lit;
  var _33 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _34 : usize;
  var _35 : usize;
  var _36 : borrowed usize;
  var _37 : borrowed (Type.creusotcontracts_std1_vec_vec usize);
  var _38 : usize;
  var _39 : Type.lib_lit_lit;
  var _40 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _41 : usize;
  var _42 : ();
  var _43 : ();
  var _44 : ();
  var _45 : ();
  var _46 : ();
  var _47 : ();
  var _48 : ();
  var _49 : bool;
  var _50 : usize;
  var _51 : usize;
  var _52 : usize;
  var _53 : usize;
  var _54 : Type.creusotcontracts_std1_vec_vec usize;
  var _55 : usize;
  var _56 : usize;
  var _57 : borrowed (usize, usize);
  var _58 : borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize));
  var _59 : usize;
  var _60 : ();
  var _61 : ();
  var _62 : ();
  var _63 : ();
  var _64 : borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize));
  var _65 : borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize));
  var counts_with_index_66 : Type.creusotcontracts_std1_vec_vec (usize, usize);
  var _67 : ();
  var _68 : bool;
  var _69 : usize;
  var _70 : usize;
  var _71 : usize;
  var _72 : (usize, usize);
  var _73 : Type.creusotcontracts_std1_vec_vec (usize, usize);
  var _74 : usize;
  var _75 : borrowed usize;
  var _76 : borrowed (Type.creusotcontracts_std1_vec_vec usize);
  var _77 : usize;
  var _78 : ();
  var _79 : ();
  var _80 : ();
  var _81 : ();
  var _82 : Type.creusotcontracts_std1_vec_vec usize;
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _3 };
    _3 <- Type.lib_formula_formula_Formula_num_vars f_1;
    lit_order_2 <- FromElem0.from_elem (0 : usize) _3;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _5 };
    _5 <- Type.lib_formula_formula_Formula_num_vars f_1;
    counts_4 <- FromElem0.from_elem (0 : usize) _5;
    goto BB2
  }
  BB2 {
    _7 <- ((0 : usize), (0 : usize));
    assume { Resolve0.resolve _8 };
    _8 <- Type.lib_formula_formula_Formula_num_vars f_1;
    counts_with_index_6 <- FromElem1.from_elem _7 _8;
    goto BB3
  }
  BB3 {
    i_9 <- (0 : usize);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant i_bound { UInt64.to_int i_9 <= Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f_1)) };
    invariant counts_len1 { Seq.length (Model1.model counts_4) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f_1) };
    assume { Resolve0.resolve _13 };
    _13 <- i_9;
    _15 <- Type.lib_formula_formula_Formula_clauses f_1;
    _14 <- Len0.len _15;
    goto BB6
  }
  BB6 {
    _12 <- _13 < _14;
    switch (_12)
      | False -> goto BB21
      | _ -> goto BB7
      end
  }
  BB7 {
    _18 <- Type.lib_formula_formula_Formula_clauses f_1;
    assume { Resolve0.resolve _19 };
    _19 <- i_9;
    _17 <- Index0.index _18 _19;
    goto BB8
  }
  BB8 {
    curr_clause_16 <- _17;
    assume { Resolve1.resolve _17 };
    j_20 <- (0 : usize);
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    invariant i_bound2 { UInt64.to_int i_9 <= Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f_1)) };
    invariant j_bound { UInt64.to_int j_20 <= Seq.length (Model2.model (Type.lib_clause_clause_Clause_rest curr_clause_16)) };
    invariant counts_len { Seq.length (Model1.model counts_4) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f_1) };
    assume { Resolve0.resolve _23 };
    _23 <- j_20;
    _25 <- Type.lib_clause_clause_Clause_rest curr_clause_16;
    _24 <- Len1.len _25;
    goto BB11
  }
  BB11 {
    _22 <- _23 < _24;
    switch (_22)
      | False -> goto BB20
      | _ -> goto BB12
      end
  }
  BB12 {
    _30 <- counts_4;
    _33 <- Type.lib_clause_clause_Clause_rest curr_clause_16;
    assume { Resolve0.resolve _34 };
    _34 <- j_20;
    _32 <- Index1.index _33 _34;
    goto BB13
  }
  BB13 {
    assume { Resolve0.resolve _31 };
    _31 <- Type.lib_lit_lit_Lit_idx _32;
    assume { Resolve2.resolve _32 };
    _29 <- Index2.index _30 _31;
    goto BB14
  }
  BB14 {
    assume { Resolve0.resolve _28 };
    _28 <- _29;
    assume { Resolve3.resolve _29 };
    _35 <- (18446744073709551615 : usize) - (1 : usize);
    _27 <- _28 < _35;
    switch (_27)
      | False -> goto BB18
      | _ -> goto BB15
      end
  }
  BB15 {
    _37 <- borrow_mut counts_4;
    counts_4 <-  ^ _37;
    _40 <- Type.lib_clause_clause_Clause_rest curr_clause_16;
    assume { Resolve0.resolve _41 };
    _41 <- j_20;
    _39 <- Index1.index _40 _41;
    goto BB16
  }
  BB16 {
    assume { Resolve0.resolve _38 };
    _38 <- Type.lib_lit_lit_Lit_idx _39;
    assume { Resolve2.resolve _39 };
    _36 <- IndexMut0.index_mut _37 _38;
    goto BB17
  }
  BB17 {
    _36 <- { _36 with current = ( * _36 + (1 : usize)) };
    assume { Resolve4.resolve _36 };
    _26 <- ();
    assume { Resolve5.resolve _26 };
    goto BB19
  }
  BB18 {
    _26 <- ();
    assume { Resolve5.resolve _26 };
    goto BB19
  }
  BB19 {
    j_20 <- j_20 + (1 : usize);
    _11 <- ();
    assume { Resolve5.resolve _11 };
    goto BB10
  }
  BB20 {
    assume { Resolve1.resolve curr_clause_16 };
    assume { Resolve0.resolve j_20 };
    _21 <- ();
    assume { Resolve5.resolve _21 };
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    assume { Resolve5.resolve _11 };
    goto BB5
  }
  BB21 {
    assume { Resolve0.resolve i_9 };
    _10 <- ();
    assume { Resolve5.resolve _10 };
    i_9 <- (0 : usize);
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    invariant i_bound { UInt64.to_int i_9 <= UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f_1) };
    invariant counts_with_idx_len { Seq.length (Model3.model counts_with_index_6) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f_1) };
    invariant second_ok { forall j : (int) . 0 <= j && j < UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f_1) -> UInt64.to_int (let (_, a) = Seq.get (Model3.model counts_with_index_6) j in a) < UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f_1) };
    invariant inv2 { forall k : (int) . 0 <= k && k < UInt64.to_int i_9 -> UInt64.to_int (let (_, a) = Seq.get (Model3.model counts_with_index_6) k in a) = k };
    assume { Resolve0.resolve _50 };
    _50 <- i_9;
    assume { Resolve0.resolve _51 };
    _51 <- Type.lib_formula_formula_Formula_num_vars f_1;
    _49 <- _50 < _51;
    switch (_49)
      | False -> goto BB29
      | _ -> goto BB26
      end
  }
  BB26 {
    _54 <- counts_4;
    assume { Resolve0.resolve _55 };
    _55 <- i_9;
    _53 <- Index2.index _54 _55;
    goto BB27
  }
  BB27 {
    assume { Resolve0.resolve _52 };
    _52 <- _53;
    assume { Resolve3.resolve _53 };
    assume { Resolve0.resolve _56 };
    _56 <- i_9;
    _58 <- borrow_mut counts_with_index_6;
    counts_with_index_6 <-  ^ _58;
    assume { Resolve0.resolve _59 };
    _59 <- i_9;
    _57 <- IndexMut1.index_mut _58 _59;
    goto BB28
  }
  BB28 {
    _57 <- { _57 with current = (_52, _56) };
    assume { Resolve6.resolve _57 };
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    assume { Resolve5.resolve _11 };
    goto BB25
  }
  BB29 {
    assume { Resolve0.resolve i_9 };
    _48 <- ();
    assume { Resolve5.resolve _48 };
    _65 <- borrow_mut counts_with_index_6;
    counts_with_index_6 <-  ^ _65;
    _64 <- borrow_mut ( * _65);
    _65 <- { _65 with current = ( ^ _64) };
    _63 <- SortReverse0.sort_reverse _64;
    goto BB30
  }
  BB30 {
    assume { Resolve7.resolve _65 };
    assume { Resolve8.resolve counts_with_index_66 };
    counts_with_index_66 <- counts_with_index_6;
    i_9 <- (0 : usize);
    goto BB31
  }
  BB31 {
    goto BB32
  }
  BB32 {
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    goto BB35
  }
  BB35 {
    invariant i_bound { 0 <= UInt64.to_int i_9 && UInt64.to_int i_9 <= UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f_1) };
    invariant counts_with_idx_len { Seq.length (Model3.model counts_with_index_66) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f_1) };
    invariant lit_order_len { Seq.length (Model1.model lit_order_2) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f_1) };
    invariant second_ok { forall j : (int) . 0 <= j && j < UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f_1) -> UInt64.to_int (Seq.get (Model1.model lit_order_2) j) < UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f_1) };
    invariant inv2 { forall k : (int) . 0 <= k && k < UInt64.to_int i_9 -> UInt64.to_int (Seq.get (Model1.model lit_order_2) k) = UInt64.to_int (let (_, a) = Seq.get (Model3.model counts_with_index_66) k in a) };
    assume { Resolve0.resolve _69 };
    _69 <- i_9;
    assume { Resolve0.resolve _70 };
    _70 <- Type.lib_formula_formula_Formula_num_vars f_1;
    _68 <- _69 < _70;
    switch (_68)
      | False -> goto BB39
      | _ -> goto BB36
      end
  }
  BB36 {
    _73 <- counts_with_index_66;
    assume { Resolve0.resolve _74 };
    _74 <- i_9;
    _72 <- Index3.index _73 _74;
    goto BB37
  }
  BB37 {
    assume { Resolve0.resolve _71 };
    _71 <- (let (_, a) = _72 in a);
    assume { Resolve9.resolve _72 };
    _76 <- borrow_mut lit_order_2;
    lit_order_2 <-  ^ _76;
    assume { Resolve0.resolve _77 };
    _77 <- i_9;
    _75 <- IndexMut0.index_mut _76 _77;
    goto BB38
  }
  BB38 {
    assume { Resolve0.resolve ( * _75) };
    _75 <- { _75 with current = _71 };
    assume { Resolve4.resolve _75 };
    i_9 <- i_9 + (1 : usize);
    _11 <- ();
    assume { Resolve5.resolve _11 };
    goto BB35
  }
  BB39 {
    assume { Resolve10.resolve f_1 };
    assume { Resolve0.resolve i_9 };
    _67 <- ();
    assume { Resolve5.resolve _67 };
    assert { forall i : (int) . 0 <= i && i < Seq.length (Model3.model counts_with_index_66) -> UInt64.to_int (Seq.get (Model1.model lit_order_2) i) = UInt64.to_int (let (_, a) = Seq.get (Model3.model counts_with_index_66) i in a) };
    goto BB40
  }
  BB40 {
    _81 <- ();
    assume { Resolve5.resolve _81 };
    assume { Resolve11.resolve _82 };
    _82 <- lit_order_2;
    _0 <- Type.Lib_Decision_Decisions _82;
    goto BB41
  }
  BB41 {
    goto BB42
  }
  BB42 {
    assume { Resolve8.resolve counts_with_index_66 };
    goto BB43
  }
  BB43 {
    goto BB44
  }
  BB44 {
    assume { Resolve11.resolve counts_4 };
    goto BB45
  }
  BB45 {
    return _0
  }
  
end
module Lib_Lit_Impl3
  
end
module Lib_Formula_Impl3
  
end
module Lib_Formula_Impl5
  
end
