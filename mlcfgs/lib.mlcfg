module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type creusotcontracts_std1_vec_vec 't  
  type lib_decision_decisions  = 
    | Lib_Decision_Decisions (creusotcontracts_std1_vec_vec usize)
    
  function lib_decision_decisions_Decisions_lit_order (self : lib_decision_decisions) : creusotcontracts_std1_vec_vec usize
    
  val lib_decision_decisions_Decisions_lit_order (self : lib_decision_decisions) : creusotcontracts_std1_vec_vec usize
    ensures { result = lib_decision_decisions_Decisions_lit_order self }
    
  axiom lib_decision_decisions_Decisions_lit_order_acc : forall a : creusotcontracts_std1_vec_vec usize . lib_decision_decisions_Decisions_lit_order (Lib_Decision_Decisions a : lib_decision_decisions) = a
  type lib_lit_lit  = 
    | Lib_Lit_Lit usize bool
    
  function lib_lit_lit_Lit_idx (self : lib_lit_lit) : usize
  val lib_lit_lit_Lit_idx (self : lib_lit_lit) : usize
    ensures { result = lib_lit_lit_Lit_idx self }
    
  axiom lib_lit_lit_Lit_idx_acc : forall a : usize, b : bool . lib_lit_lit_Lit_idx (Lib_Lit_Lit a b : lib_lit_lit) = a
  function lib_lit_lit_Lit_polarity (self : lib_lit_lit) : bool
  val lib_lit_lit_Lit_polarity (self : lib_lit_lit) : bool
    ensures { result = lib_lit_lit_Lit_polarity self }
    
  axiom lib_lit_lit_Lit_polarity_acc : forall a : usize, b : bool . lib_lit_lit_Lit_polarity (Lib_Lit_Lit a b : lib_lit_lit) = b
  type lib_clause_clause  = 
    | Lib_Clause_Clause (creusotcontracts_std1_vec_vec (lib_lit_lit))
    
  function lib_clause_clause_Clause_rest (self : lib_clause_clause) : creusotcontracts_std1_vec_vec (lib_lit_lit)
  val lib_clause_clause_Clause_rest (self : lib_clause_clause) : creusotcontracts_std1_vec_vec (lib_lit_lit)
    ensures { result = lib_clause_clause_Clause_rest self }
    
  axiom lib_clause_clause_Clause_rest_acc : forall a : creusotcontracts_std1_vec_vec (lib_lit_lit) . lib_clause_clause_Clause_rest (Lib_Clause_Clause a : lib_clause_clause) = a
  type lib_formula_formula  = 
    | Lib_Formula_Formula (creusotcontracts_std1_vec_vec (lib_clause_clause)) usize
    
  function lib_formula_formula_Formula_clauses (self : lib_formula_formula) : creusotcontracts_std1_vec_vec (lib_clause_clause)
    
  val lib_formula_formula_Formula_clauses (self : lib_formula_formula) : creusotcontracts_std1_vec_vec (lib_clause_clause)
    ensures { result = lib_formula_formula_Formula_clauses self }
    
  axiom lib_formula_formula_Formula_clauses_acc : forall a : creusotcontracts_std1_vec_vec (lib_clause_clause), b : usize . lib_formula_formula_Formula_clauses (Lib_Formula_Formula a b : lib_formula_formula) = a
  function lib_formula_formula_Formula_num_vars (self : lib_formula_formula) : usize
  val lib_formula_formula_Formula_num_vars (self : lib_formula_formula) : usize
    ensures { result = lib_formula_formula_Formula_num_vars self }
    
  axiom lib_formula_formula_Formula_num_vars_acc : forall a : creusotcontracts_std1_vec_vec (lib_clause_clause), b : usize . lib_formula_formula_Formula_num_vars (Lib_Formula_Formula a b : lib_formula_formula) = b
  type lib_trail_reason  = 
    | Lib_Trail_Reason_Undefined
    | Lib_Trail_Reason_Decision
    | Lib_Trail_Reason_Unit
    | Lib_Trail_Reason_Long usize
    
  function lib_trail_reason_Long_0 (self : lib_trail_reason) : usize
  val lib_trail_reason_Long_0 (self : lib_trail_reason) : usize
    ensures { result = lib_trail_reason_Long_0 self }
    
  axiom lib_trail_reason_Long_0_acc : forall a : usize . lib_trail_reason_Long_0 (Lib_Trail_Reason_Long a : lib_trail_reason) = a
  type lib_assignments_assignments  = 
    | Lib_Assignments_Assignments (creusotcontracts_std1_vec_vec uint8) usize
    
  function lib_assignments_assignments_Assignments_0 (self : lib_assignments_assignments) : creusotcontracts_std1_vec_vec uint8
    
  val lib_assignments_assignments_Assignments_0 (self : lib_assignments_assignments) : creusotcontracts_std1_vec_vec uint8
    ensures { result = lib_assignments_assignments_Assignments_0 self }
    
  axiom lib_assignments_assignments_Assignments_0_acc : forall a : creusotcontracts_std1_vec_vec uint8, b : usize . lib_assignments_assignments_Assignments_0 (Lib_Assignments_Assignments a b : lib_assignments_assignments) = a
  function lib_assignments_assignments_Assignments_1 (self : lib_assignments_assignments) : usize
  val lib_assignments_assignments_Assignments_1 (self : lib_assignments_assignments) : usize
    ensures { result = lib_assignments_assignments_Assignments_1 self }
    
  axiom lib_assignments_assignments_Assignments_1_acc : forall a : creusotcontracts_std1_vec_vec uint8, b : usize . lib_assignments_assignments_Assignments_1 (Lib_Assignments_Assignments a b : lib_assignments_assignments) = b
  type lib_clause_clausestate  = 
    | Lib_Clause_ClauseState_Sat
    | Lib_Clause_ClauseState_Unsat
    | Lib_Clause_ClauseState_Unit
    | Lib_Clause_ClauseState_Unknown
    | Lib_Clause_ClauseState_Err usize
    
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  function core_option_option_Some_0 (self : core_option_option 't) : 't
  val core_option_option_Some_0 (self : core_option_option 't) : 't
    ensures { result = core_option_option_Some_0 self }
    
  axiom core_option_option_Some_0_acc : forall a : 't . core_option_option_Some_0 (Core_Option_Option_Some a : core_option_option 't) = a
  type lib_trail_trail  = 
    | Lib_Trail_Trail (creusotcontracts_std1_vec_vec (creusotcontracts_std1_vec_vec (lib_lit_lit))) (creusotcontracts_std1_vec_vec (usize, lib_trail_reason))
    
  function lib_trail_trail_Trail_trail (self : lib_trail_trail) : creusotcontracts_std1_vec_vec (creusotcontracts_std1_vec_vec (lib_lit_lit))
    
  val lib_trail_trail_Trail_trail (self : lib_trail_trail) : creusotcontracts_std1_vec_vec (creusotcontracts_std1_vec_vec (lib_lit_lit))
    ensures { result = lib_trail_trail_Trail_trail self }
    
  axiom lib_trail_trail_Trail_trail_acc : forall a : creusotcontracts_std1_vec_vec (creusotcontracts_std1_vec_vec (lib_lit_lit)), b : creusotcontracts_std1_vec_vec (usize, lib_trail_reason) . lib_trail_trail_Trail_trail (Lib_Trail_Trail a b : lib_trail_trail) = a
  function lib_trail_trail_Trail_vardata (self : lib_trail_trail) : creusotcontracts_std1_vec_vec (usize, lib_trail_reason)
    
  val lib_trail_trail_Trail_vardata (self : lib_trail_trail) : creusotcontracts_std1_vec_vec (usize, lib_trail_reason)
    ensures { result = lib_trail_trail_Trail_vardata self }
    
  axiom lib_trail_trail_Trail_vardata_acc : forall a : creusotcontracts_std1_vec_vec (creusotcontracts_std1_vec_vec (lib_lit_lit)), b : creusotcontracts_std1_vec_vec (usize, lib_trail_reason) . lib_trail_trail_Trail_vardata (Lib_Trail_Trail a b : lib_trail_trail) = b
  type core_result_result 't 'e = 
    | Core_Result_Result_Ok 't
    | Core_Result_Result_Err 'e
    
  function core_result_result_Err_0 (self : core_result_result 't 'e) : 'e
  val core_result_result_Err_0 (self : core_result_result 't 'e) : 'e
    ensures { result = core_result_result_Err_0 self }
    
  axiom core_result_result_Err_0_acc : forall a : 'e . core_result_result_Err_0 (Core_Result_Result_Err a : core_result_result 't 'e) = a
  type lib_formula_satstate  = 
    | Lib_Formula_SatState_Unknown
    | Lib_Formula_SatState_Sat
    | Lib_Formula_SatState_Unsat
    
  type lib_watches_watcher  = 
    | Lib_Watches_Watcher usize
    
  function lib_watches_watcher_Watcher_cref (self : lib_watches_watcher) : usize
  val lib_watches_watcher_Watcher_cref (self : lib_watches_watcher) : usize
    ensures { result = lib_watches_watcher_Watcher_cref self }
    
  axiom lib_watches_watcher_Watcher_cref_acc : forall a : usize . lib_watches_watcher_Watcher_cref (Lib_Watches_Watcher a : lib_watches_watcher) = a
  type lib_watches_watches  = 
    | Lib_Watches_Watches (creusotcontracts_std1_vec_vec (creusotcontracts_std1_vec_vec (lib_watches_watcher)))
    
  function lib_watches_watches_Watches_watches (self : lib_watches_watches) : creusotcontracts_std1_vec_vec (creusotcontracts_std1_vec_vec (lib_watches_watcher))
    
  val lib_watches_watches_Watches_watches (self : lib_watches_watches) : creusotcontracts_std1_vec_vec (creusotcontracts_std1_vec_vec (lib_watches_watcher))
    ensures { result = lib_watches_watches_Watches_watches self }
    
  axiom lib_watches_watches_Watches_watches_acc : forall a : creusotcontracts_std1_vec_vec (creusotcontracts_std1_vec_vec (lib_watches_watcher)) . lib_watches_watches_Watches_watches (Lib_Watches_Watches a : lib_watches_watches) = a
  type lib_conflictanalysis_conflict  = 
    | Lib_ConflictAnalysis_Conflict_Ground
    | Lib_ConflictAnalysis_Conflict_Unit (lib_lit_lit)
    | Lib_ConflictAnalysis_Conflict_Learned usize (lib_lit_lit) (creusotcontracts_std1_vec_vec (lib_lit_lit))
    
  function lib_conflictanalysis_conflict_Learned_0 (self : lib_conflictanalysis_conflict) : usize
  val lib_conflictanalysis_conflict_Learned_0 (self : lib_conflictanalysis_conflict) : usize
    ensures { result = lib_conflictanalysis_conflict_Learned_0 self }
    
  axiom lib_conflictanalysis_conflict_Learned_0_acc : forall a : usize, b : lib_lit_lit, c : creusotcontracts_std1_vec_vec (lib_lit_lit) . lib_conflictanalysis_conflict_Learned_0 (Lib_ConflictAnalysis_Conflict_Learned a b c : lib_conflictanalysis_conflict) = a
  function lib_conflictanalysis_conflict_Learned_1 (self : lib_conflictanalysis_conflict) : lib_lit_lit
  val lib_conflictanalysis_conflict_Learned_1 (self : lib_conflictanalysis_conflict) : lib_lit_lit
    ensures { result = lib_conflictanalysis_conflict_Learned_1 self }
    
  axiom lib_conflictanalysis_conflict_Learned_1_acc : forall a : usize, b : lib_lit_lit, c : creusotcontracts_std1_vec_vec (lib_lit_lit) . lib_conflictanalysis_conflict_Learned_1 (Lib_ConflictAnalysis_Conflict_Learned a b c : lib_conflictanalysis_conflict) = b
  function lib_conflictanalysis_conflict_Learned_2 (self : lib_conflictanalysis_conflict) : creusotcontracts_std1_vec_vec (lib_lit_lit)
    
  val lib_conflictanalysis_conflict_Learned_2 (self : lib_conflictanalysis_conflict) : creusotcontracts_std1_vec_vec (lib_lit_lit)
    ensures { result = lib_conflictanalysis_conflict_Learned_2 self }
    
  axiom lib_conflictanalysis_conflict_Learned_2_acc : forall a : usize, b : lib_lit_lit, c : creusotcontracts_std1_vec_vec (lib_lit_lit) . lib_conflictanalysis_conflict_Learned_2 (Lib_ConflictAnalysis_Conflict_Learned a b c : lib_conflictanalysis_conflict) = c
  function lib_conflictanalysis_conflict_Unit_0 (self : lib_conflictanalysis_conflict) : lib_lit_lit
  val lib_conflictanalysis_conflict_Unit_0 (self : lib_conflictanalysis_conflict) : lib_lit_lit
    ensures { result = lib_conflictanalysis_conflict_Unit_0 self }
    
  axiom lib_conflictanalysis_conflict_Unit_0_acc : forall a : lib_lit_lit . lib_conflictanalysis_conflict_Unit_0 (Lib_ConflictAnalysis_Conflict_Unit a : lib_conflictanalysis_conflict) = a
  type creusotcontracts_logic_ghost_ghost 't = 
    | CreusotContracts_Logic_Ghost_Ghost opaque_ptr
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module Lib_Decision_Impl1_MoveToFront_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  val move_to_front [@cfg:stackify] (self : borrowed (Type.lib_decision_decisions)) (tomove : usize) : ()
end
module Lib_Decision_Impl1_MoveToFront
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.lib_decision_decisions
  let rec cfg move_to_front [@cfg:stackify] (self : borrowed (Type.lib_decision_decisions)) (tomove : usize) : () = 
  var _0 : ();
  var self_1 : borrowed (Type.lib_decision_decisions);
  var tomove_2 : usize;
  {
    self_1 <- self;
    tomove_2 <- tomove;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve tomove_2 };
    return _0
  }
  
end
module Lib_Decision_Impl1_IncrementAndMove_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  val increment_and_move [@cfg:stackify] (self : borrowed (Type.lib_decision_decisions)) (f : Type.lib_formula_formula) (cref : usize) : ()
    
end
module Lib_Decision_Impl1_IncrementAndMove
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.lib_decision_decisions
  let rec cfg increment_and_move [@cfg:stackify] (self : borrowed (Type.lib_decision_decisions)) (f : Type.lib_formula_formula) (cref : usize) : ()
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.lib_decision_decisions);
  var f_2 : Type.lib_formula_formula;
  var cref_3 : usize;
  {
    self_1 <- self;
    f_2 <- f;
    cref_3 <- cref;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve f_2 };
    assume { Resolve2.resolve cref_3 };
    return _0
  }
  
end
module Core_Default_Default_Default_Interface
  type self   
  val default [@cfg:stackify] () : self
    requires {false}
    
end
module Core_Default_Default_Default
  type self   
  val default [@cfg:stackify] () : self
    requires {false}
    
end
module Lib_Trail_Impl0_Default_Interface
  use Type
  val default [@cfg:stackify] () : Type.lib_trail_reason
end
module Lib_Trail_Impl0_Default
  use Type
  let rec cfg default [@cfg:stackify] () : Type.lib_trail_reason = 
  var _0 : Type.lib_trail_reason;
  {
    goto BB0
  }
  BB0 {
    _0 <- Type.Lib_Trail_Reason_Undefined;
    return _0
  }
  
end
module Lib_Trail_Impl0
  use Type
  clone Lib_Trail_Impl0_Default_Interface as Default0
  clone Core_Default_Default_Default_Interface as Default1 with type self = Type.lib_trail_reason,
  val default = Default0.default
end
module Core_Clone_Clone_Clone_Interface
  type self   
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self   
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self   
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self   
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Lib_Lit_Impl4_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.lib_lit_lit) : Type.lib_lit_lit
end
module Lib_Lit_Impl4_Clone
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_lit_lit
  let rec cfg clone' [@cfg:stackify] (self : Type.lib_lit_lit) : Type.lib_lit_lit = 
  var _0 : Type.lib_lit_lit;
  var self_1 : Type.lib_lit_lit;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- self_1;
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module Lib_Lit_Impl4
  use Type
  clone Lib_Lit_Impl4_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.lib_lit_lit, val clone' = Clone0.clone'
end
module Lib_Lit_Impl0_ToWatchidxLogic_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  function to_watchidx_logic (self : Type.lib_lit_lit) : int
end
module Lib_Lit_Impl0_ToWatchidxLogic
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  use mach.int.Int32
  function to_watchidx_logic (self : Type.lib_lit_lit) : int = 
    UInt64.to_int (Type.lib_lit_lit_Lit_idx self) * 2 + (if Type.lib_lit_lit_Lit_polarity self then 0 else 1)
end
module Lib_Lit_Impl0_ToNegWatchidxLogic_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  function to_neg_watchidx_logic (self : Type.lib_lit_lit) : int
end
module Lib_Lit_Impl0_ToNegWatchidxLogic
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  use mach.int.Int32
  function to_neg_watchidx_logic (self : Type.lib_lit_lit) : int = 
    UInt64.to_int (Type.lib_lit_lit_Lit_idx self) * 2 + (if Type.lib_lit_lit_Lit_polarity self then 1 else 0)
end
module Lib_Lit_Impl1_IsOpp_Interface
  use Type
  predicate is_opp (self : Type.lib_lit_lit) (o : Type.lib_lit_lit)
end
module Lib_Lit_Impl1_IsOpp
  use Type
  use mach.int.UInt64
  predicate is_opp (self : Type.lib_lit_lit) (o : Type.lib_lit_lit) = 
    UInt64.to_int (Type.lib_lit_lit_Lit_idx self) = UInt64.to_int (Type.lib_lit_lit_Lit_idx o) && Type.lib_lit_lit_Lit_polarity self <> Type.lib_lit_lit_Lit_polarity o
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module Lib_Clause_Impl1_ModelTy
  use seq.Seq
  use Type
  type modelTy  = 
    Seq.seq (Type.lib_lit_lit)
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module Lib_Clause_Impl1_Model_Interface
  use Type
  use seq.Seq
  function model (self : Type.lib_clause_clause) : Seq.seq (Type.lib_lit_lit)
end
module Lib_Clause_Impl1_Model
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_lit_lit
  function model (self : Type.lib_clause_clause) : Seq.seq (Type.lib_lit_lit) = 
    Model0.model (Type.lib_clause_clause_Clause_rest self)
end
module Lib_Clause_Impl1
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.lib_clause_clause,
  type modelTy = ModelTy0.modelTy
end
module Lib_Lit_Impl1_LitIn_Interface
  use Type
  predicate lit_in (self : Type.lib_lit_lit) (c : Type.lib_clause_clause)
end
module Lib_Lit_Impl1_LitIn
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Lib_Clause_Impl1_Model_Interface as Model0
  predicate lit_in (self : Type.lib_lit_lit) (c : Type.lib_clause_clause) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model c) && Seq.get (Model0.model c) i = self
end
module Lib_Lit_Impl1_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.lib_lit_lit) (n : int)
end
module Lib_Lit_Impl1_Invariant
  use Type
  use mach.int.Int
  use mach.int.UInt64
  predicate invariant' (self : Type.lib_lit_lit) (n : int) = 
    UInt64.to_int (Type.lib_lit_lit_Lit_idx self) < n
end
module Lib_Lit_Impl1_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.lib_lit_lit) (a : Seq.seq uint8)
end
module Lib_Lit_Impl1_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  use mach.int.Int32
  predicate sat_inner (self : Type.lib_lit_lit) (a : Seq.seq uint8) = 
    if Type.lib_lit_lit_Lit_polarity self then
      UInt8.to_int (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx self))) = 1
    else
      UInt8.to_int (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx self))) = 0
    
end
module Lib_Lit_Impl1_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.lib_lit_lit) (a : Seq.seq uint8)
end
module Lib_Lit_Impl1_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  use mach.int.Int32
  predicate unsat_inner (self : Type.lib_lit_lit) (a : Seq.seq uint8) = 
    if Type.lib_lit_lit_Lit_polarity self then
      UInt8.to_int (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx self))) = 0
    else
      UInt8.to_int (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx self))) = 1
    
end
module Lib_Lit_Impl1_UnsetInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unset_inner (self : Type.lib_lit_lit) (a : Seq.seq uint8)
end
module Lib_Lit_Impl1_UnsetInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  use mach.int.Int32
  predicate unset_inner (self : Type.lib_lit_lit) (a : Seq.seq uint8) = 
    UInt8.to_int (Seq.get a (UInt64.to_int (Type.lib_lit_lit_Lit_idx self))) >= 2
end
module Lib_Assignments_Impl0_ModelTy
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  type modelTy  = 
    Seq.seq uint8
end
module Lib_Assignments_Impl0_Model_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function model (self : Type.lib_assignments_assignments) : Seq.seq uint8
end
module Lib_Assignments_Impl0_Model
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = uint8
  function model (self : Type.lib_assignments_assignments) : Seq.seq uint8 = 
    Model0.model (Type.lib_assignments_assignments_Assignments_0 self)
end
module Lib_Assignments_Impl0
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.lib_assignments_assignments,
  type modelTy = ModelTy0.modelTy
end
module Lib_Lit_Impl1_Sat_Interface
  use Type
  predicate sat (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments)
end
module Lib_Lit_Impl1_Sat
  use Type
  clone Lib_Lit_Impl1_SatInner_Interface as SatInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate sat (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) = 
    SatInner0.sat_inner self (Model0.model a)
end
module Lib_Lit_Impl1_Unset_Interface
  use Type
  predicate unset (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments)
end
module Lib_Lit_Impl1_Unset
  use Type
  clone Lib_Lit_Impl1_UnsetInner_Interface as UnsetInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate unset (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) = 
    UnsetInner0.unset_inner self (Model0.model a)
end
module Lib_Lit_Impl1_Unsat_Interface
  use Type
  predicate unsat (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments)
end
module Lib_Lit_Impl1_Unsat
  use Type
  clone Lib_Lit_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate unsat (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) = 
    UnsatInner0.unsat_inner self (Model0.model a)
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module Lib_Lit_Impl2_LitSat_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone Lib_Lit_Impl1_Sat_Interface as Sat0
  clone Lib_Lit_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_sat [@cfg:stackify] (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Sat0.sat self a }
    
end
module Lib_Lit_Impl2_LitSat
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Lit_Impl1_SatInner as SatInner0
  clone Lib_Lit_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Lit_Impl1_Invariant as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val lit_sat [@cfg:stackify] (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Sat0.sat self a }
    
end
module Lib_Lit_Impl2_LitUnsat_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone Lib_Lit_Impl1_Unsat_Interface as Unsat0
  clone Lib_Lit_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_unsat [@cfg:stackify] (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unsat0.unsat self a }
    
end
module Lib_Lit_Impl2_LitUnsat
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner0
  clone Lib_Lit_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Lit_Impl1_Invariant as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val lit_unsat [@cfg:stackify] (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unsat0.unsat self a }
    
end
module Lib_Lit_Impl2_LitUnset_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone Lib_Lit_Impl1_Unset_Interface as Unset0
  clone Lib_Lit_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val lit_unset [@cfg:stackify] (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unset0.unset self a }
    
end
module Lib_Lit_Impl2_LitUnset
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Lit_Impl1_UnsetInner as UnsetInner0
  clone Lib_Lit_Impl1_Unset as Unset0 with function Model0.model = Model1.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Lib_Lit_Impl1_Invariant as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val lit_unset [@cfg:stackify] (self : Type.lib_lit_lit) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Unset0.unset self a }
    
end
module Lib_Lit_Impl2_ToWatchidx_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone Lib_Lit_Impl0_ToWatchidxLogic_Interface as ToWatchidxLogic0
  val to_watchidx [@cfg:stackify] (self : Type.lib_lit_lit) : usize
    requires {UInt64.to_int (Type.lib_lit_lit_Lit_idx self) < div 18446744073709551615 2}
    ensures { UInt64.to_int result = UInt64.to_int (Type.lib_lit_lit_Lit_idx self) * 2 + (if Type.lib_lit_lit_Lit_polarity self then
      0
    else
      1
    ) }
    ensures { UInt64.to_int result = ToWatchidxLogic0.to_watchidx_logic self }
    
end
module Lib_Lit_Impl2_ToWatchidx
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone Lib_Lit_Impl0_ToWatchidxLogic as ToWatchidxLogic0
  val to_watchidx [@cfg:stackify] (self : Type.lib_lit_lit) : usize
    requires {UInt64.to_int (Type.lib_lit_lit_Lit_idx self) < div 18446744073709551615 2}
    ensures { UInt64.to_int result = UInt64.to_int (Type.lib_lit_lit_Lit_idx self) * 2 + (if Type.lib_lit_lit_Lit_polarity self then
      0
    else
      1
    ) }
    ensures { UInt64.to_int result = ToWatchidxLogic0.to_watchidx_logic self }
    
end
module Lib_Lit_Impl2_ToNegWatchidx_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone Lib_Lit_Impl0_ToNegWatchidxLogic_Interface as ToNegWatchidxLogic0
  val to_neg_watchidx [@cfg:stackify] (self : Type.lib_lit_lit) : usize
    requires {UInt64.to_int (Type.lib_lit_lit_Lit_idx self) < div 18446744073709551615 2}
    ensures { UInt64.to_int result = UInt64.to_int (Type.lib_lit_lit_Lit_idx self) * 2 + (if Type.lib_lit_lit_Lit_polarity self then
      1
    else
      0
    ) }
    ensures { UInt64.to_int result = ToNegWatchidxLogic0.to_neg_watchidx_logic self }
    
end
module Lib_Lit_Impl2_ToNegWatchidx
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone Lib_Lit_Impl0_ToNegWatchidxLogic as ToNegWatchidxLogic0
  val to_neg_watchidx [@cfg:stackify] (self : Type.lib_lit_lit) : usize
    requires {UInt64.to_int (Type.lib_lit_lit_Lit_idx self) < div 18446744073709551615 2}
    ensures { UInt64.to_int result = UInt64.to_int (Type.lib_lit_lit_Lit_idx self) * 2 + (if Type.lib_lit_lit_Lit_polarity self then
      1
    else
      0
    ) }
    ensures { UInt64.to_int result = ToNegWatchidxLogic0.to_neg_watchidx_logic self }
    
end
module Core_Ops_Bit_Not_Output
  type self   
  type output   
end
module Core_Ops_Bit_Not_Not_Interface
  type self   
  clone Core_Ops_Bit_Not_Output as Output0 with type self = self
  val not' [@cfg:stackify] (self : self) : Output0.output
    requires {false}
    
end
module Core_Ops_Bit_Not_Not
  type self   
  clone Core_Ops_Bit_Not_Output as Output0 with type self = self
  val not' [@cfg:stackify] (self : self) : Output0.output
    requires {false}
    
end
module Lib_Lit_Impl3_Output
  use Type
  type output  = 
    Type.lib_lit_lit
end
module Lib_Lit_Impl3_Not_Interface
  use mach.int.UInt64
  use Type
  val not' [@cfg:stackify] (self : Type.lib_lit_lit) : Type.lib_lit_lit
    ensures { Type.lib_lit_lit_Lit_polarity result = not (Type.lib_lit_lit_Lit_polarity self) }
    ensures { UInt64.to_int (Type.lib_lit_lit_Lit_idx result) = UInt64.to_int (Type.lib_lit_lit_Lit_idx self) }
    
end
module Lib_Lit_Impl3_Not
  use mach.int.UInt64
  use Type
  val not' [@cfg:stackify] (self : Type.lib_lit_lit) : Type.lib_lit_lit
    ensures { Type.lib_lit_lit_Lit_polarity result = not (Type.lib_lit_lit_Lit_polarity self) }
    ensures { UInt64.to_int (Type.lib_lit_lit_Lit_idx result) = UInt64.to_int (Type.lib_lit_lit_Lit_idx self) }
    
end
module Lib_Lit_Impl3
  use Type
  clone Lib_Lit_Impl3_Not_Interface as Not0
  clone Lib_Lit_Impl3_Output as Output0
  clone Core_Ops_Bit_Not_Not_Interface as Not1 with type self = Type.lib_lit_lit, type Output0.output = Output0.output,
  val not' = Not0.not'
  clone Core_Ops_Bit_Not_Output as Output1 with type self = Type.lib_lit_lit, type output = Output0.output
end
module CreusotContracts_Std1_Clone_Clone_Clone_Interface
  type self   
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module CreusotContracts_Std1_Clone_Clone_Clone
  type self   
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Lib_Clause_Impl0_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.lib_clause_clause) : Type.lib_clause_clause
    ensures { result = self }
    
end
module Lib_Clause_Impl0_Clone
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.lib_clause_clause) : Type.lib_clause_clause
    ensures { result = self }
    
end
module Lib_Clause_Impl0
  use Type
  clone Lib_Clause_Impl0_Clone_Interface as Clone0
  clone CreusotContracts_Std1_Clone_Clone_Clone_Interface as Clone1 with type self = Type.lib_clause_clause,
  val clone' = Clone0.clone'
end
module Lib_Clause_NoDuplicateIndexesInner_Interface
  use seq.Seq
  use Type
  predicate no_duplicate_indexes_inner (s : Seq.seq (Type.lib_lit_lit))
end
module Lib_Clause_NoDuplicateIndexesInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  predicate no_duplicate_indexes_inner (s : Seq.seq (Type.lib_lit_lit)) = 
    forall k : (int) . forall j : (int) . 0 <= j && j < Seq.length s && k < j -> not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get s k)) = UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get s j)))
end
module Lib_Clause_VarsInRangeInner_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate vars_in_range_inner (s : Seq.seq (Type.lib_lit_lit)) (n : int)
end
module Lib_Clause_VarsInRangeInner
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone Lib_Lit_Impl1_Invariant_Interface as Invariant0
  predicate vars_in_range_inner (s : Seq.seq (Type.lib_lit_lit)) (n : int) = 
    forall i : (int) . 0 <= i && i < Seq.length s -> Invariant0.invariant' (Seq.get s i) n
end
module Lib_Clause_Impl2_VarsInRange_Interface
  use Type
  use mach.int.Int
  predicate vars_in_range (self : Type.lib_clause_clause) (n : int)
end
module Lib_Clause_Impl2_VarsInRange
  use Type
  use mach.int.Int
  clone Lib_Clause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone Lib_Clause_Impl1_Model_Interface as Model0
  predicate vars_in_range (self : Type.lib_clause_clause) (n : int) = 
    VarsInRangeInner0.vars_in_range_inner (Model0.model self) n
end
module Lib_Clause_Impl2_NoDuplicateIndexes_Interface
  use Type
  predicate no_duplicate_indexes (self : Type.lib_clause_clause)
end
module Lib_Clause_Impl2_NoDuplicateIndexes
  use Type
  clone Lib_Clause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone Lib_Clause_Impl1_Model_Interface as Model0
  predicate no_duplicate_indexes (self : Type.lib_clause_clause) = 
    NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model0.model self)
end
module Lib_Clause_Impl2_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.lib_clause_clause) (n : int)
end
module Lib_Clause_Impl2_Invariant
  use Type
  use mach.int.Int
  clone Lib_Clause_Impl2_NoDuplicateIndexes_Interface as NoDuplicateIndexes0
  clone Lib_Clause_Impl2_VarsInRange_Interface as VarsInRange0
  predicate invariant' (self : Type.lib_clause_clause) (n : int) = 
    VarsInRange0.vars_in_range self n && NoDuplicateIndexes0.no_duplicate_indexes self
end
module Lib_Formula_Impl1_Invariant_Interface
  use Type
  predicate invariant' (self : Type.lib_formula_formula)
end
module Lib_Formula_Impl1_Invariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Lib_Clause_Impl2_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate invariant' (self : Type.lib_formula_formula) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self)) -> Invariant0.invariant' (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self)) i) (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars self))
end
module Lib_Formula_Impl1_Compatible_Interface
  use Type
  predicate compatible (self : Type.lib_formula_formula) (o : Type.lib_formula_formula)
end
module Lib_Formula_Impl1_Compatible
  use Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone Lib_Clause_Impl1_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate compatible (self : Type.lib_formula_formula) (o : Type.lib_formula_formula) = 
    UInt64.to_int (Type.lib_formula_formula_Formula_num_vars self) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars o) && Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses o)) >= Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self)) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self)) -> Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self)) i)) = Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses o)) i)) && (forall j : (int) . 0 <= j && j < Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self)) i)) -> Seq.get (Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self)) i)) j = Seq.get (Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses o)) i)) j))
end
module Lib_Logic_Unset_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unset (v : uint8)
end
module Lib_Logic_Unset
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  predicate unset (v : uint8) = 
    if UInt8.to_int v >= 2 then true else false
end
module Lib_Assignments_CompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate complete_inner (a : Seq.seq uint8)
end
module Lib_Assignments_CompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Lib_Logic_Unset_Interface as Unset0
  predicate complete_inner (a : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length a -> not (Unset0.unset (Seq.get a i))
end
module Lib_Clause_Impl2_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.lib_clause_clause) (a : Seq.seq uint8)
end
module Lib_Clause_Impl2_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Lib_Lit_Impl1_SatInner_Interface as SatInner0
  clone Lib_Clause_Impl1_Model_Interface as Model0
  predicate sat_inner (self : Type.lib_clause_clause) (a : Seq.seq uint8) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model self) && SatInner0.sat_inner (Seq.get (Model0.model self) i) a
end
module Lib_Formula_Impl1_SatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate sat_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8)
end
module Lib_Formula_Impl1_SatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Lib_Clause_Impl2_SatInner_Interface as SatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate sat_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self)) -> SatInner0.sat_inner (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self)) i) a
end
module Lib_Formula_Impl1_EventuallySatCompleteNoAss_Interface
  use Type
  predicate eventually_sat_complete_no_ass (self : Type.lib_formula_formula)
end
module Lib_Formula_Impl1_EventuallySatCompleteNoAss
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone Lib_Formula_Impl1_SatInner_Interface as SatInner0
  clone Lib_Assignments_CompleteInner_Interface as CompleteInner0
  predicate eventually_sat_complete_no_ass (self : Type.lib_formula_formula) = 
    exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars self) && CompleteInner0.complete_inner a2 && SatInner0.sat_inner self a2
end
module Lib_Formula_Impl1_Equisat_Interface
  use Type
  predicate equisat (self : Type.lib_formula_formula) (o : Type.lib_formula_formula)
end
module Lib_Formula_Impl1_Equisat
  use Type
  clone Lib_Formula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  predicate equisat (self : Type.lib_formula_formula) (o : Type.lib_formula_formula) = 
    EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass self = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass o
end
module Lib_Formula_Impl1_EquisatCompatible_Interface
  use Type
  predicate equisat_compatible (self : Type.lib_formula_formula) (o : Type.lib_formula_formula)
end
module Lib_Formula_Impl1_EquisatCompatible
  use Type
  clone Lib_Formula_Impl1_Equisat_Interface as Equisat0
  clone Lib_Formula_Impl1_Compatible_Interface as Compatible0
  predicate equisat_compatible (self : Type.lib_formula_formula) (o : Type.lib_formula_formula) = 
    Compatible0.compatible self o && Equisat0.equisat self o
end
module Lib_Clause_Impl2_EquisatExtension_Interface
  use Type
  predicate equisat_extension (self : Type.lib_clause_clause) (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula)
    
end
module Lib_Clause_Impl2_EquisatExtension
  use Type
  use mach.int.UInt64
  use seq.Seq
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  predicate equisat_extension (self : Type.lib_clause_clause) (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula)
    
   = 
    Invariant0.invariant' f && Invariant0.invariant' f2 && UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f2) && Seq.snoc (Model0.model (Type.lib_formula_formula_Formula_clauses f)) self = Model0.model (Type.lib_formula_formula_Formula_clauses f2) -> EquisatCompatible0.equisat_compatible f f2
end
module Lib_Clause_Impl2_ResolventOf_Interface
  use Type
  use mach.int.Int
  predicate resolvent_of (self : Type.lib_clause_clause) (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (k : int) (m : int)
    
end
module Lib_Clause_Impl2_ResolventOf
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Lib_Lit_Impl1_IsOpp_Interface as IsOpp0
  clone Lib_Lit_Impl1_LitIn_Interface as LitIn0
  clone Lib_Clause_Impl1_Model_Interface as Model0
  predicate resolvent_of (self : Type.lib_clause_clause) (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (k : int) (m : int)
    
   = 
    (forall i : (int) . 0 <= i && i < Seq.length (Model0.model c) && i <> m -> LitIn0.lit_in (Seq.get (Model0.model c) i) self) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model c2) && i <> k -> LitIn0.lit_in (Seq.get (Model0.model c2) i) self) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> LitIn0.lit_in (Seq.get (Model0.model self) i) c || LitIn0.lit_in (Seq.get (Model0.model self) i) c2) && IsOpp0.is_opp (Seq.get (Model0.model c2) k) (Seq.get (Model0.model c) m)
end
module Lib_Clause_Impl2_InFormula_Interface
  use Type
  predicate in_formula (self : Type.lib_clause_clause) (f : Type.lib_formula_formula)
end
module Lib_Clause_Impl2_InFormula
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate in_formula (self : Type.lib_clause_clause) (f : Type.lib_formula_formula) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) && Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i = self
end
module Lib_Clause_Impl2_UnitInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unit_inner (self : Type.lib_clause_clause) (a : Seq.seq uint8)
end
module Lib_Clause_Impl2_UnitInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Lib_Lit_Impl1_UnsetInner_Interface as UnsetInner0
  clone Lib_Clause_Impl1_Model_Interface as Model0
  clone Lib_Clause_Impl2_SatInner_Interface as SatInner0
  clone Lib_Clause_Impl2_VarsInRange_Interface as VarsInRange0
  predicate unit_inner (self : Type.lib_clause_clause) (a : Seq.seq uint8) = 
    VarsInRange0.vars_in_range self (Seq.length a) && not (SatInner0.sat_inner self a) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model self) && UnsetInner0.unset_inner (Seq.get (Model0.model self) i) a && (forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && j <> i -> not (UnsetInner0.unset_inner (Seq.get (Model0.model self) j) a)))
end
module Lib_Clause_Impl2_Unit_Interface
  use Type
  predicate unit (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl2_Unit
  use Type
  clone Lib_Clause_Impl2_UnitInner_Interface as UnitInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate unit (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    UnitInner0.unit_inner self (Model0.model a)
end
module Lib_Clause_Impl2_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.lib_clause_clause) (a : Seq.seq uint8)
end
module Lib_Clause_Impl2_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Lib_Lit_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Clause_Impl1_Model_Interface as Model0
  predicate unsat_inner (self : Type.lib_clause_clause) (a : Seq.seq uint8) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> UnsatInner0.unsat_inner (Seq.get (Model0.model self) i) a
end
module Lib_Clause_Impl2_Unsat_Interface
  use Type
  predicate unsat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl2_Unsat
  use Type
  clone Lib_Clause_Impl2_UnsatInner_Interface as UnsatInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate unsat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    UnsatInner0.unsat_inner self (Model0.model a)
end
module Lib_Clause_Impl2_Sat_Interface
  use Type
  predicate sat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl2_Sat
  use Type
  clone Lib_Clause_Impl2_SatInner_Interface as SatInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate sat (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    SatInner0.sat_inner self (Model0.model a)
end
module Lib_Clause_Impl2_Unknown_Interface
  use Type
  predicate unknown (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments)
end
module Lib_Clause_Impl2_Unknown
  use Type
  clone Lib_Clause_Impl2_Unsat_Interface as Unsat0
  clone Lib_Clause_Impl2_Sat_Interface as Sat0
  predicate unknown (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) = 
    not (Sat0.sat self a) && not (Unsat0.unsat self a)
end
module Lib_Clause_Impl2_Equals_Interface
  use Type
  predicate equals (self : Type.lib_clause_clause) (o : Type.lib_clause_clause)
end
module Lib_Clause_Impl2_Equals
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone Lib_Clause_Impl1_Model_Interface as Model0
  predicate equals (self : Type.lib_clause_clause) (o : Type.lib_clause_clause) = 
    Seq.length (Model0.model self) = Seq.length (Model0.model o) && (forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) -> Seq.get (Model0.model self) j = Seq.get (Model0.model o) j)
end
module Lib_Clause_Impl3_ClauseFromVec_Interface
  use prelude.Prelude
  use Type
  val clause_from_vec [@cfg:stackify] (vec : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)) : Type.lib_clause_clause
    
end
module Lib_Clause_Impl3_ClauseFromVec
  use prelude.Prelude
  use Type
  val clause_from_vec [@cfg:stackify] (vec : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)) : Type.lib_clause_clause
    
end
module Lib_Assignments_Impl1_Invariant_Interface
  use Type
  predicate invariant' (self : Type.lib_assignments_assignments) (f : Type.lib_formula_formula)
end
module Lib_Assignments_Impl1_Invariant
  use Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate invariant' (self : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) = 
    UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length (Model0.model self) && UInt64.to_int (Type.lib_assignments_assignments_Assignments_1 self) <= UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f)
end
module Lib_Assignments_Impl1_Complete_Interface
  use Type
  predicate complete (self : Type.lib_assignments_assignments)
end
module Lib_Assignments_Impl1_Complete
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate complete (self : Type.lib_assignments_assignments) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> not (Unset0.unset (Seq.get (Model0.model self) i))
end
module Lib_Clause_Impl3_CheckIfUnit_Interface
  use seq.Seq
  use Type
  use prelude.Prelude
  clone Lib_Clause_Impl2_Sat_Interface as Sat0
  clone Lib_Clause_Impl2_Unsat_Interface as Unsat0
  clone Lib_Clause_Impl2_Unit_Interface as Unit0
  clone Lib_Assignments_Impl1_Complete_Interface as Complete0
  clone Lib_Clause_Impl2_Invariant_Interface as Invariant2
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val check_if_unit [@cfg:stackify] (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) : Type.lib_clause_clausestate
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {Invariant2.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Type.Lib_Clause_ClauseState_Unknown -> not (Complete0.complete a) }
    ensures { result = Type.Lib_Clause_ClauseState_Unit -> Unit0.unit self a && not (Complete0.complete a) }
    ensures { result = Type.Lib_Clause_ClauseState_Unsat -> Unsat0.unsat self a }
    ensures { result = Type.Lib_Clause_ClauseState_Sat -> Sat0.sat self a }
    
end
module Lib_Clause_Impl3_CheckIfUnit
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone Lib_Lit_Impl1_Invariant as Invariant3
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model4 with function Model0.model = Model5.model
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model4.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Lit_Impl1_SatInner as SatInner1
  clone Lib_Clause_Impl2_SatInner as SatInner0 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner1
  clone Lib_Clause_Impl2_UnsatInner as UnsatInner0 with function Model0.model = Model4.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Lit_Impl1_UnsetInner as UnsetInner0
  clone Lib_Clause_Impl2_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model4.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model4.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Clause_Impl2_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Clause_Impl2_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Clause_Impl2_Unit as Unit0 with function Model0.model = Model1.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  val check_if_unit [@cfg:stackify] (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) : Type.lib_clause_clausestate
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {Invariant2.invariant' self (Seq.length (Model0.model a))}
    ensures { result = Type.Lib_Clause_ClauseState_Unknown -> not (Complete0.complete a) }
    ensures { result = Type.Lib_Clause_ClauseState_Unit -> Unit0.unit self a && not (Complete0.complete a) }
    ensures { result = Type.Lib_Clause_ClauseState_Unsat -> Unsat0.unsat self a }
    ensures { result = Type.Lib_Clause_ClauseState_Sat -> Sat0.sat self a }
    
end
module Lib_Clause_Impl3_GetUnit_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Lib_Clause_Impl1_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Lib_Clause_Impl2_Unit_Interface as Unit0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val get_unit [@cfg:stackify] (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) : Type.lib_lit_lit
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {Unit0.unit self a}
    ensures { Unset0.unset (Seq.get (Model0.model a) (UInt64.to_int (Type.lib_lit_lit_Lit_idx result))) }
    ensures { UInt64.to_int (Type.lib_lit_lit_Lit_idx result) < Seq.length (Model0.model a) }
    ensures { exists j : (int) . 0 <= j && j < Seq.length (Model1.model self) && Seq.get (Model1.model self) j = result }
    
end
module Lib_Clause_Impl3_GetUnit
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Lib_Lit_Impl1_Invariant as Invariant3
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone Lib_Lit_Impl1_SatInner as SatInner1
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model4 with function Model0.model = Model6.model
  clone Lib_Clause_Impl2_SatInner as SatInner0 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model4.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model4.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Lit_Impl1_UnsetInner as UnsetInner0
  clone Lib_Clause_Impl2_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model4.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model2 with function Model0.model = Model5.model
  clone Lib_Clause_Impl2_Unit as Unit0 with function Model0.model = Model2.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl1_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.lib_clause_clause,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model4.model
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  val get_unit [@cfg:stackify] (self : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (f : Type.lib_formula_formula) : Type.lib_lit_lit
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    requires {Unit0.unit self a}
    ensures { Unset0.unset (Seq.get (Model0.model a) (UInt64.to_int (Type.lib_lit_lit_Lit_idx result))) }
    ensures { UInt64.to_int (Type.lib_lit_lit_Lit_idx result) < Seq.length (Model0.model a) }
    ensures { exists j : (int) . 0 <= j && j < Seq.length (Model1.model self) && Seq.get (Model1.model self) j = result }
    
end
module Lib_Assignments_AssignmentsEquality_Interface
  use Type
  predicate assignments_equality (a : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments)
end
module Lib_Assignments_AssignmentsEquality
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate assignments_equality (a : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments) = 
    Seq.length (Model0.model a) = Seq.length (Model0.model a2) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model a) -> Seq.get (Model0.model a) i = Seq.get (Model0.model a2) i)
end
module Lib_Assignments_CompatibleInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate compatible_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module Lib_Assignments_CompatibleInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Lib_Logic_Unset_Interface as Unset0
  predicate compatible_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8) = 
    Seq.length a = Seq.length a2 && (forall i : (int) . 0 <= i && i < Seq.length a -> Unset0.unset (Seq.get a i) || Seq.get a i = Seq.get a2 i)
end
module Lib_Assignments_CompatibleCompleteInner_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate compatible_complete_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8)
end
module Lib_Assignments_CompatibleCompleteInner
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Assignments_CompleteInner_Interface as CompleteInner0
  clone Lib_Assignments_CompatibleInner_Interface as CompatibleInner0
  predicate compatible_complete_inner (a : Seq.seq uint8) (a2 : Seq.seq uint8) = 
    CompatibleInner0.compatible_inner a a2 && CompleteInner0.complete_inner a2
end
module Lib_Assignments_AssignmentsInvariant_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  predicate assignments_invariant (a : Seq.seq uint8) (f : Type.lib_formula_formula)
end
module Lib_Assignments_AssignmentsInvariant
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use Type
  use mach.int.UInt64
  predicate assignments_invariant (a : Seq.seq uint8) (f : Type.lib_formula_formula) = 
    UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length a
end
module Lib_Assignments_Impl1_Compatible_Interface
  use Type
  predicate compatible (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments)
end
module Lib_Assignments_Impl1_Compatible
  use Type
  clone Lib_Assignments_CompatibleInner_Interface as CompatibleInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate compatible (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments) = 
    CompatibleInner0.compatible_inner (Model0.model self) (Model0.model a2)
end
module Lib_Assignments_Impl1_CompatibleComplete_Interface
  use Type
  predicate compatible_complete (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments)
end
module Lib_Assignments_Impl1_CompatibleComplete
  use Type
  clone Lib_Assignments_Impl1_Complete_Interface as Complete0
  clone Lib_Assignments_Impl1_Compatible_Interface as Compatible0
  predicate compatible_complete (self : Type.lib_assignments_assignments) (a2 : Type.lib_assignments_assignments) = 
    Compatible0.compatible self a2 && Complete0.complete a2
end
module Lib_Assignments_Impl2_Clone_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  val clone' [@cfg:stackify] (self : Type.lib_assignments_assignments) : Type.lib_assignments_assignments
    ensures { Seq.(==) (Model0.model self) (Model0.model result) }
    ensures { UInt64.to_int (Type.lib_assignments_assignments_Assignments_1 result) = UInt64.to_int (Type.lib_assignments_assignments_Assignments_1 self) }
    ensures { Seq.length (Model1.model self) = Seq.length (Model0.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model self) -> Seq.get (Model1.model self) i = Seq.get (Model0.model result) i }
    
end
module Lib_Assignments_Impl2_Clone
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  val clone' [@cfg:stackify] (self : Type.lib_assignments_assignments) : Type.lib_assignments_assignments
    ensures { Seq.(==) (Model0.model self) (Model0.model result) }
    ensures { UInt64.to_int (Type.lib_assignments_assignments_Assignments_1 result) = UInt64.to_int (Type.lib_assignments_assignments_Assignments_1 self) }
    ensures { Seq.length (Model1.model self) = Seq.length (Model0.model result) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model self) -> Seq.get (Model1.model self) i = Seq.get (Model0.model result) i }
    
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module Lib_Assignments_Impl2_SetAssignment_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.UInt8
  use prelude.Prelude
  use Type
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_Impl0_Model_Interface as Model1
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val set_assignment [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (lit : Type.lib_lit_lit) (_f : Type.lib_formula_formula) : ()
    requires {0 <= UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) && UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) < Seq.length (Model0.model self)}
    ensures { Seq.length (Model1.model ( ^ self)) = Seq.length (Model0.model self) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && j <> UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) -> Seq.get (Model1.model ( * self)) j = Seq.get (Model1.model ( ^ self)) j }
    ensures { if Type.lib_lit_lit_Lit_polarity lit then
      UInt8.to_int (Seq.get (Model1.model ( ^ self)) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit))) = 1
    else
      UInt8.to_int (Seq.get (Model1.model ( ^ self)) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit))) = 0
     }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && j <> UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) -> Seq.get (Model1.model ( * self)) j = Seq.get (Model1.model ( ^ self)) j }
    ensures { UInt8.to_int (Seq.get (Model1.model ( ^ self)) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit))) = 1 || UInt8.to_int (Seq.get (Model1.model ( ^ self)) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit))) = 0 }
    ensures { Invariant0.invariant' ( ^ self) _f }
    ensures { Invariant0.invariant' ( * self) _f }
    
end
module Lib_Assignments_Impl2_SetAssignment
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.UInt8
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val set_assignment [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (lit : Type.lib_lit_lit) (_f : Type.lib_formula_formula) : ()
    requires {0 <= UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) && UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) < Seq.length (Model0.model self)}
    ensures { Seq.length (Model1.model ( ^ self)) = Seq.length (Model0.model self) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && j <> UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) -> Seq.get (Model1.model ( * self)) j = Seq.get (Model1.model ( ^ self)) j }
    ensures { if Type.lib_lit_lit_Lit_polarity lit then
      UInt8.to_int (Seq.get (Model1.model ( ^ self)) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit))) = 1
    else
      UInt8.to_int (Seq.get (Model1.model ( ^ self)) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit))) = 0
     }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model self) && j <> UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) -> Seq.get (Model1.model ( * self)) j = Seq.get (Model1.model ( ^ self)) j }
    ensures { UInt8.to_int (Seq.get (Model1.model ( ^ self)) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit))) = 1 || UInt8.to_int (Seq.get (Model1.model ( ^ self)) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit))) = 0 }
    ensures { Invariant0.invariant' ( ^ self) _f }
    ensures { Invariant0.invariant' ( * self) _f }
    
end
module Lib_Assignments_Impl2_New_Interface
  use prelude.Prelude
  use Type
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (f : Type.lib_formula_formula) : Type.lib_assignments_assignments
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result f }
    
end
module Lib_Assignments_Impl2_New
  use prelude.Prelude
  use Type
  use mach.int.Int
  use prelude.UInt8
  clone Lib_Lit_Impl1_Invariant as Invariant3
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  val new [@cfg:stackify] (f : Type.lib_formula_formula) : Type.lib_assignments_assignments
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result f }
    
end
module Lib_Decision_Impl0_Invariant_Interface
  use Type
  use mach.int.Int
  predicate invariant' (self : Type.lib_decision_decisions) (n : int)
end
module Lib_Decision_Impl0_Invariant
  use Type
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize
  predicate invariant' (self : Type.lib_decision_decisions) (n : int) = 
    Seq.length (Model0.model (Type.lib_decision_decisions_Decisions_lit_order self)) = n && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_decision_decisions_Decisions_lit_order self)) -> UInt64.to_int (Seq.get (Model0.model (Type.lib_decision_decisions_Decisions_lit_order self)) i) < n)
end
module Lib_Assignments_Impl2_FindUnassigned_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone Lib_Assignments_Impl1_Complete_Interface as Complete0
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Assignments_Impl0_Model_Interface as Model1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Lib_Decision_Impl0_Invariant_Interface as Invariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val find_unassigned [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (d : Type.lib_decision_decisions) (_f : Type.lib_formula_formula) : Type.core_option_option usize
    requires {Invariant0.invariant' d (Seq.length (Model0.model self))}
    requires {Invariant1.invariant' ( * self) _f}
    ensures { Invariant1.invariant' ( ^ self) _f }
    ensures { Model0.model self = Model1.model ( ^ self) }
    ensures { match (result) with
      | Type.Core_Option_Option_Some res -> UInt64.to_int res < Seq.length (Model0.model self) && Unset0.unset (Seq.get (Model0.model self) (UInt64.to_int res))
      | Type.Core_Option_Option_None -> Complete0.complete ( * self)
      end }
    
end
module Lib_Assignments_Impl2_FindUnassigned
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use prelude.UInt8
  clone Lib_Logic_Unset as Unset0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize
  clone Lib_Decision_Impl0_Invariant as Invariant0 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val find_unassigned [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (d : Type.lib_decision_decisions) (_f : Type.lib_formula_formula) : Type.core_option_option usize
    requires {Invariant0.invariant' d (Seq.length (Model0.model self))}
    requires {Invariant1.invariant' ( * self) _f}
    ensures { Invariant1.invariant' ( ^ self) _f }
    ensures { Model0.model self = Model1.model ( ^ self) }
    ensures { match (result) with
      | Type.Core_Option_Option_Some res -> UInt64.to_int res < Seq.length (Model0.model self) && Unset0.unset (Seq.get (Model0.model self) (UInt64.to_int res))
      | Type.Core_Option_Option_None -> Complete0.complete ( * self)
      end }
    
end
module Lib_Trail_Impl1_VardataInvariant_Interface
  use Type
  use mach.int.Int
  predicate vardata_invariant (self : Type.lib_trail_trail) (n : int)
end
module Lib_Trail_Impl1_VardataInvariant
  use Type
  use mach.int.Int
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = (usize, Type.lib_trail_reason)
  predicate vardata_invariant (self : Type.lib_trail_trail) (n : int) = 
    Seq.length (Model0.model (Type.lib_trail_trail_Trail_vardata self)) = n
end
module Lib_Trail_Impl1_TrailInvariant_Interface
  use Type
  predicate trail_invariant (self : Type.lib_trail_trail) (f : Type.lib_formula_formula)
end
module Lib_Trail_Impl1_TrailInvariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  predicate trail_invariant (self : Type.lib_trail_trail) (f : Type.lib_formula_formula) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail self)) -> (forall j : (int) . 0 <= j && j < Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail self)) i)) -> 0 <= UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model1.model (Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail self)) i)) j)) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model1.model (Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail self)) i)) j)) < UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f))
end
module Lib_Trail_Impl1_CrefsInRange_Interface
  use Type
  predicate crefs_in_range (self : Type.lib_trail_trail) (f : Type.lib_formula_formula)
end
module Lib_Trail_Impl1_CrefsInRange
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = (usize, Type.lib_trail_reason)
  predicate crefs_in_range (self : Type.lib_trail_trail) (f : Type.lib_formula_formula) = 
    forall j : (int) . 0 <= j && j < Seq.length (Model0.model (Type.lib_trail_trail_Trail_vardata self)) -> match (let (_, a) = Seq.get (Model0.model (Type.lib_trail_trail_Trail_vardata self)) j in a) with
      | Type.Lib_Trail_Reason_Long k -> 0 <= UInt64.to_int k && UInt64.to_int k < Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses f))
      | _ -> true
      end
end
module Lib_Trail_Impl1_Invariant_Interface
  use Type
  predicate invariant' (self : Type.lib_trail_trail) (f : Type.lib_formula_formula)
end
module Lib_Trail_Impl1_Invariant
  use Type
  use mach.int.UInt64
  clone Lib_Trail_Impl1_CrefsInRange_Interface as CrefsInRange0
  clone Lib_Trail_Impl1_TrailInvariant_Interface as TrailInvariant0
  clone Lib_Trail_Impl1_VardataInvariant_Interface as VardataInvariant0
  predicate invariant' (self : Type.lib_trail_trail) (f : Type.lib_formula_formula) = 
    VardataInvariant0.vardata_invariant self (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f)) && TrailInvariant0.trail_invariant self f && CrefsInRange0.crefs_in_range self f
end
module Lib_Formula_Impl1_EventuallySatCompleteInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate eventually_sat_complete_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8)
end
module Lib_Formula_Impl1_EventuallySatCompleteInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone Lib_Formula_Impl1_SatInner_Interface as SatInner0
  clone Lib_Assignments_CompatibleCompleteInner_Interface as CompatibleCompleteInner0
  predicate eventually_sat_complete_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8) = 
    exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars self) && CompatibleCompleteInner0.compatible_complete_inner a a2 && SatInner0.sat_inner self a2
end
module Lib_Formula_Impl1_EventuallySatComplete_Interface
  use Type
  predicate eventually_sat_complete (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_EventuallySatComplete
  use Type
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate eventually_sat_complete (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    EventuallySatCompleteInner0.eventually_sat_complete_inner self (Model0.model a)
end
module Lib_Assignments_Impl2_UnitPropOnce_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  clone Lib_Assignments_Impl1_Compatible_Interface as Compatible0
  clone Lib_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Lib_Clause_Impl2_Unit_Interface as Unit0
  clone Lib_Clause_Impl2_Sat_Interface as Sat0
  clone Lib_Clause_Impl2_Unsat_Interface as Unsat0
  clone Lib_Assignments_Impl0_Model_Interface as Model3
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model2 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Lib_Assignments_Impl1_Complete_Interface as Complete0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant2
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.lib_clause_clause
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  val unit_prop_once [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (i : usize) (f : borrowed (Type.lib_formula_formula)) (t : borrowed (Type.lib_trail_trail)) : Type.lib_clause_clausestate
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant0.invariant' ( * t) ( * f)}
    requires {0 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses ( * f)))}
    requires {Invariant1.invariant' ( * self) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { Complete0.complete ( * self) ->  * self =  ^ self && (result = Type.Lib_Clause_ClauseState_Unsat || result = Type.Lib_Clause_ClauseState_Sat) }
    ensures { result = Type.Lib_Clause_ClauseState_Unknown -> Model2.model self = Model3.model ( ^ self) && not (Complete0.complete ( ^ self)) }
    ensures { result = Type.Lib_Clause_ClauseState_Unsat -> Unsat0.unsat (Seq.get (Model1.model (Type.lib_formula_formula_Formula_clauses ( * f))) (UInt64.to_int i)) ( ^ self) && Model2.model self = Model3.model ( ^ self) }
    ensures { result = Type.Lib_Clause_ClauseState_Sat -> Sat0.sat (Seq.get (Model1.model (Type.lib_formula_formula_Formula_clauses ( * f))) (UInt64.to_int i)) ( ^ self) && Model2.model self = Model3.model ( ^ self) }
    ensures { result = Type.Lib_Clause_ClauseState_Unit -> Unit0.unit (Seq.get (Model1.model (Type.lib_formula_formula_Formula_clauses ( * f))) (UInt64.to_int i)) ( * self) && not (Complete0.complete ( * self)) }
    ensures { EventuallySatComplete0.eventually_sat_complete ( * f) ( * self) = EventuallySatComplete0.eventually_sat_complete ( * f) ( ^ self) }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { Invariant1.invariant' ( ^ self) ( * f) }
    ensures { Invariant0.invariant' ( ^ t) ( * f) }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ t))) = Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) }
    
end
module Lib_Assignments_Impl2_UnitPropOnce
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Lit_Impl1_Invariant as Invariant4
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Lit_Impl1_UnsetInner as UnsetInner0
  clone Lib_Lit_Impl1_SatInner as SatInner1
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner1
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model7 with function Model0.model = Model6.model
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model7.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model7.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant3 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Clause_Impl2_SatInner as SatInner0 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Clause_Impl2_UnitInner as UnitInner0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate SatInner0.sat_inner = SatInner0.sat_inner, function Model0.model = Model7.model,
  predicate UnsetInner0.unset_inner = UnsetInner0.unset_inner
  clone Lib_Clause_Impl2_UnsatInner as UnsatInner0 with function Model0.model = Model7.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_Impl2_Unit as Unit0 with function Model0.model = Model3.model,
  predicate UnitInner0.unit_inner = UnitInner0.unit_inner
  clone Lib_Clause_Impl2_Sat as Sat0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Clause_Impl2_Unsat as Unsat0 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model3.model
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model2 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model3.model
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model3.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Lib_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model3.model,
  predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner2 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model3.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model5.model,
  function Model1.model = Model1.model
  clone Lib_Formula_Impl1_Invariant as Invariant2 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model0.model,
  function Model1.model = Model6.model
  clone Lib_Trail_Impl1_Invariant as Invariant0 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  val unit_prop_once [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (i : usize) (f : borrowed (Type.lib_formula_formula)) (t : borrowed (Type.lib_trail_trail)) : Type.lib_clause_clausestate
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant0.invariant' ( * t) ( * f)}
    requires {0 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses ( * f)))}
    requires {Invariant1.invariant' ( * self) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { Complete0.complete ( * self) ->  * self =  ^ self && (result = Type.Lib_Clause_ClauseState_Unsat || result = Type.Lib_Clause_ClauseState_Sat) }
    ensures { result = Type.Lib_Clause_ClauseState_Unknown -> Model2.model self = Model3.model ( ^ self) && not (Complete0.complete ( ^ self)) }
    ensures { result = Type.Lib_Clause_ClauseState_Unsat -> Unsat0.unsat (Seq.get (Model1.model (Type.lib_formula_formula_Formula_clauses ( * f))) (UInt64.to_int i)) ( ^ self) && Model2.model self = Model3.model ( ^ self) }
    ensures { result = Type.Lib_Clause_ClauseState_Sat -> Sat0.sat (Seq.get (Model1.model (Type.lib_formula_formula_Formula_clauses ( * f))) (UInt64.to_int i)) ( ^ self) && Model2.model self = Model3.model ( ^ self) }
    ensures { result = Type.Lib_Clause_ClauseState_Unit -> Unit0.unit (Seq.get (Model1.model (Type.lib_formula_formula_Formula_clauses ( * f))) (UInt64.to_int i)) ( * self) && not (Complete0.complete ( * self)) }
    ensures { EventuallySatComplete0.eventually_sat_complete ( * f) ( * self) = EventuallySatComplete0.eventually_sat_complete ( * f) ( ^ self) }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { Invariant1.invariant' ( ^ self) ( * f) }
    ensures { Invariant0.invariant' ( ^ t) ( * f) }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ t))) = Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) }
    
end
module Lib_Formula_Impl1_Sat_Interface
  use Type
  predicate sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_Sat
  use Type
  clone Lib_Formula_Impl1_SatInner_Interface as SatInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    SatInner0.sat_inner self (Model0.model a)
end
module Lib_Formula_Impl1_UnsatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate unsat_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8)
end
module Lib_Formula_Impl1_UnsatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  clone Lib_Clause_Impl2_UnsatInner_Interface as UnsatInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  predicate unsat_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8) = 
    exists i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses self)) && UnsatInner0.unsat_inner (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses self)) i) a
end
module Lib_Formula_Impl1_Unsat_Interface
  use Type
  predicate unsat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_Unsat
  use Type
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate unsat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    UnsatInner0.unsat_inner self (Model0.model a)
end
module Lib_Assignments_Impl2_UnitPropagate_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  clone Lib_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Lib_Assignments_Impl1_Compatible_Interface as Compatible0
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Assignments_Impl1_Complete_Interface as Complete0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant2
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  val unit_propagate [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (f : borrowed (Type.lib_formula_formula)) (t : borrowed (Type.lib_trail_trail)) : Type.lib_clause_clausestate
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant0.invariant' ( * t) ( * f)}
    requires {Invariant1.invariant' ( * self) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { Complete0.complete ( * self) ->  * self =  ^ self && (result = Type.Lib_Clause_ClauseState_Unsat || Sat0.sat ( * f) ( * self)) }
    ensures { match (result) with
      | Type.Lib_Clause_ClauseState_Sat -> Sat0.sat ( * f) ( ^ self)
      | Type.Lib_Clause_ClauseState_Unsat -> Unsat0.unsat ( * f) ( ^ self)
      | Type.Lib_Clause_ClauseState_Unknown -> not (Complete0.complete ( ^ self))
      | Type.Lib_Clause_ClauseState_Unit -> not (Complete0.complete ( * self))
      | _ -> true
      end }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete ( * f) ( ^ self) = EventuallySatComplete0.eventually_sat_complete ( * f) ( * self) }
    ensures { Invariant1.invariant' ( ^ self) ( * f) }
    ensures { Invariant0.invariant' ( ^ t) ( * f) }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ t))) = Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) }
    
end
module Lib_Assignments_Impl2_UnitPropagate
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone Lib_Lit_Impl1_Invariant as Invariant4
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner2
  clone Lib_Lit_Impl1_SatInner as SatInner2
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model5.model
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model6 with function Model0.model = Model4.model
  clone Lib_Clause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Clause_Impl2_SatInner as SatInner1 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model6.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model6.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant3 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model3.model
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model1.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Lib_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model1.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model3.model,
  function Model1.model = Model2.model
  clone Lib_Formula_Impl1_Invariant as Invariant2 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model0.model,
  function Model1.model = Model4.model
  clone Lib_Trail_Impl1_Invariant as Invariant0 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  val unit_propagate [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (f : borrowed (Type.lib_formula_formula)) (t : borrowed (Type.lib_trail_trail)) : Type.lib_clause_clausestate
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant0.invariant' ( * t) ( * f)}
    requires {Invariant1.invariant' ( * self) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { Complete0.complete ( * self) ->  * self =  ^ self && (result = Type.Lib_Clause_ClauseState_Unsat || Sat0.sat ( * f) ( * self)) }
    ensures { match (result) with
      | Type.Lib_Clause_ClauseState_Sat -> Sat0.sat ( * f) ( ^ self)
      | Type.Lib_Clause_ClauseState_Unsat -> Unsat0.unsat ( * f) ( ^ self)
      | Type.Lib_Clause_ClauseState_Unknown -> not (Complete0.complete ( ^ self))
      | Type.Lib_Clause_ClauseState_Unit -> not (Complete0.complete ( * self))
      | _ -> true
      end }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete ( * f) ( ^ self) = EventuallySatComplete0.eventually_sat_complete ( * f) ( * self) }
    ensures { Invariant1.invariant' ( ^ self) ( * f) }
    ensures { Invariant0.invariant' ( ^ t) ( * f) }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ t))) = Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) }
    
end
module Lib_Assignments_Impl2_DoUnitPropagation_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use mach.int.UInt64
  clone Lib_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone Lib_Assignments_Impl1_Compatible_Interface as Compatible0
  clone Lib_Assignments_Impl1_Complete_Interface as Complete0
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant2
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  val do_unit_propagation [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (f : borrowed (Type.lib_formula_formula)) (t : borrowed (Type.lib_trail_trail)) : Type.core_result_result () usize
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant0.invariant' ( * t) ( * f)}
    requires {Invariant1.invariant' ( * self) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { match (result) with
      | Type.Core_Result_Result_Err cref -> Unsat0.unsat ( * f) ( ^ self)
      | Type.Core_Result_Result_Ok _ -> not (Complete0.complete ( ^ self)) || not (Unsat0.unsat ( * f) ( ^ self))
      end }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete ( * f) ( * self) = EventuallySatComplete0.eventually_sat_complete ( * f) ( ^ self) }
    ensures { Invariant1.invariant' ( ^ self) ( * f) }
    ensures { Invariant0.invariant' ( ^ t) ( * f) }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ t))) = Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) }
    
end
module Lib_Assignments_Impl2_DoUnitPropagation
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use mach.int.UInt64
  use prelude.UInt8
  clone Lib_Lit_Impl1_SatInner as SatInner2
  clone Lib_Lit_Impl1_Invariant as Invariant4
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner2
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model5.model
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model6 with function Model0.model = Model4.model
  clone Lib_Clause_Impl2_SatInner as SatInner1 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Clause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model6.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model6.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant3 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model3.model
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model1.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Lib_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model1.model,
  predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model1.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model3.model,
  function Model1.model = Model2.model
  clone Lib_Formula_Impl1_Invariant as Invariant2 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model0.model,
  function Model1.model = Model4.model
  clone Lib_Trail_Impl1_Invariant as Invariant0 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  val do_unit_propagation [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (f : borrowed (Type.lib_formula_formula)) (t : borrowed (Type.lib_trail_trail)) : Type.core_result_result () usize
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant0.invariant' ( * t) ( * f)}
    requires {Invariant1.invariant' ( * self) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { match (result) with
      | Type.Core_Result_Result_Err cref -> Unsat0.unsat ( * f) ( ^ self)
      | Type.Core_Result_Result_Ok _ -> not (Complete0.complete ( ^ self)) || not (Unsat0.unsat ( * f) ( ^ self))
      end }
    ensures { Compatible0.compatible ( * self) ( ^ self) }
    ensures { EventuallySatComplete0.eventually_sat_complete ( * f) ( * self) = EventuallySatComplete0.eventually_sat_complete ( * f) ( ^ self) }
    ensures { Invariant1.invariant' ( ^ self) ( * f) }
    ensures { Invariant0.invariant' ( ^ t) ( * f) }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ t))) = Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) }
    
end
module Lib_Assignments_Impl2_CancelUntil_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = (usize, Type.lib_trail_reason)
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val cancel_until [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (trail : borrowed (Type.lib_trail_trail)) (level : usize) (_f : Type.lib_formula_formula) : ()
    requires {UInt64.to_int level > 0}
    requires {Invariant0.invariant' ( * self) _f}
    requires {Invariant1.invariant' ( * trail) _f}
    requires {UInt64.to_int level <= Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * trail)))}
    ensures { forall j : (int) . 0 <= j && j < UInt64.to_int level -> Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ trail))) j = Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail ( * trail))) j }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ trail))) = UInt64.to_int level }
    ensures { Model1.model (Type.lib_trail_trail_Trail_vardata ( ^ trail)) = Model1.model (Type.lib_trail_trail_Trail_vardata ( * trail)) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    ensures { Invariant1.invariant' ( ^ trail) _f }
    
end
module Lib_Assignments_Impl2_CancelUntil
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model2 with function Model0.model = Model3.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model1.model,
  function Model1.model = Model5.model
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model0.model,
  function Model1.model = Model4.model
  clone Lib_Trail_Impl1_Invariant as Invariant1 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  val cancel_until [@cfg:stackify] (self : borrowed (Type.lib_assignments_assignments)) (trail : borrowed (Type.lib_trail_trail)) (level : usize) (_f : Type.lib_formula_formula) : ()
    requires {UInt64.to_int level > 0}
    requires {Invariant0.invariant' ( * self) _f}
    requires {Invariant1.invariant' ( * trail) _f}
    requires {UInt64.to_int level <= Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * trail)))}
    ensures { forall j : (int) . 0 <= j && j < UInt64.to_int level -> Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ trail))) j = Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail ( * trail))) j }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ trail))) = UInt64.to_int level }
    ensures { Model1.model (Type.lib_trail_trail_Trail_vardata ( ^ trail)) = Model1.model (Type.lib_trail_trail_Trail_vardata ( * trail)) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    ensures { Invariant1.invariant' ( ^ trail) _f }
    
end
module Core_Cmp_PartialEq_Eq_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Eq
  type self   
  type rhs   
  use prelude.Prelude
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Ne_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Ne
  type self   
  type rhs   
  use prelude.Prelude
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Lib_Formula_Impl0_Eq_Interface
  use prelude.Prelude
  use Type
  val eq [@cfg:stackify] (self : Type.lib_formula_satstate) (other : Type.lib_formula_satstate) : bool
end
module Lib_Formula_Impl0_Eq
  use prelude.Prelude
  use Type
  val eq [@cfg:stackify] (self : Type.lib_formula_satstate) (other : Type.lib_formula_satstate) : bool
end
module Lib_Formula_Impl0
  use Type
  clone Lib_Formula_Impl0_Eq_Interface as Eq0
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Type.lib_formula_satstate,
  type rhs = Type.lib_formula_satstate, val eq = Eq0.eq
end
module Lib_Formula_Impl1_EventuallySatInner_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  predicate eventually_sat_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8)
end
module Lib_Formula_Impl1_EventuallySatInner
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.UInt64
  clone Lib_Formula_Impl1_SatInner_Interface as SatInner0
  clone Lib_Assignments_CompatibleInner_Interface as CompatibleInner0
  predicate eventually_sat_inner (self : Type.lib_formula_formula) (a : Seq.seq uint8) = 
    exists a2 : (Seq.seq uint8) . Seq.length a2 = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars self) && CompatibleInner0.compatible_inner a a2 && SatInner0.sat_inner self a2
end
module Lib_Formula_Impl1_EventuallySat_Interface
  use Type
  predicate eventually_sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments)
end
module Lib_Formula_Impl1_EventuallySat
  use Type
  clone Lib_Formula_Impl1_EventuallySatInner_Interface as EventuallySatInner0
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate eventually_sat (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) = 
    EventuallySatInner0.eventually_sat_inner self (Model0.model a)
end
module Lib_Formula_Impl2_IsUnsat_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val is_unsat [@cfg:stackify] (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Unsat0.unsat self a }
    
end
module Lib_Formula_Impl2_IsUnsat
  use prelude.Prelude
  use Type
  use mach.int.Int
  use prelude.UInt8
  clone Lib_Lit_Impl1_Invariant as Invariant3
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner2
  clone Lib_Clause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  val is_unsat [@cfg:stackify] (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Unsat0.unsat self a }
    
end
module Lib_Formula_Impl2_IsSat_Interface
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val is_sat [@cfg:stackify] (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Sat0.sat self a }
    
end
module Lib_Formula_Impl2_IsSat
  use prelude.Prelude
  use Type
  use mach.int.Int
  use prelude.UInt8
  clone Lib_Lit_Impl1_Invariant as Invariant3
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Lit_Impl1_SatInner as SatInner2
  clone Lib_Clause_Impl2_SatInner as SatInner1 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  val is_sat [@cfg:stackify] (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : bool
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Sat0.sat self a }
    
end
module Lib_Formula_Impl2_Eval_Interface
  use Type
  use prelude.Prelude
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Assignments_Impl1_Complete_Interface as Complete0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  val eval [@cfg:stackify] (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : Type.lib_formula_satstate
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Type.Lib_Formula_SatState_Unknown -> not (Complete0.complete a) }
    ensures { (result = Type.Lib_Formula_SatState_Unsat) = Unsat0.unsat self a }
    ensures { (result = Type.Lib_Formula_SatState_Sat) = Sat0.sat self a }
    
end
module Lib_Formula_Impl2_Eval
  use Type
  use prelude.Prelude
  use mach.int.Int
  use prelude.UInt8
  clone Lib_Lit_Impl1_Invariant as Invariant3
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Lit_Impl1_SatInner as SatInner2
  clone Lib_Clause_Impl2_SatInner as SatInner1 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner2
  clone Lib_Clause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model0.model,
  predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  val eval [@cfg:stackify] (self : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) : Type.lib_formula_satstate
    requires {Invariant0.invariant' a self}
    requires {Invariant1.invariant' self}
    ensures { result = Type.Lib_Formula_SatState_Unknown -> not (Complete0.complete a) }
    ensures { (result = Type.Lib_Formula_SatState_Unsat) = Unsat0.unsat self a }
    ensures { (result = Type.Lib_Formula_SatState_Sat) = Sat0.sat self a }
    
end
module Lib_Formula_Impl2_AddClause_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone Lib_Clause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone Lib_Clause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.lib_lit_lit
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val add_clause [@cfg:stackify] (self : borrowed (Type.lib_formula_formula)) (clause : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)) (watches : borrowed (Type.lib_watches_watches)) (_t : Type.lib_trail_trail) : usize
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model0.model clause)}
    requires {VarsInRangeInner0.vars_in_range_inner (Model0.model clause) (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * self)))}
    requires {Seq.length (Model0.model clause) >= 2}
    requires {Invariant0.invariant' _t ( * self)}
    requires {Invariant1.invariant' ( * self)}
    ensures { Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses ( * self))) + 1 = Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses ( ^ self))) }
    ensures { UInt64.to_int result = Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses ( * self))) }
    ensures { EquisatCompatible0.equisat_compatible ( * self) ( ^ self) }
    ensures { Invariant0.invariant' _t ( * self) }
    ensures { Invariant1.invariant' ( ^ self) }
    ensures { UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( ^ self)) }
    
end
module Lib_Formula_Impl2_AddClause
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Lib_Lit_Impl1_SatInner as SatInner2
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model3.model,
  function Model1.model = Model1.model
  clone Lib_Lit_Impl1_Invariant as Invariant2
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model5 with function Model0.model = Model2.model
  clone Lib_Clause_Impl2_SatInner as SatInner1 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model5.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model5.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant3 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone Lib_Formula_Impl1_Compatible as Compatible0 with function Model0.model = Model1.model,
  function Model1.model = Model5.model
  clone Lib_Formula_Impl1_EquisatCompatible as EquisatCompatible0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Equisat0.equisat = Equisat0.equisat
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model4.model,
  function Model1.model = Model2.model
  clone Lib_Trail_Impl1_Invariant as Invariant0 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.lib_lit_lit
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  val add_clause [@cfg:stackify] (self : borrowed (Type.lib_formula_formula)) (clause : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)) (watches : borrowed (Type.lib_watches_watches)) (_t : Type.lib_trail_trail) : usize
    requires {NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model0.model clause)}
    requires {VarsInRangeInner0.vars_in_range_inner (Model0.model clause) (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * self)))}
    requires {Seq.length (Model0.model clause) >= 2}
    requires {Invariant0.invariant' _t ( * self)}
    requires {Invariant1.invariant' ( * self)}
    ensures { Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses ( * self))) + 1 = Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses ( ^ self))) }
    ensures { UInt64.to_int result = Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses ( * self))) }
    ensures { EquisatCompatible0.equisat_compatible ( * self) ( ^ self) }
    ensures { Invariant0.invariant' _t ( * self) }
    ensures { Invariant1.invariant' ( ^ self) }
    ensures { UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * self)) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( ^ self)) }
    
end
module Lib_Logic_ResolventOf_Interface
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate resolvent_of_ (c3 : Type.lib_clause_clause) (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (idx : usize)
    
end
module Lib_Logic_ResolventOf
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use seq.Seq
  clone Lib_Lit_Impl1_LitIn_Interface as LitIn0
  clone Lib_Clause_Impl1_Model_Interface as Model0
  predicate resolvent_of_ (c3 : Type.lib_clause_clause) (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (idx : usize)
    
   = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) i)) = UInt64.to_int idx) -> LitIn0.lit_in (Seq.get (Model0.model c) i) c3 && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model c2) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) i)) = UInt64.to_int idx) -> LitIn0.lit_in (Seq.get (Model0.model c2) i) c3 && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model c3) -> LitIn0.lit_in (Seq.get (Model0.model c3) i) c || LitIn0.lit_in (Seq.get (Model0.model c3) i) c2))
end
module Lib_Logic_LemmaTrivial_Interface
  use Type
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Formula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  function lemma_trivial (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) : ()
end
module Lib_Logic_LemmaTrivial
  use Type
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Formula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  function lemma_trivial (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) : ()
  axiom lemma_trivial_spec : forall f : Type.lib_formula_formula, f2 : Type.lib_formula_formula . EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f -> EquisatCompatible0.equisat_compatible f f2 -> Invariant0.invariant' f2 -> Invariant0.invariant' f -> EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass f2
end
module Lib_Logic_LemmaEqualAreEquisat_Interface
  use Type
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  function lemma_equal_are_equisat (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) : ()
end
module Lib_Logic_LemmaEqualAreEquisat
  use Type
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  function lemma_equal_are_equisat (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) : ()
  axiom lemma_equal_are_equisat_spec : forall f : Type.lib_formula_formula, f2 : Type.lib_formula_formula . f = f2 -> Invariant0.invariant' f2 -> Invariant0.invariant' f -> EquisatCompatible0.equisat_compatible f f2
end
module Lib_Logic_LemmaEqualAreEquisat2_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  function lemma_equal_are_equisat2 (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) : ()
end
module Lib_Logic_LemmaEqualAreEquisat2
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  function lemma_equal_are_equisat2 (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) : ()
  axiom lemma_equal_are_equisat2_spec : forall f : Type.lib_formula_formula, f2 : Type.lib_formula_formula . (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) -> Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i = Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) i) -> Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) = Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) -> UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f2) -> Invariant0.invariant' f2 -> Invariant0.invariant' f -> EquisatCompatible0.equisat_compatible f f2
end
module Lib_Logic_LemmaEqualAreEquisat3_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Clause_Impl1_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  function lemma_equal_are_equisat3 (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) : ()
end
module Lib_Logic_LemmaEqualAreEquisat3
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Clause_Impl1_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  function lemma_equal_are_equisat3 (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) : ()
  axiom lemma_equal_are_equisat3_spec : forall f : Type.lib_formula_formula, f2 : Type.lib_formula_formula . (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) -> Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i)) = Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) i)) && (forall j : (int) . 0 <= j && j < Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i)) -> Seq.get (Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i)) j = Seq.get (Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) i)) j)) -> Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) = Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) -> UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f2) -> Invariant0.invariant' f2 -> Invariant0.invariant' f -> EquisatCompatible0.equisat_compatible f f2
end
module Lib_Logic_LemmaSubClauseNotSat_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  clone Lib_Lit_Impl1_IsOpp_Interface as IsOpp0
  clone Lib_Lit_Impl1_LitIn_Interface as LitIn0
  clone Lib_Clause_Impl1_Model_Interface as Model0
  clone Lib_Clause_Impl2_Sat_Interface as Sat0
  function lemma_sub_clause_not_sat (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) : ()
    
end
module Lib_Logic_LemmaSubClauseNotSat
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  clone Lib_Lit_Impl1_IsOpp_Interface as IsOpp0
  clone Lib_Lit_Impl1_LitIn_Interface as LitIn0
  clone Lib_Clause_Impl1_Model_Interface as Model0
  clone Lib_Clause_Impl2_Sat_Interface as Sat0
  function lemma_sub_clause_not_sat (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) : ()
    
   = 
    ()
  axiom lemma_sub_clause_not_sat_spec : forall c : Type.lib_clause_clause, c2 : Type.lib_clause_clause, c3 : Type.lib_clause_clause, a : Type.lib_assignments_assignments . not (Sat0.sat c2 a) -> not (Sat0.sat c a) -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model c3) -> LitIn0.lit_in (Seq.get (Model0.model c3) i) c || LitIn0.lit_in (Seq.get (Model0.model c3) i) c2) -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model c2) -> LitIn0.lit_in (Seq.get (Model0.model c2) i) c3 || (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && IsOpp0.is_opp (Seq.get (Model0.model c2) i) (Seq.get (Model0.model c) j))) -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model c) -> LitIn0.lit_in (Seq.get (Model0.model c) i) c3 || (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c2) && IsOpp0.is_opp (Seq.get (Model0.model c) i) (Seq.get (Model0.model c2) j))) -> not (Sat0.sat c3 a)
end
module Lib_Logic_LemmaSubClauseNotSat_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Lit_Impl1_SatInner as SatInner1
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Lit_Impl1_IsOpp as IsOpp0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl2_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Clause_Impl2_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Lit_Impl1_LitIn as LitIn0 with function Model0.model = Model0.model
  let rec ghost function lemma_sub_clause_not_sat (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) : ()
    requires {not (Sat0.sat c2 a)}
    requires {not (Sat0.sat c a)}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model c3) -> LitIn0.lit_in (Seq.get (Model0.model c3) i) c || LitIn0.lit_in (Seq.get (Model0.model c3) i) c2}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model c2) -> LitIn0.lit_in (Seq.get (Model0.model c2) i) c3 || (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && IsOpp0.is_opp (Seq.get (Model0.model c2) i) (Seq.get (Model0.model c) j))}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model c) -> LitIn0.lit_in (Seq.get (Model0.model c) i) c3 || (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c2) && IsOpp0.is_opp (Seq.get (Model0.model c) i) (Seq.get (Model0.model c2) j))}
    ensures { not (Sat0.sat c3 a) }
    
   = 
    ()
end
module Lib_Logic_LemmaSubClauseSat_Interface
  use Type
  use mach.int.Int
  clone Lib_Clause_Impl2_ResolventOf_Interface as ResolventOf0
  clone Lib_Clause_Impl2_Sat_Interface as Sat0
  function lemma_sub_clause_sat (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (k : int) (m : int) : ()
    
end
module Lib_Logic_LemmaSubClauseSat
  use Type
  use mach.int.Int
  clone Lib_Clause_Impl2_ResolventOf_Interface as ResolventOf0
  clone Lib_Clause_Impl2_Sat_Interface as Sat0
  function lemma_sub_clause_sat (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (k : int) (m : int) : ()
    
   = 
    ()
  axiom lemma_sub_clause_sat_spec : forall c : Type.lib_clause_clause, c2 : Type.lib_clause_clause, c3 : Type.lib_clause_clause, a : Type.lib_assignments_assignments, k : int, m : int . Sat0.sat c2 a -> Sat0.sat c a -> ResolventOf0.resolvent_of c3 c c2 k m -> Sat0.sat c3 a
end
module Lib_Logic_LemmaSubClauseSat_Impl
  use Type
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Lit_Impl1_LitIn as LitIn0 with function Model0.model = Model1.model
  clone Lib_Lit_Impl1_SatInner as SatInner1
  clone Lib_Clause_Impl2_SatInner as SatInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model0 with function Model0.model = Model2.model
  clone Lib_Clause_Impl2_Sat as Sat0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Lit_Impl1_IsOpp as IsOpp0
  clone Lib_Clause_Impl2_ResolventOf as ResolventOf0 with function Model0.model = Model1.model,
  predicate LitIn0.lit_in = LitIn0.lit_in, predicate IsOpp0.is_opp = IsOpp0.is_opp
  let rec ghost function lemma_sub_clause_sat (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (a : Type.lib_assignments_assignments) (k : int) (m : int) : ()
    requires {Sat0.sat c2 a}
    requires {Sat0.sat c a}
    requires {ResolventOf0.resolvent_of c3 c c2 k m}
    ensures { Sat0.sat c3 a }
    
   = 
    ()
end
module Lib_Logic_LemmaSatGivesSat_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Clause_Impl2_Equals_Interface as Equals0
  clone Lib_Clause_Impl1_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  clone Lib_Clause_Impl2_InFormula_Interface as InFormula0
  clone Lib_Clause_Impl2_ResolventOf_Interface as ResolventOf0
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  function lemma_sat_gives_sat (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (k : int) (m : int) (a : Type.lib_assignments_assignments) : ()
    
end
module Lib_Logic_LemmaSatGivesSat
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Clause_Impl2_Equals_Interface as Equals0
  clone Lib_Clause_Impl1_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  clone Lib_Clause_Impl2_InFormula_Interface as InFormula0
  clone Lib_Clause_Impl2_ResolventOf_Interface as ResolventOf0
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Lit_Impl1_IsOpp_Interface as IsOpp0
  clone Lib_Lit_Impl1_LitIn_Interface as LitIn0
  clone Lib_Clause_Impl2_Sat_Interface as Sat1
  clone Lib_Logic_LemmaSubClauseNotSat_Interface as LemmaSubClauseNotSat0 with predicate Sat0.sat = Sat1.sat,
  function Model0.model = Model1.model, predicate LitIn0.lit_in = LitIn0.lit_in,
  predicate IsOpp0.is_opp = IsOpp0.is_opp, axiom .
  clone Lib_Logic_LemmaSubClauseSat_Interface as LemmaSubClauseSat0 with predicate Sat0.sat = Sat1.sat,
  predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of, axiom .
  function lemma_sat_gives_sat (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (k : int) (m : int) (a : Type.lib_assignments_assignments) : ()
    
   = 
    let _ = LemmaSubClauseNotSat0.lemma_sub_clause_not_sat c c2 c3 a in let _ = LemmaSubClauseSat0.lemma_sub_clause_sat c c2 c3 a k m in ()
  axiom lemma_sat_gives_sat_spec : forall f : Type.lib_formula_formula, f2 : Type.lib_formula_formula, c : Type.lib_clause_clause, c2 : Type.lib_clause_clause, c3 : Type.lib_clause_clause, k : int, m : int, a : Type.lib_assignments_assignments . Sat0.sat f a -> ResolventOf0.resolvent_of c3 c c2 k m -> InFormula0.in_formula c2 f -> InFormula0.in_formula c f -> Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) (Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) - 1)) = Model1.model c3 -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) -> Equals0.equals (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i) (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) i)) -> Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) + 1 = Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) -> UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f2) -> Invariant0.invariant' f2 -> Invariant0.invariant' f -> Sat0.sat f2 a
end
module Lib_Logic_LemmaSatGivesSat_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Lit_Impl1_Invariant as Invariant2
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Lit_Impl1_SatInner as SatInner2
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model2 with function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant1 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Clause_Impl2_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Clause_Impl2_Sat as Sat1 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Lit_Impl1_LitIn as LitIn0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl2_Equals as Equals0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Lib_Clause_Impl2_InFormula as InFormula0 with function Model0.model = Model0.model
  clone Lib_Lit_Impl1_IsOpp as IsOpp0
  clone Lib_Logic_LemmaSubClauseNotSat as LemmaSubClauseNotSat0 with predicate Sat0.sat = Sat1.sat,
  function Model0.model = Model1.model, predicate LitIn0.lit_in = LitIn0.lit_in,
  predicate IsOpp0.is_opp = IsOpp0.is_opp, axiom .
  clone Lib_Clause_Impl2_ResolventOf as ResolventOf0 with function Model0.model = Model1.model,
  predicate LitIn0.lit_in = LitIn0.lit_in, predicate IsOpp0.is_opp = IsOpp0.is_opp
  clone Lib_Logic_LemmaSubClauseSat as LemmaSubClauseSat0 with predicate Sat0.sat = Sat1.sat,
  predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of, axiom .
  let rec ghost function lemma_sat_gives_sat (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (k : int) (m : int) (a : Type.lib_assignments_assignments) : ()
    requires {Sat0.sat f a}
    requires {ResolventOf0.resolvent_of c3 c c2 k m}
    requires {InFormula0.in_formula c2 f}
    requires {InFormula0.in_formula c f}
    requires {Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) (Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) - 1)) = Model1.model c3}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) -> Equals0.equals (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i) (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) i)}
    requires {Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) + 1 = Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f2))}
    requires {UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f2)}
    requires {Invariant0.invariant' f2}
    requires {Invariant0.invariant' f}
    ensures { Sat0.sat f2 a }
    
   = 
    let _ = LemmaSubClauseNotSat0.lemma_sub_clause_not_sat c c2 c3 a in let _ = LemmaSubClauseSat0.lemma_sub_clause_sat c c2 c3 a k m in ()
end
module Lib_Logic_LemmaNotSatGivesNotSat_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Clause_Impl2_Equals_Interface as Equals0
  clone Lib_Clause_Impl1_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  clone Lib_Clause_Impl2_InFormula_Interface as InFormula0
  clone Lib_Clause_Impl2_ResolventOf_Interface as ResolventOf0
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  function lemma_not_sat_gives_not_sat (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (k : int) (m : int) (a : Type.lib_assignments_assignments) : ()
    
end
module Lib_Logic_LemmaNotSatGivesNotSat
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Clause_Impl2_Equals_Interface as Equals0
  clone Lib_Clause_Impl1_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  clone Lib_Clause_Impl2_InFormula_Interface as InFormula0
  clone Lib_Clause_Impl2_ResolventOf_Interface as ResolventOf0
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Lit_Impl1_IsOpp_Interface as IsOpp0
  clone Lib_Lit_Impl1_LitIn_Interface as LitIn0
  clone Lib_Clause_Impl2_Sat_Interface as Sat1
  clone Lib_Logic_LemmaSubClauseNotSat_Interface as LemmaSubClauseNotSat0 with predicate Sat0.sat = Sat1.sat,
  function Model0.model = Model1.model, predicate LitIn0.lit_in = LitIn0.lit_in,
  predicate IsOpp0.is_opp = IsOpp0.is_opp, axiom .
  clone Lib_Logic_LemmaSubClauseSat_Interface as LemmaSubClauseSat0 with predicate Sat0.sat = Sat1.sat,
  predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of, axiom .
  function lemma_not_sat_gives_not_sat (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (k : int) (m : int) (a : Type.lib_assignments_assignments) : ()
    
   = 
    let _ = LemmaSubClauseNotSat0.lemma_sub_clause_not_sat c c2 c3 a in let _ = LemmaSubClauseSat0.lemma_sub_clause_sat c c2 c3 a k m in ()
  axiom lemma_not_sat_gives_not_sat_spec : forall f : Type.lib_formula_formula, f2 : Type.lib_formula_formula, c : Type.lib_clause_clause, c2 : Type.lib_clause_clause, c3 : Type.lib_clause_clause, k : int, m : int, a : Type.lib_assignments_assignments . not (Sat0.sat f a) -> ResolventOf0.resolvent_of c3 c c2 k m -> InFormula0.in_formula c2 f -> InFormula0.in_formula c f -> Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) (Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) - 1)) = Model1.model c3 -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) -> Equals0.equals (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i) (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) i)) -> Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) + 1 = Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) -> UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f2) -> Invariant0.invariant' f2 -> Invariant0.invariant' f -> not (Sat0.sat f2 a)
end
module Lib_Logic_LemmaNotSatGivesNotSat_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Lit_Impl1_Invariant as Invariant2
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Lit_Impl1_SatInner as SatInner2
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model2 with function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model1 with function Model0.model = Model3.model
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant1 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Clause_Impl2_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Clause_Impl2_Sat as Sat1 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Lit_Impl1_LitIn as LitIn0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl2_Equals as Equals0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Lib_Clause_Impl2_InFormula as InFormula0 with function Model0.model = Model0.model
  clone Lib_Lit_Impl1_IsOpp as IsOpp0
  clone Lib_Logic_LemmaSubClauseNotSat as LemmaSubClauseNotSat0 with predicate Sat0.sat = Sat1.sat,
  function Model0.model = Model1.model, predicate LitIn0.lit_in = LitIn0.lit_in,
  predicate IsOpp0.is_opp = IsOpp0.is_opp, axiom .
  clone Lib_Clause_Impl2_ResolventOf as ResolventOf0 with function Model0.model = Model1.model,
  predicate LitIn0.lit_in = LitIn0.lit_in, predicate IsOpp0.is_opp = IsOpp0.is_opp
  clone Lib_Logic_LemmaSubClauseSat as LemmaSubClauseSat0 with predicate Sat0.sat = Sat1.sat,
  predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of, axiom .
  let rec ghost function lemma_not_sat_gives_not_sat (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (k : int) (m : int) (a : Type.lib_assignments_assignments) : ()
    requires {not (Sat0.sat f a)}
    requires {ResolventOf0.resolvent_of c3 c c2 k m}
    requires {InFormula0.in_formula c2 f}
    requires {InFormula0.in_formula c f}
    requires {Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) (Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) - 1)) = Model1.model c3}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) -> Equals0.equals (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i) (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) i)}
    requires {Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) + 1 = Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f2))}
    requires {UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f2)}
    requires {Invariant0.invariant' f2}
    requires {Invariant0.invariant' f}
    ensures { not (Sat0.sat f2 a) }
    
   = 
    let _ = LemmaSubClauseNotSat0.lemma_sub_clause_not_sat c c2 c3 a in let _ = LemmaSubClauseSat0.lemma_sub_clause_sat c c2 c3 a k m in ()
end
module Lib_Logic_LemmaExtendedFormulaIsEquisatCompatible_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Clause_Impl2_EquisatExtension_Interface as EquisatExtension0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Clause_Impl2_Equals_Interface as Equals0
  clone Lib_Clause_Impl1_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  clone Lib_Clause_Impl2_InFormula_Interface as InFormula0
  clone Lib_Clause_Impl2_ResolventOf_Interface as ResolventOf0
  function lemma_extended_formula_is_equisat_compatible (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (k : int) (m : int) (a : Type.lib_assignments_assignments) : ()
    
end
module Lib_Logic_LemmaExtendedFormulaIsEquisatCompatible
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Clause_Impl2_EquisatExtension_Interface as EquisatExtension0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Clause_Impl2_Equals_Interface as Equals0
  clone Lib_Clause_Impl1_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  clone Lib_Clause_Impl2_InFormula_Interface as InFormula0
  clone Lib_Clause_Impl2_ResolventOf_Interface as ResolventOf0
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Logic_LemmaSatGivesSat_Interface as LemmaSatGivesSat0 with predicate Sat0.sat = Sat0.sat,
  predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of,
  predicate InFormula0.in_formula = InFormula0.in_formula, function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Equals0.equals = Equals0.equals,
  predicate Invariant0.invariant' = Invariant0.invariant', axiom .
  clone Lib_Logic_LemmaNotSatGivesNotSat_Interface as LemmaNotSatGivesNotSat0 with predicate Sat0.sat = Sat0.sat,
  predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of,
  predicate InFormula0.in_formula = InFormula0.in_formula, function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Equals0.equals = Equals0.equals,
  predicate Invariant0.invariant' = Invariant0.invariant', axiom .
  function lemma_extended_formula_is_equisat_compatible (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (k : int) (m : int) (a : Type.lib_assignments_assignments) : ()
    
   = 
    let _ = LemmaNotSatGivesNotSat0.lemma_not_sat_gives_not_sat f f2 c c2 c3 k m a in let _ = LemmaSatGivesSat0.lemma_sat_gives_sat f f2 c c2 c3 k m a in ()
  axiom lemma_extended_formula_is_equisat_compatible_spec : forall f : Type.lib_formula_formula, f2 : Type.lib_formula_formula, c : Type.lib_clause_clause, c2 : Type.lib_clause_clause, c3 : Type.lib_clause_clause, k : int, m : int, a : Type.lib_assignments_assignments . ResolventOf0.resolvent_of c3 c c2 k m -> InFormula0.in_formula c2 f -> InFormula0.in_formula c f -> Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) (Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) - 1)) = Model1.model c3 -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) -> Equals0.equals (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i) (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) i)) -> Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) + 1 = Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) -> UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f2) -> Invariant0.invariant' f2 -> Invariant0.invariant' f -> EquisatCompatible0.equisat_compatible f f2 && EquisatExtension0.equisat_extension c3 f f2
end
module Lib_Logic_LemmaExtendedFormulaIsEquisatCompatible_Impl
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Lit_Impl1_Invariant as Invariant2
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant2.invariant'
  clone Lib_Lit_Impl1_SatInner as SatInner2
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Clause_Impl2_SatInner as SatInner1 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Clause_Impl2_Sat as Sat1 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model1.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model1.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant1 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Lit_Impl1_LitIn as LitIn0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl2_Equals as Equals0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Compatible as Compatible0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone Lib_Formula_Impl1_EquisatCompatible as EquisatCompatible0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Equisat0.equisat = Equisat0.equisat
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant'
  clone Lib_Clause_Impl2_EquisatExtension as EquisatExtension0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model0.model,
  predicate EquisatCompatible0.equisat_compatible = EquisatCompatible0.equisat_compatible
  clone Lib_Clause_Impl2_InFormula as InFormula0 with function Model0.model = Model0.model
  clone Lib_Lit_Impl1_IsOpp as IsOpp0
  clone Lib_Logic_LemmaSubClauseNotSat as LemmaSubClauseNotSat0 with predicate Sat0.sat = Sat1.sat,
  function Model0.model = Model1.model, predicate LitIn0.lit_in = LitIn0.lit_in,
  predicate IsOpp0.is_opp = IsOpp0.is_opp, axiom .
  clone Lib_Clause_Impl2_ResolventOf as ResolventOf0 with function Model0.model = Model1.model,
  predicate LitIn0.lit_in = LitIn0.lit_in, predicate IsOpp0.is_opp = IsOpp0.is_opp
  clone Lib_Logic_LemmaSubClauseSat as LemmaSubClauseSat0 with predicate Sat0.sat = Sat1.sat,
  predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of, axiom .
  clone Lib_Logic_LemmaSatGivesSat as LemmaSatGivesSat0 with predicate Sat0.sat = Sat0.sat,
  predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of,
  predicate InFormula0.in_formula = InFormula0.in_formula, function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Equals0.equals = Equals0.equals,
  predicate Invariant0.invariant' = Invariant0.invariant',
  function LemmaSubClauseNotSat0.lemma_sub_clause_not_sat = LemmaSubClauseNotSat0.lemma_sub_clause_not_sat,
  function LemmaSubClauseSat0.lemma_sub_clause_sat = LemmaSubClauseSat0.lemma_sub_clause_sat,
  predicate Sat1.sat = Sat1.sat, predicate LitIn0.lit_in = LitIn0.lit_in, predicate IsOpp0.is_opp = IsOpp0.is_opp,
  axiom .
  clone Lib_Logic_LemmaNotSatGivesNotSat as LemmaNotSatGivesNotSat0 with predicate Sat0.sat = Sat0.sat,
  predicate ResolventOf0.resolvent_of = ResolventOf0.resolvent_of,
  predicate InFormula0.in_formula = InFormula0.in_formula, function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Equals0.equals = Equals0.equals,
  predicate Invariant0.invariant' = Invariant0.invariant',
  function LemmaSubClauseNotSat0.lemma_sub_clause_not_sat = LemmaSubClauseNotSat0.lemma_sub_clause_not_sat,
  function LemmaSubClauseSat0.lemma_sub_clause_sat = LemmaSubClauseSat0.lemma_sub_clause_sat,
  predicate Sat1.sat = Sat1.sat, predicate LitIn0.lit_in = LitIn0.lit_in, predicate IsOpp0.is_opp = IsOpp0.is_opp,
  axiom .
  let rec ghost function lemma_extended_formula_is_equisat_compatible (f : Type.lib_formula_formula) (f2 : Type.lib_formula_formula) (c : Type.lib_clause_clause) (c2 : Type.lib_clause_clause) (c3 : Type.lib_clause_clause) (k : int) (m : int) (a : Type.lib_assignments_assignments) : ()
    requires {ResolventOf0.resolvent_of c3 c c2 k m}
    requires {InFormula0.in_formula c2 f}
    requires {InFormula0.in_formula c f}
    requires {Model1.model (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) (Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) - 1)) = Model1.model c3}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) -> Equals0.equals (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) i) (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f2)) i)}
    requires {Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f)) + 1 = Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f2))}
    requires {UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f2)}
    requires {Invariant0.invariant' f2}
    requires {Invariant0.invariant' f}
    ensures { EquisatExtension0.equisat_extension c3 f f2 }
    ensures { EquisatCompatible0.equisat_compatible f f2 }
    
   = 
    let _ = LemmaNotSatGivesNotSat0.lemma_not_sat_gives_not_sat f f2 c c2 c3 k m a in let _ = LemmaSatGivesSat0.lemma_sat_gives_sat f f2 c c2 c3 k m a in ()
end
module Lib_Logic_BoolToAssignedstate_Interface
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function bool_to_assignedstate (b : bool) : uint8
end
module Lib_Logic_BoolToAssignedstate
  use prelude.UInt8
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function bool_to_assignedstate (b : bool) : uint8
  axiom bool_to_assignedstate_spec : forall b : bool . (b -> UInt8.to_int (bool_to_assignedstate b) = 1) && (not b -> UInt8.to_int (bool_to_assignedstate b) = 0)
end
module Lib_Logic_FlipV_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function flip_v (v : uint8) : uint8
end
module Lib_Logic_FlipV
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  use mach.int.Int32
  function flip_v (v : uint8) : uint8 = 
    if UInt8.to_int v = 0 then (1 : uint8) else if UInt8.to_int v = 1 then (0 : uint8) else v
end
module Lib_Logic_Pos_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function pos () : uint8
end
module Lib_Logic_Pos
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function pos () : uint8 = 
    (1 : uint8)
end
module Lib_Logic_Neg_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function neg () : uint8
end
module Lib_Logic_Neg
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  function neg () : uint8 = 
    (0 : uint8)
end
module Lib_Logic_LemmaCompleteImpliesSatOrUnsat_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_SatInner_Interface as SatInner0
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Assignments_CompleteInner_Interface as CompleteInner0
  function lemma_complete_implies_sat_or_unsat (f : Type.lib_formula_formula) (a : Seq.seq uint8) : ()
end
module Lib_Logic_LemmaCompleteImpliesSatOrUnsat
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_SatInner_Interface as SatInner0
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Assignments_CompleteInner_Interface as CompleteInner0
  function lemma_complete_implies_sat_or_unsat (f : Type.lib_formula_formula) (a : Seq.seq uint8) : ()
  axiom lemma_complete_implies_sat_or_unsat_spec : forall f : Type.lib_formula_formula, a : Seq.seq uint8 . CompleteInner0.complete_inner a -> AssignmentsInvariant0.assignments_invariant a f -> Invariant0.invariant' f -> UnsatInner0.unsat_inner f a || SatInner0.sat_inner f a
end
module Lib_Logic_LemmaCompleteAndNotSatImpliesUnsat_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Assignments_CompleteInner_Interface as CompleteInner0
  clone Lib_Formula_Impl1_SatInner_Interface as SatInner0
  function lemma_complete_and_not_sat_implies_unsat (f : Type.lib_formula_formula) (a : Seq.seq uint8) : ()
end
module Lib_Logic_LemmaCompleteAndNotSatImpliesUnsat
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Assignments_CompleteInner_Interface as CompleteInner0
  clone Lib_Formula_Impl1_SatInner_Interface as SatInner0
  function lemma_complete_and_not_sat_implies_unsat (f : Type.lib_formula_formula) (a : Seq.seq uint8) : ()
  axiom lemma_complete_and_not_sat_implies_unsat_spec : forall f : Type.lib_formula_formula, a : Seq.seq uint8 . not (SatInner0.sat_inner f a) -> CompleteInner0.complete_inner a -> AssignmentsInvariant0.assignments_invariant a f -> Invariant0.invariant' f -> UnsatInner0.unsat_inner f a
end
module Lib_Logic_LemmaCompleteAndNotUnsatImpliesSat_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_SatInner_Interface as SatInner0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Assignments_CompleteInner_Interface as CompleteInner0
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  function lemma_complete_and_not_unsat_implies_sat (f : Type.lib_formula_formula) (a : Seq.seq uint8) : ()
end
module Lib_Logic_LemmaCompleteAndNotUnsatImpliesSat
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_SatInner_Interface as SatInner0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Assignments_CompleteInner_Interface as CompleteInner0
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  function lemma_complete_and_not_unsat_implies_sat (f : Type.lib_formula_formula) (a : Seq.seq uint8) : ()
  axiom lemma_complete_and_not_unsat_implies_sat_spec : forall f : Type.lib_formula_formula, a : Seq.seq uint8 . not (UnsatInner0.unsat_inner f a) -> CompleteInner0.complete_inner a -> AssignmentsInvariant0.assignments_invariant a f -> Invariant0.invariant' f -> SatInner0.sat_inner f a
end
module Lib_Logic_LemmaNotSatFormulaImpliesUnsatFormula_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  function lemma_not_sat_formula_implies_unsat_formula (f : Type.lib_formula_formula) (a : Seq.seq uint8) : ()
end
module Lib_Logic_LemmaNotSatFormulaImpliesUnsatFormula
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Assignments_AssignmentsInvariant_Interface as AssignmentsInvariant0
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner0
  function lemma_not_sat_formula_implies_unsat_formula (f : Type.lib_formula_formula) (a : Seq.seq uint8) : ()
  axiom lemma_not_sat_formula_implies_unsat_formula_spec : forall f : Type.lib_formula_formula, a : Seq.seq uint8 . UnsatInner0.unsat_inner f a -> AssignmentsInvariant0.assignments_invariant a f -> Invariant0.invariant' f -> not (EventuallySatCompleteInner0.eventually_sat_complete_inner f a)
end
module Lib_Logic_LemmaNotSatClauseImpliesUnsatFormula_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner1
  clone Lib_Clause_Impl2_UnsatInner_Interface as UnsatInner0
  clone Lib_Clause_Impl2_InFormula_Interface as InFormula0
  function lemma_not_sat_clause_implies_unsat_formula (f : Type.lib_formula_formula) (c : Type.lib_clause_clause) (a : Seq.seq uint8) : ()
    
end
module Lib_Logic_LemmaNotSatClauseImpliesUnsatFormula
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner1
  clone Lib_Clause_Impl2_UnsatInner_Interface as UnsatInner0
  clone Lib_Clause_Impl2_InFormula_Interface as InFormula0
  function lemma_not_sat_clause_implies_unsat_formula (f : Type.lib_formula_formula) (c : Type.lib_clause_clause) (a : Seq.seq uint8) : ()
    
  axiom lemma_not_sat_clause_implies_unsat_formula_spec : forall f : Type.lib_formula_formula, c : Type.lib_clause_clause, a : Seq.seq uint8 . InFormula0.in_formula c f -> UnsatInner0.unsat_inner c a -> UnsatInner1.unsat_inner f a
end
module Lib_Logic_LemmaUnitForces_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Logic_FlipV_Interface as FlipV0
  function lemma_unit_forces (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Lib_Logic_LemmaUnitForces
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Logic_FlipV_Interface as FlipV0
  function lemma_unit_forces (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
  axiom lemma_unit_forces_spec : forall c : Type.lib_clause_clause, f : Type.lib_formula_formula, a : Seq.seq uint8, ix : int, v : uint8 . not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v))) -> EventuallySatCompleteInner0.eventually_sat_complete_inner f a -> not (Unset0.unset v) -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length a -> Invariant0.invariant' f -> EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v)
end
module Lib_Logic_LemmaUnitWrongPolarityUnsatFormula_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner1
  clone Lib_Logic_FlipV_Interface as FlipV0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Clause_Impl2_UnitInner_Interface as UnitInner0
  clone Lib_Clause_Impl2_InFormula_Interface as InFormula0
  clone Lib_Clause_Impl2_Invariant_Interface as Invariant0
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Lit_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Clause_Impl1_Model_Interface as Model0
  function lemma_unit_wrong_polarity_unsat_formula (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Lib_Logic_LemmaUnitWrongPolarityUnsatFormula
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Formula_Impl1_UnsatInner_Interface as UnsatInner1
  clone Lib_Logic_FlipV_Interface as FlipV0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Clause_Impl2_UnitInner_Interface as UnitInner0
  clone Lib_Clause_Impl2_InFormula_Interface as InFormula0
  clone Lib_Clause_Impl2_Invariant_Interface as Invariant0
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Lit_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Clause_Impl1_Model_Interface as Model0
  function lemma_unit_wrong_polarity_unsat_formula (c : Type.lib_clause_clause) (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
  axiom lemma_unit_wrong_polarity_unsat_formula_spec : forall c : Type.lib_clause_clause, f : Type.lib_formula_formula, a : Seq.seq uint8, ix : int, v : uint8 . (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> UnsatInner0.unsat_inner (Seq.get (Model0.model c) j) a) -> (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v) -> Invariant0.invariant' c (Seq.length a) -> InFormula0.in_formula c f -> UnitInner0.unit_inner c a -> not (Unset0.unset v) -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length a -> Invariant1.invariant' f -> not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (FlipV0.flip_v v))) && UnsatInner1.unsat_inner f (Seq.set a ix (FlipV0.flip_v v))
end
module Lib_Logic_LemmaCorrectPolarityMakesClauseSat_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Clause_Impl2_SatInner_Interface as SatInner0
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Clause_Impl1_Model_Interface as Model0
  function lemma_correct_polarity_makes_clause_sat (c : Type.lib_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Lib_Logic_LemmaCorrectPolarityMakesClauseSat
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Clause_Impl2_SatInner_Interface as SatInner0
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Clause_Impl1_Model_Interface as Model0
  function lemma_correct_polarity_makes_clause_sat (c : Type.lib_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
  axiom lemma_correct_polarity_makes_clause_sat_spec : forall c : Type.lib_clause_clause, a : Seq.seq uint8, ix : int, v : uint8 . (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model0.model c) j)) = v) -> 0 <= ix && ix < Seq.length a -> SatInner0.sat_inner c (Seq.set a ix v)
end
module Lib_Logic_LemmaIncorrectPolarityMakesClauseUnsat_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Clause_Impl2_UnsatInner_Interface as UnsatInner1
  clone Lib_Logic_FlipV_Interface as FlipV0
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Clause_Impl2_UnitInner_Interface as UnitInner0
  clone Lib_Clause_Impl2_SatInner_Interface as SatInner1
  clone Lib_Lit_Impl1_SatInner_Interface as SatInner0
  clone Lib_Clause_Impl2_Invariant_Interface as Invariant0
  clone Lib_Lit_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Clause_Impl1_Model_Interface as Model0
  function lemma_incorrect_polarity_makes_clause_unsat (c : Type.lib_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
end
module Lib_Logic_LemmaIncorrectPolarityMakesClauseUnsat
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Clause_Impl2_UnsatInner_Interface as UnsatInner1
  clone Lib_Logic_FlipV_Interface as FlipV0
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Clause_Impl2_UnitInner_Interface as UnitInner0
  clone Lib_Clause_Impl2_SatInner_Interface as SatInner1
  clone Lib_Lit_Impl1_SatInner_Interface as SatInner0
  clone Lib_Clause_Impl2_Invariant_Interface as Invariant0
  clone Lib_Lit_Impl1_UnsatInner_Interface as UnsatInner0
  clone Lib_Clause_Impl1_Model_Interface as Model0
  function lemma_incorrect_polarity_makes_clause_unsat (c : Type.lib_clause_clause) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
    
  axiom lemma_incorrect_polarity_makes_clause_unsat_spec : forall c : Type.lib_clause_clause, a : Seq.seq uint8, ix : int, v : uint8 . (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) && not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix) -> UnsatInner0.unsat_inner (Seq.get (Model0.model c) j) a) -> Invariant0.invariant' c (Seq.length a) -> (exists j : (int) . 0 <= j && j < Seq.length (Model0.model c) && UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)) = ix && SatInner0.sat_inner (Seq.get (Model0.model c) j) a) -> not (SatInner1.sat_inner c a) -> UnitInner0.unit_inner c a -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> not (Unset0.unset v) -> (forall j : (int) . 0 <= j && j < Seq.length (Model0.model c) -> not (Unset0.unset (Seq.get (Seq.set a ix v) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model0.model c) j)))))) && not (Unset0.unset (Seq.get (Seq.set a ix (FlipV0.flip_v v)) ix)) && UnsatInner1.unsat_inner c (Seq.set a ix (FlipV0.flip_v v)) && not (SatInner1.sat_inner c (Seq.set a ix (FlipV0.flip_v v)))
end
module Lib_Logic_LemmaExtensionSatBaseSat_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  function lemma_extension_sat_base_sat (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
end
module Lib_Logic_LemmaExtensionSatBaseSat
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  function lemma_extension_sat_base_sat (f : Type.lib_formula_formula) (a : Seq.seq uint8) (ix : int) (v : uint8) : ()
  axiom lemma_extension_sat_base_sat_spec : forall f : Type.lib_formula_formula, a : Seq.seq uint8, ix : int, v : uint8 . EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix v) -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> EventuallySatCompleteInner0.eventually_sat_complete_inner f a
end
module Lib_Logic_LemmaExtensionsUnsatBaseUnsat_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Logic_Neg_Interface as Neg0
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Logic_Pos_Interface as Pos0
  function lemma_extensions_unsat_base_unsat (a : Seq.seq uint8) (ix : int) (f : Type.lib_formula_formula) : ()
end
module Lib_Logic_LemmaExtensionsUnsatBaseUnsat
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use prelude.UInt8
  use Type
  clone Lib_Logic_Unset_Interface as Unset0
  clone Lib_Logic_Neg_Interface as Neg0
  clone Lib_Formula_Impl1_EventuallySatCompleteInner_Interface as EventuallySatCompleteInner0
  clone Lib_Logic_Pos_Interface as Pos0
  function lemma_extensions_unsat_base_unsat (a : Seq.seq uint8) (ix : int) (f : Type.lib_formula_formula) : ()
  axiom lemma_extensions_unsat_base_unsat_spec : forall a : Seq.seq uint8, ix : int, f : Type.lib_formula_formula . not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Pos0.pos ()))) -> not (EventuallySatCompleteInner0.eventually_sat_complete_inner f (Seq.set a ix (Neg0.neg ()))) -> 0 <= ix && ix < Seq.length a && Unset0.unset (Seq.get a ix) -> not (EventuallySatCompleteInner0.eventually_sat_complete_inner f a)
end
module Lib_SolverDpll_IsClauseSat_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone Lib_Clause_Impl2_Sat_Interface as Sat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  val is_clause_sat [@cfg:stackify] (f : Type.lib_formula_formula) (idx : usize) (a : Type.lib_assignments_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Sat0.sat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
end
module Lib_SolverDpll_IsClauseSat
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Lib_Lit_Impl1_Invariant as Invariant3
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Lit_Impl1_SatInner as SatInner1
  clone Lib_Clause_Impl2_SatInner as SatInner0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Clause_Impl2_Sat as Sat0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  val is_clause_sat [@cfg:stackify] (f : Type.lib_formula_formula) (idx : usize) (a : Type.lib_assignments_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Sat0.sat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
end
module Lib_SolverDpll_IsClauseUnsat_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone Lib_Clause_Impl2_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant1
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  val is_clause_unsat [@cfg:stackify] (f : Type.lib_formula_formula) (idx : usize) (a : Type.lib_assignments_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Unsat0.unsat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
end
module Lib_SolverDpll_IsClauseUnsat
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Lib_Lit_Impl1_Invariant as Invariant3
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner1
  clone Lib_Clause_Impl2_UnsatInner as UnsatInner0 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model2.model
  clone Lib_Clause_Impl2_Unsat as Unsat0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Assignments_Impl1_Invariant as Invariant0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant1 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  val is_clause_unsat [@cfg:stackify] (f : Type.lib_formula_formula) (idx : usize) (a : Type.lib_assignments_assignments) : bool
    requires {UInt64.to_int idx < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Invariant0.invariant' a f}
    requires {Invariant1.invariant' f}
    ensures { result = Unsat0.unsat (Seq.get (Model0.model (Type.lib_formula_formula_Formula_clauses f)) (UInt64.to_int idx)) a }
    
end
module Lib_SolverDpll_LearnUnit_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant2
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  val learn_unit [@cfg:stackify] (a : borrowed (Type.lib_assignments_assignments)) (trail : borrowed (Type.lib_trail_trail)) (lit : Type.lib_lit_lit) (f : Type.lib_formula_formula) : ()
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * trail))) > 0}
    requires {Invariant0.invariant' ( * trail) f}
    requires {Invariant1.invariant' ( * a) f}
    requires {Invariant2.invariant' f}
    ensures { Invariant1.invariant' ( ^ a) f }
    ensures { Invariant0.invariant' ( ^ trail) f }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ trail))) = 1 }
    
end
module Lib_SolverDpll_LearnUnit
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  use mach.int.UInt64
  clone Lib_Lit_Impl1_Invariant as Invariant4
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model1 with function Model0.model = Model5.model
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model6 with function Model0.model = Model4.model
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model6.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model6.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant3 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model3.model,
  function Model1.model = Model2.model
  clone Lib_Formula_Impl1_Invariant as Invariant2 with function Model0.model = Model2.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model0.model,
  function Model1.model = Model4.model
  clone Lib_Trail_Impl1_Invariant as Invariant0 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  val learn_unit [@cfg:stackify] (a : borrowed (Type.lib_assignments_assignments)) (trail : borrowed (Type.lib_trail_trail)) (lit : Type.lib_lit_lit) (f : Type.lib_formula_formula) : ()
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * trail))) > 0}
    requires {Invariant0.invariant' ( * trail) f}
    requires {Invariant1.invariant' ( * a) f}
    requires {Invariant2.invariant' f}
    ensures { Invariant1.invariant' ( ^ a) f }
    ensures { Invariant0.invariant' ( ^ trail) f }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ trail))) = 1 }
    
end
module Lib_SolverDpll_UnitPropagate_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  clone Lib_Assignments_Impl1_Compatible_Interface as Compatible0
  clone Lib_Formula_Impl1_EventuallySatComplete_Interface as EventuallySatComplete0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_EventuallySat_Interface as EventuallySat0
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant2
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  val unit_propagate [@cfg:stackify] (f : borrowed (Type.lib_formula_formula)) (a : borrowed (Type.lib_assignments_assignments)) (trail : borrowed (Type.lib_trail_trail)) (watches : borrowed (Type.lib_watches_watches)) : Type.core_result_result () usize
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * trail))) > 0}
    requires {Invariant0.invariant' ( * trail) ( * f)}
    requires {Invariant1.invariant' ( * a) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { EquisatCompatible0.equisat_compatible ( * f) ( ^ f) }
    ensures { Invariant1.invariant' ( ^ a) ( ^ f) }
    ensures { Invariant0.invariant' ( ^ trail) ( ^ f) }
    ensures { EventuallySat0.eventually_sat ( * f) ( * a) = EventuallySat0.eventually_sat ( ^ f) ( * a) }
    ensures {  ^ f =  * f }
    ensures { Invariant2.invariant' ( ^ f) }
    ensures { UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { match (result) with
      | Type.Core_Result_Result_Ok () -> not (Unsat0.unsat ( ^ f) ( ^ a))
      | Type.Core_Result_Result_Err n -> UInt64.to_int n < Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses ( * f))) && Unsat0.unsat ( ^ f) ( ^ a)
      end }
    ensures { EventuallySatComplete0.eventually_sat_complete ( * f) ( * a) = EventuallySatComplete0.eventually_sat_complete ( ^ f) ( ^ a) }
    ensures { Compatible0.compatible ( * a) ( ^ a) }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ trail))) = Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * trail))) }
    
end
module Lib_SolverDpll_UnitPropagate
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Lit_Impl1_SatInner as SatInner2
  clone Lib_Lit_Impl1_Invariant as Invariant4
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner2
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model2 with function Model0.model = Model5.model
  clone Lib_Assignments_Impl1_Compatible as Compatible0 with function Model0.model = Model2.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model6 with function Model0.model = Model4.model
  clone Lib_Clause_Impl2_SatInner as SatInner1 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Clause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model6.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model6.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant3 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model1.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone Lib_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model2.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Lib_Formula_Impl1_EventuallySatInner as EventuallySatInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_EventuallySat as EventuallySat0 with function Model0.model = Model2.model,
  predicate EventuallySatInner0.eventually_sat_inner = EventuallySatInner0.eventually_sat_inner
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model1.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Formula_Impl1_Compatible as Compatible1 with function Model0.model = Model1.model,
  function Model1.model = Model6.model
  clone Lib_Formula_Impl1_EquisatCompatible as EquisatCompatible0 with predicate Compatible0.compatible = Compatible1.compatible,
  predicate Equisat0.equisat = Equisat0.equisat
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model3.model,
  function Model1.model = Model1.model
  clone Lib_Formula_Impl1_Invariant as Invariant2 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model0.model,
  function Model1.model = Model4.model
  clone Lib_Trail_Impl1_Invariant as Invariant0 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  val unit_propagate [@cfg:stackify] (f : borrowed (Type.lib_formula_formula)) (a : borrowed (Type.lib_assignments_assignments)) (trail : borrowed (Type.lib_trail_trail)) (watches : borrowed (Type.lib_watches_watches)) : Type.core_result_result () usize
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * trail))) > 0}
    requires {Invariant0.invariant' ( * trail) ( * f)}
    requires {Invariant1.invariant' ( * a) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { EquisatCompatible0.equisat_compatible ( * f) ( ^ f) }
    ensures { Invariant1.invariant' ( ^ a) ( ^ f) }
    ensures { Invariant0.invariant' ( ^ trail) ( ^ f) }
    ensures { EventuallySat0.eventually_sat ( * f) ( * a) = EventuallySat0.eventually_sat ( ^ f) ( * a) }
    ensures {  ^ f =  * f }
    ensures { Invariant2.invariant' ( ^ f) }
    ensures { UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { match (result) with
      | Type.Core_Result_Result_Ok () -> not (Unsat0.unsat ( ^ f) ( ^ a))
      | Type.Core_Result_Result_Err n -> UInt64.to_int n < Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses ( * f))) && Unsat0.unsat ( ^ f) ( ^ a)
      end }
    ensures { EventuallySatComplete0.eventually_sat_complete ( * f) ( * a) = EventuallySatComplete0.eventually_sat_complete ( ^ f) ( ^ a) }
    ensures { Compatible0.compatible ( * a) ( ^ a) }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ trail))) = Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * trail))) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index = Index0.index
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module Lib_ConflictAnalysis_ChooseLiteral_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = (usize, Type.lib_trail_reason)
  val choose_literal [@cfg:stackify] (c : Type.lib_clause_clause) (trail : Type.lib_trail_trail) (i : borrowed usize) (j : borrowed usize) : Type.lib_lit_lit
    ensures { UInt64.to_int (Type.lib_lit_lit_Lit_idx result) < Seq.length (Model0.model (Type.lib_trail_trail_Trail_vardata trail)) }
    
end
module Lib_ConflictAnalysis_ChooseLiteral
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = (usize, Type.lib_trail_reason)
  val choose_literal [@cfg:stackify] (c : Type.lib_clause_clause) (trail : Type.lib_trail_trail) (i : borrowed usize) (j : borrowed usize) : Type.lib_lit_lit
    ensures { UInt64.to_int (Type.lib_lit_lit_Lit_idx result) < Seq.length (Model0.model (Type.lib_trail_trail_Trail_vardata trail)) }
    
end
module Lib_ConflictAnalysis_Resolve_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone Lib_Clause_Impl2_Invariant_Interface as Invariant0
  val resolve [@cfg:stackify] (_f : Type.lib_formula_formula) (c : Type.lib_clause_clause) (o : Type.lib_clause_clause) (idx : usize) : Type.lib_clause_clause
    ensures { Invariant0.invariant' result (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars _f)) }
    
end
module Lib_ConflictAnalysis_Resolve
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone Lib_Lit_Impl1_Invariant as Invariant1
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model0 with function Model0.model = Model1.model
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model0.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model0.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_Invariant as Invariant0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  val resolve [@cfg:stackify] (_f : Type.lib_formula_formula) (c : Type.lib_clause_clause) (o : Type.lib_clause_clause) (idx : usize) : Type.lib_clause_clause
    ensures { Invariant0.invariant' result (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars _f)) }
    
end
module Lib_ConflictAnalysis_AnalyzeConflictNew_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  clone Lib_Clause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone Lib_Clause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model3 with type t = Type.lib_lit_lit
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant2
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  val analyze_conflict_new [@cfg:stackify] (f : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) (trail : Type.lib_trail_trail) (cref : usize) : Type.lib_conflictanalysis_conflict
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail trail)) > 0}
    requires {Invariant0.invariant' trail f}
    requires {Invariant1.invariant' a f}
    requires {Invariant2.invariant' f}
    ensures { match (result) with
      | Type.Lib_ConflictAnalysis_Conflict_Unit lit -> true
      | Type.Lib_ConflictAnalysis_Conflict_Learned level lit clause -> UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) < Seq.length (Model2.model a) && Seq.length (Model3.model clause) > 1 && VarsInRangeInner0.vars_in_range_inner (Model3.model clause) (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f)) && NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model3.model clause) && true
      | _ -> true
      end }
    
end
module Lib_ConflictAnalysis_AnalyzeConflictNew
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model4 with function Model0.model = Model7.model
  clone Lib_Assignments_Impl1_Invariant as Invariant2 with function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model6.model
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Lit_Impl1_Invariant as Invariant4
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model6.model,
  function Model1.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model5 with function Model0.model = Model0.model
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model5.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model5.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant0 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Formula_Impl1_Invariant as Invariant3 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant0.invariant'
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model2.model,
  function Model1.model = Model0.model
  clone Lib_Trail_Impl1_Invariant as Invariant1 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve15 with type self = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve14 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve13 with type self = Type.lib_clause_clause
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve11 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve10 with type self = Type.lib_trail_reason
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve9 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = (usize, Type.lib_trail_reason)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy4 with type t = (usize, Type.lib_trail_reason)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = usize
  clone Lib_Clause_Impl0_Clone_Interface as Clone0
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy3 with type t = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.lib_trail_trail
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Model_Impl0_Model as Model11 with type t = Type.creusotcontracts_std1_vec_vec (usize, Type.lib_trail_reason),
  type ModelTy0.modelTy = ModelTy4.modelTy, function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index2 with type t = (usize, Type.lib_trail_reason),
  function Model0.model = Model11.model
  clone Lib_ConflictAnalysis_ChooseLiteral_Interface as ChooseLiteral0 with function Model0.model = Model6.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  function Model0.model = Model8.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  function Model0.model = Model8.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model10 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause),
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = Type.lib_clause_clause,
  function Model0.model = Model10.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model9 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index3 with type t = Type.lib_lit_lit,
  function Model0.model = Model9.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len1 with type t = Type.lib_lit_lit,
  function Model0.model = Model9.model
  clone Lib_ConflictAnalysis_Resolve_Interface as Resolve12 with predicate Invariant0.invariant' = Invariant0.invariant'
  let rec cfg analyze_conflict_new [@cfg:stackify] (f : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) (trail : Type.lib_trail_trail) (cref : usize) : Type.lib_conflictanalysis_conflict
    requires {UInt64.to_int cref < Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Seq.length (Model2.model (Type.lib_trail_trail_Trail_trail trail)) > 0}
    requires {Invariant1.invariant' trail f}
    requires {Invariant2.invariant' a f}
    requires {Invariant3.invariant' f}
    ensures { match (result) with
      | Type.Lib_ConflictAnalysis_Conflict_Unit lit -> true
      | Type.Lib_ConflictAnalysis_Conflict_Learned level lit clause -> UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) < Seq.length (Model3.model a) && Seq.length (Model0.model clause) > 1 && VarsInRangeInner0.vars_in_range_inner (Model0.model clause) (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f)) && NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model0.model clause) && true
      | _ -> true
      end }
    
   = 
  var _0 : Type.lib_conflictanalysis_conflict;
  var f_1 : Type.lib_formula_formula;
  var a_2 : Type.lib_assignments_assignments;
  var trail_3 : Type.lib_trail_trail;
  var cref_4 : usize;
  var decisionlevel_5 : usize;
  var _6 : usize;
  var _7 : Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit));
  var _8 : ();
  var _9 : bool;
  var _10 : usize;
  var _11 : ();
  var i_12 : usize;
  var _13 : usize;
  var _14 : Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit));
  var j_15 : usize;
  var _16 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _17 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _18 : Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit));
  var _19 : usize;
  var clause_20 : Type.lib_clause_clause;
  var _21 : Type.lib_clause_clause;
  var _22 : Type.lib_clause_clause;
  var _23 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _24 : usize;
  var _25 : ();
  var _26 : ();
  var lit_27 : Type.lib_lit_lit;
  var _28 : Type.lib_clause_clause;
  var _29 : Type.lib_clause_clause;
  var _30 : Type.lib_trail_trail;
  var _31 : borrowed usize;
  var _32 : borrowed usize;
  var _33 : borrowed usize;
  var _34 : borrowed usize;
  var ante_35 : Type.lib_clause_clause;
  var _36 : Type.lib_trail_reason;
  var _37 : (usize, Type.lib_trail_reason);
  var _38 : Type.creusotcontracts_std1_vec_vec (usize, Type.lib_trail_reason);
  var _39 : usize;
  var _40 : isize;
  var c_41 : usize;
  var _42 : Type.lib_clause_clause;
  var _43 : Type.lib_clause_clause;
  var _44 : Type.creusotcontracts_std1_vec_vec (Type.lib_clause_clause);
  var _45 : usize;
  var o_46 : Type.lib_trail_reason;
  var _47 : ();
  var _48 : Type.lib_clause_clause;
  var _49 : Type.lib_formula_formula;
  var _50 : Type.lib_clause_clause;
  var _51 : Type.lib_clause_clause;
  var _52 : Type.lib_clause_clause;
  var _53 : Type.lib_clause_clause;
  var _54 : usize;
  var k_55 : usize;
  var cnt_56 : usize;
  var _57 : ();
  var _58 : bool;
  var _59 : usize;
  var _60 : usize;
  var _61 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _62 : ();
  var _63 : bool;
  var _64 : usize;
  var _65 : (usize, Type.lib_trail_reason);
  var _66 : Type.creusotcontracts_std1_vec_vec (usize, Type.lib_trail_reason);
  var _67 : usize;
  var _68 : Type.lib_lit_lit;
  var _69 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _70 : usize;
  var _71 : usize;
  var _72 : ();
  var _73 : ();
  var _74 : ();
  var _75 : bool;
  var _76 : usize;
  var _77 : ();
  var _78 : bool;
  var _79 : usize;
  var _80 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _81 : Type.lib_lit_lit;
  var _82 : Type.lib_lit_lit;
  var _83 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _84 : usize;
  var _85 : Type.lib_lit_lit;
  var _86 : Type.lib_lit_lit;
  var _87 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _88 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  {
    f_1 <- f;
    a_2 <- a;
    trail_3 <- trail;
    cref_4 <- cref;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve a_2 };
    _7 <- Type.lib_trail_trail_Trail_trail trail_3;
    _6 <- Len0.len _7;
    goto BB1
  }
  BB1 {
    decisionlevel_5 <- _6 - (1 : usize);
    assume { Resolve1.resolve _10 };
    _10 <- decisionlevel_5;
    _9 <- _10 = (0 : usize);
    switch (_9)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve2.resolve f_1 };
    assume { Resolve3.resolve trail_3 };
    assume { Resolve1.resolve cref_4 };
    assume { Resolve1.resolve decisionlevel_5 };
    _0 <- Type.Lib_ConflictAnalysis_Conflict_Ground;
    goto BB42
  }
  BB3 {
    _8 <- ();
    assume { Resolve4.resolve _8 };
    _14 <- Type.lib_trail_trail_Trail_trail trail_3;
    _13 <- Len0.len _14;
    goto BB4
  }
  BB4 {
    i_12 <- _13 - (1 : usize);
    _18 <- Type.lib_trail_trail_Trail_trail trail_3;
    assume { Resolve1.resolve _19 };
    _19 <- i_12;
    _17 <- Index0.index _18 _19;
    goto BB5
  }
  BB5 {
    _16 <- _17;
    assume { Resolve5.resolve _17 };
    j_15 <- Len1.len _16;
    goto BB6
  }
  BB6 {
    _23 <- Type.lib_formula_formula_Formula_clauses f_1;
    assume { Resolve1.resolve _24 };
    _24 <- cref_4;
    _22 <- Index1.index _23 _24;
    goto BB7
  }
  BB7 {
    _21 <- _22;
    assume { Resolve6.resolve _22 };
    clause_20 <- Clone0.clone' _21;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    invariant clause_ok { Invariant0.invariant' clause_20 (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f_1)) };
    _29 <- clause_20;
    _28 <- _29;
    assume { Resolve6.resolve _29 };
    _30 <- trail_3;
    _32 <- borrow_mut i_12;
    i_12 <-  ^ _32;
    _31 <- borrow_mut ( * _32);
    _32 <- { _32 with current = ( ^ _31) };
    _34 <- borrow_mut j_15;
    j_15 <-  ^ _34;
    _33 <- borrow_mut ( * _34);
    _34 <- { _34 with current = ( ^ _33) };
    lit_27 <- ChooseLiteral0.choose_literal _28 _30 _31 _33;
    goto BB11
  }
  BB11 {
    assume { Resolve7.resolve _32 };
    assume { Resolve7.resolve _34 };
    _38 <- Type.lib_trail_trail_Trail_vardata trail_3;
    assume { Resolve1.resolve _39 };
    _39 <- Type.lib_lit_lit_Lit_idx lit_27;
    _37 <- Index2.index _38 _39;
    goto BB12
  }
  BB12 {
    _36 <- (let (_, a) = _37 in a);
    assume { Resolve8.resolve _37 };
    switch (_36)
      | Type.Lib_Trail_Reason_Long _ -> goto BB14
      | _ -> goto BB13
      end
  }
  BB13 {
    assume { Resolve2.resolve f_1 };
    assume { Resolve3.resolve trail_3 };
    assume { Resolve1.resolve cref_4 };
    assume { Resolve1.resolve decisionlevel_5 };
    assume { Resolve1.resolve i_12 };
    assume { Resolve1.resolve j_15 };
    assume { Resolve9.resolve lit_27 };
    assume { Resolve10.resolve o_46 };
    o_46 <- _36;
    assume { Resolve10.resolve _36 };
    assume { Resolve10.resolve o_46 };
    absurd
  }
  BB14 {
    c_41 <- Type.lib_trail_reason_Long_0 _36;
    assume { Resolve10.resolve _36 };
    _44 <- Type.lib_formula_formula_Formula_clauses f_1;
    assume { Resolve1.resolve _45 };
    _45 <- c_41;
    assume { Resolve11.resolve c_41 };
    _43 <- Index1.index _44 _45;
    goto BB15
  }
  BB15 {
    _42 <- _43;
    assume { Resolve6.resolve _43 };
    ante_35 <- Clone0.clone' _42;
    goto BB16
  }
  BB16 {
    _49 <- f_1;
    _51 <- clause_20;
    _50 <- _51;
    assume { Resolve6.resolve _51 };
    _53 <- ante_35;
    _52 <- _53;
    assume { Resolve6.resolve _53 };
    assume { Resolve1.resolve _54 };
    _54 <- Type.lib_lit_lit_Lit_idx lit_27;
    assume { Resolve9.resolve lit_27 };
    _48 <- Resolve12.resolve _49 _50 _52 _54;
    goto BB17
  }
  BB17 {
    assume { Resolve13.resolve clause_20 };
    clause_20 <- _48;
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    k_55 <- (0 : usize);
    cnt_56 <- (0 : usize);
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    invariant k_bound { UInt64.to_int k_55 <= Seq.length (Model0.model (Type.lib_clause_clause_Clause_rest clause_20)) };
    invariant cnt_bound { UInt64.to_int cnt_56 <= UInt64.to_int k_55 };
    assume { Resolve1.resolve _59 };
    _59 <- k_55;
    _61 <- Type.lib_clause_clause_Clause_rest clause_20;
    _60 <- Len1.len _61;
    goto BB22
  }
  BB22 {
    _58 <- _59 < _60;
    switch (_58)
      | False -> goto BB29
      | _ -> goto BB23
      end
  }
  BB23 {
    _66 <- Type.lib_trail_trail_Trail_vardata trail_3;
    _69 <- Type.lib_clause_clause_Clause_rest clause_20;
    assume { Resolve1.resolve _70 };
    _70 <- k_55;
    _68 <- Index3.index _69 _70;
    goto BB24
  }
  BB24 {
    assume { Resolve1.resolve _67 };
    _67 <- Type.lib_lit_lit_Lit_idx _68;
    assume { Resolve14.resolve _68 };
    _65 <- Index2.index _66 _67;
    goto BB25
  }
  BB25 {
    assume { Resolve1.resolve _64 };
    _64 <- (let (a, _) = _65 in a);
    assume { Resolve8.resolve _65 };
    assume { Resolve1.resolve _71 };
    _71 <- decisionlevel_5;
    _63 <- _64 = _71;
    switch (_63)
      | False -> goto BB27
      | _ -> goto BB26
      end
  }
  BB26 {
    cnt_56 <- cnt_56 + (1 : usize);
    _62 <- ();
    assume { Resolve4.resolve _62 };
    goto BB28
  }
  BB27 {
    _62 <- ();
    assume { Resolve4.resolve _62 };
    goto BB28
  }
  BB28 {
    k_55 <- k_55 + (1 : usize);
    _26 <- ();
    assume { Resolve4.resolve _26 };
    goto BB21
  }
  BB29 {
    assume { Resolve1.resolve k_55 };
    _57 <- ();
    assume { Resolve4.resolve _57 };
    assume { Resolve1.resolve _76 };
    _76 <- cnt_56;
    assume { Resolve1.resolve cnt_56 };
    _75 <- _76 = (1 : usize);
    switch (_75)
      | False -> goto BB31
      | _ -> goto BB30
      end
  }
  BB30 {
    assume { Resolve2.resolve f_1 };
    assume { Resolve3.resolve trail_3 };
    assume { Resolve1.resolve decisionlevel_5 };
    assume { Resolve1.resolve i_12 };
    assume { Resolve1.resolve j_15 };
    _25 <- ();
    assume { Resolve4.resolve _25 };
    goto BB33
  }
  BB31 {
    _26 <- ();
    assume { Resolve4.resolve _26 };
    goto BB32
  }
  BB32 {
    assume { Resolve13.resolve ante_35 };
    goto BB10
  }
  BB33 {
    assume { Resolve13.resolve ante_35 };
    _80 <- Type.lib_clause_clause_Clause_rest clause_20;
    _79 <- Len1.len _80;
    goto BB34
  }
  BB34 {
    _78 <- _79 = (1 : usize);
    switch (_78)
      | False -> goto BB37
      | _ -> goto BB35
      end
  }
  BB35 {
    assume { Resolve1.resolve cref_4 };
    _83 <- Type.lib_clause_clause_Clause_rest clause_20;
    _82 <- Index3.index _83 (0 : usize);
    goto BB36
  }
  BB36 {
    assume { Resolve9.resolve _81 };
    _81 <- _82;
    assume { Resolve14.resolve _82 };
    _0 <- Type.Lib_ConflictAnalysis_Conflict_Unit _81;
    goto BB40
  }
  BB37 {
    assume { Resolve1.resolve _84 };
    _84 <- cref_4;
    assume { Resolve1.resolve cref_4 };
    _87 <- Type.lib_clause_clause_Clause_rest clause_20;
    _86 <- Index3.index _87 (0 : usize);
    goto BB38
  }
  BB38 {
    assume { Resolve9.resolve _85 };
    _85 <- _86;
    assume { Resolve14.resolve _86 };
    assume { Resolve15.resolve _88 };
    _88 <- Type.lib_clause_clause_Clause_rest clause_20;
    _0 <- Type.Lib_ConflictAnalysis_Conflict_Learned _84 _85 _88;
    goto BB39
  }
  BB39 {
    goto BB40
  }
  BB40 {
    goto BB41
  }
  BB41 {
    assume { Resolve13.resolve clause_20 };
    goto BB42
  }
  BB42 {
    return _0
  }
  
end
module Lib_SolverDpll_HandleConflict_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant2
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  val handle_conflict [@cfg:stackify] (f : borrowed (Type.lib_formula_formula)) (a : borrowed (Type.lib_assignments_assignments)) (t : borrowed (Type.lib_trail_trail)) (cref : usize) (w : borrowed (Type.lib_watches_watches)) : bool
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses ( * f)))}
    requires {Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant0.invariant' ( * t) ( * f)}
    requires {Invariant1.invariant' ( * a) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { EquisatCompatible0.equisat_compatible ( * f) ( ^ f) }
    ensures { Invariant1.invariant' ( ^ a) ( ^ f) }
    ensures { Invariant0.invariant' ( ^ t) ( ^ f) }
    ensures { Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( ^ t))) > 0 }
    ensures { Invariant2.invariant' ( ^ f) }
    ensures { UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { if result then true else Unsat0.unsat ( ^ f) ( ^ a) }
    
end
module Lib_SolverDpll_HandleConflict
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Lib_Lit_Impl1_SatInner as SatInner2
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Lit_Impl1_Invariant as Invariant4
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner2
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model2 with function Model0.model = Model5.model
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model6 with function Model0.model = Model4.model
  clone Lib_Clause_Impl2_SatInner as SatInner1 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Clause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model6.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model6.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant3 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model1.model,
  function Model1.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model0.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Formula_Impl1_Compatible as Compatible0 with function Model0.model = Model0.model,
  function Model1.model = Model6.model
  clone Lib_Formula_Impl1_EquisatCompatible as EquisatCompatible0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Equisat0.equisat = Equisat0.equisat
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model3.model,
  function Model1.model = Model0.model
  clone Lib_Trail_Impl1_Invariant as Invariant0 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone Lib_Formula_Impl1_Invariant as Invariant2 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve9 with type self = ()
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.lib_conflictanalysis_conflict
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.lib_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.lib_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.lib_formula_formula
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model8 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model4.model
  clone Lib_Assignments_Impl2_CancelUntil_Interface as CancelUntil0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Invariant1.invariant' = Invariant0.invariant', function Model0.model = Model1.model,
  function Model1.model = Model3.model
  clone Lib_SolverDpll_LearnUnit_Interface as LearnUnit0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Invariant2.invariant' = Invariant2.invariant'
  clone Lib_Formula_Impl2_AddClause_Interface as AddClause0 with function Model0.model = Model8.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant2.invariant',
  function Model1.model = Model0.model,
  predicate EquisatCompatible0.equisat_compatible = EquisatCompatible0.equisat_compatible
  clone Lib_ConflictAnalysis_AnalyzeConflictNew_Interface as AnalyzeConflictNew0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Invariant2.invariant' = Invariant2.invariant',
  function Model2.model = Model7.model, function Model3.model = Model4.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  let rec cfg handle_conflict [@cfg:stackify] (f : borrowed (Type.lib_formula_formula)) (a : borrowed (Type.lib_assignments_assignments)) (t : borrowed (Type.lib_trail_trail)) (cref : usize) (w : borrowed (Type.lib_watches_watches)) : bool
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses ( * f)))}
    requires {Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant0.invariant' ( * t) ( * f)}
    requires {Invariant1.invariant' ( * a) ( * f)}
    requires {Invariant2.invariant' ( * f)}
    ensures { EquisatCompatible0.equisat_compatible ( * f) ( ^ f) }
    ensures { Invariant1.invariant' ( ^ a) ( ^ f) }
    ensures { Invariant0.invariant' ( ^ t) ( ^ f) }
    ensures { Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( ^ t))) > 0 }
    ensures { Invariant2.invariant' ( ^ f) }
    ensures { UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { if result then true else Unsat0.unsat ( ^ f) ( ^ a) }
    
   = 
  var _0 : bool;
  var f_1 : borrowed (Type.lib_formula_formula);
  var a_2 : borrowed (Type.lib_assignments_assignments);
  var t_3 : borrowed (Type.lib_trail_trail);
  var cref_4 : usize;
  var w_5 : borrowed (Type.lib_watches_watches);
  var res_6 : Type.lib_conflictanalysis_conflict;
  var _7 : Type.lib_formula_formula;
  var _8 : Type.lib_assignments_assignments;
  var _9 : Type.lib_trail_trail;
  var _10 : usize;
  var _11 : ();
  var _12 : isize;
  var _13 : ();
  var lit_14 : Type.lib_lit_lit;
  var _15 : ();
  var _16 : borrowed (Type.lib_assignments_assignments);
  var _17 : borrowed (Type.lib_trail_trail);
  var _18 : Type.lib_lit_lit;
  var _19 : Type.lib_formula_formula;
  var level_20 : usize;
  var lit_21 : Type.lib_lit_lit;
  var clause_22 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var cref_23 : usize;
  var _24 : borrowed (Type.lib_formula_formula);
  var _25 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _26 : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit);
  var _27 : borrowed (Type.lib_watches_watches);
  var _28 : Type.lib_trail_trail;
  var _29 : ();
  var _30 : borrowed (Type.lib_assignments_assignments);
  var _31 : borrowed (Type.lib_trail_trail);
  var _32 : Type.lib_formula_formula;
  {
    f_1 <- f;
    a_2 <- a;
    t_3 <- t;
    cref_4 <- cref;
    w_5 <- w;
    goto BB0
  }
  BB0 {
    _7 <-  * f_1;
    _8 <-  * a_2;
    _9 <-  * t_3;
    assume { Resolve0.resolve _10 };
    _10 <- cref_4;
    assume { Resolve0.resolve cref_4 };
    res_6 <- AnalyzeConflictNew0.analyze_conflict_new _7 _8 _9 _10;
    goto BB1
  }
  BB1 {
    switch (res_6)
      | Type.Lib_ConflictAnalysis_Conflict_Ground -> goto BB4
      | Type.Lib_ConflictAnalysis_Conflict_Unit _ -> goto BB5
      | Type.Lib_ConflictAnalysis_Conflict_Learned _ _ _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve level_20 };
    level_20 <- Type.lib_conflictanalysis_conflict_Learned_0 res_6;
    assume { Resolve0.resolve level_20 };
    assume { Resolve6.resolve lit_21 };
    lit_21 <- Type.lib_conflictanalysis_conflict_Learned_1 res_6;
    assume { Resolve6.resolve lit_21 };
    assume { Resolve7.resolve clause_22 };
    clause_22 <- Type.lib_conflictanalysis_conflict_Learned_2 res_6;
    _24 <- borrow_mut ( * f_1);
    f_1 <- { f_1 with current = ( ^ _24) };
    _26 <- clause_22;
    _25 <- _26;
    assume { Resolve8.resolve _26 };
    _27 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _27) };
    _28 <-  * t_3;
    cref_23 <- AddClause0.add_clause _24 _25 _27 _28;
    goto BB7
  }
  BB3 {
    assume { Resolve1.resolve f_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve3.resolve t_3 };
    assume { Resolve4.resolve w_5 };
    assume { Resolve5.resolve res_6 };
    absurd
  }
  BB4 {
    assume { Resolve1.resolve f_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve3.resolve t_3 };
    assume { Resolve4.resolve w_5 };
    _0 <- false;
    goto BB12
  }
  BB5 {
    assume { Resolve4.resolve w_5 };
    assume { Resolve6.resolve lit_14 };
    lit_14 <- Type.lib_conflictanalysis_conflict_Unit_0 res_6;
    _16 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _16) };
    _17 <- borrow_mut ( * t_3);
    t_3 <- { t_3 with current = ( ^ _17) };
    assume { Resolve6.resolve _18 };
    _18 <- lit_14;
    assume { Resolve6.resolve lit_14 };
    _19 <-  * f_1;
    assume { Resolve1.resolve f_1 };
    _15 <- LearnUnit0.learn_unit _16 _17 _18 _19;
    goto BB6
  }
  BB6 {
    assume { Resolve2.resolve a_2 };
    assume { Resolve3.resolve t_3 };
    _11 <- ();
    assume { Resolve9.resolve _11 };
    goto BB10
  }
  BB7 {
    assume { Resolve4.resolve w_5 };
    assume { Resolve0.resolve cref_23 };
    _30 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _30) };
    _31 <- borrow_mut ( * t_3);
    t_3 <- { t_3 with current = ( ^ _31) };
    _32 <-  * f_1;
    assume { Resolve1.resolve f_1 };
    _29 <- CancelUntil0.cancel_until _30 _31 (1 : usize) _32;
    goto BB8
  }
  BB8 {
    assume { Resolve2.resolve a_2 };
    assume { Resolve3.resolve t_3 };
    _11 <- ();
    assume { Resolve9.resolve _11 };
    goto BB9
  }
  BB9 {
    assume { Resolve7.resolve clause_22 };
    goto BB10
  }
  BB10 {
    _0 <- true;
    goto BB11
  }
  BB11 {
    assume { Resolve5.resolve res_6 };
    goto BB13
  }
  BB12 {
    assume { Resolve5.resolve res_6 };
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module Lib_SolverDpll_UnitPropStep_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant3
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant2
  clone Lib_Decision_Impl0_Invariant_Interface as Invariant1
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  val unit_prop_step [@cfg:stackify] (f : borrowed (Type.lib_formula_formula)) (a : borrowed (Type.lib_assignments_assignments)) (d : Type.lib_decision_decisions) (t : borrowed (Type.lib_trail_trail)) (w : borrowed (Type.lib_watches_watches)) : Type.core_option_option bool
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant0.invariant' ( * t) ( * f)}
    requires {Invariant1.invariant' d (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant2.invariant' ( * a) ( * f)}
    requires {Invariant3.invariant' ( * f)}
    ensures { EquisatCompatible0.equisat_compatible ( * f) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ a) ( ^ f) }
    ensures { Invariant0.invariant' ( ^ t) ( ^ f) }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ t))) > 0 }
    ensures { Invariant3.invariant' ( ^ f) }
    ensures { UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { match (result) with
      | Type.Core_Option_Option_Some (True) -> not (Unsat0.unsat ( ^ f) ( ^ a))
      | Type.Core_Option_Option_Some (False) -> Unsat0.unsat ( ^ f) ( ^ a)
      | Type.Core_Option_Option_None -> true
      end }
    
end
module Lib_SolverDpll_UnitPropStep
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Lit_Impl1_SatInner as SatInner2
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Lit_Impl1_Invariant as Invariant5
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner2
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model2 with function Model0.model = Model6.model
  clone Lib_Assignments_Impl1_Invariant as Invariant2 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model7 with function Model0.model = Model5.model
  clone Lib_Clause_Impl2_SatInner as SatInner1 with function Model0.model = Model7.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Clause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model7.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model7.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model7.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant4 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model3.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model3.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Formula_Impl1_Compatible as Compatible0 with function Model0.model = Model3.model,
  function Model1.model = Model7.model
  clone Lib_Formula_Impl1_EquisatCompatible as EquisatCompatible0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Equisat0.equisat = Equisat0.equisat
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model4.model,
  function Model1.model = Model3.model
  clone Lib_Formula_Impl1_Invariant as Invariant3 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant4.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize
  clone Lib_Decision_Impl0_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model0.model,
  function Model1.model = Model5.model
  clone Lib_Trail_Impl1_Invariant as Invariant0 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.core_result_result () usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.lib_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.lib_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_decision_decisions
  clone Lib_Assignments_CompatibleInner as CompatibleInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Assignments_CompatibleCompleteInner as CompatibleCompleteInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner
  clone Lib_Assignments_Impl1_Compatible as Compatible1 with function Model0.model = Model2.model,
  predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteInner as EventuallySatCompleteInner0 with predicate CompatibleCompleteInner0.compatible_complete_inner = CompatibleCompleteInner0.compatible_complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_EventuallySatComplete as EventuallySatComplete0 with function Model0.model = Model2.model,
  predicate EventuallySatCompleteInner0.eventually_sat_complete_inner = EventuallySatCompleteInner0.eventually_sat_complete_inner
  clone Lib_Formula_Impl1_EventuallySatInner as EventuallySatInner0 with predicate CompatibleInner0.compatible_inner = CompatibleInner0.compatible_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_EventuallySat as EventuallySat0 with function Model0.model = Model2.model,
  predicate EventuallySatInner0.eventually_sat_inner = EventuallySatInner0.eventually_sat_inner
  clone Lib_SolverDpll_HandleConflict_Interface as HandleConflict0 with function Model0.model = Model3.model,
  function Model1.model = Model0.model, predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Invariant2.invariant' = Invariant3.invariant',
  predicate EquisatCompatible0.equisat_compatible = EquisatCompatible0.equisat_compatible,
  predicate Unsat0.unsat = Unsat0.unsat
  clone Lib_SolverDpll_UnitPropagate_Interface as UnitPropagate0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant2.invariant',
  predicate Invariant2.invariant' = Invariant3.invariant',
  predicate EquisatCompatible0.equisat_compatible = EquisatCompatible0.equisat_compatible,
  predicate EventuallySat0.eventually_sat = EventuallySat0.eventually_sat, predicate Unsat0.unsat = Unsat0.unsat,
  function Model1.model = Model3.model,
  predicate EventuallySatComplete0.eventually_sat_complete = EventuallySatComplete0.eventually_sat_complete,
  predicate Compatible0.compatible = Compatible1.compatible
  let rec cfg unit_prop_step [@cfg:stackify] (f : borrowed (Type.lib_formula_formula)) (a : borrowed (Type.lib_assignments_assignments)) (d : Type.lib_decision_decisions) (t : borrowed (Type.lib_trail_trail)) (w : borrowed (Type.lib_watches_watches)) : Type.core_option_option bool
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant0.invariant' ( * t) ( * f)}
    requires {Invariant1.invariant' d (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant2.invariant' ( * a) ( * f)}
    requires {Invariant3.invariant' ( * f)}
    ensures { EquisatCompatible0.equisat_compatible ( * f) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ a) ( ^ f) }
    ensures { Invariant0.invariant' ( ^ t) ( ^ f) }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ t))) > 0 }
    ensures { Invariant3.invariant' ( ^ f) }
    ensures { UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { match (result) with
      | Type.Core_Option_Option_Some (True) -> not (Unsat0.unsat ( ^ f) ( ^ a))
      | Type.Core_Option_Option_Some (False) -> Unsat0.unsat ( ^ f) ( ^ a)
      | Type.Core_Option_Option_None -> true
      end }
    
   = 
  var _0 : Type.core_option_option bool;
  var f_1 : borrowed (Type.lib_formula_formula);
  var a_2 : borrowed (Type.lib_assignments_assignments);
  var d_3 : Type.lib_decision_decisions;
  var t_4 : borrowed (Type.lib_trail_trail);
  var w_5 : borrowed (Type.lib_watches_watches);
  var _6 : Type.core_result_result () usize;
  var _7 : borrowed (Type.lib_formula_formula);
  var _8 : borrowed (Type.lib_assignments_assignments);
  var _9 : borrowed (Type.lib_trail_trail);
  var _10 : borrowed (Type.lib_watches_watches);
  var _11 : isize;
  var _12 : ();
  var cref_13 : usize;
  var _14 : ();
  var _15 : bool;
  var _16 : bool;
  var _17 : borrowed (Type.lib_formula_formula);
  var _18 : borrowed (Type.lib_assignments_assignments);
  var _19 : borrowed (Type.lib_trail_trail);
  var _20 : usize;
  var _21 : borrowed (Type.lib_watches_watches);
  var _22 : ();
  {
    f_1 <- f;
    a_2 <- a;
    d_3 <- d;
    t_4 <- t;
    w_5 <- w;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve d_3 };
    _7 <- borrow_mut ( * f_1);
    f_1 <- { f_1 with current = ( ^ _7) };
    _8 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _8) };
    _9 <- borrow_mut ( * t_4);
    t_4 <- { t_4 with current = ( ^ _9) };
    _10 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _10) };
    _6 <- UnitPropagate0.unit_propagate _7 _8 _9 _10;
    goto BB1
  }
  BB1 {
    switch (_6)
      | Type.Core_Result_Result_Ok _ -> goto BB4
      | Type.Core_Result_Result_Err _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve6.resolve cref_13 };
    cref_13 <- Type.core_result_result_Err_0 _6;
    assume { Resolve5.resolve _6 };
    _17 <- borrow_mut ( * f_1);
    f_1 <- { f_1 with current = ( ^ _17) };
    _18 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _18) };
    _19 <- borrow_mut ( * t_4);
    t_4 <- { t_4 with current = ( ^ _19) };
    assume { Resolve6.resolve _20 };
    _20 <- cref_13;
    assume { Resolve6.resolve cref_13 };
    _21 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _21) };
    _16 <- HandleConflict0.handle_conflict _17 _18 _19 _20 _21;
    goto BB5
  }
  BB3 {
    assume { Resolve1.resolve f_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    assume { Resolve5.resolve _6 };
    absurd
  }
  BB4 {
    assume { Resolve1.resolve f_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    assume { Resolve5.resolve _6 };
    _0 <- Type.Core_Option_Option_Some true;
    goto BB8
  }
  BB5 {
    assume { Resolve1.resolve f_1 };
    assume { Resolve2.resolve a_2 };
    assume { Resolve3.resolve t_4 };
    assume { Resolve4.resolve w_5 };
    _15 <- not _16;
    switch (_15)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    _0 <- Type.Core_Option_Option_Some false;
    goto BB8
  }
  BB7 {
    _14 <- ();
    assume { Resolve7.resolve _14 };
    _0 <- Type.Core_Option_Option_None;
    goto BB9
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module CreusotContracts_Logic_Ghost_Impl0_ModelTy
  type t   
  type modelTy  = 
    t
end
module CreusotContracts_Logic_Ghost_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Model
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0
  type t   
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Ghost_Impl1_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Ghost_Impl1_Record
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module Lib_SolverDpll_UnitPropLoop_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant3
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant2
  clone Lib_Decision_Impl0_Invariant_Interface as Invariant1
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  val unit_prop_loop [@cfg:stackify] (f : borrowed (Type.lib_formula_formula)) (a : borrowed (Type.lib_assignments_assignments)) (d : Type.lib_decision_decisions) (t : borrowed (Type.lib_trail_trail)) (w : borrowed (Type.lib_watches_watches)) : bool
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant0.invariant' ( * t) ( * f)}
    requires {Invariant1.invariant' d (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant2.invariant' ( * a) ( * f)}
    requires {Invariant3.invariant' ( * f)}
    ensures { EquisatCompatible0.equisat_compatible ( * f) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ a) ( ^ f) }
    ensures { Invariant0.invariant' ( ^ t) ( ^ f) }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ t))) > 0 }
    ensures { Invariant3.invariant' ( ^ f) }
    ensures { UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { result -> not (Unsat0.unsat ( ^ f) ( ^ a)) }
    ensures { not result -> Unsat0.unsat ( ^ f) ( ^ a) }
    
end
module Lib_SolverDpll_UnitPropLoop
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Lib_Lit_Impl1_SatInner as SatInner2
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Lit_Impl1_Invariant as Invariant5
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner2
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model10 with function Model0.model = Model9.model
  clone Lib_Clause_Impl2_SatInner as SatInner1 with function Model0.model = Model10.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Clause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model10.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model10.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model10.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant4 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model6 with function Model0.model = Model8.model
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = usize
  clone Lib_Decision_Impl0_Invariant as Invariant3 with function Model0.model = Model7.model
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model4 with type t = borrowed (Type.lib_assignments_assignments)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model3.model,
  function Model1.model = Model9.model
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = borrowed (Type.lib_formula_formula)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = borrowed (Type.lib_trail_trail)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model5.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Formula_Impl1_Compatible as Compatible0 with function Model0.model = Model5.model,
  function Model1.model = Model10.model
  clone Lib_Formula_Impl1_EquisatCompatible as EquisatCompatible0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Equisat0.equisat = Equisat0.equisat
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model0.model,
  function Model1.model = Model5.model
  clone Lib_Trail_Impl1_Invariant as Invariant2 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model5.model,
  predicate Invariant0.invariant' = Invariant4.invariant'
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve12 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve11 with type self = Type.core_option_option bool
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve10 with type t = Type.lib_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve9 with type t = Type.lib_trail_trail
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.lib_decision_decisions
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_trail_trail))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = borrowed (Type.lib_trail_trail)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = borrowed (Type.lib_assignments_assignments)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_formula_formula))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.lib_formula_formula)
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record1 with type t = borrowed (Type.lib_assignments_assignments),
  function Model0.model = Model4.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.lib_formula_formula),
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record2 with type t = borrowed (Type.lib_trail_trail),
  function Model0.model = Model1.model
  clone Lib_SolverDpll_UnitPropStep_Interface as UnitPropStep0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant2.invariant', predicate Invariant1.invariant' = Invariant3.invariant',
  predicate Invariant2.invariant' = Invariant1.invariant', predicate Invariant3.invariant' = Invariant0.invariant',
  predicate EquisatCompatible0.equisat_compatible = EquisatCompatible0.equisat_compatible,
  predicate Unsat0.unsat = Unsat0.unsat
  let rec cfg unit_prop_loop [@cfg:stackify] (f : borrowed (Type.lib_formula_formula)) (a : borrowed (Type.lib_assignments_assignments)) (d : Type.lib_decision_decisions) (t : borrowed (Type.lib_trail_trail)) (w : borrowed (Type.lib_watches_watches)) : bool
    requires {Seq.length (Model3.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant2.invariant' ( * t) ( * f)}
    requires {Invariant3.invariant' d (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant1.invariant' ( * a) ( * f)}
    requires {Invariant0.invariant' ( * f)}
    ensures { EquisatCompatible0.equisat_compatible ( * f) ( ^ f) }
    ensures { Invariant1.invariant' ( ^ a) ( ^ f) }
    ensures { Invariant2.invariant' ( ^ t) ( ^ f) }
    ensures { Seq.length (Model3.model (Type.lib_trail_trail_Trail_trail ( ^ t))) > 0 }
    ensures { Invariant0.invariant' ( ^ f) }
    ensures { UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( ^ f)) }
    ensures { result -> not (Unsat0.unsat ( ^ f) ( ^ a)) }
    ensures { not result -> Unsat0.unsat ( ^ f) ( ^ a) }
    
   = 
  var _0 : bool;
  var f_1 : borrowed (Type.lib_formula_formula);
  var a_2 : borrowed (Type.lib_assignments_assignments);
  var d_3 : Type.lib_decision_decisions;
  var t_4 : borrowed (Type.lib_trail_trail);
  var w_5 : borrowed (Type.lib_watches_watches);
  var old_f_6 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_formula_formula));
  var _7 : borrowed (Type.lib_formula_formula);
  var _8 : borrowed (Type.lib_formula_formula);
  var old_a_9 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments));
  var _10 : borrowed (Type.lib_assignments_assignments);
  var _11 : borrowed (Type.lib_assignments_assignments);
  var old_t_12 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_trail_trail));
  var _13 : borrowed (Type.lib_trail_trail);
  var _14 : borrowed (Type.lib_trail_trail);
  var _15 : ();
  var _16 : ();
  var _17 : Type.core_option_option bool;
  var _18 : borrowed (Type.lib_formula_formula);
  var _19 : borrowed (Type.lib_assignments_assignments);
  var _20 : Type.lib_decision_decisions;
  var _21 : borrowed (Type.lib_trail_trail);
  var _22 : borrowed (Type.lib_watches_watches);
  var _23 : isize;
  var _24 : ();
  var _25 : ();
  {
    f_1 <- f;
    a_2 <- a;
    d_3 <- d;
    t_4 <- t;
    w_5 <- w;
    goto BB0
  }
  BB0 {
    _8 <- f_1;
    _7 <- _8;
    assume { Resolve0.resolve _8 };
    old_f_6 <- Record0.record _7;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_f_6 };
    _11 <- a_2;
    _10 <- _11;
    assume { Resolve2.resolve _11 };
    old_a_9 <- Record1.record _10;
    goto BB2
  }
  BB2 {
    assume { Resolve3.resolve old_a_9 };
    _14 <- t_4;
    _13 <- _14;
    assume { Resolve4.resolve _14 };
    old_t_12 <- Record2.record _13;
    goto BB3
  }
  BB3 {
    assume { Resolve5.resolve old_t_12 };
    goto BB4
  }
  BB4 {
    invariant maintains_f { Invariant0.invariant' ( * f_1) };
    invariant maintains_a { Invariant1.invariant' ( * a_2) ( * f_1) };
    invariant maintains_t { Invariant2.invariant' ( * t_4) ( * f_1) };
    invariant vardata_unchanged { Seq.length (Model0.model (Type.lib_trail_trail_Trail_vardata ( * t_4))) = Seq.length (Model0.model (Type.lib_trail_trail_Trail_vardata ( * Model1.model old_t_12))) };
    invariant num_vars { UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f_1)) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * Model2.model old_f_6)) };
    invariant trail_len { Seq.length (Model3.model (Type.lib_trail_trail_Trail_trail ( * t_4))) > 0 };
    invariant propha {  ^ a_2 =  ^ Model4.model old_a_9 };
    invariant prophf {  ^ f_1 =  ^ Model2.model old_f_6 };
    invariant propht {  ^ t_4 =  ^ Model1.model old_t_12 };
    invariant equi { EquisatCompatible0.equisat_compatible ( * Model2.model old_f_6) ( * f_1) };
    _18 <- borrow_mut ( * f_1);
    f_1 <- { f_1 with current = ( ^ _18) };
    _19 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _19) };
    _20 <- d_3;
    _21 <- borrow_mut ( * t_4);
    t_4 <- { t_4 with current = ( ^ _21) };
    _22 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _22) };
    _17 <- UnitPropStep0.unit_prop_step _18 _19 _20 _21 _22;
    goto BB5
  }
  BB5 {
    switch (_17)
      | Type.Core_Option_Option_None -> goto BB6
      | Type.Core_Option_Option_Some _ -> goto BB7
      end
  }
  BB6 {
    assume { Resolve11.resolve _17 };
    _16 <- ();
    assume { Resolve12.resolve _16 };
    goto BB4
  }
  BB7 {
    assume { Resolve6.resolve f_1 };
    assume { Resolve7.resolve a_2 };
    assume { Resolve8.resolve d_3 };
    assume { Resolve9.resolve t_4 };
    assume { Resolve10.resolve w_5 };
    switch (Type.core_option_option_Some_0 _17)
      | False -> goto BB10
      | _ -> goto BB9
      end
  }
  BB8 {
    assume { Resolve6.resolve f_1 };
    assume { Resolve7.resolve a_2 };
    assume { Resolve8.resolve d_3 };
    assume { Resolve9.resolve t_4 };
    assume { Resolve10.resolve w_5 };
    assume { Resolve11.resolve _17 };
    absurd
  }
  BB9 {
    assume { Resolve11.resolve _17 };
    _0 <- true;
    goto BB11
  }
  BB10 {
    assume { Resolve11.resolve _17 };
    _0 <- false;
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Lib_Trail_Impl2_AddLevel_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = (usize, Type.lib_trail_reason)
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  val add_level [@cfg:stackify] (self : borrowed (Type.lib_trail_trail)) (_f : Type.lib_formula_formula) : ()
    requires {Invariant0.invariant' ( * self) _f}
    ensures { Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ self))) (Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * self)))))) = 0 }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ self))) = Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * self))) + 1 }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * self))) -> Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail ( * self))) i = Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ self))) i }
    ensures { Model2.model (Type.lib_trail_trail_Trail_vardata ( * self)) = Model2.model (Type.lib_trail_trail_Trail_vardata ( ^ self)) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module Lib_Trail_Impl2_AddLevel
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone Lib_Trail_Impl1_Invariant as Invariant0 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  val add_level [@cfg:stackify] (self : borrowed (Type.lib_trail_trail)) (_f : Type.lib_formula_formula) : ()
    requires {Invariant0.invariant' ( * self) _f}
    ensures { Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ self))) (Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * self)))))) = 0 }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ self))) = Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * self))) + 1 }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * self))) -> Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail ( * self))) i = Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ self))) i }
    ensures { Model2.model (Type.lib_trail_trail_Trail_vardata ( * self)) = Model2.model (Type.lib_trail_trail_Trail_vardata ( ^ self)) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = t,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index_mut = IndexMut0.index_mut
end
module Lib_Trail_Impl2_EnqAssignment_Interface
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model3 with type t = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  val enq_assignment [@cfg:stackify] (self : borrowed (Type.lib_trail_trail)) (lit : Type.lib_lit_lit) (reason : Type.lib_trail_reason) (_f : Type.lib_formula_formula) : ()
    requires {match (reason) with
      | Type.Lib_Trail_Reason_Undefined -> true
      | Type.Lib_Trail_Reason_Decision -> true
      | Type.Lib_Trail_Reason_Unit -> true
      | Type.Lib_Trail_Reason_Long k -> 0 <= UInt64.to_int k && UInt64.to_int k < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses _f))
      end}
    requires {Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) > 0}
    requires {0 <= UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) && UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) < UInt64.to_int (Type.lib_formula_formula_Formula_num_vars _f)}
    requires {Invariant0.invariant' ( * self) _f}
    ensures { (let (_, a) = Seq.get (Model2.model (Type.lib_trail_trail_Trail_vardata ( ^ self))) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit)) in a) = reason }
    ensures { UInt64.to_int (let (a, _) = Seq.get (Model2.model (Type.lib_trail_trail_Trail_vardata ( ^ self))) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit)) in a) = Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) - 1 }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model2.model (Type.lib_trail_trail_Trail_vardata ( * self))) && i <> UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) -> Seq.get (Model2.model (Type.lib_trail_trail_Trail_vardata ( * self))) i = Seq.get (Model2.model (Type.lib_trail_trail_Trail_vardata ( ^ self))) i }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) - 1 -> Seq.get (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) i = Seq.get (Model1.model (Type.lib_trail_trail_Trail_trail ( ^ self))) i }
    ensures { Model3.model (Seq.get (Model1.model (Type.lib_trail_trail_Trail_trail ( ^ self))) (Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) - 1)) = Seq.snoc (Model3.model (Seq.get (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) (Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) - 1))) lit }
    ensures { Seq.length (Model2.model (Type.lib_trail_trail_Trail_vardata ( ^ self))) = Seq.length (Model2.model (Type.lib_trail_trail_Trail_vardata ( * self))) }
    ensures { Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( ^ self))) = Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module Lib_Trail_Impl2_EnqAssignment
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model1.model,
  function Model1.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model2.model,
  function Model1.model = Model0.model
  clone Lib_Trail_Impl1_Invariant as Invariant0 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  val enq_assignment [@cfg:stackify] (self : borrowed (Type.lib_trail_trail)) (lit : Type.lib_lit_lit) (reason : Type.lib_trail_reason) (_f : Type.lib_formula_formula) : ()
    requires {match (reason) with
      | Type.Lib_Trail_Reason_Undefined -> true
      | Type.Lib_Trail_Reason_Decision -> true
      | Type.Lib_Trail_Reason_Unit -> true
      | Type.Lib_Trail_Reason_Long k -> 0 <= UInt64.to_int k && UInt64.to_int k < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses _f))
      end}
    requires {Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) > 0}
    requires {0 <= UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) && UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) < UInt64.to_int (Type.lib_formula_formula_Formula_num_vars _f)}
    requires {Invariant0.invariant' ( * self) _f}
    ensures { (let (_, a) = Seq.get (Model2.model (Type.lib_trail_trail_Trail_vardata ( ^ self))) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit)) in a) = reason }
    ensures { UInt64.to_int (let (a, _) = Seq.get (Model2.model (Type.lib_trail_trail_Trail_vardata ( ^ self))) (UInt64.to_int (Type.lib_lit_lit_Lit_idx lit)) in a) = Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) - 1 }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model2.model (Type.lib_trail_trail_Trail_vardata ( * self))) && i <> UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) -> Seq.get (Model2.model (Type.lib_trail_trail_Trail_vardata ( * self))) i = Seq.get (Model2.model (Type.lib_trail_trail_Trail_vardata ( ^ self))) i }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) - 1 -> Seq.get (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) i = Seq.get (Model1.model (Type.lib_trail_trail_Trail_trail ( ^ self))) i }
    ensures { Model3.model (Seq.get (Model1.model (Type.lib_trail_trail_Trail_trail ( ^ self))) (Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) - 1)) = Seq.snoc (Model3.model (Seq.get (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) (Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) - 1))) lit }
    ensures { Seq.length (Model2.model (Type.lib_trail_trail_Trail_vardata ( ^ self))) = Seq.length (Model2.model (Type.lib_trail_trail_Trail_vardata ( * self))) }
    ensures { Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( ^ self))) = Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * self))) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module Lib_SolverDpll_OuterLoop_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Assignments_Impl1_Complete_Interface as Complete0
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant3
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant2
  clone Lib_Decision_Impl0_Invariant_Interface as Invariant1
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  val outer_loop [@cfg:stackify] (f : borrowed (Type.lib_formula_formula)) (a : borrowed (Type.lib_assignments_assignments)) (d : Type.lib_decision_decisions) (t : borrowed (Type.lib_trail_trail)) (w : borrowed (Type.lib_watches_watches)) : Type.core_option_option bool
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant0.invariant' ( * t) ( * f)}
    requires {Invariant1.invariant' d (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant2.invariant' ( * a) ( * f)}
    requires {Invariant3.invariant' ( * f)}
    ensures { EquisatCompatible0.equisat_compatible ( * f) ( ^ f) }
    ensures { match (result) with
      | Type.Core_Option_Option_Some (True) -> Sat0.sat ( ^ f) ( ^ a) && Complete0.complete ( ^ a)
      | Type.Core_Option_Option_Some (False) -> Unsat0.unsat ( ^ f) ( ^ a)
      | Type.Core_Option_Option_None -> true
      end }
    ensures { Invariant2.invariant' ( ^ a) ( ^ f) }
    ensures { Invariant0.invariant' ( ^ t) ( ^ f) }
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( ^ t))) > 0 }
    ensures { Invariant3.invariant' ( ^ f) }
    ensures { UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( ^ f)) }
    
end
module Lib_SolverDpll_OuterLoop
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Lit_Impl1_Invariant as Invariant5
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Lit_Impl1_SatInner as SatInner2
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner2
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model8 with function Model0.model = Model7.model
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model8.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model8.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant4 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Clause_Impl2_SatInner as SatInner1 with function Model0.model = Model8.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Clause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model8.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model2 with function Model0.model = Model5.model
  clone Lib_Assignments_Impl1_Invariant as Invariant2 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Compatible as Compatible0 with function Model0.model = Model4.model,
  function Model1.model = Model8.model
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model6.model,
  function Model1.model = Model4.model
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model4.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model2.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model4.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model2.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Formula_Impl1_Invariant as Invariant3 with function Model0.model = Model4.model,
  predicate Invariant0.invariant' = Invariant4.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize
  clone Lib_Decision_Impl0_Invariant as Invariant1 with function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model1.model,
  function Model1.model = Model7.model
  clone Lib_Trail_Impl1_Invariant as Invariant0 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone Lib_Assignments_AssignmentsInvariant as AssignmentsInvariant0
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone Lib_Formula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone Lib_Formula_Impl1_EquisatCompatible as EquisatCompatible0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Equisat0.equisat = Equisat0.equisat
  clone Lib_Logic_LemmaCompleteAndNotUnsatImpliesSat as LemmaCompleteAndNotUnsatImpliesSat0 with predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner,
  predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate AssignmentsInvariant0.assignments_invariant = AssignmentsInvariant0.assignments_invariant,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate SatInner0.sat_inner = SatInner0.sat_inner, axiom .
  clone Lib_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model2.model,
  predicate Unset0.unset = Unset0.unset
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve10 with type self = Type.lib_lit_lit
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve9 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.core_option_option usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.lib_trail_trail
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.lib_decision_decisions
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = bool
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.lib_watches_watches
  clone CreusotContracts_Logic_Model_Impl1_Model as Model10 with type t = Type.creusotcontracts_std1_vec_vec uint8,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model5.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = uint8,
  function Model0.model = Model5.model, function Model1.model = Model10.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model9 with type t = Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit),
  function Model0.model = Model9.model
  clone Lib_Trail_Impl2_EnqAssignment_Interface as EnqAssignment0 with function Model0.model = Model4.model,
  function Model1.model = Model1.model, predicate Invariant0.invariant' = Invariant0.invariant',
  function Model2.model = Model6.model, function Model3.model = Model7.model
  clone Lib_Trail_Impl2_AddLevel_Interface as AddLevel0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model1.model, function Model1.model = Model7.model, function Model2.model = Model6.model
  clone Lib_SolverDpll_UnitPropLoop_Interface as UnitPropLoop0 with function Model0.model = Model1.model,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate Invariant1.invariant' = Invariant1.invariant',
  predicate Invariant2.invariant' = Invariant2.invariant', predicate Invariant3.invariant' = Invariant3.invariant',
  predicate EquisatCompatible0.equisat_compatible = EquisatCompatible0.equisat_compatible,
  predicate Unsat0.unsat = Unsat0.unsat
  clone Lib_Assignments_Impl2_FindUnassigned_Interface as FindUnassigned0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant1.invariant', predicate Invariant1.invariant' = Invariant2.invariant',
  function Model1.model = Model2.model, predicate Unset0.unset = Unset0.unset,
  predicate Complete0.complete = Complete0.complete
  let rec cfg outer_loop [@cfg:stackify] (f : borrowed (Type.lib_formula_formula)) (a : borrowed (Type.lib_assignments_assignments)) (d : Type.lib_decision_decisions) (t : borrowed (Type.lib_trail_trail)) (w : borrowed (Type.lib_watches_watches)) : Type.core_option_option bool
    requires {Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant0.invariant' ( * t) ( * f)}
    requires {Invariant1.invariant' d (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant2.invariant' ( * a) ( * f)}
    requires {Invariant3.invariant' ( * f)}
    ensures { EquisatCompatible0.equisat_compatible ( * f) ( ^ f) }
    ensures { match (result) with
      | Type.Core_Option_Option_Some (True) -> Sat0.sat ( ^ f) ( ^ a) && Complete0.complete ( ^ a)
      | Type.Core_Option_Option_Some (False) -> Unsat0.unsat ( ^ f) ( ^ a)
      | Type.Core_Option_Option_None -> true
      end }
    ensures { Invariant2.invariant' ( ^ a) ( ^ f) }
    ensures { Invariant0.invariant' ( ^ t) ( ^ f) }
    ensures { Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail ( ^ t))) > 0 }
    ensures { Invariant3.invariant' ( ^ f) }
    ensures { UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( ^ f)) }
    
   = 
  var _0 : Type.core_option_option bool;
  var f_1 : borrowed (Type.lib_formula_formula);
  var a_2 : borrowed (Type.lib_assignments_assignments);
  var d_3 : Type.lib_decision_decisions;
  var t_4 : borrowed (Type.lib_trail_trail);
  var w_5 : borrowed (Type.lib_watches_watches);
  var _6 : ();
  var _7 : bool;
  var _8 : borrowed (Type.lib_formula_formula);
  var _9 : borrowed (Type.lib_assignments_assignments);
  var _10 : Type.lib_decision_decisions;
  var _11 : borrowed (Type.lib_trail_trail);
  var _12 : borrowed (Type.lib_watches_watches);
  var _13 : ();
  var _14 : ();
  var _15 : Type.core_option_option usize;
  var _16 : borrowed (Type.lib_assignments_assignments);
  var _17 : Type.lib_decision_decisions;
  var _18 : Type.lib_formula_formula;
  var _19 : isize;
  var next_20 : usize;
  var dlevel_21 : usize;
  var _22 : Type.creusotcontracts_std1_vec_vec (Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit));
  var _23 : ();
  var _24 : borrowed (Type.lib_trail_trail);
  var _25 : Type.lib_formula_formula;
  var _26 : borrowed uint8;
  var _27 : borrowed (Type.creusotcontracts_std1_vec_vec uint8);
  var _28 : usize;
  var lit_29 : Type.lib_lit_lit;
  var _30 : usize;
  var _31 : ();
  var _32 : borrowed (Type.lib_trail_trail);
  var _33 : Type.lib_lit_lit;
  var _34 : Type.lib_trail_reason;
  var _35 : Type.lib_formula_formula;
  var _36 : ();
  var _37 : ();
  var _38 : ();
  var _39 : ();
  {
    f_1 <- f;
    a_2 <- a;
    d_3 <- d;
    t_4 <- t;
    w_5 <- w;
    goto BB0
  }
  BB0 {
    _8 <- borrow_mut ( * f_1);
    f_1 <- { f_1 with current = ( ^ _8) };
    _9 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _9) };
    _10 <- d_3;
    _11 <- borrow_mut ( * t_4);
    t_4 <- { t_4 with current = ( ^ _11) };
    _12 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _12) };
    _7 <- UnitPropLoop0.unit_prop_loop _8 _9 _10 _11 _12;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve w_5 };
    switch (_7)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve1.resolve _7 };
    _6 <- ();
    assume { Resolve2.resolve _6 };
    _16 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _16) };
    _17 <- d_3;
    assume { Resolve3.resolve d_3 };
    _18 <-  * f_1;
    _15 <- FindUnassigned0.find_unassigned _16 _17 _18;
    goto BB4
  }
  BB3 {
    assume { Resolve4.resolve f_1 };
    assume { Resolve5.resolve a_2 };
    assume { Resolve3.resolve d_3 };
    assume { Resolve6.resolve t_4 };
    assume { Resolve1.resolve _7 };
    _0 <- Type.Core_Option_Option_Some false;
    goto BB12
  }
  BB4 {
    switch (_15)
      | Type.Core_Option_Option_None -> goto BB5
      | Type.Core_Option_Option_Some _ -> goto BB7
      end
  }
  BB5 {
    assume { Resolve4.resolve f_1 };
    assume { Resolve5.resolve a_2 };
    assume { Resolve6.resolve t_4 };
    assume { Resolve7.resolve _15 };
    assert { Complete0.complete ( * a_2) };
    _37 <- ();
    assume { Resolve2.resolve _37 };
    assert { not (Unsat0.unsat ( * f_1) ( * a_2)) };
    _38 <- ();
    assume { Resolve2.resolve _38 };
    assert { let _ = LemmaCompleteAndNotUnsatImpliesSat0.lemma_complete_and_not_unsat_implies_sat ( * f_1) (Model0.model a_2) in true };
    _39 <- ();
    assume { Resolve2.resolve _39 };
    _0 <- Type.Core_Option_Option_Some true;
    goto BB12
  }
  BB6 {
    assume { Resolve4.resolve f_1 };
    assume { Resolve5.resolve a_2 };
    assume { Resolve6.resolve t_4 };
    assume { Resolve7.resolve _15 };
    absurd
  }
  BB7 {
    assume { Resolve8.resolve next_20 };
    next_20 <- Type.core_option_option_Some_0 _15;
    assume { Resolve7.resolve _15 };
    _22 <- Type.lib_trail_trail_Trail_trail ( * t_4);
    dlevel_21 <- Len0.len _22;
    goto BB8
  }
  BB8 {
    assume { Resolve8.resolve dlevel_21 };
    _24 <- borrow_mut ( * t_4);
    t_4 <- { t_4 with current = ( ^ _24) };
    _25 <-  * f_1;
    _23 <- AddLevel0.add_level _24 _25;
    goto BB9
  }
  BB9 {
    _27 <- borrow_mut (Type.lib_assignments_assignments_Assignments_0 ( * a_2));
    a_2 <- { a_2 with current = (let Type.Lib_Assignments_Assignments a b =  * a_2 in Type.Lib_Assignments_Assignments ( ^ _27) b) };
    assume { Resolve5.resolve a_2 };
    assume { Resolve8.resolve _28 };
    _28 <- next_20;
    _26 <- IndexMut0.index_mut _27 _28;
    goto BB10
  }
  BB10 {
    _26 <- { _26 with current = (1 : uint8) };
    assume { Resolve9.resolve _26 };
    assume { Resolve8.resolve _30 };
    _30 <- next_20;
    assume { Resolve8.resolve next_20 };
    lit_29 <- Type.Lib_Lit_Lit _30 true;
    _32 <- borrow_mut ( * t_4);
    t_4 <- { t_4 with current = ( ^ _32) };
    assume { Resolve10.resolve _33 };
    _33 <- lit_29;
    assume { Resolve10.resolve lit_29 };
    _34 <- Type.Lib_Trail_Reason_Decision;
    _35 <-  * f_1;
    assume { Resolve4.resolve f_1 };
    _31 <- EnqAssignment0.enq_assignment _32 _33 _34 _35;
    goto BB11
  }
  BB11 {
    assume { Resolve6.resolve t_4 };
    _14 <- ();
    assume { Resolve2.resolve _14 };
    _0 <- Type.Core_Option_Option_None;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Lib_SolverDpll_Inner_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_EventuallySatCompleteNoAss_Interface as EventuallySatCompleteNoAss0
  clone Lib_Formula_Impl1_Sat_Interface as Sat0
  clone Lib_Formula_Impl1_EquisatCompatible_Interface as EquisatCompatible0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant3
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant2
  clone Lib_Decision_Impl0_Invariant_Interface as Invariant1
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  val inner [@cfg:stackify] (f : borrowed (Type.lib_formula_formula)) (a : borrowed (Type.lib_assignments_assignments)) (d : Type.lib_decision_decisions) (t : borrowed (Type.lib_trail_trail)) (w : borrowed (Type.lib_watches_watches)) : bool
    requires {Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant0.invariant' ( * t) ( * f)}
    requires {Invariant1.invariant' d (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant2.invariant' ( * a) ( * f)}
    requires {Invariant3.invariant' ( * f)}
    ensures { EquisatCompatible0.equisat_compatible ( * f) ( ^ f) }
    ensures { if result then
      Sat0.sat ( ^ f) ( ^ a) && Sat0.sat ( * f) ( ^ a) && EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( * f)
    else
      Unsat0.unsat ( ^ f) ( ^ a)
     }
    
end
module Lib_SolverDpll_Inner
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone Lib_Lit_Impl1_Invariant as Invariant5
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant5.invariant'
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner2
  clone Lib_Lit_Impl1_SatInner as SatInner2
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Logic_Unset as Unset0
  clone Lib_Assignments_CompleteInner as CompleteInner0 with predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model9 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model10 with function Model0.model = Model9.model
  clone Lib_Clause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model10.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Clause_Impl2_SatInner as SatInner1 with function Model0.model = Model10.model,
  predicate SatInner0.sat_inner = SatInner2.sat_inner
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model10.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model10.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant4 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model8 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model6 with function Model0.model = Model8.model
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model7 with type t = usize
  clone Lib_Decision_Impl0_Invariant as Invariant3 with function Model0.model = Model7.model
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model4 with type t = borrowed (Type.lib_assignments_assignments)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model3.model,
  function Model1.model = Model9.model
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = borrowed (Type.lib_formula_formula)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = borrowed (Type.lib_trail_trail)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model5.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model6.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Formula_Impl1_SatInner as SatInner0 with function Model0.model = Model5.model,
  predicate SatInner0.sat_inner = SatInner1.sat_inner
  clone Lib_Formula_Impl1_EventuallySatCompleteNoAss as EventuallySatCompleteNoAss0 with predicate CompleteInner0.complete_inner = CompleteInner0.complete_inner,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Equisat as Equisat0 with predicate EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass = EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass
  clone Lib_Formula_Impl1_Sat as Sat0 with function Model0.model = Model6.model,
  predicate SatInner0.sat_inner = SatInner0.sat_inner
  clone Lib_Formula_Impl1_Compatible as Compatible0 with function Model0.model = Model5.model,
  function Model1.model = Model10.model
  clone Lib_Formula_Impl1_EquisatCompatible as EquisatCompatible0 with predicate Compatible0.compatible = Compatible0.compatible,
  predicate Equisat0.equisat = Equisat0.equisat
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model0.model,
  function Model1.model = Model5.model
  clone Lib_Trail_Impl1_Invariant as Invariant2 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model5.model,
  predicate Invariant0.invariant' = Invariant4.invariant'
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve12 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve11 with type self = Type.core_option_option bool
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve10 with type t = Type.lib_watches_watches
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve9 with type t = Type.lib_trail_trail
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.lib_decision_decisions
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.lib_assignments_assignments
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.lib_formula_formula
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_trail_trail))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = borrowed (Type.lib_trail_trail)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = borrowed (Type.lib_assignments_assignments)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_formula_formula))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.lib_formula_formula)
  clone Lib_Assignments_Impl1_Complete as Complete0 with function Model0.model = Model6.model,
  predicate Unset0.unset = Unset0.unset
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record1 with type t = borrowed (Type.lib_assignments_assignments),
  function Model0.model = Model4.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.lib_formula_formula),
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record2 with type t = borrowed (Type.lib_trail_trail),
  function Model0.model = Model1.model
  clone Lib_SolverDpll_OuterLoop_Interface as OuterLoop0 with function Model0.model = Model3.model,
  predicate Invariant0.invariant' = Invariant2.invariant', predicate Invariant1.invariant' = Invariant3.invariant',
  predicate Invariant2.invariant' = Invariant1.invariant', predicate Invariant3.invariant' = Invariant0.invariant',
  predicate EquisatCompatible0.equisat_compatible = EquisatCompatible0.equisat_compatible,
  predicate Sat0.sat = Sat0.sat, predicate Complete0.complete = Complete0.complete,
  predicate Unsat0.unsat = Unsat0.unsat
  let rec cfg inner [@cfg:stackify] (f : borrowed (Type.lib_formula_formula)) (a : borrowed (Type.lib_assignments_assignments)) (d : Type.lib_decision_decisions) (t : borrowed (Type.lib_trail_trail)) (w : borrowed (Type.lib_watches_watches)) : bool
    requires {Seq.length (Model3.model (Type.lib_trail_trail_Trail_trail ( * t))) > 0}
    requires {Invariant2.invariant' ( * t) ( * f)}
    requires {Invariant3.invariant' d (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f)))}
    requires {Invariant1.invariant' ( * a) ( * f)}
    requires {Invariant0.invariant' ( * f)}
    ensures { EquisatCompatible0.equisat_compatible ( * f) ( ^ f) }
    ensures { if result then
      Sat0.sat ( ^ f) ( ^ a) && Sat0.sat ( * f) ( ^ a) && EventuallySatCompleteNoAss0.eventually_sat_complete_no_ass ( * f)
    else
      Unsat0.unsat ( ^ f) ( ^ a)
     }
    
   = 
  var _0 : bool;
  var f_1 : borrowed (Type.lib_formula_formula);
  var a_2 : borrowed (Type.lib_assignments_assignments);
  var d_3 : Type.lib_decision_decisions;
  var t_4 : borrowed (Type.lib_trail_trail);
  var w_5 : borrowed (Type.lib_watches_watches);
  var old_f_6 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_formula_formula));
  var _7 : borrowed (Type.lib_formula_formula);
  var _8 : borrowed (Type.lib_formula_formula);
  var old_a_9 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_assignments_assignments));
  var _10 : borrowed (Type.lib_assignments_assignments);
  var _11 : borrowed (Type.lib_assignments_assignments);
  var old_t_12 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.lib_trail_trail));
  var _13 : borrowed (Type.lib_trail_trail);
  var _14 : borrowed (Type.lib_trail_trail);
  var _15 : ();
  var _16 : ();
  var res_17 : Type.core_option_option bool;
  var _18 : borrowed (Type.lib_formula_formula);
  var _19 : borrowed (Type.lib_assignments_assignments);
  var _20 : Type.lib_decision_decisions;
  var _21 : borrowed (Type.lib_trail_trail);
  var _22 : borrowed (Type.lib_watches_watches);
  var _23 : isize;
  var _24 : ();
  var _25 : ();
  {
    f_1 <- f;
    a_2 <- a;
    d_3 <- d;
    t_4 <- t;
    w_5 <- w;
    goto BB0
  }
  BB0 {
    _8 <- f_1;
    _7 <- _8;
    assume { Resolve0.resolve _8 };
    old_f_6 <- Record0.record _7;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_f_6 };
    _11 <- a_2;
    _10 <- _11;
    assume { Resolve2.resolve _11 };
    old_a_9 <- Record1.record _10;
    goto BB2
  }
  BB2 {
    assume { Resolve3.resolve old_a_9 };
    _14 <- t_4;
    _13 <- _14;
    assume { Resolve4.resolve _14 };
    old_t_12 <- Record2.record _13;
    goto BB3
  }
  BB3 {
    assume { Resolve5.resolve old_t_12 };
    goto BB4
  }
  BB4 {
    invariant maintains_f { Invariant0.invariant' ( * f_1) };
    invariant maintains_a { Invariant1.invariant' ( * a_2) ( * f_1) };
    invariant maintains_t { Invariant2.invariant' ( * t_4) ( * f_1) };
    invariant vardata_unchanged { Seq.length (Model0.model (Type.lib_trail_trail_Trail_vardata ( * t_4))) = Seq.length (Model0.model (Type.lib_trail_trail_Trail_vardata ( * Model1.model old_t_12))) };
    invariant num_vars { UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * f_1)) = UInt64.to_int (Type.lib_formula_formula_Formula_num_vars ( * Model2.model old_f_6)) };
    invariant trail_len { Seq.length (Model3.model (Type.lib_trail_trail_Trail_trail ( * t_4))) > 0 };
    invariant propha {  ^ a_2 =  ^ Model4.model old_a_9 };
    invariant prophf {  ^ f_1 =  ^ Model2.model old_f_6 };
    invariant propht {  ^ t_4 =  ^ Model1.model old_t_12 };
    invariant equi { EquisatCompatible0.equisat_compatible ( * Model2.model old_f_6) ( * f_1) };
    _18 <- borrow_mut ( * f_1);
    f_1 <- { f_1 with current = ( ^ _18) };
    _19 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _19) };
    _20 <- d_3;
    _21 <- borrow_mut ( * t_4);
    t_4 <- { t_4 with current = ( ^ _21) };
    _22 <- borrow_mut ( * w_5);
    w_5 <- { w_5 with current = ( ^ _22) };
    res_17 <- OuterLoop0.outer_loop _18 _19 _20 _21 _22;
    goto BB5
  }
  BB5 {
    switch (res_17)
      | Type.Core_Option_Option_None -> goto BB6
      | Type.Core_Option_Option_Some _ -> goto BB7
      end
  }
  BB6 {
    assume { Resolve11.resolve res_17 };
    _16 <- ();
    assume { Resolve12.resolve _16 };
    goto BB4
  }
  BB7 {
    assume { Resolve6.resolve f_1 };
    assume { Resolve7.resolve a_2 };
    assume { Resolve8.resolve d_3 };
    assume { Resolve9.resolve t_4 };
    assume { Resolve10.resolve w_5 };
    switch (Type.core_option_option_Some_0 res_17)
      | False -> goto BB10
      | _ -> goto BB9
      end
  }
  BB8 {
    assume { Resolve6.resolve f_1 };
    assume { Resolve7.resolve a_2 };
    assume { Resolve8.resolve d_3 };
    assume { Resolve9.resolve t_4 };
    assume { Resolve10.resolve w_5 };
    assume { Resolve11.resolve res_17 };
    absurd
  }
  BB9 {
    assume { Resolve11.resolve res_17 };
    _0 <- true;
    goto BB11
  }
  BB10 {
    assume { Resolve11.resolve res_17 };
    _0 <- false;
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Lib_SolverDpll_Solver_Interface
  use prelude.Prelude
  use Type
  val solver [@cfg:stackify] (f : borrowed (Type.lib_formula_formula)) (units : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)) : bool
    
end
module Lib_SolverDpll_Solver
  use prelude.Prelude
  use Type
  val solver [@cfg:stackify] (f : borrowed (Type.lib_formula_formula)) (units : Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)) : bool
    
end
module Lib_Util_SortedRangeRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range_rev (s : Seq.seq (usize, usize)) (l : int) (u : int)
end
module Lib_Util_SortedRangeRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_range_rev (s : Seq.seq (usize, usize)) (l : int) (u : int) = 
    forall j : (int) . forall i : (int) . l <= i && i < j && j < u -> (let (a, _) = Seq.get s i in a) >= (let (a, _) = Seq.get s j in a)
end
module Lib_Util_SortedRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate sorted_rev (s : Seq.seq (usize, usize))
end
module Lib_Util_SortedRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  clone Lib_Util_SortedRangeRev_Interface as SortedRangeRev0
  predicate sorted_rev (s : Seq.seq (usize, usize)) = 
    SortedRangeRev0.sorted_range_rev s 0 (Seq.length s)
end
module Lib_Util_PartitionRev_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate partition_rev (v : Seq.seq (usize, usize)) (i : int)
end
module Lib_Util_PartitionRev
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  predicate partition_rev (v : Seq.seq (usize, usize)) (i : int) = 
    forall k2 : (int) . forall k1 : (int) . 0 <= k1 && k1 < i && i <= k2 && k2 < Seq.length v -> (let (a, _) = Seq.get v k1 in a) >= (let (a, _) = Seq.get v k2 in a)
end
module CreusotContracts_Logic_Seq_Impl1_PermutationOf_Interface
  type t   
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl1_PermutationOf
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) = 
    Permut.permut self o 0 (Seq.length self)
end
module Lib_Util_SortReverse_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone Lib_Util_SortedRev_Interface as SortedRev0
  clone CreusotContracts_Logic_Seq_Impl1_PermutationOf_Interface as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec (usize, usize),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = (usize, usize)
  val sort_reverse [@cfg:stackify] (v : borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize))) : ()
    ensures { PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    ensures { SortedRev0.sorted_rev (Model0.model ( ^ v)) }
    
end
module Lib_Util_SortReverse
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone Lib_Util_SortedRangeRev as SortedRangeRev0
  clone Lib_Util_SortedRev as SortedRev0 with predicate SortedRangeRev0.sorted_range_rev = SortedRangeRev0.sorted_range_rev
  clone CreusotContracts_Logic_Seq_Impl1_PermutationOf as PermutationOf0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = (usize, usize)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = (usize, usize)
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec (usize, usize),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  val sort_reverse [@cfg:stackify] (v : borrowed (Type.creusotcontracts_std1_vec_vec (usize, usize))) : ()
    ensures { PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    ensures { SortedRev0.sorted_rev (Model0.model ( ^ v)) }
    
end
module Lib_Decision_Impl1_New_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone Lib_Decision_Impl0_Invariant_Interface as Invariant1
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (f : Type.lib_formula_formula) : Type.lib_decision_decisions
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f)) }
    
end
module Lib_Decision_Impl1_New
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone Lib_Lit_Impl1_Invariant as Invariant3
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model2 with function Model0.model = Model3.model
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model2.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model2.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize
  clone Lib_Decision_Impl0_Invariant as Invariant1 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  val new [@cfg:stackify] (f : Type.lib_formula_formula) : Type.lib_decision_decisions
    requires {Invariant0.invariant' f}
    ensures { Invariant1.invariant' result (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f)) }
    
end
module Lib_Decision_Impl1_GetNext_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  val get_next [@cfg:stackify] (self : borrowed (Type.lib_decision_decisions)) (a : Type.lib_assignments_assignments) : Type.core_option_option usize
    
end
module Lib_Decision_Impl1_GetNext
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  val get_next [@cfg:stackify] (self : borrowed (Type.lib_decision_decisions)) (a : Type.lib_assignments_assignments) : Type.core_option_option usize
    
end
module Lib_Trail_Impl4_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.lib_trail_reason) : Type.lib_trail_reason
end
module Lib_Trail_Impl4_Clone
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.lib_trail_reason
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.lib_trail_reason
  let rec cfg clone' [@cfg:stackify] (self : Type.lib_trail_reason) : Type.lib_trail_reason = 
  var _0 : Type.lib_trail_reason;
  var self_1 : Type.lib_trail_reason;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- self_1;
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module Lib_Trail_Impl4
  use Type
  clone Lib_Trail_Impl4_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.lib_trail_reason, val clone' = Clone0.clone'
end
module Lib_Trail_Impl1_OldTrailEntriesAreAssigned_Interface
  use Type
  predicate old_trail_entries_are_assigned (self : Type.lib_trail_trail) (a : Type.lib_assignments_assignments)
end
module Lib_Trail_Impl1_OldTrailEntriesAreAssigned
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.UInt8
  clone Lib_Assignments_Impl0_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  predicate old_trail_entries_are_assigned (self : Type.lib_trail_trail) (a : Type.lib_assignments_assignments) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail self)) -> (forall j : (int) . 0 <= j && j < Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail self)) i)) -> UInt8.to_int (Seq.get (Model2.model a) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model1.model (Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail self)) i)) j)))) < 2)
end
module Lib_Trail_Impl1_TrailEntriesAreAssigned_Interface
  use Type
  predicate trail_entries_are_assigned (self : Type.lib_trail_trail) (a : Type.lib_assignments_assignments)
end
module Lib_Trail_Impl1_TrailEntriesAreAssigned
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  clone Lib_Logic_BoolToAssignedstate_Interface as BoolToAssignedstate0 with axiom .
  clone Lib_Assignments_Impl0_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  predicate trail_entries_are_assigned (self : Type.lib_trail_trail) (a : Type.lib_assignments_assignments) = 
    forall j : (int) . 0 <= j && j < Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail self)) -> (forall k : (int) . 0 <= k && k < Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail self)) j)) -> Seq.get (Model2.model a) (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model1.model (Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail self)) j)) k))) = BoolToAssignedstate0.bool_to_assignedstate (Type.lib_lit_lit_Lit_polarity (Seq.get (Model1.model (Seq.get (Model0.model (Type.lib_trail_trail_Trail_trail self)) j)) k)))
end
module Lib_Trail_Impl1_UnassignedNotInTrail_Interface
  use Type
  predicate unassigned_not_in_trail (self : Type.lib_trail_trail) (a : Type.lib_assignments_assignments)
end
module Lib_Trail_Impl1_UnassignedNotInTrail
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.UInt8
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Assignments_Impl0_Model_Interface as Model0
  predicate unassigned_not_in_trail (self : Type.lib_trail_trail) (a : Type.lib_assignments_assignments) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model a) -> UInt8.to_int (Seq.get (Model0.model a) i) >= 2 -> (forall j : (int) . 0 <= j && j < Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail self)) -> (forall k : (int) . 0 <= k && k < Seq.length (Model2.model (Seq.get (Model1.model (Type.lib_trail_trail_Trail_trail self)) j)) -> not (UInt64.to_int (Type.lib_lit_lit_Lit_idx (Seq.get (Model2.model (Seq.get (Model1.model (Type.lib_trail_trail_Trail_trail self)) j)) k)) = i)))
end
module Lib_Trail_Impl1_AssignmentsInvariant_Interface
  use Type
  predicate assignments_invariant (self : Type.lib_trail_trail) (a : Type.lib_assignments_assignments)
end
module Lib_Trail_Impl1_AssignmentsInvariant
  use Type
  clone Lib_Trail_Impl1_UnassignedNotInTrail_Interface as UnassignedNotInTrail0
  clone Lib_Trail_Impl1_TrailEntriesAreAssigned_Interface as TrailEntriesAreAssigned0
  predicate assignments_invariant (self : Type.lib_trail_trail) (a : Type.lib_assignments_assignments) = 
    TrailEntriesAreAssigned0.trail_entries_are_assigned self a && UnassignedNotInTrail0.unassigned_not_in_trail self a
end
module Lib_Trail_Impl2_New_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  val new [@cfg:stackify] (f : Type.lib_formula_formula) : Type.lib_trail_trail
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail result)) = 1 }
    ensures { Invariant0.invariant' result f }
    
end
module Lib_Trail_Impl2_New
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_lit_lit
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model1.model,
  function Model1.model = Model3.model
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model0.model,
  function Model1.model = Model2.model
  clone Lib_Trail_Impl1_Invariant as Invariant0 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  val new [@cfg:stackify] (f : Type.lib_formula_formula) : Type.lib_trail_trail
    ensures { Seq.length (Model0.model (Type.lib_trail_trail_Trail_trail result)) = 1 }
    ensures { Invariant0.invariant' result f }
    
end
module Lib_Watches_WatchesInvariantInternal_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate watches_invariant_internal (w : Seq.seq (Type.creusotcontracts_std1_vec_vec (Type.lib_watches_watcher))) (n : int)
    
end
module Lib_Watches_WatchesInvariantInternal
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  predicate watches_invariant_internal (w : Seq.seq (Type.creusotcontracts_std1_vec_vec (Type.lib_watches_watcher))) (n : int)
    
   = 
    2 * n = Seq.length w
end
module Lib_Watches_WatchesInvariantInternal2_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  predicate watches_invariant_internal2 (w : Seq.seq (Type.creusotcontracts_std1_vec_vec (Type.lib_watches_watcher))) (n : int) (f : Type.lib_formula_formula)
    
end
module Lib_Watches_WatchesInvariantInternal2
  use seq.Seq
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone Lib_Clause_Impl1_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_watches_watcher
  predicate watches_invariant_internal2 (w : Seq.seq (Type.creusotcontracts_std1_vec_vec (Type.lib_watches_watcher))) (n : int) (f : Type.lib_formula_formula)
    
   = 
    2 * n = Seq.length w && (forall i : (int) . 0 <= i && i < Seq.length w -> (forall j : (int) . 0 <= j && j < Seq.length (Model0.model (Seq.get w i)) -> UInt64.to_int (Type.lib_watches_watcher_Watcher_cref (Seq.get (Model0.model (Seq.get w i)) j)) < Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses f)) && Seq.length (Model2.model (Seq.get (Model1.model (Type.lib_formula_formula_Formula_clauses f)) (UInt64.to_int (Type.lib_watches_watcher_Watcher_cref (Seq.get (Model0.model (Seq.get w i)) j))))) > 1))
end
module Lib_Watches_Impl0_Invariant_Interface
  use Type
  predicate invariant' (self : Type.lib_watches_watches) (f : Type.lib_formula_formula)
end
module Lib_Watches_Impl0_Invariant
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.lib_watches_watcher
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_watches_watcher)
  predicate invariant' (self : Type.lib_watches_watches) (f : Type.lib_formula_formula) = 
    2 * UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) = Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches self)) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches self)) -> (forall j : (int) . 0 <= j && j < Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_watches_watches_Watches_watches self)) i)) -> UInt64.to_int (Type.lib_watches_watcher_Watcher_cref (Seq.get (Model1.model (Seq.get (Model0.model (Type.lib_watches_watches_Watches_watches self)) i)) j)) < Seq.length (Model2.model (Type.lib_formula_formula_Formula_clauses f))))
end
module Lib_Watches_Impl1_New_Interface
  use prelude.Prelude
  use Type
  clone Lib_Watches_Impl0_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (f : Type.lib_formula_formula) : Type.lib_watches_watches
    ensures { Invariant0.invariant' result f }
    
end
module Lib_Watches_Impl1_New
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_watches_watcher
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_watches_watcher)
  clone Lib_Watches_Impl0_Invariant as Invariant0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model, function Model2.model = Model2.model
  val new [@cfg:stackify] (f : Type.lib_formula_formula) : Type.lib_watches_watches
    ensures { Invariant0.invariant' result f }
    
end
module Lib_Watches_Impl1_AddWatcher_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.lib_clause_clause
  clone Lib_Watches_Impl0_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_watches_watcher)
  clone Lib_Lit_Impl0_ToNegWatchidxLogic_Interface as ToNegWatchidxLogic0
  val add_watcher [@cfg:stackify] (self : borrowed (Type.lib_watches_watches)) (lit : Type.lib_lit_lit) (cref : usize) (_f : Type.lib_formula_formula) : ()
    requires {ToNegWatchidxLogic0.to_neg_watchidx_logic lit < Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches ( * self)))}
    requires {UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * self) _f}
    requires {UInt64.to_int cref < Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses _f))}
    ensures { Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches ( * self))) = Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches ( ^ self))) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module Lib_Watches_Impl1_AddWatcher
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_watches_watcher
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_watches_watcher)
  clone Lib_Watches_Impl0_Invariant as Invariant0 with function Model0.model = Model0.model,
  function Model1.model = Model2.model, function Model2.model = Model1.model
  clone Lib_Lit_Impl0_ToNegWatchidxLogic as ToNegWatchidxLogic0
  val add_watcher [@cfg:stackify] (self : borrowed (Type.lib_watches_watches)) (lit : Type.lib_lit_lit) (cref : usize) (_f : Type.lib_formula_formula) : ()
    requires {ToNegWatchidxLogic0.to_neg_watchidx_logic lit < Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches ( * self)))}
    requires {UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * self) _f}
    requires {UInt64.to_int cref < Seq.length (Model1.model (Type.lib_formula_formula_Formula_clauses _f))}
    ensures { Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches ( * self))) = Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches ( ^ self))) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module Lib_Watches_Impl1_UpdateWatch_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.lib_watches_watcher
  clone Lib_Watches_Impl0_Invariant_Interface as Invariant0
  clone Lib_Lit_Impl0_ToWatchidxLogic_Interface as ToWatchidxLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_watches_watcher)
  clone Lib_Lit_Impl0_ToNegWatchidxLogic_Interface as ToNegWatchidxLogic0
  val update_watch [@cfg:stackify] (self : borrowed (Type.lib_watches_watches)) (old_lit : Type.lib_lit_lit) (new_lit : Type.lib_lit_lit) (cref : usize) (_f : Type.lib_formula_formula) : ()
    requires {ToNegWatchidxLogic0.to_neg_watchidx_logic new_lit < Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches ( * self)))}
    requires {ToWatchidxLogic0.to_watchidx_logic old_lit < Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches ( * self)))}
    requires {UInt64.to_int (Type.lib_lit_lit_Lit_idx new_lit) < div 18446744073709551615 2}
    requires {UInt64.to_int (Type.lib_lit_lit_Lit_idx old_lit) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * self) _f}
    requires {exists j : (int) . 0 <= j && j < Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_watches_watches_Watches_watches ( * self))) (ToWatchidxLogic0.to_watchidx_logic old_lit))) && UInt64.to_int (Type.lib_watches_watcher_Watcher_cref (Seq.get (Model1.model (Seq.get (Model0.model (Type.lib_watches_watches_Watches_watches ( * self))) (ToWatchidxLogic0.to_watchidx_logic old_lit))) j)) = UInt64.to_int cref}
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module Lib_Watches_Impl1_UpdateWatch
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_watches_watcher
  clone Lib_Lit_Impl0_ToWatchidxLogic as ToWatchidxLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_watches_watcher)
  clone Lib_Watches_Impl0_Invariant as Invariant0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model, function Model2.model = Model2.model
  clone Lib_Lit_Impl0_ToNegWatchidxLogic as ToNegWatchidxLogic0
  val update_watch [@cfg:stackify] (self : borrowed (Type.lib_watches_watches)) (old_lit : Type.lib_lit_lit) (new_lit : Type.lib_lit_lit) (cref : usize) (_f : Type.lib_formula_formula) : ()
    requires {ToNegWatchidxLogic0.to_neg_watchidx_logic new_lit < Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches ( * self)))}
    requires {ToWatchidxLogic0.to_watchidx_logic old_lit < Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches ( * self)))}
    requires {UInt64.to_int (Type.lib_lit_lit_Lit_idx new_lit) < div 18446744073709551615 2}
    requires {UInt64.to_int (Type.lib_lit_lit_Lit_idx old_lit) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * self) _f}
    requires {exists j : (int) . 0 <= j && j < Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_watches_watches_Watches_watches ( * self))) (ToWatchidxLogic0.to_watchidx_logic old_lit))) && UInt64.to_int (Type.lib_watches_watcher_Watcher_cref (Seq.get (Model1.model (Seq.get (Model0.model (Type.lib_watches_watches_Watches_watches ( * self))) (ToWatchidxLogic0.to_watchidx_logic old_lit))) j)) = UInt64.to_int cref}
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module Lib_Watches_Impl1_MoveToEnd_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone Lib_Watches_Impl0_Invariant_Interface as Invariant0
  clone Lib_Lit_Impl0_ToNegWatchidxLogic_Interface as ToNegWatchidxLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.lib_watches_watcher
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_watches_watcher)
  val move_to_end [@cfg:stackify] (self : borrowed (Type.lib_watches_watches)) (old_idx : usize) (old_pos : usize) (new_lit : Type.lib_lit_lit) (_f : Type.lib_formula_formula) : ()
    requires {UInt64.to_int old_pos < Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_watches_watches_Watches_watches ( * self))) (UInt64.to_int old_idx)))}
    requires {UInt64.to_int old_idx < Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches ( * self)))}
    requires {ToNegWatchidxLogic0.to_neg_watchidx_logic new_lit < Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches ( * self)))}
    requires {UInt64.to_int (Type.lib_lit_lit_Lit_idx new_lit) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * self) _f}
    ensures { Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_watches_watches_Watches_watches ( ^ self))) (UInt64.to_int old_idx))) = Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_watches_watches_Watches_watches ( * self))) (UInt64.to_int old_idx))) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module Lib_Watches_Impl1_MoveToEnd
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_clause_clause
  clone Lib_Lit_Impl0_ToNegWatchidxLogic as ToNegWatchidxLogic0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.lib_watches_watcher
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_watches_watcher)
  clone Lib_Watches_Impl0_Invariant as Invariant0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model, function Model2.model = Model2.model
  val move_to_end [@cfg:stackify] (self : borrowed (Type.lib_watches_watches)) (old_idx : usize) (old_pos : usize) (new_lit : Type.lib_lit_lit) (_f : Type.lib_formula_formula) : ()
    requires {UInt64.to_int old_pos < Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_watches_watches_Watches_watches ( * self))) (UInt64.to_int old_idx)))}
    requires {UInt64.to_int old_idx < Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches ( * self)))}
    requires {ToNegWatchidxLogic0.to_neg_watchidx_logic new_lit < Seq.length (Model0.model (Type.lib_watches_watches_Watches_watches ( * self)))}
    requires {UInt64.to_int (Type.lib_lit_lit_Lit_idx new_lit) < div 18446744073709551615 2}
    requires {Invariant0.invariant' ( * self) _f}
    ensures { Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_watches_watches_Watches_watches ( ^ self))) (UInt64.to_int old_idx))) = Seq.length (Model1.model (Seq.get (Model0.model (Type.lib_watches_watches_Watches_watches ( * self))) (UInt64.to_int old_idx))) }
    ensures { Invariant0.invariant' ( ^ self) _f }
    
end
module Lib_Watches_Impl1_InitWatches_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone Lib_Watches_Impl0_Invariant_Interface as Invariant1
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant0
  val init_watches [@cfg:stackify] (self : borrowed (Type.lib_watches_watches)) (f : Type.lib_formula_formula) : ()
    requires {Invariant0.invariant' f}
    requires {Invariant1.invariant' ( * self) f}
    requires {UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    ensures { Invariant1.invariant' ( ^ self) f }
    
end
module Lib_Watches_Impl1_InitWatches
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int32
  use Type
  clone Lib_Lit_Impl1_Invariant as Invariant3
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model3 with function Model0.model = Model4.model
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model3.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model3.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_Invariant as Invariant2 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.lib_watches_watcher
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_watches_watcher)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Watches_Impl0_Invariant as Invariant1 with function Model0.model = Model1.model,
  function Model1.model = Model2.model, function Model2.model = Model0.model
  clone Lib_Formula_Impl1_Invariant as Invariant0 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant2.invariant'
  val init_watches [@cfg:stackify] (self : borrowed (Type.lib_watches_watches)) (f : Type.lib_formula_formula) : ()
    requires {Invariant0.invariant' f}
    requires {Invariant1.invariant' ( * self) f}
    requires {UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f) < div 18446744073709551615 2}
    ensures { Invariant1.invariant' ( ^ self) f }
    
end
module Lib_ConflictAnalysis_AnalyzeConflict_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  clone Lib_Clause_NoDuplicateIndexesInner_Interface as NoDuplicateIndexesInner0
  clone Lib_Clause_VarsInRangeInner_Interface as VarsInRangeInner0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model3 with type t = Type.lib_lit_lit
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Lib_Formula_Impl1_Unsat_Interface as Unsat0
  clone Lib_Formula_Impl1_Invariant_Interface as Invariant2
  clone Lib_Assignments_Impl1_Invariant_Interface as Invariant1
  clone Lib_Trail_Impl1_Invariant_Interface as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.lib_clause_clause
  val analyze_conflict [@cfg:stackify] (f : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) (trail : Type.lib_trail_trail) (cref : usize) : Type.lib_conflictanalysis_conflict
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail trail)) > 0}
    requires {Invariant0.invariant' trail f}
    requires {Invariant1.invariant' a f}
    requires {Invariant2.invariant' f}
    ensures { match (result) with
      | Type.Lib_ConflictAnalysis_Conflict_Ground -> Unsat0.unsat f a
      | Type.Lib_ConflictAnalysis_Conflict_Unit lit -> true
      | Type.Lib_ConflictAnalysis_Conflict_Learned level lit clause -> UInt64.to_int level > 0 && UInt64.to_int level <= Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail trail)) && UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) < Seq.length (Model2.model a) && Seq.length (Model3.model clause) > 1 && VarsInRangeInner0.vars_in_range_inner (Model3.model clause) (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f)) && NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model3.model clause) && true
      end }
    
end
module Lib_ConflictAnalysis_AnalyzeConflict
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  use prelude.UInt8
  clone Lib_Lit_Impl1_UnsatInner as UnsatInner2
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = uint8
  clone Lib_Assignments_Impl0_Model as Model4 with function Model0.model = Model6.model
  clone Lib_Assignments_Impl1_Invariant as Invariant1 with function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = (usize, Type.lib_trail_reason)
  clone Lib_Trail_Impl1_VardataInvariant as VardataInvariant0 with function Model0.model = Model5.model
  clone Lib_Clause_NoDuplicateIndexesInner as NoDuplicateIndexesInner0
  clone Lib_Lit_Impl1_Invariant as Invariant4
  clone Lib_Clause_VarsInRangeInner as VarsInRangeInner0 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.lib_lit_lit
  clone Lib_Clause_Impl1_Model as Model7 with function Model0.model = Model3.model
  clone Lib_Clause_Impl2_UnsatInner as UnsatInner1 with function Model0.model = Model7.model,
  predicate UnsatInner0.unsat_inner = UnsatInner2.unsat_inner
  clone Lib_Clause_Impl2_NoDuplicateIndexes as NoDuplicateIndexes0 with function Model0.model = Model7.model,
  predicate NoDuplicateIndexesInner0.no_duplicate_indexes_inner = NoDuplicateIndexesInner0.no_duplicate_indexes_inner
  clone Lib_Clause_Impl2_VarsInRange as VarsInRange0 with function Model0.model = Model7.model,
  predicate VarsInRangeInner0.vars_in_range_inner = VarsInRangeInner0.vars_in_range_inner
  clone Lib_Clause_Impl2_Invariant as Invariant3 with predicate VarsInRange0.vars_in_range = VarsInRange0.vars_in_range,
  predicate NoDuplicateIndexes0.no_duplicate_indexes = NoDuplicateIndexes0.no_duplicate_indexes
  clone Lib_Assignments_Impl0_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.lib_assignments_assignments,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec (Type.lib_lit_lit)
  clone Lib_Trail_Impl1_TrailInvariant as TrailInvariant0 with function Model0.model = Model1.model,
  function Model1.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.lib_clause_clause
  clone Lib_Formula_Impl1_UnsatInner as UnsatInner0 with function Model0.model = Model0.model,
  predicate UnsatInner0.unsat_inner = UnsatInner1.unsat_inner
  clone Lib_Formula_Impl1_Unsat as Unsat0 with function Model0.model = Model4.model,
  predicate UnsatInner0.unsat_inner = UnsatInner0.unsat_inner
  clone Lib_Trail_Impl1_CrefsInRange as CrefsInRange0 with function Model0.model = Model5.model,
  function Model1.model = Model0.model
  clone Lib_Trail_Impl1_Invariant as Invariant0 with predicate VardataInvariant0.vardata_invariant = VardataInvariant0.vardata_invariant,
  predicate TrailInvariant0.trail_invariant = TrailInvariant0.trail_invariant,
  predicate CrefsInRange0.crefs_in_range = CrefsInRange0.crefs_in_range
  clone Lib_Formula_Impl1_Invariant as Invariant2 with function Model0.model = Model0.model,
  predicate Invariant0.invariant' = Invariant3.invariant'
  val analyze_conflict [@cfg:stackify] (f : Type.lib_formula_formula) (a : Type.lib_assignments_assignments) (trail : Type.lib_trail_trail) (cref : usize) : Type.lib_conflictanalysis_conflict
    requires {UInt64.to_int cref < Seq.length (Model0.model (Type.lib_formula_formula_Formula_clauses f))}
    requires {Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail trail)) > 0}
    requires {Invariant0.invariant' trail f}
    requires {Invariant1.invariant' a f}
    requires {Invariant2.invariant' f}
    ensures { match (result) with
      | Type.Lib_ConflictAnalysis_Conflict_Ground -> Unsat0.unsat f a
      | Type.Lib_ConflictAnalysis_Conflict_Unit lit -> true
      | Type.Lib_ConflictAnalysis_Conflict_Learned level lit clause -> UInt64.to_int level > 0 && UInt64.to_int level <= Seq.length (Model1.model (Type.lib_trail_trail_Trail_trail trail)) && UInt64.to_int (Type.lib_lit_lit_Lit_idx lit) < Seq.length (Model2.model a) && Seq.length (Model3.model clause) > 1 && VarsInRangeInner0.vars_in_range_inner (Model3.model clause) (UInt64.to_int (Type.lib_formula_formula_Formula_num_vars f)) && NoDuplicateIndexesInner0.no_duplicate_indexes_inner (Model3.model clause) && true
      end }
    
end
module Lib_Lit_Impl5
  
end
module Lib_Trail_Impl3
  
end
