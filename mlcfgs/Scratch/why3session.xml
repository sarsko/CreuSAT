<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.8.12" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.8" timelimit="10" steplimit="0" memlimit="2000"/>
<prover id="2" name="Alt-Ergo" version="2.4.1" timelimit="30" steplimit="0" memlimit="4000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="Scratch.mlcfg"/>
<theory name="Scratch_Clause_Impl3_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="11276"/></proof>
 </goal>
</theory>
<theory name="Scratch_Formula_Impl1_Invariant_Impl" proved="true">
 <goal name="invariant&#39;&#39;vc" expl="VC for invariant&#39;" proved="true">
 <proof prover="0"><result status="timeout" time="1.00" steps="704163"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="invariant&#39;&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00" steps="693900"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="invariant&#39;&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="timeout" time="1.00" steps="698355"/></proof>
   <proof prover="1"><result status="timeout" time="10.00" steps="1029313"/></proof>
   <transf name="inline_goal" proved="true" >
    <goal name="invariant&#39;&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="invariant&#39;&#39;vc.0.0.0.0" expl="VC for invariant&#39;" proved="true">
     <proof prover="0"><result status="timeout" time="1.00" steps="616042"/></proof>
     <transf name="split_vc" proved="true" >
      <goal name="invariant&#39;&#39;vc.0.0.0.0.0" expl="VC for invariant&#39;" proved="true">
      <proof prover="0"><result status="timeout" time="1.00" steps="609335"/></proof>
      <proof prover="1"><result status="timeout" time="10.00" steps="827384"/></proof>
      <transf name="inline_goal" proved="true" >
       <goal name="invariant&#39;&#39;vc.0.0.0.0.0.0" expl="VC for invariant&#39;" proved="true">
       <proof prover="2"><result status="valid" time="0.02" steps="43"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="invariant&#39;&#39;vc.0.0.0.1" expl="VC for invariant&#39;" proved="true">
     <proof prover="0"><result status="timeout" time="1.00" steps="649957"/></proof>
     <transf name="split_vc" proved="true" >
      <goal name="invariant&#39;&#39;vc.0.0.0.1.0" expl="VC for invariant&#39;" proved="true">
      <proof prover="0"><result status="timeout" time="1.00" steps="641622"/></proof>
      <proof prover="1"><result status="timeout" time="10.00" steps="1445542"/></proof>
      <transf name="inline_goal" proved="true" >
       <goal name="invariant&#39;&#39;vc.0.0.0.1.0.0" expl="VC for invariant&#39;" proved="true">
       <proof prover="2"><result status="valid" time="0.01" steps="38"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="invariant&#39;&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.05" steps="58041"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Scratch_Lit_Impl4_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="1971"/></proof>
 </goal>
</theory>
<theory name="Scratch_Scratch_LemmaClausePermutedMaintainsSat_Impl" proved="true">
 <goal name="lemma_clause_permuted_maintains_sat&#39;vc" expl="VC for lemma_clause_permuted_maintains_sat" proved="true">
 <proof prover="0"><result status="valid" time="0.05" steps="71846"/></proof>
 </goal>
</theory>
<theory name="Scratch_Scratch_LemmaClausePermutedMaintainsUnsat_Impl" proved="true">
 <goal name="lemma_clause_permuted_maintains_unsat&#39;vc" expl="VC for lemma_clause_permuted_maintains_unsat" proved="true">
 <proof prover="0"><result status="valid" time="0.05" steps="71740"/></proof>
 </goal>
</theory>
<theory name="Scratch_Scratch_Swap" proved="true">
 <goal name="swap&#39;vc" expl="VC for swap" proved="true">
 <proof prover="0"><result status="valid" time="0.34" steps="1321555"/></proof>
 </goal>
</theory>
<theory name="Scratch_Logic_BoolToAssignedstate_Impl" proved="true">
 <goal name="bool_to_assignedstate&#39;vc" expl="VC for bool_to_assignedstate" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="1755"/></proof>
 </goal>
</theory>
<theory name="Scratch_Clause_Impl3" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="182"/></proof>
 </goal>
</theory>
<theory name="Scratch_Lit_Impl4" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="94"/></proof>
 </goal>
</theory>
</file>
</why3session>
