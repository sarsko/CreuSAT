use seq.Seq
use seq.Mem
use int.Int

type assignment = seq bool

type lit = { var : int ; value : bool }

type clause = seq lit

type formula = { clauses : seq clause; num_vars : int }

let interp_clause (a : assignment) (c : clause) =
  for i = 0 to c.length - 1 do
    if (eqb a[c[i].var] c[i].value) then
      return true

  done;
  return false

let interp_formula (a : assignment) (f : formula) =
  for i = 0 to f.clauses.length - 1 do
    if not (interp_clause a f.clauses[i]) then
      return false
  done;
  true


let set_true (p : pasn) : pasn =
  { assign = set p.assign p.ix true ; ix = p.ix + 1 }

let set_false (p : pasn) : pasn =
  { assign = set p.assign p.ix false ; ix = p.ix + 1}

let rec inner (f : formula) (pa : pasn) =
  if complete pa then
    interp_formula pa.assign f
  else
    (* try assigning i to true *)
    if inner f (set_true pa) then
      return true
    else
    (* otherwise try false *)
      inner f (set_false pa)

let solver (f : formula) =
  let base = { assign = Seq.create f.num_vars (fun _ -> false) ; ix = 0 } in
  inner f base
