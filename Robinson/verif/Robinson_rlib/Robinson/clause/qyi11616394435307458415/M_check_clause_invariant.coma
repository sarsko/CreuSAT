(* #"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 192 4 192 59 *)

(* clause::Clause *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span sclause = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 193 27 193 28
let%span sclause'0 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 196 20 196 32
let%span sclause'1 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 195 20 195 76
let%span sclause'2 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 199 43 199 44
let%span sclause'3 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 201 17 201 18
let%span sclause'4 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 190 15 190 46
let%span sclause'5 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 191 14 191 31
let%span sclause'6 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 234 14 234 36
let%span sclause'7 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 92 12 93 31
let%span sclause'8 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 109 8 109 29
let%span sclause'9 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 19 4 19 12
let%span slit = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 39 20 39 33
let%span slit'0 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 131 14 131 36
let%span slit'1 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 132 14 132 40
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37

use creusot.int.UInt64
use mach.int.Int
use seq.Seq
use creusot.prelude.Opaque
use creusot.prelude.Any

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

predicate inv [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 38 4 38 36] (self : t_Lit) (n : int) =
  [%#slit] UInt64.t'int self.t_Lit__idx < n

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Clause  =
  { t_Clause__rest: t_Vec }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Lit

axiom view_spec : forall self : t_Vec . [%#svec'1] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 21 4 21 33] (self : t_Clause) : Seq.seq t_Lit =
  [%#sclause'9] view self.t_Clause__rest

function view'1 (self : t_Clause) : Seq.seq t_Lit =
  [%#smodel] view'0 self

let rec len (self:t_Clause) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#sclause'6] UInt64.t'int result = Seq.length (view'1 self)} (! return' {result}) ]


predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Lit) =
  [%#sslice] UInt64.t'int self < Seq.length seq

function view'2 (self : t_Vec) : Seq.seq t_Lit =
  [%#smodel] view self

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Lit) (out : t_Lit) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:t_Lit))= {[@expl:index requires] [%#svec] in_bounds ix (view'2 self_)}
  any [ return''0 (result:t_Lit)-> {[%#svec'0] has_value ix (view'2 self_) result} (! return' {result}) ] 

let rec check_lit_invariant (self:t_Lit) (n:UInt64.t) (return'  (x:bool))= any
  [ return''0 (result:bool)-> {[%#slit'0] result = inv self (UInt64.t'int n)}
    {[%#slit'1] result = (UInt64.t'int self.t_Lit__idx < UInt64.t'int n)}
    (! return' {result}) ]


predicate vars_in_range [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 90 4 90 46] (self : t_Clause) (n : int) =
  [%#sclause'7] forall i : int . 0 <= i /\ i < Seq.length (view'0 self)  -> inv (Seq.get (view'0 self) i) n

constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)

predicate inv'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 108 4 108 36] (self : t_Clause) (n : int) =
  [%#sclause'8] vars_in_range self n

meta "compute_max_steps" 1000000

let rec check_clause_invariant[#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 192 4 192 59] (self:t_Clause) (n:UInt64.t) (return'  (x:UInt64.t))= {[@expl:check_clause_invariant requires] [%#sclause'4] vars_in_range self (UInt64.t'int v_MAX'0)}
  (! bb0
  [ bb0 = s0 [ s0 =  [ &i <- [%#sclause] (0 : UInt64.t) ] s1 | s1 =  [ &new_n <- n'0 ] s2 | s2 = bb1 ] 
  | bb1 = bb1'0
    [ bb1'0 = {[@expl:loop invariant #0] [%#sclause'1] forall j : int . 0 <= j /\ j < UInt64.t'int i
       -> inv (Seq.get (view'1 self'0) j) (UInt64.t'int new_n)}
      {[@expl:loop invariant #1] [%#sclause'0] UInt64.t'int new_n >= UInt64.t'int n'0}
      (! s0) [ s0 = bb2 ] 
      [ bb2 = s0 [ s0 = len {self'0} (fun (_ret:UInt64.t) ->  [ &_14 <- _ret ] s1) | s1 = bb3 ] 
      | bb3 = s0
        [ s0 =  [ &_12 <- UInt64.lt i _14 ] s1 | s1 = any [ br0 -> {_12 = false} (! bb11) | br1 -> {_12} (! bb4) ]  ]
      
      | bb4 = s0 [ s0 = index {self'0.t_Clause__rest} {i} (fun (_ret:t_Lit) ->  [ &_19 <- _ret ] s1) | s1 = bb5 ] 
      | bb5 = s0 [ s0 = check_lit_invariant {_19} {new_n} (fun (_ret:bool) ->  [ &_17 <- _ret ] s1) | s1 = bb6 ] 
      | bb6 = any [ br0 -> {_17 = false} (! bb8) | br1 -> {_17} (! bb7) ] 
      | bb7 = bb10
      | bb8 = s0 [ s0 = index {self'0.t_Clause__rest} {i} (fun (_ret:t_Lit) ->  [ &_24 <- _ret ] s1) | s1 = bb9 ] 
      | bb9 = s0
        [ s0 = UInt64.add {_24.t_Lit__idx} {[%#sclause'2] (1 : UInt64.t)}
            (fun (_ret:UInt64.t) ->  [ &new_n <- _ret ] s1)
        | s1 = bb10 ]
      
      | bb10 = s0
        [ s0 = UInt64.add {i} {[%#sclause'3] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s1) | s1 = bb1'0 ]
       ]
     ]
  
  | bb11 = s0 [ s0 =  [ &_0 <- new_n ] s1 | s1 = return''0 {_0} ]  ]
  )
  [ & _0 : UInt64.t = Any.any_l ()
  | & self'0 : t_Clause = self
  | & n'0 : UInt64.t = n
  | & i : UInt64.t = Any.any_l ()
  | & new_n : UInt64.t = Any.any_l ()
  | & _12 : bool = Any.any_l ()
  | & _14 : UInt64.t = Any.any_l ()
  | & _17 : bool = Any.any_l ()
  | & _19 : t_Lit = Any.any_l ()
  | & _24 : t_Lit = Any.any_l () ]
  
  [ return''0 (result:UInt64.t)-> {[@expl:check_clause_invariant ensures] [%#sclause'5] inv'0 self (UInt64.t'int result)}
    (! return' {result}) ]
  
