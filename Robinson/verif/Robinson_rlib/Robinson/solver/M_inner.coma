(* #"/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 17 0 17 64 *)

let%span sassignments = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 235 15 235 22
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 236 4 236 36
let%span sassignments'1 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 237 14 237 82
let%span sassignments'2 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 238 14 238 39
let%span sassignments'3 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 239 14 239 54
let%span sassignments'4 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 240 14 240 51
let%span sassignments'5 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 241 14 241 52
let%span sassignments'6 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 111 4 111 37
let%span sassignments'7 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 112 15 112 31
let%span sassignments'8 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 113 15 113 33
let%span sassignments'9 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 114 14 114 60
let%span sassignments'10 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 115 14 115 31
let%span sassignments'11 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 94 14 94 81
let%span sassignments'12 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 95 14 95 42
let%span sassignments'13 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 96 14 96 34
let%span sassignments'14 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 59 12 59 64
let%span sassignments'15 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 66 20 66 48
let%span sassignments'16 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 73 12 73 73
let%span sassignments'17 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 17 4 17 12
let%span sassignments'18 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 28 8 29 43
let%span sassignments'19 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 44 4 44 49
let%span sassignments'20 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 37 8 37 61
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 158 27 158 46
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 159 26 159 54
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 160 26 160 57
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 161 26 161 62
let%span svec'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 162 26 162 55
let%span svec'4 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span sformula = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 41 12 42 54
let%span sformula'0 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 85 20 85 49
let%span sformula'1 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 79 20 79 58
let%span sformula'2 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 115 20 115 40
let%span sformula'3 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 100 20 100 38
let%span sformula'4 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 50 12 50 118
let%span sformula'5 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 72 12 72 128
let%span sformula'6 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 107 12 108 47
let%span sformula'7 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 92 12 93 45
let%span slogic = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 48 8 52 9
let%span sclause = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 109 8 109 29
let%span sclause'0 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 92 12 93 31
let%span sclause'1 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 56 12 57 39
let%span sclause'2 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 71 12 72 37
let%span sclause'3 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 19 4 19 12
let%span slit = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 39 20 39 33
let%span slit'0 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 57 12 60 13
let%span slit'1 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 46 12 49 13
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span smodel'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span sslice'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 137 20 137 94
let%span sdecision = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 16 12 18 38
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34
let%span ssolver = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 26 16 26 17
let%span ssolver'0 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 29 15 29 19
let%span ssolver'1 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 31 23 31 24
let%span ssolver'2 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 12 11 12 18
let%span ssolver'3 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 13 11 13 20
let%span ssolver'4 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 14 11 14 29
let%span ssolver'5 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 15 10 15 48
let%span ssolver'6 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 16 10 16 59

use creusot.prelude.MutBorrow
use creusot.prelude.Opaque
use creusot.int.UInt64
use mach.int.Int
use seq.Seq
use creusot.int.UInt8
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec; t_Assignments__1: UInt64.t }

type t_Option  =
  | C_None
  | C_Some bool

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec'0; t_Formula__num_vars: UInt64.t }

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

type t_Clause  =
  { t_Clause__rest: t_Vec'1 }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec'0) : Seq.seq t_Clause

axiom view_spec : forall self : t_Vec'0 . [%#svec'4] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function view'0 (self : t_Vec'1) : Seq.seq t_Lit

axiom view_spec'0 : forall self : t_Vec'1 . [%#svec'4] Seq.length (view'0 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 21 4 21 33] (self : t_Clause) : Seq.seq t_Lit =
  [%#sclause'3] view'0 self.t_Clause__rest

predicate inv [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 38 4 38 36] (self : t_Lit) (n : int) =
  [%#slit] UInt64.t'int self.t_Lit__idx < n

predicate vars_in_range [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 90 4 90 46] (self : t_Clause) (n : int) =
  [%#sclause'0] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)  -> inv (Seq.get (view'1 self) i) n

predicate inv'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 108 4 108 36] (self : t_Clause) (n : int) =
  [%#sclause] vars_in_range self n

predicate inv'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 39 4 39 28] (self : t_Formula) =
  [%#sformula] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> inv'0 (Seq.get (view self.t_Formula__clauses) i) (UInt64.t'int self.t_Formula__num_vars)

function view'2 (self : t_Vec) : Seq.seq UInt8.t

axiom view_spec'1 : forall self : t_Vec . [%#svec'4] Seq.length (view'2 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'3 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#sassignments'17] view'2 self.t_Assignments__0

predicate inv'2 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 57 4 57 40] (self : t_Assignments) (f : t_Formula)

 =
  [%#sassignments'14] UInt64.t'int f.t_Formula__num_vars = Seq.length (view'3 self)
  /\ UInt64.t'int self.t_Assignments__1 <= UInt64.t'int f.t_Formula__num_vars

predicate unset [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 46 0 46 38] (v : UInt8.t) =
  [%#slogic] if UInt8.t'int v >= 2 then true else false

predicate compatible_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 26 0 26 78] (a : Seq.seq UInt8.t) (a2 : Seq.seq UInt8.t)

 =
  [%#sassignments'18] Seq.length a = Seq.length a2
  /\ (forall i : int . 0 <= i /\ i < Seq.length a  -> unset (Seq.get a i) \/ Seq.get a i = Seq.get a2 i)

predicate complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 35 0 35 52] (a : Seq.seq UInt8.t) =
  [%#sassignments'20] forall i : int . 0 <= i /\ i < Seq.length a  -> not unset (Seq.get a i)

predicate compatible_complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 43 0 43 87] (a : Seq.seq UInt8.t) (a2 : Seq.seq UInt8.t)

 =
  [%#sassignments'19] compatible_inner a a2 /\ complete_inner a2

predicate sat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 44 4 44 57] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'1] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0


predicate sat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 69 4 69 57] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'2] exists i : int . 0 <= i /\ i < Seq.length (view'1 self) /\ sat_inner (Seq.get (view'1 self) i) a

predicate sat_inner'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 90 4 90 57] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'7] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> sat_inner'0 (Seq.get (view self.t_Formula__clauses) i) a

predicate eventually_sat_complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 70 4 70 77] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'5] exists a2 : Seq.seq UInt8.t . Seq.length a2 = UInt64.t'int self.t_Formula__num_vars
  /\ compatible_complete_inner a a2 /\ sat_inner'1 self a2

predicate eventually_sat_complete [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 78 4 78 64] (self : t_Formula) (a : t_Assignments)

 =
  [%#sformula'1] eventually_sat_complete_inner self (view'3 a)

predicate compatible [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 65 4 65 52] (self : t_Assignments) (a2 : t_Assignments)

 =
  [%#sassignments'15] compatible_inner (view'3 self) (view'3 a2)

predicate unsat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 55 4 55 59] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'0] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1


predicate unsat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 54 4 54 59] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'1] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)  -> unsat_inner (Seq.get (view'1 self) i) a

predicate unsat_inner'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 105 4 105 59] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'6] exists i : int . 0 <= i
  /\ i < Seq.length (view self.t_Formula__clauses) /\ unsat_inner'0 (Seq.get (view self.t_Formula__clauses) i) a

predicate unsat [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 114 4 114 46] (self : t_Formula) (a : t_Assignments)
 =
  [%#sformula'2] unsat_inner'1 self (view'3 a)

predicate sat [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 99 4 99 44] (self : t_Formula) (a : t_Assignments) =
  [%#sformula'3] sat_inner'1 self (view'3 a)

predicate complete [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 71 4 71 33] (self : t_Assignments) =
  [%#sassignments'16] forall i : int . 0 <= i /\ i < Seq.length (view'3 self)  -> not unset (Seq.get (view'3 self) i)

let rec do_unit_propagation (self:MutBorrow.t t_Assignments) (f:t_Formula) (return'  (x:t_Option))= {[@expl:do_unit_propagation requires #0] [%#sassignments] inv'1 f}
  {[@expl:do_unit_propagation requires #1] [%#sassignments'0] inv'2 self.current f}
  any
  [ return''0 (result:t_Option)-> {[%#sassignments'0] inv'2 self.final f}
    {[%#sassignments'1] eventually_sat_complete f self.current = eventually_sat_complete f self.final}
    {[%#sassignments'2] compatible self.current self.final}
    {[%#sassignments'3] result = C_Some false  -> unsat f self.final}
    {[%#sassignments'4] result = C_Some true  -> sat f self.final}
    {[%#sassignments'5] result = C_None  -> not complete self.final}
    (! return' {result}) ]


type t_RawVec'2  =
  { t_RawVec__inner'2: t_RawVecInner; t_RawVec__qy95zmarker'2: () }

type t_Vec'2  =
  { t_Vec__buf'2: t_RawVec'2; t_Vec__len'2: UInt64.t }

type t_Decisions  =
  { t_Decisions__lit_order: t_Vec'2 }

function view'4 (self : t_Vec'2) : Seq.seq UInt64.t

axiom view_spec'2 : forall self : t_Vec'2 . [%#svec'4] Seq.length (view'4 self) <= UInt64.t'int (v_MAX : UInt64.t)

predicate inv'3 [#"/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 14 4 14 36] (self : t_Decisions) (n : int) =
  [%#sdecision] Seq.length (view'4 self.t_Decisions__lit_order) = n
  /\ (forall i : int . 0 <= i /\ i < Seq.length (view'4 self.t_Decisions__lit_order)
   -> UInt64.t'int (Seq.get (view'4 self.t_Decisions__lit_order) i) < n)

function view'5 (self : MutBorrow.t t_Assignments) : Seq.seq UInt8.t =
  [%#smodel] view'3 self.current

let rec find_unassigned (self:MutBorrow.t t_Assignments) (d:t_Decisions) (_f:t_Formula) (return'  (x:UInt64.t))= {[@expl:find_unassigned requires #0] [%#sassignments'6] inv'2 self.current _f}
  {[@expl:find_unassigned requires #1] [%#sassignments'7] not complete self.current}
  {[@expl:find_unassigned requires #2] [%#sassignments'8] inv'3 d (Seq.length (view'5 self))}
  any
  [ return''0 (result:UInt64.t)-> {[%#sassignments'6] inv'2 self.final _f}
    {[%#sassignments'9] UInt64.t'int result < Seq.length (view'5 self)
    /\ unset (Seq.get (view'5 self) (UInt64.t'int result))}
    {[%#sassignments'10] view'5 self = view'3 self.final}
    (! return' {result}) ]


function view'6 (self : t_Assignments) : Seq.seq UInt8.t =
  [%#smodel'0] view'3 self

let rec clone' (self:t_Assignments) (return'  (x:t_Assignments))= any
  [ return''0 (result:t_Assignments)-> {[%#sassignments'11] forall i : int . 0 <= i /\ i < Seq.length (view'6 self)
     -> Seq.get (view'6 self) i = Seq.get (view'3 result) i}
    {[%#sassignments'12] Seq.length (view'6 self) = Seq.length (view'3 result)}
    {[%#sassignments'13] UInt64.t'int result.t_Assignments__1 = UInt64.t'int self.t_Assignments__1}
    (! return' {result}) ]


predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt8.t) =
  [%#sslice] UInt64.t'int self < Seq.length seq

function view'7 (self : MutBorrow.t t_Vec) : Seq.seq UInt8.t =
  [%#smodel] view'2 self.current

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt8.t) (out : UInt8.t) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

predicate resolve_elswhere [@inline:trivial] (self : UInt64.t) (old' : Seq.seq UInt8.t) (fin : Seq.seq UInt8.t) =
  [%#sslice'1] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
   -> Seq.get old' i = Seq.get fin i

let rec index_mut (self_:MutBorrow.t t_Vec) (ix:UInt64.t) (return'  (x:MutBorrow.t UInt8.t))= {[@expl:index_mut requires] [%#svec] in_bounds ix (view'7 self_)}
  any
  [ return''0 (result:MutBorrow.t UInt8.t)-> {[%#svec'0] has_value ix (view'7 self_) result.current}
    {[%#svec'1] has_value ix (view'2 self_.final) result.final}
    {[%#svec'2] resolve_elswhere ix (view'7 self_) (view'2 self_.final)}
    {[%#svec'3] Seq.length (view'2 self_.final) = Seq.length (view'7 self_)}
    (! return' {result}) ]


predicate resolve (self : MutBorrow.t UInt8.t) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0 : MutBorrow.t UInt8.t) =
  resolve _0

let rec v_Some (input:t_Option) (ret  (field_0:bool))= any
  [ good (field_0:bool)-> {C_Some field_0 = input} (! ret {field_0})
  | bad -> {forall field_0 : bool [C_Some field_0 : t_Option] . C_Some field_0 <> input} (! {false} any) ]


predicate eventually_sat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 48 4 48 68] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'4] exists a2 : Seq.seq UInt8.t . Seq.length a2 = UInt64.t'int self.t_Formula__num_vars
  /\ compatible_inner a a2 /\ sat_inner'1 self a2

predicate eventually_sat [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 84 4 84 55] (self : t_Formula) (a : t_Assignments)

 =
  [%#sformula'0] eventually_sat_inner self (view'3 a)

meta "compute_max_steps" 1000000

let rec inner[#"/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 17 0 17 64] (f:t_Formula) (a:t_Assignments) (d:t_Decisions) (return'  (x:bool))= {[@expl:inner requires #0] [%#ssolver'2] inv'1 f}
  {[@expl:inner requires #1] [%#ssolver'3] inv'2 a f}
  {[@expl:inner requires #2] [%#ssolver'4] inv'3 d (UInt64.t'int f.t_Formula__num_vars)}
  (! bb0
  [ bb0 = bb1
  | bb1 = bb2
  | bb2 = bb3
  | bb3 = s0
    [ s0 = MutBorrow.borrow_mut <t_Assignments> {a'0}
        (fun (_ret:MutBorrow.t t_Assignments) ->  [ &_12 <- _ret ]  [ &a'0 <- _ret.final ] s1)
    | s1 = do_unit_propagation {_12} {f'0} (fun (_ret:t_Option) ->  [ &_11 <- _ret ] s2)
    | s2 = bb4 ]
  
  | bb4 = any [ br0 -> {_11 = C_None} (! bb5) | br1 (x0:bool)-> {_11 = C_Some x0} (! bb6) ] 
  | bb5 = s0
    [ s0 = MutBorrow.borrow_mut <t_Assignments> {a'0}
        (fun (_ret:MutBorrow.t t_Assignments) ->  [ &_18 <- _ret ]  [ &a'0 <- _ret.final ] s1)
    | s1 = find_unassigned {_18} {d'0} {f'0} (fun (_ret:UInt64.t) ->  [ &next <- _ret ] s2)
    | s2 = bb8 ]
  
  | bb8 = s0 [ s0 = clone' {a'0} (fun (_ret:t_Assignments) ->  [ &a_cloned <- _ret ] s1) | s1 = bb9 ] 
  | bb9 = s0
    [ s0 = MutBorrow.borrow_mut <t_Vec> {a'0.t_Assignments__0}
        (fun (_ret:MutBorrow.t t_Vec) ->  [ &_24 <- _ret ]  [ &a'0 <- { a'0 with t_Assignments__0 = _ret.final } ] s1)
    | s1 = index_mut {_24} {next} (fun (_ret:MutBorrow.t UInt8.t) ->  [ &_23 <- _ret ] s2)
    | s2 = bb10 ]
  
  | bb10 = s0
    [ s0 =  [ &_23 <- { _23 with current = ([%#ssolver] (1 : UInt8.t)) } ] s1
    | s1 = -{resolve'0 _23}- s2
    | s2 =  [ &old_a1 <- a'0.t_Assignments__1 ] s3
    | s3 = inner {f'0} {a'0} {d'0} (fun (_ret:bool) ->  [ &_28 <- _ret ] s4)
    | s4 = bb11 ]
  
  | bb11 = any [ br0 -> {_28 = false} (! bb13) | br1 -> {_28} (! bb12) ] 
  | bb12 = s0 [ s0 =  [ &_0 <- [%#ssolver'0] true ] s1 | s1 = bb17 ] 
  | bb13 = bb14
  | bb14 = s0
    [ s0 = MutBorrow.borrow_mut <t_Vec> {a_cloned.t_Assignments__0}
        (fun (_ret:MutBorrow.t t_Vec) ->
           [ &_34 <- _ret ] 
           [ &a_cloned <- { a_cloned with t_Assignments__0 = _ret.final } ] 
          s1)
    | s1 = index_mut {_34} {next} (fun (_ret:MutBorrow.t UInt8.t) ->  [ &_33 <- _ret ] s2)
    | s2 = bb15 ]
  
  | bb15 = s0
    [ s0 =  [ &_33 <- { _33 with current = ([%#ssolver'1] (0 : UInt8.t)) } ] s1
    | s1 = -{resolve'0 _33}- s2
    | s2 =  [ &a_cloned <- { a_cloned with t_Assignments__1 = old_a1 } ] s3
    | s3 = inner {f'0} {a_cloned} {d'0} (fun (_ret:bool) ->  [ &_0 <- _ret ] s4)
    | s4 = bb16 ]
  
  | bb16 = bb17
  | bb17 = bb18
  | bb18 = bb19
  | bb6 = bb7
  | bb7 = s0 [ s0 = v_Some {_11} (fun (r0:bool) ->  [ &n <- r0 ] s1) | s1 =  [ &_0 <- n ] s2 | s2 = bb19 ] 
  | bb19 = bb20
  | bb20 = return''0 {_0} ]
  )
  [ & _0 : bool = Any.any_l ()
  | & f'0 : t_Formula = f
  | & a'0 : t_Assignments = a
  | & d'0 : t_Decisions = d
  | & _11 : t_Option = Any.any_l ()
  | & _12 : MutBorrow.t t_Assignments = Any.any_l ()
  | & n : bool = Any.any_l ()
  | & next : UInt64.t = Any.any_l ()
  | & _18 : MutBorrow.t t_Assignments = Any.any_l ()
  | & a_cloned : t_Assignments = Any.any_l ()
  | & _23 : MutBorrow.t UInt8.t = Any.any_l ()
  | & _24 : MutBorrow.t t_Vec = Any.any_l ()
  | & old_a1 : UInt64.t = Any.any_l ()
  | & _28 : bool = Any.any_l ()
  | & _33 : MutBorrow.t UInt8.t = Any.any_l ()
  | & _34 : MutBorrow.t t_Vec = Any.any_l () ]
  
  [ return''0 (result:bool)-> {[@expl:inner ensures #0] [%#ssolver'5] result = true  -> eventually_sat f a}
    {[@expl:inner ensures #1] [%#ssolver'6] result = false  -> not eventually_sat_complete f a}
    (! return' {result}) ]
  
