(* #"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 138 4 138 72 *)

(* formula::Formula *)

let%span sassignments = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 37 8 37 61
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 89 26 89 48
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 80 26 80 44
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span sformula = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 139 33 139 34
let%span sformula'0 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 142 26 142 44
let%span sformula'1 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 143 26 143 54
let%span sformula'2 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 146 47 146 62
let%span sformula'3 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 147 27 147 28
let%span sformula'4 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 151 20 151 52
let%span sformula'5 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 150 20 150 50
let%span sformula'6 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 149 20 149 83
let%span sformula'7 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 148 20 148 92
let%span sformula'8 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 153 40 153 41
let%span sformula'9 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 160 17 160 18
let%span sformula'10 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 130 15 131 55
let%span sformula'11 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 132 14 136 5
let%span sformula'12 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 137 14 137 45
let%span sformula'13 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 92 12 93 45
let%span sformula'14 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 57 20 57 69
let%span sformula'15 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 30 8 31 31
let%span sformula'16 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 122 12 123 41
let%span sformula'17 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 64 12 64 113
let%span sformula'18 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 41 12 42 54
let%span sformula'19 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 22 8 22 51
let%span slogic = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 48 8 52 9
let%span sclause = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 19 4 19 12
let%span sclause'0 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 109 8 109 29
let%span sclause'1 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 234 14 234 36
let%span sclause'2 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 190 15 190 46
let%span sclause'3 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 191 14 191 31
let%span sclause'4 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 92 12 93 31
let%span sclause'5 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 71 12 72 37
let%span slit = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 39 20 39 33
let%span slit'0 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 46 12 49 13
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span smodel'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34

use creusot.prelude.Opaque
use creusot.int.UInt64
use seq.Seq
use mach.int.Int
use creusot.prelude.MutBorrow
use creusot.int.UInt8
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec; t_Formula__num_vars: UInt64.t }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Clause  =
  { t_Clause__rest: t_Vec'0 }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Clause

axiom view_spec : forall self : t_Vec . [%#svec'1] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : t_Vec) : Seq.seq t_Clause =
  [%#smodel'0] view self

let rec len (self_:t_Vec) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]


predicate resolve (self : MutBorrow.t t_Formula) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0 : MutBorrow.t t_Formula) =
  resolve _0

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

function view'1 (self : t_Vec'1) : Seq.seq UInt8.t

axiom view_spec'0 : forall self : t_Vec'1 . [%#svec'1] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

let rec new (return'  (x:t_Vec'1))= any
  [ return''0 (result:t_Vec'1)-> {[%#svec'0] Seq.length (view'1 result) = 0} (! return' {result}) ]


type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function view'2 (self : t_Vec'0) : Seq.seq t_Lit

axiom view_spec'1 : forall self : t_Vec'0 . [%#svec'1] Seq.length (view'2 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'3 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 21 4 21 33] (self : t_Clause) : Seq.seq t_Lit =
  [%#sclause] view'2 self.t_Clause__rest

predicate sat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 44 4 44 57] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'0] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0


predicate sat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 69 4 69 57] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'5] exists i : int . 0 <= i /\ i < Seq.length (view'3 self) /\ sat_inner (Seq.get (view'3 self) i) a

predicate sat_inner'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 90 4 90 57] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'13] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> sat_inner'0 (Seq.get (view self.t_Formula__clauses) i) a

predicate eventually_sat_no_ass [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 56 4 56 46] (self : t_Formula) =
  [%#sformula'14] exists a2 : Seq.seq UInt8.t . sat_inner'1 self a2

type t_SatResult  =
  | C_Sat t_Vec'1
  | C_Unsat
  | C_Unknown

type tuple  =
  { _0: Seq.seq t_Clause; _1: int }

function view'4 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 21 4 21 33] (self : t_Formula) : tuple =
  [%#sformula'19] { _0 = view self.t_Formula__clauses; _1 = UInt64.t'int self.t_Formula__num_vars }

function view'5 (self : MutBorrow.t t_Formula) : tuple =
  [%#smodel] view'4 self.current

predicate inv [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 38 4 38 36] (self : t_Lit) (n : int) =
  [%#slit] UInt64.t'int self.t_Lit__idx < n

predicate vars_in_range [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 90 4 90 46] (self : t_Clause) (n : int) =
  [%#sclause'4] forall i : int . 0 <= i /\ i < Seq.length (view'3 self)  -> inv (Seq.get (view'3 self) i) n

predicate inv'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 108 4 108 36] (self : t_Clause) (n : int) =
  [%#sclause'0] vars_in_range self n

predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Clause) =
  [%#sslice] UInt64.t'int self < Seq.length seq

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Clause) (out : t_Clause) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:t_Clause))= {[@expl:index requires] [%#svec'2] in_bounds ix (view'0 self_)}
  any [ return''0 (result:t_Clause)-> {[%#svec'3] has_value ix (view'0 self_) result} (! return' {result}) ] 

function view'6 (self : t_Clause) : Seq.seq t_Lit =
  [%#smodel'0] view'3 self

let rec len'0 (self:t_Clause) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#sclause'1] UInt64.t'int result = Seq.length (view'6 self)} (! return' {result}) ]


constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)

let rec check_clause_invariant (self:t_Clause) (n:UInt64.t) (return'  (x:UInt64.t))= {[@expl:check_clause_invariant requires] [%#sclause'2] vars_in_range self (UInt64.t'int v_MAX'0)}
  any [ return''0 (result:UInt64.t)-> {[%#sclause'3] inv'0 self (UInt64.t'int result)} (! return' {result}) ] 

predicate formula_sat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 28 0 28 78] (f : tuple) (a : Seq.seq UInt8.t)

 =
  [%#sformula'15] forall i : int . 0 <= i /\ i < Seq.length f._0  -> sat_inner'0 (Seq.get f._0 i) a

predicate contains_empty_clause [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 120 4 120 46] (self : t_Formula) =
  [%#sformula'16] exists i : int . 0 <= i
  /\ i < Seq.length (view self.t_Formula__clauses) /\ Seq.length (view'3 (Seq.get (view self.t_Formula__clauses) i)) = 0

predicate unset [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 46 0 46 38] (v : UInt8.t) =
  [%#slogic] if UInt8.t'int v >= 2 then true else false

predicate complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 35 0 35 52] (a : Seq.seq UInt8.t) =
  [%#sassignments] forall i : int . 0 <= i /\ i < Seq.length a  -> not unset (Seq.get a i)

predicate eventually_sat_complete_no_ass [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 62 4 62 55] (self : t_Formula)

 =
  [%#sformula'17] exists a2 : Seq.seq UInt8.t . Seq.length a2 = UInt64.t'int self.t_Formula__num_vars
  /\ complete_inner a2 /\ sat_inner'1 self a2

predicate inv'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 39 4 39 28] (self : t_Formula) =
  [%#sformula'18] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> inv'0 (Seq.get (view self.t_Formula__clauses) i) (UInt64.t'int self.t_Formula__num_vars)

meta "compute_max_steps" 1000000

let rec check_and_establish_formula_invariant[#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 138 4 138 72] (self:MutBorrow.t t_Formula) (return'  (x:t_SatResult))= {[@expl:check_and_establish_formula_invariant requires] [%#sformula'10] forall i : int . 0
  <= i
  /\ i < Seq.length (view (self.current).t_Formula__clauses)
   -> vars_in_range (Seq.get (view (self.current).t_Formula__clauses) i) (UInt64.t'int (v_MAX : UInt64.t))}
  (! bb0
  [ bb0 = s0 [ s0 = len {(self'0.current).t_Formula__clauses} (fun (_ret:UInt64.t) ->  [ &_8 <- _ret ] s1) | s1 = bb1 ] 
  | bb1 = s0
    [ s0 =  [ &_7 <- _8 = ([%#sformula] (0 : UInt64.t)) ] s1
    | s1 = any [ br0 -> {_7 = false} (! bb6) | br1 -> {_7} (! bb2) ]  ]
  
  | bb2 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 = new (fun (_ret:t_Vec'1) ->  [ &a <- _ret ] s2) | s2 = bb3 ] 
  | bb3 = s0 [ s0 = {[@expl:assertion] [%#sformula'0] sat_inner'1 self'0.current (view'1 a)} s1 | s1 = bb4 ] 
  | bb4 = s0
    [ s0 = {[@expl:assertion] [%#sformula'1] eventually_sat_no_ass self'0.current} s1
    | s1 =  [ &_0'0 <- C_Sat a ] s2
    | s2 = bb5 ]
  
  | bb5 = bb23
  | bb23 = bb24
  | bb6 = s0 [ s0 =  [ &old_self <- [%#sformula'2] self'0 ] s1 | s1 = bb7 ] 
  | bb7 = s0 [ s0 =  [ &i <- [%#sformula'3] (0 : UInt64.t) ] s1 | s1 =  [ &old_8_0 <- self'0 ] s2 | s2 = bb8 ] 
  | bb8 = bb8'0
    [ bb8'0 = {[@expl:mut invariant] old_8_0.final = self'0.final}
      {[@expl:loop invariant #0] [%#sformula'7] forall j : int . 0 <= j /\ j < UInt64.t'int i
       -> inv'0 (Seq.get (view (self'0.current).t_Formula__clauses) j) (UInt64.t'int (self'0.current).t_Formula__num_vars)}
      {[@expl:loop invariant #1] [%#sformula'6] forall j : int . 0 <= j /\ j < UInt64.t'int i
       -> Seq.length (view'3 (Seq.get (view (self'0.current).t_Formula__clauses) j)) > 0}
      {[@expl:loop invariant #2] [%#sformula'5] (view'5 self'0)._0 = (view'5 old_self)._0}
      {[@expl:loop invariant #3] [%#sformula'4] (self'0.current).t_Formula__clauses
      = (old_self.current).t_Formula__clauses}
      (! s0) [ s0 = bb9 ] 
      [ bb9 = s0
        [ s0 = len {(self'0.current).t_Formula__clauses} (fun (_ret:UInt64.t) ->  [ &_29 <- _ret ] s1) | s1 = bb10 ]
      
      | bb10 = s0
        [ s0 =  [ &_27 <- UInt64.lt i _29 ] s1 | s1 = any [ br0 -> {_27 = false} (! bb21) | br1 -> {_27} (! bb11) ]  ]
      
      | bb11 = s0
        [ s0 = index {(self'0.current).t_Formula__clauses} {i} (fun (_ret:t_Clause) ->  [ &_35 <- _ret ] s1)
        | s1 = bb12 ]
      
      | bb12 = s0 [ s0 = len'0 {_35} (fun (_ret:UInt64.t) ->  [ &_33 <- _ret ] s1) | s1 = bb13 ] 
      | bb13 = s0
        [ s0 =  [ &_32 <- _33 = ([%#sformula'8] (0 : UInt64.t)) ] s1
        | s1 = any [ br0 -> {_32 = false} (! bb15) | br1 -> {_32} (! bb14) ]  ]
      
      | bb15 = s0
        [ s0 = index {(self'0.current).t_Formula__clauses} {i} (fun (_ret:t_Clause) ->  [ &_41 <- _ret ] s1)
        | s1 = bb16 ]
      
      | bb16 = s0
        [ s0 = check_clause_invariant {_41} {(self'0.current).t_Formula__num_vars}
            (fun (_ret:UInt64.t) ->  [ &new_n <- _ret ] s1)
        | s1 = bb17 ]
      
      | bb17 = s0
        [ s0 =  [ &_46 <- UInt64.gt new_n (self'0.current).t_Formula__num_vars ] s1
        | s1 = any [ br0 -> {_46 = false} (! bb19) | br1 -> {_46} (! bb18) ]  ]
      
      | bb18 = s0
        [ s0 =  [ &self'0 <- { self'0 with current = { self'0.current with t_Formula__num_vars = new_n } } ] s1
        | s1 = bb20 ]
      
      | bb19 = bb20
      | bb20 = s0
        [ s0 = UInt64.add {i} {[%#sformula'9] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s1) | s1 = bb8'0 ]
       ]
     ]
  
  | bb14 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 =  [ &_0'0 <- C_Unsat ] s2 | s2 = bb22 ] 
  | bb21 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 =  [ &_0'0 <- C_Unknown ] s2 | s2 = bb22 ] 
  | bb22 = bb24
  | bb24 = return''0 {_0'0} ]
  )
  [ & _0'0 : t_SatResult = Any.any_l ()
  | & self'0 : MutBorrow.t t_Formula = self
  | & _7 : bool = Any.any_l ()
  | & _8 : UInt64.t = Any.any_l ()
  | & a : t_Vec'1 = Any.any_l ()
  | & old_self : MutBorrow.t t_Formula = Any.any_l ()
  | & i : UInt64.t = Any.any_l ()
  | & _27 : bool = Any.any_l ()
  | & _29 : UInt64.t = Any.any_l ()
  | & _32 : bool = Any.any_l ()
  | & _33 : UInt64.t = Any.any_l ()
  | & _35 : t_Clause = Any.any_l ()
  | & new_n : UInt64.t = Any.any_l ()
  | & _41 : t_Clause = Any.any_l ()
  | & _46 : bool = Any.any_l ()
  | & old_8_0 : MutBorrow.t t_Formula = Any.any_l () ]
  
  [ return''0 (result:t_SatResult)-> {[@expl:check_and_establish_formula_invariant ensures #0] [%#sformula'11] match result with
      | C_Sat assn -> eventually_sat_no_ass self.final /\ formula_sat_inner (view'5 self) (view'1 assn)
      | C_Unsat -> contains_empty_clause self.final /\ not eventually_sat_complete_no_ass self.current
      | C_Unknown -> inv'1 self.final
      end}
    {[@expl:check_and_establish_formula_invariant ensures #1] [%#sformula'12] (self.current).t_Formula__clauses
    = (self.final).t_Formula__clauses}
    (! return' {result}) ]
  
