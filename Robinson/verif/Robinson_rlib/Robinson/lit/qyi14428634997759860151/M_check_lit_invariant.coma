(* #"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 133 4 133 55 *)

(* lit::Lit *)

let%span slit = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 131 14 131 36
let%span slit'0 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 132 14 132 40
let%span slit'1 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 39 20 39 33

use creusot.int.UInt64
use mach.int.Int
use creusot.prelude.Any

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

predicate inv [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 38 4 38 36] (self : t_Lit) (n : int) =
  [%#slit'1] UInt64.t'int self.t_Lit__idx < n

meta "compute_max_steps" 1000000

let rec check_lit_invariant[#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 133 4 133 55] (self:t_Lit) (n:UInt64.t) (return'  (x:bool))= (! bb0
  [ bb0 = s0 [ s0 =  [ &_0 <- UInt64.lt self'0.t_Lit__idx n'0 ] s1 | s1 = return''0 {_0} ]  ]
  ) [ & _0 : bool = Any.any_l () | & self'0 : t_Lit = self | & n'0 : UInt64.t = n ] 
  [ return''0 (result:bool)-> {[@expl:check_lit_invariant ensures #0] [%#slit] result = inv self (UInt64.t'int n)}
    {[@expl:check_lit_invariant ensures #1] [%#slit'0] result = (UInt64.t'int self.t_Lit__idx < UInt64.t'int n)}
    (! return' {result}) ]
  
