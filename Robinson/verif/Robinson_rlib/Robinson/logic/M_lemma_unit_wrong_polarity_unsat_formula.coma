(* #"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 80 0 82 1 *)

let%span sassignments = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 44 4 44 49
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 28 8 29 43
let%span sassignments'1 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 37 8 37 61
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span sformula = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 41 12 42 54
let%span sformula'0 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 72 12 72 128
let%span sformula'1 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 107 12 108 47
let%span sformula'2 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 92 12 93 45
let%span slogic = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 69 11 69 18
let%span slogic'0 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 70 11 70 33
let%span slogic'1 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 71 11 71 50
let%span slogic'2 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 72 11 72 20
let%span slogic'3 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 73 11 73 26
let%span slogic'4 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 74 11 74 26
let%span slogic'5 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 75 11 75 25
let%span slogic'6 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 76 11 76 123
let%span slogic'7 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 77 11 77 105
let%span slogic'8 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 78 10 78 64
let%span slogic'9 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 79 10 79 45
let%span slogic'10 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 82 2 83 1
let%span slogic'11 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 48 8 52 9
let%span slogic'12 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 8 10 8 28
let%span slogic'13 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 9 10 9 29
let%span slogic'14 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 11 4 15 5
let%span slogic'15 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 22 8 28 9
let%span sclause = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 40 12 43 96
let%span sclause'0 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 31 12 32 37
let%span sclause'1 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 109 8 109 29
let%span sclause'2 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 19 4 19 12
let%span sclause'3 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 92 12 93 31
let%span sclause'4 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 71 12 72 37
let%span sclause'5 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 56 12 57 39
let%span slit = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 22 20 22 29
let%span slit'0 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 57 12 60 13
let%span slit'1 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 68 12 68 30
let%span slit'2 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 39 20 39 33
let%span slit'3 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 46 12 49 13

use creusot.prelude.Opaque
use creusot.int.UInt64
use creusot.int.UInt8
use seq.Seq
use mach.int.Int

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Clause  =
  { t_Clause__rest: t_Vec }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec'0; t_Formula__num_vars: UInt64.t }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec'0) : Seq.seq t_Clause

axiom view_spec : forall self : t_Vec'0 . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function view'0 (self : t_Vec) : Seq.seq t_Lit

axiom view_spec'0 : forall self : t_Vec . [%#svec] Seq.length (view'0 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 21 4 21 33] (self : t_Clause) : Seq.seq t_Lit =
  [%#sclause'2] view'0 self.t_Clause__rest

predicate inv [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 38 4 38 36] (self : t_Lit) (n : int) =
  [%#slit'2] UInt64.t'int self.t_Lit__idx < n

predicate vars_in_range [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 90 4 90 46] (self : t_Clause) (n : int) =
  [%#sclause'3] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)  -> inv (Seq.get (view'1 self) i) n

predicate inv'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 108 4 108 36] (self : t_Clause) (n : int) =
  [%#sclause'1] vars_in_range self n

predicate inv'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 39 4 39 28] (self : t_Formula) =
  [%#sformula] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> inv'0 (Seq.get (view self.t_Formula__clauses) i) (UInt64.t'int self.t_Formula__num_vars)

predicate unset [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 46 0 46 38] (v : UInt8.t) =
  [%#slogic'11] if UInt8.t'int v >= 2 then true else false

predicate sat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 44 4 44 57] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'3] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0


predicate sat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 69 4 69 57] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'4] exists i : int . 0 <= i /\ i < Seq.length (view'1 self) /\ sat_inner (Seq.get (view'1 self) i) a

predicate unset_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 66 4 66 59] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'1] UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) >= 2

predicate unit_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 38 4 38 58] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause] vars_in_range self (Seq.length a)
  /\ not sat_inner'0 self a
  /\ (exists i : int . 0 <= i
  /\ i < Seq.length (view'1 self)
  /\ unset_inner (Seq.get (view'1 self) i) a
  /\ (forall j : int . 0 <= j /\ j < Seq.length (view'1 self) /\ j <> i
   -> not unset_inner (Seq.get (view'1 self) j) a))

predicate in_formula [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 29 4 29 47] (self : t_Clause) (f : t_Formula) =
  [%#sclause'0] exists i : int . 0 <= i
  /\ i < Seq.length (view f.t_Formula__clauses) /\ Seq.get (view f.t_Formula__clauses) i = self

function index_logic [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 21 4 21 35] (self : t_Lit) : int =
  [%#slit] UInt64.t'int self.t_Lit__idx

function bool_to_assignedstate [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 10 0 10 54] (b : bool) : UInt8.t =
  [%#slogic'14] if b then (1 : UInt8.t) else (0 : UInt8.t)

axiom bool_to_assignedstate_spec : forall b : bool . ([%#slogic'12] b  -> UInt8.t'int (bool_to_assignedstate b) = 1)
&& ([%#slogic'13] not b  -> UInt8.t'int (bool_to_assignedstate b) = 0)

predicate unsat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 55 4 55 59] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'0] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1


predicate compatible_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 26 0 26 78] (a : Seq.seq UInt8.t) (a2 : Seq.seq UInt8.t)

 =
  [%#sassignments'0] Seq.length a = Seq.length a2
  /\ (forall i : int . 0 <= i /\ i < Seq.length a  -> unset (Seq.get a i) \/ Seq.get a i = Seq.get a2 i)

predicate complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 35 0 35 52] (a : Seq.seq UInt8.t) =
  [%#sassignments'1] forall i : int . 0 <= i /\ i < Seq.length a  -> not unset (Seq.get a i)

predicate compatible_complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 43 0 43 87] (a : Seq.seq UInt8.t) (a2 : Seq.seq UInt8.t)

 =
  [%#sassignments] compatible_inner a a2 /\ complete_inner a2

predicate sat_inner'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 90 4 90 57] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'2] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> sat_inner'0 (Seq.get (view self.t_Formula__clauses) i) a

predicate eventually_sat_complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 70 4 70 77] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'0] exists a2 : Seq.seq UInt8.t . Seq.length a2 = UInt64.t'int self.t_Formula__num_vars
  /\ compatible_complete_inner a a2 /\ sat_inner'1 self a2

function flip_v [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 20 0 20 44] (v : UInt8.t) : UInt8.t =
  [%#slogic'15] if UInt8.t'int v = 0 then (1 : UInt8.t) else if UInt8.t'int v = 1 then (0 : UInt8.t) else v

predicate unsat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 54 4 54 59] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'5] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)  -> unsat_inner (Seq.get (view'1 self) i) a

predicate unsat_inner'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 105 4 105 59] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'1] exists i : int . 0 <= i
  /\ i < Seq.length (view self.t_Formula__clauses) /\ unsat_inner'0 (Seq.get (view self.t_Formula__clauses) i) a

constant c  : t_Clause

constant f  : t_Formula

constant a  : Seq.seq UInt8.t

constant ix  : int

constant v  : UInt8.t

function lemma_unit_wrong_polarity_unsat_formula [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 80 0 82 1] (c'0 : t_Clause) (f'0 : t_Formula) (a'0 : Seq.seq UInt8.t) (ix'0 : int) (v'0 : UInt8.t) : ()


goal vc_lemma_unit_wrong_polarity_unsat_formula : ([%#slogic] inv'1 f)
 -> ([%#slogic'0] UInt64.t'int f.t_Formula__num_vars = Seq.length a)
 -> ([%#slogic'1] 0 <= ix /\ ix < Seq.length a /\ unset (Seq.get a ix))
 -> ([%#slogic'2] not unset v)
 -> ([%#slogic'3] unit_inner c a)
 -> ([%#slogic'4] in_formula c f)
 -> ([%#slogic'5] inv'0 c (Seq.length a))
 -> ([%#slogic'6] exists j : int . 0 <= j
/\ j < Seq.length (view'1 c)
/\ index_logic (Seq.get (view'1 c) j) = ix /\ bool_to_assignedstate (Seq.get (view'1 c) j).t_Lit__polarity = v)
 -> ([%#slogic'7] forall j : int . 0 <= j /\ j < Seq.length (view'1 c) /\ not index_logic (Seq.get (view'1 c) j) = ix
 -> unsat_inner (Seq.get (view'1 c) j) a)
 -> ([%#slogic'8] not eventually_sat_complete_inner f (Seq.set a ix (flip_v v)))
&& ([%#slogic'9] unsat_inner'1 f (Seq.set a ix (flip_v v)))
