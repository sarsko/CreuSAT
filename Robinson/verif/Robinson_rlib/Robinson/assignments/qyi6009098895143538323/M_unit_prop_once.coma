(* #"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 159 4 159 74 *)

(* assignments::Assignments *)

let%span sassignments = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 161 49 161 64
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 169 30 169 145
let%span sassignments'1 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 170 30 170 114
let%span sassignments'2 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 172 42 172 43
let%span sassignments'3 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 174 42 174 43
let%span sassignments'4 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 176 30 176 135
let%span sassignments'5 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 177 30 177 103
let%span sassignments'6 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 178 30 178 54
let%span sassignments'7 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 141 4 141 36
let%span sassignments'8 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 142 15 142 22
let%span sassignments'9 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 143 15 143 47
let%span sassignments'10 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 144 14 144 39
let%span sassignments'11 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 145 14 145 82
let%span sassignments'12 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 152 14 157 5
let%span sassignments'13 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 158 14 158 118
let%span sassignments'14 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 59 12 59 64
let%span sassignments'15 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 66 20 66 48
let%span sassignments'16 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 73 12 73 73
let%span sassignments'17 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 17 4 17 12
let%span sassignments'18 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 28 8 29 43
let%span sassignments'19 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 44 4 44 49
let%span sassignments'20 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 37 8 37 61
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 158 27 158 46
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 159 26 159 54
let%span svec'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 160 26 160 57
let%span svec'4 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 161 26 161 62
let%span svec'5 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 162 26 162 55
let%span svec'6 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span sformula = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 41 12 42 54
let%span sformula'0 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 79 20 79 58
let%span sformula'1 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 72 12 72 128
let%span sformula'2 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 107 12 108 47
let%span sformula'3 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 92 12 93 45
let%span slogic = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 69 11 69 18
let%span slogic'0 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 70 11 70 33
let%span slogic'1 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 71 11 71 50
let%span slogic'2 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 72 11 72 20
let%span slogic'3 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 73 11 73 26
let%span slogic'4 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 74 11 74 26
let%span slogic'5 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 75 11 75 25
let%span slogic'6 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 76 11 76 123
let%span slogic'7 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 77 11 77 105
let%span slogic'8 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 78 10 78 64
let%span slogic'9 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 79 10 79 45
let%span slogic'10 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 82 2 83 1
let%span slogic'11 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 8 10 8 28
let%span slogic'12 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 9 10 9 29
let%span slogic'13 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 11 4 15 5
let%span slogic'14 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 58 11 58 18
let%span slogic'15 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 59 11 59 33
let%span slogic'16 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 60 11 60 50
let%span slogic'17 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 61 11 61 20
let%span slogic'18 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 62 11 62 45
let%span slogic'19 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 63 11 63 65
let%span slogic'20 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 64 10 64 55
let%span slogic'21 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 65 87 65 89
let%span slogic'22 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 87 11 87 50
let%span slogic'23 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 88 11 88 56
let%span slogic'24 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 89 10 89 44
let%span slogic'25 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 90 98 90 100
let%span slogic'26 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 94 11 94 50
let%span slogic'27 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 95 11 95 61
let%span slogic'28 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 96 11 96 61
let%span slogic'29 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 97 10 97 45
let%span slogic'30 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 98 85 98 87
let%span slogic'31 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 48 8 52 9
let%span slogic'32 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 22 8 28 9
let%span slogic'33 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 41 4 41 7
let%span slogic'34 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 35 4 35 7
let%span sclause = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 127 15 127 35
let%span sclause'0 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 128 15 128 23
let%span sclause'1 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 129 15 129 25
let%span sclause'2 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 130 14 130 63
let%span sclause'3 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 131 14 131 65
let%span sclause'4 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 132 14 132 81
let%span sclause'5 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 133 14 133 64
let%span sclause'6 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 170 15 170 28
let%span sclause'7 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 171 15 171 23
let%span sclause'8 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 172 15 172 25
let%span sclause'9 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 173 14 173 76
let%span sclause'10 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 174 14 174 45
let%span sclause'11 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 175 14 175 45
let%span sclause'12 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 49 20 49 39
let%span sclause'13 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 79 20 79 38
let%span sclause'14 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 64 20 64 40
let%span sclause'15 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 109 8 109 29
let%span sclause'16 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 40 12 43 96
let%span sclause'17 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 31 12 32 37
let%span sclause'18 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 19 4 19 12
let%span sclause'19 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 71 12 72 37
let%span sclause'20 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 56 12 57 39
let%span sclause'21 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 92 12 93 31
let%span slit = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 22 20 22 29
let%span slit'0 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 96 14 96 43
let%span slit'1 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 57 12 60 13
let%span slit'2 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 68 12 68 30
let%span slit'3 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 46 12 49 13
let%span slit'4 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 39 20 39 33
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span smodel'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span sslice'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 137 20 137 94
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34

use creusot.prelude.Opaque
use creusot.int.UInt64
use seq.Seq
use mach.int.Int
use creusot.int.UInt8
use creusot.prelude.MutBorrow
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec; t_Formula__num_vars: UInt64.t }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Clause  =
  { t_Clause__rest: t_Vec'0 }

predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Clause) =
  [%#sslice] UInt64.t'int self < Seq.length seq

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Clause

axiom view_spec : forall self : t_Vec . [%#svec'6] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : t_Vec) : Seq.seq t_Clause =
  [%#smodel'0] view self

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Clause) (out : t_Clause) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:t_Clause))= {[@expl:index requires] [%#svec] in_bounds ix (view'0 self_)}
  any [ return''0 (result:t_Clause)-> {[%#svec'0] has_value ix (view'0 self_) result} (! return' {result}) ] 

type t_ClauseState  =
  | C_Sat
  | C_Unsat
  | C_Unit
  | C_Unknown

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec'1; t_Assignments__1: UInt64.t }

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function view'1 (self : t_Vec'0) : Seq.seq t_Lit

axiom view_spec'0 : forall self : t_Vec'0 . [%#svec'6] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'2 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 21 4 21 33] (self : t_Clause) : Seq.seq t_Lit =
  [%#sclause'18] view'1 self.t_Clause__rest

predicate inv [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 38 4 38 36] (self : t_Lit) (n : int) =
  [%#slit'4] UInt64.t'int self.t_Lit__idx < n

predicate vars_in_range [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 90 4 90 46] (self : t_Clause) (n : int) =
  [%#sclause'21] forall i : int . 0 <= i /\ i < Seq.length (view'2 self)  -> inv (Seq.get (view'2 self) i) n

predicate inv'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 108 4 108 36] (self : t_Clause) (n : int) =
  [%#sclause'15] vars_in_range self n

function view'3 (self : t_Vec'1) : Seq.seq UInt8.t

axiom view_spec'1 : forall self : t_Vec'1 . [%#svec'6] Seq.length (view'3 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'4 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#sassignments'17] view'3 self.t_Assignments__0

function view'5 (self : t_Assignments) : Seq.seq UInt8.t =
  [%#smodel'0] view'4 self

predicate inv'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 39 4 39 28] (self : t_Formula) =
  [%#sformula] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> inv'0 (Seq.get (view self.t_Formula__clauses) i) (UInt64.t'int self.t_Formula__num_vars)

predicate inv'2 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 57 4 57 40] (self : t_Assignments) (f : t_Formula)

 =
  [%#sassignments'14] UInt64.t'int f.t_Formula__num_vars = Seq.length (view'4 self)
  /\ UInt64.t'int self.t_Assignments__1 <= UInt64.t'int f.t_Formula__num_vars

predicate sat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 44 4 44 57] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'3] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0


predicate sat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 69 4 69 57] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'19] exists i : int . 0 <= i /\ i < Seq.length (view'2 self) /\ sat_inner (Seq.get (view'2 self) i) a

predicate sat [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 78 4 78 44] (self : t_Clause) (a : t_Assignments) =
  [%#sclause'13] sat_inner'0 self (view'4 a)

predicate unsat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 55 4 55 59] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'1] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1


predicate unsat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 54 4 54 59] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'20] forall i : int . 0 <= i /\ i < Seq.length (view'2 self)  -> unsat_inner (Seq.get (view'2 self) i) a

predicate unsat [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 63 4 63 46] (self : t_Clause) (a : t_Assignments) =
  [%#sclause'14] unsat_inner'0 self (view'4 a)

predicate unset_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 66 4 66 59] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'2] UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) >= 2

predicate unit_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 38 4 38 58] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'16] vars_in_range self (Seq.length a)
  /\ not sat_inner'0 self a
  /\ (exists i : int . 0 <= i
  /\ i < Seq.length (view'2 self)
  /\ unset_inner (Seq.get (view'2 self) i) a
  /\ (forall j : int . 0 <= j /\ j < Seq.length (view'2 self) /\ j <> i
   -> not unset_inner (Seq.get (view'2 self) j) a))

predicate unit' [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 48 4 48 45] (self : t_Clause) (a : t_Assignments) =
  [%#sclause'12] unit_inner self (view'4 a)

predicate unset [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 46 0 46 38] (v : UInt8.t) =
  [%#slogic'31] if UInt8.t'int v >= 2 then true else false

predicate complete [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 71 4 71 33] (self : t_Assignments) =
  [%#sassignments'16] forall i : int . 0 <= i /\ i < Seq.length (view'4 self)  -> not unset (Seq.get (view'4 self) i)

let rec check_if_unit (self:t_Clause) (a:t_Assignments) (_f:t_Formula) (return'  (x:t_ClauseState))= {[@expl:check_if_unit requires #0] [%#sclause] inv'0 self (Seq.length (view'5 a))}
  {[@expl:check_if_unit requires #1] [%#sclause'0] inv'1 _f}
  {[@expl:check_if_unit requires #2] [%#sclause'1] inv'2 a _f}
  any
  [ return''0 (result:t_ClauseState)-> {[%#sclause'2] result = C_Sat  -> sat self a}
    {[%#sclause'3] result = C_Unsat  -> unsat self a}
    {[%#sclause'4] result = C_Unit  -> unit' self a /\ not complete a}
    {[%#sclause'5] result = C_Unknown  -> not complete a}
    (! return' {result}) ]


predicate resolve (self : MutBorrow.t t_Assignments) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0 : MutBorrow.t t_Assignments) =
  resolve _0

function view'6 (self : t_Clause) : Seq.seq t_Lit =
  [%#smodel'0] view'2 self

function index_logic [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 21 4 21 35] (self : t_Lit) : int =
  [%#slit] UInt64.t'int self.t_Lit__idx

let rec get_unit (self:t_Clause) (a:t_Assignments) (_f:t_Formula) (return'  (x:t_Lit))= {[@expl:get_unit requires #0] [%#sclause'6] unit' self a}
  {[@expl:get_unit requires #1] [%#sclause'7] inv'1 _f}
  {[@expl:get_unit requires #2] [%#sclause'8] inv'2 a _f}
  any
  [ return''0 (result:t_Lit)-> {[%#sclause'9] exists j : int . 0 <= j
    /\ j < Seq.length (view'6 self) /\ Seq.get (view'6 self) j = result}
    {[%#sclause'10] index_logic result < Seq.length (view'5 a)}
    {[%#sclause'11] unset (Seq.get (view'5 a) (index_logic result))}
    (! return' {result}) ]


predicate in_formula [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 29 4 29 47] (self : t_Clause) (f : t_Formula) =
  [%#sclause'17] exists i : int . 0 <= i
  /\ i < Seq.length (view f.t_Formula__clauses) /\ Seq.get (view f.t_Formula__clauses) i = self

function bool_to_assignedstate [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 10 0 10 54] (b : bool) : UInt8.t =
  [%#slogic'13] if b then (1 : UInt8.t) else (0 : UInt8.t)

axiom bool_to_assignedstate_spec : forall b : bool . ([%#slogic'11] b  -> UInt8.t'int (bool_to_assignedstate b) = 1)
&& ([%#slogic'12] not b  -> UInt8.t'int (bool_to_assignedstate b) = 0)

predicate compatible_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 26 0 26 78] (a : Seq.seq UInt8.t) (a2 : Seq.seq UInt8.t)

 =
  [%#sassignments'18] Seq.length a = Seq.length a2
  /\ (forall i : int . 0 <= i /\ i < Seq.length a  -> unset (Seq.get a i) \/ Seq.get a i = Seq.get a2 i)

predicate complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 35 0 35 52] (a : Seq.seq UInt8.t) =
  [%#sassignments'20] forall i : int . 0 <= i /\ i < Seq.length a  -> not unset (Seq.get a i)

predicate compatible_complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 43 0 43 87] (a : Seq.seq UInt8.t) (a2 : Seq.seq UInt8.t)

 =
  [%#sassignments'19] compatible_inner a a2 /\ complete_inner a2

predicate sat_inner'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 90 4 90 57] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'3] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> sat_inner'0 (Seq.get (view self.t_Formula__clauses) i) a

predicate eventually_sat_complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 70 4 70 77] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'1] exists a2 : Seq.seq UInt8.t . Seq.length a2 = UInt64.t'int self.t_Formula__num_vars
  /\ compatible_complete_inner a a2 /\ sat_inner'1 self a2

function flip_v [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 20 0 20 44] (v : UInt8.t) : UInt8.t =
  [%#slogic'32] if UInt8.t'int v = 0 then (1 : UInt8.t) else if UInt8.t'int v = 1 then (0 : UInt8.t) else v

predicate unsat_inner'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 105 4 105 59] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'2] exists i : int . 0 <= i
  /\ i < Seq.length (view self.t_Formula__clauses) /\ unsat_inner'0 (Seq.get (view self.t_Formula__clauses) i) a

function lemma_unit_wrong_polarity_unsat_formula [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 80 0 82 1] (c : t_Clause) (f : t_Formula) (a : Seq.seq UInt8.t) (ix : int) (v : UInt8.t) : ()

 =
  [%#slogic'10] ()

axiom lemma_unit_wrong_polarity_unsat_formula_spec : forall c : t_Clause, f : t_Formula, a : Seq.seq UInt8.t, ix : int, v : UInt8.t . ([%#slogic] inv'1 f)
 -> ([%#slogic'0] UInt64.t'int f.t_Formula__num_vars = Seq.length a)
 -> ([%#slogic'1] 0 <= ix /\ ix < Seq.length a /\ unset (Seq.get a ix))
 -> ([%#slogic'2] not unset v)
 -> ([%#slogic'3] unit_inner c a)
 -> ([%#slogic'4] in_formula c f)
 -> ([%#slogic'5] inv'0 c (Seq.length a))
 -> ([%#slogic'6] exists j : int . 0 <= j
/\ j < Seq.length (view'2 c)
/\ index_logic (Seq.get (view'2 c) j) = ix /\ bool_to_assignedstate (Seq.get (view'2 c) j).t_Lit__polarity = v)
 -> ([%#slogic'7] forall j : int . 0 <= j /\ j < Seq.length (view'2 c) /\ not index_logic (Seq.get (view'2 c) j) = ix
 -> unsat_inner (Seq.get (view'2 c) j) a)
 -> ([%#slogic'8] not eventually_sat_complete_inner f (Seq.set a ix (flip_v v)))
&& ([%#slogic'9] unsat_inner'1 f (Seq.set a ix (flip_v v)))

function view'7 (self : MutBorrow.t t_Assignments) : Seq.seq UInt8.t =
  [%#smodel] view'4 self.current

function lemma_unit_forces [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 65 0 65 86] (f : t_Formula) (a : Seq.seq UInt8.t) (ix : int) (v : UInt8.t) : ()

 =
  [%#slogic'21] ()

axiom lemma_unit_forces_spec : forall f : t_Formula, a : Seq.seq UInt8.t, ix : int, v : UInt8.t . ([%#slogic'14] inv'1 f)
 -> ([%#slogic'15] UInt64.t'int f.t_Formula__num_vars = Seq.length a)
 -> ([%#slogic'16] 0 <= ix /\ ix < Seq.length a /\ unset (Seq.get a ix))
 -> ([%#slogic'17] not unset v)
 -> ([%#slogic'18] eventually_sat_complete_inner f a)
 -> ([%#slogic'19] not eventually_sat_complete_inner f (Seq.set a ix (flip_v v)))
 -> ([%#slogic'20] eventually_sat_complete_inner f (Seq.set a ix v))

let rec index'0 (self:t_Lit) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#slit'0] UInt64.t'int result = index_logic self} (! return' {result}) ]


predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt8.t) =
  [%#sslice] UInt64.t'int self < Seq.length seq

function view'8 (self : MutBorrow.t t_Vec'1) : Seq.seq UInt8.t =
  [%#smodel] view'3 self.current

predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt8.t) (out : UInt8.t) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

predicate resolve_elswhere [@inline:trivial] (self : UInt64.t) (old' : Seq.seq UInt8.t) (fin : Seq.seq UInt8.t) =
  [%#sslice'1] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
   -> Seq.get old' i = Seq.get fin i

let rec index_mut (self_:MutBorrow.t t_Vec'1) (ix:UInt64.t) (return'  (x:MutBorrow.t UInt8.t))= {[@expl:index_mut requires] [%#svec'1] in_bounds'0 ix (view'8 self_)}
  any
  [ return''0 (result:MutBorrow.t UInt8.t)-> {[%#svec'2] has_value'0 ix (view'8 self_) result.current}
    {[%#svec'3] has_value'0 ix (view'3 self_.final) result.final}
    {[%#svec'4] resolve_elswhere ix (view'8 self_) (view'3 self_.final)}
    {[%#svec'5] Seq.length (view'3 self_.final) = Seq.length (view'8 self_)}
    (! return' {result}) ]


predicate resolve'1 (self : MutBorrow.t UInt8.t) =
  [%#sresolve] self.final = self.current

predicate resolve'2 (_0 : MutBorrow.t UInt8.t) =
  resolve'1 _0

function lemma_extension_sat_base_sat [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 90 0 90 97] (f : t_Formula) (a : Seq.seq UInt8.t) (ix : int) (v : UInt8.t) : ()

 =
  [%#slogic'25] ()

axiom lemma_extension_sat_base_sat_spec : forall f : t_Formula, a : Seq.seq UInt8.t, ix : int, v : UInt8.t . ([%#slogic'22] 0
<= ix
/\ ix < Seq.length a /\ unset (Seq.get a ix))
 -> ([%#slogic'23] eventually_sat_complete_inner f (Seq.set a ix v))
 -> ([%#slogic'24] eventually_sat_complete_inner f a)

function neg [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 40 0 40 25]  : UInt8.t =
  [%#slogic'33] (0 : UInt8.t)

function pos [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 34 0 34 25]  : UInt8.t =
  [%#slogic'34] (1 : UInt8.t)

function lemma_extensions_unsat_base_unsat [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 98 0 98 84] (a : Seq.seq UInt8.t) (ix : int) (f : t_Formula) : ()

 =
  [%#slogic'30] ()

axiom lemma_extensions_unsat_base_unsat_spec : forall a : Seq.seq UInt8.t, ix : int, f : t_Formula . ([%#slogic'26] 0
<= ix
/\ ix < Seq.length a /\ unset (Seq.get a ix))
 -> ([%#slogic'27] not eventually_sat_complete_inner f (Seq.set a ix neg))
 -> ([%#slogic'28] not eventually_sat_complete_inner f (Seq.set a ix pos))
 -> ([%#slogic'29] not eventually_sat_complete_inner f a)

predicate compatible [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 65 4 65 52] (self : t_Assignments) (a2 : t_Assignments)

 =
  [%#sassignments'15] compatible_inner (view'4 self) (view'4 a2)

predicate eventually_sat_complete [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 78 4 78 64] (self : t_Formula) (a : t_Assignments)

 =
  [%#sformula'0] eventually_sat_complete_inner self (view'4 a)

meta "compute_max_steps" 1000000

let rec unit_prop_once[#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 159 4 159 74] (self:MutBorrow.t t_Assignments) (i:UInt64.t) (f:t_Formula) (return'  (x:t_ClauseState))= {[@expl:unit_prop_once requires #0] [%#sassignments'7] inv'2 self.current f}
  {[@expl:unit_prop_once requires #1] [%#sassignments'8] inv'1 f}
  {[@expl:unit_prop_once requires #2] [%#sassignments'9] 0 <= UInt64.t'int i
  /\ UInt64.t'int i < Seq.length (view f.t_Formula__clauses)}
  (! bb0
  [ bb0 = s0 [ s0 = index {f'0.t_Formula__clauses} {i'0} (fun (_ret:t_Clause) ->  [ &_13 <- _ret ] s1) | s1 = bb1 ] 
  | bb1 = s0 [ s0 =  [ &clause <- _13 ] s1 | s1 =  [ &_old_a <- [%#sassignments] self'0 ] s2 | s2 = bb2 ] 
  | bb2 = s0
    [ s0 = check_if_unit {clause} {self'0.current} {f'0} (fun (_ret:t_ClauseState) ->  [ &_18 <- _ret ] s1) | s1 = bb3 ]
  
  | bb3 = any
    [ br0 -> {_18 = C_Sat} (! bb4)
    | br1 -> {_18 = C_Unsat} (! bb4)
    | br2 -> {_18 = C_Unit} (! bb5)
    | br3 -> {_18 = C_Unknown} (! bb4) ]
  
  | bb4 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 =  [ &o <- _18 ] s2 | s2 =  [ &_0 <- o ] s3 | s3 = bb15 ] 
  | bb5 = bb6
  | bb6 = s0 [ s0 = get_unit {clause} {self'0.current} {f'0} (fun (_ret:t_Lit) ->  [ &lit <- _ret ] s1) | s1 = bb7 ] 
  | bb7 = s0
    [ s0 = {[@expl:assertion] [%#sassignments'0] let _ = lemma_unit_wrong_polarity_unsat_formula clause f'0 (view'7 self'0) (index_logic lit) (bool_to_assignedstate lit.t_Lit__polarity) in true}
      s1
    | s1 = {[@expl:assertion] [%#sassignments'1] let _ = lemma_unit_forces f'0 (view'7 self'0) (index_logic lit) (bool_to_assignedstate lit.t_Lit__polarity) in true}
      s2
    | s2 = any [ br0 -> {lit.t_Lit__polarity = false} (! bb11) | br1 -> {lit.t_Lit__polarity} (! bb8) ]  ]
  
  | bb8 = s0
    [ s0 = MutBorrow.borrow_final
        <t_Vec'1>
        {(self'0.current).t_Assignments__0}
        {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
        (fun (_ret:MutBorrow.t t_Vec'1) ->
           [ &_35 <- _ret ] 
           [ &self'0 <- { self'0 with current = { self'0.current with t_Assignments__0 = _ret.final } } ] 
          s1)
    | s1 = index'0 {lit} (fun (_ret:UInt64.t) ->  [ &_36 <- _ret ] s2)
    | s2 = bb9 ]
  
  | bb9 = s0 [ s0 = index_mut {_35} {_36} (fun (_ret:MutBorrow.t UInt8.t) ->  [ &_34 <- _ret ] s1) | s1 = bb10 ] 
  | bb10 = s0
    [ s0 =  [ &_34 <- { _34 with current = ([%#sassignments'2] (1 : UInt8.t)) } ] s1
    | s1 = -{resolve'2 _34}- s2
    | s2 = -{resolve'0 self'0}- s3
    | s3 = bb14 ]
  
  | bb11 = s0
    [ s0 = MutBorrow.borrow_final
        <t_Vec'1>
        {(self'0.current).t_Assignments__0}
        {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
        (fun (_ret:MutBorrow.t t_Vec'1) ->
           [ &_39 <- _ret ] 
           [ &self'0 <- { self'0 with current = { self'0.current with t_Assignments__0 = _ret.final } } ] 
          s1)
    | s1 = index'0 {lit} (fun (_ret:UInt64.t) ->  [ &_40 <- _ret ] s2)
    | s2 = bb12 ]
  
  | bb12 = s0 [ s0 = index_mut {_39} {_40} (fun (_ret:MutBorrow.t UInt8.t) ->  [ &_38 <- _ret ] s1) | s1 = bb13 ] 
  | bb13 = s0
    [ s0 =  [ &_38 <- { _38 with current = ([%#sassignments'3] (0 : UInt8.t)) } ] s1
    | s1 = -{resolve'2 _38}- s2
    | s2 = -{resolve'0 self'0}- s3
    | s3 = bb14 ]
  
  | bb14 = s0
    [ s0 = {[@expl:assertion] [%#sassignments'4] let _ = lemma_extension_sat_base_sat f'0 (view'7 _old_a) (index_logic lit) (bool_to_assignedstate lit.t_Lit__polarity) in true}
      s1
    | s1 = {[@expl:assertion] [%#sassignments'5] let _ = lemma_extensions_unsat_base_unsat (view'7 _old_a) (index_logic lit) f'0 in true}
      s2
    | s2 = {[@expl:assertion] [%#sassignments'6] self'0.final = _old_a.final} s3
    | s3 =  [ &_0 <- C_Unit ] s4
    | s4 = bb15 ]
  
  | bb15 = return''0 {_0} ]
  )
  [ & _0 : t_ClauseState = Any.any_l ()
  | & self'0 : MutBorrow.t t_Assignments = self
  | & i'0 : UInt64.t = i
  | & f'0 : t_Formula = f
  | & clause : t_Clause = Any.any_l ()
  | & _13 : t_Clause = Any.any_l ()
  | & _old_a : MutBorrow.t t_Assignments = Any.any_l ()
  | & _18 : t_ClauseState = Any.any_l ()
  | & lit : t_Lit = Any.any_l ()
  | & _34 : MutBorrow.t UInt8.t = Any.any_l ()
  | & _35 : MutBorrow.t t_Vec'1 = Any.any_l ()
  | & _36 : UInt64.t = Any.any_l ()
  | & _38 : MutBorrow.t UInt8.t = Any.any_l ()
  | & _39 : MutBorrow.t t_Vec'1 = Any.any_l ()
  | & _40 : UInt64.t = Any.any_l ()
  | & o : t_ClauseState = Any.any_l () ]
  
  [ return''0 (result:t_ClauseState)-> {[@expl:unit_prop_once ensures #0] [%#sassignments'7] inv'2 self.final f}
    {[@expl:unit_prop_once ensures #1] [%#sassignments'10] compatible self.current self.final}
    {[@expl:unit_prop_once ensures #2] [%#sassignments'11] eventually_sat_complete f self.current
    = eventually_sat_complete f self.final}
    {[@expl:unit_prop_once ensures #3] [%#sassignments'12] match result with
      | C_Unit -> unit' (Seq.get (view f.t_Formula__clauses) (UInt64.t'int i)) self.current /\ not complete self.current
      | C_Sat -> sat (Seq.get (view f.t_Formula__clauses) (UInt64.t'int i)) self.final
      /\ view'7 self = view'4 self.final
      | C_Unsat -> unsat (Seq.get (view f.t_Formula__clauses) (UInt64.t'int i)) self.final
      /\ view'7 self = view'4 self.final
      | C_Unknown -> view'7 self = view'4 self.final /\ not complete self.final
      end}
    {[@expl:unit_prop_once ensures #4] [%#sassignments'13] complete self.current
     -> self.current = self.final /\ (result = C_Unsat \/ result = C_Sat)}
    (! return' {result}) ]
  
