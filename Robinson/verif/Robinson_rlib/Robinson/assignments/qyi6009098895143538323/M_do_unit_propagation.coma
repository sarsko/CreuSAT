(* #"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 242 4 242 70 *)

(* assignments::Assignments *)

let%span sassignments = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 243 49 243 64
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 246 20 246 99
let%span sassignments'1 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 245 20 245 44
let%span sassignments'2 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 244 20 244 32
let%span sassignments'3 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 253 32 253 37
let%span sassignments'4 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 250 32 250 36
let%span sassignments'5 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 235 15 235 22
let%span sassignments'6 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 236 4 236 36
let%span sassignments'7 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 237 14 237 82
let%span sassignments'8 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 238 14 238 39
let%span sassignments'9 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 239 14 239 54
let%span sassignments'10 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 240 14 240 51
let%span sassignments'11 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 241 14 241 52
let%span sassignments'12 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 66 20 66 48
let%span sassignments'13 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 59 12 59 64
let%span sassignments'14 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 186 4 186 36
let%span sassignments'15 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 187 15 187 22
let%span sassignments'16 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 188 14 188 82
let%span sassignments'17 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 189 14 189 39
let%span sassignments'18 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 190 14 195 5
let%span sassignments'19 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 196 14 196 104
let%span sassignments'20 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 73 12 73 73
let%span sassignments'21 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 17 4 17 12
let%span sassignments'22 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 28 8 29 43
let%span sassignments'23 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 44 4 44 49
let%span sassignments'24 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 37 8 37 61
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span sformula = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 79 20 79 58
let%span sformula'0 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 41 12 42 54
let%span sformula'1 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 115 20 115 40
let%span sformula'2 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 100 20 100 38
let%span sformula'3 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 72 12 72 128
let%span sformula'4 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 107 12 108 47
let%span sformula'5 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 92 12 93 45
let%span slogic = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 48 8 52 9
let%span sclause = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 109 8 109 29
let%span sclause'0 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 92 12 93 31
let%span sclause'1 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 56 12 57 39
let%span sclause'2 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 71 12 72 37
let%span sclause'3 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 19 4 19 12
let%span slit = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 39 20 39 33
let%span slit'0 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 57 12 60 13
let%span slit'1 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 46 12 49 13
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34

use creusot.prelude.Opaque
use creusot.int.UInt64
use creusot.int.UInt8
use seq.Seq
use mach.int.Int
use creusot.prelude.MutBorrow
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec; t_Formula__num_vars: UInt64.t }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec'0; t_Assignments__1: UInt64.t }

predicate unset [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 46 0 46 38] (v : UInt8.t) =
  [%#slogic] if UInt8.t'int v >= 2 then true else false

predicate compatible_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 26 0 26 78] (a : Seq.seq UInt8.t) (a2 : Seq.seq UInt8.t)

 =
  [%#sassignments'22] Seq.length a = Seq.length a2
  /\ (forall i : int . 0 <= i /\ i < Seq.length a  -> unset (Seq.get a i) \/ Seq.get a i = Seq.get a2 i)

predicate complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 35 0 35 52] (a : Seq.seq UInt8.t) =
  [%#sassignments'24] forall i : int . 0 <= i /\ i < Seq.length a  -> not unset (Seq.get a i)

predicate compatible_complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 43 0 43 87] (a : Seq.seq UInt8.t) (a2 : Seq.seq UInt8.t)

 =
  [%#sassignments'23] compatible_inner a a2 /\ complete_inner a2

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

type t_Clause  =
  { t_Clause__rest: t_Vec'1 }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Clause

axiom view_spec : forall self : t_Vec . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function view'0 (self : t_Vec'1) : Seq.seq t_Lit

axiom view_spec'0 : forall self : t_Vec'1 . [%#svec] Seq.length (view'0 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 21 4 21 33] (self : t_Clause) : Seq.seq t_Lit =
  [%#sclause'3] view'0 self.t_Clause__rest

predicate sat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 44 4 44 57] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'1] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0


predicate sat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 69 4 69 57] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'2] exists i : int . 0 <= i /\ i < Seq.length (view'1 self) /\ sat_inner (Seq.get (view'1 self) i) a

predicate sat_inner'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 90 4 90 57] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'5] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> sat_inner'0 (Seq.get (view self.t_Formula__clauses) i) a

predicate eventually_sat_complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 70 4 70 77] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'3] exists a2 : Seq.seq UInt8.t . Seq.length a2 = UInt64.t'int self.t_Formula__num_vars
  /\ compatible_complete_inner a a2 /\ sat_inner'1 self a2

function view'2 (self : t_Vec'0) : Seq.seq UInt8.t

axiom view_spec'1 : forall self : t_Vec'0 . [%#svec] Seq.length (view'2 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'3 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#sassignments'21] view'2 self.t_Assignments__0

predicate eventually_sat_complete [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 78 4 78 64] (self : t_Formula) (a : t_Assignments)

 =
  [%#sformula] eventually_sat_complete_inner self (view'3 a)

predicate compatible [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 65 4 65 52] (self : t_Assignments) (a2 : t_Assignments)

 =
  [%#sassignments'12] compatible_inner (view'3 self) (view'3 a2)

predicate inv [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 57 4 57 40] (self : t_Assignments) (f : t_Formula)
 =
  [%#sassignments'13] UInt64.t'int f.t_Formula__num_vars = Seq.length (view'3 self)
  /\ UInt64.t'int self.t_Assignments__1 <= UInt64.t'int f.t_Formula__num_vars

type t_ClauseState  =
  | C_Sat
  | C_Unsat
  | C_Unit
  | C_Unknown

predicate inv'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 38 4 38 36] (self : t_Lit) (n : int) =
  [%#slit] UInt64.t'int self.t_Lit__idx < n

predicate vars_in_range [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 90 4 90 46] (self : t_Clause) (n : int) =
  [%#sclause'0] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)  -> inv'0 (Seq.get (view'1 self) i) n

predicate inv'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 108 4 108 36] (self : t_Clause) (n : int) =
  [%#sclause] vars_in_range self n

predicate inv'2 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 39 4 39 28] (self : t_Formula) =
  [%#sformula'0] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> inv'1 (Seq.get (view self.t_Formula__clauses) i) (UInt64.t'int self.t_Formula__num_vars)

predicate sat [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 99 4 99 44] (self : t_Formula) (a : t_Assignments) =
  [%#sformula'2] sat_inner'1 self (view'3 a)

predicate unsat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 55 4 55 59] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'0] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1


predicate unsat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 54 4 54 59] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'1] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)  -> unsat_inner (Seq.get (view'1 self) i) a

predicate unsat_inner'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 105 4 105 59] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'4] exists i : int . 0 <= i
  /\ i < Seq.length (view self.t_Formula__clauses) /\ unsat_inner'0 (Seq.get (view self.t_Formula__clauses) i) a

predicate unsat [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 114 4 114 46] (self : t_Formula) (a : t_Assignments)
 =
  [%#sformula'1] unsat_inner'1 self (view'3 a)

predicate complete [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 71 4 71 33] (self : t_Assignments) =
  [%#sassignments'20] forall i : int . 0 <= i /\ i < Seq.length (view'3 self)  -> not unset (Seq.get (view'3 self) i)

let rec unit_propagate (self:MutBorrow.t t_Assignments) (f:t_Formula) (return'  (x:t_ClauseState))= {[@expl:unit_propagate requires #0] [%#sassignments'14] inv self.current f}
  {[@expl:unit_propagate requires #1] [%#sassignments'15] inv'2 f}
  any
  [ return''0 (result:t_ClauseState)-> {[%#sassignments'14] inv self.final f}
    {[%#sassignments'16] eventually_sat_complete f self.final = eventually_sat_complete f self.current}
    {[%#sassignments'17] compatible self.current self.final}
    {[%#sassignments'18] match result with
      | C_Sat -> sat f self.final
      | C_Unsat -> unsat f self.final
      | C_Unknown -> not complete self.final
      | C_Unit -> not complete self.current
      end}
    {[%#sassignments'19] complete self.current
     -> self.current = self.final /\ (result = C_Unsat \/ sat f self.current)}
    (! return' {result}) ]


predicate resolve (self : MutBorrow.t t_Assignments) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0 : MutBorrow.t t_Assignments) =
  resolve _0

type t_Option  =
  | C_None
  | C_Some bool

meta "compute_max_steps" 1000000

let rec do_unit_propagation[#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 242 4 242 70] (self:MutBorrow.t t_Assignments) (f:t_Formula) (return'  (x:t_Option))= {[@expl:do_unit_propagation requires #0] [%#sassignments'5] inv'2 f}
  {[@expl:do_unit_propagation requires #1] [%#sassignments'6] inv self.current f}
  (! bb0
  [ bb0 = s0 [ s0 =  [ &_old_a <- [%#sassignments] self'0 ] s1 | s1 = bb1 ] 
  | bb1 = s0 [ s0 =  [ &old_2_0 <- self'0 ] s1 | s1 = bb2 ] 
  | bb2 = bb2'0
    [ bb2'0 = {[@expl:mut invariant] old_2_0.final = self'0.final}
      {[@expl:loop invariant #0] [%#sassignments'2] inv self'0.current f'0}
      {[@expl:loop invariant #1] [%#sassignments'1] compatible _old_a.current self'0.current}
      {[@expl:loop invariant #2] [%#sassignments'0] eventually_sat_complete f'0 _old_a.current
       -> eventually_sat_complete f'0 self'0.current}
      (! s0) [ s0 = bb3 ] 
      [ bb3 = s0
        [ s0 = MutBorrow.borrow_mut <t_Assignments> {self'0.current}
            (fun (_ret:MutBorrow.t t_Assignments) ->
               [ &_20 <- _ret ] 
               [ &self'0 <- { self'0 with current = _ret.final } ] 
              s1)
        | s1 = unit_propagate {_20} {f'0} (fun (_ret:t_ClauseState) ->  [ &_19 <- _ret ] s2)
        | s2 = bb4 ]
      
      | bb4 = any
        [ br0 -> {_19 = C_Sat} (! bb6)
        | br1 -> {_19 = C_Unsat} (! bb7)
        | br2 -> {_19 = C_Unit} (! bb9)
        | br3 -> {_19 = C_Unknown} (! bb8) ]
      
      | bb9 = bb2'0 ]
     ]
  
  | bb8 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 = bb10 ] 
  | bb10 = s0 [ s0 =  [ &_0 <- C_None ] s1 | s1 = bb13 ] 
  | bb7 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 = bb11 ] 
  | bb11 = s0 [ s0 =  [ &_0 <- C_Some ([%#sassignments'3] false) ] s1 | s1 = bb13 ] 
  | bb6 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 = bb12 ] 
  | bb12 = s0 [ s0 =  [ &_0 <- C_Some ([%#sassignments'4] true) ] s1 | s1 = bb13 ] 
  | bb13 = return''0 {_0} ]
  )
  [ & _0 : t_Option = Any.any_l ()
  | & self'0 : MutBorrow.t t_Assignments = self
  | & f'0 : t_Formula = f
  | & _old_a : MutBorrow.t t_Assignments = Any.any_l ()
  | & _19 : t_ClauseState = Any.any_l ()
  | & _20 : MutBorrow.t t_Assignments = Any.any_l ()
  | & old_2_0 : MutBorrow.t t_Assignments = Any.any_l () ]
  
  [ return''0 (result:t_Option)-> {[@expl:do_unit_propagation ensures #0] [%#sassignments'6] inv self.final f}
    {[@expl:do_unit_propagation ensures #1] [%#sassignments'7] eventually_sat_complete f self.current
    = eventually_sat_complete f self.final}
    {[@expl:do_unit_propagation ensures #2] [%#sassignments'8] compatible self.current self.final}
    {[@expl:do_unit_propagation ensures #3] [%#sassignments'9] result = C_Some false  -> unsat f self.final}
    {[@expl:do_unit_propagation ensures #4] [%#sassignments'10] result = C_Some true  -> sat f self.final}
    {[@expl:do_unit_propagation ensures #5] [%#sassignments'11] result = C_None  -> not complete self.final}
    (! return' {result}) ]
  
