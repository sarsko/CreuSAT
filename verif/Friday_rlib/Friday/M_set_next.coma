(* #"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 154 0 154 39 *)

let%span slib = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 157 17 157 18
let%span slib'0 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 149 11 149 38
let%span slib'1 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 150 11 150 44
let%span slib'2 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 151 0 151 41
let%span slib'3 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 152 10 152 39
let%span slib'4 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 153 10 153 34
let%span slib'5 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 21 9 21 14
let%span slib'6 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 85 12 87 49
let%span svec = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/vec.rs" 158 27 158 46
let%span svec'0 = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/vec.rs" 159 26 159 54
let%span svec'1 = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/vec.rs" 160 26 160 57
let%span svec'2 = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/vec.rs" 161 26 161 62
let%span svec'3 = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/vec.rs" 162 26 162 55
let%span svec'4 = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/model.rs" 72 8 72 22
let%span sslice = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/slice.rs" 130 20 130 37
let%span sslice'1 = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/slice.rs" 137 20 137 94
let%span sresolve = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/resolve.rs" 54 20 54 34

use creusot.prelude.Opaque
use creusot.int.UInt64
use creusot.prelude.MutBorrow
use seq.Seq
use mach.int.Int
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec }

type t_Pasn  =
  { t_Pasn__assign: t_Assignments; t_Pasn__ix: UInt64.t }

let rec clone' (self:t_Pasn) (return'  (x:t_Pasn))= any
  [ return''0 (result:t_Pasn)-> {[%#slib'5] result = self} (! return' {result}) ]


predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq bool) =
  [%#sslice] UInt64.t'int self < Seq.length seq

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq bool

axiom view_spec : forall self : t_Vec . [%#svec'4] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : MutBorrow.t t_Vec) : Seq.seq bool =
  [%#smodel] view self.current

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq bool) (out : bool) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

predicate resolve_elswhere [@inline:trivial] (self : UInt64.t) (old' : Seq.seq bool) (fin : Seq.seq bool) =
  [%#sslice'1] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
   -> Seq.get old' i = Seq.get fin i

let rec index_mut (self_:MutBorrow.t t_Vec) (ix:UInt64.t) (return'  (x:MutBorrow.t bool))= {[@expl:index_mut requires] [%#svec] in_bounds ix (view'0 self_)}
  any
  [ return''0 (result:MutBorrow.t bool)-> {[%#svec'0] has_value ix (view'0 self_) result.current}
    {[%#svec'1] has_value ix (view self_.final) result.final}
    {[%#svec'2] resolve_elswhere ix (view'0 self_) (view self_.final)}
    {[%#svec'3] Seq.length (view self_.final) = Seq.length (view'0 self_)}
    (! return' {result}) ]


predicate resolve (self : MutBorrow.t bool) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0 : MutBorrow.t bool) =
  resolve _0

constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)

predicate compatible [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 83 4 83 41] (self : t_Assignments) (pa : t_Pasn) =
  [%#slib'6] Seq.length (view (pa.t_Pasn__assign).t_Assignments__0) = Seq.length (view self.t_Assignments__0)
  /\ (forall i : int . 0 <= i /\ i < UInt64.t'int pa.t_Pasn__ix
   -> Seq.get (view (pa.t_Pasn__assign).t_Assignments__0) i = Seq.get (view self.t_Assignments__0) i)

meta "compute_max_steps" 1000000

let rec set_next[#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 154 0 154 39] (pa:t_Pasn) (b:bool) (return'  (x:t_Pasn))= {[@expl:set_next requires #0] [%#slib'0] UInt64.t'int pa.t_Pasn__ix
  < Seq.length (view (pa.t_Pasn__assign).t_Assignments__0)}
  {[@expl:set_next requires #1] [%#slib'1] Seq.length (view (pa.t_Pasn__assign).t_Assignments__0)
  <= UInt64.t'int v_MAX'0}
  (! bb0
  [ bb0 = s0 [ s0 = clone' {pa'0} (fun (_ret:t_Pasn) ->  [ &new_pa <- _ret ] s1) | s1 = bb1 ] 
  | bb1 = s0
    [ s0 = MutBorrow.borrow_mut <t_Vec> {(new_pa.t_Pasn__assign).t_Assignments__0}
        (fun (_ret:MutBorrow.t t_Vec) ->
           [ &_12 <- _ret ] 
           [ &new_pa <- { new_pa with t_Pasn__assign = { t_Assignments__0 = _ret.final } } ] 
          s1)
    | s1 = index_mut {_12} {pa'0.t_Pasn__ix} (fun (_ret:MutBorrow.t bool) ->  [ &_11 <- _ret ] s2)
    | s2 = bb2 ]
  
  | bb2 = s0
    [ s0 =  [ &_11 <- { _11 with current = b'0 } ] s1
    | s1 = -{resolve'0 _11}- s2
    | s2 = UInt64.add {new_pa.t_Pasn__ix} {[%#slib] (1 : UInt64.t)}
        (fun (_ret:UInt64.t) ->  [ &new_pa <- { new_pa with t_Pasn__ix = _ret } ] s3)
    | s3 =  [ &_0 <- new_pa ] s4
    | s4 = bb3 ]
  
  | bb3 = return''0 {_0} ]
  )
  [ & _0 : t_Pasn = Any.any_l ()
  | & pa'0 : t_Pasn = pa
  | & b'0 : bool = b
  | & new_pa : t_Pasn = Any.any_l ()
  | & _11 : MutBorrow.t bool = Any.any_l ()
  | & _12 : MutBorrow.t t_Vec = Any.any_l () ]
  
  [ return''0 (result:t_Pasn)-> {[@expl:set_next ensures #0] [%#slib'2] compatible result.t_Pasn__assign pa}
    {[@expl:set_next ensures #1] [%#slib'3] Seq.get (view (result.t_Pasn__assign).t_Assignments__0) (UInt64.t'int pa.t_Pasn__ix)
    = b}
    {[@expl:set_next ensures #2] [%#slib'4] UInt64.t'int result.t_Pasn__ix = UInt64.t'int pa.t_Pasn__ix + 1}
    (! return' {result}) ]
  
