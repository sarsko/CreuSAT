(* #"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 136 4 136 43 *)

(* Formula *)

let%span slib = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 137 27 137 28
let%span slib'0 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 138 20 138 80
let%span slib'1 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 143 17 143 18
let%span slib'2 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 141 23 141 28
let%span slib'3 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 145 8 145 12
let%span slib'4 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 133 15 133 31
let%span slib'5 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 134 15 134 43
let%span slib'6 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 135 14 135 36
let%span slib'7 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 108 12 109 33
let%span slib'8 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 115 15 115 45
let%span slib'9 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 116 14 116 36
let%span slib'10 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 45 12 46 39
let%span slib'11 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 75 12 75 41
let%span slib'12 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 56 12 57 42
let%span slib'13 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 67 12 67 25
let%span svec = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/vec.rs" 21 14 21 41
let%span svec'0 = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/vec.rs" 89 26 89 48
let%span svec'1 = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/vec.rs" 168 27 168 46
let%span svec'2 = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/vec.rs" 169 26 169 54
let%span smodel = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/model.rs" 54 8 54 22
let%span sslice = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/std/slice.rs" 130 20 130 37
let%span sinvariant = "/Users/sarekhs/.cargo/git/checkouts/creusot-35eaee8d7346d14d/4f7f6cd/creusot-contracts/src/invariant.rs" 25 8 25 18

use creusot.int.UInt64
use mach.int.Int
use creusot.prelude.Opaque
use seq.Seq
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Clause  =
  { t_Clause__0: t_Vec }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec'0 }

type t_Lit  =
  { t_Lit__var: UInt64.t; t_Lit__value: bool }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Lit

axiom view_spec : forall self : t_Vec . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : t_Vec'0) : Seq.seq bool

axiom view_spec'0 : forall self : t_Vec'0 . [%#svec] Seq.length (view'0 self) <= UInt64.t'int (v_MAX : UInt64.t)

predicate sat [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 73 4 73 44] (self : t_Lit) (a : t_Assignments) =
  [%#slib'11] Seq.get (view'0 a.t_Assignments__0) (UInt64.t'int self.t_Lit__var) = self.t_Lit__value

predicate sat'0 [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 106 4 106 40] (self : t_Clause) (a : t_Assignments) =
  [%#slib'7] exists i : int . 0 <= i
  /\ i < Seq.length (view self.t_Clause__0) /\ sat (Seq.get (view self.t_Clause__0) i) a

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

function view'1 (self : t_Vec'1) : Seq.seq t_Clause

axiom view_spec'1 : forall self : t_Vec'1 . [%#svec] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

type t_Formula  =
  { t_Formula__clauses: t_Vec'1; t_Formula__num_vars: UInt64.t }

function view'2 (self : t_Vec'1) : Seq.seq t_Clause =
  [%#smodel] view'1 self

let rec len (self_:t_Vec'1) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec'0] UInt64.t'int result = Seq.length (view'2 self_)} (! return' {result}) ]


predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Clause) =
  [%#sslice] UInt64.t'int self < Seq.length seq

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Clause) (out : t_Clause) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec'1) (ix:UInt64.t) (return'  (x:t_Clause))= {[@expl:index requires] [%#svec'1] in_bounds ix (view'2 self_)}
  any [ return''0 (result:t_Clause)-> {[%#svec'2] has_value ix (view'2 self_) result} (! return' {result}) ] 

predicate var_in_range [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 65 4 65 45] (self : t_Lit) (n : int) =
  [%#slib'13] UInt64.t'int self.t_Lit__var < n

predicate vars_in_range [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 54 4 54 42] (self : t_Clause) (n : int) =
  [%#slib'12] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Clause__0)
   -> var_in_range (Seq.get (view self.t_Clause__0) i) n

let rec eval (self:t_Clause) (a:t_Assignments) (return'  (x:bool))= {[@expl:eval requires] [%#slib'8] vars_in_range self (Seq.length (view'0 a.t_Assignments__0))}
  any [ return''0 (result:bool)-> {[%#slib'9] result = sat'0 self a} (! return' {result}) ] 

predicate inv (_0 : t_Formula)

axiom inv_axiom [@rewrite] : forall x : t_Formula [inv x] . inv x = true

predicate invariant' (self : t_Formula) =
  [%#sinvariant] inv self

predicate sat'1 [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 43 4 43 40] (self : t_Formula) (a : t_Assignments) =
  [%#slib'10] forall i : int . 0 <= i /\ i < Seq.length (view'1 self.t_Formula__clauses)
   -> sat'0 (Seq.get (view'1 self.t_Formula__clauses) i) a

meta "compute_max_steps" 1000000

let rec eval'0[#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 136 4 136 43] (self:t_Formula) (a:t_Assignments) (return'  (x:bool))= {[@expl:eval requires #0] [%#slib'4] invariant' self}
  {[@expl:eval requires #1] [%#slib'5] Seq.length (view'0 a.t_Assignments__0) = UInt64.t'int self.t_Formula__num_vars}
  (! bb0
  [ bb0 = s0 [ s0 =  [ &i <- [%#slib] (0 : UInt64.t) ] s1 | s1 = bb1 ] 
  | bb1 = bb1'0
    [ bb1'0 = {[@expl:loop invariant] [%#slib'0] forall j : int . 0 <= j /\ j < UInt64.t'int i
       -> sat'0 (Seq.get (view'1 self'0.t_Formula__clauses) j) a'0}
      (! s0) [ s0 = bb2 ] 
      [ bb2 = s0 [ s0 = len {self'0.t_Formula__clauses} (fun (_ret:UInt64.t) ->  [ &_13 <- _ret ] s1) | s1 = bb3 ] 
      | bb3 = s0
        [ s0 =  [ &_11 <- UInt64.lt i _13 ] s1 | s1 = any [ br0 -> {_11 = false} (! bb9) | br1 -> {_11} (! bb4) ]  ]
      
      | bb4 = s0
        [ s0 = index {self'0.t_Formula__clauses} {i} (fun (_ret:t_Clause) ->  [ &_18 <- _ret ] s1) | s1 = bb5 ]
      
      | bb5 = s0 [ s0 = eval {_18} {a'0} (fun (_ret:bool) ->  [ &_16 <- _ret ] s1) | s1 = bb6 ] 
      | bb6 = any [ br0 -> {_16 = false} (! bb8) | br1 -> {_16} (! bb7) ] 
      | bb7 = s0
        [ s0 = UInt64.add {i} {[%#slib'1] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s1) | s1 = bb1'0 ]
       ]
     ]
  
  | bb8 = s0 [ s0 =  [ &_0 <- [%#slib'2] false ] s1 | s1 = bb10 ] 
  | bb9 = s0 [ s0 =  [ &_0 <- [%#slib'3] true ] s1 | s1 = bb10 ] 
  | bb10 = return''0 {_0} ]
  )
  [ & _0 : bool = Any.any_l ()
  | & self'0 : t_Formula = self
  | & a'0 : t_Assignments = a
  | & i : UInt64.t = Any.any_l ()
  | & _11 : bool = Any.any_l ()
  | & _13 : UInt64.t = Any.any_l ()
  | & _16 : bool = Any.any_l ()
  | & _18 : t_Clause = Any.any_l () ]
   [ return''0 (result:bool)-> {[@expl:eval ensures] [%#slib'6] result = sat'1 self a} (! return' {result}) ] 
