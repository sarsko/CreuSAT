(* #"/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 47 0 47 49 *)

let%span sassignments = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 105 15 105 28
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 106 14 106 28
let%span sassignments'1 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 107 14 107 78
let%span sassignments'2 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 78 12 78 64
let%span sassignments'3 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 17 4 17 12
let%span sassignments'4 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 56 8 56 61
let%span sassignments'5 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 47 8 48 43
let%span sassignments'6 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 63 4 63 49
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 80 26 80 44
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span sinvariant = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/invariant.rs" 25 8 25 18
let%span slogic = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 48 8 52 9
let%span sdecision = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 25 15 25 28
let%span sdecision'0 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 26 14 26 37
let%span sdecision'1 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 16 12 18 38
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34
let%span sclause = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 92 12 93 31
let%span sclause'0 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 19 4 19 12
let%span sclause'1 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 71 12 72 37
let%span sclause'2 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 109 8 109 29
let%span slit = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 39 20 39 33
let%span slit'0 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 46 12 49 13
let%span sformula = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 130 15 131 55
let%span sformula'0 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 132 14 136 5
let%span sformula'1 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 137 14 137 45
let%span sformula'2 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 57 20 57 69
let%span sformula'3 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 64 12 64 113
let%span sformula'4 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 30 8 31 31
let%span sformula'5 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 122 12 123 41
let%span sformula'6 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 41 12 42 54
let%span sformula'7 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 85 20 85 49
let%span sformula'8 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 79 20 79 58
let%span sformula'9 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 92 12 93 45
let%span sformula'10 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 22 8 22 51
let%span sformula'11 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 50 12 50 118
let%span sformula'12 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 72 12 72 128
let%span ssolver = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 48 40 48 58
let%span ssolver'0 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 53 18 53 50
let%span ssolver'1 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 37 11 38 54
let%span ssolver'2 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 39 10 45 1
let%span ssolver'3 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 46 10 46 47
let%span ssolver'4 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 12 11 12 24
let%span ssolver'5 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 13 11 13 20
let%span ssolver'6 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 14 11 14 29
let%span ssolver'7 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 15 10 15 48
let%span ssolver'8 = "/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 16 10 16 59

use creusot.prelude.MutBorrow
use creusot.prelude.Opaque
use creusot.int.UInt64
use mach.int.Int
use seq.Seq
use creusot.int.UInt8
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec; t_Formula__num_vars: UInt64.t }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_SatResult  =
  | C_Sat t_Vec'0
  | C_Unsat
  | C_Unknown

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

type t_Clause  =
  { t_Clause__rest: t_Vec'1 }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Clause

axiom view_spec : forall self : t_Vec . [%#svec'0] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function view'0 (self : t_Vec'1) : Seq.seq t_Lit

axiom view_spec'0 : forall self : t_Vec'1 . [%#svec'0] Seq.length (view'0 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 21 4 21 33] (self : t_Clause) : Seq.seq t_Lit =
  [%#sclause'0] view'0 self.t_Clause__rest

predicate inv [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 38 4 38 36] (self : t_Lit) (n : int) =
  [%#slit] UInt64.t'int self.t_Lit__idx < n

predicate vars_in_range [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 90 4 90 46] (self : t_Clause) (n : int) =
  [%#sclause] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)  -> inv (Seq.get (view'1 self) i) n

predicate sat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 44 4 44 57] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'0] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0


predicate sat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 69 4 69 57] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'1] exists i : int . 0 <= i /\ i < Seq.length (view'1 self) /\ sat_inner (Seq.get (view'1 self) i) a

predicate sat_inner'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 90 4 90 57] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'9] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> sat_inner'0 (Seq.get (view self.t_Formula__clauses) i) a

predicate eventually_sat_no_ass [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 56 4 56 46] (self : t_Formula) =
  [%#sformula'2] exists a2 : Seq.seq UInt8.t . sat_inner'1 self a2

type tuple  =
  { _0: Seq.seq t_Clause; _1: int }

predicate formula_sat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 28 0 28 78] (f : tuple) (a : Seq.seq UInt8.t)

 =
  [%#sformula'4] forall i : int . 0 <= i /\ i < Seq.length f._0  -> sat_inner'0 (Seq.get f._0 i) a

function view'2 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 21 4 21 33] (self : t_Formula) : tuple =
  [%#sformula'10] { _0 = view self.t_Formula__clauses; _1 = UInt64.t'int self.t_Formula__num_vars }

function view'3 (self : MutBorrow.t t_Formula) : tuple =
  [%#smodel] view'2 self.current

function view'4 (self : t_Vec'0) : Seq.seq UInt8.t

axiom view_spec'1 : forall self : t_Vec'0 . [%#svec'0] Seq.length (view'4 self) <= UInt64.t'int (v_MAX : UInt64.t)

predicate contains_empty_clause [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 120 4 120 46] (self : t_Formula) =
  [%#sformula'5] exists i : int . 0 <= i
  /\ i < Seq.length (view self.t_Formula__clauses) /\ Seq.length (view'1 (Seq.get (view self.t_Formula__clauses) i)) = 0

predicate unset [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 46 0 46 38] (v : UInt8.t) =
  [%#slogic] if UInt8.t'int v >= 2 then true else false

predicate complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 54 0 54 52] (a : Seq.seq UInt8.t) =
  [%#sassignments'4] forall i : int . 0 <= i /\ i < Seq.length a  -> not unset (Seq.get a i)

predicate eventually_sat_complete_no_ass [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 62 4 62 55] (self : t_Formula)

 =
  [%#sformula'3] exists a2 : Seq.seq UInt8.t . Seq.length a2 = UInt64.t'int self.t_Formula__num_vars
  /\ complete_inner a2 /\ sat_inner'1 self a2

predicate inv'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 108 4 108 36] (self : t_Clause) (n : int) =
  [%#sclause'2] vars_in_range self n

predicate invariant' [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 39 4 39 34] (self : t_Formula) =
  [%#sformula'6] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> inv'0 (Seq.get (view self.t_Formula__clauses) i) (UInt64.t'int self.t_Formula__num_vars)

let rec check_and_establish_formula_invariant (self:MutBorrow.t t_Formula) (return'  (x:t_SatResult))= {[@expl:check_and_establish_formula_invariant requires] [%#sformula] forall i : int . 0
  <= i
  /\ i < Seq.length (view (self.current).t_Formula__clauses)
   -> vars_in_range (Seq.get (view (self.current).t_Formula__clauses) i) (UInt64.t'int (v_MAX : UInt64.t))}
  any
  [ return''0 (result:t_SatResult)-> {[%#sformula'0] match result with
      | C_Sat assn -> eventually_sat_no_ass self.final /\ formula_sat_inner (view'3 self) (view'4 assn)
      | C_Unsat -> contains_empty_clause self.final /\ not eventually_sat_complete_no_ass self.current
      | C_Unknown -> invariant' self.final
      end}
    {[%#sformula'1] (self.current).t_Formula__clauses = (self.final).t_Formula__clauses}
    (! return' {result}) ]


predicate resolve (self : MutBorrow.t t_Formula) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0'0 : MutBorrow.t t_Formula) =
  resolve _0'0

type t_Assignments  =
  { t_Assignments__0: t_Vec'0; t_Assignments__1: UInt64.t }

predicate inv'1 (_0'0 : t_Formula)

axiom inv_axiom [@rewrite] : forall x : t_Formula [inv'1 x] . inv'1 x = true

predicate invariant''0 (self : t_Formula) =
  [%#sinvariant] inv'1 self

function view'5 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#sassignments'3] view'4 self.t_Assignments__0

predicate inv'2 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 76 4 76 40] (self : t_Assignments) (f : t_Formula)

 =
  [%#sassignments'2] UInt64.t'int f.t_Formula__num_vars = Seq.length (view'5 self)
  /\ UInt64.t'int self.t_Assignments__1 <= UInt64.t'int f.t_Formula__num_vars

let rec new (f:t_Formula) (return'  (x:t_Assignments))= {[@expl:new requires] [%#sassignments] invariant''0 f}
  any
  [ return''0 (result:t_Assignments)-> {[%#sassignments'0] inv'2 result f}
    {[%#sassignments'1] forall i : int . 0 <= i /\ i < Seq.length (view'5 result)  -> unset (Seq.get (view'5 result) i)}
    (! return' {result}) ]


type t_RawVec'2  =
  { t_RawVec__inner'2: t_RawVecInner; t_RawVec__qy95zmarker'2: () }

type t_Vec'2  =
  { t_Vec__buf'2: t_RawVec'2; t_Vec__len'2: UInt64.t }

type t_Decisions  =
  { t_Decisions__lit_order: t_Vec'2 }

function view'6 (self : t_Vec'2) : Seq.seq UInt64.t

axiom view_spec'2 : forall self : t_Vec'2 . [%#svec'0] Seq.length (view'6 self) <= UInt64.t'int (v_MAX : UInt64.t)

predicate inv'3 [#"/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 14 4 14 36] (self : t_Decisions) (n : int) =
  [%#sdecision'1] Seq.length (view'6 self.t_Decisions__lit_order) = n
  /\ (forall i : int . 0 <= i /\ i < Seq.length (view'6 self.t_Decisions__lit_order)
   -> UInt64.t'int (Seq.get (view'6 self.t_Decisions__lit_order) i) < n)

let rec new'0 (f:t_Formula) (return'  (x:t_Decisions))= {[@expl:new requires] [%#sdecision] invariant''0 f}
  any
  [ return''0 (result:t_Decisions)-> {[%#sdecision'0] inv'3 result (UInt64.t'int f.t_Formula__num_vars)}
    (! return' {result}) ]


predicate compatible_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 45 0 45 78] (a : Seq.seq UInt8.t) (a2 : Seq.seq UInt8.t)

 =
  [%#sassignments'5] Seq.length a = Seq.length a2
  /\ (forall i : int . 0 <= i /\ i < Seq.length a  -> unset (Seq.get a i) \/ Seq.get a i = Seq.get a2 i)

predicate eventually_sat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 48 4 48 68] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'11] exists a2 : Seq.seq UInt8.t . Seq.length a2 = UInt64.t'int self.t_Formula__num_vars
  /\ compatible_inner a a2 /\ sat_inner'1 self a2

predicate eventually_sat [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 84 4 84 55] (self : t_Formula) (a : t_Assignments)

 =
  [%#sformula'7] eventually_sat_inner self (view'5 a)

predicate compatible_complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 62 0 62 87] (a : Seq.seq UInt8.t) (a2 : Seq.seq UInt8.t)

 =
  [%#sassignments'6] compatible_inner a a2 /\ complete_inner a2

predicate eventually_sat_complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 70 4 70 77] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'12] exists a2 : Seq.seq UInt8.t . Seq.length a2 = UInt64.t'int self.t_Formula__num_vars
  /\ compatible_complete_inner a a2 /\ sat_inner'1 self a2

predicate eventually_sat_complete [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 78 4 78 64] (self : t_Formula) (a : t_Assignments)

 =
  [%#sformula'8] eventually_sat_complete_inner self (view'5 a)

let rec inner (f:t_Formula) (a:t_Assignments) (d:t_Decisions) (return'  (x:bool))= {[@expl:inner requires #0] [%#ssolver'4] invariant''0 f}
  {[@expl:inner requires #1] [%#ssolver'5] inv'2 a f}
  {[@expl:inner requires #2] [%#ssolver'6] inv'3 d (UInt64.t'int f.t_Formula__num_vars)}
  any
  [ return''0 (result:bool)-> {[%#ssolver'7] result = true  -> eventually_sat f a}
    {[%#ssolver'8] result = false  -> not eventually_sat_complete f a}
    (! return' {result}) ]


let rec new'1 (return'  (x:t_Vec'0))= any
  [ return''0 (result:t_Vec'0)-> {[%#svec] Seq.length (view'4 result) = 0} (! return' {result}) ]


meta "compute_max_steps" 1000000

let rec solver[#"/Users/sarekhs/CreuSAT/Robinson/src/solver.rs" 47 0 47 49] (formula:MutBorrow.t t_Formula) (return'  (x:t_SatResult))= {[@expl:solver requires] [%#ssolver'1] forall i : int . 0
  <= i
  /\ i < Seq.length (view (formula.current).t_Formula__clauses)
   -> vars_in_range (Seq.get (view (formula.current).t_Formula__clauses) i) (UInt64.t'int (v_MAX : UInt64.t))}
  (! bb0
  [ bb0 = s0 [ s0 =  [ &old_f <- [%#ssolver] formula'0 ] s1 | s1 = bb1 ] 
  | bb1 = s0
    [ s0 = MutBorrow.borrow_final <t_Formula> {formula'0.current} {MutBorrow.get_id formula'0}
        (fun (_ret:MutBorrow.t t_Formula) ->
           [ &_10 <- _ret ] 
           [ &formula'0 <- { formula'0 with current = _ret.final } ] 
          s1)
    | s1 = check_and_establish_formula_invariant {_10} (fun (_ret:t_SatResult) ->  [ &_9 <- _ret ] s2)
    | s2 = bb2 ]
  
  | bb2 = any
    [ br0 (x0:t_Vec'0)-> {_9 = C_Sat x0} (! bb3) | br1 -> {_9 = C_Unsat} (! bb3) | br2 -> {_9 = C_Unknown} (! bb4) ]
  
  | bb3 = s0 [ s0 = -{resolve'0 formula'0}- s1 | s1 =  [ &o <- _9 ] s2 | s2 =  [ &_0'0 <- o ] s3 | s3 = bb18 ] 
  | bb18 = bb19
  | bb19 = bb20
  | bb4 = bb5
  | bb5 = bb6
  | bb6 = s0
    [ s0 = {[@expl:assertion] [%#ssolver'0] (formula'0.current).t_Formula__clauses = (old_f.current).t_Formula__clauses}
      s1
    | s1 = new {formula'0.current} (fun (_ret:t_Assignments) ->  [ &assignments <- _ret ] s2)
    | s2 = bb7 ]
  
  | bb7 = s0 [ s0 = new'0 {formula'0.current} (fun (_ret:t_Decisions) ->  [ &decisions <- _ret ] s1) | s1 = bb8 ] 
  | bb8 = s0
    [ s0 =  [ &_25 <- decisions ] s1
    | s1 = inner {formula'0.current} {assignments} {_25} (fun (_ret:bool) ->  [ &_21 <- _ret ] s2)
    | s2 = bb9 ]
  
  | bb9 = s0 [ s0 = -{resolve'0 formula'0}- s1 | s1 = any [ br0 -> {_21 = false} (! bb13) | br1 -> {_21} (! bb10) ]  ] 
  | bb10 = s0 [ s0 = new'1 (fun (_ret:t_Vec'0) ->  [ &_27 <- _ret ] s1) | s1 = bb11 ] 
  | bb11 = s0 [ s0 =  [ &_0'0 <- C_Sat _27 ] s1 | s1 = bb12 ] 
  | bb12 = bb15
  | bb13 = bb14
  | bb14 = s0 [ s0 =  [ &_0'0 <- C_Unsat ] s1 | s1 = bb15 ] 
  | bb15 = bb16
  | bb16 = bb17
  | bb17 = bb20
  | bb20 = return''0 {_0'0} ]
  )
  [ & _0'0 : t_SatResult = Any.any_l ()
  | & formula'0 : MutBorrow.t t_Formula = formula
  | & old_f : MutBorrow.t t_Formula = Any.any_l ()
  | & _9 : t_SatResult = Any.any_l ()
  | & _10 : MutBorrow.t t_Formula = Any.any_l ()
  | & o : t_SatResult = Any.any_l ()
  | & assignments : t_Assignments = Any.any_l ()
  | & decisions : t_Decisions = Any.any_l ()
  | & _21 : bool = Any.any_l ()
  | & _25 : t_Decisions = Any.any_l ()
  | & _27 : t_Vec'0 = Any.any_l () ]
  
  [ return''0 (result:t_SatResult)-> {[@expl:solver ensures #0] [%#ssolver'2] match result with
      | C_Sat _assn -> eventually_sat_no_ass formula.final
      | C_Unsat -> not eventually_sat_complete_no_ass formula.final
      | _ -> false
      end}
    {[@expl:solver ensures #1] [%#ssolver'3] (formula.final).t_Formula__clauses = (formula.current).t_Formula__clauses}
    (! return' {result}) ]
  
