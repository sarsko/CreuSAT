(* #"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 65 0 65 86 *)

let%span sassignments = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 63 4 63 49
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 47 8 48 43
let%span sassignments'1 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 56 8 56 61
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span slogic = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 58 11 58 24
let%span slogic'0 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 59 11 59 33
let%span slogic'1 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 60 11 60 50
let%span slogic'2 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 61 11 61 20
let%span slogic'3 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 62 11 62 45
let%span slogic'4 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 63 11 63 65
let%span slogic'5 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 64 10 64 55
let%span slogic'6 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 65 87 65 89
let%span slogic'7 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 48 8 52 9
let%span slogic'8 = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 22 8 28 9
let%span sclause = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 109 8 109 29
let%span sclause'0 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 92 12 93 31
let%span sclause'1 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 71 12 72 37
let%span sclause'2 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 19 4 19 12
let%span slit = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 39 20 39 33
let%span slit'0 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 46 12 49 13
let%span sformula = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 41 12 42 54
let%span sformula'0 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 72 12 72 128
let%span sformula'1 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 92 12 93 45

use creusot.prelude.Opaque
use creusot.int.UInt64
use creusot.int.UInt8
use seq.Seq
use mach.int.Int

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec; t_Formula__num_vars: UInt64.t }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Clause  =
  { t_Clause__rest: t_Vec'0 }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Clause

axiom view_spec : forall self : t_Vec . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function view'0 (self : t_Vec'0) : Seq.seq t_Lit

axiom view_spec'0 : forall self : t_Vec'0 . [%#svec] Seq.length (view'0 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 21 4 21 33] (self : t_Clause) : Seq.seq t_Lit =
  [%#sclause'2] view'0 self.t_Clause__rest

predicate inv [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 38 4 38 36] (self : t_Lit) (n : int) =
  [%#slit] UInt64.t'int self.t_Lit__idx < n

predicate vars_in_range [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 90 4 90 46] (self : t_Clause) (n : int) =
  [%#sclause'0] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)  -> inv (Seq.get (view'1 self) i) n

predicate inv'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 108 4 108 36] (self : t_Clause) (n : int) =
  [%#sclause] vars_in_range self n

predicate invariant' [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 39 4 39 34] (self : t_Formula) =
  [%#sformula] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> inv'0 (Seq.get (view self.t_Formula__clauses) i) (UInt64.t'int self.t_Formula__num_vars)

predicate unset [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 46 0 46 38] (v : UInt8.t) =
  [%#slogic'7] if UInt8.t'int v >= 2 then true else false

predicate compatible_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 45 0 45 78] (a : Seq.seq UInt8.t) (a2 : Seq.seq UInt8.t)

 =
  [%#sassignments'0] Seq.length a = Seq.length a2
  /\ (forall i : int . 0 <= i /\ i < Seq.length a  -> unset (Seq.get a i) \/ Seq.get a i = Seq.get a2 i)

predicate complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 54 0 54 52] (a : Seq.seq UInt8.t) =
  [%#sassignments'1] forall i : int . 0 <= i /\ i < Seq.length a  -> not unset (Seq.get a i)

predicate compatible_complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 62 0 62 87] (a : Seq.seq UInt8.t) (a2 : Seq.seq UInt8.t)

 =
  [%#sassignments] compatible_inner a a2 /\ complete_inner a2

predicate sat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 44 4 44 57] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'0] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0


predicate sat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 69 4 69 57] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'1] exists i : int . 0 <= i /\ i < Seq.length (view'1 self) /\ sat_inner (Seq.get (view'1 self) i) a

predicate sat_inner'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 90 4 90 57] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'1] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> sat_inner'0 (Seq.get (view self.t_Formula__clauses) i) a

predicate eventually_sat_complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 70 4 70 77] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'0] exists a2 : Seq.seq UInt8.t . Seq.length a2 = UInt64.t'int self.t_Formula__num_vars
  /\ compatible_complete_inner a a2 /\ sat_inner'1 self a2

function flip_v [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 20 0 20 44] (v : UInt8.t) : UInt8.t =
  [%#slogic'8] if UInt8.t'int v = 0 then (1 : UInt8.t) else if UInt8.t'int v = 1 then (0 : UInt8.t) else v

constant f  : t_Formula

constant a  : Seq.seq UInt8.t

constant ix  : int

constant v  : UInt8.t

function lemma_unit_forces [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 65 0 65 86] (f'0 : t_Formula) (a'0 : Seq.seq UInt8.t) (ix'0 : int) (v'0 : UInt8.t) : ()


goal vc_lemma_unit_forces : ([%#slogic] invariant' f)
 -> ([%#slogic'0] UInt64.t'int f.t_Formula__num_vars = Seq.length a)
 -> ([%#slogic'1] 0 <= ix /\ ix < Seq.length a /\ unset (Seq.get a ix))
 -> ([%#slogic'2] not unset v)
 -> ([%#slogic'3] eventually_sat_complete_inner f a)
 -> ([%#slogic'4] not eventually_sat_complete_inner f (Seq.set a ix (flip_v v)))
 -> ([%#slogic'5] eventually_sat_complete_inner f (Seq.set a ix v))
