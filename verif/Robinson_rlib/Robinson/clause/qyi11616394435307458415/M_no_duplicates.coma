(* #"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 213 4 213 39 *)

(* clause::Clause *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 89 26 89 48
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span sclause = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 214 27 214 28
let%span sclause'0 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 215 20 215 111
let%span sclause'1 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 218 31 218 32
let%span sclause'2 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 219 24 219 84
let%span sclause'3 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 225 21 225 22
let%span sclause'4 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 227 17 227 18
let%span sclause'5 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 223 27 223 32
let%span sclause'6 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 229 15 229 19
let%span sclause'7 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 212 14 212 51
let%span sclause'8 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 101 12 102 88
let%span sclause'9 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 19 4 19 12
let%span slit = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 22 20 22 29

use creusot.int.UInt64
use mach.int.Int
use seq.Seq
use creusot.prelude.Opaque
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Clause  =
  { t_Clause__rest: t_Vec }

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Lit

axiom view_spec : forall self : t_Vec . [%#svec'2] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 21 4 21 33] (self : t_Clause) : Seq.seq t_Lit =
  [%#sclause'9] view self.t_Clause__rest

function view'1 (self : t_Clause) : Seq.seq t_Lit =
  [%#smodel] view'0 self

function view'2 (self : t_Vec) : Seq.seq t_Lit =
  [%#smodel] view self

let rec len (self_:t_Vec) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec] UInt64.t'int result = Seq.length (view'2 self_)} (! return' {result}) ]


predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Lit) =
  [%#sslice] UInt64.t'int self < Seq.length seq

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Lit) (out : t_Lit) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:t_Lit))= {[@expl:index requires] [%#svec'0] in_bounds ix (view'2 self_)}
  any [ return''0 (result:t_Lit)-> {[%#svec'1] has_value ix (view'2 self_) result} (! return' {result}) ] 

function index_logic [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 21 4 21 35] (self : t_Lit) : int =
  [%#slit] UInt64.t'int self.t_Lit__idx

predicate no_duplicate_indexes [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 99 4 99 45] (self : t_Clause) =
  [%#sclause'8] forall j : int, k : int . 0 <= j /\ j < Seq.length (view'0 self) /\ 0 <= k /\ k < j
   -> not index_logic (Seq.get (view'0 self) k) = index_logic (Seq.get (view'0 self) j)

meta "compute_max_steps" 1000000

let rec no_duplicates[#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 213 4 213 39] (self:t_Clause) (return'  (x:bool))= (! bb0
  [ bb0 = s0 [ s0 =  [ &i <- [%#sclause] (0 : UInt64.t) ] s1 | s1 = bb1 ] 
  | bb1 = bb1'0
    [ bb1'0 = {[@expl:loop invariant] [%#sclause'0] forall j'0 : int, k : int . 0 <= j'0
      /\ j'0 < UInt64.t'int i /\ 0 <= k /\ k < j'0
       -> (Seq.get (view'1 self'0) j'0).t_Lit__idx <> (Seq.get (view'1 self'0) k).t_Lit__idx}
      (! s0) [ s0 = bb2 ] 
      [ bb2 = s0 [ s0 = len {self'0.t_Clause__rest} (fun (_ret:UInt64.t) ->  [ &_11 <- _ret ] s1) | s1 = bb3 ] 
      | bb3 = s0
        [ s0 =  [ &_9 <- UInt64.lt i _11 ] s1 | s1 = any [ br0 -> {_9 = false} (! bb13) | br1 -> {_9} (! bb4) ]  ]
      
      | bb4 = s0 [ s0 = index {self'0.t_Clause__rest} {i} (fun (_ret:t_Lit) ->  [ &_14 <- _ret ] s1) | s1 = bb5 ] 
      | bb5 = s0 [ s0 =  [ &lit1 <- _14 ] s1 | s1 =  [ &j <- [%#sclause'1] (0 : UInt64.t) ] s2 | s2 = bb6 ] 
      | bb6 = bb6'0
        [ bb6'0 = {[@expl:loop invariant] [%#sclause'2] forall k : int . 0 <= k /\ k < UInt64.t'int j
           -> lit1.t_Lit__idx <> (Seq.get (view'1 self'0) k).t_Lit__idx}
          (! s0) [ s0 = bb7 ] 
          [ bb7 = s0
            [ s0 =  [ &_21 <- UInt64.lt j i ] s1 | s1 = any [ br0 -> {_21 = false} (! bb12) | br1 -> {_21} (! bb8) ]  ]
          
          | bb8 = s0 [ s0 = index {self'0.t_Clause__rest} {j} (fun (_ret:t_Lit) ->  [ &_25 <- _ret ] s1) | s1 = bb9 ] 
          | bb9 = s0
            [ s0 =  [ &lit2 <- _25 ] s1
            | s1 =  [ &_29 <- lit1.t_Lit__idx = lit2.t_Lit__idx ] s2
            | s2 = any [ br0 -> {_29 = false} (! bb11) | br1 -> {_29} (! bb10) ]  ]
          
          | bb11 = s0
            [ s0 = UInt64.add {j} {[%#sclause'3] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &j <- _ret ] s1)
            | s1 = bb6'0 ]
           ]
         ]
      
      | bb12 = s0
        [ s0 = UInt64.add {i} {[%#sclause'4] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s1) | s1 = bb1'0 ]
       ]
     ]
  
  | bb10 = s0 [ s0 =  [ &_0 <- [%#sclause'5] false ] s1 | s1 = bb14 ] 
  | bb13 = s0 [ s0 =  [ &_0 <- [%#sclause'6] true ] s1 | s1 = bb14 ] 
  | bb14 = return''0 {_0} ]
  )
  [ & _0 : bool = Any.any_l ()
  | & self'0 : t_Clause = self
  | & i : UInt64.t = Any.any_l ()
  | & _9 : bool = Any.any_l ()
  | & _11 : UInt64.t = Any.any_l ()
  | & lit1 : t_Lit = Any.any_l ()
  | & _14 : t_Lit = Any.any_l ()
  | & j : UInt64.t = Any.any_l ()
  | & _21 : bool = Any.any_l ()
  | & lit2 : t_Lit = Any.any_l ()
  | & _25 : t_Lit = Any.any_l ()
  | & _29 : bool = Any.any_l () ]
  
  [ return''0 (result:bool)-> {[@expl:no_duplicates ensures] [%#sclause'7] result = no_duplicate_indexes self}
    (! return' {result}) ]
  
