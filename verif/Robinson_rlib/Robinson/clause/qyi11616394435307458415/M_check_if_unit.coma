(* #"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 134 4 134 77 *)

(* clause::Clause *)

let%span sassignments = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 78 12 78 64
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 92 12 92 73
let%span sassignments'1 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 17 4 17 12
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 89 26 89 48
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span sinvariant = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/invariant.rs" 25 8 25 18
let%span slogic = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 48 8 52 9
let%span sclause = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 135 27 135 28
let%span sclause'0 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 136 28 136 29
let%span sclause'1 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 137 36 137 37
let%span sclause'2 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 147 20 147 49
let%span sclause'3 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 145 20 146 81
let%span sclause'4 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 144 20 144 69
let%span sclause'5 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 142 20 143 76
let%span sclause'6 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 141 20 141 60
let%span sclause'7 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 138 8 138 57
let%span sclause'8 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 139 20 139 36
let%span sclause'9 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 138 20 138 55
let%span sclause'10 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 154 32 154 33
let%span sclause'11 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 158 30 158 31
let%span sclause'12 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 160 17 160 18
let%span sclause'13 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 162 25 162 26
let%span sclause'14 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 127 15 127 35
let%span sclause'15 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 128 15 128 29
let%span sclause'16 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 129 15 129 25
let%span sclause'17 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 130 14 130 63
let%span sclause'18 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 131 14 131 65
let%span sclause'19 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 132 14 132 81
let%span sclause'20 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 133 14 133 64
let%span sclause'21 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 109 8 109 29
let%span sclause'22 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 79 20 79 38
let%span sclause'23 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 64 20 64 40
let%span sclause'24 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 49 20 49 39
let%span sclause'25 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 19 4 19 12
let%span sclause'26 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 92 12 93 31
let%span sclause'27 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 71 12 72 37
let%span sclause'28 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 56 12 57 39
let%span sclause'29 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 40 12 43 96
let%span slit = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 83 20 83 40
let%span slit'0 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 89 20 89 40
let%span slit'1 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 102 15 102 33
let%span slit'2 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 103 14 103 36
let%span slit'3 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 123 15 123 33
let%span slit'4 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 124 14 124 38
let%span slit'5 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 68 12 68 30
let%span slit'6 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 57 12 60 13
let%span slit'7 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 39 20 39 33
let%span slit'8 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 76 12 76 30
let%span slit'9 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 46 12 49 13

use creusot.int.UInt64
use mach.int.Int
use creusot.prelude.Opaque
use creusot.int.UInt8
use seq.Seq
use creusot.prelude.Any

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec; t_Assignments__1: UInt64.t }

predicate unset_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 66 4 66 59] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'5] UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) >= 2

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq UInt8.t

axiom view_spec : forall self : t_Vec . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#sassignments'1] view self.t_Assignments__0

predicate unset [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 82 4 82 46] (self : t_Lit) (a : t_Assignments) =
  [%#slit] unset_inner self (view'0 a)

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Clause  =
  { t_Clause__rest: t_Vec'0 }

function view'1 (self : t_Vec'0) : Seq.seq t_Lit

axiom view_spec'0 : forall self : t_Vec'0 . [%#svec] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'2 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 21 4 21 33] (self : t_Clause) : Seq.seq t_Lit =
  [%#sclause'25] view'1 self.t_Clause__rest

function view'3 (self : t_Clause) : Seq.seq t_Lit =
  [%#smodel] view'2 self

predicate unsat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 55 4 55 59] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'6] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1


predicate unsat [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 88 4 88 46] (self : t_Lit) (a : t_Assignments) =
  [%#slit'0] unsat_inner self (view'0 a)

function view'4 (self : t_Vec'0) : Seq.seq t_Lit =
  [%#smodel] view'1 self

let rec len (self_:t_Vec'0) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec'0] UInt64.t'int result = Seq.length (view'4 self_)} (! return' {result}) ]


predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Lit) =
  [%#sslice] UInt64.t'int self < Seq.length seq

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Lit) (out : t_Lit) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec'0) (ix:UInt64.t) (return'  (x:t_Lit))= {[@expl:index requires] [%#svec'1] in_bounds ix (view'4 self_)}
  any [ return''0 (result:t_Lit)-> {[%#svec'2] has_value ix (view'4 self_) result} (! return' {result}) ] 

predicate inv [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 38 4 38 36] (self : t_Lit) (n : int) =
  [%#slit'7] UInt64.t'int self.t_Lit__idx < n

function view'5 (self : t_Assignments) : Seq.seq UInt8.t =
  [%#smodel] view'0 self

predicate sat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 44 4 44 57] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'9] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0


predicate sat [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 74 4 74 44] (self : t_Lit) (a : t_Assignments) =
  [%#slit'8] sat_inner self (view'0 a)

let rec lit_sat (self:t_Lit) (a:t_Assignments) (return'  (x:bool))= {[@expl:lit_sat requires] [%#slit'1] inv self (Seq.length (view'5 a))}
  any [ return''0 (result:bool)-> {[%#slit'2] result = sat self a} (! return' {result}) ] 

let rec lit_unset (self:t_Lit) (a:t_Assignments) (return'  (x:bool))= {[@expl:lit_unset requires] [%#slit'3] inv self (Seq.length (view'5 a))}
  any [ return''0 (result:bool)-> {[%#slit'4] result = unset self a} (! return' {result}) ] 

type t_ClauseState  =
  | C_Sat
  | C_Unsat
  | C_Unit
  | C_Unknown

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec'1; t_Formula__num_vars: UInt64.t }

predicate vars_in_range [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 90 4 90 46] (self : t_Clause) (n : int) =
  [%#sclause'26] forall i : int . 0 <= i /\ i < Seq.length (view'2 self)  -> inv (Seq.get (view'2 self) i) n

predicate inv'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 108 4 108 36] (self : t_Clause) (n : int) =
  [%#sclause'21] vars_in_range self n

predicate inv'1 (_0 : t_Formula)

axiom inv_axiom [@rewrite] : forall x : t_Formula [inv'1 x] . inv'1 x = true

predicate invariant' (self : t_Formula) =
  [%#sinvariant] inv'1 self

predicate inv'2 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 76 4 76 40] (self : t_Assignments) (f : t_Formula)

 =
  [%#sassignments] UInt64.t'int f.t_Formula__num_vars = Seq.length (view'0 self)
  /\ UInt64.t'int self.t_Assignments__1 <= UInt64.t'int f.t_Formula__num_vars

predicate sat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 69 4 69 57] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'27] exists i : int . 0 <= i /\ i < Seq.length (view'2 self) /\ sat_inner (Seq.get (view'2 self) i) a

predicate sat'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 78 4 78 44] (self : t_Clause) (a : t_Assignments) =
  [%#sclause'22] sat_inner'0 self (view'0 a)

predicate unsat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 54 4 54 59] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'28] forall i : int . 0 <= i /\ i < Seq.length (view'2 self)  -> unsat_inner (Seq.get (view'2 self) i) a

predicate unsat'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 63 4 63 46] (self : t_Clause) (a : t_Assignments) =
  [%#sclause'23] unsat_inner'0 self (view'0 a)

predicate unit_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 38 4 38 58] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'29] vars_in_range self (Seq.length a)
  /\ not sat_inner'0 self a
  /\ (exists i : int . 0 <= i
  /\ i < Seq.length (view'2 self)
  /\ unset_inner (Seq.get (view'2 self) i) a
  /\ (forall j : int . 0 <= j /\ j < Seq.length (view'2 self) /\ j <> i
   -> not unset_inner (Seq.get (view'2 self) j) a))

predicate unit' [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 48 4 48 45] (self : t_Clause) (a : t_Assignments) =
  [%#sclause'24] unit_inner self (view'0 a)

predicate unset'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 46 0 46 38] (v : UInt8.t) =
  [%#slogic] if UInt8.t'int v >= 2 then true else false

predicate complete [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 90 4 90 33] (self : t_Assignments) =
  [%#sassignments'0] forall i : int . 0 <= i /\ i < Seq.length (view'0 self)  -> not unset'0 (Seq.get (view'0 self) i)

meta "compute_max_steps" 1000000

let rec check_if_unit[#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 134 4 134 77] (self:t_Clause) (a:t_Assignments) (_f:t_Formula) (return'  (x:t_ClauseState))= {[@expl:check_if_unit requires #0] [%#sclause'14] inv'0 self (Seq.length (view'5 a))}
  {[@expl:check_if_unit requires #1] [%#sclause'15] invariant' _f}
  {[@expl:check_if_unit requires #2] [%#sclause'16] inv'2 a _f}
  (! bb0
  [ bb0 = s0
    [ s0 =  [ &i <- [%#sclause] (0 : UInt64.t) ] s1
    | s1 =  [ &_k <- [%#sclause'0] (0 : UInt64.t) ] s2
    | s2 =  [ &unassigned <- [%#sclause'1] (0 : UInt64.t) ] s3
    | s3 = bb1 ]
  
  | bb1 = bb1'0
    [ bb1'0 = {[@expl:loop invariant #0] [%#sclause'9] 0 <= UInt64.t'int i
      /\ UInt64.t'int i <= Seq.length (view'1 self'0.t_Clause__rest)}
      {[@expl:loop invariant #1] [%#sclause'8] UInt64.t'int unassigned <= 1}
      {[@expl:loop invariant #2] [%#sclause'7] UInt64.t'int unassigned = 0
      \/ unset (Seq.get (view'3 self'0) (UInt64.t'int _k)) a'0}
      {[@expl:loop invariant #3] [%#sclause'6] UInt64.t'int unassigned > 0
       -> unset (Seq.get (view'3 self'0) (UInt64.t'int _k)) a'0}
      {[@expl:loop invariant #4] [%#sclause'5] forall j : int . 0 <= j /\ j < UInt64.t'int i
       -> unsat (Seq.get (view'3 self'0) j) a'0
      \/ unset (Seq.get (view'3 self'0) j) a'0 /\ UInt64.t'int unassigned >= 1}
      {[@expl:loop invariant #5] [%#sclause'4] UInt64.t'int unassigned = 0
      \/ 0 <= UInt64.t'int _k /\ UInt64.t'int _k < Seq.length (view'3 self'0)}
      {[@expl:loop invariant #6] [%#sclause'3] UInt64.t'int unassigned = 1
       -> (forall j : int . 0 <= j /\ j < UInt64.t'int i /\ j <> UInt64.t'int _k
       -> not unset (Seq.get (view'3 self'0) j) a'0)}
      {[@expl:loop invariant #7] [%#sclause'2] UInt64.t'int unassigned = 0  -> UInt64.t'int _k = 0}
      (! s0) [ s0 = bb2 ] 
      [ bb2 = s0 [ s0 = len {self'0.t_Clause__rest} (fun (_ret:UInt64.t) ->  [ &_27 <- _ret ] s1) | s1 = bb3 ] 
      | bb3 = s0
        [ s0 =  [ &_25 <- UInt64.lt i _27 ] s1 | s1 = any [ br0 -> {_25 = false} (! bb15) | br1 -> {_25} (! bb4) ]  ]
      
      | bb4 = s0 [ s0 = index {self'0.t_Clause__rest} {i} (fun (_ret:t_Lit) ->  [ &_30 <- _ret ] s1) | s1 = bb5 ] 
      | bb5 = s0
        [ s0 =  [ &lit <- _30 ] s1 | s1 = lit_sat {lit} {a'0} (fun (_ret:bool) ->  [ &_34 <- _ret ] s2) | s2 = bb6 ]
      
      | bb6 = any [ br0 -> {_34 = false} (! bb8) | br1 -> {_34} (! bb7) ] 
      | bb8 = s0 [ s0 = lit_unset {lit} {a'0} (fun (_ret:bool) ->  [ &_38 <- _ret ] s1) | s1 = bb9 ] 
      | bb9 = any [ br0 -> {_38 = false} (! bb13) | br1 -> {_38} (! bb10) ] 
      | bb10 = s0
        [ s0 =  [ &_42 <- UInt64.gt unassigned ([%#sclause'10] (0 : UInt64.t)) ] s1
        | s1 = any [ br0 -> {_42 = false} (! bb12) | br1 -> {_42} (! bb11) ]  ]
      
      | bb12 = s0
        [ s0 =  [ &_k <- i ] s1
        | s1 = UInt64.add {unassigned} {[%#sclause'11] (1 : UInt64.t)}
            (fun (_ret:UInt64.t) ->  [ &unassigned <- _ret ] s2)
        | s2 = bb14 ]
      
      | bb13 = bb14
      | bb14 = s0
        [ s0 = UInt64.add {i} {[%#sclause'12] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s1) | s1 = bb1'0 ]
       ]
     ]
  
  | bb7 = s0 [ s0 =  [ &_0 <- C_Sat ] s1 | s1 = bb19 ] 
  | bb11 = s0 [ s0 =  [ &_0 <- C_Unknown ] s1 | s1 = bb19 ] 
  | bb19 = bb20
  | bb15 = s0
    [ s0 =  [ &_47 <- unassigned = ([%#sclause'13] (1 : UInt64.t)) ] s1
    | s1 = any [ br0 -> {_47 = false} (! bb17) | br1 -> {_47} (! bb16) ]  ]
  
  | bb16 = s0 [ s0 =  [ &_0 <- C_Unit ] s1 | s1 = bb18 ] 
  | bb17 = s0 [ s0 =  [ &_0 <- C_Unsat ] s1 | s1 = bb18 ] 
  | bb18 = bb20
  | bb20 = return''0 {_0} ]
  )
  [ & _0 : t_ClauseState = Any.any_l ()
  | & self'0 : t_Clause = self
  | & a'0 : t_Assignments = a
  | & i : UInt64.t = Any.any_l ()
  | & _k : UInt64.t = Any.any_l ()
  | & unassigned : UInt64.t = Any.any_l ()
  | & _25 : bool = Any.any_l ()
  | & _27 : UInt64.t = Any.any_l ()
  | & lit : t_Lit = Any.any_l ()
  | & _30 : t_Lit = Any.any_l ()
  | & _34 : bool = Any.any_l ()
  | & _38 : bool = Any.any_l ()
  | & _42 : bool = Any.any_l ()
  | & _47 : bool = Any.any_l () ]
  
  [ return''0 (result:t_ClauseState)-> {[@expl:check_if_unit ensures #0] [%#sclause'17] result = C_Sat  -> sat'0 self a}
    {[@expl:check_if_unit ensures #1] [%#sclause'18] result = C_Unsat  -> unsat'0 self a}
    {[@expl:check_if_unit ensures #2] [%#sclause'19] result = C_Unit  -> unit' self a /\ not complete a}
    {[@expl:check_if_unit ensures #3] [%#sclause'20] result = C_Unknown  -> not complete a}
    (! return' {result}) ]
  
