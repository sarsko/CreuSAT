(* #"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 235 4 235 30 *)

(* clause::Clause *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 89 26 89 48
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sclause = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 234 14 234 36
let%span sclause'0 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 19 4 19 12

use creusot.prelude.Opaque
use creusot.int.UInt64
use seq.Seq
use mach.int.Int
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Clause  =
  { t_Clause__rest: t_Vec }

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Lit

axiom view_spec : forall self : t_Vec . [%#svec'0] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : t_Vec) : Seq.seq t_Lit =
  [%#smodel] view self

let rec len (self_:t_Vec) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]


function view'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 21 4 21 33] (self : t_Clause) : Seq.seq t_Lit =
  [%#sclause'0] view self.t_Clause__rest

function view'2 (self : t_Clause) : Seq.seq t_Lit =
  [%#smodel] view'1 self

meta "compute_max_steps" 1000000

let rec len'0[#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 235 4 235 30] (self:t_Clause) (return'  (x:UInt64.t))= (! bb0
  [ bb0 = s0 [ s0 = len {self'0.t_Clause__rest} (fun (_ret:UInt64.t) ->  [ &_0 <- _ret ] s1) | s1 = bb1 ] 
  | bb1 = return''0 {_0} ]
  ) [ & _0 : UInt64.t = Any.any_l () | & self'0 : t_Clause = self ] 
  [ return''0 (result:UInt64.t)-> {[@expl:len ensures] [%#sclause] UInt64.t'int result = Seq.length (view'2 self)}
    (! return' {result}) ]
  
