(* #"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 125 4 125 51 *)

(* lit::Lit *)

let%span sassignments = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 17 4 17 12
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span slit = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 126 25 126 26
let%span slit'0 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 123 15 123 33
let%span slit'1 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 124 14 124 38
let%span slit'2 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 39 20 39 33
let%span slit'3 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 83 20 83 40
let%span slit'4 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 68 12 68 30

use creusot.prelude.Opaque
use creusot.int.UInt64
use creusot.int.UInt8
use seq.Seq
use mach.int.Int
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec; t_Assignments__1: UInt64.t }

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt8.t) =
  [%#sslice] UInt64.t'int self < Seq.length seq

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq UInt8.t

axiom view_spec : forall self : t_Vec . [%#svec'1] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : t_Vec) : Seq.seq UInt8.t =
  [%#smodel] view self

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt8.t) (out : UInt8.t) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:UInt8.t))= {[@expl:index requires] [%#svec] in_bounds ix (view'0 self_)}
  any [ return''0 (result:UInt8.t)-> {[%#svec'0] has_value ix (view'0 self_) result} (! return' {result}) ] 

predicate inv [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 38 4 38 36] (self : t_Lit) (n : int) =
  [%#slit'2] UInt64.t'int self.t_Lit__idx < n

function view'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#sassignments] view self.t_Assignments__0

function view'2 (self : t_Assignments) : Seq.seq UInt8.t =
  [%#smodel] view'1 self

predicate unset_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 66 4 66 59] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'4] UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) >= 2

predicate unset [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 82 4 82 46] (self : t_Lit) (a : t_Assignments) =
  [%#slit'3] unset_inner self (view'1 a)

meta "compute_max_steps" 1000000

let rec lit_unset[#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 125 4 125 51] (self:t_Lit) (a:t_Assignments) (return'  (x:bool))= {[@expl:lit_unset requires] [%#slit'0] inv self (Seq.length (view'2 a))}
  (! bb0
  [ bb0 = s0
    [ s0 = index {a'0.t_Assignments__0} {self'0.t_Lit__idx} (fun (_ret:UInt8.t) ->  [ &_6 <- _ret ] s1) | s1 = bb1 ]
  
  | bb1 = s0 [ s0 =  [ &_0 <- UInt8.ge _6 ([%#slit] (2 : UInt8.t)) ] s1 | s1 = return''0 {_0} ]  ]
  )
  [ & _0 : bool = Any.any_l () | & self'0 : t_Lit = self | & a'0 : t_Assignments = a | & _6 : UInt8.t = Any.any_l () ]
   [ return''0 (result:bool)-> {[@expl:lit_unset ensures] [%#slit'1] result = unset self a} (! return' {result}) ] 
