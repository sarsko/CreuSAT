(* #"/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 27 4 27 40 *)

(* decision::Decisions *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 186 22 186 41
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 187 22 187 76
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 89 26 89 48
let%span svec'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'4 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span svec'5 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 158 27 158 46
let%span svec'6 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 159 26 159 54
let%span svec'7 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 160 26 160 57
let%span svec'8 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 161 26 161 62
let%span svec'9 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 162 26 162 55
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span smodel'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span sslice'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 137 20 137 94
let%span sinvariant = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/invariant.rs" 25 8 25 18
let%span sindex = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ops/index.rs" 29 8 29 31
let%span sdecision = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 28 55 28 56
let%span sdecision'0 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 29 52 29 53
let%span sdecision'1 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 30 73 30 74
let%span sdecision'2 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 30 76 30 77
let%span sdecision'3 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 31 27 31 28
let%span sdecision'4 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 32 20 32 48
let%span sdecision'5 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 35 31 35 32
let%span sdecision'6 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 36 24 36 52
let%span sdecision'7 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 42 53 42 63
let%span sdecision'8 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 43 55 43 56
let%span sdecision'9 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 45 21 45 22
let%span sdecision'10 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 47 17 47 18
let%span sdecision'11 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 49 12 49 13
let%span sdecision'12 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 51 20 52 50
let%span sdecision'13 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 50 20 50 59
let%span sdecision'14 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 55 17 55 18
let%span sdecision'15 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 58 12 58 13
let%span sdecision'16 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 60 20 60 93
let%span sdecision'17 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 59 20 59 51
let%span sdecision'18 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 63 17 63 18
let%span sdecision'19 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 25 15 25 28
let%span sdecision'20 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 26 14 26 37
let%span sdecision'21 = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 16 12 18 38
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34
let%span sutil = "/Users/sarekhs/CreuSAT/Robinson/src/util.rs" 26 10 26 27
let%span sutil'0 = "/Users/sarekhs/CreuSAT/Robinson/src/util.rs" 27 10 27 34
let%span sutil'1 = "/Users/sarekhs/CreuSAT/Robinson/src/util.rs" 15 4 15 35
let%span sutil'2 = "/Users/sarekhs/CreuSAT/Robinson/src/util.rs" 8 8 8 76
let%span sseq = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/seq.rs" 312 8 312 41
let%span sord = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 129 39 129 89
let%span sord'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 134 39 134 86
let%span sord'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 139 39 139 86
let%span sord'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 144 39 144 89
let%span sord'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 149 39 149 70
let%span sord'4 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 154 40 154 57
let%span sord'5 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 155 40 155 57
let%span sord'6 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 156 39 156 56
let%span sord'7 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 161 40 161 70
let%span sord'8 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 162 39 162 72
let%span sord'9 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 167 40 167 73
let%span sord'10 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 168 39 168 69
let%span sord'11 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 173 39 173 84
let%span sord'12 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 230 16 236 17

use creusot.int.UInt64
use creusot.prelude.Opaque
use seq.Seq
use mach.int.Int
use creusot.prelude.MutBorrow
use seq.Permut
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec; t_Formula__num_vars: UInt64.t }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec'0) : Seq.seq UInt64.t

axiom view_spec : forall self : t_Vec'0 . [%#svec'1] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function index_logic [@inline:trivial] (self : t_Vec'0) (ix : int) : UInt64.t =
  [%#sindex] Seq.get (view self) ix

let rec from_elem (elem:UInt64.t) (n:UInt64.t) (return'  (x:t_Vec'0))= any
  [ return''0 (result:t_Vec'0)-> {[%#svec] Seq.length (view result) = UInt64.t'int n}
    {[%#svec'0] forall i : int . 0 <= i /\ i < UInt64.t'int n  -> index_logic result i = elem}
    (! return' {result}) ]


type tuple  =
  { _0: UInt64.t; _1: UInt64.t }

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

function view'0 (self : t_Vec'1) : Seq.seq tuple

axiom view_spec'0 : forall self : t_Vec'1 . [%#svec'1] Seq.length (view'0 self) <= UInt64.t'int (v_MAX : UInt64.t)

function index_logic'0 [@inline:trivial] (self : t_Vec'1) (ix : int) : tuple =
  [%#sindex] Seq.get (view'0 self) ix

let rec from_elem'0 (elem:tuple) (n:UInt64.t) (return'  (x:t_Vec'1))= any
  [ return''0 (result:t_Vec'1)-> {[%#svec] Seq.length (view'0 result) = UInt64.t'int n}
    {[%#svec'0] forall i : int . 0 <= i /\ i < UInt64.t'int n  -> index_logic'0 result i = elem}
    (! return' {result}) ]


type t_RawVec'2  =
  { t_RawVec__inner'2: t_RawVecInner; t_RawVec__qy95zmarker'2: () }

type t_Vec'2  =
  { t_Vec__buf'2: t_RawVec'2; t_Vec__len'2: UInt64.t }

type t_Clause  =
  { t_Clause__rest: t_Vec'2 }

function view'1 (self : t_Vec) : Seq.seq t_Clause

axiom view_spec'1 : forall self : t_Vec . [%#svec'1] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'2 (self : t_Vec) : Seq.seq t_Clause =
  [%#smodel] view'1 self

let rec len (self_:t_Vec) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec'2] UInt64.t'int result = Seq.length (view'2 self_)} (! return' {result}) ]


predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Clause) =
  [%#sslice] UInt64.t'int self < Seq.length seq

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Clause) (out : t_Clause) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:t_Clause))= {[@expl:index requires] [%#svec'3] in_bounds ix (view'2 self_)}
  any [ return''0 (result:t_Clause)-> {[%#svec'4] has_value ix (view'2 self_) result} (! return' {result}) ] 

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function view'3 (self : t_Vec'2) : Seq.seq t_Lit

axiom view_spec'2 : forall self : t_Vec'2 . [%#svec'1] Seq.length (view'3 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'4 (self : t_Vec'2) : Seq.seq t_Lit =
  [%#smodel] view'3 self

let rec len'0 (self_:t_Vec'2) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec'2] UInt64.t'int result = Seq.length (view'4 self_)} (! return' {result}) ]


predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Lit) =
  [%#sslice] UInt64.t'int self < Seq.length seq

predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Lit) (out : t_Lit) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index'0 (self_:t_Vec'2) (ix:UInt64.t) (return'  (x:t_Lit))= {[@expl:index requires] [%#svec'3] in_bounds'0 ix (view'4 self_)}
  any [ return''0 (result:t_Lit)-> {[%#svec'4] has_value'0 ix (view'4 self_) result} (! return' {result}) ] 

predicate in_bounds'1 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) =
  [%#sslice] UInt64.t'int self < Seq.length seq

function view'5 (self : t_Vec'0) : Seq.seq UInt64.t =
  [%#smodel] view self

predicate has_value'1 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) (out : UInt64.t) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index'1 (self_:t_Vec'0) (ix:UInt64.t) (return'  (x:UInt64.t))= {[@expl:index requires] [%#svec'3] in_bounds'1 ix (view'5 self_)}
  any [ return''0 (result:UInt64.t)-> {[%#svec'4] has_value'1 ix (view'5 self_) result} (! return' {result}) ] 

function view'6 (self : MutBorrow.t t_Vec'0) : Seq.seq UInt64.t =
  [%#smodel'0] view self.current

predicate resolve_elswhere [@inline:trivial] (self : UInt64.t) (old' : Seq.seq UInt64.t) (fin : Seq.seq UInt64.t) =
  [%#sslice'1] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
   -> Seq.get old' i = Seq.get fin i

let rec index_mut (self_:MutBorrow.t t_Vec'0) (ix:UInt64.t) (return'  (x:MutBorrow.t UInt64.t))= {[@expl:index_mut requires] [%#svec'5] in_bounds'1 ix (view'6 self_)}
  any
  [ return''0 (result:MutBorrow.t UInt64.t)-> {[%#svec'6] has_value'1 ix (view'6 self_) result.current}
    {[%#svec'7] has_value'1 ix (view self_.final) result.final}
    {[%#svec'8] resolve_elswhere ix (view'6 self_) (view self_.final)}
    {[%#svec'9] Seq.length (view self_.final) = Seq.length (view'6 self_)}
    (! return' {result}) ]


predicate resolve (self : MutBorrow.t UInt64.t) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0'0 : MutBorrow.t UInt64.t) =
  resolve _0'0

predicate in_bounds'2 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq tuple) =
  [%#sslice] UInt64.t'int self < Seq.length seq

function view'7 (self : MutBorrow.t t_Vec'1) : Seq.seq tuple =
  [%#smodel'0] view'0 self.current

predicate has_value'2 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq tuple) (out : tuple) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

predicate resolve_elswhere'0 [@inline:trivial] (self : UInt64.t) (old' : Seq.seq tuple) (fin : Seq.seq tuple) =
  [%#sslice'1] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
   -> Seq.get old' i = Seq.get fin i

let rec index_mut'0 (self_:MutBorrow.t t_Vec'1) (ix:UInt64.t) (return'  (x:MutBorrow.t tuple))= {[@expl:index_mut requires] [%#svec'5] in_bounds'2 ix (view'7 self_)}
  any
  [ return''0 (result:MutBorrow.t tuple)-> {[%#svec'6] has_value'2 ix (view'7 self_) result.current}
    {[%#svec'7] has_value'2 ix (view'0 self_.final) result.final}
    {[%#svec'8] resolve_elswhere'0 ix (view'7 self_) (view'0 self_.final)}
    {[%#svec'9] Seq.length (view'0 self_.final) = Seq.length (view'7 self_)}
    (! return' {result}) ]


predicate resolve'1 (self : MutBorrow.t tuple) =
  [%#sresolve] self.final = self.current

predicate resolve'2 (_0'0 : MutBorrow.t tuple) =
  resolve'1 _0'0

type t_Ordering  =
  | C_Less
  | C_Equal
  | C_Greater

function cmp_log (self : UInt64.t) (o : UInt64.t) : t_Ordering =
  [%#sord'12] if UInt64.lt self o then C_Less else if self = o then C_Equal else C_Greater

function eq_cmp (x : UInt64.t) (y : UInt64.t) : ()

axiom eq_cmp_spec : forall x : UInt64.t, y : UInt64.t . [%#sord'11] (x = y) = (cmp_log x y = C_Equal)

function antisym2 (x : UInt64.t) (y : UInt64.t) : ()

axiom antisym2_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord'9] cmp_log x y = C_Greater)
 -> ([%#sord'10] cmp_log y x = C_Less)

function antisym1 (x : UInt64.t) (y : UInt64.t) : ()

axiom antisym1_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord'7] cmp_log x y = C_Less)
 -> ([%#sord'8] cmp_log y x = C_Greater)

function trans (x : UInt64.t) (y : UInt64.t) (z : UInt64.t) (o : t_Ordering) : ()

axiom trans_spec : forall x : UInt64.t, y : UInt64.t, z : UInt64.t, o : t_Ordering . ([%#sord'4] cmp_log x y = o)
 -> ([%#sord'5] cmp_log y z = o)  -> ([%#sord'6] cmp_log x z = o)

function refl (x : UInt64.t) : ()

axiom refl_spec : forall x : UInt64.t . [%#sord'3] cmp_log x x = C_Equal

function cmp_gt_log (x : UInt64.t) (y : UInt64.t) : ()

axiom cmp_gt_log_spec : forall x : UInt64.t, y : UInt64.t . [%#sord'2] UInt64.gt x y = (cmp_log x y = C_Greater)

function cmp_ge_log (x : UInt64.t) (y : UInt64.t) : ()

axiom cmp_ge_log_spec : forall x : UInt64.t, y : UInt64.t . [%#sord'1] UInt64.ge x y = (cmp_log x y <> C_Less)

function cmp_lt_log (x : UInt64.t) (y : UInt64.t) : ()

axiom cmp_lt_log_spec : forall x : UInt64.t, y : UInt64.t . [%#sord'0] UInt64.lt x y = (cmp_log x y = C_Less)

function cmp_le_log (x : UInt64.t) (y : UInt64.t) : ()

axiom cmp_le_log_spec : forall x : UInt64.t, y : UInt64.t . [%#sord] UInt64.le x y = (cmp_log x y <> C_Greater)

predicate sorted_range_rev [#"/Users/sarekhs/CreuSAT/Robinson/src/util.rs" 6 0 6 71] (s : Seq.seq tuple) (l : int) (u : int)

 =
  [%#sutil'2] forall i : int, j : int . l <= i /\ i < j /\ j < u  -> UInt64.ge (Seq.get s i)._0 (Seq.get s j)._0

predicate sorted_rev [#"/Users/sarekhs/CreuSAT/Robinson/src/util.rs" 14 0 14 49] (s : Seq.seq tuple) =
  [%#sutil'1] sorted_range_rev s 0 (Seq.length s)

predicate permutation_of (self : Seq.seq tuple) (other : Seq.seq tuple) =
  [%#sseq] Permut.permut self other 0 (Seq.length self)

let rec sort_reverse (v:MutBorrow.t t_Vec'1) (return'  (x:()))= any
  [ return''0 (result:())-> {[%#sutil] sorted_rev (view'0 v.final)}
    {[%#sutil'0] permutation_of (view'0 v.final) (view'7 v)}
    (! return' {result}) ]


predicate resolve'3 (self : MutBorrow.t t_Vec'1) =
  [%#sresolve] self.final = self.current

predicate resolve'4 (_0'0 : MutBorrow.t t_Vec'1) =
  resolve'3 _0'0

function view'8 (self : t_Vec'1) : Seq.seq tuple =
  [%#smodel] view'0 self

let rec index'2 (self_:t_Vec'1) (ix:UInt64.t) (return'  (x:tuple))= {[@expl:index requires] [%#svec'3] in_bounds'2 ix (view'8 self_)}
  any [ return''0 (result:tuple)-> {[%#svec'4] has_value'2 ix (view'8 self_) result} (! return' {result}) ] 

type t_Decisions  =
  { t_Decisions__lit_order: t_Vec'0 }

predicate inv (_0'0 : t_Formula)

axiom inv_axiom [@rewrite] : forall x : t_Formula [inv x] . inv x = true

predicate invariant' (self : t_Formula) =
  [%#sinvariant] inv self

predicate inv'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 14 4 14 36] (self : t_Decisions) (n : int) =
  [%#sdecision'21] Seq.length (view self.t_Decisions__lit_order) = n
  /\ (forall i : int . 0 <= i /\ i < Seq.length (view self.t_Decisions__lit_order)
   -> UInt64.t'int (Seq.get (view self.t_Decisions__lit_order) i) < n)

meta "compute_max_steps" 1000000

let rec new[#"/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 27 4 27 40] (f:t_Formula) (return'  (x:t_Decisions))= {[@expl:new requires] [%#sdecision'19] invariant' f}
  (! bb0
  [ bb0 = s0
    [ s0 = from_elem {[%#sdecision] (0 : UInt64.t)} {f'0.t_Formula__num_vars}
        (fun (_ret:t_Vec'0) ->  [ &lit_order <- _ret ] s1)
    | s1 = bb1 ]
  
  | bb1 = s0
    [ s0 = from_elem {[%#sdecision'0] (0 : UInt64.t)} {f'0.t_Formula__num_vars}
        (fun (_ret:t_Vec'0) ->  [ &counts <- _ret ] s1)
    | s1 = bb2 ]
  
  | bb2 = s0
    [ s0 =  [ &_9 <- { _0 = ([%#sdecision'1] (0 : UInt64.t)); _1 = ([%#sdecision'2] (0 : UInt64.t)) } ] s1
    | s1 = from_elem'0 {_9} {f'0.t_Formula__num_vars} (fun (_ret:t_Vec'1) ->  [ &counts_with_index <- _ret ] s2)
    | s2 = bb3 ]
  
  | bb3 = s0 [ s0 =  [ &i <- [%#sdecision'3] (0 : UInt64.t) ] s1 | s1 = bb4 ] 
  | bb4 = bb4'0
    [ bb4'0 = {[@expl:loop invariant] [%#sdecision'4] Seq.length (view counts) = UInt64.t'int f'0.t_Formula__num_vars}
      (! s0) [ s0 = bb5 ] 
      [ bb5 = bb6
      | bb6 = s0 [ s0 = len {f'0.t_Formula__clauses} (fun (_ret:UInt64.t) ->  [ &_18 <- _ret ] s1) | s1 = bb7 ] 
      | bb7 = s0
        [ s0 =  [ &_16 <- UInt64.lt i _18 ] s1 | s1 = any [ br0 -> {_16 = false} (! bb23) | br1 -> {_16} (! bb8) ]  ]
      
      | bb8 = s0 [ s0 = index {f'0.t_Formula__clauses} {i} (fun (_ret:t_Clause) ->  [ &_21 <- _ret ] s1) | s1 = bb9 ] 
      | bb9 = s0 [ s0 =  [ &curr_clause <- _21 ] s1 | s1 =  [ &j <- [%#sdecision'5] (0 : UInt64.t) ] s2 | s2 = bb10 ] 
      | bb10 = bb10'0
        [ bb10'0 = {[@expl:loop invariant] [%#sdecision'6] Seq.length (view counts)
          = UInt64.t'int f'0.t_Formula__num_vars}
          (! s0) [ s0 = bb11 ] 
          [ bb11 = bb12
          | bb12 = s0
            [ s0 = len'0 {curr_clause.t_Clause__rest} (fun (_ret:UInt64.t) ->  [ &_30 <- _ret ] s1) | s1 = bb13 ]
          
          | bb13 = s0
            [ s0 =  [ &_28 <- UInt64.lt j _30 ] s1
            | s1 = any [ br0 -> {_28 = false} (! bb22) | br1 -> {_28} (! bb14) ]  ]
          
          | bb14 = s0
            [ s0 = index'0 {curr_clause.t_Clause__rest} {j} (fun (_ret:t_Lit) ->  [ &_38 <- _ret ] s1) | s1 = bb15 ]
          
          | bb15 = s0
            [ s0 = index'1 {counts} {_38.t_Lit__idx} (fun (_ret:UInt64.t) ->  [ &_35 <- _ret ] s1) | s1 = bb16 ]
          
          | bb16 = s0
            [ s0 =  [ &_33 <- UInt64.lt _35 ([%#sdecision'7] (18446744073709551615 : UInt64.t)) ] s1
            | s1 = any [ br0 -> {_33 = false} (! bb20) | br1 -> {_33} (! bb17) ]  ]
          
          | bb17 = s0
            [ s0 = MutBorrow.borrow_mut <t_Vec'0> {counts}
                (fun (_ret:MutBorrow.t t_Vec'0) ->  [ &_42 <- _ret ]  [ &counts <- _ret.final ] s1)
            | s1 = index'0 {curr_clause.t_Clause__rest} {j} (fun (_ret:t_Lit) ->  [ &_44 <- _ret ] s2)
            | s2 = bb18 ]
          
          | bb18 = s0
            [ s0 = index_mut {_42} {_44.t_Lit__idx} (fun (_ret:MutBorrow.t UInt64.t) ->  [ &_41 <- _ret ] s1)
            | s1 = bb19 ]
          
          | bb19 = s0
            [ s0 = UInt64.add {_41.current} {[%#sdecision'8] (1 : UInt64.t)}
                (fun (_ret:UInt64.t) ->  [ &_41 <- { _41 with current = _ret } ] s1)
            | s1 = -{resolve'0 _41}- s2
            | s2 = bb21 ]
          
          | bb20 = bb21
          | bb21 = s0
            [ s0 = UInt64.add {j} {[%#sdecision'9] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &j <- _ret ] s1)
            | s1 = bb10'0 ]
           ]
         ]
      
      | bb22 = s0
        [ s0 = UInt64.add {i} {[%#sdecision'10] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s1)
        | s1 = bb4'0 ]
       ]
     ]
  
  | bb23 = s0 [ s0 =  [ &i <- [%#sdecision'11] (0 : UInt64.t) ] s1 | s1 = bb24 ] 
  | bb24 = bb24'0
    [ bb24'0 = {[@expl:loop invariant #0] [%#sdecision'13] Seq.length (view'0 counts_with_index)
      = UInt64.t'int f'0.t_Formula__num_vars}
      {[@expl:loop invariant #1] [%#sdecision'12] forall j'0 : int . 0 <= j'0
      /\ j'0 < UInt64.t'int f'0.t_Formula__num_vars
       -> UInt64.t'int (Seq.get (view'0 counts_with_index) j'0)._1 < UInt64.t'int f'0.t_Formula__num_vars}
      (! s0) [ s0 = bb25 ] 
      [ bb25 = bb26
      | bb26 = bb27
      | bb27 = s0
        [ s0 =  [ &_53 <- UInt64.lt i f'0.t_Formula__num_vars ] s1
        | s1 = any [ br0 -> {_53 = false} (! bb31) | br1 -> {_53} (! bb28) ]  ]
      
      | bb28 = s0 [ s0 = index'1 {counts} {i} (fun (_ret:UInt64.t) ->  [ &_57 <- _ret ] s1) | s1 = bb29 ] 
      | bb29 = s0
        [ s0 = MutBorrow.borrow_mut <t_Vec'1> {counts_with_index}
            (fun (_ret:MutBorrow.t t_Vec'1) ->  [ &_62 <- _ret ]  [ &counts_with_index <- _ret.final ] s1)
        | s1 = index_mut'0 {_62} {i} (fun (_ret:MutBorrow.t tuple) ->  [ &_61 <- _ret ] s2)
        | s2 = bb30 ]
      
      | bb30 = s0
        [ s0 =  [ &_61 <- { _61 with current = { _0 = _57; _1 = i } } ] s1
        | s1 = -{resolve'2 _61}- s2
        | s2 = UInt64.add {i} {[%#sdecision'14] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s3)
        | s3 = bb24'0 ]
       ]
     ]
  
  | bb31 = s0
    [ s0 = MutBorrow.borrow_mut <t_Vec'1> {counts_with_index}
        (fun (_ret:MutBorrow.t t_Vec'1) ->  [ &_67 <- _ret ]  [ &counts_with_index <- _ret.final ] s1)
    | s1 = MutBorrow.borrow_final <t_Vec'1> {_67.current} {MutBorrow.get_id _67}
        (fun (_ret:MutBorrow.t t_Vec'1) ->  [ &_66 <- _ret ]  [ &_67 <- { _67 with current = _ret.final } ] s2)
    | s2 = sort_reverse {_66} (fun (_ret:()) ->  [ &_65 <- _ret ] s3)
    | s3 = bb32 ]
  
  | bb32 = s0 [ s0 = -{resolve'4 _67}- s1 | s1 =  [ &i <- [%#sdecision'15] (0 : UInt64.t) ] s2 | s2 = bb33 ] 
  | bb33 = bb33'0
    [ bb33'0 = {[@expl:loop invariant #0] [%#sdecision'17] Seq.length (view lit_order)
      = UInt64.t'int f'0.t_Formula__num_vars}
      {[@expl:loop invariant #1] [%#sdecision'16] forall j'0 : int . 0 <= j'0
      /\ j'0 < UInt64.t'int f'0.t_Formula__num_vars
       -> UInt64.t'int (Seq.get (view lit_order) j'0) < UInt64.t'int f'0.t_Formula__num_vars}
      (! s0) [ s0 = bb34 ] 
      [ bb34 = bb35
      | bb35 = bb36
      | bb36 = s0
        [ s0 =  [ &_72 <- UInt64.lt i f'0.t_Formula__num_vars ] s1
        | s1 = any [ br0 -> {_72 = false} (! bb40) | br1 -> {_72} (! bb37) ]  ]
      
      | bb37 = s0 [ s0 = index'2 {counts_with_index} {i} (fun (_ret:tuple) ->  [ &_76 <- _ret ] s1) | s1 = bb38 ] 
      | bb38 = s0
        [ s0 = MutBorrow.borrow_mut <t_Vec'0> {lit_order}
            (fun (_ret:MutBorrow.t t_Vec'0) ->  [ &_80 <- _ret ]  [ &lit_order <- _ret.final ] s1)
        | s1 = index_mut {_80} {i} (fun (_ret:MutBorrow.t UInt64.t) ->  [ &_79 <- _ret ] s2)
        | s2 = bb39 ]
      
      | bb39 = s0
        [ s0 =  [ &_79 <- { _79 with current = _76._1 } ] s1
        | s1 = -{resolve'0 _79}- s2
        | s2 = UInt64.add {i} {[%#sdecision'18] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s3)
        | s3 = bb33'0 ]
       ]
     ]
  
  | bb40 = s0 [ s0 =  [ &_0'0 <- { t_Decisions__lit_order = lit_order } ] s1 | s1 = bb41 ] 
  | bb41 = bb42
  | bb42 = bb43
  | bb43 = bb44
  | bb44 = return''0 {_0'0} ]
  )
  [ & _0'0 : t_Decisions = Any.any_l ()
  | & f'0 : t_Formula = f
  | & lit_order : t_Vec'0 = Any.any_l ()
  | & counts : t_Vec'0 = Any.any_l ()
  | & counts_with_index : t_Vec'1 = Any.any_l ()
  | & _9 : tuple = Any.any_l ()
  | & i : UInt64.t = Any.any_l ()
  | & _16 : bool = Any.any_l ()
  | & _18 : UInt64.t = Any.any_l ()
  | & curr_clause : t_Clause = Any.any_l ()
  | & _21 : t_Clause = Any.any_l ()
  | & j : UInt64.t = Any.any_l ()
  | & _28 : bool = Any.any_l ()
  | & _30 : UInt64.t = Any.any_l ()
  | & _33 : bool = Any.any_l ()
  | & _35 : UInt64.t = Any.any_l ()
  | & _38 : t_Lit = Any.any_l ()
  | & _41 : MutBorrow.t UInt64.t = Any.any_l ()
  | & _42 : MutBorrow.t t_Vec'0 = Any.any_l ()
  | & _44 : t_Lit = Any.any_l ()
  | & _53 : bool = Any.any_l ()
  | & _57 : UInt64.t = Any.any_l ()
  | & _61 : MutBorrow.t tuple = Any.any_l ()
  | & _62 : MutBorrow.t t_Vec'1 = Any.any_l ()
  | & _65 : () = Any.any_l ()
  | & _66 : MutBorrow.t t_Vec'1 = Any.any_l ()
  | & _67 : MutBorrow.t t_Vec'1 = Any.any_l ()
  | & _72 : bool = Any.any_l ()
  | & _76 : tuple = Any.any_l ()
  | & _79 : MutBorrow.t UInt64.t = Any.any_l ()
  | & _80 : MutBorrow.t t_Vec'0 = Any.any_l () ]
  
  [ return''0 (result:t_Decisions)-> {[@expl:new ensures] [%#sdecision'20] inv'0 result (UInt64.t'int f.t_Formula__num_vars)}
    (! return' {result}) ]
  
