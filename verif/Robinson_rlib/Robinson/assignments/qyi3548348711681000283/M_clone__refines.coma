(* #"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 29 4 29 27 *)

(* <assignments::Assignments as assignments::creusot_contracts::Clone> *)

let%span sassignments = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 29 4 29 27
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 17 4 17 12
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22

use creusot.int.UInt64
use creusot.prelude.Opaque
use seq.Seq
use creusot.int.UInt8
use mach.int.Int

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec; t_Assignments__1: UInt64.t }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq UInt8.t

axiom view_spec : forall self : t_Vec . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#sassignments'0] view self.t_Assignments__0

function view'1 (self : t_Assignments) : Seq.seq UInt8.t =
  [%#smodel] view'0 self

goal refines : [%#sassignments] forall self_ : t_Assignments . forall result : t_Assignments . UInt64.t'int result.t_Assignments__1
= UInt64.t'int self_.t_Assignments__1
/\ Seq.length (view'1 self_) = Seq.length (view'0 result)
/\ (forall i : int . 0 <= i /\ i < Seq.length (view'1 self_)  -> Seq.get (view'1 self_) i = Seq.get (view'0 result) i)
 -> result = self_
