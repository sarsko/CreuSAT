(* #"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 118 4 118 75 *)

(* assignments::Assignments *)

let%span sassignments = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 120 20 120 44
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 123 23 123 24
let%span sassignments'1 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 127 17 127 18
let%span sassignments'2 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 124 29 124 30
let%span sassignments'3 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 131 12 131 13
let%span sassignments'4 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 132 20 132 72
let%span sassignments'5 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 134 28 134 29
let%span sassignments'6 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 137 17 137 18
let%span sassignments'7 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 113 4 113 37
let%span sassignments'8 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 114 15 114 31
let%span sassignments'9 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 115 15 115 33
let%span sassignments'10 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 116 14 116 60
let%span sassignments'11 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 117 14 117 31
let%span sassignments'12 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 78 12 78 64
let%span sassignments'13 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 92 12 92 73
let%span sassignments'14 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 17 4 17 12
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 89 26 89 48
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span smodel'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span slogic = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 48 8 52 9
let%span sdecision = "/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 16 12 18 38
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34

use creusot.prelude.Opaque
use creusot.int.UInt64
use seq.Seq
use mach.int.Int
use creusot.int.UInt8
use creusot.prelude.MutBorrow
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec; t_Assignments__1: UInt64.t }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec'0) : Seq.seq UInt64.t

axiom view_spec : forall self : t_Vec'0 . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

type t_Decisions  =
  { t_Decisions__lit_order: t_Vec'0 }

function view'0 (self : t_Vec'0) : Seq.seq UInt64.t =
  [%#smodel'0] view self

let rec len (self_:t_Vec'0) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec'0] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]


predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) =
  [%#sslice] UInt64.t'int self < Seq.length seq

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) (out : UInt64.t) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec'0) (ix:UInt64.t) (return'  (x:UInt64.t))= {[@expl:index requires] [%#svec'1] in_bounds ix (view'0 self_)}
  any [ return''0 (result:UInt64.t)-> {[%#svec'2] has_value ix (view'0 self_) result} (! return' {result}) ] 

predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt8.t) =
  [%#sslice] UInt64.t'int self < Seq.length seq

function view'1 (self : t_Vec) : Seq.seq UInt8.t

axiom view_spec'0 : forall self : t_Vec . [%#svec] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'2 (self : t_Vec) : Seq.seq UInt8.t =
  [%#smodel'0] view'1 self

predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt8.t) (out : UInt8.t) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index'0 (self_:t_Vec) (ix:UInt64.t) (return'  (x:UInt8.t))= {[@expl:index requires] [%#svec'1] in_bounds'0 ix (view'2 self_)}
  any [ return''0 (result:UInt8.t)-> {[%#svec'2] has_value'0 ix (view'2 self_) result} (! return' {result}) ] 

predicate resolve (self : MutBorrow.t t_Assignments) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0 : MutBorrow.t t_Assignments) =
  resolve _0

predicate unset [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 46 0 46 38] (v : UInt8.t) =
  [%#slogic] if UInt8.t'int v >= 2 then true else false

function view'3 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#sassignments'14] view'1 self.t_Assignments__0

function view'4 (self : MutBorrow.t t_Assignments) : Seq.seq UInt8.t =
  [%#smodel] view'3 self.current

let rec len'0 (self_:t_Vec) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec'0] UInt64.t'int result = Seq.length (view'2 self_)} (! return' {result}) ]


type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec'1; t_Formula__num_vars: UInt64.t }

predicate inv [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 76 4 76 40] (self : t_Assignments) (f : t_Formula)
 =
  [%#sassignments'12] UInt64.t'int f.t_Formula__num_vars = Seq.length (view'3 self)
  /\ UInt64.t'int self.t_Assignments__1 <= UInt64.t'int f.t_Formula__num_vars

predicate complete [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 90 4 90 33] (self : t_Assignments) =
  [%#sassignments'13] forall i : int . 0 <= i /\ i < Seq.length (view'3 self)  -> not unset (Seq.get (view'3 self) i)

predicate inv'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/decision.rs" 14 4 14 36] (self : t_Decisions) (n : int) =
  [%#sdecision] Seq.length (view self.t_Decisions__lit_order) = n
  /\ (forall i : int . 0 <= i /\ i < Seq.length (view self.t_Decisions__lit_order)
   -> UInt64.t'int (Seq.get (view self.t_Decisions__lit_order) i) < n)

meta "compute_max_steps" 1000000

let rec find_unassigned[#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 118 4 118 75] (self:MutBorrow.t t_Assignments) (d:t_Decisions) (_f:t_Formula) (return'  (x:UInt64.t))= {[@expl:find_unassigned requires #0] [%#sassignments'7] inv self.current _f}
  {[@expl:find_unassigned requires #1] [%#sassignments'8] not complete self.current}
  {[@expl:find_unassigned requires #2] [%#sassignments'9] inv'0 d (Seq.length (view'4 self))}
  (! bb0
  [ bb0 = s0 [ s0 =  [ &i <- (self'0.current).t_Assignments__1 ] s1 | s1 = bb1 ] 
  | bb1 = bb1'0
    [ bb1'0 = {[@expl:loop invariant] [%#sassignments] UInt64.t'int i <= Seq.length (view d'0.t_Decisions__lit_order)}
      (! s0) [ s0 = bb2 ] 
      [ bb2 = s0 [ s0 = len {d'0.t_Decisions__lit_order} (fun (_ret:UInt64.t) ->  [ &_18 <- _ret ] s1) | s1 = bb3 ] 
      | bb3 = s0
        [ s0 =  [ &_16 <- UInt64.lt i _18 ] s1 | s1 = any [ br0 -> {_16 = false} (! bb10) | br1 -> {_16} (! bb4) ]  ]
      
      | bb4 = s0
        [ s0 = index {d'0.t_Decisions__lit_order} {i} (fun (_ret:UInt64.t) ->  [ &_24 <- _ret ] s1) | s1 = bb5 ]
      
      | bb5 = s0
        [ s0 = index'0 {(self'0.current).t_Assignments__0} {_24} (fun (_ret:UInt8.t) ->  [ &_21 <- _ret ] s1)
        | s1 = bb6 ]
      
      | bb6 = s0
        [ s0 =  [ &curr <- _21 ] s1
        | s1 =  [ &_28 <- UInt8.ge curr ([%#sassignments'0] (2 : UInt8.t)) ] s2
        | s2 = any [ br0 -> {_28 = false} (! bb9) | br1 -> {_28} (! bb7) ]  ]
      
      | bb9 = s0
        [ s0 = UInt64.add {i} {[%#sassignments'1] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s1)
        | s1 = bb1'0 ]
       ]
     ]
  
  | bb7 = s0
    [ s0 = UInt64.add {i} {[%#sassignments'2] (1 : UInt64.t)}
        (fun (_ret:UInt64.t) ->
           [ &self'0 <- { self'0 with current = { self'0.current with t_Assignments__1 = _ret } } ] 
          s1)
    | s1 = -{resolve'0 self'0}- s2
    | s2 = index {d'0.t_Decisions__lit_order} {i} (fun (_ret:UInt64.t) ->  [ &_32 <- _ret ] s3)
    | s3 = bb8 ]
  
  | bb8 = s0 [ s0 =  [ &_0 <- _32 ] s1 | s1 = bb19 ] 
  | bb10 = s0 [ s0 =  [ &i <- [%#sassignments'3] (0 : UInt64.t) ] s1 | s1 = bb11 ] 
  | bb11 = bb11'0
    [ bb11'0 = {[@expl:loop invariant] [%#sassignments'4] forall j : int . 0 <= j /\ j < UInt64.t'int i
       -> not unset (Seq.get (view'4 self'0) j)}
      (! s0) [ s0 = bb12 ] 
      [ bb12 = s0
        [ s0 = len'0 {(self'0.current).t_Assignments__0} (fun (_ret:UInt64.t) ->  [ &_41 <- _ret ] s1) | s1 = bb13 ]
      
      | bb13 = s0
        [ s0 =  [ &_39 <- UInt64.lt i _41 ] s1 | s1 = any [ br0 -> {_39 = false} (! bb18) | br1 -> {_39} (! bb14) ]  ]
      
      | bb14 = s0
        [ s0 = index'0 {(self'0.current).t_Assignments__0} {i} (fun (_ret:UInt8.t) ->  [ &_46 <- _ret ] s1)
        | s1 = bb15 ]
      
      | bb15 = s0
        [ s0 =  [ &_44 <- UInt8.ge _46 ([%#sassignments'5] (2 : UInt8.t)) ] s1
        | s1 = any [ br0 -> {_44 = false} (! bb17) | br1 -> {_44} (! bb16) ]  ]
      
      | bb17 = s0
        [ s0 = UInt64.add {i} {[%#sassignments'6] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s1)
        | s1 = bb11'0 ]
       ]
     ]
  
  | bb16 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 =  [ &_0 <- i ] s2 | s2 = bb19 ] 
  | bb19 = return''0 {_0}
  | bb18 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 = {false} any ]  ]
  )
  [ & _0 : UInt64.t = Any.any_l ()
  | & self'0 : MutBorrow.t t_Assignments = self
  | & d'0 : t_Decisions = d
  | & i : UInt64.t = Any.any_l ()
  | & _16 : bool = Any.any_l ()
  | & _18 : UInt64.t = Any.any_l ()
  | & curr : UInt8.t = Any.any_l ()
  | & _21 : UInt8.t = Any.any_l ()
  | & _24 : UInt64.t = Any.any_l ()
  | & _28 : bool = Any.any_l ()
  | & _32 : UInt64.t = Any.any_l ()
  | & _39 : bool = Any.any_l ()
  | & _41 : UInt64.t = Any.any_l ()
  | & _44 : bool = Any.any_l ()
  | & _46 : UInt8.t = Any.any_l () ]
  
  [ return''0 (result:UInt64.t)-> {[@expl:find_unassigned ensures #0] [%#sassignments'7] inv self.final _f}
    {[@expl:find_unassigned ensures #1] [%#sassignments'10] UInt64.t'int result < Seq.length (view'4 self)
    /\ unset (Seq.get (view'4 self) (UInt64.t'int result))}
    {[@expl:find_unassigned ensures #2] [%#sassignments'11] view'4 self = view'3 self.final}
    (! return' {result}) ]
  
