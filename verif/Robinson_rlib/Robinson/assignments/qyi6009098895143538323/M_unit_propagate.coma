(* #"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 199 4 199 64 *)

(* assignments::Assignments *)

let%span sassignments = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 200 49 200 64
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 201 27 201 28
let%span sassignments'1 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 214 20 214 68
let%span sassignments'2 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 213 20 213 67
let%span sassignments'3 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 210 20 211 130
let%span sassignments'4 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 207 20 208 99
let%span sassignments'5 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 206 20 206 48
let%span sassignments'6 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 205 20 205 98
let%span sassignments'7 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 204 20 204 44
let%span sassignments'8 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 203 20 203 32
let%span sassignments'9 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 231 17 231 18
let%span sassignments'10 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 188 4 188 36
let%span sassignments'11 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 189 15 189 28
let%span sassignments'12 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 190 14 190 82
let%span sassignments'13 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 191 14 191 39
let%span sassignments'14 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 192 14 197 5
let%span sassignments'15 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 198 14 198 104
let%span sassignments'16 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 92 12 92 73
let%span sassignments'17 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 85 20 85 48
let%span sassignments'18 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 78 12 78 64
let%span sassignments'19 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 143 4 143 36
let%span sassignments'20 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 144 15 144 28
let%span sassignments'21 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 145 15 145 47
let%span sassignments'22 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 146 14 146 39
let%span sassignments'23 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 147 14 147 82
let%span sassignments'24 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 154 14 159 5
let%span sassignments'25 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 160 14 160 118
let%span sassignments'26 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 17 4 17 12
let%span sassignments'27 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 47 8 48 43
let%span sassignments'28 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 63 4 63 49
let%span sassignments'29 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 56 8 56 61
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 89 26 89 48
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span smodel'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span sinvariant = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/invariant.rs" 25 8 25 18
let%span slogic = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 48 8 52 9
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34
let%span sclause = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 64 20 64 40
let%span sclause'0 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 85 8 85 38
let%span sclause'1 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 49 20 49 39
let%span sclause'2 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 79 20 79 38
let%span sclause'3 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 56 12 57 39
let%span sclause'4 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 40 12 43 96
let%span sclause'5 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 71 12 72 37
let%span sclause'6 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 19 4 19 12
let%span sclause'7 = "/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 92 12 93 31
let%span slit = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 57 12 60 13
let%span slit'0 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 68 12 68 30
let%span slit'1 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 46 12 49 13
let%span slit'2 = "/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 39 20 39 33
let%span sformula = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 79 20 79 58
let%span sformula'0 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 100 20 100 38
let%span sformula'1 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 115 20 115 40
let%span sformula'2 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 72 12 72 128
let%span sformula'3 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 92 12 93 45
let%span sformula'4 = "/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 107 12 108 47

use creusot.int.UInt64
use creusot.prelude.Opaque
use mach.int.Int
use seq.Seq
use creusot.int.UInt8
use creusot.prelude.MutBorrow
use creusot.prelude.Any

type t_ClauseState  =
  | C_Sat
  | C_Unsat
  | C_Unit
  | C_Unknown

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec; t_Assignments__1: UInt64.t }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq UInt8.t

axiom view_spec : forall self : t_Vec . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#sassignments'26] view self.t_Assignments__0

predicate unset [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 46 0 46 38] (v : UInt8.t) =
  [%#slogic] if UInt8.t'int v >= 2 then true else false

predicate complete [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 90 4 90 33] (self : t_Assignments) =
  [%#sassignments'16] forall i : int . 0 <= i /\ i < Seq.length (view'0 self)  -> not unset (Seq.get (view'0 self) i)

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Clause  =
  { t_Clause__rest: t_Vec'0 }

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function view'1 (self : t_Vec'0) : Seq.seq t_Lit

axiom view_spec'0 : forall self : t_Vec'0 . [%#svec] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'2 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 21 4 21 33] (self : t_Clause) : Seq.seq t_Lit =
  [%#sclause'6] view'1 self.t_Clause__rest

predicate unsat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 55 4 55 59] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1


predicate unsat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 54 4 54 59] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'3] forall i : int . 0 <= i /\ i < Seq.length (view'2 self)  -> unsat_inner (Seq.get (view'2 self) i) a

predicate unsat [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 63 4 63 46] (self : t_Clause) (a : t_Assignments) =
  [%#sclause] unsat_inner'0 self (view'0 a)

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

function view'3 (self : t_Vec'1) : Seq.seq t_Clause

axiom view_spec'1 : forall self : t_Vec'1 . [%#svec] Seq.length (view'3 self) <= UInt64.t'int (v_MAX : UInt64.t)

type t_Formula  =
  { t_Formula__clauses: t_Vec'1; t_Formula__num_vars: UInt64.t }

predicate sat_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 44 4 44 57] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'1] if self.t_Lit__polarity then
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 1
  else
    UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) = 0


predicate sat_inner'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 69 4 69 57] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'5] exists i : int . 0 <= i /\ i < Seq.length (view'2 self) /\ sat_inner (Seq.get (view'2 self) i) a

predicate sat [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 78 4 78 44] (self : t_Clause) (a : t_Assignments) =
  [%#sclause'2] sat_inner'0 self (view'0 a)

predicate unknown [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 84 4 84 48] (self : t_Clause) (a : t_Assignments) =
  [%#sclause'0] not sat self a /\ not unsat self a

predicate inv [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 38 4 38 36] (self : t_Lit) (n : int) =
  [%#slit'2] UInt64.t'int self.t_Lit__idx < n

predicate vars_in_range [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 90 4 90 46] (self : t_Clause) (n : int) =
  [%#sclause'7] forall i : int . 0 <= i /\ i < Seq.length (view'2 self)  -> inv (Seq.get (view'2 self) i) n

predicate unset_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/lit.rs" 66 4 66 59] (self : t_Lit) (a : Seq.seq UInt8.t) =
  [%#slit'0] UInt8.t'int (Seq.get a (UInt64.t'int self.t_Lit__idx)) >= 2

predicate unit_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 38 4 38 58] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#sclause'4] vars_in_range self (Seq.length a)
  /\ not sat_inner'0 self a
  /\ (exists i : int . 0 <= i
  /\ i < Seq.length (view'2 self)
  /\ unset_inner (Seq.get (view'2 self) i) a
  /\ (forall j : int . 0 <= j /\ j < Seq.length (view'2 self) /\ j <> i
   -> not unset_inner (Seq.get (view'2 self) j) a))

predicate unit' [#"/Users/sarekhs/CreuSAT/Robinson/src/clause.rs" 48 4 48 45] (self : t_Clause) (a : t_Assignments) =
  [%#sclause'1] unit_inner self (view'0 a)

predicate compatible_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 45 0 45 78] (a : Seq.seq UInt8.t) (a2 : Seq.seq UInt8.t)

 =
  [%#sassignments'27] Seq.length a = Seq.length a2
  /\ (forall i : int . 0 <= i /\ i < Seq.length a  -> unset (Seq.get a i) \/ Seq.get a i = Seq.get a2 i)

predicate complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 54 0 54 52] (a : Seq.seq UInt8.t) =
  [%#sassignments'29] forall i : int . 0 <= i /\ i < Seq.length a  -> not unset (Seq.get a i)

predicate compatible_complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 62 0 62 87] (a : Seq.seq UInt8.t) (a2 : Seq.seq UInt8.t)

 =
  [%#sassignments'28] compatible_inner a a2 /\ complete_inner a2

predicate sat_inner'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 90 4 90 57] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'3] forall i : int . 0 <= i /\ i < Seq.length (view'3 self.t_Formula__clauses)
   -> sat_inner'0 (Seq.get (view'3 self.t_Formula__clauses) i) a

predicate eventually_sat_complete_inner [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 70 4 70 77] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'2] exists a2 : Seq.seq UInt8.t . Seq.length a2 = UInt64.t'int self.t_Formula__num_vars
  /\ compatible_complete_inner a a2 /\ sat_inner'1 self a2

predicate eventually_sat_complete [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 78 4 78 64] (self : t_Formula) (a : t_Assignments)

 =
  [%#sformula] eventually_sat_complete_inner self (view'0 a)

predicate compatible [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 84 4 84 52] (self : t_Assignments) (a2 : t_Assignments)

 =
  [%#sassignments'17] compatible_inner (view'0 self) (view'0 a2)

predicate inv'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 76 4 76 40] (self : t_Assignments) (f : t_Formula)

 =
  [%#sassignments'18] UInt64.t'int f.t_Formula__num_vars = Seq.length (view'0 self)
  /\ UInt64.t'int self.t_Assignments__1 <= UInt64.t'int f.t_Formula__num_vars

function view'4 (self : t_Vec'1) : Seq.seq t_Clause =
  [%#smodel] view'3 self

let rec len (self_:t_Vec'1) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec'0] UInt64.t'int result = Seq.length (view'4 self_)} (! return' {result}) ]


predicate inv'1 (_0 : t_Formula)

axiom inv_axiom [@rewrite] : forall x : t_Formula [inv'1 x] . inv'1 x = true

predicate invariant' (self : t_Formula) =
  [%#sinvariant] inv'1 self

function view'5 (self : MutBorrow.t t_Assignments) : Seq.seq UInt8.t =
  [%#smodel'0] view'0 self.current

let rec unit_prop_once (self:MutBorrow.t t_Assignments) (i:UInt64.t) (f:t_Formula) (return'  (x:t_ClauseState))= {[@expl:unit_prop_once requires #0] [%#sassignments'19] inv'0 self.current f}
  {[@expl:unit_prop_once requires #1] [%#sassignments'20] invariant' f}
  {[@expl:unit_prop_once requires #2] [%#sassignments'21] 0 <= UInt64.t'int i
  /\ UInt64.t'int i < Seq.length (view'3 f.t_Formula__clauses)}
  any
  [ return''0 (result:t_ClauseState)-> {[%#sassignments'19] inv'0 self.final f}
    {[%#sassignments'22] compatible self.current self.final}
    {[%#sassignments'23] eventually_sat_complete f self.current = eventually_sat_complete f self.final}
    {[%#sassignments'24] match result with
      | C_Unit -> unit' (Seq.get (view'3 f.t_Formula__clauses) (UInt64.t'int i)) self.current
      /\ not complete self.current
      | C_Sat -> sat (Seq.get (view'3 f.t_Formula__clauses) (UInt64.t'int i)) self.final
      /\ view'5 self = view'0 self.final
      | C_Unsat -> unsat (Seq.get (view'3 f.t_Formula__clauses) (UInt64.t'int i)) self.final
      /\ view'5 self = view'0 self.final
      | C_Unknown -> view'5 self = view'0 self.final /\ not complete self.final
      end}
    {[%#sassignments'25] complete self.current  -> self.current = self.final /\ (result = C_Unsat \/ result = C_Sat)}
    (! return' {result}) ]


predicate resolve (self : MutBorrow.t t_Assignments) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0 : MutBorrow.t t_Assignments) =
  resolve _0

predicate sat'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 99 4 99 44] (self : t_Formula) (a : t_Assignments) =
  [%#sformula'0] sat_inner'1 self (view'0 a)

predicate unsat_inner'1 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 105 4 105 59] (self : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#sformula'4] exists i : int . 0 <= i
  /\ i < Seq.length (view'3 self.t_Formula__clauses) /\ unsat_inner'0 (Seq.get (view'3 self.t_Formula__clauses) i) a

predicate unsat'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/formula.rs" 114 4 114 46] (self : t_Formula) (a : t_Assignments)

 =
  [%#sformula'1] unsat_inner'1 self (view'0 a)

meta "compute_max_steps" 1000000

let rec unit_propagate[#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 199 4 199 64] (self:MutBorrow.t t_Assignments) (f:t_Formula) (return'  (x:t_ClauseState))= {[@expl:unit_propagate requires #0] [%#sassignments'10] inv'0 self.current f}
  {[@expl:unit_propagate requires #1] [%#sassignments'11] invariant' f}
  (! bb0
  [ bb0 = s0 [ s0 =  [ &_old_a <- [%#sassignments] self'0 ] s1 | s1 = bb1 ] 
  | bb1 = s0
    [ s0 =  [ &i <- [%#sassignments'0] (0 : UInt64.t) ] s1
    | s1 =  [ &out <- C_Sat ] s2
    | s2 =  [ &old_2_0 <- self'0 ] s3
    | s3 = bb2 ]
  
  | bb2 = bb2'0
    [ bb2'0 = {[@expl:mut invariant] old_2_0.final = self'0.final}
      {[@expl:loop invariant #0] [%#sassignments'8] inv'0 self'0.current f'0}
      {[@expl:loop invariant #1] [%#sassignments'7] compatible _old_a.current self'0.current}
      {[@expl:loop invariant #2] [%#sassignments'6] eventually_sat_complete f'0 _old_a.current
      = eventually_sat_complete f'0 self'0.current}
      {[@expl:loop invariant #3] [%#sassignments'5] not out = C_Unsat}
      {[@expl:loop invariant #4] [%#sassignments'4] complete _old_a.current
       -> _old_a.current = self'0.current
      /\ (forall j : int . 0 <= j /\ j < UInt64.t'int i
       -> not unknown (Seq.get (view'3 f'0.t_Formula__clauses) j) self'0.current
      /\ not unit' (Seq.get (view'3 f'0.t_Formula__clauses) j) self'0.current
      /\ sat (Seq.get (view'3 f'0.t_Formula__clauses) j) self'0.current)}
      {[@expl:loop invariant #5] [%#sassignments'3] out = C_Sat
       -> (forall j : int . 0 <= j /\ j < UInt64.t'int i
       -> not unsat (Seq.get (view'3 f'0.t_Formula__clauses) j) self'0.current
      /\ not unknown (Seq.get (view'3 f'0.t_Formula__clauses) j) self'0.current
      /\ not unit' (Seq.get (view'3 f'0.t_Formula__clauses) j) self'0.current
      /\ sat (Seq.get (view'3 f'0.t_Formula__clauses) j) self'0.current)}
      {[@expl:loop invariant #6] [%#sassignments'2] out = C_Unit  -> not complete _old_a.current}
      {[@expl:loop invariant #7] [%#sassignments'1] out = C_Unknown  -> not complete self'0.current}
      (! s0) [ s0 = bb3 ] 
      [ bb3 = s0 [ s0 = len {f'0.t_Formula__clauses} (fun (_ret:UInt64.t) ->  [ &_28 <- _ret ] s1) | s1 = bb4 ] 
      | bb4 = s0
        [ s0 =  [ &_26 <- UInt64.lt i _28 ] s1 | s1 = any [ br0 -> {_26 = false} (! bb19) | br1 -> {_26} (! bb5) ]  ]
      
      | bb5 = s0
        [ s0 = MutBorrow.borrow_mut <t_Assignments> {self'0.current}
            (fun (_ret:MutBorrow.t t_Assignments) ->
               [ &_32 <- _ret ] 
               [ &self'0 <- { self'0 with current = _ret.final } ] 
              s1)
        | s1 = unit_prop_once {_32} {i} {f'0} (fun (_ret:t_ClauseState) ->  [ &_31 <- _ret ] s2)
        | s2 = bb6 ]
      
      | bb6 = any
        [ br0 -> {_31 = C_Sat} (! bb8)
        | br1 -> {_31 = C_Unsat} (! bb9)
        | br2 -> {_31 = C_Unit} (! bb10)
        | br3 -> {_31 = C_Unknown} (! bb11) ]
      
      | bb11 = any
        [ br0 -> {out = C_Sat} (! bb16)
        | br1 -> {out = C_Unsat} (! bb15)
        | br2 -> {out = C_Unit} (! bb15)
        | br3 -> {out = C_Unknown} (! bb15) ]
      
      | bb15 = bb18
      | bb16 = bb17
      | bb17 = s0 [ s0 =  [ &_39 <- C_Unknown ] s1 | s1 =  [ &out <- _39 ] s2 | s2 = bb18 ] 
      | bb10 = bb12
      | bb12 = s0 [ s0 =  [ &_37 <- C_Unit ] s1 | s1 =  [ &out <- _37 ] s2 | s2 = bb18 ] 
      | bb8 = bb14
      | bb14 = bb18
      | bb18 = s0
        [ s0 = UInt64.add {i} {[%#sassignments'9] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s1)
        | s1 = bb2'0 ]
       ]
     ]
  
  | bb9 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 = bb13 ] 
  | bb13 = s0 [ s0 =  [ &_0 <- C_Unsat ] s1 | s1 = bb20 ] 
  | bb19 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 =  [ &_0 <- out ] s2 | s2 = bb20 ] 
  | bb20 = return''0 {_0} ]
  )
  [ & _0 : t_ClauseState = Any.any_l ()
  | & self'0 : MutBorrow.t t_Assignments = self
  | & f'0 : t_Formula = f
  | & _old_a : MutBorrow.t t_Assignments = Any.any_l ()
  | & i : UInt64.t = Any.any_l ()
  | & out : t_ClauseState = Any.any_l ()
  | & _26 : bool = Any.any_l ()
  | & _28 : UInt64.t = Any.any_l ()
  | & _31 : t_ClauseState = Any.any_l ()
  | & _32 : MutBorrow.t t_Assignments = Any.any_l ()
  | & _37 : t_ClauseState = Any.any_l ()
  | & _39 : t_ClauseState = Any.any_l ()
  | & old_2_0 : MutBorrow.t t_Assignments = Any.any_l () ]
  
  [ return''0 (result:t_ClauseState)-> {[@expl:unit_propagate ensures #0] [%#sassignments'10] inv'0 self.final f}
    {[@expl:unit_propagate ensures #1] [%#sassignments'12] eventually_sat_complete f self.final
    = eventually_sat_complete f self.current}
    {[@expl:unit_propagate ensures #2] [%#sassignments'13] compatible self.current self.final}
    {[@expl:unit_propagate ensures #3] [%#sassignments'14] match result with
      | C_Sat -> sat'0 f self.final
      | C_Unsat -> unsat'0 f self.final
      | C_Unknown -> not complete self.final
      | C_Unit -> not complete self.current
      end}
    {[@expl:unit_propagate ensures #4] [%#sassignments'15] complete self.current
     -> self.current = self.final /\ (result = C_Unsat \/ sat'0 f self.current)}
    (! return' {result}) ]
  
