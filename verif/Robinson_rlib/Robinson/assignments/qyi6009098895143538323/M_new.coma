(* #"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 108 4 108 35 *)

(* assignments::Assignments *)

let%span sassignments = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 109 35 109 38
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 109 53 109 54
let%span sassignments'1 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 105 15 105 28
let%span sassignments'2 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 106 14 106 28
let%span sassignments'3 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 107 14 107 78
let%span sassignments'4 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 78 12 78 64
let%span sassignments'5 = "/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 17 4 17 12
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 186 22 186 41
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 187 22 187 76
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span sinvariant = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/invariant.rs" 25 8 25 18
let%span slogic = "/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 48 8 52 9
let%span sindex = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ops/index.rs" 29 8 29 31

use creusot.int.UInt8
use creusot.prelude.Opaque
use creusot.int.UInt64
use seq.Seq
use mach.int.Int
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec; t_Formula__num_vars: UInt64.t }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec'0) : Seq.seq UInt8.t

axiom view_spec : forall self : t_Vec'0 . [%#svec'1] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function index_logic [@inline:trivial] (self : t_Vec'0) (ix : int) : UInt8.t =
  [%#sindex] Seq.get (view self) ix

let rec from_elem (elem:UInt8.t) (n:UInt64.t) (return'  (x:t_Vec'0))= any
  [ return''0 (result:t_Vec'0)-> {[%#svec] Seq.length (view result) = UInt64.t'int n}
    {[%#svec'0] forall i : int . 0 <= i /\ i < UInt64.t'int n  -> index_logic result i = elem}
    (! return' {result}) ]


type t_Assignments  =
  { t_Assignments__0: t_Vec'0; t_Assignments__1: UInt64.t }

predicate inv (_0 : t_Formula)

axiom inv_axiom [@rewrite] : forall x : t_Formula [inv x] . inv x = true

predicate invariant' (self : t_Formula) =
  [%#sinvariant] inv self

function view'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#sassignments'5] view self.t_Assignments__0

predicate inv'0 [#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 76 4 76 40] (self : t_Assignments) (f : t_Formula)

 =
  [%#sassignments'4] UInt64.t'int f.t_Formula__num_vars = Seq.length (view'0 self)
  /\ UInt64.t'int self.t_Assignments__1 <= UInt64.t'int f.t_Formula__num_vars

predicate unset [#"/Users/sarekhs/CreuSAT/Robinson/src/logic.rs" 46 0 46 38] (v : UInt8.t) =
  [%#slogic] if UInt8.t'int v >= 2 then true else false

meta "compute_max_steps" 1000000

let rec new[#"/Users/sarekhs/CreuSAT/Robinson/src/assignments.rs" 108 4 108 35] (f:t_Formula) (return'  (x:t_Assignments))= {[@expl:new requires] [%#sassignments'1] invariant' f}
  (! bb0
  [ bb0 = s0
    [ s0 = from_elem {[%#sassignments] (2 : UInt8.t)} {f'0.t_Formula__num_vars}
        (fun (_ret:t_Vec'0) ->  [ &_5 <- _ret ] s1)
    | s1 = bb1 ]
  
  | bb1 = s0
    [ s0 =  [ &_0 <- { t_Assignments__0 = _5; t_Assignments__1 = ([%#sassignments'0] (0 : UInt64.t)) } ] s1 | s1 = bb2 ]
  
  | bb2 = return''0 {_0} ]
  ) [ & _0 : t_Assignments = Any.any_l () | & f'0 : t_Formula = f | & _5 : t_Vec'0 = Any.any_l () ] 
  [ return''0 (result:t_Assignments)-> {[@expl:new ensures #0] [%#sassignments'2] inv'0 result f}
    {[@expl:new ensures #1] [%#sassignments'3] forall i : int . 0 <= i /\ i < Seq.length (view'0 result)
     -> unset (Seq.get (view'0 result) i)}
    (! return' {result}) ]
  
