(* #"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 164 0 164 39 *)

let%span slib = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 168 27 168 31
let%span slib'0 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 168 4 168 67
let%span slib'1 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 168 60 168 65
let%span slib'2 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 164 9 164 10
let%span slib'3 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 161 11 161 36
let%span slib'4 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 162 11 162 24
let%span slib'5 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 163 10 163 76
let%span slib'6 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 160 10 160 30
let%span slib'7 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 135 13 135 17
let%span slib'8 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 133 15 133 43
let%span slib'9 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 134 14 134 36
let%span slib'10 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 148 11 148 38
let%span slib'11 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 149 11 149 44
let%span slib'12 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 150 0 150 41
let%span slib'13 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 151 10 151 39
let%span slib'14 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 152 10 152 34
let%span slib'15 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 97 12 98 40
let%span slib'16 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 85 12 87 49
let%span slib'17 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 45 12 46 39
let%span slib'18 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 108 12 109 33
let%span slib'19 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 75 12 75 41
let%span slib'20 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 34 12 35 62
let%span slib'21 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 56 12 57 42
let%span slib'22 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 67 12 67 25
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 89 26 89 48
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sinvariant = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/invariant.rs" 25 8 25 18

use creusot.prelude.Opaque
use creusot.int.UInt64
use seq.Seq
use mach.int.Int
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec }

type t_Pasn  =
  { t_Pasn__assign: t_Assignments; t_Pasn__ix: UInt64.t }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq bool

axiom view_spec : forall self : t_Vec . [%#svec'0] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : t_Vec) : Seq.seq bool =
  [%#smodel] view self

let rec len (self_:t_Vec) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]


type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec'0; t_Formula__num_vars: UInt64.t }

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

type t_Clause  =
  { t_Clause__0: t_Vec'1 }

function view'1 (self : t_Vec'0) : Seq.seq t_Clause

axiom view_spec'0 : forall self : t_Vec'0 . [%#svec'0] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

type t_Lit  =
  { t_Lit__var: UInt64.t; t_Lit__value: bool }

function view'2 (self : t_Vec'1) : Seq.seq t_Lit

axiom view_spec'1 : forall self : t_Vec'1 . [%#svec'0] Seq.length (view'2 self) <= UInt64.t'int (v_MAX : UInt64.t)

predicate var_in_range [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 65 4 65 41] (self : t_Lit) (n : int) =
  [%#slib'22] UInt64.t'int self.t_Lit__var < n

predicate vars_in_range [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 54 4 54 42] (self : t_Clause) (n : int) =
  [%#slib'21] forall i : int . 0 <= i /\ i < Seq.length (view'2 self.t_Clause__0)
   -> var_in_range (Seq.get (view'2 self.t_Clause__0) i) n

predicate invariant' [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 32 4 32 30] (self : t_Formula) =
  [%#slib'20] forall i : int . 0 <= i /\ i < Seq.length (view'1 self.t_Formula__clauses)
   -> vars_in_range (Seq.get (view'1 self.t_Formula__clauses) i) (UInt64.t'int self.t_Formula__num_vars)

predicate inv (_0 : t_Formula)

axiom inv_axiom [@rewrite] : forall x : t_Formula [inv x] . inv x
= (invariant' x
/\ match x with
  | {t_Formula__clauses = clauses ; t_Formula__num_vars = num_vars} -> true
  end)

predicate invariant''0 (self : t_Formula) =
  [%#sinvariant] inv self

predicate inv'0 (_0 : t_Formula)

axiom inv_axiom'0 [@rewrite] : forall x : t_Formula [inv'0 x] . inv'0 x = invariant''0 x

predicate sat [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 73 4 73 40] (self : t_Lit) (a : t_Assignments) =
  [%#slib'19] Seq.get (view a.t_Assignments__0) (UInt64.t'int self.t_Lit__var) = self.t_Lit__value

predicate sat'0 [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 106 4 106 40] (self : t_Clause) (a : t_Assignments) =
  [%#slib'18] exists i : int . 0 <= i
  /\ i < Seq.length (view'2 self.t_Clause__0) /\ sat (Seq.get (view'2 self.t_Clause__0) i) a

predicate sat'1 [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 43 4 43 40] (self : t_Formula) (a : t_Assignments) =
  [%#slib'17] forall i : int . 0 <= i /\ i < Seq.length (view'1 self.t_Formula__clauses)
   -> sat'0 (Seq.get (view'1 self.t_Formula__clauses) i) a

let rec eval (self:t_Formula) (a:t_Assignments) (return'  (x:bool))= {[@expl:eval 'self' type invariant] [%#slib'7] inv'0 self}
  {[@expl:eval requires] [%#slib'8] Seq.length (view a.t_Assignments__0) = UInt64.t'int self.t_Formula__num_vars}
  any [ return''0 (result:bool)-> {[%#slib'9] result = sat'1 self a} (! return' {result}) ] 

constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)

predicate compatible [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 83 4 83 41] (self : t_Assignments) (pa : t_Pasn) =
  [%#slib'16] Seq.length (view (pa.t_Pasn__assign).t_Assignments__0) = Seq.length (view self.t_Assignments__0)
  /\ (forall i : int . 0 <= i /\ i < UInt64.t'int pa.t_Pasn__ix
   -> Seq.get (view (pa.t_Pasn__assign).t_Assignments__0) i = Seq.get (view self.t_Assignments__0) i)

let rec set_next (pa:t_Pasn) (b:bool) (return'  (x:t_Pasn))= {[@expl:set_next requires #0] [%#slib'10] UInt64.t'int pa.t_Pasn__ix
  < Seq.length (view (pa.t_Pasn__assign).t_Assignments__0)}
  {[@expl:set_next requires #1] [%#slib'11] Seq.length (view (pa.t_Pasn__assign).t_Assignments__0)
  <= UInt64.t'int v_MAX'0}
  any
  [ return''0 (result:t_Pasn)-> {[%#slib'12] compatible result.t_Pasn__assign pa}
    {[%#slib'13] Seq.get (view (result.t_Pasn__assign).t_Assignments__0) (UInt64.t'int pa.t_Pasn__ix) = b}
    {[%#slib'14] UInt64.t'int result.t_Pasn__ix = UInt64.t'int pa.t_Pasn__ix + 1}
    (! return' {result}) ]


predicate invariant''1 [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 95 4 95 38] (self : t_Pasn) (n : int) =
  [%#slib'15] UInt64.t'int self.t_Pasn__ix <= Seq.length (view (self.t_Pasn__assign).t_Assignments__0)
  /\ Seq.length (view (self.t_Pasn__assign).t_Assignments__0) = n

meta "compute_max_steps" 1000000

let rec solve[#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 164 0 164 39] (f:t_Formula) (pa:t_Pasn) (return'  (x:bool))= {[@expl:solve 'f' type invariant] [%#slib'2] inv'0 f}
  {[@expl:solve requires #0] [%#slib'3] invariant''1 pa (UInt64.t'int f.t_Formula__num_vars)}
  {[@expl:solve requires #1] [%#slib'4] invariant''0 f}
  (! bb0
  [ bb0 = bb1
  | bb1 = bb2
  | bb2 = s0
    [ s0 = len {(pa'0.t_Pasn__assign).t_Assignments__0} (fun (_ret:UInt64.t) ->  [ &_10 <- _ret ] s1) | s1 = bb3 ]
  
  | bb3 = s0
    [ s0 =  [ &_8 <- pa'0.t_Pasn__ix = _10 ] s1 | s1 = any [ br0 -> {_8 = false} (! bb6) | br1 -> {_8} (! bb4) ]  ]
  
  | bb4 = s0
    [ s0 =  [ &_15 <- pa'0.t_Pasn__assign ] s1
    | s1 = eval {f'0} {_15} (fun (_ret:bool) ->  [ &_0 <- _ret ] s2)
    | s2 = bb5 ]
  
  | bb5 = bb15
  | bb6 = s0
    [ s0 =  [ &_20 <- pa'0 ] s1
    | s1 = set_next {_20} {[%#slib] true} (fun (_ret:t_Pasn) ->  [ &_18 <- _ret ] s2)
    | s2 = bb7 ]
  
  | bb7 = s0 [ s0 = solve {f'0} {_18} (fun (_ret:bool) ->  [ &_16 <- _ret ] s1) | s1 = bb8 ] 
  | bb8 = any [ br0 -> {_16 = false} (! bb10) | br1 -> {_16} (! bb9) ] 
  | bb9 = s0 [ s0 =  [ &_0 <- [%#slib'0] true ] s1 | s1 = bb14 ] 
  | bb10 = bb11
  | bb11 = s0
    [ s0 =  [ &_24 <- pa'0 ] s1
    | s1 = set_next {_24} {[%#slib'1] false} (fun (_ret:t_Pasn) ->  [ &_22 <- _ret ] s2)
    | s2 = bb12 ]
  
  | bb12 = s0 [ s0 = solve {f'0} {_22} (fun (_ret:bool) ->  [ &_0 <- _ret ] s1) | s1 = bb13 ] 
  | bb13 = bb14
  | bb14 = bb15
  | bb15 = return''0 {_0} ]
  )
  [ & _0 : bool = Any.any_l ()
  | & f'0 : t_Formula = f
  | & pa'0 : t_Pasn = pa
  | & _8 : bool = Any.any_l ()
  | & _10 : UInt64.t = Any.any_l ()
  | & _15 : t_Assignments = Any.any_l ()
  | & _16 : bool = Any.any_l ()
  | & _18 : t_Pasn = Any.any_l ()
  | & _20 : t_Pasn = Any.any_l ()
  | & _22 : t_Pasn = Any.any_l ()
  | & _24 : t_Pasn = Any.any_l () ]
  
  [ return''0 (result:bool)-> {[@expl:solve ensures] [%#slib'5] (not result)
    = (forall a : t_Assignments . compatible a pa  -> not sat'1 f a)}
    (! return' {result}) ]
  
