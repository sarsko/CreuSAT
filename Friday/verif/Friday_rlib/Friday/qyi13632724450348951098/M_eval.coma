(* #"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 117 4 117 43 *)

(* Clause *)

let%span slib = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 118 27 118 28
let%span slib'0 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 121 20 121 37
let%span slib'1 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 120 20 120 75
let%span slib'2 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 126 17 126 18
let%span slib'3 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 124 23 124 27
let%span slib'4 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 128 8 128 13
let%span slib'5 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 115 15 115 45
let%span slib'6 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 116 14 116 36
let%span slib'7 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 75 12 75 41
let%span slib'8 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 56 12 57 42
let%span slib'9 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 108 12 109 33
let%span slib'10 = "/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 67 12 67 25
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 89 26 89 48
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37

use creusot.int.UInt64
use creusot.prelude.Opaque
use seq.Seq
use mach.int.Int
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Clause  =
  { t_Clause__0: t_Vec }

type t_Lit  =
  { t_Lit__var: UInt64.t; t_Lit__value: bool }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Lit

axiom view_spec : forall self : t_Vec . [%#svec'0] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : t_Vec) : Seq.seq t_Lit =
  [%#smodel] view self

let rec len (self_:t_Vec) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]


type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec'0 }

function view'1 (self : t_Vec'0) : Seq.seq bool

axiom view_spec'0 : forall self : t_Vec'0 . [%#svec'0] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

predicate sat [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 73 4 73 40] (self : t_Lit) (a : t_Assignments) =
  [%#slib'7] Seq.get (view'1 a.t_Assignments__0) (UInt64.t'int self.t_Lit__var) = self.t_Lit__value

predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Lit) =
  [%#sslice] UInt64.t'int self < Seq.length seq

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Lit) (out : t_Lit) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:t_Lit))= {[@expl:index requires] [%#svec'1] in_bounds ix (view'0 self_)}
  any [ return''0 (result:t_Lit)-> {[%#svec'2] has_value ix (view'0 self_) result} (! return' {result}) ] 

predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq bool) =
  [%#sslice] UInt64.t'int self < Seq.length seq

function view'2 (self : t_Vec'0) : Seq.seq bool =
  [%#smodel] view'1 self

predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq bool) (out : bool) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index'0 (self_:t_Vec'0) (ix:UInt64.t) (return'  (x:bool))= {[@expl:index requires] [%#svec'1] in_bounds'0 ix (view'2 self_)}
  any [ return''0 (result:bool)-> {[%#svec'2] has_value'0 ix (view'2 self_) result} (! return' {result}) ] 

predicate var_in_range [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 65 4 65 41] (self : t_Lit) (n : int) =
  [%#slib'10] UInt64.t'int self.t_Lit__var < n

predicate vars_in_range [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 54 4 54 42] (self : t_Clause) (n : int) =
  [%#slib'8] forall i : int . 0 <= i /\ i < Seq.length (view self.t_Clause__0)
   -> var_in_range (Seq.get (view self.t_Clause__0) i) n

predicate sat'0 [#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 106 4 106 40] (self : t_Clause) (a : t_Assignments) =
  [%#slib'9] exists i : int . 0 <= i
  /\ i < Seq.length (view self.t_Clause__0) /\ sat (Seq.get (view self.t_Clause__0) i) a

meta "compute_max_steps" 1000000

let rec eval[#"/Users/sarekhs/CreuSAT/Friday/src/lib.rs" 117 4 117 43] (self:t_Clause) (a:t_Assignments) (return'  (x:bool))= {[@expl:eval requires] [%#slib'5] vars_in_range self (Seq.length (view'1 a.t_Assignments__0))}
  (! bb0
  [ bb0 = s0
    [ s0 =  [ &i <- [%#slib] (0 : UInt64.t) ] s1
    | s1 = len {self'0.t_Clause__0} (fun (_ret:UInt64.t) ->  [ &clause_len <- _ret ] s2)
    | s2 = bb1 ]
  
  | bb1 = bb2
  | bb2 = bb2'0
    [ bb2'0 = {[@expl:loop invariant #0] [%#slib'1] forall j : int . 0 <= j /\ j < UInt64.t'int i
       -> not sat (Seq.get (view self'0.t_Clause__0) j) a'0}
      {[@expl:loop invariant #1] [%#slib'0] UInt64.t'int i <= UInt64.t'int clause_len}
      (! s0) [ s0 = bb3 ] 
      [ bb3 = s0
        [ s0 =  [ &_13 <- UInt64.lt i clause_len ] s1
        | s1 = any [ br0 -> {_13 = false} (! bb10) | br1 -> {_13} (! bb4) ]  ]
      
      | bb4 = s0 [ s0 = index {self'0.t_Clause__0} {i} (fun (_ret:t_Lit) ->  [ &_22 <- _ret ] s1) | s1 = bb5 ] 
      | bb5 = s0
        [ s0 = index'0 {a'0.t_Assignments__0} {_22.t_Lit__var} (fun (_ret:bool) ->  [ &_19 <- _ret ] s1) | s1 = bb6 ]
      
      | bb6 = s0 [ s0 = index {self'0.t_Clause__0} {i} (fun (_ret:t_Lit) ->  [ &_26 <- _ret ] s1) | s1 = bb7 ] 
      | bb7 = s0
        [ s0 =  [ &_17 <- _19 = _26.t_Lit__value ] s1
        | s1 = any [ br0 -> {_17 = false} (! bb9) | br1 -> {_17} (! bb8) ]  ]
      
      | bb9 = s0
        [ s0 = UInt64.add {i} {[%#slib'2] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s1) | s1 = bb2'0 ]
       ]
     ]
  
  | bb8 = s0 [ s0 =  [ &_0 <- [%#slib'3] true ] s1 | s1 = bb11 ] 
  | bb10 = s0 [ s0 =  [ &_0 <- [%#slib'4] false ] s1 | s1 = bb11 ] 
  | bb11 = return''0 {_0} ]
  )
  [ & _0 : bool = Any.any_l ()
  | & self'0 : t_Clause = self
  | & a'0 : t_Assignments = a
  | & i : UInt64.t = Any.any_l ()
  | & clause_len : UInt64.t = Any.any_l ()
  | & _13 : bool = Any.any_l ()
  | & _17 : bool = Any.any_l ()
  | & _19 : bool = Any.any_l ()
  | & _22 : t_Lit = Any.any_l ()
  | & _26 : t_Lit = Any.any_l () ]
   [ return''0 (result:bool)-> {[@expl:eval ensures] [%#slib'6] result = sat'0 self a} (! return' {result}) ] 
