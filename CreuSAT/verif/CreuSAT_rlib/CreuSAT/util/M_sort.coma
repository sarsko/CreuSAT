(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 59 0 59 40 *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 89 26 89 48
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 181 26 181 42
let%span svec'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 182 26 182 48
let%span svec'4 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span smodel'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 258 19 258 35
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 259 19 259 35
let%span sslice'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 260 18 260 50
let%span sslice'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span sslice'4 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 27 14 27 41
let%span sslice'5 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 28 14 28 42
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34
let%span sseq = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/seq.rs" 312 8 312 41
let%span ssnapshot = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/snapshot.rs" 50 20 50 39
let%span slogic_util = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 48 16 48 108
let%span slogic_util'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 35 8 35 76
let%span slogic_util'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 42 4 42 44
let%span sord = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 129 39 129 89
let%span sord'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 134 39 134 86
let%span sord'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 139 39 139 86
let%span sord'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 144 39 144 89
let%span sord'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 149 39 149 70
let%span sord'4 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 154 40 154 57
let%span sord'5 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 155 40 155 57
let%span sord'6 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 156 39 156 56
let%span sord'7 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 161 40 161 70
let%span sord'8 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 162 39 162 72
let%span sord'9 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 167 40 167 73
let%span sord'10 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 168 39 168 69
let%span sord'11 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 173 39 173 84
let%span sord'12 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 230 16 236 17
let%span sutil = "/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 60 23 60 24
let%span sutil'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 61 52 61 67
let%span sutil'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 65 16 65 33
let%span sutil'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 64 16 64 52
let%span sutil'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 63 16 63 30
let%span sutil'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 62 16 62 41
let%span sutil'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 68 24 68 25
let%span sutil'6 = "/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 71 20 71 43
let%span sutil'7 = "/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 70 20 70 46
let%span sutil'8 = "/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 69 20 69 78
let%span sutil'9 = "/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 76 17 76 18
let%span sutil'10 = "/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 79 13 79 14
let%span sutil'11 = "/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 57 10 57 36
let%span sutil'12 = "/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 58 10 58 34

use creusot.int.UInt64
use seq.Seq
use mach.int.Int
use creusot.prelude.MutBorrow
use creusot.prelude.Opaque
use seq.Permut
use creusot.slice.Slice64
use creusot.prelude.Any

type tuple  =
  { _0: UInt64.t; _1: UInt64.t }

type t_Ordering  =
  | C_Less
  | C_Equal
  | C_Greater

function cmp_log (self : UInt64.t) (o : UInt64.t) : t_Ordering =
  [%#sord'12] if UInt64.lt self o then C_Less else if self = o then C_Equal else C_Greater

function eq_cmp (x : UInt64.t) (y : UInt64.t) : ()

axiom eq_cmp_spec : forall x : UInt64.t, y : UInt64.t . [%#sord'11] (x = y) = (cmp_log x y = C_Equal)

function antisym2 (x : UInt64.t) (y : UInt64.t) : ()

axiom antisym2_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord'9] cmp_log x y = C_Greater)
 -> ([%#sord'10] cmp_log y x = C_Less)

function antisym1 (x : UInt64.t) (y : UInt64.t) : ()

axiom antisym1_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord'7] cmp_log x y = C_Less)
 -> ([%#sord'8] cmp_log y x = C_Greater)

function trans (x : UInt64.t) (y : UInt64.t) (z : UInt64.t) (o : t_Ordering) : ()

axiom trans_spec : forall x : UInt64.t, y : UInt64.t, z : UInt64.t, o : t_Ordering . ([%#sord'4] cmp_log x y = o)
 -> ([%#sord'5] cmp_log y z = o)  -> ([%#sord'6] cmp_log x z = o)

function refl (x : UInt64.t) : ()

axiom refl_spec : forall x : UInt64.t . [%#sord'3] cmp_log x x = C_Equal

function cmp_gt_log (x : UInt64.t) (y : UInt64.t) : ()

axiom cmp_gt_log_spec : forall x : UInt64.t, y : UInt64.t . [%#sord'2] UInt64.gt x y = (cmp_log x y = C_Greater)

function cmp_ge_log (x : UInt64.t) (y : UInt64.t) : ()

axiom cmp_ge_log_spec : forall x : UInt64.t, y : UInt64.t . [%#sord'1] UInt64.ge x y = (cmp_log x y <> C_Less)

function cmp_lt_log (x : UInt64.t) (y : UInt64.t) : ()

axiom cmp_lt_log_spec : forall x : UInt64.t, y : UInt64.t . [%#sord'0] UInt64.lt x y = (cmp_log x y = C_Less)

function cmp_le_log (x : UInt64.t) (y : UInt64.t) : ()

axiom cmp_le_log_spec : forall x : UInt64.t, y : UInt64.t . [%#sord] UInt64.le x y = (cmp_log x y <> C_Greater)

predicate partition [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 47 0 47 56] (v : Seq.seq tuple) (i : int)
 =
  [%#slogic_util] forall k1 : int, k2 : int . 0 <= k1 /\ k1 < i /\ i <= k2 /\ k2 < Seq.length v
   -> UInt64.le (Seq.get v k1)._0 (Seq.get v k2)._0

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq tuple

axiom view_spec : forall self : t_Vec . [%#svec'4] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : MutBorrow.t t_Vec) : Seq.seq tuple =
  [%#smodel] view self.current

predicate sorted_range_tuple_zeroth [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 33 0 33 80] (s : Seq.seq tuple) (l : int) (u : int)

 =
  [%#slogic_util'0] forall i : int, j : int . l <= i /\ i < j /\ j < u  -> UInt64.le (Seq.get s i)._0 (Seq.get s j)._0

predicate permutation_of (self : Seq.seq tuple) (other : Seq.seq tuple) =
  [%#sseq] Permut.permut self other 0 (Seq.length self)

function view'1 (self : MutBorrow.t t_Vec) : Seq.seq tuple =
  [%#smodel'0] view'0 self

function view'2 (self : MutBorrow.t t_Vec) : Seq.seq tuple =
  [%#ssnapshot] view'1 self

function view'3 (self : t_Vec) : Seq.seq tuple =
  [%#smodel'0] view self

let rec len (self_:t_Vec) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec] UInt64.t'int result = Seq.length (view'3 self_)} (! return' {result}) ]


predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq tuple) =
  [%#sslice'2] UInt64.t'int self < Seq.length seq

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq tuple) (out : tuple) =
  [%#sslice'3] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:tuple))= {[@expl:index requires] [%#svec'0] in_bounds ix (view'3 self_)}
  any [ return''0 (result:tuple)-> {[%#svec'1] has_value ix (view'3 self_) result} (! return' {result}) ] 

function view'4 (self : Slice64.slice tuple) : Seq.seq tuple

axiom view_spec'0 : forall self : Slice64.slice tuple . ([%#sslice'4] Seq.length (view'4 self)
<= UInt64.t'int (v_MAX : UInt64.t))
&& ([%#sslice'5] view'4 self = Slice64.id self)

function view'5 (self : MutBorrow.t (Slice64.slice tuple)) : Seq.seq tuple =
  [%#smodel] view'4 self.current

let rec deref_mut (self_:MutBorrow.t t_Vec) (return'  (x:MutBorrow.t (Slice64.slice tuple)))= any
  [ return''0 (result:MutBorrow.t (Slice64.slice tuple))-> {[%#svec'2] view'5 result = view'0 self_}
    {[%#svec'3] view'4 result.final = view self_.final}
    (! return' {result}) ]


let rec swap (self_:MutBorrow.t (Slice64.slice tuple)) (i:UInt64.t) (j:UInt64.t) (return'  (x:()))= {[@expl:swap requires #0] [%#sslice] UInt64.t'int i
  < Seq.length (view'5 self_)}
  {[@expl:swap requires #1] [%#sslice'0] UInt64.t'int j < Seq.length (view'5 self_)}
  any
  [ return''0 (result:())-> {[%#sslice'1] Permut.exchange (view'4 self_.final) (view'5 self_) (UInt64.t'int i) (UInt64.t'int j)}
    (! return' {result}) ]


predicate resolve (self : MutBorrow.t (Slice64.slice tuple)) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0'0 : MutBorrow.t (Slice64.slice tuple)) =
  resolve _0'0

predicate resolve'1 (self : MutBorrow.t t_Vec) =
  [%#sresolve] self.final = self.current

predicate resolve'2 (_0'0 : MutBorrow.t t_Vec) =
  resolve'1 _0'0

predicate sorted_tuple_zeroth [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 41 0 41 58] (s : Seq.seq tuple)
 =
  [%#slogic_util'1] sorted_range_tuple_zeroth s 0 (Seq.length s)

meta "compute_max_steps" 1000000

let rec sort[#"/Users/sarekhs/CreuSAT/CreuSAT/src/util.rs" 59 0 59 40] (v:MutBorrow.t t_Vec) (return'  (x:()))= (! bb0
  [ bb0 = s0 [ s0 =  [ &i <- [%#sutil] (0 : UInt64.t) ] s1 | s1 =  [ &old_v <- [%#sutil'0] v'0 ] s2 | s2 = bb1 ] 
  | bb1 = s0 [ s0 =  [ &old_2_0 <- v'0 ] s1 | s1 = bb2 ] 
  | bb2 = bb2'0
    [ bb2'0 = {[@expl:mut invariant] old_2_0.final = v'0.final}
      {[@expl:loop invariant #0] [%#sutil'4] permutation_of (view'0 v'0) (view'2 old_v)}
      {[@expl:loop invariant #1] [%#sutil'3] UInt64.t'int i <= Seq.length (view'0 v'0)}
      {[@expl:loop invariant #2] [%#sutil'2] sorted_range_tuple_zeroth (view'0 v'0) 0 (UInt64.t'int i)}
      {[@expl:loop invariant #3] [%#sutil'1] partition (view'0 v'0) (UInt64.t'int i)}
      (! s0) [ s0 = bb3 ] 
      [ bb3 = s0 [ s0 = len {v'0.current} (fun (_ret:UInt64.t) ->  [ &_15 <- _ret ] s1) | s1 = bb4 ] 
      | bb4 = s0
        [ s0 =  [ &_13 <- UInt64.lt i _15 ] s1 | s1 = any [ br0 -> {_13 = false} (! bb18) | br1 -> {_13} (! bb5) ]  ]
      
      | bb5 = s0
        [ s0 =  [ &max <- i ] s1
        | s1 = UInt64.add {i} {[%#sutil'5] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &j <- _ret ] s2)
        | s2 = bb6 ]
      
      | bb6 = bb6'0
        [ bb6'0 = {[@expl:loop invariant #0] [%#sutil'8] forall k : int . UInt64.t'int i <= k /\ k < UInt64.t'int j
           -> UInt64.le (Seq.get (view'0 v'0) (UInt64.t'int max))._0 (Seq.get (view'0 v'0) k)._0}
          {[@expl:loop invariant #1] [%#sutil'7] UInt64.t'int i <= UInt64.t'int j
          /\ UInt64.t'int j <= Seq.length (view'0 v'0)}
          {[@expl:loop invariant #2] [%#sutil'6] UInt64.t'int i <= UInt64.t'int max
          /\ UInt64.t'int max < UInt64.t'int j}
          (! s0) [ s0 = bb7 ] 
          [ bb7 = s0 [ s0 = len {v'0.current} (fun (_ret:UInt64.t) ->  [ &_27 <- _ret ] s1) | s1 = bb8 ] 
          | bb8 = s0
            [ s0 =  [ &_25 <- UInt64.lt j _27 ] s1
            | s1 = any [ br0 -> {_25 = false} (! bb15) | br1 -> {_25} (! bb9) ]  ]
          
          | bb9 = s0 [ s0 = index {v'0.current} {j} (fun (_ret:tuple) ->  [ &_32 <- _ret ] s1) | s1 = bb10 ] 
          | bb10 = s0 [ s0 = index {v'0.current} {max} (fun (_ret:tuple) ->  [ &_36 <- _ret ] s1) | s1 = bb11 ] 
          | bb11 = s0
            [ s0 =  [ &_30 <- UInt64.lt _32._0 _36._0 ] s1
            | s1 = any [ br0 -> {_30 = false} (! bb13) | br1 -> {_30} (! bb12) ]  ]
          
          | bb12 = s0 [ s0 =  [ &max <- j ] s1 | s1 = bb14 ] 
          | bb13 = bb14
          | bb14 = s0
            [ s0 = UInt64.add {j} {[%#sutil'9] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &j <- _ret ] s1)
            | s1 = bb6'0 ]
           ]
         ]
      
      | bb15 = s0
        [ s0 = MutBorrow.borrow_mut <t_Vec> {v'0.current}
            (fun (_ret:MutBorrow.t t_Vec) ->  [ &_44 <- _ret ]  [ &v'0 <- { v'0 with current = _ret.final } ] s1)
        | s1 = deref_mut {_44} (fun (_ret:MutBorrow.t (Slice64.slice tuple)) ->  [ &_43 <- _ret ] s2)
        | s2 = bb16 ]
      
      | bb16 = s0
        [ s0 = MutBorrow.borrow_final <Slice64.slice tuple> {_43.current} {MutBorrow.get_id _43}
            (fun (_ret:MutBorrow.t (Slice64.slice tuple)) ->
               [ &_42 <- _ret ] 
               [ &_43 <- { _43 with current = _ret.final } ] 
              s1)
        | s1 = swap {_42} {i} {max} (fun (_ret:()) ->  [ &_41 <- _ret ] s2)
        | s2 = bb17 ]
      
      | bb17 = s0
        [ s0 = -{resolve'0 _43}- s1
        | s1 = UInt64.add {i} {[%#sutil'10] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s2)
        | s2 = bb2'0 ]
       ]
     ]
  
  | bb18 = s0 [ s0 = -{resolve'2 v'0}- s1 | s1 = return''0 {_0'0} ]  ]
  )
  [ & _0'0 : () = Any.any_l ()
  | & v'0 : MutBorrow.t t_Vec = v
  | & i : UInt64.t = Any.any_l ()
  | & old_v : MutBorrow.t t_Vec = Any.any_l ()
  | & _13 : bool = Any.any_l ()
  | & _15 : UInt64.t = Any.any_l ()
  | & max : UInt64.t = Any.any_l ()
  | & j : UInt64.t = Any.any_l ()
  | & _25 : bool = Any.any_l ()
  | & _27 : UInt64.t = Any.any_l ()
  | & _30 : bool = Any.any_l ()
  | & _32 : tuple = Any.any_l ()
  | & _36 : tuple = Any.any_l ()
  | & _41 : () = Any.any_l ()
  | & _42 : MutBorrow.t (Slice64.slice tuple) = Any.any_l ()
  | & _43 : MutBorrow.t (Slice64.slice tuple) = Any.any_l ()
  | & _44 : MutBorrow.t t_Vec = Any.any_l ()
  | & old_2_0 : MutBorrow.t t_Vec = Any.any_l () ]
  
  [ return''0 (result:())-> {[@expl:sort ensures #0] [%#sutil'11] sorted_tuple_zeroth (view v.final)}
    {[@expl:sort ensures #1] [%#sutil'12] permutation_of (view v.final) (view'0 v)}
    (! return' {result}) ]
  
