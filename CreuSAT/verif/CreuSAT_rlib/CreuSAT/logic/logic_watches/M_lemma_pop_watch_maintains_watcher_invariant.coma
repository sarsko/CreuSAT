(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 60 0 60 79 *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span slogic_util = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 66 11 66 22
let%span slogic_util'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 67 10 67 49
let%span slogic_util'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 68 10 68 37
let%span slogic_util'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 69 10 69 73
let%span slogic_util'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 71 4 71 33
let%span slogic_watches = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 57 11 57 22
let%span slogic_watches'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 58 11 58 39
let%span slogic_watches'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 59 10 59 43
let%span slogic_watches'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 60 80 60 82
let%span slogic_watches'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 40 8 41 41

use creusot.int.UInt64
use seq.Seq
use creusot.prelude.Opaque
use mach.int.Int
use creusot.int.UInt32

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

type t_Watcher  =
  { t_Watcher__cref: UInt64.t; t_Watcher__blocker: t_Lit }

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec; t_Formula__num_vars: UInt64.t }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Clause  =
  { t_Clause__deleted: bool; t_Clause__lbd: UInt32.t; t_Clause__search: UInt64.t; t_Clause__lits: t_Vec'0 }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Clause

axiom view_spec : forall self : t_Vec . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

predicate watcher_crefs_in_range [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 38 0 38 66] (w : Seq.seq t_Watcher) (f : t_Formula)

 =
  [%#slogic_watches'3] forall j : int . 0 <= j /\ j < Seq.length w
   -> UInt64.t'int (Seq.get w j).t_Watcher__cref < Seq.length (view f.t_Formula__clauses)

function pop [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 70 0 70 34] (s : Seq.seq t_Watcher) : Seq.seq t_Watcher

 =
  [%#slogic_util'3] Seq.([..]) s 0 (Seq.length s - 1)

axiom pop_spec : forall s : Seq.seq t_Watcher . ([%#slogic_util] Seq.length s > 0)
 -> ([%#slogic_util'0] pop s = Seq.([..]) s 0 (Seq.length s - 1))
&& ([%#slogic_util'1] Seq.length (pop s) = Seq.length s - 1)
&& ([%#slogic_util'2] forall i : int . 0 <= i /\ i < Seq.length (pop s)  -> Seq.get (pop s) i = Seq.get s i)

constant w  : Seq.seq t_Watcher

constant f  : t_Formula

function lemma_pop_watch_maintains_watcher_invariant [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 60 0 60 79] (w'0 : Seq.seq t_Watcher) (f'0 : t_Formula) : ()


goal vc_lemma_pop_watch_maintains_watcher_invariant : ([%#slogic_watches] Seq.length w > 0)
 -> ([%#slogic_watches'0] watcher_crefs_in_range w f)  -> ([%#slogic_watches'1] watcher_crefs_in_range (pop w) f)
