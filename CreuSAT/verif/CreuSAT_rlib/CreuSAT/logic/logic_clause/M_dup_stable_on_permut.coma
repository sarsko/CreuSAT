(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 266 0 266 51 *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span slogic_lit = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 24 20 24 29
let%span slogic_clause = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 260 11 260 42
let%span slogic_clause'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 261 11 261 54
let%span slogic_clause'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 262 10 262 33
let%span slogic_clause'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 263 10 263 33
let%span slogic_clause'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 264 10 264 41
let%span slogic_clause'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 266 52 266 54
let%span slogic_clause'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 48 8 49 92
let%span slogic_clause'6 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 14 4 14 12
let%span sseq = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/seq.rs" 312 8 312 41

use creusot.int.UInt32
use creusot.int.UInt64
use creusot.prelude.Opaque
use seq.Seq
use mach.int.Int
use seq.Permut

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Clause  =
  { t_Clause__deleted: bool; t_Clause__lbd: UInt32.t; t_Clause__search: UInt64.t; t_Clause__lits: t_Vec }

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function index_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 23 4 23 35] (self : t_Lit) : int =
  [%#slogic_lit] UInt64.t'int self.t_Lit__idx

predicate no_duplicate_indexes_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 46 0 46 54] (s : Seq.seq t_Lit)

 =
  [%#slogic_clause'5] forall j : int, k : int . 0 <= j /\ j < Seq.length s /\ 0 <= k /\ k < Seq.length s /\ k <> j
   -> index_logic (Seq.get s k) <> index_logic (Seq.get s j)

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Lit

axiom view_spec : forall self : t_Vec . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 16 4 16 33] (self : t_Clause) : Seq.seq t_Lit

 =
  [%#slogic_clause'6] view self.t_Clause__lits

predicate permutation_of (self : Seq.seq t_Lit) (other : Seq.seq t_Lit) =
  [%#sseq] Permut.permut self other 0 (Seq.length self)

constant c1  : t_Clause

constant c2  : t_Clause

function dup_stable_on_permut [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 266 0 266 51] (c1'0 : t_Clause) (c2'0 : t_Clause) : ()


goal vc_dup_stable_on_permut : ([%#slogic_clause] no_duplicate_indexes_inner (view'0 c1))
 -> ([%#slogic_clause'0] exists i : int, j : int . Permut.exchange (view'0 c2) (view'0 c1) j i)
 -> ([%#slogic_clause'1] permutation_of (view'0 c1) (view'0 c2))
&& ([%#slogic_clause'2] permutation_of (view'0 c2) (view'0 c1))
&& ([%#slogic_clause'3] no_duplicate_indexes_inner (view'0 c2))
