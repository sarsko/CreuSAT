(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 29 0 31 1 *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span slogic_assignments = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 37 8 37 61
let%span slogic_lit = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 68 20 68 74
let%span slogic_lit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 55 12 55 102
let%span slogic_lit'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 24 20 24 29
let%span slogic_lit'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 31 20 31 33
let%span slogic_lit'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 83 20 83 42
let%span slogic_lit'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 90 12 93 13
let%span slogic_formula = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 30 8 31 69
let%span slogic_formula'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 48 8 48 111
let%span slogic_formula'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 39 8 40 37
let%span slogic = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic.rs" 25 8 29 9
let%span slogic_clause = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 40 8 40 134
let%span slogic_clause'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 145 12 145 80
let%span slogic_clause'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 122 8 129 9
let%span slogic_clause'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 243 12 245 33
let%span slogic_clause'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 14 4 14 12
let%span slogic_clause'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 227 20 227 42
let%span slogic_clause'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 33 4 33 62
let%span slogic_clause'6 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 25 8 26 23
let%span slogic_clause'7 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 48 8 49 92
let%span slogic_clause'8 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 187 12 188 37
let%span slogic_conflict_analysis = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 24 11 24 31
let%span slogic_conflict_analysis'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 25 11 25 40
let%span slogic_conflict_analysis'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 26 11 26 33
let%span slogic_conflict_analysis'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 27 11 27 39
let%span slogic_conflict_analysis'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 28 10 28 40
let%span slogic_conflict_analysis'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 12 11 12 47
let%span slogic_conflict_analysis'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 13 11 13 31
let%span slogic_conflict_analysis'6 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 14 10 14 49
let%span slogic_conflict_analysis'7 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 15 10 15 93
let%span slogic_conflict_analysis'8 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 16 10 16 47
let%span slogic_conflict_analysis'9 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 32 4 32 101
let%span slogic_conflict_analysis'10 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 19 71 19 73

use creusot.int.UInt32
use creusot.int.UInt64
use creusot.prelude.Opaque
use seq.Seq
use mach.int.Int
use creusot.int.UInt8

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Clause  =
  { t_Clause__deleted: bool; t_Clause__lbd: UInt32.t; t_Clause__search: UInt64.t; t_Clause__lits: t_Vec }

type t_FormulaModel  =
  { t_FormulaModel__clauses: Seq.seq t_Clause; t_FormulaModel__num_vars: int }

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function index_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 23 4 23 35] (self : t_Lit) : int =
  [%#slogic_lit'1] UInt64.t'int self.t_Lit__idx

predicate inv [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 82 4 82 36] (self : t_Lit) (n : int) =
  [%#slogic_lit'3] index_logic self < n

predicate vars_in_range_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 23 0 23 55] (s : Seq.seq t_Lit) (n : int)

 =
  [%#slogic_clause'6] forall i : int . 0 <= i /\ i < Seq.length s  -> inv (Seq.get s i) n

predicate no_duplicate_indexes_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 46 0 46 54] (s : Seq.seq t_Lit)

 =
  [%#slogic_clause'7] forall j : int, k : int . 0 <= j /\ j < Seq.length s /\ 0 <= k /\ k < Seq.length s /\ k <> j
   -> index_logic (Seq.get s k) <> index_logic (Seq.get s j)

predicate inv_internal [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 32 0 32 48] (s : Seq.seq t_Lit) (n : int)

 =
  [%#slogic_clause'5] vars_in_range_inner s n /\ no_duplicate_indexes_inner s

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Lit

axiom view_spec : forall self : t_Vec . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 16 4 16 33] (self : t_Clause) : Seq.seq t_Lit

 =
  [%#slogic_clause'3] view self.t_Clause__lits

predicate inv'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 226 4 226 36] (self : t_Clause) (n : int) =
  [%#slogic_clause'4] inv_internal (view'0 self) n

predicate formula_invariant [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 28 0 28 49] (f : t_FormulaModel)

 =
  [%#slogic_formula] forall i : int . 0 <= i /\ i < Seq.length f.t_FormulaModel__clauses
   -> inv'0 (Seq.get f.t_FormulaModel__clauses i) f.t_FormulaModel__num_vars
  /\ Seq.length (view'0 (Seq.get f.t_FormulaModel__clauses i)) > 0

predicate unset [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic.rs" 23 0 23 38] (v : UInt8.t) =
  [%#slogic] if UInt8.t'int v >= 2 then true else false

predicate complete_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 35 0 35 52] (a : Seq.seq UInt8.t)

 =
  [%#slogic_assignments] forall i : int . 0 <= i /\ i < Seq.length a  -> not unset (Seq.get a i)

function is_positive_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 30 4 30 42] (self : t_Lit) : bool =
  [%#slogic_lit'2] self.t_Lit__polarity

predicate sat_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 88 4 88 57] (self : t_Lit) (a : Seq.seq UInt8.t)

 =
  [%#slogic_lit'4] if is_positive_logic self then
    UInt8.t'int (Seq.get a (index_logic self)) = 1
  else
    UInt8.t'int (Seq.get a (index_logic self)) = 0


predicate sat_inner'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 185 4 185 57] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#slogic_clause'8] exists i : int . 0 <= i /\ i < Seq.length (view'0 self) /\ sat_inner (Seq.get (view'0 self) i) a

predicate formula_sat_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 37 0 37 72] (f : t_FormulaModel) (a : Seq.seq UInt8.t)

 =
  [%#slogic_formula'1] forall i : int . 0 <= i /\ i < Seq.length f.t_FormulaModel__clauses
   -> sat_inner'0 (Seq.get f.t_FormulaModel__clauses i) a

predicate eventually_sat_complete [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 46 0 46 55] (f : t_FormulaModel)

 =
  [%#slogic_formula'0] exists a2 : Seq.seq UInt8.t . Seq.length a2 = f.t_FormulaModel__num_vars
  /\ complete_inner a2 /\ formula_sat_inner f a2

predicate equisat_extension_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 38 0 38 66] (c : t_Clause) (f : t_FormulaModel)

 =
  [%#slogic_clause] eventually_sat_complete f
   -> eventually_sat_complete { t_FormulaModel__clauses = Seq.snoc f.t_FormulaModel__clauses c;
                                t_FormulaModel__num_vars = f.t_FormulaModel__num_vars }

predicate in_formula_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 143 4 143 58] (self : t_Clause) (f : t_FormulaModel)

 =
  [%#slogic_clause'0] exists i : int . 0 <= i
  /\ i < Seq.length f.t_FormulaModel__clauses /\ Seq.get f.t_FormulaModel__clauses i = self

predicate lit_in [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 67 4 67 42] (self : t_Lit) (c : t_Clause) =
  [%#slogic_lit] exists i : int . 0 <= i /\ i < Seq.length (view'0 c) /\ Seq.get (view'0 c) i = self

predicate is_opp [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 53 4 53 39] (self : t_Lit) (o : t_Lit) =
  [%#slogic_lit'0] index_logic self = index_logic o /\ is_positive_logic self <> is_positive_logic o

predicate resolvent_of [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 121 4 121 76] (self : t_Clause) (c : t_Clause) (c2 : t_Clause) (k : int) (m : int)

 =
  [%#slogic_clause'1] (forall i : int . 0 <= i /\ i < Seq.length (view'0 c) /\ i <> m
   -> lit_in (Seq.get (view'0 c) i) self)
  /\ (forall i : int . 0 <= i /\ i < Seq.length (view'0 c2) /\ i <> k  -> lit_in (Seq.get (view'0 c2) i) self)
  /\ (forall i : int . 0 <= i /\ i < Seq.length (view'0 self)
   -> lit_in (Seq.get (view'0 self) i) c \/ lit_in (Seq.get (view'0 self) i) c2)
  /\ not lit_in (Seq.get (view'0 c) m) self
  /\ not lit_in (Seq.get (view'0 c2) k) self /\ is_opp (Seq.get (view'0 c2) k) (Seq.get (view'0 c) m)

predicate equals [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 241 4 241 42] (self : t_Clause) (o : t_Clause)

 =
  [%#slogic_clause'2] Seq.length (view'0 self) = Seq.length (view'0 o)
  /\ (forall j : int . 0 <= j /\ j < Seq.length (view'0 self)  -> Seq.get (view'0 self) j = Seq.get (view'0 o) j)

function lemma_eq_formulas [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 19 0 19 70] (f : t_FormulaModel) (f2 : t_FormulaModel) (c : t_Clause) : ()

 =
  [%#slogic_conflict_analysis'10] ()

axiom lemma_eq_formulas_spec : forall f : t_FormulaModel, f2 : t_FormulaModel, c : t_Clause . ([%#slogic_conflict_analysis'4] f2.t_FormulaModel__clauses
= Seq.snoc f.t_FormulaModel__clauses c)
 -> ([%#slogic_conflict_analysis'5] formula_invariant f)
 -> ([%#slogic_conflict_analysis'6] Seq.length f.t_FormulaModel__clauses + 1 = Seq.length f2.t_FormulaModel__clauses)
&& ([%#slogic_conflict_analysis'7] forall i : int . 0 <= i /\ i < Seq.length f.t_FormulaModel__clauses
 -> equals (Seq.get f.t_FormulaModel__clauses i) (Seq.get f2.t_FormulaModel__clauses i))
&& ([%#slogic_conflict_analysis'8] view'0 (Seq.get f2.t_FormulaModel__clauses (Seq.length f2.t_FormulaModel__clauses
- 1))
= view'0 c)

constant f  : t_FormulaModel

constant c  : t_Clause

constant c2  : t_Clause

constant c3  : t_Clause

constant k  : int

constant m  : int

function lemma_resolvent_of_equisat_extension_is_equisat [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_conflict_analysis.rs" 29 0 31 1] (f'0 : t_FormulaModel) (c'0 : t_Clause) (c2'0 : t_Clause) (c3'0 : t_Clause) (k'0 : int) (m'0 : int) : ()


goal vc_lemma_resolvent_of_equisat_extension_is_equisat : ([%#slogic_conflict_analysis] formula_invariant f)
 -> ([%#slogic_conflict_analysis'0] equisat_extension_inner c f)
 -> ([%#slogic_conflict_analysis'1] in_formula_inner c2 f)
 -> ([%#slogic_conflict_analysis'2] resolvent_of c3 c c2 k m)
 -> (([@expl:lemma_eq_formulas requires #0] [%#slogic_conflict_analysis'4] { t_FormulaModel__clauses = Seq.snoc f.t_FormulaModel__clauses c3;
                                                                             t_FormulaModel__num_vars = f.t_FormulaModel__num_vars }.t_FormulaModel__clauses
= Seq.snoc f.t_FormulaModel__clauses c3)
&& ([@expl:lemma_eq_formulas requires #1] [%#slogic_conflict_analysis'5] formula_invariant f))
/\ (([%#slogic_conflict_analysis'6] Seq.length f.t_FormulaModel__clauses + 1
= Seq.length { t_FormulaModel__clauses = Seq.snoc f.t_FormulaModel__clauses c3;
               t_FormulaModel__num_vars = f.t_FormulaModel__num_vars }.t_FormulaModel__clauses)
&& ([%#slogic_conflict_analysis'7] forall i : int . 0 <= i /\ i < Seq.length f.t_FormulaModel__clauses
 -> equals (Seq.get f.t_FormulaModel__clauses i) (Seq.get { t_FormulaModel__clauses = Seq.snoc f.t_FormulaModel__clauses c3;
                                                            t_FormulaModel__num_vars = f.t_FormulaModel__num_vars }.t_FormulaModel__clauses i))
&& ([%#slogic_conflict_analysis'8] view'0 (Seq.get { t_FormulaModel__clauses = Seq.snoc f.t_FormulaModel__clauses c3;
                                                     t_FormulaModel__num_vars = f.t_FormulaModel__num_vars }.t_FormulaModel__clauses (Seq.length { t_FormulaModel__clauses = Seq.snoc f.t_FormulaModel__clauses c3;
                                                                                                                                                   t_FormulaModel__num_vars = f.t_FormulaModel__num_vars }.t_FormulaModel__clauses
- 1))
= view'0 c3)
 -> (let _ = lemma_eq_formulas f { t_FormulaModel__clauses = Seq.snoc f.t_FormulaModel__clauses c3;
                                   t_FormulaModel__num_vars = f.t_FormulaModel__num_vars } c3 in [%#slogic_conflict_analysis'3] equisat_extension_inner c3 f))
