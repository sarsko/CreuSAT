(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 70 0 70 34 *)

let%span slogic_util = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 66 11 66 22
let%span slogic_util'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 67 10 67 49
let%span slogic_util'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 68 10 68 37
let%span slogic_util'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 69 10 69 73
let%span slogic_util'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 71 4 71 33

use seq.Seq
use mach.int.Int

type t_T

constant s  : Seq.seq t_T

function pop [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 70 0 70 34] (s'0 : Seq.seq t_T) : Seq.seq t_T

goal vc_pop : ([%#slogic_util] Seq.length s > 0)
 -> (let result = Seq.([..]) s 0 (Seq.length s - 1) in ([%#slogic_util'0] result = Seq.([..]) s 0 (Seq.length s - 1))
&& ([%#slogic_util'1] Seq.length result = Seq.length s - 1)
&& ([%#slogic_util'2] forall i : int . 0 <= i /\ i < Seq.length result  -> Seq.get result i = Seq.get s i))
