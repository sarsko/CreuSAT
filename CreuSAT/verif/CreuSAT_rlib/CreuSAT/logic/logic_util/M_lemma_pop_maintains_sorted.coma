(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 96 0 96 48 *)

let%span slogic_util = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 93 11 93 22
let%span slogic_util'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 94 11 94 20
let%span slogic_util'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 95 10 95 24
let%span slogic_util'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 96 49 96 51
let%span slogic_util'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 28 4 28 31
let%span slogic_util'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 66 11 66 22
let%span slogic_util'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 67 10 67 49
let%span slogic_util'6 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 68 10 68 37
let%span slogic_util'7 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 69 10 69 73
let%span slogic_util'8 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 71 4 71 33
let%span slogic_util'9 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 22 16 22 80
let%span sord = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 129 39 129 89
let%span sord'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 134 39 134 86
let%span sord'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 139 39 139 86
let%span sord'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 144 39 144 89
let%span sord'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 149 39 149 70
let%span sord'4 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 154 40 154 57
let%span sord'5 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 155 40 155 57
let%span sord'6 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 156 39 156 56
let%span sord'7 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 161 40 161 70
let%span sord'8 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 162 39 162 72
let%span sord'9 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 167 40 167 73
let%span sord'10 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 168 39 168 69
let%span sord'11 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 173 39 173 84
let%span sord'12 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ord.rs" 230 16 236 17

use creusot.int.UInt64
use seq.Seq
use mach.int.Int

type t_Ordering  =
  | C_Less
  | C_Equal
  | C_Greater

function cmp_log (self : UInt64.t) (o : UInt64.t) : t_Ordering =
  [%#sord'12] if UInt64.lt self o then C_Less else if self = o then C_Equal else C_Greater

function eq_cmp (x : UInt64.t) (y : UInt64.t) : ()

axiom eq_cmp_spec : forall x : UInt64.t, y : UInt64.t . [%#sord'11] (x = y) = (cmp_log x y = C_Equal)

function antisym2 (x : UInt64.t) (y : UInt64.t) : ()

axiom antisym2_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord'9] cmp_log x y = C_Greater)
 -> ([%#sord'10] cmp_log y x = C_Less)

function antisym1 (x : UInt64.t) (y : UInt64.t) : ()

axiom antisym1_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord'7] cmp_log x y = C_Less)
 -> ([%#sord'8] cmp_log y x = C_Greater)

function trans (x : UInt64.t) (y : UInt64.t) (z : UInt64.t) (o : t_Ordering) : ()

axiom trans_spec : forall x : UInt64.t, y : UInt64.t, z : UInt64.t, o : t_Ordering . ([%#sord'4] cmp_log x y = o)
 -> ([%#sord'5] cmp_log y z = o)  -> ([%#sord'6] cmp_log x z = o)

function refl (x : UInt64.t) : ()

axiom refl_spec : forall x : UInt64.t . [%#sord'3] cmp_log x x = C_Equal

function cmp_gt_log (x : UInt64.t) (y : UInt64.t) : ()

axiom cmp_gt_log_spec : forall x : UInt64.t, y : UInt64.t . [%#sord'2] UInt64.gt x y = (cmp_log x y = C_Greater)

function cmp_ge_log (x : UInt64.t) (y : UInt64.t) : ()

axiom cmp_ge_log_spec : forall x : UInt64.t, y : UInt64.t . [%#sord'1] UInt64.ge x y = (cmp_log x y <> C_Less)

function cmp_lt_log (x : UInt64.t) (y : UInt64.t) : ()

axiom cmp_lt_log_spec : forall x : UInt64.t, y : UInt64.t . [%#sord'0] UInt64.lt x y = (cmp_log x y = C_Less)

function cmp_le_log (x : UInt64.t) (y : UInt64.t) : ()

axiom cmp_le_log_spec : forall x : UInt64.t, y : UInt64.t . [%#sord] UInt64.le x y = (cmp_log x y <> C_Greater)

predicate sorted_range [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 21 0 21 58] (s : Seq.seq UInt64.t) (l : int) (u : int)

 =
  [%#slogic_util'9] forall i : int, j : int . l <= i /\ i < j /\ j < u  -> UInt64.le (Seq.get s i) (Seq.get s j)

predicate sorted [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 27 0 27 36] (s : Seq.seq UInt64.t) =
  [%#slogic_util'3] sorted_range s 0 (Seq.length s)

function pop [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 70 0 70 34] (s : Seq.seq UInt64.t) : Seq.seq UInt64.t

 =
  [%#slogic_util'8] Seq.([..]) s 0 (Seq.length s - 1)

axiom pop_spec : forall s : Seq.seq UInt64.t . ([%#slogic_util'4] Seq.length s > 0)
 -> ([%#slogic_util'5] pop s = Seq.([..]) s 0 (Seq.length s - 1))
&& ([%#slogic_util'6] Seq.length (pop s) = Seq.length s - 1)
&& ([%#slogic_util'7] forall i : int . 0 <= i /\ i < Seq.length (pop s)  -> Seq.get (pop s) i = Seq.get s i)

constant s  : Seq.seq UInt64.t

function lemma_pop_maintains_sorted [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_util.rs" 96 0 96 48] (s'0 : Seq.seq UInt64.t) : ()


goal vc_lemma_pop_maintains_sorted : ([%#slogic_util] Seq.length s > 0)
 -> ([%#slogic_util'0] sorted s)  -> ([%#slogic_util'1] sorted (pop s))
