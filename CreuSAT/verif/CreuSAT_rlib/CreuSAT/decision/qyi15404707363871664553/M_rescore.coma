(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 136 4 136 39 *)

(* decision::Decisions *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 89 26 89 48
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 158 27 158 46
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 159 26 159 54
let%span svec'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 160 26 160 57
let%span svec'4 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 161 26 161 62
let%span svec'5 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 162 26 162 55
let%span svec'6 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'7 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span smodel'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span sslice'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 137 20 137 94
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34
let%span sdecision = "/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 137 49 137 67
let%span sdecision'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 139 27 139 28
let%span sdecision'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 146 20 146 42
let%span sdecision'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 142 20 144 74
let%span sdecision'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 141 20 141 73
let%span sdecision'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 147 22 147 29
let%span sdecision'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 149 28 149 29
let%span sdecision'6 = "/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 150 30 150 31
let%span sdecision'7 = "/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 156 50 156 51
let%span sdecision'8 = "/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 132 4 132 46
let%span sdecision'9 = "/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 133 15 133 52
let%span sdecision'10 = "/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 134 14 134 63
let%span sdecision'11 = "/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 135 14 135 67
let%span slogic_decision = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_decision.rs" 12 12 17 97

use creusot.prelude.Opaque
use creusot.int.UInt64
use seq.Seq
use mach.int.Int
use creusot.prelude.MutBorrow
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Decisions  =
  { t_Decisions__linked_list: t_Vec;
    t_Decisions__timestamp: UInt64.t;
    t_Decisions__start: UInt64.t;
    t_Decisions__search: UInt64.t }

type t_Node  =
  { t_Node__next: UInt64.t; t_Node__prev: UInt64.t; t_Node__ts: UInt64.t }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Node

axiom view_spec : forall self : t_Vec . [%#svec'0] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : t_Vec) : Seq.seq t_Node =
  [%#smodel] view self

let rec len (self_:t_Vec) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]


constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)

predicate inv [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_decision.rs" 10 4 10 36] (self : t_Decisions) (n : int)
 =
  [%#slogic_decision] Seq.length (view self.t_Decisions__linked_list) = n
  /\ (UInt64.t'int self.t_Decisions__search < Seq.length (view self.t_Decisions__linked_list)
  \/ UInt64.t'int self.t_Decisions__search = UInt64.t'int v_MAX'0)
  /\ UInt64.t'int self.t_Decisions__start < Seq.length (view self.t_Decisions__linked_list)
  /\ (forall i : int . 0 <= i /\ i < Seq.length (view self.t_Decisions__linked_list)
   -> (UInt64.t'int (Seq.get (view self.t_Decisions__linked_list) i).t_Node__next = UInt64.t'int v_MAX'0
  \/ UInt64.t'int (Seq.get (view self.t_Decisions__linked_list) i).t_Node__next < n)
  /\ (UInt64.t'int (Seq.get (view self.t_Decisions__linked_list) i).t_Node__prev = UInt64.t'int v_MAX'0
  \/ UInt64.t'int (Seq.get (view self.t_Decisions__linked_list) i).t_Node__prev < n))

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec'0; t_Formula__num_vars: UInt64.t }

predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Node) =
  [%#sslice] UInt64.t'int self < Seq.length seq

function view'1 (self : MutBorrow.t t_Vec) : Seq.seq t_Node =
  [%#smodel'0] view self.current

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Node) (out : t_Node) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

predicate resolve_elswhere [@inline:trivial] (self : UInt64.t) (old' : Seq.seq t_Node) (fin : Seq.seq t_Node) =
  [%#sslice'1] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
   -> Seq.get old' i = Seq.get fin i

let rec index_mut (self_:MutBorrow.t t_Vec) (ix:UInt64.t) (return'  (x:MutBorrow.t t_Node))= {[@expl:index_mut requires] [%#svec'1] in_bounds ix (view'1 self_)}
  any
  [ return''0 (result:MutBorrow.t t_Node)-> {[%#svec'2] has_value ix (view'1 self_) result.current}
    {[%#svec'3] has_value ix (view self_.final) result.final}
    {[%#svec'4] resolve_elswhere ix (view'1 self_) (view self_.final)}
    {[%#svec'5] Seq.length (view self_.final) = Seq.length (view'1 self_)}
    (! return' {result}) ]


predicate resolve (self : MutBorrow.t t_Node) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0 : MutBorrow.t t_Node) =
  resolve _0

let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:t_Node))= {[@expl:index requires] [%#svec'6] in_bounds ix (view'0 self_)}
  any [ return''0 (result:t_Node)-> {[%#svec'7] has_value ix (view'0 self_) result} (! return' {result}) ] 

predicate resolve'1 (self : MutBorrow.t t_Decisions) =
  [%#sresolve] self.final = self.current

predicate resolve'2 (_0 : MutBorrow.t t_Decisions) =
  resolve'1 _0

meta "compute_max_steps" 1000000

let rec rescore[#"/Users/sarekhs/CreuSAT/CreuSAT/src/decision.rs" 136 4 136 39] (self:MutBorrow.t t_Decisions) (_f:t_Formula) (return'  (x:()))= {[@expl:rescore requires #0] [%#sdecision'8] inv self.current (UInt64.t'int _f.t_Formula__num_vars)}
  {[@expl:rescore requires #1] [%#sdecision'9] Seq.length (view (self.current).t_Decisions__linked_list)
  < UInt64.t'int (v_MAX : UInt64.t)}
  (! bb0
  [ bb0 = s0 [ s0 =  [ &old_self <- [%#sdecision] self'0 ] s1 | s1 = bb1 ] 
  | bb1 = s0
    [ s0 = len {(self'0.current).t_Decisions__linked_list} (fun (_ret:UInt64.t) ->  [ &curr_score <- _ret ] s1)
    | s1 = bb2 ]
  
  | bb2 = s0
    [ s0 =  [ &i <- [%#sdecision'0] (0 : UInt64.t) ] s1
    | s1 =  [ &curr <- (self'0.current).t_Decisions__start ] s2
    | s2 =  [ &old_3_0 <- self'0 ] s3
    | s3 = bb3 ]
  
  | bb3 = bb3'0
    [ bb3'0 = {[@expl:mut invariant] old_3_0.final = self'0.final}
      {[@expl:loop invariant #0] [%#sdecision'3] curr = (v_MAX : UInt64.t)
      \/ UInt64.t'int curr < Seq.length (view (self'0.current).t_Decisions__linked_list)}
      {[@expl:loop invariant #1] [%#sdecision'2] forall j : int . 0 <= j
      /\ j < Seq.length (view (self'0.current).t_Decisions__linked_list)
       -> (Seq.get (view (self'0.current).t_Decisions__linked_list) j).t_Node__next
      = (Seq.get (view (old_self.current).t_Decisions__linked_list) j).t_Node__next
      /\ (Seq.get (view (self'0.current).t_Decisions__linked_list) j).t_Node__prev
      = (Seq.get (view (old_self.current).t_Decisions__linked_list) j).t_Node__prev}
      {[@expl:loop invariant #2] [%#sdecision'1] inv self'0.current (UInt64.t'int _f'0.t_Formula__num_vars)}
      (! s0) [ s0 = bb4 ] 
      [ bb4 = s0
        [ s0 =  [ &_20 <- curr <> ([%#sdecision'4] (18446744073709551615 : UInt64.t)) ] s1
        | s1 = any [ br0 -> {_20 = false} (! bb10) | br1 -> {_20} (! bb5) ]  ]
      
      | bb5 = s0
        [ s0 = MutBorrow.borrow_mut <t_Vec> {(self'0.current).t_Decisions__linked_list}
            (fun (_ret:MutBorrow.t t_Vec) ->
               [ &_24 <- _ret ] 
               [ &self'0 <- { self'0 with current = { self'0.current with t_Decisions__linked_list = _ret.final } } ] 
              s1)
        | s1 = index_mut {_24} {curr} (fun (_ret:MutBorrow.t t_Node) ->  [ &_23 <- _ret ] s2)
        | s2 = bb6 ]
      
      | bb6 = s0
        [ s0 =  [ &_23 <- { _23 with current = { _23.current with t_Node__ts = curr_score } } ] s1
        | s1 = -{resolve'0 _23}- s2
        | s2 =  [ &_27 <- UInt64.gt curr_score ([%#sdecision'5] (0 : UInt64.t)) ] s3
        | s3 = any [ br0 -> {_27 = false} (! bb8) | br1 -> {_27} (! bb7) ]  ]
      
      | bb7 = s0
        [ s0 = UInt64.sub {curr_score} {[%#sdecision'6] (1 : UInt64.t)}
            (fun (_ret:UInt64.t) ->  [ &curr_score <- _ret ] s1)
        | s1 = index {(self'0.current).t_Decisions__linked_list} {curr} (fun (_ret:t_Node) ->  [ &_31 <- _ret ] s2)
        | s2 = bb9 ]
      
      | bb9 = s0 [ s0 =  [ &curr <- _31.t_Node__next ] s1 | s1 = bb3'0 ]  ]
     ]
  
  | bb8 = bb11
  | bb10 = bb11
  | bb11 = s0
    [ s0 = len {(self'0.current).t_Decisions__linked_list} (fun (_ret:UInt64.t) ->  [ &_35 <- _ret ] s1) | s1 = bb12 ]
  
  | bb12 = s0
    [ s0 = UInt64.add {_35} {[%#sdecision'7] (1 : UInt64.t)}
        (fun (_ret:UInt64.t) ->
           [ &self'0 <- { self'0 with current = { self'0.current with t_Decisions__timestamp = _ret } } ] 
          s1)
    | s1 = -{resolve'2 self'0}- s2
    | s2 = return''0 {_0} ]
   ]
  )
  [ & _0 : () = Any.any_l ()
  | & self'0 : MutBorrow.t t_Decisions = self
  | & _f'0 : t_Formula = _f
  | & old_self : MutBorrow.t t_Decisions = Any.any_l ()
  | & curr_score : UInt64.t = Any.any_l ()
  | & i : UInt64.t = Any.any_l ()
  | & curr : UInt64.t = Any.any_l ()
  | & _20 : bool = Any.any_l ()
  | & _23 : MutBorrow.t t_Node = Any.any_l ()
  | & _24 : MutBorrow.t t_Vec = Any.any_l ()
  | & _27 : bool = Any.any_l ()
  | & _31 : t_Node = Any.any_l ()
  | & _35 : UInt64.t = Any.any_l ()
  | & old_3_0 : MutBorrow.t t_Decisions = Any.any_l () ]
  
  [ return''0 (result:())-> {[@expl:rescore ensures #0] [%#sdecision'8] inv self.final (UInt64.t'int _f.t_Formula__num_vars)}
    {[@expl:rescore ensures #1] [%#sdecision'10] UInt64.t'int (self.final).t_Decisions__timestamp
    = Seq.length (view (self.current).t_Decisions__linked_list) + 1}
    {[@expl:rescore ensures #2] [%#sdecision'11] Seq.length (view (self.final).t_Decisions__linked_list)
    = Seq.length (view (self.current).t_Decisions__linked_list)}
    (! return' {result}) ]
  
