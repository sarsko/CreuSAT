(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/solver.rs" 74 4 74 37 *)

(* solver::Solver *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 89 26 89 48
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 186 22 186 41
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 187 22 187 76
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sindex = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/ops/index.rs" 29 8 29 31
let%span ssolver = "/Users/sarekhs/CreuSAT/CreuSAT/src/solver.rs" 83 38 83 39
let%span ssolver'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/solver.rs" 76 24 76 25
let%span ssolver'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/solver.rs" 77 24 77 28
let%span ssolver'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/solver.rs" 78 27 78 28
let%span ssolver'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/solver.rs" 80 27 80 30
let%span ssolver'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/solver.rs" 81 18 81 26
let%span ssolver'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/solver.rs" 82 18 82 26

use creusot.prelude.Opaque
use creusot.int.UInt64
use seq.Seq
use creusot.int.UInt32
use mach.int.Int
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec; t_Formula__num_vars: UInt64.t }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Clause  =
  { t_Clause__deleted: bool; t_Clause__lbd: UInt32.t; t_Clause__search: UInt64.t; t_Clause__lits: t_Vec'0 }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Clause

axiom view_spec : forall self : t_Vec . [%#svec'2] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : t_Vec) : Seq.seq t_Clause =
  [%#smodel] view self

let rec len (self_:t_Vec) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]


type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

function view'1 (self : t_Vec'1) : Seq.seq UInt64.t

axiom view_spec'0 : forall self : t_Vec'1 . [%#svec'2] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

function index_logic [@inline:trivial] (self : t_Vec'1) (ix : int) : UInt64.t =
  [%#sindex] Seq.get (view'1 self) ix

let rec from_elem (elem:UInt64.t) (n:UInt64.t) (return'  (x:t_Vec'1))= any
  [ return''0 (result:t_Vec'1)-> {[%#svec'0] Seq.length (view'1 result) = UInt64.t'int n}
    {[%#svec'1] forall i : int . 0 <= i /\ i < UInt64.t'int n  -> index_logic result i = elem}
    (! return' {result}) ]


type t_Solver  =
  { t_Solver__num_lemmas: UInt64.t;
    t_Solver__max_lemmas: UInt64.t;
    t_Solver__num_conflicts: UInt64.t;
    t_Solver__initial_len: UInt64.t;
    t_Solver__inc_reduce_db: UInt64.t;
    t_Solver__fast: UInt64.t;
    t_Solver__slow: UInt64.t;
    t_Solver__perm_diff: t_Vec'1 }

meta "compute_max_steps" 1000000

let rec new[#"/Users/sarekhs/CreuSAT/CreuSAT/src/solver.rs" 74 4 74 37] (f:t_Formula) (return'  (x:t_Solver))= (! bb0
  [ bb0 = s0 [ s0 = len {f'0.t_Formula__clauses} (fun (_ret:UInt64.t) ->  [ &_2 <- _ret ] s1) | s1 = bb1 ] 
  | bb1 = s0
    [ s0 = from_elem {[%#ssolver] (0 : UInt64.t)} {f'0.t_Formula__num_vars} (fun (_ret:t_Vec'1) ->  [ &_4 <- _ret ] s1)
    | s1 = bb2 ]
  
  | bb2 = s0
    [ s0 = 
      [ &_0 <- { t_Solver__num_lemmas = ([%#ssolver'0] (0 : UInt64.t));
                 t_Solver__max_lemmas = ([%#ssolver'1] (2000 : UInt64.t));
                 t_Solver__num_conflicts = ([%#ssolver'2] (0 : UInt64.t));
                 t_Solver__initial_len = _2;
                 t_Solver__inc_reduce_db = ([%#ssolver'3] (300 : UInt64.t));
                 t_Solver__fast = ([%#ssolver'4] (16777216 : UInt64.t));
                 t_Solver__slow = ([%#ssolver'5] (16777216 : UInt64.t));
                 t_Solver__perm_diff = _4 } ]
      
      s1
    | s1 = bb3 ]
  
  | bb3 = return''0 {_0} ]
  )
  [ & _0 : t_Solver = Any.any_l ()
  | & f'0 : t_Formula = f
  | & _2 : UInt64.t = Any.any_l ()
  | & _4 : t_Vec'1 = Any.any_l () ]
   [ return''0 (result:t_Solver)-> (! return' {result}) ] 
