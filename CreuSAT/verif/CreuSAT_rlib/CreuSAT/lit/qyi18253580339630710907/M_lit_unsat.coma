(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 77 4 77 51 *)

(* lit::Lit *)

let%span sassignments = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 20 15 20 32
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 21 14 21 35
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span slogic_assignments = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 17 4 17 12
let%span slit = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 79 40 79 41
let%span slit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 80 41 80 42
let%span slit'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 75 15 75 33
let%span slit'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 76 14 76 38
let%span slit'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 50 14 50 48
let%span slit'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 43 14 43 43
let%span slogic_lit = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 83 20 83 42
let%span slogic_lit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 129 20 129 40
let%span slogic_lit'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 31 20 31 33
let%span slogic_lit'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 24 20 24 29
let%span slogic_lit'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 101 12 104 13

use creusot.int.UInt64
use creusot.int.UInt8
use creusot.prelude.Opaque
use seq.Seq
use mach.int.Int
use creusot.prelude.Any

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function is_positive_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 30 4 30 42] (self : t_Lit) : bool =
  [%#slogic_lit'1] self.t_Lit__polarity

let rec is_positive (self:t_Lit) (return'  (x:bool))= any
  [ return''0 (result:bool)-> {[%#slit'3] result = is_positive_logic self} (! return' {result}) ]


function index_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 23 4 23 35] (self : t_Lit) : int =
  [%#slogic_lit'2] UInt64.t'int self.t_Lit__idx

let rec index (self:t_Lit) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#slit'4] UInt64.t'int result = index_logic self} (! return' {result}) ]


type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq UInt8.t

axiom view_spec : forall self : t_Vec . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#slogic_assignments] view self.t_Assignments__0

function view'1 (self : t_Assignments) : Seq.seq UInt8.t =
  [%#smodel] view'0 self

let rec index'0 (self:t_Assignments) (ix:UInt64.t) (return'  (x:UInt8.t))= {[@expl:index requires] [%#sassignments] UInt64.t'int ix
  < Seq.length (view'1 self)}
  any
  [ return''0 (result:UInt8.t)-> {[%#sassignments'0] Seq.get (view'1 self) (UInt64.t'int ix) = result}
    (! return' {result}) ]


predicate inv [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 82 4 82 36] (self : t_Lit) (n : int) =
  [%#slogic_lit] index_logic self < n

predicate unsat_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 99 4 99 59] (self : t_Lit) (a : Seq.seq UInt8.t)

 =
  [%#slogic_lit'3] if is_positive_logic self then
    UInt8.t'int (Seq.get a (index_logic self)) = 0
  else
    UInt8.t'int (Seq.get a (index_logic self)) = 1


predicate unsat [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 128 4 128 46] (self : t_Lit) (a : t_Assignments)

 =
  [%#slogic_lit'0] unsat_inner self (view'0 a)

meta "compute_max_steps" 1000000

let rec lit_unsat[#"/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 77 4 77 51] (self:t_Lit) (a:t_Assignments) (return'  (x:bool))= {[@expl:lit_unsat requires] [%#slit'1] inv self (Seq.length (view'1 a))}
  (! bb0
  [ bb0 = s0 [ s0 = is_positive {self'0} (fun (_ret:bool) ->  [ &_5 <- _ret ] s1) | s1 = bb1 ] 
  | bb1 = any [ br0 -> {_5 = false} (! bb3) | br1 -> {_5} (! bb2) ] 
  | bb2 = bb4
  | bb4 = s0 [ s0 = index {self'0} (fun (_ret:UInt64.t) ->  [ &_10 <- _ret ] s1) | s1 = bb5 ] 
  | bb5 = s0 [ s0 = index'0 {a'0} {_10} (fun (_ret:UInt8.t) ->  [ &_8 <- _ret ] s1) | s1 = bb6 ] 
  | bb6 = s0 [ s0 =  [ &_0 <- _8 = ([%#slit] (0 : UInt8.t)) ] s1 | s1 = bb9 ] 
  | bb3 = s0 [ s0 = index {self'0} (fun (_ret:UInt64.t) ->  [ &_15 <- _ret ] s1) | s1 = bb7 ] 
  | bb7 = s0 [ s0 = index'0 {a'0} {_15} (fun (_ret:UInt8.t) ->  [ &_13 <- _ret ] s1) | s1 = bb8 ] 
  | bb8 = s0 [ s0 =  [ &_0 <- _13 = ([%#slit'0] (1 : UInt8.t)) ] s1 | s1 = bb9 ] 
  | bb9 = return''0 {_0} ]
  )
  [ & _0 : bool = Any.any_l ()
  | & self'0 : t_Lit = self
  | & a'0 : t_Assignments = a
  | & _5 : bool = Any.any_l ()
  | & _8 : UInt8.t = Any.any_l ()
  | & _10 : UInt64.t = Any.any_l ()
  | & _13 : UInt8.t = Any.any_l ()
  | & _15 : UInt64.t = Any.any_l () ]
   [ return''0 (result:bool)-> {[@expl:lit_unsat ensures] [%#slit'2] result = unsat self a} (! return' {result}) ] 
