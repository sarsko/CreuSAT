(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 121 4 121 68 *)

(* lit::Lit *)

let%span sassignments = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 20 15 20 32
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 21 14 21 35
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span slogic_assignments = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 17 4 17 12
let%span slit = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 122 57 122 58
let%span slit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 122 61 122 65
let%span slit'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 122 75 122 80
let%span slit'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 118 15 118 40
let%span slit'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 119 14 119 42
let%span slit'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 120 14 120 70
let%span slogic_lit = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 24 20 24 29
let%span slogic_lit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 31 20 31 33

use creusot.int.UInt8
use creusot.prelude.Opaque
use creusot.int.UInt64
use seq.Seq
use mach.int.Int
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq UInt8.t

axiom view_spec : forall self : t_Vec . [%#svec] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#slogic_assignments] view self.t_Assignments__0

function view'1 (self : t_Assignments) : Seq.seq UInt8.t =
  [%#smodel] view'0 self

let rec index (self:t_Assignments) (ix:UInt64.t) (return'  (x:UInt8.t))= {[@expl:index requires] [%#sassignments] UInt64.t'int ix
  < Seq.length (view'1 self)}
  any
  [ return''0 (result:UInt8.t)-> {[%#sassignments'0] Seq.get (view'1 self) (UInt64.t'int ix) = result}
    (! return' {result}) ]


type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function index_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 23 4 23 35] (self : t_Lit) : int =
  [%#slogic_lit] UInt64.t'int self.t_Lit__idx

function is_positive_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 30 4 30 42] (self : t_Lit) : bool =
  [%#slogic_lit'0] self.t_Lit__polarity

meta "compute_max_steps" 1000000

let rec phase_saved[#"/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 121 4 121 68] (idx:UInt64.t) (assignments:t_Assignments) (return'  (x:t_Lit))= {[@expl:phase_saved requires] [%#slit'2] UInt64.t'int idx
  < Seq.length (view'1 assignments)}
  (! bb0
  [ bb0 = s0 [ s0 = index {assignments'0} {idx'0} (fun (_ret:UInt8.t) ->  [ &_10 <- _ret ] s1) | s1 = bb1 ] 
  | bb1 = s0
    [ s0 =  [ &_8 <- _10 = ([%#slit] (1 : UInt8.t)) ] s1
    | s1 = any [ br0 -> {_8 = false} (! bb3) | br1 -> {_8} (! bb2) ]  ]
  
  | bb2 = s0 [ s0 =  [ &_7 <- [%#slit'0] true ] s1 | s1 = bb4 ] 
  | bb3 = s0 [ s0 =  [ &_7 <- [%#slit'1] false ] s1 | s1 = bb4 ] 
  | bb4 = s0 [ s0 =  [ &_0 <- { t_Lit__idx = idx'0; t_Lit__polarity = _7 } ] s1 | s1 = return''0 {_0} ]  ]
  )
  [ & _0 : t_Lit = Any.any_l ()
  | & idx'0 : UInt64.t = idx
  | & assignments'0 : t_Assignments = assignments
  | & _7 : bool = Any.any_l ()
  | & _8 : bool = Any.any_l ()
  | & _10 : UInt8.t = Any.any_l () ]
  
  [ return''0 (result:t_Lit)-> {[@expl:phase_saved ensures #0] [%#slit'3] index_logic result = UInt64.t'int idx}
    {[@expl:phase_saved ensures #1] [%#slit'4] is_positive_logic result
    = (UInt8.t'int (Seq.get (view'1 assignments) (UInt64.t'int idx)) = 1)}
    (! return' {result}) ]
  
