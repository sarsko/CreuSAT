(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 12 9 12 14 *)

(* <lit::Lit as creusot_contracts::Clone> *)

let%span slit = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 12 9 12 14
let%span sclone = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/clone.rs" 15 26 15 41

use creusot.int.UInt64
use creusot.prelude.Any

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

let rec clone' (self_:UInt64.t) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#sclone] result = self_} (! return' {result}) ]


let rec clone''0 (self_:bool) (return'  (x:bool))= any
  [ return''0 (result:bool)-> {[%#sclone] result = self_} (! return' {result}) ]


meta "compute_max_steps" 1000000

let rec clone''1[#"/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 12 9 12 14] (self:t_Lit) (return'  (x:t_Lit))= (! bb0
  [ bb0 = s0
    [ s0 =  [ &_5 <- self'0.t_Lit__idx ] s1 | s1 = clone' {_5} (fun (_ret:UInt64.t) ->  [ &_3 <- _ret ] s2) | s2 = bb1 ]
  
  | bb1 = s0
    [ s0 =  [ &_8 <- self'0.t_Lit__polarity ] s1
    | s1 = clone''0 {_8} (fun (_ret:bool) ->  [ &_6 <- _ret ] s2)
    | s2 = bb2 ]
  
  | bb2 = s0 [ s0 =  [ &_0 <- { t_Lit__idx = _3; t_Lit__polarity = _6 } ] s1 | s1 = return''0 {_0} ]  ]
  )
  [ & _0 : t_Lit = Any.any_l ()
  | & self'0 : t_Lit = self
  | & _3 : UInt64.t = Any.any_l ()
  | & _5 : UInt64.t = Any.any_l ()
  | & _6 : bool = Any.any_l ()
  | & _8 : bool = Any.any_l () ]
   [ return''0 (result:t_Lit)-> {[@expl:clone ensures] [%#slit] result = self} (! return' {result}) ] 
