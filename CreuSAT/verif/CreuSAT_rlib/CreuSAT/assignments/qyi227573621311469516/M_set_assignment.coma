(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 72 4 72 76 *)

(* assignments::Assignments *)

let%span sassignments = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 73 51 73 69
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 76 34 76 35
let%span sassignments'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 78 34 78 35
let%span sassignments'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 61 4 61 37
let%span sassignments'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 62 15 62 36
let%span sassignments'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 63 15 63 23
let%span sassignments'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 64 15 64 40
let%span sassignments'6 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 65 15 65 46
let%span sassignments'7 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 66 15 66 56
let%span sassignments'8 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 67 14 67 58
let%span sassignments'9 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 68 14 68 49
let%span sassignments'10 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 69 14 69 43
let%span sassignments'11 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 70 14 70 110
let%span sassignments'12 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 71 14 71 28
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 158 27 158 46
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 159 26 159 54
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 160 26 160 57
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 161 26 161 62
let%span svec'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 162 26 162 55
let%span svec'4 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span smodel'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span sslice'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 137 20 137 94
let%span slogic_assignments = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 53 12 54 74
let%span slogic_assignments'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 17 4 17 12
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34
let%span slit = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 50 14 50 48
let%span slit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 43 14 43 43
let%span slogic_lit = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 83 20 83 42
let%span slogic_lit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 24 20 24 29
let%span slogic_lit'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 117 20 117 38
let%span slogic_lit'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 31 20 31 33
let%span slogic_lit'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 90 12 93 13
let%span slogic_lit'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 101 12 104 13
let%span slogic_formula = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 79 14 79 41
let%span slogic_formula'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 81 20 81 44
let%span slogic_formula'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 88 12 92 45
let%span slogic_formula'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 30 8 31 69
let%span slogic_formula'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 22 8 22 85
let%span slogic_trail = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_trail.rs" 105 8 107 38
let%span slogic_trail'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_trail.rs" 168 8 172 17
let%span slogic_trail'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_trail.rs" 15 12 23 13
let%span slogic_trail'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_trail.rs" 129 4 133 5
let%span slogic = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic.rs" 25 8 29 9
let%span slogic_clause = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 227 20 227 42
let%span slogic_clause'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 14 4 14 12
let%span slogic_clause'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 33 4 33 62
let%span slogic_clause'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 25 8 26 23
let%span slogic_clause'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 48 8 49 92

use creusot.int.UInt64
use creusot.prelude.MutBorrow
use creusot.prelude.Opaque
use creusot.int.UInt8
use seq.Seq
use mach.int.Int
use creusot.int.UInt32
use creusot.prelude.Any

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function is_positive_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 30 4 30 42] (self : t_Lit) : bool =
  [%#slogic_lit'2] self.t_Lit__polarity

let rec is_positive (self:t_Lit) (return'  (x:bool))= any
  [ return''0 (result:bool)-> {[%#slit] result = is_positive_logic self} (! return' {result}) ]


type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec }

function index_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 23 4 23 35] (self : t_Lit) : int =
  [%#slogic_lit'0] UInt64.t'int self.t_Lit__idx

let rec index (self:t_Lit) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#slit'0] UInt64.t'int result = index_logic self} (! return' {result}) ]


predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt8.t) =
  [%#sslice] UInt64.t'int self < Seq.length seq

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq UInt8.t

axiom view_spec : forall self : t_Vec . [%#svec'4] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : MutBorrow.t t_Vec) : Seq.seq UInt8.t =
  [%#smodel'0] view self.current

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt8.t) (out : UInt8.t) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

predicate resolve_elswhere [@inline:trivial] (self : UInt64.t) (old' : Seq.seq UInt8.t) (fin : Seq.seq UInt8.t) =
  [%#sslice'1] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
   -> Seq.get old' i = Seq.get fin i

let rec index_mut (self_:MutBorrow.t t_Vec) (ix:UInt64.t) (return'  (x:MutBorrow.t UInt8.t))= {[@expl:index_mut requires] [%#svec] in_bounds ix (view'0 self_)}
  any
  [ return''0 (result:MutBorrow.t UInt8.t)-> {[%#svec'0] has_value ix (view'0 self_) result.current}
    {[%#svec'1] has_value ix (view self_.final) result.final}
    {[%#svec'2] resolve_elswhere ix (view'0 self_) (view self_.final)}
    {[%#svec'3] Seq.length (view self_.final) = Seq.length (view'0 self_)}
    (! return' {result}) ]


predicate resolve (self : MutBorrow.t UInt8.t) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0 : MutBorrow.t UInt8.t) =
  resolve _0

predicate resolve'1 (self : MutBorrow.t t_Assignments) =
  [%#sresolve] self.final = self.current

predicate resolve'2 (_0 : MutBorrow.t t_Assignments) =
  resolve'1 _0

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec'0; t_Formula__num_vars: UInt64.t }

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

function view'1 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#slogic_assignments'0] view self.t_Assignments__0

predicate inv [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 51 4 51 40] (self : t_Assignments) (f : t_Formula)

 =
  [%#slogic_assignments] UInt64.t'int f.t_Formula__num_vars = Seq.length (view'1 self)
  /\ (forall i : int . 0 <= i /\ i < Seq.length (view'1 self)  -> UInt8.t'int (Seq.get (view'1 self) i) <= 3)

predicate inv'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 82 4 82 36] (self : t_Lit) (n : int) =
  [%#slogic_lit] index_logic self < n

type t_RawVec'2  =
  { t_RawVec__inner'2: t_RawVecInner; t_RawVec__qy95zmarker'2: () }

type t_Vec'2  =
  { t_Vec__buf'2: t_RawVec'2; t_Vec__len'2: UInt64.t }

type t_Clause  =
  { t_Clause__deleted: bool; t_Clause__lbd: UInt32.t; t_Clause__search: UInt64.t; t_Clause__lits: t_Vec'2 }

function view'2 (self : t_Vec'0) : Seq.seq t_Clause

axiom view_spec'0 : forall self : t_Vec'0 . [%#svec'4] Seq.length (view'2 self) <= UInt64.t'int (v_MAX : UInt64.t)

predicate vars_in_range_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 23 0 23 55] (s : Seq.seq t_Lit) (n : int)

 =
  [%#slogic_clause'2] forall i : int . 0 <= i /\ i < Seq.length s  -> inv'0 (Seq.get s i) n

predicate no_duplicate_indexes_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 46 0 46 54] (s : Seq.seq t_Lit)

 =
  [%#slogic_clause'3] forall j : int, k : int . 0 <= j /\ j < Seq.length s /\ 0 <= k /\ k < Seq.length s /\ k <> j
   -> index_logic (Seq.get s k) <> index_logic (Seq.get s j)

predicate inv_internal [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 32 0 32 48] (s : Seq.seq t_Lit) (n : int)

 =
  [%#slogic_clause'1] vars_in_range_inner s n /\ no_duplicate_indexes_inner s

function view'3 (self : t_Vec'2) : Seq.seq t_Lit

axiom view_spec'1 : forall self : t_Vec'2 . [%#svec'4] Seq.length (view'3 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'4 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 16 4 16 33] (self : t_Clause) : Seq.seq t_Lit

 =
  [%#slogic_clause'0] view'3 self.t_Clause__lits

predicate inv'1 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 226 4 226 36] (self : t_Clause) (n : int) =
  [%#slogic_clause] inv_internal (view'4 self) n

predicate inv_mirror [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 86 4 86 35] (self : t_Formula) =
  [%#slogic_formula'1] (forall i : int . 0 <= i /\ i < Seq.length (view'2 self.t_Formula__clauses)
   -> inv'1 (Seq.get (view'2 self.t_Formula__clauses) i) (UInt64.t'int self.t_Formula__num_vars))
  /\ (forall i : int . 0 <= i /\ i < Seq.length (view'2 self.t_Formula__clauses)
   -> Seq.length (view'4 (Seq.get (view'2 self.t_Formula__clauses) i)) >= 1)

type t_FormulaModel  =
  { t_FormulaModel__clauses: Seq.seq t_Clause; t_FormulaModel__num_vars: int }

predicate formula_invariant [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 28 0 28 49] (f : t_FormulaModel)

 =
  [%#slogic_formula'2] forall i : int . 0 <= i /\ i < Seq.length f.t_FormulaModel__clauses
   -> inv'1 (Seq.get f.t_FormulaModel__clauses i) f.t_FormulaModel__num_vars
  /\ Seq.length (view'4 (Seq.get f.t_FormulaModel__clauses i)) > 0

function view'5 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 21 4 21 33] (self : t_Formula) : t_FormulaModel

 =
  [%#slogic_formula'3] { t_FormulaModel__clauses = view'2 self.t_Formula__clauses;
                         t_FormulaModel__num_vars = UInt64.t'int self.t_Formula__num_vars }

predicate inv'2 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 80 4 80 28] (self : t_Formula) =
  [%#slogic_formula'0] formula_invariant (view'5 self)

axiom inv_spec : forall self : t_Formula . [%#slogic_formula] inv'2 self = inv_mirror self

type t_Reason  =
  | C_Decision
  | C_Unit UInt64.t
  | C_Long UInt64.t

type t_Step  =
  { t_Step__lit: t_Lit; t_Step__decision_level: UInt64.t; t_Step__reason: t_Reason }

predicate inv'3 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_trail.rs" 13 4 13 40] (self : t_Reason) (f : t_Formula)

 =
  [%#slogic_trail'1] match self with
    | C_Long cref -> 0 <= UInt64.t'int cref
    /\ UInt64.t'int cref < Seq.length (view'2 f.t_Formula__clauses)
    /\ Seq.length (view'4 (Seq.get (view'2 f.t_Formula__clauses) (UInt64.t'int cref))) > 1
    | C_Unit cref -> 0 <= UInt64.t'int cref
    /\ UInt64.t'int cref < Seq.length (view'2 f.t_Formula__clauses)
    /\ Seq.length (view'4 (Seq.get (view'2 f.t_Formula__clauses) (UInt64.t'int cref))) = 1
    | _ -> true
    end

predicate trail_invariant [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_trail.rs" 103 0 103 60] (trail : Seq.seq t_Step) (f : t_Formula)

 =
  [%#slogic_trail] forall i : int . 0 <= i /\ i < Seq.length trail
   -> inv'0 (Seq.get trail i).t_Step__lit (UInt64.t'int f.t_Formula__num_vars)
  /\ inv'3 (Seq.get trail i).t_Step__reason f

function view'6 (self : t_Vec'1) : Seq.seq t_Step

axiom view_spec'2 : forall self : t_Vec'1 . [%#svec'4] Seq.length (view'6 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'7 (self : t_Vec'1) : Seq.seq t_Step =
  [%#smodel] view'6 self

predicate unset [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic.rs" 23 0 23 38] (v : UInt8.t) =
  [%#slogic] if UInt8.t'int v >= 2 then true else false

function view'8 (self : MutBorrow.t t_Assignments) : Seq.seq UInt8.t =
  [%#smodel'0] view'1 self.current

predicate sat_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 88 4 88 57] (self : t_Lit) (a : Seq.seq UInt8.t)

 =
  [%#slogic_lit'3] if is_positive_logic self then
    UInt8.t'int (Seq.get a (index_logic self)) = 1
  else
    UInt8.t'int (Seq.get a (index_logic self)) = 0


predicate unsat_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 99 4 99 59] (self : t_Lit) (a : Seq.seq UInt8.t)

 =
  [%#slogic_lit'4] if is_positive_logic self then
    UInt8.t'int (Seq.get a (index_logic self)) = 0
  else
    UInt8.t'int (Seq.get a (index_logic self)) = 1


predicate clause_post_with_regards_to_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_trail.rs" 128 0 128 90] (c : t_Clause) (a : Seq.seq UInt8.t) (j : int)

 =
  [%#slogic_trail'2] index_logic (Seq.get (view'4 c) 0) = j
  /\ sat_inner (Seq.get (view'4 c) 0) a
  /\ (forall i : int . 1 <= i /\ i < Seq.length (view'4 c)  -> unsat_inner (Seq.get (view'4 c) i) a)

predicate long_are_post_unit_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_trail.rs" 166 0 166 92] (trail : Seq.seq t_Step) (f : t_Formula) (a : Seq.seq UInt8.t)

 =
  [%#slogic_trail'0] forall j : int . 0 <= j /\ j < Seq.length trail
   -> match (Seq.get trail j).t_Step__reason with
    | C_Long k -> clause_post_with_regards_to_inner (Seq.get (view'2 f.t_Formula__clauses) (UInt64.t'int k)) a (index_logic (Seq.get trail j).t_Step__lit)
    | _ -> true
    end

predicate sat [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 116 4 116 44] (self : t_Lit) (a : t_Assignments)
 =
  [%#slogic_lit'1] sat_inner self (view'1 a)

meta "compute_max_steps" 1000000

let rec set_assignment[#"/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 72 4 72 76] (self:MutBorrow.t t_Assignments) (lit:t_Lit) (_f:t_Formula) (_t:t_Vec'1) (return'  (x:()))= {[@expl:set_assignment requires #0] [%#sassignments'2] inv self.current _f}
  {[@expl:set_assignment requires #1] [%#sassignments'3] inv'0 lit (UInt64.t'int _f.t_Formula__num_vars)}
  {[@expl:set_assignment requires #2] [%#sassignments'4] inv'2 _f}
  {[@expl:set_assignment requires #3] [%#sassignments'5] trail_invariant (view'7 _t) _f}
  {[@expl:set_assignment requires #4] [%#sassignments'6] unset (Seq.get (view'8 self) (index_logic lit))}
  {[@expl:set_assignment requires #5] [%#sassignments'7] long_are_post_unit_inner (view'7 _t) _f (view'8 self)}
  (! bb0
  [ bb0 = s0 [ s0 =  [ &old_self <- [%#sassignments] self'0 ] s1 | s1 = bb1 ] 
  | bb1 = s0 [ s0 = is_positive {lit'0} (fun (_ret:bool) ->  [ &_19 <- _ret ] s1) | s1 = bb2 ] 
  | bb2 = any [ br0 -> {_19 = false} (! bb6) | br1 -> {_19} (! bb3) ] 
  | bb3 = s0
    [ s0 = MutBorrow.borrow_final
        <t_Vec>
        {(self'0.current).t_Assignments__0}
        {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
        (fun (_ret:MutBorrow.t t_Vec) ->
           [ &_22 <- _ret ] 
           [ &self'0 <- { self'0 with current = { t_Assignments__0 = _ret.final } } ] 
          s1)
    | s1 = index {lit'0} (fun (_ret:UInt64.t) ->  [ &_23 <- _ret ] s2)
    | s2 = bb4 ]
  
  | bb4 = s0 [ s0 = index_mut {_22} {_23} (fun (_ret:MutBorrow.t UInt8.t) ->  [ &_21 <- _ret ] s1) | s1 = bb5 ] 
  | bb5 = s0
    [ s0 =  [ &_21 <- { _21 with current = ([%#sassignments'0] (1 : UInt8.t)) } ] s1
    | s1 = -{resolve'0 _21}- s2
    | s2 = -{resolve'2 self'0}- s3
    | s3 = bb9 ]
  
  | bb6 = s0
    [ s0 = MutBorrow.borrow_final
        <t_Vec>
        {(self'0.current).t_Assignments__0}
        {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
        (fun (_ret:MutBorrow.t t_Vec) ->
           [ &_26 <- _ret ] 
           [ &self'0 <- { self'0 with current = { t_Assignments__0 = _ret.final } } ] 
          s1)
    | s1 = index {lit'0} (fun (_ret:UInt64.t) ->  [ &_27 <- _ret ] s2)
    | s2 = bb7 ]
  
  | bb7 = s0 [ s0 = index_mut {_26} {_27} (fun (_ret:MutBorrow.t UInt8.t) ->  [ &_25 <- _ret ] s1) | s1 = bb8 ] 
  | bb8 = s0
    [ s0 =  [ &_25 <- { _25 with current = ([%#sassignments'1] (0 : UInt8.t)) } ] s1
    | s1 = -{resolve'0 _25}- s2
    | s2 = -{resolve'2 self'0}- s3
    | s3 = bb9 ]
  
  | bb9 = return''0 {_0} ]
  )
  [ & _0 : () = Any.any_l ()
  | & self'0 : MutBorrow.t t_Assignments = self
  | & lit'0 : t_Lit = lit
  | & old_self : MutBorrow.t t_Assignments = Any.any_l ()
  | & _19 : bool = Any.any_l ()
  | & _21 : MutBorrow.t UInt8.t = Any.any_l ()
  | & _22 : MutBorrow.t t_Vec = Any.any_l ()
  | & _23 : UInt64.t = Any.any_l ()
  | & _25 : MutBorrow.t UInt8.t = Any.any_l ()
  | & _26 : MutBorrow.t t_Vec = Any.any_l ()
  | & _27 : UInt64.t = Any.any_l () ]
  
  [ return''0 (result:())-> {[@expl:set_assignment ensures #0] [%#sassignments'2] inv self.final _f}
    {[@expl:set_assignment ensures #1] [%#sassignments'8] long_are_post_unit_inner (view'7 _t) _f (view'1 self.final)}
    {[@expl:set_assignment ensures #2] [%#sassignments'9] not unset (Seq.get (view'1 self.final) (index_logic lit))}
    {[@expl:set_assignment ensures #3] [%#sassignments'10] Seq.length (view'1 self.final) = Seq.length (view'8 self)}
    {[@expl:set_assignment ensures #4] [%#sassignments'11] forall j : int . 0 <= j
    /\ j < Seq.length (view'8 self) /\ j <> index_logic lit  -> Seq.get (view'8 self) j = Seq.get (view'1 self.final) j}
    {[@expl:set_assignment ensures #5] [%#sassignments'12] sat lit self.final}
    (! return' {result}) ]
  
