(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 40 4 40 60 *)

(* <assignments::Assignments as std::ops::IndexMut<usize>> *)

let%span sassignments = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 35 15 35 32
let%span sassignments'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 36 14 36 38
let%span sassignments'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 37 14 37 38
let%span sassignments'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 38 14 38 94
let%span sassignments'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 39 14 39 46
let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 158 27 158 46
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 159 26 159 54
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 160 26 160 57
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 161 26 161 62
let%span svec'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 162 26 162 55
let%span svec'4 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span sslice'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 137 20 137 94
let%span slogic_assignments = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 17 4 17 12
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34

use creusot.prelude.MutBorrow
use creusot.prelude.Opaque
use creusot.int.UInt64
use creusot.int.UInt8
use seq.Seq
use mach.int.Int
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec }

predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt8.t) =
  [%#sslice] UInt64.t'int self < Seq.length seq

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq UInt8.t

axiom view_spec : forall self : t_Vec . [%#svec'4] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : MutBorrow.t t_Vec) : Seq.seq UInt8.t =
  [%#smodel] view self.current

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt8.t) (out : UInt8.t) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

predicate resolve_elswhere [@inline:trivial] (self : UInt64.t) (old' : Seq.seq UInt8.t) (fin : Seq.seq UInt8.t) =
  [%#sslice'1] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
   -> Seq.get old' i = Seq.get fin i

let rec index_mut (self_:MutBorrow.t t_Vec) (ix:UInt64.t) (return'  (x:MutBorrow.t UInt8.t))= {[@expl:index_mut requires] [%#svec] in_bounds ix (view'0 self_)}
  any
  [ return''0 (result:MutBorrow.t UInt8.t)-> {[%#svec'0] has_value ix (view'0 self_) result.current}
    {[%#svec'1] has_value ix (view self_.final) result.final}
    {[%#svec'2] resolve_elswhere ix (view'0 self_) (view self_.final)}
    {[%#svec'3] Seq.length (view self_.final) = Seq.length (view'0 self_)}
    (! return' {result}) ]


predicate resolve (self : MutBorrow.t UInt8.t) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0 : MutBorrow.t UInt8.t) =
  resolve _0

predicate resolve'1 (self : MutBorrow.t t_Assignments) =
  [%#sresolve] self.final = self.current

predicate resolve'2 (_0 : MutBorrow.t t_Assignments) =
  resolve'1 _0

function view'1 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#slogic_assignments] view self.t_Assignments__0

function view'2 (self : MutBorrow.t t_Assignments) : Seq.seq UInt8.t =
  [%#smodel] view'1 self.current

meta "compute_max_steps" 1000000

let rec index_mut'0[#"/Users/sarekhs/CreuSAT/CreuSAT/src/assignments.rs" 40 4 40 60] (self:MutBorrow.t t_Assignments) (ix:UInt64.t) (return'  (x:MutBorrow.t UInt8.t))= {[@expl:index_mut requires] [%#sassignments] UInt64.t'int ix
  < Seq.length (view'2 self)}
  (! bb0
  [ bb0 = s0
    [ s0 = MutBorrow.borrow_final
        <t_Vec>
        {(self'0.current).t_Assignments__0}
        {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
        (fun (_ret:MutBorrow.t t_Vec) ->
           [ &_11 <- _ret ] 
           [ &self'0 <- { self'0 with current = { t_Assignments__0 = _ret.final } } ] 
          s1)
    | s1 = index_mut {_11} {ix'0} (fun (_ret:MutBorrow.t UInt8.t) ->  [ &_10 <- _ret ] s2)
    | s2 = bb1 ]
  
  | bb1 = s0
    [ s0 = MutBorrow.borrow_final <UInt8.t> {_10.current} {MutBorrow.get_id _10}
        (fun (_ret:MutBorrow.t UInt8.t) ->  [ &_9 <- _ret ]  [ &_10 <- { _10 with current = _ret.final } ] s1)
    | s1 = MutBorrow.borrow_final <UInt8.t> {_9.current} {MutBorrow.get_id _9}
        (fun (_ret:MutBorrow.t UInt8.t) ->  [ &_3 <- _ret ]  [ &_9 <- { _9 with current = _ret.final } ] s2)
    | s2 = MutBorrow.borrow_final <UInt8.t> {_3.current} {MutBorrow.get_id _3}
        (fun (_ret:MutBorrow.t UInt8.t) ->  [ &_0 <- _ret ]  [ &_3 <- { _3 with current = _ret.final } ] s3)
    | s3 = -{resolve'0 _10}- s4
    | s4 = -{resolve'0 _9}- s5
    | s5 = -{resolve'0 _3}- s6
    | s6 = -{resolve'2 self'0}- s7
    | s7 = return''0 {_0} ]
   ]
  )
  [ & _0 : MutBorrow.t UInt8.t = Any.any_l ()
  | & self'0 : MutBorrow.t t_Assignments = self
  | & ix'0 : UInt64.t = ix
  | & _3 : MutBorrow.t UInt8.t = Any.any_l ()
  | & _9 : MutBorrow.t UInt8.t = Any.any_l ()
  | & _10 : MutBorrow.t UInt8.t = Any.any_l ()
  | & _11 : MutBorrow.t t_Vec = Any.any_l () ]
  
  [ return''0 (result:MutBorrow.t UInt8.t)-> {[@expl:index_mut ensures #0] [%#sassignments'0] Seq.get (view'1 self.current) (UInt64.t'int ix)
    = result.current}
    {[@expl:index_mut ensures #1] [%#sassignments'1] Seq.get (view'1 self.final) (UInt64.t'int ix) = result.final}
    {[@expl:index_mut ensures #2] [%#sassignments'2] forall i : int . 0 <= i
    /\ i <> UInt64.t'int ix /\ i < Seq.length (view'2 self)  -> Seq.get (view'2 self) i = Seq.get (view'1 self.final) i}
    {[@expl:index_mut ensures #3] [%#sassignments'3] Seq.length (view'1 self.final) = Seq.length (view'1 self.current)}
    (! return' {result}) ]
  
