(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 10 9 10 14 *)

(* <clause::Clause as creusot_contracts::Clone> *)

let%span sclause = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 10 9 10 14
let%span sclone = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/clone.rs" 15 26 15 41

use creusot.int.UInt32
use creusot.int.UInt64
use creusot.prelude.Opaque
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Clause  =
  { t_Clause__deleted: bool; t_Clause__lbd: UInt32.t; t_Clause__search: UInt64.t; t_Clause__lits: t_Vec }

let rec clone' (self_:bool) (return'  (x:bool))= any
  [ return''0 (result:bool)-> {[%#sclone] result = self_} (! return' {result}) ]


let rec clone''0 (self_:UInt32.t) (return'  (x:UInt32.t))= any
  [ return''0 (result:UInt32.t)-> {[%#sclone] result = self_} (! return' {result}) ]


let rec clone''1 (self_:UInt64.t) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#sclone] result = self_} (! return' {result}) ]


let rec clone''2 (self_:t_Vec) (return'  (x:t_Vec))= any
  [ return''0 (result:t_Vec)-> {[%#sclone] result = self_} (! return' {result}) ]


meta "compute_max_steps" 1000000

let rec clone''3[#"/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 10 9 10 14] (self:t_Clause) (return'  (x:t_Clause))= (! bb0
  [ bb0 = s0
    [ s0 =  [ &_5 <- self'0.t_Clause__deleted ] s1
    | s1 = clone' {_5} (fun (_ret:bool) ->  [ &_3 <- _ret ] s2)
    | s2 = bb1 ]
  
  | bb1 = s0
    [ s0 =  [ &_8 <- self'0.t_Clause__lbd ] s1
    | s1 = clone''0 {_8} (fun (_ret:UInt32.t) ->  [ &_6 <- _ret ] s2)
    | s2 = bb2 ]
  
  | bb2 = s0
    [ s0 =  [ &_11 <- self'0.t_Clause__search ] s1
    | s1 = clone''1 {_11} (fun (_ret:UInt64.t) ->  [ &_9 <- _ret ] s2)
    | s2 = bb3 ]
  
  | bb3 = s0
    [ s0 =  [ &_14 <- self'0.t_Clause__lits ] s1
    | s1 = clone''2 {_14} (fun (_ret:t_Vec) ->  [ &_12 <- _ret ] s2)
    | s2 = bb4 ]
  
  | bb4 = s0
    [ s0 =  [ &_0 <- { t_Clause__deleted = _3; t_Clause__lbd = _6; t_Clause__search = _9; t_Clause__lits = _12 } ] s1
    | s1 = bb5 ]
  
  | bb5 = return''0 {_0} ]
  )
  [ & _0 : t_Clause = Any.any_l ()
  | & self'0 : t_Clause = self
  | & _3 : bool = Any.any_l ()
  | & _5 : bool = Any.any_l ()
  | & _6 : UInt32.t = Any.any_l ()
  | & _8 : UInt32.t = Any.any_l ()
  | & _9 : UInt64.t = Any.any_l ()
  | & _11 : UInt64.t = Any.any_l ()
  | & _12 : t_Vec = Any.any_l ()
  | & _14 : t_Vec = Any.any_l () ]
   [ return''0 (result:t_Clause)-> {[@expl:clone ensures] [%#sclause] result = self} (! return' {result}) ] 
