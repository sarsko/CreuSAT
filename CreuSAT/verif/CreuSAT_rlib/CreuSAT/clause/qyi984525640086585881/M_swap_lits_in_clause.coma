(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 166 4 166 75 *)

(* clause::Clause *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 181 26 181 42
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 182 26 182 48
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span smodel'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 258 19 258 35
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 259 19 259 35
let%span sslice'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 260 18 260 50
let%span sslice'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 27 14 27 41
let%span sslice'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 28 14 28 42
let%span slogic_assignments = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 37 8 37 61
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34
let%span slogic_lit = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 24 20 24 29
let%span slogic_lit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 83 20 83 42
let%span slogic_lit'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 90 12 93 13
let%span slogic_lit'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 31 20 31 33
let%span slogic_formula = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 79 14 79 41
let%span slogic_formula'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 81 20 81 44
let%span slogic_formula'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 30 8 31 69
let%span slogic_formula'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 22 8 22 85
let%span slogic_formula'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 88 12 92 45
let%span slogic_formula'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 48 8 48 111
let%span slogic_formula'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 39 8 40 37
let%span slogic = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic.rs" 25 8 29 9
let%span slogic_clause = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 253 11 253 31
let%span slogic_clause'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 254 11 254 40
let%span slogic_clause'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 255 11 255 33
let%span slogic_clause'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 256 10 256 40
let%span slogic_clause'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 260 11 260 42
let%span slogic_clause'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 261 11 261 54
let%span slogic_clause'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 262 10 262 33
let%span slogic_clause'6 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 263 10 263 33
let%span slogic_clause'7 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 264 10 264 41
let%span slogic_clause'8 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 266 52 266 54
let%span slogic_clause'9 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 227 20 227 42
let%span slogic_clause'10 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 105 20 105 53
let%span slogic_clause'11 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 14 4 14 12
let%span slogic_clause'12 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 40 8 40 134
let%span slogic_clause'13 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 48 8 49 92
let%span slogic_clause'14 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 33 4 33 62
let%span slogic_clause'15 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 25 8 26 23
let%span slogic_clause'16 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 187 12 188 37
let%span sclause = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 167 43 167 61
let%span sclause'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 169 22 169 89
let%span sclause'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 170 22 170 65
let%span sclause'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 159 15 159 31
let%span sclause'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 160 15 160 31
let%span sclause'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 161 15 161 23
let%span sclause'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 162 4 162 46
let%span sclause'6 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 163 4 163 51
let%span sclause'7 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 164 14 164 43
let%span sclause'8 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 165 14 165 46
let%span sseq = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/logic/seq.rs" 312 8 312 41

use creusot.prelude.MutBorrow
use creusot.prelude.Opaque
use creusot.int.UInt64
use creusot.int.UInt32
use creusot.slice.Slice64
use seq.Seq
use mach.int.Int
use seq.Permut
use creusot.int.UInt8
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Clause  =
  { t_Clause__deleted: bool; t_Clause__lbd: UInt32.t; t_Clause__search: UInt64.t; t_Clause__lits: t_Vec }

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : Slice64.slice t_Lit) : Seq.seq t_Lit

axiom view_spec : forall self : Slice64.slice t_Lit . ([%#sslice'2] Seq.length (view self)
<= UInt64.t'int (v_MAX : UInt64.t))
&& ([%#sslice'3] view self = Slice64.id self)

function view'0 (self : MutBorrow.t (Slice64.slice t_Lit)) : Seq.seq t_Lit =
  [%#smodel'0] view self.current

function view'1 (self : t_Vec) : Seq.seq t_Lit

axiom view_spec'0 : forall self : t_Vec . [%#svec'1] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'2 (self : MutBorrow.t t_Vec) : Seq.seq t_Lit =
  [%#smodel'0] view'1 self.current

let rec deref_mut (self_:MutBorrow.t t_Vec) (return'  (x:MutBorrow.t (Slice64.slice t_Lit)))= any
  [ return''0 (result:MutBorrow.t (Slice64.slice t_Lit))-> {[%#svec] view'0 result = view'2 self_}
    {[%#svec'0] view result.final = view'1 self_.final}
    (! return' {result}) ]


let rec swap (self_:MutBorrow.t (Slice64.slice t_Lit)) (i:UInt64.t) (j:UInt64.t) (return'  (x:()))= {[@expl:swap requires #0] [%#sslice] UInt64.t'int i
  < Seq.length (view'0 self_)}
  {[@expl:swap requires #1] [%#sslice'0] UInt64.t'int j < Seq.length (view'0 self_)}
  any
  [ return''0 (result:())-> {[%#sslice'1] Permut.exchange (view self_.final) (view'0 self_) (UInt64.t'int i) (UInt64.t'int j)}
    (! return' {result}) ]


predicate resolve (self : MutBorrow.t (Slice64.slice t_Lit)) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0 : MutBorrow.t (Slice64.slice t_Lit)) =
  resolve _0

predicate resolve'1 (self : MutBorrow.t t_Clause) =
  [%#sresolve] self.final = self.current

predicate resolve'2 (_0 : MutBorrow.t t_Clause) =
  resolve'1 _0

type t_FormulaModel  =
  { t_FormulaModel__clauses: Seq.seq t_Clause; t_FormulaModel__num_vars: int }

function index_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 23 4 23 35] (self : t_Lit) : int =
  [%#slogic_lit] UInt64.t'int self.t_Lit__idx

predicate inv [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 82 4 82 36] (self : t_Lit) (n : int) =
  [%#slogic_lit'0] index_logic self < n

predicate vars_in_range_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 23 0 23 55] (s : Seq.seq t_Lit) (n : int)

 =
  [%#slogic_clause'15] forall i : int . 0 <= i /\ i < Seq.length s  -> inv (Seq.get s i) n

predicate no_duplicate_indexes_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 46 0 46 54] (s : Seq.seq t_Lit)

 =
  [%#slogic_clause'13] forall j : int, k : int . 0 <= j /\ j < Seq.length s /\ 0 <= k /\ k < Seq.length s /\ k <> j
   -> index_logic (Seq.get s k) <> index_logic (Seq.get s j)

predicate inv_internal [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 32 0 32 48] (s : Seq.seq t_Lit) (n : int)

 =
  [%#slogic_clause'14] vars_in_range_inner s n /\ no_duplicate_indexes_inner s

function view'3 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 16 4 16 33] (self : t_Clause) : Seq.seq t_Lit

 =
  [%#slogic_clause'11] view'1 self.t_Clause__lits

predicate inv'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 226 4 226 36] (self : t_Clause) (n : int) =
  [%#slogic_clause'9] inv_internal (view'3 self) n

predicate formula_invariant [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 28 0 28 49] (f : t_FormulaModel)

 =
  [%#slogic_formula'1] forall i : int . 0 <= i /\ i < Seq.length f.t_FormulaModel__clauses
   -> inv'0 (Seq.get f.t_FormulaModel__clauses i) f.t_FormulaModel__num_vars
  /\ Seq.length (view'3 (Seq.get f.t_FormulaModel__clauses i)) > 0

predicate unset [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic.rs" 23 0 23 38] (v : UInt8.t) =
  [%#slogic] if UInt8.t'int v >= 2 then true else false

predicate complete_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 35 0 35 52] (a : Seq.seq UInt8.t)

 =
  [%#slogic_assignments] forall i : int . 0 <= i /\ i < Seq.length a  -> not unset (Seq.get a i)

function is_positive_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 30 4 30 42] (self : t_Lit) : bool =
  [%#slogic_lit'2] self.t_Lit__polarity

predicate sat_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 88 4 88 57] (self : t_Lit) (a : Seq.seq UInt8.t)

 =
  [%#slogic_lit'1] if is_positive_logic self then
    UInt8.t'int (Seq.get a (index_logic self)) = 1
  else
    UInt8.t'int (Seq.get a (index_logic self)) = 0


predicate sat_inner'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 185 4 185 57] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#slogic_clause'16] exists i : int . 0 <= i /\ i < Seq.length (view'3 self) /\ sat_inner (Seq.get (view'3 self) i) a

predicate formula_sat_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 37 0 37 72] (f : t_FormulaModel) (a : Seq.seq UInt8.t)

 =
  [%#slogic_formula'5] forall i : int . 0 <= i /\ i < Seq.length f.t_FormulaModel__clauses
   -> sat_inner'0 (Seq.get f.t_FormulaModel__clauses i) a

predicate eventually_sat_complete [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 46 0 46 55] (f : t_FormulaModel)

 =
  [%#slogic_formula'4] exists a2 : Seq.seq UInt8.t . Seq.length a2 = f.t_FormulaModel__num_vars
  /\ complete_inner a2 /\ formula_sat_inner f a2

predicate equisat_extension_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 38 0 38 66] (c : t_Clause) (f : t_FormulaModel)

 =
  [%#slogic_clause'12] eventually_sat_complete f
   -> eventually_sat_complete { t_FormulaModel__clauses = Seq.snoc f.t_FormulaModel__clauses c;
                                t_FormulaModel__num_vars = f.t_FormulaModel__num_vars }

predicate permutation_of (self : Seq.seq t_Lit) (other : Seq.seq t_Lit) =
  [%#sseq] Permut.permut self other 0 (Seq.length self)

function lemma_permuted_clause_maintains_equisat [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 257 0 257 86] (f : t_FormulaModel) (c : t_Clause) (c2 : t_Clause) : ()


axiom lemma_permuted_clause_maintains_equisat_spec : forall f : t_FormulaModel, c : t_Clause, c2 : t_Clause . ([%#slogic_clause] formula_invariant f)
 -> ([%#slogic_clause'0] equisat_extension_inner c f)
 -> ([%#slogic_clause'1] permutation_of (view'3 c) (view'3 c2))  -> ([%#slogic_clause'2] equisat_extension_inner c2 f)

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec'0; t_Formula__num_vars: UInt64.t }

function view'4 (self : t_Vec'0) : Seq.seq t_Clause

axiom view_spec'1 : forall self : t_Vec'0 . [%#svec'1] Seq.length (view'4 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'5 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 21 4 21 33] (self : t_Formula) : t_FormulaModel

 =
  [%#slogic_formula'2] { t_FormulaModel__clauses = view'4 self.t_Formula__clauses;
                         t_FormulaModel__num_vars = UInt64.t'int self.t_Formula__num_vars }

function view'6 (self : t_Formula) : t_FormulaModel =
  [%#smodel] view'5 self

function dup_stable_on_permut [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 266 0 266 51] (c1 : t_Clause) (c2 : t_Clause) : ()

 =
  [%#slogic_clause'8] ()

axiom dup_stable_on_permut_spec : forall c1 : t_Clause, c2 : t_Clause . ([%#slogic_clause'3] no_duplicate_indexes_inner (view'3 c1))
 -> ([%#slogic_clause'4] exists i : int, j : int . Permut.exchange (view'3 c2) (view'3 c1) j i)
 -> ([%#slogic_clause'5] permutation_of (view'3 c1) (view'3 c2))
&& ([%#slogic_clause'6] permutation_of (view'3 c2) (view'3 c1))
&& ([%#slogic_clause'7] no_duplicate_indexes_inner (view'3 c2))

function view'7 (self : MutBorrow.t t_Clause) : Seq.seq t_Lit =
  [%#smodel'0] view'3 self.current

predicate inv_mirror [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 86 4 86 35] (self : t_Formula) =
  [%#slogic_formula'3] (forall i : int . 0 <= i /\ i < Seq.length (view'4 self.t_Formula__clauses)
   -> inv'0 (Seq.get (view'4 self.t_Formula__clauses) i) (UInt64.t'int self.t_Formula__num_vars))
  /\ (forall i : int . 0 <= i /\ i < Seq.length (view'4 self.t_Formula__clauses)
   -> Seq.length (view'3 (Seq.get (view'4 self.t_Formula__clauses) i)) >= 1)

predicate inv'1 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 80 4 80 28] (self : t_Formula) =
  [%#slogic_formula'0] formula_invariant (view'5 self)

axiom inv_spec : forall self : t_Formula . [%#slogic_formula] inv'1 self = inv_mirror self

predicate equisat_extension [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 104 4 104 54] (self : t_Clause) (f : t_Formula)

 =
  [%#slogic_clause'10] equisat_extension_inner self (view'5 f)

meta "compute_max_steps" 1000000

let rec swap_lits_in_clause[#"/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 166 4 166 75] (self:MutBorrow.t t_Clause) (_f:t_Formula) (j:UInt64.t) (k:UInt64.t) (return'  (x:()))= {[@expl:swap_lits_in_clause requires #0] [%#sclause'2] Seq.length (view'7 self)
  > UInt64.t'int j}
  {[@expl:swap_lits_in_clause requires #1] [%#sclause'3] Seq.length (view'7 self) > UInt64.t'int k}
  {[@expl:swap_lits_in_clause requires #2] [%#sclause'4] inv'1 _f}
  {[@expl:swap_lits_in_clause requires #3] [%#sclause'5] inv'0 self.current (UInt64.t'int _f.t_Formula__num_vars)}
  {[@expl:swap_lits_in_clause requires #4] [%#sclause'6] equisat_extension self.current _f}
  (! bb0
  [ bb0 = s0 [ s0 =  [ &old_c <- [%#sclause] self'0 ] s1 | s1 = bb1 ] 
  | bb1 = s0
    [ s0 = MutBorrow.borrow_final
        <t_Vec>
        {(self'0.current).t_Clause__lits}
        {MutBorrow.inherit_id (MutBorrow.get_id self'0) 4}
        (fun (_ret:MutBorrow.t t_Vec) ->
           [ &_19 <- _ret ] 
           [ &self'0 <- { self'0 with current = { self'0.current with t_Clause__lits = _ret.final } } ] 
          s1)
    | s1 = deref_mut {_19} (fun (_ret:MutBorrow.t (Slice64.slice t_Lit)) ->  [ &_18 <- _ret ] s2)
    | s2 = bb2 ]
  
  | bb2 = s0
    [ s0 = MutBorrow.borrow_final <Slice64.slice t_Lit> {_18.current} {MutBorrow.get_id _18}
        (fun (_ret:MutBorrow.t (Slice64.slice t_Lit)) ->
           [ &_17 <- _ret ] 
           [ &_18 <- { _18 with current = _ret.final } ] 
          s1)
    | s1 = swap {_17} {j'0} {k'0} (fun (_ret:()) ->  [ &_16 <- _ret ] s2)
    | s2 = bb3 ]
  
  | bb3 = s0
    [ s0 = -{resolve'0 _18}- s1
    | s1 = -{resolve'2 self'0}- s2
    | s2 = {[@expl:assertion] [%#sclause'0] let _ = lemma_permuted_clause_maintains_equisat (view'6 _f'0) old_c.current self'0.current in true}
      s3
    | s3 = {[@expl:assertion] [%#sclause'1] let _ = dup_stable_on_permut old_c.current self'0.current in true} s4
    | s4 = return''0 {_0} ]
   ]
  )
  [ & _0 : () = Any.any_l ()
  | & self'0 : MutBorrow.t t_Clause = self
  | & _f'0 : t_Formula = _f
  | & j'0 : UInt64.t = j
  | & k'0 : UInt64.t = k
  | & old_c : MutBorrow.t t_Clause = Any.any_l ()
  | & _16 : () = Any.any_l ()
  | & _17 : MutBorrow.t (Slice64.slice t_Lit) = Any.any_l ()
  | & _18 : MutBorrow.t (Slice64.slice t_Lit) = Any.any_l ()
  | & _19 : MutBorrow.t t_Vec = Any.any_l () ]
  
  [ return''0 (result:())-> {[@expl:swap_lits_in_clause ensures #0] [%#sclause'5] inv'0 self.final (UInt64.t'int _f.t_Formula__num_vars)}
    {[@expl:swap_lits_in_clause ensures #1] [%#sclause'6] equisat_extension self.final _f}
    {[@expl:swap_lits_in_clause ensures #2] [%#sclause'7] Seq.length (view'7 self) = Seq.length (view'3 self.final)}
    {[@expl:swap_lits_in_clause ensures #3] [%#sclause'8] Permut.exchange (view'3 self.final) (view'7 self) (UInt64.t'int j) (UInt64.t'int k)}
    (! return' {result}) ]
  
