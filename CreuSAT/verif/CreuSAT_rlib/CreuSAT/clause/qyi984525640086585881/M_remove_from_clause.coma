(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 133 4 133 66 *)

(* clause::Clause *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 97 26 102 17
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34
let%span slogic_lit = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 68 20 68 74
let%span slogic_lit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 83 20 83 42
let%span slogic_lit'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 24 20 24 29
let%span slogic_clause = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 227 20 227 42
let%span slogic_clause'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 14 4 14 12
let%span slogic_clause'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 33 4 33 62
let%span slogic_clause'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 25 8 26 23
let%span slogic_clause'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 48 8 49 92
let%span sclause = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 124 4 124 46
let%span sclause'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 125 15 125 30
let%span sclause'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 126 15 126 33
let%span sclause'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 127 14 128 75
let%span sclause'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 129 14 129 47
let%span sclause'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 130 4 130 42
let%span sclause'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 131 14 132 47
let%span sclause'6 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 107 4 107 46
let%span sclause'7 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 108 15 108 30
let%span sclause'8 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 109 15 109 33
let%span sclause'9 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 110 14 111 77
let%span sclause'10 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 112 14 112 57
let%span sclause'11 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 113 14 113 43
let%span sclause'12 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 114 14 115 34

use creusot.prelude.MutBorrow
use creusot.int.UInt32
use creusot.int.UInt64
use creusot.prelude.Opaque
use seq.Seq
use mach.int.Int
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Clause  =
  { t_Clause__deleted: bool; t_Clause__lbd: UInt32.t; t_Clause__search: UInt64.t; t_Clause__lits: t_Vec }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec'0; t_Formula__num_vars: UInt64.t }

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function index_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 23 4 23 35] (self : t_Lit) : int =
  [%#slogic_lit'1] UInt64.t'int self.t_Lit__idx

predicate inv [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 82 4 82 36] (self : t_Lit) (n : int) =
  [%#slogic_lit'0] index_logic self < n

predicate vars_in_range_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 23 0 23 55] (s : Seq.seq t_Lit) (n : int)

 =
  [%#slogic_clause'2] forall i : int . 0 <= i /\ i < Seq.length s  -> inv (Seq.get s i) n

predicate no_duplicate_indexes_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 46 0 46 54] (s : Seq.seq t_Lit)

 =
  [%#slogic_clause'3] forall j : int, k : int . 0 <= j /\ j < Seq.length s /\ 0 <= k /\ k < Seq.length s /\ k <> j
   -> index_logic (Seq.get s k) <> index_logic (Seq.get s j)

predicate inv_internal [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 32 0 32 48] (s : Seq.seq t_Lit) (n : int)

 =
  [%#slogic_clause'1] vars_in_range_inner s n /\ no_duplicate_indexes_inner s

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Lit

axiom view_spec : forall self : t_Vec . [%#svec'0] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 16 4 16 33] (self : t_Clause) : Seq.seq t_Lit

 =
  [%#slogic_clause'0] view self.t_Clause__lits

predicate inv'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 226 4 226 36] (self : t_Clause) (n : int) =
  [%#slogic_clause] inv_internal (view'0 self) n

function view'1 (self : MutBorrow.t t_Clause) : Seq.seq t_Lit =
  [%#smodel] view'0 self.current

predicate lit_in [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 67 4 67 42] (self : t_Lit) (c : t_Clause) =
  [%#slogic_lit] exists i : int . 0 <= i /\ i < Seq.length (view'0 c) /\ Seq.get (view'0 c) i = self

let rec move_to_end (self:MutBorrow.t t_Clause) (idx:UInt64.t) (_f:t_Formula) (return'  (x:()))= {[@expl:move_to_end requires #0] [%#sclause'6] inv'0 self.current (UInt64.t'int _f.t_Formula__num_vars)}
  {[@expl:move_to_end requires #1] [%#sclause'7] Seq.length (view'1 self) > 0}
  {[@expl:move_to_end requires #2] [%#sclause'8] UInt64.t'int idx < Seq.length (view'1 self)}
  any
  [ return''0 (result:())-> {[%#sclause'6] inv'0 self.final (UInt64.t'int _f.t_Formula__num_vars)}
    {[%#sclause'9] forall i : int . 0 <= i /\ i < Seq.length (view'0 self.final)
     -> (exists j : int . 0 <= j
    /\ j < Seq.length (view'1 self) /\ Seq.get (view'0 self.final) i = Seq.get (view'1 self) j)}
    {[%#sclause'10] Seq.get (view'0 self.final) (Seq.length (view'0 self.final) - 1)
    = Seq.get (view'1 self) (UInt64.t'int idx)}
    {[%#sclause'11] Seq.length (view'0 self.final) = Seq.length (view'1 self)}
    {[%#sclause'12] forall j : int . 0 <= j /\ j < Seq.length (view'1 self)
     -> lit_in (Seq.get (view'1 self) j) self.final}
    (! return' {result}) ]


type t_Option  =
  | C_None
  | C_Some t_Lit

function view'2 (self : MutBorrow.t t_Vec) : Seq.seq t_Lit =
  [%#smodel] view self.current

let rec pop (self_:MutBorrow.t t_Vec) (return'  (x:t_Option))= any
  [ return''0 (result:t_Option)-> {[%#svec] match result with
      | C_Some t -> view self_.final = Seq.([..]) (view'2 self_) 0 (Seq.length (view'2 self_) - 1)
      /\ view'2 self_ = Seq.snoc (view self_.final) t
      | C_None -> self_.current = self_.final /\ Seq.length (view'2 self_) = 0
      end}
    (! return' {result}) ]


predicate resolve (self : MutBorrow.t t_Clause) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0 : MutBorrow.t t_Clause) =
  resolve _0

meta "compute_max_steps" 1000000

let rec remove_from_clause[#"/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 133 4 133 66] (self:MutBorrow.t t_Clause) (idx:UInt64.t) (_f:t_Formula) (return'  (x:()))= {[@expl:remove_from_clause requires #0] [%#sclause] inv'0 self.current (UInt64.t'int _f.t_Formula__num_vars)}
  {[@expl:remove_from_clause requires #1] [%#sclause'0] Seq.length (view'1 self) > 0}
  {[@expl:remove_from_clause requires #2] [%#sclause'1] UInt64.t'int idx < Seq.length (view'1 self)}
  (! bb0
  [ bb0 = s0
    [ s0 = MutBorrow.borrow_mut <t_Clause> {self'0.current}
        (fun (_ret:MutBorrow.t t_Clause) ->  [ &_13 <- _ret ]  [ &self'0 <- { self'0 with current = _ret.final } ] s1)
    | s1 = move_to_end {_13} {idx'0} {_f'0} (fun (_ret:()) ->  [ &_12 <- _ret ] s2)
    | s2 = bb1 ]
  
  | bb1 = s0
    [ s0 = MutBorrow.borrow_final
        <t_Vec>
        {(self'0.current).t_Clause__lits}
        {MutBorrow.inherit_id (MutBorrow.get_id self'0) 4}
        (fun (_ret:MutBorrow.t t_Vec) ->
           [ &_17 <- _ret ] 
           [ &self'0 <- { self'0 with current = { self'0.current with t_Clause__lits = _ret.final } } ] 
          s1)
    | s1 = pop {_17} (fun (_ret:t_Option) ->  [ &_16 <- _ret ] s2)
    | s2 = bb2 ]
  
  | bb2 = s0 [ s0 = -{resolve'0 self'0}- s1 | s1 = return''0 {_0} ]  ]
  )
  [ & _0 : () = Any.any_l ()
  | & self'0 : MutBorrow.t t_Clause = self
  | & idx'0 : UInt64.t = idx
  | & _f'0 : t_Formula = _f
  | & _12 : () = Any.any_l ()
  | & _13 : MutBorrow.t t_Clause = Any.any_l ()
  | & _16 : t_Option = Any.any_l ()
  | & _17 : MutBorrow.t t_Vec = Any.any_l () ]
  
  [ return''0 (result:())-> {[@expl:remove_from_clause ensures #0] [%#sclause] inv'0 self.final (UInt64.t'int _f.t_Formula__num_vars)}
    {[@expl:remove_from_clause ensures #1] [%#sclause'2] forall i : int . 0 <= i /\ i < Seq.length (view'0 self.final)
     -> (exists j : int . 0 <= j
    /\ j < Seq.length (view'1 self) /\ Seq.get (view'0 self.final) i = Seq.get (view'1 self) j)}
    {[@expl:remove_from_clause ensures #2] [%#sclause'3] Seq.length (view'0 self.final) + 1 = Seq.length (view'1 self)}
    {[@expl:remove_from_clause ensures #3] [%#sclause'4] not lit_in (Seq.get (view'1 self) (UInt64.t'int idx)) self.final}
    {[@expl:remove_from_clause ensures #4] [%#sclause'5] forall j : int . 0 <= j
    /\ j < Seq.length (view'1 self) /\ j <> UInt64.t'int idx  -> lit_in (Seq.get (view'1 self) j) self.final}
    (! return' {result}) ]
  
