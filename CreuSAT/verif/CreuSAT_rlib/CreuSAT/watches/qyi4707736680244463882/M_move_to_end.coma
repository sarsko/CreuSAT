(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 121 4 121 93 *)

(* watches::Watches *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 89 26 89 48
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 158 27 158 46
let%span svec'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 159 26 159 54
let%span svec'4 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 160 26 160 57
let%span svec'5 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 161 26 161 62
let%span svec'6 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 162 26 162 55
let%span svec'7 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 181 26 181 42
let%span svec'8 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 182 26 182 48
let%span svec'9 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span smodel'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 258 19 258 35
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 259 19 259 35
let%span sslice'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 260 18 260 50
let%span sslice'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span sslice'4 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 137 20 137 94
let%span sslice'5 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 27 14 27 41
let%span sslice'6 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 28 14 28 42
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34
let%span slogic_lit = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 24 20 24 29
let%span slogic_lit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 45 20 45 89
let%span slogic_lit'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 31 20 31 33
let%span slogic_clause = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 14 4 14 12
let%span swatches = "/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 122 48 122 49
let%span swatches'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 115 4 115 37
let%span swatches'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 116 15 116 52
let%span swatches'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 117 15 117 68
let%span swatches'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 118 15 118 45
let%span swatches'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 119 15 119 56
let%span swatches'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 120 14 120 81
let%span slogic_watches = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 76 12 76 63
let%span slogic_watches'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 14 8 19 64

use creusot.prelude.Opaque
use creusot.int.UInt64
use seq.Seq
use mach.int.Int
use creusot.prelude.MutBorrow
use creusot.slice.Slice64
use seq.Permut
use creusot.int.UInt32
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Watches  =
  { t_Watches__watches: t_Vec }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Vec'0) =
  [%#sslice'2] UInt64.t'int self < Seq.length seq

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Vec'0

axiom view_spec : forall self : t_Vec . [%#svec'9] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : t_Vec) : Seq.seq t_Vec'0 =
  [%#smodel] view self

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Vec'0) (out : t_Vec'0) =
  [%#sslice'3] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:t_Vec'0))= {[@expl:index requires] [%#svec] in_bounds ix (view'0 self_)}
  any [ return''0 (result:t_Vec'0)-> {[%#svec'0] has_value ix (view'0 self_) result} (! return' {result}) ] 

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

type t_Watcher  =
  { t_Watcher__cref: UInt64.t; t_Watcher__blocker: t_Lit }

function view'1 (self : t_Vec'0) : Seq.seq t_Watcher

axiom view_spec'0 : forall self : t_Vec'0 . [%#svec'9] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'2 (self : t_Vec'0) : Seq.seq t_Watcher =
  [%#smodel] view'1 self

let rec len (self_:t_Vec'0) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec'1] UInt64.t'int result = Seq.length (view'2 self_)} (! return' {result}) ]


function view'3 (self : MutBorrow.t t_Vec) : Seq.seq t_Vec'0 =
  [%#smodel'0] view self.current

predicate resolve_elswhere [@inline:trivial] (self : UInt64.t) (old' : Seq.seq t_Vec'0) (fin : Seq.seq t_Vec'0) =
  [%#sslice'4] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
   -> Seq.get old' i = Seq.get fin i

let rec index_mut (self_:MutBorrow.t t_Vec) (ix:UInt64.t) (return'  (x:MutBorrow.t t_Vec'0))= {[@expl:index_mut requires] [%#svec'2] in_bounds ix (view'3 self_)}
  any
  [ return''0 (result:MutBorrow.t t_Vec'0)-> {[%#svec'3] has_value ix (view'3 self_) result.current}
    {[%#svec'4] has_value ix (view self_.final) result.final}
    {[%#svec'5] resolve_elswhere ix (view'3 self_) (view self_.final)}
    {[%#svec'6] Seq.length (view self_.final) = Seq.length (view'3 self_)}
    (! return' {result}) ]


function view'4 (self : Slice64.slice t_Watcher) : Seq.seq t_Watcher

axiom view_spec'1 : forall self : Slice64.slice t_Watcher . ([%#sslice'5] Seq.length (view'4 self)
<= UInt64.t'int (v_MAX : UInt64.t))
&& ([%#sslice'6] view'4 self = Slice64.id self)

function view'5 (self : MutBorrow.t (Slice64.slice t_Watcher)) : Seq.seq t_Watcher =
  [%#smodel'0] view'4 self.current

function view'6 (self : MutBorrow.t t_Vec'0) : Seq.seq t_Watcher =
  [%#smodel'0] view'1 self.current

let rec deref_mut (self_:MutBorrow.t t_Vec'0) (return'  (x:MutBorrow.t (Slice64.slice t_Watcher)))= any
  [ return''0 (result:MutBorrow.t (Slice64.slice t_Watcher))-> {[%#svec'7] view'5 result = view'6 self_}
    {[%#svec'8] view'4 result.final = view'1 self_.final}
    (! return' {result}) ]


let rec swap (self_:MutBorrow.t (Slice64.slice t_Watcher)) (i:UInt64.t) (j:UInt64.t) (return'  (x:()))= {[@expl:swap requires #0] [%#sslice] UInt64.t'int i
  < Seq.length (view'5 self_)}
  {[@expl:swap requires #1] [%#sslice'0] UInt64.t'int j < Seq.length (view'5 self_)}
  any
  [ return''0 (result:())-> {[%#sslice'1] Permut.exchange (view'4 self_.final) (view'5 self_) (UInt64.t'int i) (UInt64.t'int j)}
    (! return' {result}) ]


predicate resolve (self : MutBorrow.t t_Vec'0) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0 : MutBorrow.t t_Vec'0) =
  resolve _0

predicate resolve'1 (self : MutBorrow.t (Slice64.slice t_Watcher)) =
  [%#sresolve] self.final = self.current

predicate resolve'2 (_0 : MutBorrow.t (Slice64.slice t_Watcher)) =
  resolve'1 _0

predicate resolve'3 (self : MutBorrow.t t_Watches) =
  [%#sresolve] self.final = self.current

predicate resolve'4 (_0 : MutBorrow.t t_Watches) =
  resolve'3 _0

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec'1; t_Formula__num_vars: UInt64.t }

type t_RawVec'2  =
  { t_RawVec__inner'2: t_RawVecInner; t_RawVec__qy95zmarker'2: () }

type t_Vec'2  =
  { t_Vec__buf'2: t_RawVec'2; t_Vec__len'2: UInt64.t }

type t_Clause  =
  { t_Clause__deleted: bool; t_Clause__lbd: UInt32.t; t_Clause__search: UInt64.t; t_Clause__lits: t_Vec'2 }

function view'7 (self : t_Vec'1) : Seq.seq t_Clause

axiom view_spec'2 : forall self : t_Vec'1 . [%#svec'9] Seq.length (view'7 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'8 (self : t_Vec'2) : Seq.seq t_Lit

axiom view_spec'3 : forall self : t_Vec'2 . [%#svec'9] Seq.length (view'8 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'9 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 16 4 16 33] (self : t_Clause) : Seq.seq t_Lit

 =
  [%#slogic_clause] view'8 self.t_Clause__lits

function index_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 23 4 23 35] (self : t_Lit) : int =
  [%#slogic_lit] UInt64.t'int self.t_Lit__idx

predicate watches_inv_internal [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 12 0 12 77] (w : Seq.seq t_Vec'0) (n : int) (f : t_Formula)

 =
  [%#slogic_watches'0] 2 * n = Seq.length w
  /\ (forall i : int . 0 <= i /\ i < Seq.length w
   -> (forall j : int . 0 <= j /\ j < Seq.length (view'1 (Seq.get w i))
   -> UInt64.t'int (Seq.get (view'1 (Seq.get w i)) j).t_Watcher__cref < Seq.length (view'7 f.t_Formula__clauses)
  /\ Seq.length (view'9 (Seq.get (view'7 f.t_Formula__clauses) (UInt64.t'int (Seq.get (view'1 (Seq.get w i)) j).t_Watcher__cref)))
  > 1
  /\ index_logic (Seq.get (view'1 (Seq.get w i)) j).t_Watcher__blocker < UInt64.t'int f.t_Formula__num_vars))

predicate inv [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 74 4 74 40] (self : t_Watches) (f : t_Formula)

 =
  [%#slogic_watches] watches_inv_internal (view self.t_Watches__watches) (UInt64.t'int f.t_Formula__num_vars) f

constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)

function is_positive_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 30 4 30 42] (self : t_Lit) : bool =
  [%#slogic_lit'1] self.t_Lit__polarity

function to_neg_watchidx_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 44 4 44 45] (self : t_Lit) : int

 =
  [%#slogic_lit'0] index_logic self * 2 + (if is_positive_logic self then 1 else 0)

meta "compute_max_steps" 1000000

let rec move_to_end[#"/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 121 4 121 93] (self:MutBorrow.t t_Watches) (old_idx:UInt64.t) (old_pos:UInt64.t) (new_lit:t_Lit) (_f:t_Formula) (return'  (x:()))= {[@expl:move_to_end requires #0] [%#swatches'0] inv self.current _f}
  {[@expl:move_to_end requires #1] [%#swatches'1] index_logic new_lit < Int.div (UInt64.t'int v_MAX'0) 2}
  {[@expl:move_to_end requires #2] [%#swatches'2] to_neg_watchidx_logic new_lit
  < Seq.length (view (self.current).t_Watches__watches)}
  {[@expl:move_to_end requires #3] [%#swatches'3] UInt64.t'int old_idx
  < Seq.length (view (self.current).t_Watches__watches)}
  {[@expl:move_to_end requires #4] [%#swatches'4] UInt64.t'int old_pos
  < Seq.length (view'1 (Seq.get (view (self.current).t_Watches__watches) (UInt64.t'int old_idx)))}
  (! bb0
  [ bb0 = s0
    [ s0 = index {(self'0.current).t_Watches__watches} {old_idx'0} (fun (_ret:t_Vec'0) ->  [ &_16 <- _ret ] s1)
    | s1 = bb1 ]
  
  | bb1 = s0 [ s0 = len {_16} (fun (_ret:UInt64.t) ->  [ &_14 <- _ret ] s1) | s1 = bb2 ] 
  | bb2 = s0
    [ s0 = UInt64.sub {_14} {[%#swatches] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &end' <- _ret ] s1)
    | s1 = MutBorrow.borrow_final
        <t_Vec>
        {(self'0.current).t_Watches__watches}
        {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
        (fun (_ret:MutBorrow.t t_Vec) ->
           [ &_24 <- _ret ] 
           [ &self'0 <- { self'0 with current = { t_Watches__watches = _ret.final } } ] 
          s2)
    | s2 = index_mut {_24} {old_idx'0} (fun (_ret:MutBorrow.t t_Vec'0) ->  [ &_23 <- _ret ] s3)
    | s3 = bb3 ]
  
  | bb3 = s0
    [ s0 = MutBorrow.borrow_final <t_Vec'0> {_23.current} {MutBorrow.get_id _23}
        (fun (_ret:MutBorrow.t t_Vec'0) ->  [ &_22 <- _ret ]  [ &_23 <- { _23 with current = _ret.final } ] s1)
    | s1 = deref_mut {_22} (fun (_ret:MutBorrow.t (Slice64.slice t_Watcher)) ->  [ &_21 <- _ret ] s2)
    | s2 = bb4 ]
  
  | bb4 = s0
    [ s0 = MutBorrow.borrow_final <Slice64.slice t_Watcher> {_21.current} {MutBorrow.get_id _21}
        (fun (_ret:MutBorrow.t (Slice64.slice t_Watcher)) ->
           [ &_20 <- _ret ] 
           [ &_21 <- { _21 with current = _ret.final } ] 
          s1)
    | s1 = swap {_20} {old_pos'0} {end'} (fun (_ret:()) ->  [ &_19 <- _ret ] s2)
    | s2 = bb5 ]
  
  | bb5 = s0
    [ s0 = -{resolve'0 _23}- s1 | s1 = -{resolve'2 _21}- s2 | s2 = -{resolve'4 self'0}- s3 | s3 = return''0 {_0} ]
   ]
  )
  [ & _0 : () = Any.any_l ()
  | & self'0 : MutBorrow.t t_Watches = self
  | & old_idx'0 : UInt64.t = old_idx
  | & old_pos'0 : UInt64.t = old_pos
  | & end' : UInt64.t = Any.any_l ()
  | & _14 : UInt64.t = Any.any_l ()
  | & _16 : t_Vec'0 = Any.any_l ()
  | & _19 : () = Any.any_l ()
  | & _20 : MutBorrow.t (Slice64.slice t_Watcher) = Any.any_l ()
  | & _21 : MutBorrow.t (Slice64.slice t_Watcher) = Any.any_l ()
  | & _22 : MutBorrow.t t_Vec'0 = Any.any_l ()
  | & _23 : MutBorrow.t t_Vec'0 = Any.any_l ()
  | & _24 : MutBorrow.t t_Vec = Any.any_l () ]
  
  [ return''0 (result:())-> {[@expl:move_to_end ensures #0] [%#swatches'0] inv self.final _f}
    {[@expl:move_to_end ensures #1] [%#swatches'5] Seq.length (view'1 (Seq.get (view (self.final).t_Watches__watches) (UInt64.t'int old_idx)))
    = Seq.length (view'1 (Seq.get (view (self.current).t_Watches__watches) (UInt64.t'int old_idx)))}
    (! return' {result}) ]
  
