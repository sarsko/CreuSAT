(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 109 4 109 84 *)

(* watches::Watches *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 158 27 158 46
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 159 26 159 54
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 160 26 160 57
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 161 26 161 62
let%span svec'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 162 26 162 55
let%span svec'4 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 93 26 93 56
let%span svec'5 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 72 8 72 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span sslice'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 137 20 137 94
let%span sresolve = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/resolve.rs" 54 20 54 34
let%span slit = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 110 15 110 49
let%span slit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 111 14 111 53
let%span slit'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 112 14 112 94
let%span slogic_lit = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 24 20 24 29
let%span slogic_lit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 45 20 45 89
let%span slogic_lit'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 31 20 31 33
let%span slogic_clause = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 14 4 14 12
let%span swatches = "/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 102 4 102 37
let%span swatches'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 103 15 103 40
let%span swatches'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 104 15 104 48
let%span swatches'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 105 15 105 51
let%span swatches'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 106 15 106 64
let%span swatches'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 107 15 107 44
let%span swatches'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 108 14 108 59
let%span slogic_watches = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 76 12 76 63
let%span slogic_watches'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 14 8 19 64

use creusot.prelude.MutBorrow
use creusot.prelude.Opaque
use creusot.int.UInt64
use mach.int.Int
use seq.Seq
use creusot.int.UInt32
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Watches  =
  { t_Watches__watches: t_Vec }

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function index_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 23 4 23 35] (self : t_Lit) : int =
  [%#slogic_lit] UInt64.t'int self.t_Lit__idx

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function is_positive_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 30 4 30 42] (self : t_Lit) : bool =
  [%#slogic_lit'1] self.t_Lit__polarity

function to_neg_watchidx_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 44 4 44 45] (self : t_Lit) : int

 =
  [%#slogic_lit'0] index_logic self * 2 + (if is_positive_logic self then 1 else 0)

let rec to_neg_watchidx (self:t_Lit) (return'  (x:UInt64.t))= {[@expl:to_neg_watchidx requires] [%#slit] index_logic self
  < Int.div (UInt64.t'int v_MAX) 2}
  any
  [ return''0 (result:UInt64.t)-> {[%#slit'0] UInt64.t'int result = to_neg_watchidx_logic self}
    {[%#slit'1] UInt64.t'int result = index_logic self * 2 + (if is_positive_logic self then 1 else 0)}
    (! return' {result}) ]


type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Vec'0) =
  [%#sslice] UInt64.t'int self < Seq.length seq

constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Vec'0

axiom view_spec : forall self : t_Vec . [%#svec'5] Seq.length (view self) <= UInt64.t'int (v_MAX'0 : UInt64.t)

function view'0 (self : MutBorrow.t t_Vec) : Seq.seq t_Vec'0 =
  [%#smodel] view self.current

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Vec'0) (out : t_Vec'0) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

predicate resolve_elswhere [@inline:trivial] (self : UInt64.t) (old' : Seq.seq t_Vec'0) (fin : Seq.seq t_Vec'0) =
  [%#sslice'1] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
   -> Seq.get old' i = Seq.get fin i

let rec index_mut (self_:MutBorrow.t t_Vec) (ix:UInt64.t) (return'  (x:MutBorrow.t t_Vec'0))= {[@expl:index_mut requires] [%#svec] in_bounds ix (view'0 self_)}
  any
  [ return''0 (result:MutBorrow.t t_Vec'0)-> {[%#svec'0] has_value ix (view'0 self_) result.current}
    {[%#svec'1] has_value ix (view self_.final) result.final}
    {[%#svec'2] resolve_elswhere ix (view'0 self_) (view self_.final)}
    {[%#svec'3] Seq.length (view self_.final) = Seq.length (view'0 self_)}
    (! return' {result}) ]


type t_Watcher  =
  { t_Watcher__cref: UInt64.t; t_Watcher__blocker: t_Lit }

function view'1 (self : t_Vec'0) : Seq.seq t_Watcher

axiom view_spec'0 : forall self : t_Vec'0 . [%#svec'5] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)

function view'2 (self : MutBorrow.t t_Vec'0) : Seq.seq t_Watcher =
  [%#smodel] view'1 self.current

let rec push (self_:MutBorrow.t t_Vec'0) (v:t_Watcher) (return'  (x:()))= any
  [ return''0 (result:())-> {[%#svec'4] view'1 self_.final = Seq.snoc (view'2 self_) v} (! return' {result}) ]


predicate resolve (self : MutBorrow.t t_Vec'0) =
  [%#sresolve] self.final = self.current

predicate resolve'0 (_0 : MutBorrow.t t_Vec'0) =
  resolve _0

predicate resolve'1 (self : MutBorrow.t t_Watches) =
  [%#sresolve] self.final = self.current

predicate resolve'2 (_0 : MutBorrow.t t_Watches) =
  resolve'1 _0

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec'1; t_Formula__num_vars: UInt64.t }

type t_RawVec'2  =
  { t_RawVec__inner'2: t_RawVecInner; t_RawVec__qy95zmarker'2: () }

type t_Vec'2  =
  { t_Vec__buf'2: t_RawVec'2; t_Vec__len'2: UInt64.t }

type t_Clause  =
  { t_Clause__deleted: bool; t_Clause__lbd: UInt32.t; t_Clause__search: UInt64.t; t_Clause__lits: t_Vec'2 }

function view'3 (self : t_Vec'1) : Seq.seq t_Clause

axiom view_spec'1 : forall self : t_Vec'1 . [%#svec'5] Seq.length (view'3 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)

function view'4 (self : t_Vec'2) : Seq.seq t_Lit

axiom view_spec'2 : forall self : t_Vec'2 . [%#svec'5] Seq.length (view'4 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)

function view'5 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 16 4 16 33] (self : t_Clause) : Seq.seq t_Lit

 =
  [%#slogic_clause] view'4 self.t_Clause__lits

predicate watches_inv_internal [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 12 0 12 77] (w : Seq.seq t_Vec'0) (n : int) (f : t_Formula)

 =
  [%#slogic_watches'0] 2 * n = Seq.length w
  /\ (forall i : int . 0 <= i /\ i < Seq.length w
   -> (forall j : int . 0 <= j /\ j < Seq.length (view'1 (Seq.get w i))
   -> UInt64.t'int (Seq.get (view'1 (Seq.get w i)) j).t_Watcher__cref < Seq.length (view'3 f.t_Formula__clauses)
  /\ Seq.length (view'5 (Seq.get (view'3 f.t_Formula__clauses) (UInt64.t'int (Seq.get (view'1 (Seq.get w i)) j).t_Watcher__cref)))
  > 1
  /\ index_logic (Seq.get (view'1 (Seq.get w i)) j).t_Watcher__blocker < UInt64.t'int f.t_Formula__num_vars))

predicate inv [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_watches.rs" 74 4 74 40] (self : t_Watches) (f : t_Formula)

 =
  [%#slogic_watches] watches_inv_internal (view self.t_Watches__watches) (UInt64.t'int f.t_Formula__num_vars) f

meta "compute_max_steps" 1000000

let rec add_watcher[#"/Users/sarekhs/CreuSAT/CreuSAT/src/watches.rs" 109 4 109 84] (self:MutBorrow.t t_Watches) (lit:t_Lit) (cref:UInt64.t) (_f:t_Formula) (blocker:t_Lit) (return'  (x:()))= {[@expl:add_watcher requires #0] [%#swatches] inv self.current _f}
  {[@expl:add_watcher requires #1] [%#swatches'0] UInt64.t'int cref < Seq.length (view'3 _f.t_Formula__clauses)}
  {[@expl:add_watcher requires #2] [%#swatches'1] index_logic lit < Int.div (UInt64.t'int v_MAX) 2}
  {[@expl:add_watcher requires #3] [%#swatches'2] index_logic blocker < UInt64.t'int _f.t_Formula__num_vars}
  {[@expl:add_watcher requires #4] [%#swatches'3] to_neg_watchidx_logic lit
  < Seq.length (view (self.current).t_Watches__watches)}
  {[@expl:add_watcher requires #5] [%#swatches'4] Seq.length (view'5 (Seq.get (view'3 _f.t_Formula__clauses) (UInt64.t'int cref)))
  > 1}
  (! bb0
  [ bb0 = s0
    [ s0 = MutBorrow.borrow_final
        <t_Vec>
        {(self'0.current).t_Watches__watches}
        {MutBorrow.inherit_id (MutBorrow.get_id self'0) 1}
        (fun (_ret:MutBorrow.t t_Vec) ->
           [ &_17 <- _ret ] 
           [ &self'0 <- { self'0 with current = { t_Watches__watches = _ret.final } } ] 
          s1)
    | s1 = to_neg_watchidx {lit'0} (fun (_ret:UInt64.t) ->  [ &_18 <- _ret ] s2)
    | s2 = bb1 ]
  
  | bb1 = s0 [ s0 = index_mut {_17} {_18} (fun (_ret:MutBorrow.t t_Vec'0) ->  [ &_16 <- _ret ] s1) | s1 = bb2 ] 
  | bb2 = s0
    [ s0 = MutBorrow.borrow_final <t_Vec'0> {_16.current} {MutBorrow.get_id _16}
        (fun (_ret:MutBorrow.t t_Vec'0) ->  [ &_15 <- _ret ]  [ &_16 <- { _16 with current = _ret.final } ] s1)
    | s1 =  [ &_20 <- { t_Watcher__cref = cref'0; t_Watcher__blocker = blocker'0 } ] s2
    | s2 = push {_15} {_20} (fun (_ret:()) ->  [ &_14 <- _ret ] s3)
    | s3 = bb3 ]
  
  | bb3 = s0 [ s0 = -{resolve'0 _16}- s1 | s1 = -{resolve'2 self'0}- s2 | s2 = return''0 {_0} ]  ]
  )
  [ & _0 : () = Any.any_l ()
  | & self'0 : MutBorrow.t t_Watches = self
  | & lit'0 : t_Lit = lit
  | & cref'0 : UInt64.t = cref
  | & blocker'0 : t_Lit = blocker
  | & _14 : () = Any.any_l ()
  | & _15 : MutBorrow.t t_Vec'0 = Any.any_l ()
  | & _16 : MutBorrow.t t_Vec'0 = Any.any_l ()
  | & _17 : MutBorrow.t t_Vec = Any.any_l ()
  | & _18 : UInt64.t = Any.any_l ()
  | & _20 : t_Watcher = Any.any_l () ]
  
  [ return''0 (result:())-> {[@expl:add_watcher ensures #0] [%#swatches] inv self.final _f}
    {[@expl:add_watcher ensures #1] [%#swatches'5] Seq.length (view (self.current).t_Watches__watches)
    = Seq.length (view (self.final).t_Watches__watches)}
    (! return' {result}) ]
  
