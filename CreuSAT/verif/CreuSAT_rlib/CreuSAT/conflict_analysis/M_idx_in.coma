(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/conflict_analysis.rs" 25 0 25 61 *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span slogic_lit = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 13 8 14 37
let%span slogic_lit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 24 20 24 29
let%span slogic_lit'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 83 20 83 42
let%span slogic_clause = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 25 8 26 23
let%span sconflict_analysis = "/Users/sarekhs/CreuSAT/CreuSAT/src/conflict_analysis.rs" 21 11 21 47
let%span sconflict_analysis'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/conflict_analysis.rs" 22 11 22 29
let%span sconflict_analysis'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/conflict_analysis.rs" 23 11 23 48
let%span sconflict_analysis'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/conflict_analysis.rs" 24 10 24 90

use creusot.prelude.Opaque
use creusot.int.UInt64
use seq.Seq
use mach.int.Int
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq bool) =
  [%#sslice] UInt64.t'int self < Seq.length seq

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq bool

axiom view_spec : forall self : t_Vec . [%#svec'1] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : t_Vec) : Seq.seq bool =
  [%#smodel] view self

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq bool) (out : bool) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:bool))= {[@expl:index requires] [%#svec] in_bounds ix (view'0 self_)}
  any [ return''0 (result:bool)-> {[%#svec'0] has_value ix (view'0 self_) result} (! return' {result}) ] 

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function index_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 23 4 23 35] (self : t_Lit) : int =
  [%#slogic_lit'0] UInt64.t'int self.t_Lit__idx

predicate inv [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 82 4 82 36] (self : t_Lit) (n : int) =
  [%#slogic_lit'1] index_logic self < n

predicate vars_in_range_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 23 0 23 55] (s : Seq.seq t_Lit) (n : int)

 =
  [%#slogic_clause] forall i : int . 0 <= i /\ i < Seq.length s  -> inv (Seq.get s i) n

function view'1 (self : t_Vec'0) : Seq.seq t_Lit

axiom view_spec'0 : forall self : t_Vec'0 . [%#svec'1] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'2 (self : t_Vec'0) : Seq.seq t_Lit =
  [%#smodel] view'1 self

predicate idx_in_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 11 0 11 50] (idx : int) (c : Seq.seq t_Lit)

 =
  [%#slogic_lit] exists i : int . 0 <= i /\ i < Seq.length c /\ index_logic (Seq.get c i) = idx

meta "compute_max_steps" 1000000

let rec idx_in[#"/Users/sarekhs/CreuSAT/CreuSAT/src/conflict_analysis.rs" 25 0 25 61] (c:t_Vec'0) (idx:UInt64.t) (seen:t_Vec) (return'  (x:bool))= {[@expl:idx_in requires #0] [%#sconflict_analysis] vars_in_range_inner (view'2 c) (Seq.length (view'0 seen))}
  {[@expl:idx_in requires #1] [%#sconflict_analysis'0] UInt64.t'int idx < Seq.length (view'0 seen)}
  {[@expl:idx_in requires #2] [%#sconflict_analysis'1] Seq.get (view'0 seen) (UInt64.t'int idx)
  = idx_in_logic (UInt64.t'int idx) (view'2 c)}
  (! bb0
  [ bb0 = s0 [ s0 = index {seen'0} {idx'0} (fun (_ret:bool) ->  [ &_8 <- _ret ] s1) | s1 = bb1 ] 
  | bb1 = s0 [ s0 =  [ &_0 <- _8 ] s1 | s1 = return''0 {_0} ]  ]
  ) [ & _0 : bool = Any.any_l () | & idx'0 : UInt64.t = idx | & seen'0 : t_Vec = seen | & _8 : bool = Any.any_l () ] 
  [ return''0 (result:bool)-> {[@expl:idx_in ensures] [%#sconflict_analysis'2] result
    = (exists i : int . 0 <= i /\ i < Seq.length (view'2 c) /\ index_logic (Seq.get (view'2 c) i) = UInt64.t'int idx)}
    (! return' {result}) ]
  
