(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 96 4 96 68 *)

(* formula::Formula *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span slogic_assignments = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 53 12 54 74
let%span slogic_assignments'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 17 4 17 12
let%span slit = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 64 15 64 33
let%span slit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/lit.rs" 65 14 65 36
let%span slogic_lit = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 117 20 117 38
let%span slogic_lit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 90 12 93 13
let%span slogic_lit'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 83 20 83 42
let%span slogic_lit'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 31 20 31 33
let%span slogic_lit'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 24 20 24 29
let%span slogic_formula = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 79 14 79 41
let%span slogic_formula'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 81 20 81 44
let%span slogic_formula'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 88 12 92 45
let%span slogic_formula'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 30 8 31 69
let%span slogic_formula'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 22 8 22 85
let%span slogic_clause = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 196 12 196 30
let%span slogic_clause'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 14 4 14 12
let%span slogic_clause'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 187 12 188 37
let%span slogic_clause'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 227 20 227 42
let%span slogic_clause'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 33 4 33 62
let%span slogic_clause'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 25 8 26 23
let%span slogic_clause'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 48 8 49 92
let%span sclause = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 92 14 92 36
let%span sclause'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 22 15 22 32
let%span sclause'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 23 14 23 35
let%span sformula = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 98 27 98 28
let%span sformula'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 99 20 99 75
let%span sformula'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 104 17 104 18
let%span sformula'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 102 23 102 27
let%span sformula'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 106 8 106 13
let%span sformula'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 92 15 92 25
let%span sformula'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 93 15 93 27
let%span sformula'6 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 94 15 94 41
let%span sformula'7 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 95 14 95 51

use creusot.prelude.Opaque
use creusot.int.UInt64
use creusot.int.UInt32
use seq.Seq
use mach.int.Int
use creusot.int.UInt8
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec; t_Formula__num_vars: UInt64.t }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_Clause  =
  { t_Clause__deleted: bool; t_Clause__lbd: UInt32.t; t_Clause__search: UInt64.t; t_Clause__lits: t_Vec'0 }

predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Clause) =
  [%#sslice] UInt64.t'int self < Seq.length seq

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Clause

axiom view_spec : forall self : t_Vec . [%#svec'1] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : t_Vec) : Seq.seq t_Clause =
  [%#smodel] view self

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Clause) (out : t_Clause) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:t_Clause))= {[@expl:index requires] [%#svec] in_bounds ix (view'0 self_)}
  any [ return''0 (result:t_Clause)-> {[%#svec'0] has_value ix (view'0 self_) result} (! return' {result}) ] 

type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

type t_Assignments  =
  { t_Assignments__0: t_Vec'1 }

function is_positive_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 30 4 30 42] (self : t_Lit) : bool =
  [%#slogic_lit'2] self.t_Lit__polarity

function index_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 23 4 23 35] (self : t_Lit) : int =
  [%#slogic_lit'3] UInt64.t'int self.t_Lit__idx

predicate sat_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 88 4 88 57] (self : t_Lit) (a : Seq.seq UInt8.t)

 =
  [%#slogic_lit'0] if is_positive_logic self then
    UInt8.t'int (Seq.get a (index_logic self)) = 1
  else
    UInt8.t'int (Seq.get a (index_logic self)) = 0


function view'1 (self : t_Vec'1) : Seq.seq UInt8.t

axiom view_spec'0 : forall self : t_Vec'1 . [%#svec'1] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'2 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 19 4 19 33] (self : t_Assignments) : Seq.seq UInt8.t

 =
  [%#slogic_assignments'0] view'1 self.t_Assignments__0

predicate sat [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 116 4 116 44] (self : t_Lit) (a : t_Assignments)
 =
  [%#slogic_lit] sat_inner self (view'2 a)

function view'3 (self : t_Vec'0) : Seq.seq t_Lit

axiom view_spec'1 : forall self : t_Vec'0 . [%#svec'1] Seq.length (view'3 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'4 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 16 4 16 33] (self : t_Clause) : Seq.seq t_Lit

 =
  [%#slogic_clause'0] view'3 self.t_Clause__lits

function view'5 (self : t_Clause) : Seq.seq t_Lit =
  [%#smodel] view'4 self

let rec len (self:t_Clause) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#sclause] UInt64.t'int result = Seq.length (view'5 self)} (! return' {result}) ]


let rec index'0 (self:t_Clause) (ix:UInt64.t) (return'  (x:t_Lit))= {[@expl:index requires] [%#sclause'0] UInt64.t'int ix
  < Seq.length (view'5 self)}
  any
  [ return''0 (result:t_Lit)-> {[%#sclause'1] Seq.get (view'5 self) (UInt64.t'int ix) = result} (! return' {result}) ]


predicate inv [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 82 4 82 36] (self : t_Lit) (n : int) =
  [%#slogic_lit'1] index_logic self < n

function view'6 (self : t_Assignments) : Seq.seq UInt8.t =
  [%#smodel] view'2 self

let rec lit_sat (self:t_Lit) (a:t_Assignments) (return'  (x:bool))= {[@expl:lit_sat requires] [%#slit] inv self (Seq.length (view'6 a))}
  any [ return''0 (result:bool)-> {[%#slit'0] result = sat self a} (! return' {result}) ] 

predicate vars_in_range_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 23 0 23 55] (s : Seq.seq t_Lit) (n : int)

 =
  [%#slogic_clause'4] forall i : int . 0 <= i /\ i < Seq.length s  -> inv (Seq.get s i) n

predicate no_duplicate_indexes_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 46 0 46 54] (s : Seq.seq t_Lit)

 =
  [%#slogic_clause'5] forall j : int, k : int . 0 <= j /\ j < Seq.length s /\ 0 <= k /\ k < Seq.length s /\ k <> j
   -> index_logic (Seq.get s k) <> index_logic (Seq.get s j)

predicate inv_internal [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 32 0 32 48] (s : Seq.seq t_Lit) (n : int)

 =
  [%#slogic_clause'3] vars_in_range_inner s n /\ no_duplicate_indexes_inner s

predicate inv'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 226 4 226 36] (self : t_Clause) (n : int) =
  [%#slogic_clause'2] inv_internal (view'4 self) n

predicate inv_mirror [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 86 4 86 35] (self : t_Formula) =
  [%#slogic_formula'1] (forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> inv'0 (Seq.get (view self.t_Formula__clauses) i) (UInt64.t'int self.t_Formula__num_vars))
  /\ (forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> Seq.length (view'4 (Seq.get (view self.t_Formula__clauses) i)) >= 1)

type t_FormulaModel  =
  { t_FormulaModel__clauses: Seq.seq t_Clause; t_FormulaModel__num_vars: int }

predicate formula_invariant [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 28 0 28 49] (f : t_FormulaModel)

 =
  [%#slogic_formula'2] forall i : int . 0 <= i /\ i < Seq.length f.t_FormulaModel__clauses
   -> inv'0 (Seq.get f.t_FormulaModel__clauses i) f.t_FormulaModel__num_vars
  /\ Seq.length (view'4 (Seq.get f.t_FormulaModel__clauses i)) > 0

function view'7 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 21 4 21 33] (self : t_Formula) : t_FormulaModel

 =
  [%#slogic_formula'3] { t_FormulaModel__clauses = view self.t_Formula__clauses;
                         t_FormulaModel__num_vars = UInt64.t'int self.t_Formula__num_vars }

predicate inv'1 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 80 4 80 28] (self : t_Formula) =
  [%#slogic_formula'0] formula_invariant (view'7 self)

axiom inv_spec : forall self : t_Formula . [%#slogic_formula] inv'1 self = inv_mirror self

predicate inv'2 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 51 4 51 40] (self : t_Assignments) (f : t_Formula)

 =
  [%#slogic_assignments] UInt64.t'int f.t_Formula__num_vars = Seq.length (view'2 self)
  /\ (forall i : int . 0 <= i /\ i < Seq.length (view'2 self)  -> UInt8.t'int (Seq.get (view'2 self) i) <= 3)

predicate sat_inner'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 185 4 185 57] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#slogic_clause'1] exists i : int . 0 <= i /\ i < Seq.length (view'4 self) /\ sat_inner (Seq.get (view'4 self) i) a

predicate sat'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 194 4 194 44] (self : t_Clause) (a : t_Assignments)

 =
  [%#slogic_clause] sat_inner'0 self (view'2 a)

meta "compute_max_steps" 1000000

let rec is_clause_sat[#"/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 96 4 96 68] (self:t_Formula) (idx:UInt64.t) (a:t_Assignments) (return'  (x:bool))= {[@expl:is_clause_sat requires #0] [%#sformula'4] inv'1 self}
  {[@expl:is_clause_sat requires #1] [%#sformula'5] inv'2 a self}
  {[@expl:is_clause_sat requires #2] [%#sformula'6] UInt64.t'int idx < Seq.length (view self.t_Formula__clauses)}
  (! bb0
  [ bb0 = s0 [ s0 = index {self'0.t_Formula__clauses} {idx'0} (fun (_ret:t_Clause) ->  [ &_9 <- _ret ] s1) | s1 = bb1 ] 
  | bb1 = s0 [ s0 =  [ &clause <- _9 ] s1 | s1 =  [ &i <- [%#sformula] (0 : UInt64.t) ] s2 | s2 = bb2 ] 
  | bb2 = bb2'0
    [ bb2'0 = {[@expl:loop invariant] [%#sformula'0] forall j : int . 0 <= j /\ j < UInt64.t'int i
       -> not sat (Seq.get (view'5 clause) j) a'0}
      (! s0) [ s0 = bb3 ] 
      [ bb3 = s0 [ s0 = len {clause} (fun (_ret:UInt64.t) ->  [ &_19 <- _ret ] s1) | s1 = bb4 ] 
      | bb4 = s0
        [ s0 =  [ &_17 <- UInt64.lt i _19 ] s1 | s1 = any [ br0 -> {_17 = false} (! bb10) | br1 -> {_17} (! bb5) ]  ]
      
      | bb5 = s0 [ s0 = index'0 {clause} {i} (fun (_ret:t_Lit) ->  [ &_24 <- _ret ] s1) | s1 = bb6 ] 
      | bb6 = s0 [ s0 = lit_sat {_24} {a'0} (fun (_ret:bool) ->  [ &_22 <- _ret ] s1) | s1 = bb7 ] 
      | bb7 = any [ br0 -> {_22 = false} (! bb9) | br1 -> {_22} (! bb8) ] 
      | bb9 = s0
        [ s0 = UInt64.add {i} {[%#sformula'1] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s1) | s1 = bb2'0 ]
       ]
     ]
  
  | bb8 = s0 [ s0 =  [ &_0 <- [%#sformula'2] true ] s1 | s1 = bb11 ] 
  | bb10 = s0 [ s0 =  [ &_0 <- [%#sformula'3] false ] s1 | s1 = bb11 ] 
  | bb11 = return''0 {_0} ]
  )
  [ & _0 : bool = Any.any_l ()
  | & self'0 : t_Formula = self
  | & idx'0 : UInt64.t = idx
  | & a'0 : t_Assignments = a
  | & clause : t_Clause = Any.any_l ()
  | & _9 : t_Clause = Any.any_l ()
  | & i : UInt64.t = Any.any_l ()
  | & _17 : bool = Any.any_l ()
  | & _19 : UInt64.t = Any.any_l ()
  | & _22 : bool = Any.any_l ()
  | & _24 : t_Lit = Any.any_l () ]
  
  [ return''0 (result:bool)-> {[@expl:is_clause_sat ensures] [%#sformula'7] result
    = sat'0 (Seq.get (view self.t_Formula__clauses) (UInt64.t'int idx)) a}
    (! return' {result}) ]
  
