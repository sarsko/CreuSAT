(* #"/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 66 4 66 54 *)

(* formula::Formula *)

let%span svec = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 89 26 89 48
let%span svec'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 80 26 80 44
let%span svec'1 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 21 14 21 41
let%span svec'2 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 168 27 168 46
let%span svec'3 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/vec.rs" 169 26 169 54
let%span smodel = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/model.rs" 54 8 54 22
let%span sslice = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 123 20 123 37
let%span sslice'0 = "/Users/sarekhs/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/creusot-contracts-0.5.0/src/std/slice.rs" 130 20 130 37
let%span slogic_assignments = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 37 8 37 61
let%span slogic_lit = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 90 12 93 13
let%span slogic_lit'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 83 20 83 42
let%span slogic_lit'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 24 20 24 29
let%span slogic_lit'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 31 20 31 33
let%span slogic_formula = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 39 8 40 37
let%span slogic_formula'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 152 20 152 80
let%span slogic_formula'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 79 14 79 41
let%span slogic_formula'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 81 20 81 44
let%span slogic_formula'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 22 8 22 85
let%span slogic_formula'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 88 12 92 45
let%span slogic_formula'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 30 8 31 69
let%span slogic_formula'6 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 48 8 48 111
let%span slogic = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic.rs" 25 8 29 9
let%span slogic_clause = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 14 4 14 12
let%span slogic_clause'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 227 20 227 42
let%span slogic_clause'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 33 4 33 62
let%span slogic_clause'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 187 12 188 37
let%span slogic_clause'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 105 20 105 53
let%span slogic_clause'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 25 8 26 23
let%span slogic_clause'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 48 8 49 92
let%span slogic_clause'6 = "/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 40 8 40 134
let%span sclause = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 54 14 54 36
let%span sclause'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/clause.rs" 92 14 92 36
let%span sformula = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 67 41 67 42
let%span sformula'0 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 67 28 67 42
let%span sformula'1 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 67 28 67 38
let%span sformula'2 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 70 33 70 34
let%span sformula'3 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 73 28 73 29
let%span sformula'4 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 76 27 76 28
let%span sformula'5 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 78 20 78 83
let%span sformula'6 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 77 20 77 92
let%span sformula'7 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 83 40 83 41
let%span sformula'8 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 86 17 86 18
let%span sformula'9 = "/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 60 14 65 5

use creusot.int.UInt64
use creusot.prelude.Opaque
use seq.Seq
use creusot.int.UInt32
use mach.int.Int
use creusot.int.UInt8
use creusot.prelude.Any

type t_NonNull  =
  { t_NonNull__pointer: Opaque.ptr }

type t_Unique  =
  { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }

type t_UsizeNoHighBit  =
  { t_UsizeNoHighBit__0: UInt64.t }

type t_RawVecInner  =
  { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }

type t_RawVec  =
  { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }

type t_Vec  =
  { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }

type t_Formula  =
  { t_Formula__clauses: t_Vec; t_Formula__num_vars: UInt64.t }

type t_RawVec'0  =
  { t_RawVec__inner'0: t_RawVecInner; t_RawVec__qy95zmarker'0: () }

type t_Vec'0  =
  { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }

type t_SatResult  =
  | C_Sat t_Vec'0
  | C_Unsat
  | C_Unknown
  | C_Err

type t_RawVec'1  =
  { t_RawVec__inner'1: t_RawVecInner; t_RawVec__qy95zmarker'1: () }

type t_Vec'1  =
  { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }

type t_Clause  =
  { t_Clause__deleted: bool; t_Clause__lbd: UInt32.t; t_Clause__search: UInt64.t; t_Clause__lits: t_Vec'1 }

constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)

function view (self : t_Vec) : Seq.seq t_Clause

axiom view_spec : forall self : t_Vec . [%#svec'1] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'0 (self : t_Vec) : Seq.seq t_Clause =
  [%#smodel] view self

let rec len (self_:t_Vec) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#svec] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]


function view'1 (self : t_Vec'0) : Seq.seq UInt8.t

axiom view_spec'0 : forall self : t_Vec'0 . [%#svec'1] Seq.length (view'1 self) <= UInt64.t'int (v_MAX : UInt64.t)

let rec new (return'  (x:t_Vec'0))= any
  [ return''0 (result:t_Vec'0)-> {[%#svec'0] Seq.length (view'1 result) = 0} (! return' {result}) ]


type t_Lit  =
  { t_Lit__idx: UInt64.t; t_Lit__polarity: bool }

function view'2 (self : t_Vec'1) : Seq.seq t_Lit

axiom view_spec'1 : forall self : t_Vec'1 . [%#svec'1] Seq.length (view'2 self) <= UInt64.t'int (v_MAX : UInt64.t)

function view'3 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 16 4 16 33] (self : t_Clause) : Seq.seq t_Lit

 =
  [%#slogic_clause] view'2 self.t_Clause__lits

function index_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 23 4 23 35] (self : t_Lit) : int =
  [%#slogic_lit'1] UInt64.t'int self.t_Lit__idx

predicate inv [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 82 4 82 36] (self : t_Lit) (n : int) =
  [%#slogic_lit'0] index_logic self < n

predicate vars_in_range_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 23 0 23 55] (s : Seq.seq t_Lit) (n : int)

 =
  [%#slogic_clause'4] forall i : int . 0 <= i /\ i < Seq.length s  -> inv (Seq.get s i) n

predicate no_duplicate_indexes_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 46 0 46 54] (s : Seq.seq t_Lit)

 =
  [%#slogic_clause'5] forall j : int, k : int . 0 <= j /\ j < Seq.length s /\ 0 <= k /\ k < Seq.length s /\ k <> j
   -> index_logic (Seq.get s k) <> index_logic (Seq.get s j)

predicate inv_internal [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 32 0 32 48] (s : Seq.seq t_Lit) (n : int)

 =
  [%#slogic_clause'1] vars_in_range_inner s n /\ no_duplicate_indexes_inner s

predicate inv'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 226 4 226 36] (self : t_Clause) (n : int) =
  [%#slogic_clause'0] inv_internal (view'3 self) n

predicate in_bounds [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Clause) =
  [%#sslice] UInt64.t'int self < Seq.length seq

predicate has_value [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Clause) (out : t_Clause) =
  [%#sslice'0] Seq.get seq (UInt64.t'int self) = out

let rec index (self_:t_Vec) (ix:UInt64.t) (return'  (x:t_Clause))= {[@expl:index requires] [%#svec'2] in_bounds ix (view'0 self_)}
  any [ return''0 (result:t_Clause)-> {[%#svec'3] has_value ix (view'0 self_) result} (! return' {result}) ] 

let rec check_clause_invariant (self:t_Clause) (n:UInt64.t) (return'  (x:bool))= any
  [ return''0 (result:bool)-> {[%#sclause] result = inv'0 self (UInt64.t'int n)} (! return' {result}) ]


function view'4 (self : t_Clause) : Seq.seq t_Lit =
  [%#smodel] view'3 self

let rec len'0 (self:t_Clause) (return'  (x:UInt64.t))= any
  [ return''0 (result:UInt64.t)-> {[%#sclause'0] UInt64.t'int result = Seq.length (view'4 self)} (! return' {result}) ]


type t_FormulaModel  =
  { t_FormulaModel__clauses: Seq.seq t_Clause; t_FormulaModel__num_vars: int }

function is_positive_logic [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 30 4 30 42] (self : t_Lit) : bool =
  [%#slogic_lit'2] self.t_Lit__polarity

predicate sat_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_lit.rs" 88 4 88 57] (self : t_Lit) (a : Seq.seq UInt8.t)

 =
  [%#slogic_lit] if is_positive_logic self then
    UInt8.t'int (Seq.get a (index_logic self)) = 1
  else
    UInt8.t'int (Seq.get a (index_logic self)) = 0


predicate sat_inner'0 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 185 4 185 57] (self : t_Clause) (a : Seq.seq UInt8.t)

 =
  [%#slogic_clause'2] exists i : int . 0 <= i /\ i < Seq.length (view'3 self) /\ sat_inner (Seq.get (view'3 self) i) a

predicate formula_sat_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 37 0 37 72] (f : t_FormulaModel) (a : Seq.seq UInt8.t)

 =
  [%#slogic_formula] forall i : int . 0 <= i /\ i < Seq.length f.t_FormulaModel__clauses
   -> sat_inner'0 (Seq.get f.t_FormulaModel__clauses i) a

function view'5 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 21 4 21 33] (self : t_Formula) : t_FormulaModel

 =
  [%#slogic_formula'3] { t_FormulaModel__clauses = view self.t_Formula__clauses;
                         t_FormulaModel__num_vars = UInt64.t'int self.t_Formula__num_vars }

function view'6 (self : t_Formula) : t_FormulaModel =
  [%#smodel] view'5 self

predicate unset [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic.rs" 23 0 23 38] (v : UInt8.t) =
  [%#slogic] if UInt8.t'int v >= 2 then true else false

predicate complete_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_assignments.rs" 35 0 35 52] (a : Seq.seq UInt8.t)

 =
  [%#slogic_assignments] forall i : int . 0 <= i /\ i < Seq.length a  -> not unset (Seq.get a i)

predicate eventually_sat_complete [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 46 0 46 55] (f : t_FormulaModel)

 =
  [%#slogic_formula'6] exists a2 : Seq.seq UInt8.t . Seq.length a2 = f.t_FormulaModel__num_vars
  /\ complete_inner a2 /\ formula_sat_inner f a2

predicate equisat_extension_inner [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 38 0 38 66] (c : t_Clause) (f : t_FormulaModel)

 =
  [%#slogic_clause'6] eventually_sat_complete f
   -> eventually_sat_complete { t_FormulaModel__clauses = Seq.snoc f.t_FormulaModel__clauses c;
                                t_FormulaModel__num_vars = f.t_FormulaModel__num_vars }

predicate equisat_extension [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_clause.rs" 104 4 104 54] (self : t_Clause) (f : t_Formula)

 =
  [%#slogic_clause'3] equisat_extension_inner self (view'5 f)

predicate not_satisfiable [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 151 4 151 40] (self : t_Formula)
 =
  [%#slogic_formula'0] exists c : t_Clause . Seq.length (view'3 c) = 0 /\ equisat_extension c self

predicate inv_mirror [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 86 4 86 35] (self : t_Formula) =
  [%#slogic_formula'4] (forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> inv'0 (Seq.get (view self.t_Formula__clauses) i) (UInt64.t'int self.t_Formula__num_vars))
  /\ (forall i : int . 0 <= i /\ i < Seq.length (view self.t_Formula__clauses)
   -> Seq.length (view'3 (Seq.get (view self.t_Formula__clauses) i)) >= 1)

predicate formula_invariant [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 28 0 28 49] (f : t_FormulaModel)

 =
  [%#slogic_formula'5] forall i : int . 0 <= i /\ i < Seq.length f.t_FormulaModel__clauses
   -> inv'0 (Seq.get f.t_FormulaModel__clauses i) f.t_FormulaModel__num_vars
  /\ Seq.length (view'3 (Seq.get f.t_FormulaModel__clauses i)) > 0

predicate inv'1 [#"/Users/sarekhs/CreuSAT/CreuSAT/src/logic/logic_formula.rs" 80 4 80 28] (self : t_Formula) =
  [%#slogic_formula'2] formula_invariant (view'5 self)

axiom inv_spec : forall self : t_Formula . [%#slogic_formula'1] inv'1 self = inv_mirror self

constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)

meta "compute_max_steps" 1000000

let rec check_formula_invariant[#"/Users/sarekhs/CreuSAT/CreuSAT/src/formula.rs" 66 4 66 54] (self:t_Formula) (return'  (x:t_SatResult))= (! bb0
  [ bb0 = s0
    [ s0 =  [ &_7 <- ([%#sformula] (2 : UInt64.t)) = ([%#sformula'0] (0 : UInt64.t)) ] s1
    | s1 = {[@expl:division by zero] [%#sformula'0] not _7} s2
    | s2 = bb1 ]
  
  | bb1 = s0
    [ s0 = UInt64.div {[%#sformula'1] (18446744073709551615 : UInt64.t)} {[%#sformula] (2 : UInt64.t)}
        (fun (_ret:UInt64.t) ->  [ &_6 <- _ret ] s1)
    | s1 =  [ &_4 <- UInt64.ge self'0.t_Formula__num_vars _6 ] s2
    | s2 = any [ br0 -> {_4 = false} (! bb3) | br1 -> {_4} (! bb2) ]  ]
  
  | bb2 = s0 [ s0 =  [ &_0 <- C_Err ] s1 | s1 = bb25 ] 
  | bb3 = s0 [ s0 = len {self'0.t_Formula__clauses} (fun (_ret:UInt64.t) ->  [ &_11 <- _ret ] s1) | s1 = bb4 ] 
  | bb4 = s0
    [ s0 =  [ &_10 <- _11 = ([%#sformula'2] (0 : UInt64.t)) ] s1
    | s1 = any [ br0 -> {_10 = false} (! bb8) | br1 -> {_10} (! bb5) ]  ]
  
  | bb5 = s0 [ s0 = new (fun (_ret:t_Vec'0) ->  [ &_14 <- _ret ] s1) | s1 = bb6 ] 
  | bb6 = s0 [ s0 =  [ &_0 <- C_Sat _14 ] s1 | s1 = bb7 ] 
  | bb7 = bb25
  | bb8 = s0
    [ s0 =  [ &_16 <- self'0.t_Formula__num_vars = ([%#sformula'3] (0 : UInt64.t)) ] s1
    | s1 = any [ br0 -> {_16 = false} (! bb10) | br1 -> {_16} (! bb9) ]  ]
  
  | bb9 = s0 [ s0 =  [ &_0 <- C_Err ] s1 | s1 = bb25 ] 
  | bb10 = s0 [ s0 =  [ &i <- [%#sformula'4] (0 : UInt64.t) ] s1 | s1 = bb11 ] 
  | bb11 = bb11'0
    [ bb11'0 = {[@expl:loop invariant #0] [%#sformula'6] forall j : int . 0 <= j /\ j < UInt64.t'int i
       -> inv'0 (Seq.get (view self'0.t_Formula__clauses) j) (UInt64.t'int self'0.t_Formula__num_vars)}
      {[@expl:loop invariant #1] [%#sformula'5] forall j : int . 0 <= j /\ j < UInt64.t'int i
       -> Seq.length (view'3 (Seq.get (view self'0.t_Formula__clauses) j)) > 0}
      (! s0) [ s0 = bb12 ] 
      [ bb12 = s0 [ s0 = len {self'0.t_Formula__clauses} (fun (_ret:UInt64.t) ->  [ &_27 <- _ret ] s1) | s1 = bb13 ] 
      | bb13 = s0
        [ s0 =  [ &_25 <- UInt64.lt i _27 ] s1 | s1 = any [ br0 -> {_25 = false} (! bb23) | br1 -> {_25} (! bb14) ]  ]
      
      | bb14 = s0
        [ s0 = index {self'0.t_Formula__clauses} {i} (fun (_ret:t_Clause) ->  [ &_32 <- _ret ] s1) | s1 = bb15 ]
      
      | bb15 = s0
        [ s0 = check_clause_invariant {_32} {self'0.t_Formula__num_vars} (fun (_ret:bool) ->  [ &_30 <- _ret ] s1)
        | s1 = bb16 ]
      
      | bb16 = any [ br0 -> {_30 = false} (! bb18) | br1 -> {_30} (! bb17) ] 
      | bb17 = s0
        [ s0 = index {self'0.t_Formula__clauses} {i} (fun (_ret:t_Clause) ->  [ &_41 <- _ret ] s1) | s1 = bb19 ]
      
      | bb19 = s0 [ s0 = len'0 {_41} (fun (_ret:UInt64.t) ->  [ &_39 <- _ret ] s1) | s1 = bb20 ] 
      | bb20 = s0
        [ s0 =  [ &_38 <- _39 = ([%#sformula'7] (0 : UInt64.t)) ] s1
        | s1 = any [ br0 -> {_38 = false} (! bb22) | br1 -> {_38} (! bb21) ]  ]
      
      | bb22 = s0
        [ s0 = UInt64.add {i} {[%#sformula'8] (1 : UInt64.t)} (fun (_ret:UInt64.t) ->  [ &i <- _ret ] s1)
        | s1 = bb11'0 ]
       ]
     ]
  
  | bb21 = s0 [ s0 =  [ &_0 <- C_Unsat ] s1 | s1 = bb24 ] 
  | bb18 = s0 [ s0 =  [ &_0 <- C_Err ] s1 | s1 = bb24 ] 
  | bb24 = bb25
  | bb23 = s0 [ s0 =  [ &_0 <- C_Unknown ] s1 | s1 = bb25 ] 
  | bb25 = return''0 {_0} ]
  )
  [ & _0 : t_SatResult = Any.any_l ()
  | & self'0 : t_Formula = self
  | & _4 : bool = Any.any_l ()
  | & _6 : UInt64.t = Any.any_l ()
  | & _7 : bool = Any.any_l ()
  | & _10 : bool = Any.any_l ()
  | & _11 : UInt64.t = Any.any_l ()
  | & _14 : t_Vec'0 = Any.any_l ()
  | & _16 : bool = Any.any_l ()
  | & i : UInt64.t = Any.any_l ()
  | & _25 : bool = Any.any_l ()
  | & _27 : UInt64.t = Any.any_l ()
  | & _30 : bool = Any.any_l ()
  | & _32 : t_Clause = Any.any_l ()
  | & _38 : bool = Any.any_l ()
  | & _39 : UInt64.t = Any.any_l ()
  | & _41 : t_Clause = Any.any_l () ]
  
  [ return''0 (result:t_SatResult)-> {[@expl:check_formula_invariant ensures] [%#sformula'9] match result with
      | C_Sat assn -> formula_sat_inner (view'6 self) (view'1 assn)
      | C_Unsat -> not_satisfiable self
      | C_Unknown -> inv'1 self
      /\ 0 < UInt64.t'int self.t_Formula__num_vars
      /\ UInt64.t'int self.t_Formula__num_vars < Int.div (UInt64.t'int v_MAX'0) 2
      | C_Err -> true
      end}
    (! return' {result}) ]
  
